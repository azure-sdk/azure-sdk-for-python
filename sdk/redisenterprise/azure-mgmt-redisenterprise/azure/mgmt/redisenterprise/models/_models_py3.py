# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AccessKeys(_serialization.Model):
    """Redis Enterprise access keys response.

    All required parameters must be populated in order to send to Azure.

    :ivar primary_key: The current primary key that clients can use to authenticate. Required.
    :vartype primary_key: str
    :ivar secondary_key: The current secondary key that clients can use to authenticate. Required.
    :vartype secondary_key: str
    """

    _validation = {
        "primary_key": {"required": True},
        "secondary_key": {"required": True},
    }

    _attribute_map = {
        "primary_key": {"key": "primaryKey", "type": "str"},
        "secondary_key": {"key": "secondaryKey", "type": "str"},
    }

    def __init__(self, *, primary_key: str, secondary_key: str, **kwargs: Any) -> None:
        """
        :keyword primary_key: The current primary key that clients can use to authenticate. Required.
        :paramtype primary_key: str
        :keyword secondary_key: The current secondary key that clients can use to authenticate.
         Required.
        :paramtype secondary_key: str
        """
        super().__init__(**kwargs)
        self.primary_key = primary_key
        self.secondary_key = secondary_key


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Cluster(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Describes the RedisEnterprise cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar sku: The SKU to create, which affects price, performance, and features. Required.
    :vartype sku: ~azure.mgmt.redisenterprise.models.Sku
    :ivar host_name: DNS name of the cluster endpoint.
    :vartype host_name: str
    :ivar min_tls_version: The minimum TLS version for the cluster to support, e.g. the default of
     '1.2'. Known values are: "1.0", "1.1", and "1.2".
    :vartype min_tls_version: str or ~azure.mgmt.redisenterprise.models.TlsVersion
    :ivar provisioning_state: Current provisioning status of the last operation on the cluster.
     Known values are: "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting",
     and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.redisenterprise.models.ProvisioningState
    :ivar resource_state: Current resource status of the cluster. Known values are: "Running",
     "Creating", "CreateFailed", "Updating", "UpdateFailed", "Deleting", "DeleteFailed", "Enabling",
     "EnableFailed", "Disabling", "DisableFailed", and "Disabled".
    :vartype resource_state: str or ~azure.mgmt.redisenterprise.models.ResourceState
    :ivar redis_version: Version of redis the cluster supports, e.g. '6'.
    :vartype redis_version: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "sku": {"required": True},
        "host_name": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "resource_state": {"readonly": True},
        "redis_version": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "sku": {"key": "sku", "type": "Sku"},
        "host_name": {"key": "properties.hostName", "type": "str"},
        "min_tls_version": {"key": "properties.minTlsVersion", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "resource_state": {"key": "properties.resourceState", "type": "str"},
        "redis_version": {"key": "properties.redisVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        sku: "_models.Sku",
        tags: Optional[Dict[str, str]] = None,
        min_tls_version: Optional[Union[str, "_models.TlsVersion"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword sku: The SKU to create, which affects price, performance, and features. Required.
        :paramtype sku: ~azure.mgmt.redisenterprise.models.Sku
        :keyword min_tls_version: The minimum TLS version for the cluster to support, e.g. the default
         of '1.2'. Known values are: "1.0", "1.1", and "1.2".
        :paramtype min_tls_version: str or ~azure.mgmt.redisenterprise.models.TlsVersion
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.sku = sku
        self.host_name = None
        self.min_tls_version = min_tls_version
        self.provisioning_state = None
        self.resource_state = None
        self.redis_version = None


class ClusterListResult(_serialization.Model):
    """The response of a Cluster list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Cluster items on this page. Required.
    :vartype value: list[~azure.mgmt.redisenterprise.models.Cluster]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Cluster]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Cluster"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Cluster items on this page. Required.
        :paramtype value: list[~azure.mgmt.redisenterprise.models.Cluster]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ClusterNameParameter(_serialization.Model):
    """The cluster name parameter.

    All required parameters must be populated in order to send to Azure.

    :ivar cluster_name: Name of the cluster. Required.
    :vartype cluster_name: str
    """

    _validation = {
        "cluster_name": {"required": True, "min_length": 1, "pattern": r"[a-z0-9][-a-z0-9]*"},
    }

    _attribute_map = {
        "cluster_name": {"key": "clusterName", "type": "str"},
    }

    def __init__(self, *, cluster_name: str, **kwargs: Any) -> None:
        """
        :keyword cluster_name: Name of the cluster. Required.
        :paramtype cluster_name: str
        """
        super().__init__(**kwargs)
        self.cluster_name = cluster_name


class ClusterUpdate(_serialization.Model):
    """The type used for update operations of the Cluster.

    :ivar sku: The SKU to create, which affects price, performance, and features.
    :vartype sku: ~azure.mgmt.redisenterprise.models.SkuUpdate
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku_properties_sku: The SKU to create, which affects price, performance, and features.
    :vartype sku_properties_sku: ~azure.mgmt.redisenterprise.models.SkuUpdate
    :ivar tags_properties_tags: Resource tags.
    :vartype tags_properties_tags: dict[str, str]
    """

    _attribute_map = {
        "sku": {"key": "sku", "type": "SkuUpdate"},
        "tags": {"key": "tags", "type": "{str}"},
        "sku_properties_sku": {"key": "properties.sku", "type": "SkuUpdate"},
        "tags_properties_tags": {"key": "properties.tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        sku: Optional["_models.SkuUpdate"] = None,
        tags: Optional[Dict[str, str]] = None,
        sku_properties_sku: Optional["_models.SkuUpdate"] = None,
        tags_properties_tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku: The SKU to create, which affects price, performance, and features.
        :paramtype sku: ~azure.mgmt.redisenterprise.models.SkuUpdate
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku_properties_sku: The SKU to create, which affects price, performance, and features.
        :paramtype sku_properties_sku: ~azure.mgmt.redisenterprise.models.SkuUpdate
        :keyword tags_properties_tags: Resource tags.
        :paramtype tags_properties_tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.sku = sku
        self.tags = tags
        self.sku_properties_sku = sku_properties_sku
        self.tags_properties_tags = tags_properties_tags


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class Database(ProxyResource):
    """Describes a Database on a RedisEnterprise cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar client_protocol: Specifies whether redis clients can connect using TLS-encrypted or
     plaintext redis protocols. Default is TLS-encrypted. Known values are: "Encrypted" and
     "Plaintext".
    :vartype client_protocol: str or ~azure.mgmt.redisenterprise.models.ClientProtocol
    :ivar port: Port number for the database to listen on. E.g. 10000.
    :vartype port: int
    :ivar provisioning_state: Provisioning state of the database. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.redisenterprise.models.ProvisioningState
    :ivar persistence: Persistence settings.
    :vartype persistence: ~azure.mgmt.redisenterprise.models.Persistence
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "client_protocol": {"key": "properties.clientProtocol", "type": "str"},
        "port": {"key": "properties.port", "type": "int"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "persistence": {"key": "properties.persistence", "type": "Persistence"},
    }

    def __init__(
        self,
        *,
        client_protocol: Optional[Union[str, "_models.ClientProtocol"]] = None,
        port: Optional[int] = None,
        persistence: Optional["_models.Persistence"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword client_protocol: Specifies whether redis clients can connect using TLS-encrypted or
         plaintext redis protocols. Default is TLS-encrypted. Known values are: "Encrypted" and
         "Plaintext".
        :paramtype client_protocol: str or ~azure.mgmt.redisenterprise.models.ClientProtocol
        :keyword port: Port number for the database to listen on. E.g. 10000.
        :paramtype port: int
        :keyword persistence: Persistence settings.
        :paramtype persistence: ~azure.mgmt.redisenterprise.models.Persistence
        """
        super().__init__(**kwargs)
        self.client_protocol = client_protocol
        self.port = port
        self.provisioning_state = None
        self.persistence = persistence


class DatabaseCreateOrUpdate(ProxyResource):
    """Describes a Database on a RedisEnterprise cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar client_protocol: Specifies whether redis clients can connect using TLS-encrypted or
     plaintext redis protocols. Default is TLS-encrypted. Known values are: "Encrypted" and
     "Plaintext".
    :vartype client_protocol: str or ~azure.mgmt.redisenterprise.models.ClientProtocol
    :ivar eviction_policy: Redis eviction policy - default is VolatileLRU. Known values are:
     "AllKeysLFU", "AllKeysLRU", "AllKeysRandom", "VolatileLRU", "VolatileLFU", "VolatileTTL",
     "VolatileRandom", and "NoEviction".
    :vartype eviction_policy: str or ~azure.mgmt.redisenterprise.models.EvictionPolicy
    :ivar port: Port number for the database to listen on. E.g. 10000.
    :vartype port: int
    :ivar persistence: Persistence settings.
    :vartype persistence: ~azure.mgmt.redisenterprise.models.Persistence
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "client_protocol": {"key": "properties.clientProtocol", "type": "str"},
        "eviction_policy": {"key": "properties.evictionPolicy", "type": "str"},
        "port": {"key": "properties.port", "type": "int"},
        "persistence": {"key": "properties.persistence", "type": "Persistence"},
    }

    def __init__(
        self,
        *,
        client_protocol: Optional[Union[str, "_models.ClientProtocol"]] = None,
        eviction_policy: Optional[Union[str, "_models.EvictionPolicy"]] = None,
        port: Optional[int] = None,
        persistence: Optional["_models.Persistence"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword client_protocol: Specifies whether redis clients can connect using TLS-encrypted or
         plaintext redis protocols. Default is TLS-encrypted. Known values are: "Encrypted" and
         "Plaintext".
        :paramtype client_protocol: str or ~azure.mgmt.redisenterprise.models.ClientProtocol
        :keyword eviction_policy: Redis eviction policy - default is VolatileLRU. Known values are:
         "AllKeysLFU", "AllKeysLRU", "AllKeysRandom", "VolatileLRU", "VolatileLFU", "VolatileTTL",
         "VolatileRandom", and "NoEviction".
        :paramtype eviction_policy: str or ~azure.mgmt.redisenterprise.models.EvictionPolicy
        :keyword port: Port number for the database to listen on. E.g. 10000.
        :paramtype port: int
        :keyword persistence: Persistence settings.
        :paramtype persistence: ~azure.mgmt.redisenterprise.models.Persistence
        """
        super().__init__(**kwargs)
        self.client_protocol = client_protocol
        self.eviction_policy = eviction_policy
        self.port = port
        self.persistence = persistence


class DatabaseListResult(_serialization.Model):
    """The response of a Database list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Database items on this page. Required.
    :vartype value: list[~azure.mgmt.redisenterprise.models.Database]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Database]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Database"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Database items on this page. Required.
        :paramtype value: list[~azure.mgmt.redisenterprise.models.Database]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.redisenterprise.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.redisenterprise.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.redisenterprise.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.redisenterprise.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ExportParameters(_serialization.Model):
    """Export request. Parameters for a Redis Enterprise export operation.

    All required parameters must be populated in order to send to Azure.

    :ivar sas_uris: SAS URI for the target container directory to export from. Required.
    :vartype sas_uris: str
    """

    _validation = {
        "sas_uris": {"required": True},
    }

    _attribute_map = {
        "sas_uris": {"key": "sasUris", "type": "str"},
    }

    def __init__(self, *, sas_uris: str, **kwargs: Any) -> None:
        """
        :keyword sas_uris: SAS URI for the target container directory to export from. Required.
        :paramtype sas_uris: str
        """
        super().__init__(**kwargs)
        self.sas_uris = sas_uris


class FlushParameters(_serialization.Model):
    """Parameters for a Redis Enterprise Active Geo Replication Flush operation.

    All required parameters must be populated in order to send to Azure.

    :ivar ids: The resource IDs of the database resources to be flushed. Required.
    :vartype ids: list[str]
    """

    _validation = {
        "ids": {"required": True},
    }

    _attribute_map = {
        "ids": {"key": "ids", "type": "[str]"},
    }

    def __init__(self, *, ids: List[str], **kwargs: Any) -> None:
        """
        :keyword ids: The resource IDs of the database resources to be flushed. Required.
        :paramtype ids: list[str]
        """
        super().__init__(**kwargs)
        self.ids = ids


class ForceUnlinkParameters(_serialization.Model):
    """Parameters for a Redis Enterprise Active Geo Replication Force Unlink operation.

    All required parameters must be populated in order to send to Azure.

    :ivar ids: The resource IDs of the database resources to be unlinked. Required.
    :vartype ids: list[str]
    """

    _validation = {
        "ids": {"required": True},
    }

    _attribute_map = {
        "ids": {"key": "ids", "type": "[str]"},
    }

    def __init__(self, *, ids: List[str], **kwargs: Any) -> None:
        """
        :keyword ids: The resource IDs of the database resources to be unlinked. Required.
        :paramtype ids: list[str]
        """
        super().__init__(**kwargs)
        self.ids = ids


class ImportParameters(_serialization.Model):
    """Import request. Parameters for a Redis Enterprise import operation.

    All required parameters must be populated in order to send to Azure.

    :ivar sas_uris: SAS URIs for the target blobs to import from. Required.
    :vartype sas_uris: list[str]
    """

    _validation = {
        "sas_uris": {"required": True},
    }

    _attribute_map = {
        "sas_uris": {"key": "sasUris", "type": "[str]"},
    }

    def __init__(self, *, sas_uris: List[str], **kwargs: Any) -> None:
        """
        :keyword sas_uris: SAS URIs for the target blobs to import from. Required.
        :paramtype sas_uris: list[str]
        """
        super().__init__(**kwargs)
        self.sas_uris = sas_uris


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.redisenterprise.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.redisenterprise.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.redisenterprise.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.redisenterprise.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.redisenterprise.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationStatusResult(_serialization.Model):
    """Proxy resource for getting status of a long running operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: ID of the long running operation. Required.
    :vartype id: str
    :ivar name: Name of the async operation.
    :vartype name: str
    :ivar status: Current status of the operation. E.g. 'Succeeded', or 'Failed'. Required.
    :vartype status: str
    :ivar percent_complete: Progress of the operation, if known.
    :vartype percent_complete: any
    :ivar resource_id: Resource ID of the resource if known.
    :vartype resource_id: str
    :ivar start_time: Start time if known.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time if known.
    :vartype end_time: ~datetime.datetime
    :ivar operations: Status of child operations if known.
    :vartype operations: list[~azure.mgmt.redisenterprise.models.OperationStatusResult]
    :ivar error_detail: Error details if known.
    :vartype error_detail: ~azure.mgmt.redisenterprise.models.ErrorDetail
    """

    _validation = {
        "id": {"required": True, "readonly": True, "min_length": 1},
        "name": {"readonly": True},
        "status": {"required": True, "readonly": True},
        "percent_complete": {"readonly": True},
        "resource_id": {"readonly": True},
        "start_time": {"readonly": True},
        "end_time": {"readonly": True},
        "operations": {"readonly": True},
        "error_detail": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "percent_complete": {"key": "percentComplete", "type": "object"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "operations": {"key": "operations", "type": "[OperationStatusResult]"},
        "error_detail": {"key": "errorDetail", "type": "ErrorDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = None
        self.percent_complete = None
        self.resource_id = None
        self.start_time = None
        self.end_time = None
        self.operations = None
        self.error_detail = None


class Persistence(_serialization.Model):
    """Persistence-related configuration for the RedisEnterprise database.

    All required parameters must be populated in order to send to Azure.

    :ivar aof_enabled: Sets whether AOF is enabled. Defaults to false. Required.
    :vartype aof_enabled: bool
    :ivar rdb_enabled: Sets whether RDB is enabled. Defaults to false. Required.
    :vartype rdb_enabled: bool
    :ivar aof_frequency: Sets the frequency at which data is written to disk. Known values are:
     "1s" and "always".
    :vartype aof_frequency: str or ~azure.mgmt.redisenterprise.models.AofFrequency
    :ivar rdb_frequency: Sets the frequency at which a snapshot of the database is created. Known
     values are: "1h", "6h", and "12h".
    :vartype rdb_frequency: str or ~azure.mgmt.redisenterprise.models.RdbFrequency
    """

    _validation = {
        "aof_enabled": {"required": True},
        "rdb_enabled": {"required": True},
    }

    _attribute_map = {
        "aof_enabled": {"key": "aofEnabled", "type": "bool"},
        "rdb_enabled": {"key": "rdbEnabled", "type": "bool"},
        "aof_frequency": {"key": "aofFrequency", "type": "str"},
        "rdb_frequency": {"key": "rdbFrequency", "type": "str"},
    }

    def __init__(
        self,
        *,
        aof_enabled: bool,
        rdb_enabled: bool,
        aof_frequency: Optional[Union[str, "_models.AofFrequency"]] = None,
        rdb_frequency: Optional[Union[str, "_models.RdbFrequency"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword aof_enabled: Sets whether AOF is enabled. Defaults to false. Required.
        :paramtype aof_enabled: bool
        :keyword rdb_enabled: Sets whether RDB is enabled. Defaults to false. Required.
        :paramtype rdb_enabled: bool
        :keyword aof_frequency: Sets the frequency at which data is written to disk. Known values are:
         "1s" and "always".
        :paramtype aof_frequency: str or ~azure.mgmt.redisenterprise.models.AofFrequency
        :keyword rdb_frequency: Sets the frequency at which a snapshot of the database is created.
         Known values are: "1h", "6h", and "12h".
        :paramtype rdb_frequency: str or ~azure.mgmt.redisenterprise.models.RdbFrequency
        """
        super().__init__(**kwargs)
        self.aof_enabled = aof_enabled
        self.rdb_enabled = rdb_enabled
        self.aof_frequency = aof_frequency
        self.rdb_frequency = rdb_frequency


class PrivateEndpoint(_serialization.Model):
    """The private endpoint resource.

    :ivar id: The ARM resource id of the private endpoint resource.
    :vartype id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: Optional[str] = None, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The ARM resource id of the private endpoint resource.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class PrivateEndpointConnection(ProxyResource):
    """Describes a private endpoint connection to a RedisEnterprise cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar private_endpoint: The private endpoint that is connected.
    :vartype private_endpoint: ~azure.mgmt.redisenterprise.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.redisenterprise.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Failed", "Canceled", "Creating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.redisenterprise.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "private_endpoint": {"key": "properties.privateEndpoint", "type": "PrivateEndpoint"},
        "private_link_service_connection_state": {
            "key": "properties.privateLinkServiceConnectionState",
            "type": "PrivateLinkServiceConnectionState",
        },
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
        private_link_service_connection_state: Optional["_models.PrivateLinkServiceConnectionState"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword private_endpoint: The private endpoint that is connected.
        :paramtype private_endpoint: ~azure.mgmt.redisenterprise.models.PrivateEndpoint
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.redisenterprise.models.PrivateLinkServiceConnectionState
        """
        super().__init__(**kwargs)
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None


class PrivateEndpointConnectionListResult(_serialization.Model):
    """The response of a PrivateEndpointConnection list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The PrivateEndpointConnection items on this page. Required.
    :vartype value: list[~azure.mgmt.redisenterprise.models.PrivateEndpointConnection]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateEndpointConnection]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.PrivateEndpointConnection"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The PrivateEndpointConnection items on this page. Required.
        :paramtype value: list[~azure.mgmt.redisenterprise.models.PrivateEndpointConnection]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLink(ProxyResource):
    """Information about private links.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    :ivar required_zone_names: The private link resource Private link DNS zone name.
    :vartype required_zone_names: list[str]
    :ivar provisioning_state: The provisioning state of the private link. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.redisenterprise.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "group_id": {"key": "properties.groupId", "type": "str"},
        "required_members": {"key": "properties.requiredMembers", "type": "[str]"},
        "required_zone_names": {"key": "properties.requiredZoneNames", "type": "[str]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        group_id: Optional[str] = None,
        required_members: Optional[List[str]] = None,
        required_zone_names: Optional[List[str]] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword group_id: The private link resource group id.
        :paramtype group_id: str
        :keyword required_members: The private link resource required member names.
        :paramtype required_members: list[str]
        :keyword required_zone_names: The private link resource Private link DNS zone name.
        :paramtype required_zone_names: list[str]
        :keyword provisioning_state: The provisioning state of the private link. Known values are:
         "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
        :paramtype provisioning_state: str or ~azure.mgmt.redisenterprise.models.ProvisioningState
        """
        super().__init__(**kwargs)
        self.group_id = group_id
        self.required_members = required_members
        self.required_zone_names = required_zone_names
        self.provisioning_state = provisioning_state


class PrivateLinkListResult(_serialization.Model):
    """The response of a PrivateLink list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The PrivateLink items on this page. Required.
    :vartype value: list[~azure.mgmt.redisenterprise.models.PrivateLink]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateLink]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.PrivateLink"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The PrivateLink items on this page. Required.
        :paramtype value: list[~azure.mgmt.redisenterprise.models.PrivateLink]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkServiceConnectionState(_serialization.Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    All required parameters must be populated in order to send to Azure.

    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer. Required.
    :vartype actions_required: str
    :ivar description: The reason for approval/rejection of the connection. Required.
    :vartype description: str
    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Required. Known values are: "Approved", "Pending", and "Rejected".
    :vartype status: str or
     ~azure.mgmt.redisenterprise.models.PrivateEndpointServiceConnectionStatus
    """

    _validation = {
        "actions_required": {"required": True},
        "description": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "actions_required": {"key": "actionsRequired", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        actions_required: str,
        description: str,
        status: Union[str, "_models.PrivateEndpointServiceConnectionStatus"],
        **kwargs: Any
    ) -> None:
        """
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer. Required.
        :paramtype actions_required: str
        :keyword description: The reason for approval/rejection of the connection. Required.
        :paramtype description: str
        :keyword status: Indicates whether the connection has been Approved/Rejected/Removed by the
         owner of the service. Required. Known values are: "Approved", "Pending", and "Rejected".
        :paramtype status: str or
         ~azure.mgmt.redisenterprise.models.PrivateEndpointServiceConnectionStatus
        """
        super().__init__(**kwargs)
        self.actions_required = actions_required
        self.description = description
        self.status = status


class RegenerateKeyParameters(_serialization.Model):
    """Regenerate access keys request. Specifies which access keys to reset to a new random value.

    All required parameters must be populated in order to send to Azure.

    :ivar key_type: Which access key to regenerate. Required. Known values are: "Primary" and
     "Secondary".
    :vartype key_type: str or ~azure.mgmt.redisenterprise.models.KeyType
    """

    _validation = {
        "key_type": {"required": True},
    }

    _attribute_map = {
        "key_type": {"key": "keyType", "type": "str"},
    }

    def __init__(self, *, key_type: Union[str, "_models.KeyType"], **kwargs: Any) -> None:
        """
        :keyword key_type: Which access key to regenerate. Required. Known values are: "Primary" and
         "Secondary".
        :paramtype key_type: str or ~azure.mgmt.redisenterprise.models.KeyType
        """
        super().__init__(**kwargs)
        self.key_type = key_type


class Sku(_serialization.Model):
    """SKU parameters supplied to the create RedisEnterprise operation.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10,
     EnterpriseFlash_F300 etc.). Required. Known values are: "Enterprise_E10", "Enterprise_E20",
     "Enterprise_E50", "Enterprise_E100", "EnterpriseFlash_F300", "EnterpriseFlash_F700", and
     "EnterpriseFlash_F1500".
    :vartype name: str or ~azure.mgmt.redisenterprise.models.SkuName
    :ivar capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU.
     Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
     Required.
    :vartype capacity: int
    """

    _validation = {
        "name": {"required": True},
        "capacity": {"required": True, "minimum": 2},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(self, *, name: Union[str, "_models.SkuName"], capacity: int, **kwargs: Any) -> None:
        """
        :keyword name: The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10,
         EnterpriseFlash_F300 etc.). Required. Known values are: "Enterprise_E10", "Enterprise_E20",
         "Enterprise_E50", "Enterprise_E100", "EnterpriseFlash_F300", "EnterpriseFlash_F700", and
         "EnterpriseFlash_F1500".
        :paramtype name: str or ~azure.mgmt.redisenterprise.models.SkuName
        :keyword capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on
         SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
         Required.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.capacity = capacity


class SkuDetails(ProxyResource):
    """Information about RedisEnterprise SKUs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.redisenterprise.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: JSON
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(self, *, properties: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: JSON
        """
        super().__init__(**kwargs)
        self.properties = properties


class SkuDetailsListResult(_serialization.Model):
    """The response of a SkuDetails list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The SkuDetails items on this page. Required.
    :vartype value: list[~azure.mgmt.redisenterprise.models.SkuDetails]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SkuDetails]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.SkuDetails"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The SkuDetails items on this page. Required.
        :paramtype value: list[~azure.mgmt.redisenterprise.models.SkuDetails]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SkuUpdate(_serialization.Model):
    """SKU parameters supplied to the create RedisEnterprise operation.

    :ivar name: The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10,
     EnterpriseFlash_F300 etc.). Known values are: "Enterprise_E10", "Enterprise_E20",
     "Enterprise_E50", "Enterprise_E100", "EnterpriseFlash_F300", "EnterpriseFlash_F700", and
     "EnterpriseFlash_F1500".
    :vartype name: str or ~azure.mgmt.redisenterprise.models.SkuName
    :ivar capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU.
     Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
    :vartype capacity: int
    """

    _validation = {
        "capacity": {"minimum": 2},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(
        self, *, name: Optional[Union[str, "_models.SkuName"]] = None, capacity: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword name: The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10,
         EnterpriseFlash_F300 etc.). Known values are: "Enterprise_E10", "Enterprise_E20",
         "Enterprise_E50", "Enterprise_E100", "EnterpriseFlash_F300", "EnterpriseFlash_F700", and
         "EnterpriseFlash_F1500".
        :paramtype name: str or ~azure.mgmt.redisenterprise.models.SkuName
        :keyword capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on
         SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.capacity = capacity


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.redisenterprise.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.redisenterprise.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.redisenterprise.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.redisenterprise.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
