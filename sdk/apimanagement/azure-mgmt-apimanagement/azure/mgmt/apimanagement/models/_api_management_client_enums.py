# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessIdName(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    ACCESS = "access"

class ApimIdentityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The identity type. Currently the only supported type is 'SystemAssigned'.
    """

    SYSTEM_ASSIGNED = "SystemAssigned"

class ApiType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of API.
    """

    HTTP = "http"
    SOAP = "soap"

class AsyncOperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status of an async operation.
    """

    STARTED = "Started"
    IN_PROGRESS = "InProgress"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"

class AuthorizationMethod(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    HEAD = "HEAD"
    OPTIONS = "OPTIONS"
    TRACE = "TRACE"
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"

class BackendProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Backend communication protocol.
    """

    #: The Backend is a RESTful service.
    HTTP = "http"
    #: The Backend is a SOAP service.
    SOAP = "soap"

class BearerTokenSendingMethod(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    AUTHORIZATION_HEADER = "authorizationHeader"
    QUERY = "query"

class CertificateConfigurationStoreName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The local certificate store location. Only Root and CertificateAuthority are valid locations.
    """

    CERTIFICATE_AUTHORITY = "CertificateAuthority"
    ROOT = "Root"

class ClientAuthenticationMethod(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    #: Basic Client Authentication method.
    BASIC = "Basic"
    #: Body based Authentication method.
    BODY = "Body"

class ConfigurationIdName(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    CONFIGURATION = "configuration"

class Confirmation(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines the type of confirmation e-mail that will be sent to the newly created user.
    """

    #: Send an e-mail to the user confirming they have successfully signed up.
    SIGNUP = "signup"
    #: Send an e-mail inviting the user to sign-up and complete registration.
    INVITE = "invite"

class ConnectivityStatusType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Resource Connectivity Status Type identifier.
    """

    INITIALIZING = "initializing"
    SUCCESS = "success"
    FAILURE = "failure"

class ContentFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Format of the Content in which the API is getting imported.
    """

    #: The contents are inline and Content type is a WADL document.
    WADL_XML = "wadl-xml"
    #: The WADL document is hosted on a publicly accessible internet address.
    WADL_LINK_JSON = "wadl-link-json"
    #: The contents are inline and Content Type is a OpenApi 2.0 Document.
    SWAGGER_JSON = "swagger-json"
    #: The Open Api 2.0 document is hosted on a publicly accessible internet address.
    SWAGGER_LINK_JSON = "swagger-link-json"
    #: The contents are inline and the document is a WSDL/Soap document.
    WSDL = "wsdl"
    #: The WSDL document is hosted on a publicly accessible internet address.
    WSDL_LINK = "wsdl-link"

class ExportApi(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    TRUE = "true"

class ExportFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    #: Export the Api Definition in OpenApi Specification 2.0 format to the Storage Blob.
    OPEN_API2 = "application/vnd.swagger.link+json"
    #: Export the Api Definition in WSDL Schema to Storage Blob.
    WSDL = "application/vnd.ms.wsdl.link+xml"
    #: Export the Api Definition in WADL Schema to Storage Blob.
    WADL = "application/vnd.sun.wadl.link+json"

class GrantType(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    #: Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
    AUTHORIZATION_CODE = "authorizationCode"
    #: Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
    IMPLICIT = "implicit"
    #: Resource Owner Password Grant flow as described
    #: https://tools.ietf.org/html/rfc6749#section-4.3.
    RESOURCE_OWNER_PASSWORD = "resourceOwnerPassword"
    #: Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
    CLIENT_CREDENTIALS = "clientCredentials"

class GroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Group type.
    """

    CUSTOM = "custom"
    SYSTEM = "system"
    EXTERNAL = "external"

class HostnameType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Hostname type.
    """

    PROXY = "Proxy"
    PORTAL = "Portal"
    MANAGEMENT = "Management"
    SCM = "Scm"

class IdentityProviderType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Identity Provider Type identifier.
    """

    #: Facebook as Identity provider.
    FACEBOOK = "facebook"
    #: Google as Identity provider.
    GOOGLE = "google"
    #: Microsoft Live as Identity provider.
    MICROSOFT = "microsoft"
    #: Twitter as Identity provider.
    TWITTER = "twitter"
    #: Azure Active Directory as Identity provider.
    AAD = "aad"
    #: Azure Active Directory B2C as Identity provider.
    AAD_B2_C = "aadB2C"

class KeyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Key to be used to generate token for user.
    """

    PRIMARY = "primary"
    SECONDARY = "secondary"

class LoggerType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Logger type.
    """

    #: Azure Event Hub as log destination.
    AZURE_EVENT_HUB = "azureEventHub"
    #: Azure Application Insights as log destination.
    APPLICATION_INSIGHTS = "applicationInsights"

class NameAvailabilityReason(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Invalid indicates the name provided does not match the resource provider’s naming requirements
    (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is
    already in use and is therefore unavailable.
    """

    VALID = "Valid"
    INVALID = "Invalid"
    ALREADY_EXISTS = "AlreadyExists"

class NotificationName(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    #: The following email recipients and users will receive email notifications about subscription
    #: requests for API products requiring approval.
    REQUEST_PUBLISHER_NOTIFICATION_MESSAGE = "RequestPublisherNotificationMessage"
    #: The following email recipients and users will receive email notifications about new API product
    #: subscriptions.
    PURCHASE_PUBLISHER_NOTIFICATION_MESSAGE = "PurchasePublisherNotificationMessage"
    #: The following email recipients and users will receive email notifications when new applications
    #: are submitted to the application gallery.
    NEW_APPLICATION_NOTIFICATION_MESSAGE = "NewApplicationNotificationMessage"
    #: The following recipients will receive blind carbon copies of all emails sent to developers.
    BCC = "BCC"
    #: The following email recipients and users will receive email notifications when a new issue or
    #: comment is submitted on the developer portal.
    NEW_ISSUE_PUBLISHER_NOTIFICATION_MESSAGE = "NewIssuePublisherNotificationMessage"
    #: The following email recipients and users will receive email notifications when developer closes
    #: his account.
    ACCOUNT_CLOSED_PUBLISHER = "AccountClosedPublisher"
    #: The following email recipients and users will receive email notifications when subscription
    #: usage gets close to usage quota.
    QUOTA_LIMIT_APPROACHING_PUBLISHER_NOTIFICATION_MESSAGE = "QuotaLimitApproachingPublisherNotificationMessage"

class PolicyIdName(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    POLICY = "policy"

class PolicyScopeContract(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    TENANT = "Tenant"
    PRODUCT = "Product"
    API = "Api"
    OPERATION = "Operation"
    ALL = "All"

class ProductState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """whether product is published or not. Published products are discoverable by users of developer
    portal. Non published products are visible only to administrators. Default state of Product is
    notPublished.
    """

    NOT_PUBLISHED = "notPublished"
    PUBLISHED = "published"

class Protocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    HTTP = "http"
    HTTPS = "https"

class SamplingType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Sampling type.
    """

    #: Fixed-rate sampling.
    FIXED = "fixed"
    #: Sampling with a dynamically adjustable rate.
    ADAPTIVE = "adaptive"

class SkuType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Name of the Sku.
    """

    #: Developer SKU of Api Management.
    DEVELOPER = "Developer"
    #: Standard SKU of Api Management.
    STANDARD = "Standard"
    #: Premium SKU of Api Management.
    PREMIUM = "Premium"
    #: Basic SKU of Api Management.
    BASIC = "Basic"

class State(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status of the issue.
    """

    #: The issue is proposed.
    PROPOSED = "proposed"
    #: The issue is opened.
    OPEN = "open"
    #: The issue was removed.
    REMOVED = "removed"
    #: The issue is now resolved.
    RESOLVED = "resolved"
    #: The issue was closed.
    CLOSED = "closed"

class SubscriptionState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Subscription state. Possible states are * active – the subscription is active, * suspended –
    the subscription is blocked, and the subscriber cannot call any APIs of the product, *
    submitted – the subscription request has been made by the developer, but has not yet been
    approved or rejected, * rejected – the subscription request has been denied by an
    administrator, * cancelled – the subscription has been cancelled by the developer or
    administrator, * expired – the subscription reached its expiration date and was deactivated.
    """

    SUSPENDED = "suspended"
    ACTIVE = "active"
    EXPIRED = "expired"
    SUBMITTED = "submitted"
    REJECTED = "rejected"
    CANCELLED = "cancelled"

class TemplateName(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    APPLICATION_APPROVED_NOTIFICATION_MESSAGE = "applicationApprovedNotificationMessage"
    ACCOUNT_CLOSED_DEVELOPER = "accountClosedDeveloper"
    QUOTA_LIMIT_APPROACHING_DEVELOPER_NOTIFICATION_MESSAGE = "quotaLimitApproachingDeveloperNotificationMessage"
    NEW_DEVELOPER_NOTIFICATION_MESSAGE = "newDeveloperNotificationMessage"
    EMAIL_CHANGE_IDENTITY_DEFAULT = "emailChangeIdentityDefault"
    INVITE_USER_NOTIFICATION_MESSAGE = "inviteUserNotificationMessage"
    NEW_COMMENT_NOTIFICATION_MESSAGE = "newCommentNotificationMessage"
    CONFIRM_SIGN_UP_IDENTITY_DEFAULT = "confirmSignUpIdentityDefault"
    NEW_ISSUE_NOTIFICATION_MESSAGE = "newIssueNotificationMessage"
    PURCHASE_DEVELOPER_NOTIFICATION_MESSAGE = "purchaseDeveloperNotificationMessage"
    PASSWORD_RESET_IDENTITY_DEFAULT = "passwordResetIdentityDefault"
    PASSWORD_RESET_BY_ADMIN_NOTIFICATION_MESSAGE = "passwordResetByAdminNotificationMessage"
    REJECT_DEVELOPER_NOTIFICATION_MESSAGE = "rejectDeveloperNotificationMessage"
    REQUEST_DEVELOPER_NOTIFICATION_MESSAGE = "requestDeveloperNotificationMessage"

class UserState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Account state. Specifies whether the user is active or not. Blocked users are unable to sign
    into the developer portal or call any APIs of subscribed products. Default state is Active.
    """

    #: User state is active.
    ACTIVE = "active"
    #: User is blocked. Blocked users cannot authenticate at developer portal or call API.
    BLOCKED = "blocked"
    #: User account is pending. Requires identity confirmation before it can be made active.
    PENDING = "pending"
    #: User account is closed. All identities and related entities are removed.
    DELETED = "deleted"

class VersioningScheme(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An value that determines where the API Version identifier will be located in a HTTP request.
    """

    #: The API Version is passed in a path segment.
    SEGMENT = "Segment"
    #: The API Version is passed in a query parameter.
    QUERY = "Query"
    #: The API Version is passed in a HTTP header.
    HEADER = "Header"

class VirtualNetworkType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of VPN in which API Management service needs to be configured in. None (Default Value)
    means the API Management service is not part of any Virtual Network, External means the API
    Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint,
    and Internal means that API Management deployment is setup inside a Virtual Network having an
    Intranet Facing Endpoint only.
    """

    #: The service is not part of any Virtual Network.
    NONE = "None"
    #: The service is part of Virtual Network and it is accessible from Internet.
    EXTERNAL = "External"
    #: The service is part of Virtual Network and it is only accessible from within the virtual
    #: network.
    INTERNAL = "Internal"
