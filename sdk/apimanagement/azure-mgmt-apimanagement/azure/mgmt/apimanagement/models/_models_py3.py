# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class AccessInformationContract(msrest.serialization.Model):
    """Tenant access information contract of the API Management service.

    :ivar id: Identifier.
    :vartype id: str
    :ivar primary_key: Primary access key.
    :vartype primary_key: str
    :ivar secondary_key: Secondary access key.
    :vartype secondary_key: str
    :ivar enabled: Tenant access information of the API Management service.
    :vartype enabled: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'primary_key': {'key': 'primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'secondaryKey', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword id: Identifier.
        :paramtype id: str
        :keyword primary_key: Primary access key.
        :paramtype primary_key: str
        :keyword secondary_key: Secondary access key.
        :paramtype secondary_key: str
        :keyword enabled: Tenant access information of the API Management service.
        :paramtype enabled: bool
        """
        super(AccessInformationContract, self).__init__(**kwargs)
        self.id = id
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.enabled = enabled


class AccessInformationUpdateParameters(msrest.serialization.Model):
    """Tenant access information update parameters of the API Management service.

    :ivar enabled: Tenant access information of the API Management service.
    :vartype enabled: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Tenant access information of the API Management service.
        :paramtype enabled: bool
        """
        super(AccessInformationUpdateParameters, self).__init__(**kwargs)
        self.enabled = enabled


class AdditionalLocation(msrest.serialization.Model):
    """Description of an additional API Management resource location.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Required. The location name of the additional region among Azure Data center
     regions.
    :vartype location: str
    :ivar sku: Required. SKU properties of the API Management service.
    :vartype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
    :ivar static_ips: Static IP addresses of the location's virtual machines.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration for the location.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Region.
    :vartype gateway_regional_url: str
    """

    _validation = {
        'location': {'required': True},
        'sku': {'required': True},
        'static_ips': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ApiManagementServiceSkuProperties'},
        'static_ips': {'key': 'staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'gateway_regional_url': {'key': 'gatewayRegionalUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        sku: "_models.ApiManagementServiceSkuProperties",
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword location: Required. The location name of the additional region among Azure Data center
         regions.
        :paramtype location: str
        :keyword sku: Required. SKU properties of the API Management service.
        :paramtype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
        :keyword virtual_network_configuration: Virtual network configuration for the location.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        """
        super(AdditionalLocation, self).__init__(**kwargs)
        self.location = location
        self.sku = sku
        self.static_ips = None
        self.virtual_network_configuration = virtual_network_configuration
        self.gateway_regional_url = None


class ApiCollection(msrest.serialization.Model):
    """Paged Api list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ApiContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ApiCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Resource(msrest.serialization.Model):
    """The Resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ApiContract(Resource):
    """API details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Relative URL uniquely identifying this API and all of its resource paths within the
     API Management service instance. It is appended to the API endpoint base URL specified during
     the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    :ivar api_version_set: Api Version Set Contract details.
    :vartype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'authentication_settings': {'key': 'properties.authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'properties.subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'properties.type', 'type': 'str'},
        'api_revision': {'key': 'properties.apiRevision', 'type': 'str'},
        'api_version': {'key': 'properties.apiVersion', 'type': 'str'},
        'is_current': {'key': 'properties.isCurrent', 'type': 'bool'},
        'is_online': {'key': 'properties.isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'properties.apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'service_url': {'key': 'properties.serviceUrl', 'type': 'str'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'protocols': {'key': 'properties.protocols', 'type': '[str]'},
        'api_version_set': {'key': 'properties.apiVersionSet', 'type': 'ApiVersionSetContract'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        path: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        api_version_set: Optional["_models.ApiVersionSetContract"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Relative URL uniquely identifying this API and all of its resource paths within
         the API Management service instance. It is appended to the API endpoint base URL specified
         during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        :keyword api_version_set: Api Version Set Contract details.
        :paramtype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
        """
        super(ApiContract, self).__init__(**kwargs)
        self.description = description
        self.authentication_settings = authentication_settings
        self.subscription_key_parameter_names = subscription_key_parameter_names
        self.api_type = api_type
        self.api_revision = api_revision
        self.api_version = api_version
        self.is_current = None
        self.is_online = None
        self.api_version_set_id = api_version_set_id
        self.display_name = display_name
        self.service_url = service_url
        self.path = path
        self.protocols = protocols
        self.api_version_set = api_version_set


class ApiEntityBaseContract(msrest.serialization.Model):
    """API base contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authentication_settings': {'key': 'authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'type', 'type': 'str'},
        'api_revision': {'key': 'apiRevision', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'is_online': {'key': 'isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'apiVersionSetId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        """
        super(ApiEntityBaseContract, self).__init__(**kwargs)
        self.description = description
        self.authentication_settings = authentication_settings
        self.subscription_key_parameter_names = subscription_key_parameter_names
        self.api_type = api_type
        self.api_revision = api_revision
        self.api_version = api_version
        self.is_current = None
        self.is_online = None
        self.api_version_set_id = api_version_set_id


class ApiContractProperties(ApiEntityBaseContract):
    """Api Entity Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Required. Relative URL uniquely identifying this API and all of its resource paths
     within the API Management service instance. It is appended to the API endpoint base URL
     specified during the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    :ivar api_version_set: Api Version Set Contract details.
    :vartype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'required': True, 'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authentication_settings': {'key': 'authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'type', 'type': 'str'},
        'api_revision': {'key': 'apiRevision', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'is_online': {'key': 'isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_url': {'key': 'serviceUrl', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
        'api_version_set': {'key': 'apiVersionSet', 'type': 'ApiVersionSetContract'},
    }

    def __init__(
        self,
        *,
        path: str,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        api_version_set: Optional["_models.ApiVersionSetContract"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Required. Relative URL uniquely identifying this API and all of its resource
         paths within the API Management service instance. It is appended to the API endpoint base URL
         specified during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        :keyword api_version_set: Api Version Set Contract details.
        :paramtype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
        """
        super(ApiContractProperties, self).__init__(description=description, authentication_settings=authentication_settings, subscription_key_parameter_names=subscription_key_parameter_names, api_type=api_type, api_revision=api_revision, api_version=api_version, api_version_set_id=api_version_set_id, **kwargs)
        self.display_name = display_name
        self.service_url = service_url
        self.path = path
        self.protocols = protocols
        self.api_version_set = api_version_set


class ApiContractUpdateProperties(ApiEntityBaseContract):
    """API update contract properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Relative URL uniquely identifying this API and all of its resource paths within the
     API Management service instance. It is appended to the API endpoint base URL specified during
     the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authentication_settings': {'key': 'authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'type', 'type': 'str'},
        'api_revision': {'key': 'apiRevision', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'is_online': {'key': 'isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_url': {'key': 'serviceUrl', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        path: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Relative URL uniquely identifying this API and all of its resource paths within
         the API Management service instance. It is appended to the API endpoint base URL specified
         during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        """
        super(ApiContractUpdateProperties, self).__init__(description=description, authentication_settings=authentication_settings, subscription_key_parameter_names=subscription_key_parameter_names, api_type=api_type, api_revision=api_revision, api_version=api_version, api_version_set_id=api_version_set_id, **kwargs)
        self.display_name = display_name
        self.service_url = service_url
        self.path = path
        self.protocols = protocols


class ApiCreateOrUpdateParameter(msrest.serialization.Model):
    """API Create or Update Parameters.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Relative URL uniquely identifying this API and all of its resource paths within the
     API Management service instance. It is appended to the API endpoint base URL specified during
     the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    :ivar api_version_set: Api Version Set Contract details.
    :vartype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
    :ivar content_value: Content value when Importing an API.
    :vartype content_value: str
    :ivar content_format: Format of the Content in which the API is getting imported. Known values
     are: "wadl-xml", "wadl-link-json", "swagger-json", "swagger-link-json", "wsdl", "wsdl-link".
    :vartype content_format: str or ~azure.mgmt.apimanagement.models.ContentFormat
    :ivar wsdl_selector: Criteria to limit import of WSDL to a subset of the document.
    :vartype wsdl_selector:
     ~azure.mgmt.apimanagement.models.ApiCreateOrUpdatePropertiesWsdlSelector
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'properties.description', 'type': 'str'},
        'authentication_settings': {'key': 'properties.authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'properties.subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'properties.type', 'type': 'str'},
        'api_revision': {'key': 'properties.apiRevision', 'type': 'str'},
        'api_version': {'key': 'properties.apiVersion', 'type': 'str'},
        'is_current': {'key': 'properties.isCurrent', 'type': 'bool'},
        'is_online': {'key': 'properties.isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'properties.apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'service_url': {'key': 'properties.serviceUrl', 'type': 'str'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'protocols': {'key': 'properties.protocols', 'type': '[str]'},
        'api_version_set': {'key': 'properties.apiVersionSet', 'type': 'ApiVersionSetContract'},
        'content_value': {'key': 'properties.contentValue', 'type': 'str'},
        'content_format': {'key': 'properties.contentFormat', 'type': 'str'},
        'wsdl_selector': {'key': 'properties.wsdlSelector', 'type': 'ApiCreateOrUpdatePropertiesWsdlSelector'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        path: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        api_version_set: Optional["_models.ApiVersionSetContract"] = None,
        content_value: Optional[str] = None,
        content_format: Optional[Union[str, "_models.ContentFormat"]] = None,
        wsdl_selector: Optional["_models.ApiCreateOrUpdatePropertiesWsdlSelector"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Relative URL uniquely identifying this API and all of its resource paths within
         the API Management service instance. It is appended to the API endpoint base URL specified
         during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        :keyword api_version_set: Api Version Set Contract details.
        :paramtype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
        :keyword content_value: Content value when Importing an API.
        :paramtype content_value: str
        :keyword content_format: Format of the Content in which the API is getting imported. Known
         values are: "wadl-xml", "wadl-link-json", "swagger-json", "swagger-link-json", "wsdl",
         "wsdl-link".
        :paramtype content_format: str or ~azure.mgmt.apimanagement.models.ContentFormat
        :keyword wsdl_selector: Criteria to limit import of WSDL to a subset of the document.
        :paramtype wsdl_selector:
         ~azure.mgmt.apimanagement.models.ApiCreateOrUpdatePropertiesWsdlSelector
        """
        super(ApiCreateOrUpdateParameter, self).__init__(**kwargs)
        self.description = description
        self.authentication_settings = authentication_settings
        self.subscription_key_parameter_names = subscription_key_parameter_names
        self.api_type = api_type
        self.api_revision = api_revision
        self.api_version = api_version
        self.is_current = None
        self.is_online = None
        self.api_version_set_id = api_version_set_id
        self.display_name = display_name
        self.service_url = service_url
        self.path = path
        self.protocols = protocols
        self.api_version_set = api_version_set
        self.content_value = content_value
        self.content_format = content_format
        self.wsdl_selector = wsdl_selector


class ApiCreateOrUpdateProperties(ApiContractProperties):
    """Api Create or Update Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Required. Relative URL uniquely identifying this API and all of its resource paths
     within the API Management service instance. It is appended to the API endpoint base URL
     specified during the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    :ivar api_version_set: Api Version Set Contract details.
    :vartype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
    :ivar content_value: Content value when Importing an API.
    :vartype content_value: str
    :ivar content_format: Format of the Content in which the API is getting imported. Known values
     are: "wadl-xml", "wadl-link-json", "swagger-json", "swagger-link-json", "wsdl", "wsdl-link".
    :vartype content_format: str or ~azure.mgmt.apimanagement.models.ContentFormat
    :ivar wsdl_selector: Criteria to limit import of WSDL to a subset of the document.
    :vartype wsdl_selector:
     ~azure.mgmt.apimanagement.models.ApiCreateOrUpdatePropertiesWsdlSelector
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'required': True, 'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authentication_settings': {'key': 'authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'type', 'type': 'str'},
        'api_revision': {'key': 'apiRevision', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'is_online': {'key': 'isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_url': {'key': 'serviceUrl', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'protocols': {'key': 'protocols', 'type': '[str]'},
        'api_version_set': {'key': 'apiVersionSet', 'type': 'ApiVersionSetContract'},
        'content_value': {'key': 'contentValue', 'type': 'str'},
        'content_format': {'key': 'contentFormat', 'type': 'str'},
        'wsdl_selector': {'key': 'wsdlSelector', 'type': 'ApiCreateOrUpdatePropertiesWsdlSelector'},
    }

    def __init__(
        self,
        *,
        path: str,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        api_version_set: Optional["_models.ApiVersionSetContract"] = None,
        content_value: Optional[str] = None,
        content_format: Optional[Union[str, "_models.ContentFormat"]] = None,
        wsdl_selector: Optional["_models.ApiCreateOrUpdatePropertiesWsdlSelector"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Required. Relative URL uniquely identifying this API and all of its resource
         paths within the API Management service instance. It is appended to the API endpoint base URL
         specified during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        :keyword api_version_set: Api Version Set Contract details.
        :paramtype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContract
        :keyword content_value: Content value when Importing an API.
        :paramtype content_value: str
        :keyword content_format: Format of the Content in which the API is getting imported. Known
         values are: "wadl-xml", "wadl-link-json", "swagger-json", "swagger-link-json", "wsdl",
         "wsdl-link".
        :paramtype content_format: str or ~azure.mgmt.apimanagement.models.ContentFormat
        :keyword wsdl_selector: Criteria to limit import of WSDL to a subset of the document.
        :paramtype wsdl_selector:
         ~azure.mgmt.apimanagement.models.ApiCreateOrUpdatePropertiesWsdlSelector
        """
        super(ApiCreateOrUpdateProperties, self).__init__(description=description, authentication_settings=authentication_settings, subscription_key_parameter_names=subscription_key_parameter_names, api_type=api_type, api_revision=api_revision, api_version=api_version, api_version_set_id=api_version_set_id, display_name=display_name, service_url=service_url, path=path, protocols=protocols, api_version_set=api_version_set, **kwargs)
        self.content_value = content_value
        self.content_format = content_format
        self.wsdl_selector = wsdl_selector


class ApiCreateOrUpdatePropertiesWsdlSelector(msrest.serialization.Model):
    """Criteria to limit import of WSDL to a subset of the document.

    :ivar wsdl_service_name: Name of service to import from WSDL.
    :vartype wsdl_service_name: str
    :ivar wsdl_endpoint_name: Name of endpoint(port) to import from WSDL.
    :vartype wsdl_endpoint_name: str
    """

    _attribute_map = {
        'wsdl_service_name': {'key': 'wsdlServiceName', 'type': 'str'},
        'wsdl_endpoint_name': {'key': 'wsdlEndpointName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        wsdl_service_name: Optional[str] = None,
        wsdl_endpoint_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword wsdl_service_name: Name of service to import from WSDL.
        :paramtype wsdl_service_name: str
        :keyword wsdl_endpoint_name: Name of endpoint(port) to import from WSDL.
        :paramtype wsdl_endpoint_name: str
        """
        super(ApiCreateOrUpdatePropertiesWsdlSelector, self).__init__(**kwargs)
        self.wsdl_service_name = wsdl_service_name
        self.wsdl_endpoint_name = wsdl_endpoint_name


class ApiExportResult(msrest.serialization.Model):
    """API Export result Blob Uri.

    :ivar link: Link to the Storage Blob containing the result of the export operation. The Blob
     Uri is only valid for 5 minutes.
    :vartype link: str
    """

    _attribute_map = {
        'link': {'key': 'link', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword link: Link to the Storage Blob containing the result of the export operation. The Blob
         Uri is only valid for 5 minutes.
        :paramtype link: str
        """
        super(ApiExportResult, self).__init__(**kwargs)
        self.link = link


class ApiManagementServiceApplyNetworkConfigurationParameters(msrest.serialization.Model):
    """Parameter supplied to the Apply Network configuration operation.

    :ivar location: Location of the Api Management service to update for a multi-region service.
     For a service deployed in a single region, this parameter is not required.
    :vartype location: str
    """

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword location: Location of the Api Management service to update for a multi-region service.
         For a service deployed in a single region, this parameter is not required.
        :paramtype location: str
        """
        super(ApiManagementServiceApplyNetworkConfigurationParameters, self).__init__(**kwargs)
        self.location = location


class ApiManagementServiceBackupRestoreParameters(msrest.serialization.Model):
    """Parameters supplied to the Backup/Restore of an API Management service operation.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_account: Required. Azure Cloud Storage account (used to place/retrieve the
     backup) name.
    :vartype storage_account: str
    :ivar access_key: Required. Azure Cloud Storage account (used to place/retrieve the backup)
     access key.
    :vartype access_key: str
    :ivar container_name: Required. Azure Cloud Storage blob container name used to place/retrieve
     the backup.
    :vartype container_name: str
    :ivar backup_name: Required. The name of the backup file to create.
    :vartype backup_name: str
    """

    _validation = {
        'storage_account': {'required': True},
        'access_key': {'required': True},
        'container_name': {'required': True},
        'backup_name': {'required': True},
    }

    _attribute_map = {
        'storage_account': {'key': 'storageAccount', 'type': 'str'},
        'access_key': {'key': 'accessKey', 'type': 'str'},
        'container_name': {'key': 'containerName', 'type': 'str'},
        'backup_name': {'key': 'backupName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        storage_account: str,
        access_key: str,
        container_name: str,
        backup_name: str,
        **kwargs
    ):
        """
        :keyword storage_account: Required. Azure Cloud Storage account (used to place/retrieve the
         backup) name.
        :paramtype storage_account: str
        :keyword access_key: Required. Azure Cloud Storage account (used to place/retrieve the backup)
         access key.
        :paramtype access_key: str
        :keyword container_name: Required. Azure Cloud Storage blob container name used to
         place/retrieve the backup.
        :paramtype container_name: str
        :keyword backup_name: Required. The name of the backup file to create.
        :paramtype backup_name: str
        """
        super(ApiManagementServiceBackupRestoreParameters, self).__init__(**kwargs)
        self.storage_account = storage_account
        self.access_key = access_key
        self.container_name = container_name
        self.backup_name = backup_name


class ApiManagementServiceBaseProperties(msrest.serialization.Model):
    """Base Properties of an API Management service resource description.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar notification_sender_email: Email address from which the notification will be sent.
    :vartype notification_sender_email: str
    :ivar provisioning_state: The current provisioning state of the API Management service which
     can be one of the following:
     Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    :vartype provisioning_state: str
    :ivar target_provisioning_state: The provisioning state of the API Management service, which is
     targeted by the long running operation started on the service.
    :vartype target_provisioning_state: str
    :ivar created_at_utc: Creation UTC date of the API Management service.The date conforms to the
     following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_at_utc: ~datetime.datetime
    :ivar gateway_url: Gateway URL of the API Management service.
    :vartype gateway_url: str
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Default Region.
    :vartype gateway_regional_url: str
    :ivar portal_url: Publisher portal endpoint Url of the API Management service.
    :vartype portal_url: str
    :ivar management_api_url: Management API endpoint URL of the API Management service.
    :vartype management_api_url: str
    :ivar scm_url: SCM endpoint URL of the API Management service.
    :vartype scm_url: str
    :ivar hostname_configurations: Custom hostname configuration of the API Management service.
    :vartype hostname_configurations: list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
    :ivar static_ips: Static IP addresses of the API Management service virtual machines. Available
     only for Standard and Premium SKU.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration of the API Management
     service.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar additional_locations: Additional datacenter locations of the API Management service.
    :vartype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
    :ivar custom_properties: Custom properties of the API Management service. Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
     disable just TLS 1.1 and setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
     disable TLS 1.0 on an API Management service.
    :vartype custom_properties: dict[str, str]
    :ivar certificates: List of Certificates that need to be installed in the API Management
     service. Max supported certificates that can be installed is 10.
    :vartype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
    :ivar virtual_network_type: The type of VPN in which API Management service needs to be
     configured in. None (Default Value) means the API Management service is not part of any Virtual
     Network, External means the API Management deployment is set up inside a Virtual Network having
     an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
     a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
     "External", "Internal". Default value: "None".
    :vartype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
    """

    _validation = {
        'notification_sender_email': {'max_length': 100, 'min_length': 0},
        'provisioning_state': {'readonly': True},
        'target_provisioning_state': {'readonly': True},
        'created_at_utc': {'readonly': True},
        'gateway_url': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
        'portal_url': {'readonly': True},
        'management_api_url': {'readonly': True},
        'scm_url': {'readonly': True},
        'static_ips': {'readonly': True},
    }

    _attribute_map = {
        'notification_sender_email': {'key': 'notificationSenderEmail', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'target_provisioning_state': {'key': 'targetProvisioningState', 'type': 'str'},
        'created_at_utc': {'key': 'createdAtUtc', 'type': 'iso-8601'},
        'gateway_url': {'key': 'gatewayUrl', 'type': 'str'},
        'gateway_regional_url': {'key': 'gatewayRegionalUrl', 'type': 'str'},
        'portal_url': {'key': 'portalUrl', 'type': 'str'},
        'management_api_url': {'key': 'managementApiUrl', 'type': 'str'},
        'scm_url': {'key': 'scmUrl', 'type': 'str'},
        'hostname_configurations': {'key': 'hostnameConfigurations', 'type': '[HostnameConfiguration]'},
        'static_ips': {'key': 'staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'additional_locations': {'key': 'additionalLocations', 'type': '[AdditionalLocation]'},
        'custom_properties': {'key': 'customProperties', 'type': '{str}'},
        'certificates': {'key': 'certificates', 'type': '[CertificateConfiguration]'},
        'virtual_network_type': {'key': 'virtualNetworkType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        notification_sender_email: Optional[str] = None,
        hostname_configurations: Optional[List["_models.HostnameConfiguration"]] = None,
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        additional_locations: Optional[List["_models.AdditionalLocation"]] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        certificates: Optional[List["_models.CertificateConfiguration"]] = None,
        virtual_network_type: Optional[Union[str, "_models.VirtualNetworkType"]] = "None",
        **kwargs
    ):
        """
        :keyword notification_sender_email: Email address from which the notification will be sent.
        :paramtype notification_sender_email: str
        :keyword hostname_configurations: Custom hostname configuration of the API Management service.
        :paramtype hostname_configurations:
         list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
        :keyword virtual_network_configuration: Virtual network configuration of the API Management
         service.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        :keyword additional_locations: Additional datacenter locations of the API Management service.
        :paramtype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
        :keyword custom_properties: Custom properties of the API Management service. Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
         cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
         disable just TLS 1.1 and setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
         disable TLS 1.0 on an API Management service.
        :paramtype custom_properties: dict[str, str]
        :keyword certificates: List of Certificates that need to be installed in the API Management
         service. Max supported certificates that can be installed is 10.
        :paramtype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
        :keyword virtual_network_type: The type of VPN in which API Management service needs to be
         configured in. None (Default Value) means the API Management service is not part of any Virtual
         Network, External means the API Management deployment is set up inside a Virtual Network having
         an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
         a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
         "External", "Internal". Default value: "None".
        :paramtype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
        """
        super(ApiManagementServiceBaseProperties, self).__init__(**kwargs)
        self.notification_sender_email = notification_sender_email
        self.provisioning_state = None
        self.target_provisioning_state = None
        self.created_at_utc = None
        self.gateway_url = None
        self.gateway_regional_url = None
        self.portal_url = None
        self.management_api_url = None
        self.scm_url = None
        self.hostname_configurations = hostname_configurations
        self.static_ips = None
        self.virtual_network_configuration = virtual_network_configuration
        self.additional_locations = additional_locations
        self.custom_properties = custom_properties
        self.certificates = certificates
        self.virtual_network_type = virtual_network_type


class ApiManagementServiceCheckNameAvailabilityParameters(msrest.serialization.Model):
    """Parameters supplied to the CheckNameAvailability operation.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name to check for availability.
    :vartype name: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        **kwargs
    ):
        """
        :keyword name: Required. The name to check for availability.
        :paramtype name: str
        """
        super(ApiManagementServiceCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = name


class ApiManagementServiceGetSsoTokenResult(msrest.serialization.Model):
    """The response of the GetSsoToken operation.

    :ivar redirect_uri: Redirect URL to the Publisher Portal containing the SSO token.
    :vartype redirect_uri: str
    """

    _attribute_map = {
        'redirect_uri': {'key': 'redirectUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        redirect_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword redirect_uri: Redirect URL to the Publisher Portal containing the SSO token.
        :paramtype redirect_uri: str
        """
        super(ApiManagementServiceGetSsoTokenResult, self).__init__(**kwargs)
        self.redirect_uri = redirect_uri


class ApiManagementServiceIdentity(msrest.serialization.Model):
    """Identity properties of the Api Management service resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. The identity type. Currently the only supported type is 'SystemAssigned'.
     Known values are: "SystemAssigned".
    :vartype type: str or ~azure.mgmt.apimanagement.models.ApimIdentityType
    :ivar principal_id: The principal id of the identity.
    :vartype principal_id: str
    :ivar tenant_id: The client tenant id of the identity.
    :vartype tenant_id: str
    """

    _validation = {
        'type': {'required': True},
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ApimIdentityType"],
        **kwargs
    ):
        """
        :keyword type: Required. The identity type. Currently the only supported type is
         'SystemAssigned'. Known values are: "SystemAssigned".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.ApimIdentityType
        """
        super(ApiManagementServiceIdentity, self).__init__(**kwargs)
        self.type = type
        self.principal_id = None
        self.tenant_id = None


class ApiManagementServiceListResult(msrest.serialization.Model):
    """The response of the List API Management services operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. Result of the List API Management services operation.
    :vartype value: list[~azure.mgmt.apimanagement.models.ApiManagementServiceResource]
    :ivar next_link: Link to the next set of results. Not empty if Value contains incomplete list
     of API Management services.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiManagementServiceResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["_models.ApiManagementServiceResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. Result of the List API Management services operation.
        :paramtype value: list[~azure.mgmt.apimanagement.models.ApiManagementServiceResource]
        :keyword next_link: Link to the next set of results. Not empty if Value contains incomplete
         list of API Management services.
        :paramtype next_link: str
        """
        super(ApiManagementServiceListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ApiManagementServiceNameAvailabilityResult(msrest.serialization.Model):
    """Response of the CheckNameAvailability operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: True if the name is available and can be used to create a new API
     Management service; otherwise false.
    :vartype name_available: bool
    :ivar message: If reason == invalid, provide the user with the reason why the given name is
     invalid, and provide the resource naming requirements so that the user can select a valid name.
     If reason == AlreadyExists, explain that :code:`<resourceName>` is already in use, and direct
     them to select a different name.
    :vartype message: str
    :ivar reason: Invalid indicates the name provided does not match the resource provider’s naming
     requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the
     name is already in use and is therefore unavailable. Known values are: "Valid", "Invalid",
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.apimanagement.models.NameAvailabilityReason
    """

    _validation = {
        'name_available': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'message': {'key': 'message', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        reason: Optional[Union[str, "_models.NameAvailabilityReason"]] = None,
        **kwargs
    ):
        """
        :keyword reason: Invalid indicates the name provided does not match the resource provider’s
         naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates
         that the name is already in use and is therefore unavailable. Known values are: "Valid",
         "Invalid", "AlreadyExists".
        :paramtype reason: str or ~azure.mgmt.apimanagement.models.NameAvailabilityReason
        """
        super(ApiManagementServiceNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.message = None
        self.reason = reason


class ApiManagementServiceProperties(ApiManagementServiceBaseProperties):
    """Properties of an API Management service resource description.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar notification_sender_email: Email address from which the notification will be sent.
    :vartype notification_sender_email: str
    :ivar provisioning_state: The current provisioning state of the API Management service which
     can be one of the following:
     Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    :vartype provisioning_state: str
    :ivar target_provisioning_state: The provisioning state of the API Management service, which is
     targeted by the long running operation started on the service.
    :vartype target_provisioning_state: str
    :ivar created_at_utc: Creation UTC date of the API Management service.The date conforms to the
     following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_at_utc: ~datetime.datetime
    :ivar gateway_url: Gateway URL of the API Management service.
    :vartype gateway_url: str
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Default Region.
    :vartype gateway_regional_url: str
    :ivar portal_url: Publisher portal endpoint Url of the API Management service.
    :vartype portal_url: str
    :ivar management_api_url: Management API endpoint URL of the API Management service.
    :vartype management_api_url: str
    :ivar scm_url: SCM endpoint URL of the API Management service.
    :vartype scm_url: str
    :ivar hostname_configurations: Custom hostname configuration of the API Management service.
    :vartype hostname_configurations: list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
    :ivar static_ips: Static IP addresses of the API Management service virtual machines. Available
     only for Standard and Premium SKU.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration of the API Management
     service.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar additional_locations: Additional datacenter locations of the API Management service.
    :vartype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
    :ivar custom_properties: Custom properties of the API Management service. Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
     disable just TLS 1.1 and setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
     disable TLS 1.0 on an API Management service.
    :vartype custom_properties: dict[str, str]
    :ivar certificates: List of Certificates that need to be installed in the API Management
     service. Max supported certificates that can be installed is 10.
    :vartype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
    :ivar virtual_network_type: The type of VPN in which API Management service needs to be
     configured in. None (Default Value) means the API Management service is not part of any Virtual
     Network, External means the API Management deployment is set up inside a Virtual Network having
     an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
     a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
     "External", "Internal". Default value: "None".
    :vartype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
    :ivar publisher_email: Required. Publisher email.
    :vartype publisher_email: str
    :ivar publisher_name: Required. Publisher name.
    :vartype publisher_name: str
    """

    _validation = {
        'notification_sender_email': {'max_length': 100, 'min_length': 0},
        'provisioning_state': {'readonly': True},
        'target_provisioning_state': {'readonly': True},
        'created_at_utc': {'readonly': True},
        'gateway_url': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
        'portal_url': {'readonly': True},
        'management_api_url': {'readonly': True},
        'scm_url': {'readonly': True},
        'static_ips': {'readonly': True},
        'publisher_email': {'required': True, 'max_length': 100, 'min_length': 0},
        'publisher_name': {'required': True, 'max_length': 100, 'min_length': 0},
    }

    _attribute_map = {
        'notification_sender_email': {'key': 'notificationSenderEmail', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'target_provisioning_state': {'key': 'targetProvisioningState', 'type': 'str'},
        'created_at_utc': {'key': 'createdAtUtc', 'type': 'iso-8601'},
        'gateway_url': {'key': 'gatewayUrl', 'type': 'str'},
        'gateway_regional_url': {'key': 'gatewayRegionalUrl', 'type': 'str'},
        'portal_url': {'key': 'portalUrl', 'type': 'str'},
        'management_api_url': {'key': 'managementApiUrl', 'type': 'str'},
        'scm_url': {'key': 'scmUrl', 'type': 'str'},
        'hostname_configurations': {'key': 'hostnameConfigurations', 'type': '[HostnameConfiguration]'},
        'static_ips': {'key': 'staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'additional_locations': {'key': 'additionalLocations', 'type': '[AdditionalLocation]'},
        'custom_properties': {'key': 'customProperties', 'type': '{str}'},
        'certificates': {'key': 'certificates', 'type': '[CertificateConfiguration]'},
        'virtual_network_type': {'key': 'virtualNetworkType', 'type': 'str'},
        'publisher_email': {'key': 'publisherEmail', 'type': 'str'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        publisher_email: str,
        publisher_name: str,
        notification_sender_email: Optional[str] = None,
        hostname_configurations: Optional[List["_models.HostnameConfiguration"]] = None,
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        additional_locations: Optional[List["_models.AdditionalLocation"]] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        certificates: Optional[List["_models.CertificateConfiguration"]] = None,
        virtual_network_type: Optional[Union[str, "_models.VirtualNetworkType"]] = "None",
        **kwargs
    ):
        """
        :keyword notification_sender_email: Email address from which the notification will be sent.
        :paramtype notification_sender_email: str
        :keyword hostname_configurations: Custom hostname configuration of the API Management service.
        :paramtype hostname_configurations:
         list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
        :keyword virtual_network_configuration: Virtual network configuration of the API Management
         service.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        :keyword additional_locations: Additional datacenter locations of the API Management service.
        :paramtype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
        :keyword custom_properties: Custom properties of the API Management service. Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
         cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
         disable just TLS 1.1 and setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
         disable TLS 1.0 on an API Management service.
        :paramtype custom_properties: dict[str, str]
        :keyword certificates: List of Certificates that need to be installed in the API Management
         service. Max supported certificates that can be installed is 10.
        :paramtype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
        :keyword virtual_network_type: The type of VPN in which API Management service needs to be
         configured in. None (Default Value) means the API Management service is not part of any Virtual
         Network, External means the API Management deployment is set up inside a Virtual Network having
         an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
         a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
         "External", "Internal". Default value: "None".
        :paramtype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
        :keyword publisher_email: Required. Publisher email.
        :paramtype publisher_email: str
        :keyword publisher_name: Required. Publisher name.
        :paramtype publisher_name: str
        """
        super(ApiManagementServiceProperties, self).__init__(notification_sender_email=notification_sender_email, hostname_configurations=hostname_configurations, virtual_network_configuration=virtual_network_configuration, additional_locations=additional_locations, custom_properties=custom_properties, certificates=certificates, virtual_network_type=virtual_network_type, **kwargs)
        self.publisher_email = publisher_email
        self.publisher_name = publisher_name


class ApimResource(msrest.serialization.Model):
    """The Resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource is set to Microsoft.ApiManagement.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ApimResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = tags


class ApiManagementServiceResource(ApimResource):
    """A single API Management service resource in List or Get response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource is set to Microsoft.ApiManagement.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: Required. SKU properties of the API Management service.
    :vartype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
    :ivar identity: Managed service identity of the Api Management service.
    :vartype identity: ~azure.mgmt.apimanagement.models.ApiManagementServiceIdentity
    :ivar location: Required. Resource location.
    :vartype location: str
    :ivar etag: ETag of the resource.
    :vartype etag: str
    :ivar notification_sender_email: Email address from which the notification will be sent.
    :vartype notification_sender_email: str
    :ivar provisioning_state: The current provisioning state of the API Management service which
     can be one of the following:
     Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    :vartype provisioning_state: str
    :ivar target_provisioning_state: The provisioning state of the API Management service, which is
     targeted by the long running operation started on the service.
    :vartype target_provisioning_state: str
    :ivar created_at_utc: Creation UTC date of the API Management service.The date conforms to the
     following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_at_utc: ~datetime.datetime
    :ivar gateway_url: Gateway URL of the API Management service.
    :vartype gateway_url: str
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Default Region.
    :vartype gateway_regional_url: str
    :ivar portal_url: Publisher portal endpoint Url of the API Management service.
    :vartype portal_url: str
    :ivar management_api_url: Management API endpoint URL of the API Management service.
    :vartype management_api_url: str
    :ivar scm_url: SCM endpoint URL of the API Management service.
    :vartype scm_url: str
    :ivar hostname_configurations: Custom hostname configuration of the API Management service.
    :vartype hostname_configurations: list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
    :ivar static_ips: Static IP addresses of the API Management service virtual machines. Available
     only for Standard and Premium SKU.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration of the API Management
     service.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar additional_locations: Additional datacenter locations of the API Management service.
    :vartype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
    :ivar custom_properties: Custom properties of the API Management service. Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
     disable just TLS 1.1 and setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
     disable TLS 1.0 on an API Management service.
    :vartype custom_properties: dict[str, str]
    :ivar certificates: List of Certificates that need to be installed in the API Management
     service. Max supported certificates that can be installed is 10.
    :vartype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
    :ivar virtual_network_type: The type of VPN in which API Management service needs to be
     configured in. None (Default Value) means the API Management service is not part of any Virtual
     Network, External means the API Management deployment is set up inside a Virtual Network having
     an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
     a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
     "External", "Internal". Default value: "None".
    :vartype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
    :ivar publisher_email: Required. Publisher email.
    :vartype publisher_email: str
    :ivar publisher_name: Required. Publisher name.
    :vartype publisher_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'sku': {'required': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'notification_sender_email': {'max_length': 100, 'min_length': 0},
        'provisioning_state': {'readonly': True},
        'target_provisioning_state': {'readonly': True},
        'created_at_utc': {'readonly': True},
        'gateway_url': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
        'portal_url': {'readonly': True},
        'management_api_url': {'readonly': True},
        'scm_url': {'readonly': True},
        'static_ips': {'readonly': True},
        'publisher_email': {'required': True, 'max_length': 100, 'min_length': 0},
        'publisher_name': {'required': True, 'max_length': 100, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'ApiManagementServiceSkuProperties'},
        'identity': {'key': 'identity', 'type': 'ApiManagementServiceIdentity'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'notification_sender_email': {'key': 'properties.notificationSenderEmail', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'target_provisioning_state': {'key': 'properties.targetProvisioningState', 'type': 'str'},
        'created_at_utc': {'key': 'properties.createdAtUtc', 'type': 'iso-8601'},
        'gateway_url': {'key': 'properties.gatewayUrl', 'type': 'str'},
        'gateway_regional_url': {'key': 'properties.gatewayRegionalUrl', 'type': 'str'},
        'portal_url': {'key': 'properties.portalUrl', 'type': 'str'},
        'management_api_url': {'key': 'properties.managementApiUrl', 'type': 'str'},
        'scm_url': {'key': 'properties.scmUrl', 'type': 'str'},
        'hostname_configurations': {'key': 'properties.hostnameConfigurations', 'type': '[HostnameConfiguration]'},
        'static_ips': {'key': 'properties.staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'properties.virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'additional_locations': {'key': 'properties.additionalLocations', 'type': '[AdditionalLocation]'},
        'custom_properties': {'key': 'properties.customProperties', 'type': '{str}'},
        'certificates': {'key': 'properties.certificates', 'type': '[CertificateConfiguration]'},
        'virtual_network_type': {'key': 'properties.virtualNetworkType', 'type': 'str'},
        'publisher_email': {'key': 'properties.publisherEmail', 'type': 'str'},
        'publisher_name': {'key': 'properties.publisherName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sku: "_models.ApiManagementServiceSkuProperties",
        location: str,
        publisher_email: str,
        publisher_name: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ApiManagementServiceIdentity"] = None,
        notification_sender_email: Optional[str] = None,
        hostname_configurations: Optional[List["_models.HostnameConfiguration"]] = None,
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        additional_locations: Optional[List["_models.AdditionalLocation"]] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        certificates: Optional[List["_models.CertificateConfiguration"]] = None,
        virtual_network_type: Optional[Union[str, "_models.VirtualNetworkType"]] = "None",
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: Required. SKU properties of the API Management service.
        :paramtype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
        :keyword identity: Managed service identity of the Api Management service.
        :paramtype identity: ~azure.mgmt.apimanagement.models.ApiManagementServiceIdentity
        :keyword location: Required. Resource location.
        :paramtype location: str
        :keyword notification_sender_email: Email address from which the notification will be sent.
        :paramtype notification_sender_email: str
        :keyword hostname_configurations: Custom hostname configuration of the API Management service.
        :paramtype hostname_configurations:
         list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
        :keyword virtual_network_configuration: Virtual network configuration of the API Management
         service.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        :keyword additional_locations: Additional datacenter locations of the API Management service.
        :paramtype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
        :keyword custom_properties: Custom properties of the API Management service. Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
         cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
         disable just TLS 1.1 and setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
         disable TLS 1.0 on an API Management service.
        :paramtype custom_properties: dict[str, str]
        :keyword certificates: List of Certificates that need to be installed in the API Management
         service. Max supported certificates that can be installed is 10.
        :paramtype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
        :keyword virtual_network_type: The type of VPN in which API Management service needs to be
         configured in. None (Default Value) means the API Management service is not part of any Virtual
         Network, External means the API Management deployment is set up inside a Virtual Network having
         an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
         a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
         "External", "Internal". Default value: "None".
        :paramtype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
        :keyword publisher_email: Required. Publisher email.
        :paramtype publisher_email: str
        :keyword publisher_name: Required. Publisher name.
        :paramtype publisher_name: str
        """
        super(ApiManagementServiceResource, self).__init__(tags=tags, **kwargs)
        self.sku = sku
        self.identity = identity
        self.location = location
        self.etag = None
        self.notification_sender_email = notification_sender_email
        self.provisioning_state = None
        self.target_provisioning_state = None
        self.created_at_utc = None
        self.gateway_url = None
        self.gateway_regional_url = None
        self.portal_url = None
        self.management_api_url = None
        self.scm_url = None
        self.hostname_configurations = hostname_configurations
        self.static_ips = None
        self.virtual_network_configuration = virtual_network_configuration
        self.additional_locations = additional_locations
        self.custom_properties = custom_properties
        self.certificates = certificates
        self.virtual_network_type = virtual_network_type
        self.publisher_email = publisher_email
        self.publisher_name = publisher_name


class ApiManagementServiceSkuProperties(msrest.serialization.Model):
    """API Management service resource SKU properties.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. Name of the Sku. Known values are: "Developer", "Standard", "Premium",
     "Basic".
    :vartype name: str or ~azure.mgmt.apimanagement.models.SkuType
    :ivar capacity: Capacity of the SKU (number of deployed units of the SKU). The default value is
     1.
    :vartype capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: Union[str, "_models.SkuType"],
        capacity: Optional[int] = 1,
        **kwargs
    ):
        """
        :keyword name: Required. Name of the Sku. Known values are: "Developer", "Standard", "Premium",
         "Basic".
        :paramtype name: str or ~azure.mgmt.apimanagement.models.SkuType
        :keyword capacity: Capacity of the SKU (number of deployed units of the SKU). The default value
         is 1.
        :paramtype capacity: int
        """
        super(ApiManagementServiceSkuProperties, self).__init__(**kwargs)
        self.name = name
        self.capacity = capacity


class ApiManagementServiceUpdateHostnameParameters(msrest.serialization.Model):
    """Parameters supplied to the UpdateHostname operation.

    :ivar update: Hostnames to create or update.
    :vartype update: list[~azure.mgmt.apimanagement.models.HostnameConfigurationOld]
    :ivar delete: Hostnames types to delete.
    :vartype delete: list[str or ~azure.mgmt.apimanagement.models.HostnameType]
    """

    _attribute_map = {
        'update': {'key': 'update', 'type': '[HostnameConfigurationOld]'},
        'delete': {'key': 'delete', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        update: Optional[List["_models.HostnameConfigurationOld"]] = None,
        delete: Optional[List[Union[str, "_models.HostnameType"]]] = None,
        **kwargs
    ):
        """
        :keyword update: Hostnames to create or update.
        :paramtype update: list[~azure.mgmt.apimanagement.models.HostnameConfigurationOld]
        :keyword delete: Hostnames types to delete.
        :paramtype delete: list[str or ~azure.mgmt.apimanagement.models.HostnameType]
        """
        super(ApiManagementServiceUpdateHostnameParameters, self).__init__(**kwargs)
        self.update = update
        self.delete = delete


class ApiManagementServiceUpdateParameters(ApimResource):
    """Parameter supplied to Update Api Management Service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource is set to Microsoft.ApiManagement.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: SKU properties of the API Management service.
    :vartype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
    :ivar identity: Managed service identity of the Api Management service.
    :vartype identity: ~azure.mgmt.apimanagement.models.ApiManagementServiceIdentity
    :ivar etag: ETag of the resource.
    :vartype etag: str
    :ivar notification_sender_email: Email address from which the notification will be sent.
    :vartype notification_sender_email: str
    :ivar provisioning_state: The current provisioning state of the API Management service which
     can be one of the following:
     Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    :vartype provisioning_state: str
    :ivar target_provisioning_state: The provisioning state of the API Management service, which is
     targeted by the long running operation started on the service.
    :vartype target_provisioning_state: str
    :ivar created_at_utc: Creation UTC date of the API Management service.The date conforms to the
     following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_at_utc: ~datetime.datetime
    :ivar gateway_url: Gateway URL of the API Management service.
    :vartype gateway_url: str
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Default Region.
    :vartype gateway_regional_url: str
    :ivar portal_url: Publisher portal endpoint Url of the API Management service.
    :vartype portal_url: str
    :ivar management_api_url: Management API endpoint URL of the API Management service.
    :vartype management_api_url: str
    :ivar scm_url: SCM endpoint URL of the API Management service.
    :vartype scm_url: str
    :ivar hostname_configurations: Custom hostname configuration of the API Management service.
    :vartype hostname_configurations: list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
    :ivar static_ips: Static IP addresses of the API Management service virtual machines. Available
     only for Standard and Premium SKU.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration of the API Management
     service.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar additional_locations: Additional datacenter locations of the API Management service.
    :vartype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
    :ivar custom_properties: Custom properties of the API Management service. Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
     disable just TLS 1.1 and setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
     disable TLS 1.0 on an API Management service.
    :vartype custom_properties: dict[str, str]
    :ivar certificates: List of Certificates that need to be installed in the API Management
     service. Max supported certificates that can be installed is 10.
    :vartype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
    :ivar virtual_network_type: The type of VPN in which API Management service needs to be
     configured in. None (Default Value) means the API Management service is not part of any Virtual
     Network, External means the API Management deployment is set up inside a Virtual Network having
     an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
     a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
     "External", "Internal". Default value: "None".
    :vartype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
    :ivar publisher_email: Publisher email.
    :vartype publisher_email: str
    :ivar publisher_name: Publisher name.
    :vartype publisher_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'notification_sender_email': {'max_length': 100, 'min_length': 0},
        'provisioning_state': {'readonly': True},
        'target_provisioning_state': {'readonly': True},
        'created_at_utc': {'readonly': True},
        'gateway_url': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
        'portal_url': {'readonly': True},
        'management_api_url': {'readonly': True},
        'scm_url': {'readonly': True},
        'static_ips': {'readonly': True},
        'publisher_email': {'max_length': 100, 'min_length': 0},
        'publisher_name': {'max_length': 100, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'ApiManagementServiceSkuProperties'},
        'identity': {'key': 'identity', 'type': 'ApiManagementServiceIdentity'},
        'etag': {'key': 'etag', 'type': 'str'},
        'notification_sender_email': {'key': 'properties.notificationSenderEmail', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'target_provisioning_state': {'key': 'properties.targetProvisioningState', 'type': 'str'},
        'created_at_utc': {'key': 'properties.createdAtUtc', 'type': 'iso-8601'},
        'gateway_url': {'key': 'properties.gatewayUrl', 'type': 'str'},
        'gateway_regional_url': {'key': 'properties.gatewayRegionalUrl', 'type': 'str'},
        'portal_url': {'key': 'properties.portalUrl', 'type': 'str'},
        'management_api_url': {'key': 'properties.managementApiUrl', 'type': 'str'},
        'scm_url': {'key': 'properties.scmUrl', 'type': 'str'},
        'hostname_configurations': {'key': 'properties.hostnameConfigurations', 'type': '[HostnameConfiguration]'},
        'static_ips': {'key': 'properties.staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'properties.virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'additional_locations': {'key': 'properties.additionalLocations', 'type': '[AdditionalLocation]'},
        'custom_properties': {'key': 'properties.customProperties', 'type': '{str}'},
        'certificates': {'key': 'properties.certificates', 'type': '[CertificateConfiguration]'},
        'virtual_network_type': {'key': 'properties.virtualNetworkType', 'type': 'str'},
        'publisher_email': {'key': 'properties.publisherEmail', 'type': 'str'},
        'publisher_name': {'key': 'properties.publisherName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["_models.ApiManagementServiceSkuProperties"] = None,
        identity: Optional["_models.ApiManagementServiceIdentity"] = None,
        notification_sender_email: Optional[str] = None,
        hostname_configurations: Optional[List["_models.HostnameConfiguration"]] = None,
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        additional_locations: Optional[List["_models.AdditionalLocation"]] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        certificates: Optional[List["_models.CertificateConfiguration"]] = None,
        virtual_network_type: Optional[Union[str, "_models.VirtualNetworkType"]] = "None",
        publisher_email: Optional[str] = None,
        publisher_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword sku: SKU properties of the API Management service.
        :paramtype sku: ~azure.mgmt.apimanagement.models.ApiManagementServiceSkuProperties
        :keyword identity: Managed service identity of the Api Management service.
        :paramtype identity: ~azure.mgmt.apimanagement.models.ApiManagementServiceIdentity
        :keyword notification_sender_email: Email address from which the notification will be sent.
        :paramtype notification_sender_email: str
        :keyword hostname_configurations: Custom hostname configuration of the API Management service.
        :paramtype hostname_configurations:
         list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
        :keyword virtual_network_configuration: Virtual network configuration of the API Management
         service.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        :keyword additional_locations: Additional datacenter locations of the API Management service.
        :paramtype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
        :keyword custom_properties: Custom properties of the API Management service. Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
         cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
         disable just TLS 1.1 and setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
         disable TLS 1.0 on an API Management service.
        :paramtype custom_properties: dict[str, str]
        :keyword certificates: List of Certificates that need to be installed in the API Management
         service. Max supported certificates that can be installed is 10.
        :paramtype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
        :keyword virtual_network_type: The type of VPN in which API Management service needs to be
         configured in. None (Default Value) means the API Management service is not part of any Virtual
         Network, External means the API Management deployment is set up inside a Virtual Network having
         an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
         a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
         "External", "Internal". Default value: "None".
        :paramtype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
        :keyword publisher_email: Publisher email.
        :paramtype publisher_email: str
        :keyword publisher_name: Publisher name.
        :paramtype publisher_name: str
        """
        super(ApiManagementServiceUpdateParameters, self).__init__(tags=tags, **kwargs)
        self.sku = sku
        self.identity = identity
        self.etag = None
        self.notification_sender_email = notification_sender_email
        self.provisioning_state = None
        self.target_provisioning_state = None
        self.created_at_utc = None
        self.gateway_url = None
        self.gateway_regional_url = None
        self.portal_url = None
        self.management_api_url = None
        self.scm_url = None
        self.hostname_configurations = hostname_configurations
        self.static_ips = None
        self.virtual_network_configuration = virtual_network_configuration
        self.additional_locations = additional_locations
        self.custom_properties = custom_properties
        self.certificates = certificates
        self.virtual_network_type = virtual_network_type
        self.publisher_email = publisher_email
        self.publisher_name = publisher_name


class ApiManagementServiceUpdateProperties(ApiManagementServiceBaseProperties):
    """Properties of an API Management service resource description.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar notification_sender_email: Email address from which the notification will be sent.
    :vartype notification_sender_email: str
    :ivar provisioning_state: The current provisioning state of the API Management service which
     can be one of the following:
     Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
    :vartype provisioning_state: str
    :ivar target_provisioning_state: The provisioning state of the API Management service, which is
     targeted by the long running operation started on the service.
    :vartype target_provisioning_state: str
    :ivar created_at_utc: Creation UTC date of the API Management service.The date conforms to the
     following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_at_utc: ~datetime.datetime
    :ivar gateway_url: Gateway URL of the API Management service.
    :vartype gateway_url: str
    :ivar gateway_regional_url: Gateway URL of the API Management service in the Default Region.
    :vartype gateway_regional_url: str
    :ivar portal_url: Publisher portal endpoint Url of the API Management service.
    :vartype portal_url: str
    :ivar management_api_url: Management API endpoint URL of the API Management service.
    :vartype management_api_url: str
    :ivar scm_url: SCM endpoint URL of the API Management service.
    :vartype scm_url: str
    :ivar hostname_configurations: Custom hostname configuration of the API Management service.
    :vartype hostname_configurations: list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
    :ivar static_ips: Static IP addresses of the API Management service virtual machines. Available
     only for Standard and Premium SKU.
    :vartype static_ips: list[str]
    :ivar virtual_network_configuration: Virtual network configuration of the API Management
     service.
    :vartype virtual_network_configuration:
     ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
    :ivar additional_locations: Additional datacenter locations of the API Management service.
    :vartype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
    :ivar custom_properties: Custom properties of the API Management service. Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
     cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
     disable just TLS 1.1 and setting
     ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
     disable TLS 1.0 on an API Management service.
    :vartype custom_properties: dict[str, str]
    :ivar certificates: List of Certificates that need to be installed in the API Management
     service. Max supported certificates that can be installed is 10.
    :vartype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
    :ivar virtual_network_type: The type of VPN in which API Management service needs to be
     configured in. None (Default Value) means the API Management service is not part of any Virtual
     Network, External means the API Management deployment is set up inside a Virtual Network having
     an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
     a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
     "External", "Internal". Default value: "None".
    :vartype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
    :ivar publisher_email: Publisher email.
    :vartype publisher_email: str
    :ivar publisher_name: Publisher name.
    :vartype publisher_name: str
    """

    _validation = {
        'notification_sender_email': {'max_length': 100, 'min_length': 0},
        'provisioning_state': {'readonly': True},
        'target_provisioning_state': {'readonly': True},
        'created_at_utc': {'readonly': True},
        'gateway_url': {'readonly': True},
        'gateway_regional_url': {'readonly': True},
        'portal_url': {'readonly': True},
        'management_api_url': {'readonly': True},
        'scm_url': {'readonly': True},
        'static_ips': {'readonly': True},
        'publisher_email': {'max_length': 100, 'min_length': 0},
        'publisher_name': {'max_length': 100, 'min_length': 0},
    }

    _attribute_map = {
        'notification_sender_email': {'key': 'notificationSenderEmail', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'target_provisioning_state': {'key': 'targetProvisioningState', 'type': 'str'},
        'created_at_utc': {'key': 'createdAtUtc', 'type': 'iso-8601'},
        'gateway_url': {'key': 'gatewayUrl', 'type': 'str'},
        'gateway_regional_url': {'key': 'gatewayRegionalUrl', 'type': 'str'},
        'portal_url': {'key': 'portalUrl', 'type': 'str'},
        'management_api_url': {'key': 'managementApiUrl', 'type': 'str'},
        'scm_url': {'key': 'scmUrl', 'type': 'str'},
        'hostname_configurations': {'key': 'hostnameConfigurations', 'type': '[HostnameConfiguration]'},
        'static_ips': {'key': 'staticIps', 'type': '[str]'},
        'virtual_network_configuration': {'key': 'virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
        'additional_locations': {'key': 'additionalLocations', 'type': '[AdditionalLocation]'},
        'custom_properties': {'key': 'customProperties', 'type': '{str}'},
        'certificates': {'key': 'certificates', 'type': '[CertificateConfiguration]'},
        'virtual_network_type': {'key': 'virtualNetworkType', 'type': 'str'},
        'publisher_email': {'key': 'publisherEmail', 'type': 'str'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        notification_sender_email: Optional[str] = None,
        hostname_configurations: Optional[List["_models.HostnameConfiguration"]] = None,
        virtual_network_configuration: Optional["_models.VirtualNetworkConfiguration"] = None,
        additional_locations: Optional[List["_models.AdditionalLocation"]] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        certificates: Optional[List["_models.CertificateConfiguration"]] = None,
        virtual_network_type: Optional[Union[str, "_models.VirtualNetworkType"]] = "None",
        publisher_email: Optional[str] = None,
        publisher_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword notification_sender_email: Email address from which the notification will be sent.
        :paramtype notification_sender_email: str
        :keyword hostname_configurations: Custom hostname configuration of the API Management service.
        :paramtype hostname_configurations:
         list[~azure.mgmt.apimanagement.models.HostnameConfiguration]
        :keyword virtual_network_configuration: Virtual network configuration of the API Management
         service.
        :paramtype virtual_network_configuration:
         ~azure.mgmt.apimanagement.models.VirtualNetworkConfiguration
        :keyword additional_locations: Additional datacenter locations of the API Management service.
        :paramtype additional_locations: list[~azure.mgmt.apimanagement.models.AdditionalLocation]
        :keyword custom_properties: Custom properties of the API Management service. Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`` will disable the
         cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2). Setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11`` can be used to
         disable just TLS 1.1 and setting
         ``Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10`` can be used to
         disable TLS 1.0 on an API Management service.
        :paramtype custom_properties: dict[str, str]
        :keyword certificates: List of Certificates that need to be installed in the API Management
         service. Max supported certificates that can be installed is 10.
        :paramtype certificates: list[~azure.mgmt.apimanagement.models.CertificateConfiguration]
        :keyword virtual_network_type: The type of VPN in which API Management service needs to be
         configured in. None (Default Value) means the API Management service is not part of any Virtual
         Network, External means the API Management deployment is set up inside a Virtual Network having
         an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside
         a Virtual Network having an Intranet Facing Endpoint only. Known values are: "None",
         "External", "Internal". Default value: "None".
        :paramtype virtual_network_type: str or ~azure.mgmt.apimanagement.models.VirtualNetworkType
        :keyword publisher_email: Publisher email.
        :paramtype publisher_email: str
        :keyword publisher_name: Publisher name.
        :paramtype publisher_name: str
        """
        super(ApiManagementServiceUpdateProperties, self).__init__(notification_sender_email=notification_sender_email, hostname_configurations=hostname_configurations, virtual_network_configuration=virtual_network_configuration, additional_locations=additional_locations, custom_properties=custom_properties, certificates=certificates, virtual_network_type=virtual_network_type, **kwargs)
        self.publisher_email = publisher_email
        self.publisher_name = publisher_name


class ApiManagementServiceUploadCertificateParameters(msrest.serialization.Model):
    """Parameters supplied to the Upload SSL certificate for an API Management service operation.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management", "Scm".
    :vartype type: str or ~azure.mgmt.apimanagement.models.HostnameType
    :ivar certificate: Required. Base64 Encoded certificate.
    :vartype certificate: str
    :ivar certificate_password: Required. Certificate password.
    :vartype certificate_password: str
    """

    _validation = {
        'type': {'required': True},
        'certificate': {'required': True},
        'certificate_password': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'certificate': {'key': 'certificate', 'type': 'str'},
        'certificate_password': {'key': 'certificate_password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.HostnameType"],
        certificate: str,
        certificate_password: str,
        **kwargs
    ):
        """
        :keyword type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management",
         "Scm".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.HostnameType
        :keyword certificate: Required. Base64 Encoded certificate.
        :paramtype certificate: str
        :keyword certificate_password: Required. Certificate password.
        :paramtype certificate_password: str
        """
        super(ApiManagementServiceUploadCertificateParameters, self).__init__(**kwargs)
        self.type = type
        self.certificate = certificate
        self.certificate_password = certificate_password


class ApiReleaseCollection(msrest.serialization.Model):
    """Paged Api Revision list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ApiReleaseContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiReleaseContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ApiReleaseCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ApiReleaseContract(Resource):
    """Api Release details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar api_id: Identifier of the API the release belongs to.
    :vartype api_id: str
    :ivar created_date_time: The time the API was released. The date conforms to the following
     format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype created_date_time: ~datetime.datetime
    :ivar updated_date_time: The time the API release was updated.
    :vartype updated_date_time: ~datetime.datetime
    :ivar notes: Release Notes.
    :vartype notes: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_date_time': {'readonly': True},
        'updated_date_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'api_id': {'key': 'properties.apiId', 'type': 'str'},
        'created_date_time': {'key': 'properties.createdDateTime', 'type': 'iso-8601'},
        'updated_date_time': {'key': 'properties.updatedDateTime', 'type': 'iso-8601'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        api_id: Optional[str] = None,
        notes: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword api_id: Identifier of the API the release belongs to.
        :paramtype api_id: str
        :keyword notes: Release Notes.
        :paramtype notes: str
        """
        super(ApiReleaseContract, self).__init__(**kwargs)
        self.api_id = api_id
        self.created_date_time = None
        self.updated_date_time = None
        self.notes = notes


class ApiRevisionCollection(msrest.serialization.Model):
    """Paged Api Revision list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ApiRevisionContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiRevisionContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ApiRevisionContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.ApiRevisionContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(ApiRevisionCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ApiRevisionContract(Resource):
    """Api Revision details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar api_id: Identifier of the API Revision.
    :vartype api_id: str
    :ivar api_revision: Revision number of API.
    :vartype api_revision: str
    :ivar created_date_time: The time the API Revision was created. The date conforms to the
     following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype created_date_time: ~datetime.datetime
    :ivar updated_date_time: The time the API Revision were updated. The date conforms to the
     following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
    :vartype updated_date_time: ~datetime.datetime
    :ivar description: Description of the API Revision.
    :vartype description: str
    :ivar private_url: Gateway URL for accessing the non-current API Revision.
    :vartype private_url: str
    :ivar is_online: Indicates if API revision is the current api revision.
    :vartype is_online: bool
    :ivar is_current: Indicates if API revision is accessible via the gateway.
    :vartype is_current: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'api_id': {'readonly': True},
        'api_revision': {'readonly': True, 'max_length': 100, 'min_length': 1},
        'created_date_time': {'readonly': True},
        'updated_date_time': {'readonly': True},
        'description': {'readonly': True, 'max_length': 256, 'min_length': 0},
        'private_url': {'readonly': True},
        'is_online': {'readonly': True},
        'is_current': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'api_id': {'key': 'properties.apiId', 'type': 'str'},
        'api_revision': {'key': 'properties.apiRevision', 'type': 'str'},
        'created_date_time': {'key': 'properties.createdDateTime', 'type': 'iso-8601'},
        'updated_date_time': {'key': 'properties.updatedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'private_url': {'key': 'properties.privateUrl', 'type': 'str'},
        'is_online': {'key': 'properties.isOnline', 'type': 'bool'},
        'is_current': {'key': 'properties.isCurrent', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ApiRevisionContract, self).__init__(**kwargs)
        self.api_id = None
        self.api_revision = None
        self.created_date_time = None
        self.updated_date_time = None
        self.description = None
        self.private_url = None
        self.is_online = None
        self.is_current = None


class ApiRevisionInfoContract(msrest.serialization.Model):
    """Object used to create an API Revision or Version based on an existing API Revision.

    :ivar source_api_id: Resource identifier of API to be used to create the revision from.
    :vartype source_api_id: str
    :ivar api_version_name: Version identifier for the new API Version.
    :vartype api_version_name: str
    :ivar api_revision_description: Description of new API Revision.
    :vartype api_revision_description: str
    :ivar api_version_set: Version set details.
    :vartype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContractProperties
    """

    _validation = {
        'api_version_name': {'max_length': 100, 'min_length': 0},
        'api_revision_description': {'max_length': 256, 'min_length': 0},
    }

    _attribute_map = {
        'source_api_id': {'key': 'sourceApiId', 'type': 'str'},
        'api_version_name': {'key': 'apiVersionName', 'type': 'str'},
        'api_revision_description': {'key': 'apiRevisionDescription', 'type': 'str'},
        'api_version_set': {'key': 'apiVersionSet', 'type': 'ApiVersionSetContractProperties'},
    }

    def __init__(
        self,
        *,
        source_api_id: Optional[str] = None,
        api_version_name: Optional[str] = None,
        api_revision_description: Optional[str] = None,
        api_version_set: Optional["_models.ApiVersionSetContractProperties"] = None,
        **kwargs
    ):
        """
        :keyword source_api_id: Resource identifier of API to be used to create the revision from.
        :paramtype source_api_id: str
        :keyword api_version_name: Version identifier for the new API Version.
        :paramtype api_version_name: str
        :keyword api_revision_description: Description of new API Revision.
        :paramtype api_revision_description: str
        :keyword api_version_set: Version set details.
        :paramtype api_version_set: ~azure.mgmt.apimanagement.models.ApiVersionSetContractProperties
        """
        super(ApiRevisionInfoContract, self).__init__(**kwargs)
        self.source_api_id = source_api_id
        self.api_version_name = api_version_name
        self.api_revision_description = api_revision_description
        self.api_version_set = api_version_set


class ApiUpdateContract(msrest.serialization.Model):
    """API update contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the API. May include HTML formatting tags.
    :vartype description: str
    :ivar authentication_settings: Collection of authentication settings included into this API.
    :vartype authentication_settings:
     ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
    :ivar subscription_key_parameter_names: Protocols over which API is made available.
    :vartype subscription_key_parameter_names:
     ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
    :ivar api_type: Type of API. Known values are: "http", "soap".
    :vartype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
    :ivar api_revision: Describes the Revision of the Api. If no value is provided, default
     revision 1 is created.
    :vartype api_revision: str
    :ivar api_version: Indicates the Version identifier of the API if the API is versioned.
    :vartype api_version: str
    :ivar is_current: Indicates if API revision is current api revision.
    :vartype is_current: bool
    :ivar is_online: Indicates if API revision is accessible via the gateway.
    :vartype is_online: bool
    :ivar api_version_set_id: A resource identifier for the related ApiVersionSet.
    :vartype api_version_set_id: str
    :ivar display_name: API name.
    :vartype display_name: str
    :ivar service_url: Absolute URL of the backend service implementing this API.
    :vartype service_url: str
    :ivar path: Relative URL uniquely identifying this API and all of its resource paths within the
     API Management service instance. It is appended to the API endpoint base URL specified during
     the service instance creation to form a public URL for this API.
    :vartype path: str
    :ivar protocols: Describes on which protocols the operations in this API can be invoked.
    :vartype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
    """

    _validation = {
        'api_revision': {'max_length': 100, 'min_length': 1},
        'api_version': {'max_length': 100, 'min_length': 0},
        'is_current': {'readonly': True},
        'is_online': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'service_url': {'max_length': 2000, 'min_length': 1},
        'path': {'max_length': 400, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'properties.description', 'type': 'str'},
        'authentication_settings': {'key': 'properties.authenticationSettings', 'type': 'AuthenticationSettingsContract'},
        'subscription_key_parameter_names': {'key': 'properties.subscriptionKeyParameterNames', 'type': 'SubscriptionKeyParameterNamesContract'},
        'api_type': {'key': 'properties.type', 'type': 'str'},
        'api_revision': {'key': 'properties.apiRevision', 'type': 'str'},
        'api_version': {'key': 'properties.apiVersion', 'type': 'str'},
        'is_current': {'key': 'properties.isCurrent', 'type': 'bool'},
        'is_online': {'key': 'properties.isOnline', 'type': 'bool'},
        'api_version_set_id': {'key': 'properties.apiVersionSetId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'service_url': {'key': 'properties.serviceUrl', 'type': 'str'},
        'path': {'key': 'properties.path', 'type': 'str'},
        'protocols': {'key': 'properties.protocols', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authentication_settings: Optional["_models.AuthenticationSettingsContract"] = None,
        subscription_key_parameter_names: Optional["_models.SubscriptionKeyParameterNamesContract"] = None,
        api_type: Optional[Union[str, "_models.ApiType"]] = None,
        api_revision: Optional[str] = None,
        api_version: Optional[str] = None,
        api_version_set_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_url: Optional[str] = None,
        path: Optional[str] = None,
        protocols: Optional[List[Union[str, "_models.Protocol"]]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the API. May include HTML formatting tags.
        :paramtype description: str
        :keyword authentication_settings: Collection of authentication settings included into this API.
        :paramtype authentication_settings:
         ~azure.mgmt.apimanagement.models.AuthenticationSettingsContract
        :keyword subscription_key_parameter_names: Protocols over which API is made available.
        :paramtype subscription_key_parameter_names:
         ~azure.mgmt.apimanagement.models.SubscriptionKeyParameterNamesContract
        :keyword api_type: Type of API. Known values are: "http", "soap".
        :paramtype api_type: str or ~azure.mgmt.apimanagement.models.ApiType
        :keyword api_revision: Describes the Revision of the Api. If no value is provided, default
         revision 1 is created.
        :paramtype api_revision: str
        :keyword api_version: Indicates the Version identifier of the API if the API is versioned.
        :paramtype api_version: str
        :keyword api_version_set_id: A resource identifier for the related ApiVersionSet.
        :paramtype api_version_set_id: str
        :keyword display_name: API name.
        :paramtype display_name: str
        :keyword service_url: Absolute URL of the backend service implementing this API.
        :paramtype service_url: str
        :keyword path: Relative URL uniquely identifying this API and all of its resource paths within
         the API Management service instance. It is appended to the API endpoint base URL specified
         during the service instance creation to form a public URL for this API.
        :paramtype path: str
        :keyword protocols: Describes on which protocols the operations in this API can be invoked.
        :paramtype protocols: list[str or ~azure.mgmt.apimanagement.models.Protocol]
        """
        super(ApiUpdateContract, self).__init__(**kwargs)
        self.description = description
        self.authentication_settings = authentication_settings
        self.subscription_key_parameter_names = subscription_key_parameter_names
        self.api_type = api_type
        self.api_revision = api_revision
        self.api_version = api_version
        self.is_current = None
        self.is_online = None
        self.api_version_set_id = api_version_set_id
        self.display_name = display_name
        self.service_url = service_url
        self.path = path
        self.protocols = protocols


class ApiVersionSetCollection(msrest.serialization.Model):
    """Paged Api Version Set list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ApiVersionSetContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApiVersionSetContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ApiVersionSetContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.ApiVersionSetContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(ApiVersionSetCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ApiVersionSetContract(Resource):
    """Api Version Set Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Description of API Version Set.
    :vartype description: str
    :ivar version_query_name: Name of query parameter that indicates the API Version if
     versioningScheme is set to ``query``.
    :vartype version_query_name: str
    :ivar version_header_name: Name of HTTP header parameter that indicates the API Version if
     versioningScheme is set to ``header``.
    :vartype version_header_name: str
    :ivar display_name: Name of API Version Set.
    :vartype display_name: str
    :ivar versioning_scheme: An value that determines where the API Version identifier will be
     located in a HTTP request. Known values are: "Segment", "Query", "Header".
    :vartype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'version_query_name': {'max_length': 100, 'min_length': 1},
        'version_header_name': {'max_length': 100, 'min_length': 1},
        'display_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'version_query_name': {'key': 'properties.versionQueryName', 'type': 'str'},
        'version_header_name': {'key': 'properties.versionHeaderName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'versioning_scheme': {'key': 'properties.versioningScheme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        version_query_name: Optional[str] = None,
        version_header_name: Optional[str] = None,
        display_name: Optional[str] = None,
        versioning_scheme: Optional[Union[str, "_models.VersioningScheme"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of API Version Set.
        :paramtype description: str
        :keyword version_query_name: Name of query parameter that indicates the API Version if
         versioningScheme is set to ``query``.
        :paramtype version_query_name: str
        :keyword version_header_name: Name of HTTP header parameter that indicates the API Version if
         versioningScheme is set to ``header``.
        :paramtype version_header_name: str
        :keyword display_name: Name of API Version Set.
        :paramtype display_name: str
        :keyword versioning_scheme: An value that determines where the API Version identifier will be
         located in a HTTP request. Known values are: "Segment", "Query", "Header".
        :paramtype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
        """
        super(ApiVersionSetContract, self).__init__(**kwargs)
        self.description = description
        self.version_query_name = version_query_name
        self.version_header_name = version_header_name
        self.display_name = display_name
        self.versioning_scheme = versioning_scheme


class ApiVersionSetEntityBase(msrest.serialization.Model):
    """ApiVersionSetEntityBase.

    :ivar description: Description of API Version Set.
    :vartype description: str
    :ivar version_query_name: Name of query parameter that indicates the API Version if
     versioningScheme is set to ``query``.
    :vartype version_query_name: str
    :ivar version_header_name: Name of HTTP header parameter that indicates the API Version if
     versioningScheme is set to ``header``.
    :vartype version_header_name: str
    """

    _validation = {
        'version_query_name': {'max_length': 100, 'min_length': 1},
        'version_header_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'version_query_name': {'key': 'versionQueryName', 'type': 'str'},
        'version_header_name': {'key': 'versionHeaderName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        version_query_name: Optional[str] = None,
        version_header_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of API Version Set.
        :paramtype description: str
        :keyword version_query_name: Name of query parameter that indicates the API Version if
         versioningScheme is set to ``query``.
        :paramtype version_query_name: str
        :keyword version_header_name: Name of HTTP header parameter that indicates the API Version if
         versioningScheme is set to ``header``.
        :paramtype version_header_name: str
        """
        super(ApiVersionSetEntityBase, self).__init__(**kwargs)
        self.description = description
        self.version_query_name = version_query_name
        self.version_header_name = version_header_name


class ApiVersionSetContractProperties(ApiVersionSetEntityBase):
    """Properties of an API Version Set.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of API Version Set.
    :vartype description: str
    :ivar version_query_name: Name of query parameter that indicates the API Version if
     versioningScheme is set to ``query``.
    :vartype version_query_name: str
    :ivar version_header_name: Name of HTTP header parameter that indicates the API Version if
     versioningScheme is set to ``header``.
    :vartype version_header_name: str
    :ivar display_name: Required. Name of API Version Set.
    :vartype display_name: str
    :ivar versioning_scheme: Required. An value that determines where the API Version identifier
     will be located in a HTTP request. Known values are: "Segment", "Query", "Header".
    :vartype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
    """

    _validation = {
        'version_query_name': {'max_length': 100, 'min_length': 1},
        'version_header_name': {'max_length': 100, 'min_length': 1},
        'display_name': {'required': True, 'max_length': 100, 'min_length': 1},
        'versioning_scheme': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'version_query_name': {'key': 'versionQueryName', 'type': 'str'},
        'version_header_name': {'key': 'versionHeaderName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'versioning_scheme': {'key': 'versioningScheme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        versioning_scheme: Union[str, "_models.VersioningScheme"],
        description: Optional[str] = None,
        version_query_name: Optional[str] = None,
        version_header_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of API Version Set.
        :paramtype description: str
        :keyword version_query_name: Name of query parameter that indicates the API Version if
         versioningScheme is set to ``query``.
        :paramtype version_query_name: str
        :keyword version_header_name: Name of HTTP header parameter that indicates the API Version if
         versioningScheme is set to ``header``.
        :paramtype version_header_name: str
        :keyword display_name: Required. Name of API Version Set.
        :paramtype display_name: str
        :keyword versioning_scheme: Required. An value that determines where the API Version identifier
         will be located in a HTTP request. Known values are: "Segment", "Query", "Header".
        :paramtype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
        """
        super(ApiVersionSetContractProperties, self).__init__(description=description, version_query_name=version_query_name, version_header_name=version_header_name, **kwargs)
        self.display_name = display_name
        self.versioning_scheme = versioning_scheme


class ApiVersionSetUpdateParameters(msrest.serialization.Model):
    """Parameters to update or create an Api Version Set Contract.

    :ivar description: Description of API Version Set.
    :vartype description: str
    :ivar version_query_name: Name of query parameter that indicates the API Version if
     versioningScheme is set to ``query``.
    :vartype version_query_name: str
    :ivar version_header_name: Name of HTTP header parameter that indicates the API Version if
     versioningScheme is set to ``header``.
    :vartype version_header_name: str
    :ivar display_name: Name of API Version Set.
    :vartype display_name: str
    :ivar versioning_scheme: An value that determines where the API Version identifier will be
     located in a HTTP request. Known values are: "Segment", "Query", "Header".
    :vartype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
    """

    _validation = {
        'version_query_name': {'max_length': 100, 'min_length': 1},
        'version_header_name': {'max_length': 100, 'min_length': 1},
        'display_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'properties.description', 'type': 'str'},
        'version_query_name': {'key': 'properties.versionQueryName', 'type': 'str'},
        'version_header_name': {'key': 'properties.versionHeaderName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'versioning_scheme': {'key': 'properties.versioningScheme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        version_query_name: Optional[str] = None,
        version_header_name: Optional[str] = None,
        display_name: Optional[str] = None,
        versioning_scheme: Optional[Union[str, "_models.VersioningScheme"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of API Version Set.
        :paramtype description: str
        :keyword version_query_name: Name of query parameter that indicates the API Version if
         versioningScheme is set to ``query``.
        :paramtype version_query_name: str
        :keyword version_header_name: Name of HTTP header parameter that indicates the API Version if
         versioningScheme is set to ``header``.
        :paramtype version_header_name: str
        :keyword display_name: Name of API Version Set.
        :paramtype display_name: str
        :keyword versioning_scheme: An value that determines where the API Version identifier will be
         located in a HTTP request. Known values are: "Segment", "Query", "Header".
        :paramtype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
        """
        super(ApiVersionSetUpdateParameters, self).__init__(**kwargs)
        self.description = description
        self.version_query_name = version_query_name
        self.version_header_name = version_header_name
        self.display_name = display_name
        self.versioning_scheme = versioning_scheme


class ApiVersionSetUpdateParametersProperties(ApiVersionSetEntityBase):
    """Properties used to create or update an API Version Set.

    :ivar description: Description of API Version Set.
    :vartype description: str
    :ivar version_query_name: Name of query parameter that indicates the API Version if
     versioningScheme is set to ``query``.
    :vartype version_query_name: str
    :ivar version_header_name: Name of HTTP header parameter that indicates the API Version if
     versioningScheme is set to ``header``.
    :vartype version_header_name: str
    :ivar display_name: Name of API Version Set.
    :vartype display_name: str
    :ivar versioning_scheme: An value that determines where the API Version identifier will be
     located in a HTTP request. Known values are: "Segment", "Query", "Header".
    :vartype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
    """

    _validation = {
        'version_query_name': {'max_length': 100, 'min_length': 1},
        'version_header_name': {'max_length': 100, 'min_length': 1},
        'display_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'version_query_name': {'key': 'versionQueryName', 'type': 'str'},
        'version_header_name': {'key': 'versionHeaderName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'versioning_scheme': {'key': 'versioningScheme', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        version_query_name: Optional[str] = None,
        version_header_name: Optional[str] = None,
        display_name: Optional[str] = None,
        versioning_scheme: Optional[Union[str, "_models.VersioningScheme"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of API Version Set.
        :paramtype description: str
        :keyword version_query_name: Name of query parameter that indicates the API Version if
         versioningScheme is set to ``query``.
        :paramtype version_query_name: str
        :keyword version_header_name: Name of HTTP header parameter that indicates the API Version if
         versioningScheme is set to ``header``.
        :paramtype version_header_name: str
        :keyword display_name: Name of API Version Set.
        :paramtype display_name: str
        :keyword versioning_scheme: An value that determines where the API Version identifier will be
         located in a HTTP request. Known values are: "Segment", "Query", "Header".
        :paramtype versioning_scheme: str or ~azure.mgmt.apimanagement.models.VersioningScheme
        """
        super(ApiVersionSetUpdateParametersProperties, self).__init__(description=description, version_query_name=version_query_name, version_header_name=version_header_name, **kwargs)
        self.display_name = display_name
        self.versioning_scheme = versioning_scheme


class AuthenticationSettingsContract(msrest.serialization.Model):
    """API Authentication Settings.

    :ivar o_auth2: OAuth2 Authentication settings.
    :vartype o_auth2: ~azure.mgmt.apimanagement.models.OAuth2AuthenticationSettingsContract
    """

    _attribute_map = {
        'o_auth2': {'key': 'oAuth2', 'type': 'OAuth2AuthenticationSettingsContract'},
    }

    def __init__(
        self,
        *,
        o_auth2: Optional["_models.OAuth2AuthenticationSettingsContract"] = None,
        **kwargs
    ):
        """
        :keyword o_auth2: OAuth2 Authentication settings.
        :paramtype o_auth2: ~azure.mgmt.apimanagement.models.OAuth2AuthenticationSettingsContract
        """
        super(AuthenticationSettingsContract, self).__init__(**kwargs)
        self.o_auth2 = o_auth2


class AuthorizationServerCollection(msrest.serialization.Model):
    """Paged OAuth2 Authorization Servers list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.AuthorizationServerContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AuthorizationServerContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.AuthorizationServerContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.AuthorizationServerContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(AuthorizationServerCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class AuthorizationServerContract(Resource):
    """External OAuth authorization server settings.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Description of the authorization server. Can contain HTML formatting tags.
    :vartype description: str
    :ivar authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
     always present. POST is optional.
    :vartype authorization_methods: list[str or
     ~azure.mgmt.apimanagement.models.AuthorizationMethod]
    :ivar client_authentication_method: Method of authentication supported by the token endpoint of
     this authorization server. Possible values are Basic and/or Body. When Body is specified,
     client credentials and other parameters are passed within the request body in the
     application/x-www-form-urlencoded format.
    :vartype client_authentication_method: list[str or
     ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
    :ivar token_body_parameters: Additional parameters required by the token endpoint of this
     authorization server represented as an array of JSON objects with name and value string
     properties, i.e. {"name" : "name value", "value": "a value"}.
    :vartype token_body_parameters:
     list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
    :ivar token_endpoint: OAuth token endpoint. Contains absolute URI to entity being referenced.
    :vartype token_endpoint: str
    :ivar support_state: If true, authorization server will include state parameter from the
     authorization request to its response. Client may use state parameter to raise protocol
     security.
    :vartype support_state: bool
    :ivar default_scope: Access token scope that is going to be requested by default. Can be
     overridden at the API level. Should be provided in the form of a string containing
     space-delimited values.
    :vartype default_scope: str
    :ivar bearer_token_sending_methods: Specifies the mechanism by which access token is passed to
     the API.
    :vartype bearer_token_sending_methods: list[str or
     ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
    :ivar client_secret: Client or app secret registered with this authorization server.
    :vartype client_secret: str
    :ivar resource_owner_username: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner username.
    :vartype resource_owner_username: str
    :ivar resource_owner_password: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner password.
    :vartype resource_owner_password: str
    :ivar display_name: User-friendly authorization server name.
    :vartype display_name: str
    :ivar client_registration_endpoint: Optional reference to a page where client or app
     registration for this authorization server is performed. Contains absolute URL to entity being
     referenced.
    :vartype client_registration_endpoint: str
    :ivar authorization_endpoint: OAuth authorization endpoint. See
     http://tools.ietf.org/html/rfc6749#section-3.2.
    :vartype authorization_endpoint: str
    :ivar grant_types: Form of an authorization grant, which the client uses to request the access
     token.
    :vartype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
    :ivar client_id: Client or app id registered with this authorization server.
    :vartype client_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'authorization_methods': {'key': 'properties.authorizationMethods', 'type': '[str]'},
        'client_authentication_method': {'key': 'properties.clientAuthenticationMethod', 'type': '[str]'},
        'token_body_parameters': {'key': 'properties.tokenBodyParameters', 'type': '[TokenBodyParameterContract]'},
        'token_endpoint': {'key': 'properties.tokenEndpoint', 'type': 'str'},
        'support_state': {'key': 'properties.supportState', 'type': 'bool'},
        'default_scope': {'key': 'properties.defaultScope', 'type': 'str'},
        'bearer_token_sending_methods': {'key': 'properties.bearerTokenSendingMethods', 'type': '[str]'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
        'resource_owner_username': {'key': 'properties.resourceOwnerUsername', 'type': 'str'},
        'resource_owner_password': {'key': 'properties.resourceOwnerPassword', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'client_registration_endpoint': {'key': 'properties.clientRegistrationEndpoint', 'type': 'str'},
        'authorization_endpoint': {'key': 'properties.authorizationEndpoint', 'type': 'str'},
        'grant_types': {'key': 'properties.grantTypes', 'type': '[str]'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authorization_methods: Optional[List[Union[str, "_models.AuthorizationMethod"]]] = None,
        client_authentication_method: Optional[List[Union[str, "_models.ClientAuthenticationMethod"]]] = None,
        token_body_parameters: Optional[List["_models.TokenBodyParameterContract"]] = None,
        token_endpoint: Optional[str] = None,
        support_state: Optional[bool] = None,
        default_scope: Optional[str] = None,
        bearer_token_sending_methods: Optional[List[Union[str, "_models.BearerTokenSendingMethod"]]] = None,
        client_secret: Optional[str] = None,
        resource_owner_username: Optional[str] = None,
        resource_owner_password: Optional[str] = None,
        display_name: Optional[str] = None,
        client_registration_endpoint: Optional[str] = None,
        authorization_endpoint: Optional[str] = None,
        grant_types: Optional[List[Union[str, "_models.GrantType"]]] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the authorization server. Can contain HTML formatting
         tags.
        :paramtype description: str
        :keyword authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
         always present. POST is optional.
        :paramtype authorization_methods: list[str or
         ~azure.mgmt.apimanagement.models.AuthorizationMethod]
        :keyword client_authentication_method: Method of authentication supported by the token endpoint
         of this authorization server. Possible values are Basic and/or Body. When Body is specified,
         client credentials and other parameters are passed within the request body in the
         application/x-www-form-urlencoded format.
        :paramtype client_authentication_method: list[str or
         ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
        :keyword token_body_parameters: Additional parameters required by the token endpoint of this
         authorization server represented as an array of JSON objects with name and value string
         properties, i.e. {"name" : "name value", "value": "a value"}.
        :paramtype token_body_parameters:
         list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
        :keyword token_endpoint: OAuth token endpoint. Contains absolute URI to entity being
         referenced.
        :paramtype token_endpoint: str
        :keyword support_state: If true, authorization server will include state parameter from the
         authorization request to its response. Client may use state parameter to raise protocol
         security.
        :paramtype support_state: bool
        :keyword default_scope: Access token scope that is going to be requested by default. Can be
         overridden at the API level. Should be provided in the form of a string containing
         space-delimited values.
        :paramtype default_scope: str
        :keyword bearer_token_sending_methods: Specifies the mechanism by which access token is passed
         to the API.
        :paramtype bearer_token_sending_methods: list[str or
         ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
        :keyword client_secret: Client or app secret registered with this authorization server.
        :paramtype client_secret: str
        :keyword resource_owner_username: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner username.
        :paramtype resource_owner_username: str
        :keyword resource_owner_password: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner password.
        :paramtype resource_owner_password: str
        :keyword display_name: User-friendly authorization server name.
        :paramtype display_name: str
        :keyword client_registration_endpoint: Optional reference to a page where client or app
         registration for this authorization server is performed. Contains absolute URL to entity being
         referenced.
        :paramtype client_registration_endpoint: str
        :keyword authorization_endpoint: OAuth authorization endpoint. See
         http://tools.ietf.org/html/rfc6749#section-3.2.
        :paramtype authorization_endpoint: str
        :keyword grant_types: Form of an authorization grant, which the client uses to request the
         access token.
        :paramtype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
        :keyword client_id: Client or app id registered with this authorization server.
        :paramtype client_id: str
        """
        super(AuthorizationServerContract, self).__init__(**kwargs)
        self.description = description
        self.authorization_methods = authorization_methods
        self.client_authentication_method = client_authentication_method
        self.token_body_parameters = token_body_parameters
        self.token_endpoint = token_endpoint
        self.support_state = support_state
        self.default_scope = default_scope
        self.bearer_token_sending_methods = bearer_token_sending_methods
        self.client_secret = client_secret
        self.resource_owner_username = resource_owner_username
        self.resource_owner_password = resource_owner_password
        self.display_name = display_name
        self.client_registration_endpoint = client_registration_endpoint
        self.authorization_endpoint = authorization_endpoint
        self.grant_types = grant_types
        self.client_id = client_id


class AuthorizationServerContractBaseProperties(msrest.serialization.Model):
    """External OAuth authorization server Update settings contract.

    :ivar description: Description of the authorization server. Can contain HTML formatting tags.
    :vartype description: str
    :ivar authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
     always present. POST is optional.
    :vartype authorization_methods: list[str or
     ~azure.mgmt.apimanagement.models.AuthorizationMethod]
    :ivar client_authentication_method: Method of authentication supported by the token endpoint of
     this authorization server. Possible values are Basic and/or Body. When Body is specified,
     client credentials and other parameters are passed within the request body in the
     application/x-www-form-urlencoded format.
    :vartype client_authentication_method: list[str or
     ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
    :ivar token_body_parameters: Additional parameters required by the token endpoint of this
     authorization server represented as an array of JSON objects with name and value string
     properties, i.e. {"name" : "name value", "value": "a value"}.
    :vartype token_body_parameters:
     list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
    :ivar token_endpoint: OAuth token endpoint. Contains absolute URI to entity being referenced.
    :vartype token_endpoint: str
    :ivar support_state: If true, authorization server will include state parameter from the
     authorization request to its response. Client may use state parameter to raise protocol
     security.
    :vartype support_state: bool
    :ivar default_scope: Access token scope that is going to be requested by default. Can be
     overridden at the API level. Should be provided in the form of a string containing
     space-delimited values.
    :vartype default_scope: str
    :ivar bearer_token_sending_methods: Specifies the mechanism by which access token is passed to
     the API.
    :vartype bearer_token_sending_methods: list[str or
     ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
    :ivar client_secret: Client or app secret registered with this authorization server.
    :vartype client_secret: str
    :ivar resource_owner_username: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner username.
    :vartype resource_owner_username: str
    :ivar resource_owner_password: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner password.
    :vartype resource_owner_password: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authorization_methods': {'key': 'authorizationMethods', 'type': '[str]'},
        'client_authentication_method': {'key': 'clientAuthenticationMethod', 'type': '[str]'},
        'token_body_parameters': {'key': 'tokenBodyParameters', 'type': '[TokenBodyParameterContract]'},
        'token_endpoint': {'key': 'tokenEndpoint', 'type': 'str'},
        'support_state': {'key': 'supportState', 'type': 'bool'},
        'default_scope': {'key': 'defaultScope', 'type': 'str'},
        'bearer_token_sending_methods': {'key': 'bearerTokenSendingMethods', 'type': '[str]'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'resource_owner_username': {'key': 'resourceOwnerUsername', 'type': 'str'},
        'resource_owner_password': {'key': 'resourceOwnerPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authorization_methods: Optional[List[Union[str, "_models.AuthorizationMethod"]]] = None,
        client_authentication_method: Optional[List[Union[str, "_models.ClientAuthenticationMethod"]]] = None,
        token_body_parameters: Optional[List["_models.TokenBodyParameterContract"]] = None,
        token_endpoint: Optional[str] = None,
        support_state: Optional[bool] = None,
        default_scope: Optional[str] = None,
        bearer_token_sending_methods: Optional[List[Union[str, "_models.BearerTokenSendingMethod"]]] = None,
        client_secret: Optional[str] = None,
        resource_owner_username: Optional[str] = None,
        resource_owner_password: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the authorization server. Can contain HTML formatting
         tags.
        :paramtype description: str
        :keyword authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
         always present. POST is optional.
        :paramtype authorization_methods: list[str or
         ~azure.mgmt.apimanagement.models.AuthorizationMethod]
        :keyword client_authentication_method: Method of authentication supported by the token endpoint
         of this authorization server. Possible values are Basic and/or Body. When Body is specified,
         client credentials and other parameters are passed within the request body in the
         application/x-www-form-urlencoded format.
        :paramtype client_authentication_method: list[str or
         ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
        :keyword token_body_parameters: Additional parameters required by the token endpoint of this
         authorization server represented as an array of JSON objects with name and value string
         properties, i.e. {"name" : "name value", "value": "a value"}.
        :paramtype token_body_parameters:
         list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
        :keyword token_endpoint: OAuth token endpoint. Contains absolute URI to entity being
         referenced.
        :paramtype token_endpoint: str
        :keyword support_state: If true, authorization server will include state parameter from the
         authorization request to its response. Client may use state parameter to raise protocol
         security.
        :paramtype support_state: bool
        :keyword default_scope: Access token scope that is going to be requested by default. Can be
         overridden at the API level. Should be provided in the form of a string containing
         space-delimited values.
        :paramtype default_scope: str
        :keyword bearer_token_sending_methods: Specifies the mechanism by which access token is passed
         to the API.
        :paramtype bearer_token_sending_methods: list[str or
         ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
        :keyword client_secret: Client or app secret registered with this authorization server.
        :paramtype client_secret: str
        :keyword resource_owner_username: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner username.
        :paramtype resource_owner_username: str
        :keyword resource_owner_password: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner password.
        :paramtype resource_owner_password: str
        """
        super(AuthorizationServerContractBaseProperties, self).__init__(**kwargs)
        self.description = description
        self.authorization_methods = authorization_methods
        self.client_authentication_method = client_authentication_method
        self.token_body_parameters = token_body_parameters
        self.token_endpoint = token_endpoint
        self.support_state = support_state
        self.default_scope = default_scope
        self.bearer_token_sending_methods = bearer_token_sending_methods
        self.client_secret = client_secret
        self.resource_owner_username = resource_owner_username
        self.resource_owner_password = resource_owner_password


class AuthorizationServerContractProperties(AuthorizationServerContractBaseProperties):
    """External OAuth authorization server settings Properties.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of the authorization server. Can contain HTML formatting tags.
    :vartype description: str
    :ivar authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
     always present. POST is optional.
    :vartype authorization_methods: list[str or
     ~azure.mgmt.apimanagement.models.AuthorizationMethod]
    :ivar client_authentication_method: Method of authentication supported by the token endpoint of
     this authorization server. Possible values are Basic and/or Body. When Body is specified,
     client credentials and other parameters are passed within the request body in the
     application/x-www-form-urlencoded format.
    :vartype client_authentication_method: list[str or
     ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
    :ivar token_body_parameters: Additional parameters required by the token endpoint of this
     authorization server represented as an array of JSON objects with name and value string
     properties, i.e. {"name" : "name value", "value": "a value"}.
    :vartype token_body_parameters:
     list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
    :ivar token_endpoint: OAuth token endpoint. Contains absolute URI to entity being referenced.
    :vartype token_endpoint: str
    :ivar support_state: If true, authorization server will include state parameter from the
     authorization request to its response. Client may use state parameter to raise protocol
     security.
    :vartype support_state: bool
    :ivar default_scope: Access token scope that is going to be requested by default. Can be
     overridden at the API level. Should be provided in the form of a string containing
     space-delimited values.
    :vartype default_scope: str
    :ivar bearer_token_sending_methods: Specifies the mechanism by which access token is passed to
     the API.
    :vartype bearer_token_sending_methods: list[str or
     ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
    :ivar client_secret: Client or app secret registered with this authorization server.
    :vartype client_secret: str
    :ivar resource_owner_username: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner username.
    :vartype resource_owner_username: str
    :ivar resource_owner_password: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner password.
    :vartype resource_owner_password: str
    :ivar display_name: Required. User-friendly authorization server name.
    :vartype display_name: str
    :ivar client_registration_endpoint: Required. Optional reference to a page where client or app
     registration for this authorization server is performed. Contains absolute URL to entity being
     referenced.
    :vartype client_registration_endpoint: str
    :ivar authorization_endpoint: Required. OAuth authorization endpoint. See
     http://tools.ietf.org/html/rfc6749#section-3.2.
    :vartype authorization_endpoint: str
    :ivar grant_types: Required. Form of an authorization grant, which the client uses to request
     the access token.
    :vartype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
    :ivar client_id: Required. Client or app id registered with this authorization server.
    :vartype client_id: str
    """

    _validation = {
        'display_name': {'required': True, 'max_length': 50, 'min_length': 1},
        'client_registration_endpoint': {'required': True},
        'authorization_endpoint': {'required': True},
        'grant_types': {'required': True},
        'client_id': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authorization_methods': {'key': 'authorizationMethods', 'type': '[str]'},
        'client_authentication_method': {'key': 'clientAuthenticationMethod', 'type': '[str]'},
        'token_body_parameters': {'key': 'tokenBodyParameters', 'type': '[TokenBodyParameterContract]'},
        'token_endpoint': {'key': 'tokenEndpoint', 'type': 'str'},
        'support_state': {'key': 'supportState', 'type': 'bool'},
        'default_scope': {'key': 'defaultScope', 'type': 'str'},
        'bearer_token_sending_methods': {'key': 'bearerTokenSendingMethods', 'type': '[str]'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'resource_owner_username': {'key': 'resourceOwnerUsername', 'type': 'str'},
        'resource_owner_password': {'key': 'resourceOwnerPassword', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'client_registration_endpoint': {'key': 'clientRegistrationEndpoint', 'type': 'str'},
        'authorization_endpoint': {'key': 'authorizationEndpoint', 'type': 'str'},
        'grant_types': {'key': 'grantTypes', 'type': '[str]'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        client_registration_endpoint: str,
        authorization_endpoint: str,
        grant_types: List[Union[str, "_models.GrantType"]],
        client_id: str,
        description: Optional[str] = None,
        authorization_methods: Optional[List[Union[str, "_models.AuthorizationMethod"]]] = None,
        client_authentication_method: Optional[List[Union[str, "_models.ClientAuthenticationMethod"]]] = None,
        token_body_parameters: Optional[List["_models.TokenBodyParameterContract"]] = None,
        token_endpoint: Optional[str] = None,
        support_state: Optional[bool] = None,
        default_scope: Optional[str] = None,
        bearer_token_sending_methods: Optional[List[Union[str, "_models.BearerTokenSendingMethod"]]] = None,
        client_secret: Optional[str] = None,
        resource_owner_username: Optional[str] = None,
        resource_owner_password: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the authorization server. Can contain HTML formatting
         tags.
        :paramtype description: str
        :keyword authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
         always present. POST is optional.
        :paramtype authorization_methods: list[str or
         ~azure.mgmt.apimanagement.models.AuthorizationMethod]
        :keyword client_authentication_method: Method of authentication supported by the token endpoint
         of this authorization server. Possible values are Basic and/or Body. When Body is specified,
         client credentials and other parameters are passed within the request body in the
         application/x-www-form-urlencoded format.
        :paramtype client_authentication_method: list[str or
         ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
        :keyword token_body_parameters: Additional parameters required by the token endpoint of this
         authorization server represented as an array of JSON objects with name and value string
         properties, i.e. {"name" : "name value", "value": "a value"}.
        :paramtype token_body_parameters:
         list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
        :keyword token_endpoint: OAuth token endpoint. Contains absolute URI to entity being
         referenced.
        :paramtype token_endpoint: str
        :keyword support_state: If true, authorization server will include state parameter from the
         authorization request to its response. Client may use state parameter to raise protocol
         security.
        :paramtype support_state: bool
        :keyword default_scope: Access token scope that is going to be requested by default. Can be
         overridden at the API level. Should be provided in the form of a string containing
         space-delimited values.
        :paramtype default_scope: str
        :keyword bearer_token_sending_methods: Specifies the mechanism by which access token is passed
         to the API.
        :paramtype bearer_token_sending_methods: list[str or
         ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
        :keyword client_secret: Client or app secret registered with this authorization server.
        :paramtype client_secret: str
        :keyword resource_owner_username: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner username.
        :paramtype resource_owner_username: str
        :keyword resource_owner_password: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner password.
        :paramtype resource_owner_password: str
        :keyword display_name: Required. User-friendly authorization server name.
        :paramtype display_name: str
        :keyword client_registration_endpoint: Required. Optional reference to a page where client or
         app registration for this authorization server is performed. Contains absolute URL to entity
         being referenced.
        :paramtype client_registration_endpoint: str
        :keyword authorization_endpoint: Required. OAuth authorization endpoint. See
         http://tools.ietf.org/html/rfc6749#section-3.2.
        :paramtype authorization_endpoint: str
        :keyword grant_types: Required. Form of an authorization grant, which the client uses to
         request the access token.
        :paramtype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
        :keyword client_id: Required. Client or app id registered with this authorization server.
        :paramtype client_id: str
        """
        super(AuthorizationServerContractProperties, self).__init__(description=description, authorization_methods=authorization_methods, client_authentication_method=client_authentication_method, token_body_parameters=token_body_parameters, token_endpoint=token_endpoint, support_state=support_state, default_scope=default_scope, bearer_token_sending_methods=bearer_token_sending_methods, client_secret=client_secret, resource_owner_username=resource_owner_username, resource_owner_password=resource_owner_password, **kwargs)
        self.display_name = display_name
        self.client_registration_endpoint = client_registration_endpoint
        self.authorization_endpoint = authorization_endpoint
        self.grant_types = grant_types
        self.client_id = client_id


class AuthorizationServerUpdateContract(Resource):
    """External OAuth authorization server settings.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Description of the authorization server. Can contain HTML formatting tags.
    :vartype description: str
    :ivar authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
     always present. POST is optional.
    :vartype authorization_methods: list[str or
     ~azure.mgmt.apimanagement.models.AuthorizationMethod]
    :ivar client_authentication_method: Method of authentication supported by the token endpoint of
     this authorization server. Possible values are Basic and/or Body. When Body is specified,
     client credentials and other parameters are passed within the request body in the
     application/x-www-form-urlencoded format.
    :vartype client_authentication_method: list[str or
     ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
    :ivar token_body_parameters: Additional parameters required by the token endpoint of this
     authorization server represented as an array of JSON objects with name and value string
     properties, i.e. {"name" : "name value", "value": "a value"}.
    :vartype token_body_parameters:
     list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
    :ivar token_endpoint: OAuth token endpoint. Contains absolute URI to entity being referenced.
    :vartype token_endpoint: str
    :ivar support_state: If true, authorization server will include state parameter from the
     authorization request to its response. Client may use state parameter to raise protocol
     security.
    :vartype support_state: bool
    :ivar default_scope: Access token scope that is going to be requested by default. Can be
     overridden at the API level. Should be provided in the form of a string containing
     space-delimited values.
    :vartype default_scope: str
    :ivar bearer_token_sending_methods: Specifies the mechanism by which access token is passed to
     the API.
    :vartype bearer_token_sending_methods: list[str or
     ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
    :ivar client_secret: Client or app secret registered with this authorization server.
    :vartype client_secret: str
    :ivar resource_owner_username: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner username.
    :vartype resource_owner_username: str
    :ivar resource_owner_password: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner password.
    :vartype resource_owner_password: str
    :ivar display_name: User-friendly authorization server name.
    :vartype display_name: str
    :ivar client_registration_endpoint: Optional reference to a page where client or app
     registration for this authorization server is performed. Contains absolute URL to entity being
     referenced.
    :vartype client_registration_endpoint: str
    :ivar authorization_endpoint: OAuth authorization endpoint. See
     http://tools.ietf.org/html/rfc6749#section-3.2.
    :vartype authorization_endpoint: str
    :ivar grant_types: Form of an authorization grant, which the client uses to request the access
     token.
    :vartype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
    :ivar client_id: Client or app id registered with this authorization server.
    :vartype client_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'authorization_methods': {'key': 'properties.authorizationMethods', 'type': '[str]'},
        'client_authentication_method': {'key': 'properties.clientAuthenticationMethod', 'type': '[str]'},
        'token_body_parameters': {'key': 'properties.tokenBodyParameters', 'type': '[TokenBodyParameterContract]'},
        'token_endpoint': {'key': 'properties.tokenEndpoint', 'type': 'str'},
        'support_state': {'key': 'properties.supportState', 'type': 'bool'},
        'default_scope': {'key': 'properties.defaultScope', 'type': 'str'},
        'bearer_token_sending_methods': {'key': 'properties.bearerTokenSendingMethods', 'type': '[str]'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
        'resource_owner_username': {'key': 'properties.resourceOwnerUsername', 'type': 'str'},
        'resource_owner_password': {'key': 'properties.resourceOwnerPassword', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'client_registration_endpoint': {'key': 'properties.clientRegistrationEndpoint', 'type': 'str'},
        'authorization_endpoint': {'key': 'properties.authorizationEndpoint', 'type': 'str'},
        'grant_types': {'key': 'properties.grantTypes', 'type': '[str]'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authorization_methods: Optional[List[Union[str, "_models.AuthorizationMethod"]]] = None,
        client_authentication_method: Optional[List[Union[str, "_models.ClientAuthenticationMethod"]]] = None,
        token_body_parameters: Optional[List["_models.TokenBodyParameterContract"]] = None,
        token_endpoint: Optional[str] = None,
        support_state: Optional[bool] = None,
        default_scope: Optional[str] = None,
        bearer_token_sending_methods: Optional[List[Union[str, "_models.BearerTokenSendingMethod"]]] = None,
        client_secret: Optional[str] = None,
        resource_owner_username: Optional[str] = None,
        resource_owner_password: Optional[str] = None,
        display_name: Optional[str] = None,
        client_registration_endpoint: Optional[str] = None,
        authorization_endpoint: Optional[str] = None,
        grant_types: Optional[List[Union[str, "_models.GrantType"]]] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the authorization server. Can contain HTML formatting
         tags.
        :paramtype description: str
        :keyword authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
         always present. POST is optional.
        :paramtype authorization_methods: list[str or
         ~azure.mgmt.apimanagement.models.AuthorizationMethod]
        :keyword client_authentication_method: Method of authentication supported by the token endpoint
         of this authorization server. Possible values are Basic and/or Body. When Body is specified,
         client credentials and other parameters are passed within the request body in the
         application/x-www-form-urlencoded format.
        :paramtype client_authentication_method: list[str or
         ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
        :keyword token_body_parameters: Additional parameters required by the token endpoint of this
         authorization server represented as an array of JSON objects with name and value string
         properties, i.e. {"name" : "name value", "value": "a value"}.
        :paramtype token_body_parameters:
         list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
        :keyword token_endpoint: OAuth token endpoint. Contains absolute URI to entity being
         referenced.
        :paramtype token_endpoint: str
        :keyword support_state: If true, authorization server will include state parameter from the
         authorization request to its response. Client may use state parameter to raise protocol
         security.
        :paramtype support_state: bool
        :keyword default_scope: Access token scope that is going to be requested by default. Can be
         overridden at the API level. Should be provided in the form of a string containing
         space-delimited values.
        :paramtype default_scope: str
        :keyword bearer_token_sending_methods: Specifies the mechanism by which access token is passed
         to the API.
        :paramtype bearer_token_sending_methods: list[str or
         ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
        :keyword client_secret: Client or app secret registered with this authorization server.
        :paramtype client_secret: str
        :keyword resource_owner_username: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner username.
        :paramtype resource_owner_username: str
        :keyword resource_owner_password: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner password.
        :paramtype resource_owner_password: str
        :keyword display_name: User-friendly authorization server name.
        :paramtype display_name: str
        :keyword client_registration_endpoint: Optional reference to a page where client or app
         registration for this authorization server is performed. Contains absolute URL to entity being
         referenced.
        :paramtype client_registration_endpoint: str
        :keyword authorization_endpoint: OAuth authorization endpoint. See
         http://tools.ietf.org/html/rfc6749#section-3.2.
        :paramtype authorization_endpoint: str
        :keyword grant_types: Form of an authorization grant, which the client uses to request the
         access token.
        :paramtype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
        :keyword client_id: Client or app id registered with this authorization server.
        :paramtype client_id: str
        """
        super(AuthorizationServerUpdateContract, self).__init__(**kwargs)
        self.description = description
        self.authorization_methods = authorization_methods
        self.client_authentication_method = client_authentication_method
        self.token_body_parameters = token_body_parameters
        self.token_endpoint = token_endpoint
        self.support_state = support_state
        self.default_scope = default_scope
        self.bearer_token_sending_methods = bearer_token_sending_methods
        self.client_secret = client_secret
        self.resource_owner_username = resource_owner_username
        self.resource_owner_password = resource_owner_password
        self.display_name = display_name
        self.client_registration_endpoint = client_registration_endpoint
        self.authorization_endpoint = authorization_endpoint
        self.grant_types = grant_types
        self.client_id = client_id


class AuthorizationServerUpdateContractProperties(AuthorizationServerContractBaseProperties):
    """External OAuth authorization server Update settings contract.

    :ivar description: Description of the authorization server. Can contain HTML formatting tags.
    :vartype description: str
    :ivar authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
     always present. POST is optional.
    :vartype authorization_methods: list[str or
     ~azure.mgmt.apimanagement.models.AuthorizationMethod]
    :ivar client_authentication_method: Method of authentication supported by the token endpoint of
     this authorization server. Possible values are Basic and/or Body. When Body is specified,
     client credentials and other parameters are passed within the request body in the
     application/x-www-form-urlencoded format.
    :vartype client_authentication_method: list[str or
     ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
    :ivar token_body_parameters: Additional parameters required by the token endpoint of this
     authorization server represented as an array of JSON objects with name and value string
     properties, i.e. {"name" : "name value", "value": "a value"}.
    :vartype token_body_parameters:
     list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
    :ivar token_endpoint: OAuth token endpoint. Contains absolute URI to entity being referenced.
    :vartype token_endpoint: str
    :ivar support_state: If true, authorization server will include state parameter from the
     authorization request to its response. Client may use state parameter to raise protocol
     security.
    :vartype support_state: bool
    :ivar default_scope: Access token scope that is going to be requested by default. Can be
     overridden at the API level. Should be provided in the form of a string containing
     space-delimited values.
    :vartype default_scope: str
    :ivar bearer_token_sending_methods: Specifies the mechanism by which access token is passed to
     the API.
    :vartype bearer_token_sending_methods: list[str or
     ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
    :ivar client_secret: Client or app secret registered with this authorization server.
    :vartype client_secret: str
    :ivar resource_owner_username: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner username.
    :vartype resource_owner_username: str
    :ivar resource_owner_password: Can be optionally specified when resource owner password grant
     type is supported by this authorization server. Default resource owner password.
    :vartype resource_owner_password: str
    :ivar display_name: User-friendly authorization server name.
    :vartype display_name: str
    :ivar client_registration_endpoint: Optional reference to a page where client or app
     registration for this authorization server is performed. Contains absolute URL to entity being
     referenced.
    :vartype client_registration_endpoint: str
    :ivar authorization_endpoint: OAuth authorization endpoint. See
     http://tools.ietf.org/html/rfc6749#section-3.2.
    :vartype authorization_endpoint: str
    :ivar grant_types: Form of an authorization grant, which the client uses to request the access
     token.
    :vartype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
    :ivar client_id: Client or app id registered with this authorization server.
    :vartype client_id: str
    """

    _validation = {
        'display_name': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'authorization_methods': {'key': 'authorizationMethods', 'type': '[str]'},
        'client_authentication_method': {'key': 'clientAuthenticationMethod', 'type': '[str]'},
        'token_body_parameters': {'key': 'tokenBodyParameters', 'type': '[TokenBodyParameterContract]'},
        'token_endpoint': {'key': 'tokenEndpoint', 'type': 'str'},
        'support_state': {'key': 'supportState', 'type': 'bool'},
        'default_scope': {'key': 'defaultScope', 'type': 'str'},
        'bearer_token_sending_methods': {'key': 'bearerTokenSendingMethods', 'type': '[str]'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'resource_owner_username': {'key': 'resourceOwnerUsername', 'type': 'str'},
        'resource_owner_password': {'key': 'resourceOwnerPassword', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'client_registration_endpoint': {'key': 'clientRegistrationEndpoint', 'type': 'str'},
        'authorization_endpoint': {'key': 'authorizationEndpoint', 'type': 'str'},
        'grant_types': {'key': 'grantTypes', 'type': '[str]'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        authorization_methods: Optional[List[Union[str, "_models.AuthorizationMethod"]]] = None,
        client_authentication_method: Optional[List[Union[str, "_models.ClientAuthenticationMethod"]]] = None,
        token_body_parameters: Optional[List["_models.TokenBodyParameterContract"]] = None,
        token_endpoint: Optional[str] = None,
        support_state: Optional[bool] = None,
        default_scope: Optional[str] = None,
        bearer_token_sending_methods: Optional[List[Union[str, "_models.BearerTokenSendingMethod"]]] = None,
        client_secret: Optional[str] = None,
        resource_owner_username: Optional[str] = None,
        resource_owner_password: Optional[str] = None,
        display_name: Optional[str] = None,
        client_registration_endpoint: Optional[str] = None,
        authorization_endpoint: Optional[str] = None,
        grant_types: Optional[List[Union[str, "_models.GrantType"]]] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the authorization server. Can contain HTML formatting
         tags.
        :paramtype description: str
        :keyword authorization_methods: HTTP verbs supported by the authorization endpoint. GET must be
         always present. POST is optional.
        :paramtype authorization_methods: list[str or
         ~azure.mgmt.apimanagement.models.AuthorizationMethod]
        :keyword client_authentication_method: Method of authentication supported by the token endpoint
         of this authorization server. Possible values are Basic and/or Body. When Body is specified,
         client credentials and other parameters are passed within the request body in the
         application/x-www-form-urlencoded format.
        :paramtype client_authentication_method: list[str or
         ~azure.mgmt.apimanagement.models.ClientAuthenticationMethod]
        :keyword token_body_parameters: Additional parameters required by the token endpoint of this
         authorization server represented as an array of JSON objects with name and value string
         properties, i.e. {"name" : "name value", "value": "a value"}.
        :paramtype token_body_parameters:
         list[~azure.mgmt.apimanagement.models.TokenBodyParameterContract]
        :keyword token_endpoint: OAuth token endpoint. Contains absolute URI to entity being
         referenced.
        :paramtype token_endpoint: str
        :keyword support_state: If true, authorization server will include state parameter from the
         authorization request to its response. Client may use state parameter to raise protocol
         security.
        :paramtype support_state: bool
        :keyword default_scope: Access token scope that is going to be requested by default. Can be
         overridden at the API level. Should be provided in the form of a string containing
         space-delimited values.
        :paramtype default_scope: str
        :keyword bearer_token_sending_methods: Specifies the mechanism by which access token is passed
         to the API.
        :paramtype bearer_token_sending_methods: list[str or
         ~azure.mgmt.apimanagement.models.BearerTokenSendingMethod]
        :keyword client_secret: Client or app secret registered with this authorization server.
        :paramtype client_secret: str
        :keyword resource_owner_username: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner username.
        :paramtype resource_owner_username: str
        :keyword resource_owner_password: Can be optionally specified when resource owner password
         grant type is supported by this authorization server. Default resource owner password.
        :paramtype resource_owner_password: str
        :keyword display_name: User-friendly authorization server name.
        :paramtype display_name: str
        :keyword client_registration_endpoint: Optional reference to a page where client or app
         registration for this authorization server is performed. Contains absolute URL to entity being
         referenced.
        :paramtype client_registration_endpoint: str
        :keyword authorization_endpoint: OAuth authorization endpoint. See
         http://tools.ietf.org/html/rfc6749#section-3.2.
        :paramtype authorization_endpoint: str
        :keyword grant_types: Form of an authorization grant, which the client uses to request the
         access token.
        :paramtype grant_types: list[str or ~azure.mgmt.apimanagement.models.GrantType]
        :keyword client_id: Client or app id registered with this authorization server.
        :paramtype client_id: str
        """
        super(AuthorizationServerUpdateContractProperties, self).__init__(description=description, authorization_methods=authorization_methods, client_authentication_method=client_authentication_method, token_body_parameters=token_body_parameters, token_endpoint=token_endpoint, support_state=support_state, default_scope=default_scope, bearer_token_sending_methods=bearer_token_sending_methods, client_secret=client_secret, resource_owner_username=resource_owner_username, resource_owner_password=resource_owner_password, **kwargs)
        self.display_name = display_name
        self.client_registration_endpoint = client_registration_endpoint
        self.authorization_endpoint = authorization_endpoint
        self.grant_types = grant_types
        self.client_id = client_id


class BackendAuthorizationHeaderCredentials(msrest.serialization.Model):
    """Authorization header information.

    All required parameters must be populated in order to send to Azure.

    :ivar scheme: Required. Authentication Scheme name.
    :vartype scheme: str
    :ivar parameter: Required. Authentication Parameter value.
    :vartype parameter: str
    """

    _validation = {
        'scheme': {'required': True, 'max_length': 100, 'min_length': 1},
        'parameter': {'required': True, 'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'scheme': {'key': 'scheme', 'type': 'str'},
        'parameter': {'key': 'parameter', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        scheme: str,
        parameter: str,
        **kwargs
    ):
        """
        :keyword scheme: Required. Authentication Scheme name.
        :paramtype scheme: str
        :keyword parameter: Required. Authentication Parameter value.
        :paramtype parameter: str
        """
        super(BackendAuthorizationHeaderCredentials, self).__init__(**kwargs)
        self.scheme = scheme
        self.parameter = parameter


class BackendBaseParameters(msrest.serialization.Model):
    """Backend entity base Parameter set.

    :ivar title: Backend Title.
    :vartype title: str
    :ivar description: Backend Description.
    :vartype description: str
    :ivar resource_id: Management Uri of the Resource in External System. This url can be the Arm
     Resource Id of Logic Apps, Function Apps or Api Apps.
    :vartype resource_id: str
    :ivar properties: Backend Properties contract.
    :vartype properties: ~azure.mgmt.apimanagement.models.BackendProperties
    :ivar credentials: Backend Credentials Contract Properties.
    :vartype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
    :ivar proxy: Backend Proxy Contract Properties.
    :vartype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
    :ivar tls: Backend TLS Properties.
    :vartype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
    """

    _validation = {
        'title': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 2000, 'min_length': 1},
        'resource_id': {'max_length': 2000, 'min_length': 1},
    }

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BackendProperties'},
        'credentials': {'key': 'credentials', 'type': 'BackendCredentialsContract'},
        'proxy': {'key': 'proxy', 'type': 'BackendProxyContract'},
        'tls': {'key': 'tls', 'type': 'BackendTlsProperties'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        resource_id: Optional[str] = None,
        properties: Optional["_models.BackendProperties"] = None,
        credentials: Optional["_models.BackendCredentialsContract"] = None,
        proxy: Optional["_models.BackendProxyContract"] = None,
        tls: Optional["_models.BackendTlsProperties"] = None,
        **kwargs
    ):
        """
        :keyword title: Backend Title.
        :paramtype title: str
        :keyword description: Backend Description.
        :paramtype description: str
        :keyword resource_id: Management Uri of the Resource in External System. This url can be the
         Arm Resource Id of Logic Apps, Function Apps or Api Apps.
        :paramtype resource_id: str
        :keyword properties: Backend Properties contract.
        :paramtype properties: ~azure.mgmt.apimanagement.models.BackendProperties
        :keyword credentials: Backend Credentials Contract Properties.
        :paramtype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
        :keyword proxy: Backend Proxy Contract Properties.
        :paramtype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
        :keyword tls: Backend TLS Properties.
        :paramtype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
        """
        super(BackendBaseParameters, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.resource_id = resource_id
        self.properties = properties
        self.credentials = credentials
        self.proxy = proxy
        self.tls = tls


class BackendCollection(msrest.serialization.Model):
    """Paged Backend list representation.

    :ivar value: Backend values.
    :vartype value: list[~azure.mgmt.apimanagement.models.BackendContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BackendContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.BackendContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Backend values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.BackendContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(BackendCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class BackendContract(Resource):
    """Backend details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar title: Backend Title.
    :vartype title: str
    :ivar description: Backend Description.
    :vartype description: str
    :ivar resource_id: Management Uri of the Resource in External System. This url can be the Arm
     Resource Id of Logic Apps, Function Apps or Api Apps.
    :vartype resource_id: str
    :ivar properties: Backend Properties contract.
    :vartype properties: ~azure.mgmt.apimanagement.models.BackendProperties
    :ivar credentials: Backend Credentials Contract Properties.
    :vartype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
    :ivar proxy: Backend Proxy Contract Properties.
    :vartype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
    :ivar tls: Backend TLS Properties.
    :vartype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
    :ivar url: Runtime Url of the Backend.
    :vartype url: str
    :ivar protocol: Backend communication protocol. Known values are: "http", "soap".
    :vartype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'title': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 2000, 'min_length': 1},
        'resource_id': {'max_length': 2000, 'min_length': 1},
        'url': {'max_length': 2000, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'properties': {'key': 'properties.properties', 'type': 'BackendProperties'},
        'credentials': {'key': 'properties.credentials', 'type': 'BackendCredentialsContract'},
        'proxy': {'key': 'properties.proxy', 'type': 'BackendProxyContract'},
        'tls': {'key': 'properties.tls', 'type': 'BackendTlsProperties'},
        'url': {'key': 'properties.url', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        resource_id: Optional[str] = None,
        properties: Optional["_models.BackendProperties"] = None,
        credentials: Optional["_models.BackendCredentialsContract"] = None,
        proxy: Optional["_models.BackendProxyContract"] = None,
        tls: Optional["_models.BackendTlsProperties"] = None,
        url: Optional[str] = None,
        protocol: Optional[Union[str, "_models.BackendProtocol"]] = None,
        **kwargs
    ):
        """
        :keyword title: Backend Title.
        :paramtype title: str
        :keyword description: Backend Description.
        :paramtype description: str
        :keyword resource_id: Management Uri of the Resource in External System. This url can be the
         Arm Resource Id of Logic Apps, Function Apps or Api Apps.
        :paramtype resource_id: str
        :keyword properties: Backend Properties contract.
        :paramtype properties: ~azure.mgmt.apimanagement.models.BackendProperties
        :keyword credentials: Backend Credentials Contract Properties.
        :paramtype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
        :keyword proxy: Backend Proxy Contract Properties.
        :paramtype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
        :keyword tls: Backend TLS Properties.
        :paramtype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
        :keyword url: Runtime Url of the Backend.
        :paramtype url: str
        :keyword protocol: Backend communication protocol. Known values are: "http", "soap".
        :paramtype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
        """
        super(BackendContract, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.resource_id = resource_id
        self.properties = properties
        self.credentials = credentials
        self.proxy = proxy
        self.tls = tls
        self.url = url
        self.protocol = protocol


class BackendContractProperties(BackendBaseParameters):
    """Parameters supplied to the Create Backend operation.

    All required parameters must be populated in order to send to Azure.

    :ivar title: Backend Title.
    :vartype title: str
    :ivar description: Backend Description.
    :vartype description: str
    :ivar resource_id: Management Uri of the Resource in External System. This url can be the Arm
     Resource Id of Logic Apps, Function Apps or Api Apps.
    :vartype resource_id: str
    :ivar properties: Backend Properties contract.
    :vartype properties: ~azure.mgmt.apimanagement.models.BackendProperties
    :ivar credentials: Backend Credentials Contract Properties.
    :vartype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
    :ivar proxy: Backend Proxy Contract Properties.
    :vartype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
    :ivar tls: Backend TLS Properties.
    :vartype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
    :ivar url: Required. Runtime Url of the Backend.
    :vartype url: str
    :ivar protocol: Required. Backend communication protocol. Known values are: "http", "soap".
    :vartype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
    """

    _validation = {
        'title': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 2000, 'min_length': 1},
        'resource_id': {'max_length': 2000, 'min_length': 1},
        'url': {'required': True, 'max_length': 2000, 'min_length': 1},
        'protocol': {'required': True},
    }

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BackendProperties'},
        'credentials': {'key': 'credentials', 'type': 'BackendCredentialsContract'},
        'proxy': {'key': 'proxy', 'type': 'BackendProxyContract'},
        'tls': {'key': 'tls', 'type': 'BackendTlsProperties'},
        'url': {'key': 'url', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        protocol: Union[str, "_models.BackendProtocol"],
        title: Optional[str] = None,
        description: Optional[str] = None,
        resource_id: Optional[str] = None,
        properties: Optional["_models.BackendProperties"] = None,
        credentials: Optional["_models.BackendCredentialsContract"] = None,
        proxy: Optional["_models.BackendProxyContract"] = None,
        tls: Optional["_models.BackendTlsProperties"] = None,
        **kwargs
    ):
        """
        :keyword title: Backend Title.
        :paramtype title: str
        :keyword description: Backend Description.
        :paramtype description: str
        :keyword resource_id: Management Uri of the Resource in External System. This url can be the
         Arm Resource Id of Logic Apps, Function Apps or Api Apps.
        :paramtype resource_id: str
        :keyword properties: Backend Properties contract.
        :paramtype properties: ~azure.mgmt.apimanagement.models.BackendProperties
        :keyword credentials: Backend Credentials Contract Properties.
        :paramtype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
        :keyword proxy: Backend Proxy Contract Properties.
        :paramtype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
        :keyword tls: Backend TLS Properties.
        :paramtype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
        :keyword url: Required. Runtime Url of the Backend.
        :paramtype url: str
        :keyword protocol: Required. Backend communication protocol. Known values are: "http", "soap".
        :paramtype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
        """
        super(BackendContractProperties, self).__init__(title=title, description=description, resource_id=resource_id, properties=properties, credentials=credentials, proxy=proxy, tls=tls, **kwargs)
        self.url = url
        self.protocol = protocol


class BackendCredentialsContract(msrest.serialization.Model):
    """Details of the Credentials used to connect to Backend.

    :ivar certificate: List of Client Certificate Thumbprint.
    :vartype certificate: list[str]
    :ivar query: Query Parameter description.
    :vartype query: dict[str, list[str]]
    :ivar header: Header Parameter description.
    :vartype header: dict[str, list[str]]
    :ivar authorization: Authorization header authentication.
    :vartype authorization: ~azure.mgmt.apimanagement.models.BackendAuthorizationHeaderCredentials
    """

    _validation = {
        'certificate': {'max_items': 32, 'min_items': 0},
    }

    _attribute_map = {
        'certificate': {'key': 'certificate', 'type': '[str]'},
        'query': {'key': 'query', 'type': '{[str]}'},
        'header': {'key': 'header', 'type': '{[str]}'},
        'authorization': {'key': 'authorization', 'type': 'BackendAuthorizationHeaderCredentials'},
    }

    def __init__(
        self,
        *,
        certificate: Optional[List[str]] = None,
        query: Optional[Dict[str, List[str]]] = None,
        header: Optional[Dict[str, List[str]]] = None,
        authorization: Optional["_models.BackendAuthorizationHeaderCredentials"] = None,
        **kwargs
    ):
        """
        :keyword certificate: List of Client Certificate Thumbprint.
        :paramtype certificate: list[str]
        :keyword query: Query Parameter description.
        :paramtype query: dict[str, list[str]]
        :keyword header: Header Parameter description.
        :paramtype header: dict[str, list[str]]
        :keyword authorization: Authorization header authentication.
        :paramtype authorization:
         ~azure.mgmt.apimanagement.models.BackendAuthorizationHeaderCredentials
        """
        super(BackendCredentialsContract, self).__init__(**kwargs)
        self.certificate = certificate
        self.query = query
        self.header = header
        self.authorization = authorization


class BackendProperties(msrest.serialization.Model):
    """Properties specific to the Backend Type.

    :ivar service_fabric_cluster: Backend Service Fabric Cluster Properties.
    :vartype service_fabric_cluster:
     ~azure.mgmt.apimanagement.models.BackendServiceFabricClusterProperties
    """

    _attribute_map = {
        'service_fabric_cluster': {'key': 'serviceFabricCluster', 'type': 'BackendServiceFabricClusterProperties'},
    }

    def __init__(
        self,
        *,
        service_fabric_cluster: Optional["_models.BackendServiceFabricClusterProperties"] = None,
        **kwargs
    ):
        """
        :keyword service_fabric_cluster: Backend Service Fabric Cluster Properties.
        :paramtype service_fabric_cluster:
         ~azure.mgmt.apimanagement.models.BackendServiceFabricClusterProperties
        """
        super(BackendProperties, self).__init__(**kwargs)
        self.service_fabric_cluster = service_fabric_cluster


class BackendProxyContract(msrest.serialization.Model):
    """Details of the Backend WebProxy Server to use in the Request to Backend.

    All required parameters must be populated in order to send to Azure.

    :ivar url: Required. WebProxy Server AbsoluteUri property which includes the entire URI stored
     in the Uri instance, including all fragments and query strings.
    :vartype url: str
    :ivar username: Username to connect to the WebProxy server.
    :vartype username: str
    :ivar password: Password to connect to the WebProxy Server.
    :vartype password: str
    """

    _validation = {
        'url': {'required': True, 'max_length': 2000, 'min_length': 1},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        username: Optional[str] = None,
        password: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword url: Required. WebProxy Server AbsoluteUri property which includes the entire URI
         stored in the Uri instance, including all fragments and query strings.
        :paramtype url: str
        :keyword username: Username to connect to the WebProxy server.
        :paramtype username: str
        :keyword password: Password to connect to the WebProxy Server.
        :paramtype password: str
        """
        super(BackendProxyContract, self).__init__(**kwargs)
        self.url = url
        self.username = username
        self.password = password


class BackendReconnectContract(Resource):
    """Reconnect request parameters.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar after: Duration in ISO8601 format after which reconnect will be initiated.
    :vartype after: ~datetime.timedelta
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'after': {'key': 'properties.after', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        after: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        """
        :keyword after: Duration in ISO8601 format after which reconnect will be initiated.
        :paramtype after: ~datetime.timedelta
        """
        super(BackendReconnectContract, self).__init__(**kwargs)
        self.after = after


class BackendServiceFabricClusterProperties(msrest.serialization.Model):
    """Properties of the Service Fabric Type Backend.

    All required parameters must be populated in order to send to Azure.

    :ivar client_certificatethumbprint: Required. The client certificate thumbprint for the
     management endpoint.
    :vartype client_certificatethumbprint: str
    :ivar max_partition_resolution_retries: Maximum number of retries while attempting resolve the
     partition.
    :vartype max_partition_resolution_retries: int
    :ivar management_endpoints: Required. The cluster management endpoint.
    :vartype management_endpoints: list[str]
    :ivar server_certificate_thumbprints: Thumbprints of certificates cluster management service
     uses for tls communication.
    :vartype server_certificate_thumbprints: list[str]
    :ivar server_x509_names: Server X509 Certificate Names Collection.
    :vartype server_x509_names: list[~azure.mgmt.apimanagement.models.X509CertificateName]
    """

    _validation = {
        'client_certificatethumbprint': {'required': True},
        'management_endpoints': {'required': True},
    }

    _attribute_map = {
        'client_certificatethumbprint': {'key': 'clientCertificatethumbprint', 'type': 'str'},
        'max_partition_resolution_retries': {'key': 'maxPartitionResolutionRetries', 'type': 'int'},
        'management_endpoints': {'key': 'managementEndpoints', 'type': '[str]'},
        'server_certificate_thumbprints': {'key': 'serverCertificateThumbprints', 'type': '[str]'},
        'server_x509_names': {'key': 'serverX509Names', 'type': '[X509CertificateName]'},
    }

    def __init__(
        self,
        *,
        client_certificatethumbprint: str,
        management_endpoints: List[str],
        max_partition_resolution_retries: Optional[int] = None,
        server_certificate_thumbprints: Optional[List[str]] = None,
        server_x509_names: Optional[List["_models.X509CertificateName"]] = None,
        **kwargs
    ):
        """
        :keyword client_certificatethumbprint: Required. The client certificate thumbprint for the
         management endpoint.
        :paramtype client_certificatethumbprint: str
        :keyword max_partition_resolution_retries: Maximum number of retries while attempting resolve
         the partition.
        :paramtype max_partition_resolution_retries: int
        :keyword management_endpoints: Required. The cluster management endpoint.
        :paramtype management_endpoints: list[str]
        :keyword server_certificate_thumbprints: Thumbprints of certificates cluster management service
         uses for tls communication.
        :paramtype server_certificate_thumbprints: list[str]
        :keyword server_x509_names: Server X509 Certificate Names Collection.
        :paramtype server_x509_names: list[~azure.mgmt.apimanagement.models.X509CertificateName]
        """
        super(BackendServiceFabricClusterProperties, self).__init__(**kwargs)
        self.client_certificatethumbprint = client_certificatethumbprint
        self.max_partition_resolution_retries = max_partition_resolution_retries
        self.management_endpoints = management_endpoints
        self.server_certificate_thumbprints = server_certificate_thumbprints
        self.server_x509_names = server_x509_names


class BackendTlsProperties(msrest.serialization.Model):
    """Properties controlling TLS Certificate Validation.

    :ivar validate_certificate_chain: Flag indicating whether SSL certificate chain validation
     should be done when using self-signed certificates for this backend host.
    :vartype validate_certificate_chain: bool
    :ivar validate_certificate_name: Flag indicating whether SSL certificate name validation should
     be done when using self-signed certificates for this backend host.
    :vartype validate_certificate_name: bool
    """

    _attribute_map = {
        'validate_certificate_chain': {'key': 'validateCertificateChain', 'type': 'bool'},
        'validate_certificate_name': {'key': 'validateCertificateName', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        validate_certificate_chain: Optional[bool] = True,
        validate_certificate_name: Optional[bool] = True,
        **kwargs
    ):
        """
        :keyword validate_certificate_chain: Flag indicating whether SSL certificate chain validation
         should be done when using self-signed certificates for this backend host.
        :paramtype validate_certificate_chain: bool
        :keyword validate_certificate_name: Flag indicating whether SSL certificate name validation
         should be done when using self-signed certificates for this backend host.
        :paramtype validate_certificate_name: bool
        """
        super(BackendTlsProperties, self).__init__(**kwargs)
        self.validate_certificate_chain = validate_certificate_chain
        self.validate_certificate_name = validate_certificate_name


class BackendUpdateParameterProperties(BackendBaseParameters):
    """Parameters supplied to the Update Backend operation.

    :ivar title: Backend Title.
    :vartype title: str
    :ivar description: Backend Description.
    :vartype description: str
    :ivar resource_id: Management Uri of the Resource in External System. This url can be the Arm
     Resource Id of Logic Apps, Function Apps or Api Apps.
    :vartype resource_id: str
    :ivar properties: Backend Properties contract.
    :vartype properties: ~azure.mgmt.apimanagement.models.BackendProperties
    :ivar credentials: Backend Credentials Contract Properties.
    :vartype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
    :ivar proxy: Backend Proxy Contract Properties.
    :vartype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
    :ivar tls: Backend TLS Properties.
    :vartype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
    :ivar url: Runtime Url of the Backend.
    :vartype url: str
    :ivar protocol: Backend communication protocol. Known values are: "http", "soap".
    :vartype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
    """

    _validation = {
        'title': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 2000, 'min_length': 1},
        'resource_id': {'max_length': 2000, 'min_length': 1},
        'url': {'max_length': 2000, 'min_length': 1},
    }

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BackendProperties'},
        'credentials': {'key': 'credentials', 'type': 'BackendCredentialsContract'},
        'proxy': {'key': 'proxy', 'type': 'BackendProxyContract'},
        'tls': {'key': 'tls', 'type': 'BackendTlsProperties'},
        'url': {'key': 'url', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        resource_id: Optional[str] = None,
        properties: Optional["_models.BackendProperties"] = None,
        credentials: Optional["_models.BackendCredentialsContract"] = None,
        proxy: Optional["_models.BackendProxyContract"] = None,
        tls: Optional["_models.BackendTlsProperties"] = None,
        url: Optional[str] = None,
        protocol: Optional[Union[str, "_models.BackendProtocol"]] = None,
        **kwargs
    ):
        """
        :keyword title: Backend Title.
        :paramtype title: str
        :keyword description: Backend Description.
        :paramtype description: str
        :keyword resource_id: Management Uri of the Resource in External System. This url can be the
         Arm Resource Id of Logic Apps, Function Apps or Api Apps.
        :paramtype resource_id: str
        :keyword properties: Backend Properties contract.
        :paramtype properties: ~azure.mgmt.apimanagement.models.BackendProperties
        :keyword credentials: Backend Credentials Contract Properties.
        :paramtype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
        :keyword proxy: Backend Proxy Contract Properties.
        :paramtype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
        :keyword tls: Backend TLS Properties.
        :paramtype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
        :keyword url: Runtime Url of the Backend.
        :paramtype url: str
        :keyword protocol: Backend communication protocol. Known values are: "http", "soap".
        :paramtype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
        """
        super(BackendUpdateParameterProperties, self).__init__(title=title, description=description, resource_id=resource_id, properties=properties, credentials=credentials, proxy=proxy, tls=tls, **kwargs)
        self.url = url
        self.protocol = protocol


class BackendUpdateParameters(msrest.serialization.Model):
    """Backend update parameters.

    :ivar title: Backend Title.
    :vartype title: str
    :ivar description: Backend Description.
    :vartype description: str
    :ivar resource_id: Management Uri of the Resource in External System. This url can be the Arm
     Resource Id of Logic Apps, Function Apps or Api Apps.
    :vartype resource_id: str
    :ivar properties: Backend Properties contract.
    :vartype properties: ~azure.mgmt.apimanagement.models.BackendProperties
    :ivar credentials: Backend Credentials Contract Properties.
    :vartype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
    :ivar proxy: Backend Proxy Contract Properties.
    :vartype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
    :ivar tls: Backend TLS Properties.
    :vartype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
    :ivar url: Runtime Url of the Backend.
    :vartype url: str
    :ivar protocol: Backend communication protocol. Known values are: "http", "soap".
    :vartype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
    """

    _validation = {
        'title': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 2000, 'min_length': 1},
        'resource_id': {'max_length': 2000, 'min_length': 1},
        'url': {'max_length': 2000, 'min_length': 1},
    }

    _attribute_map = {
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'properties': {'key': 'properties.properties', 'type': 'BackendProperties'},
        'credentials': {'key': 'properties.credentials', 'type': 'BackendCredentialsContract'},
        'proxy': {'key': 'properties.proxy', 'type': 'BackendProxyContract'},
        'tls': {'key': 'properties.tls', 'type': 'BackendTlsProperties'},
        'url': {'key': 'properties.url', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        resource_id: Optional[str] = None,
        properties: Optional["_models.BackendProperties"] = None,
        credentials: Optional["_models.BackendCredentialsContract"] = None,
        proxy: Optional["_models.BackendProxyContract"] = None,
        tls: Optional["_models.BackendTlsProperties"] = None,
        url: Optional[str] = None,
        protocol: Optional[Union[str, "_models.BackendProtocol"]] = None,
        **kwargs
    ):
        """
        :keyword title: Backend Title.
        :paramtype title: str
        :keyword description: Backend Description.
        :paramtype description: str
        :keyword resource_id: Management Uri of the Resource in External System. This url can be the
         Arm Resource Id of Logic Apps, Function Apps or Api Apps.
        :paramtype resource_id: str
        :keyword properties: Backend Properties contract.
        :paramtype properties: ~azure.mgmt.apimanagement.models.BackendProperties
        :keyword credentials: Backend Credentials Contract Properties.
        :paramtype credentials: ~azure.mgmt.apimanagement.models.BackendCredentialsContract
        :keyword proxy: Backend Proxy Contract Properties.
        :paramtype proxy: ~azure.mgmt.apimanagement.models.BackendProxyContract
        :keyword tls: Backend TLS Properties.
        :paramtype tls: ~azure.mgmt.apimanagement.models.BackendTlsProperties
        :keyword url: Runtime Url of the Backend.
        :paramtype url: str
        :keyword protocol: Backend communication protocol. Known values are: "http", "soap".
        :paramtype protocol: str or ~azure.mgmt.apimanagement.models.BackendProtocol
        """
        super(BackendUpdateParameters, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.resource_id = resource_id
        self.properties = properties
        self.credentials = credentials
        self.proxy = proxy
        self.tls = tls
        self.url = url
        self.protocol = protocol


class CertificateCollection(msrest.serialization.Model):
    """Paged Certificates list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.CertificateContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CertificateContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.CertificateContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.CertificateContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(CertificateCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CertificateConfiguration(msrest.serialization.Model):
    """Certificate configuration which consist of non-trusted intermediates and root certificates.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar encoded_certificate: Base64 Encoded certificate.
    :vartype encoded_certificate: str
    :ivar certificate_password: Certificate Password.
    :vartype certificate_password: str
    :ivar store_name: Required. The local certificate store location. Only Root and
     CertificateAuthority are valid locations. Known values are: "CertificateAuthority", "Root".
    :vartype store_name: str or ~azure.mgmt.apimanagement.models.CertificateConfigurationStoreName
    :ivar certificate: Certificate information.
    :vartype certificate: ~azure.mgmt.apimanagement.models.CertificateInformation
    """

    _validation = {
        'store_name': {'required': True},
        'certificate': {'readonly': True},
    }

    _attribute_map = {
        'encoded_certificate': {'key': 'encodedCertificate', 'type': 'str'},
        'certificate_password': {'key': 'certificatePassword', 'type': 'str'},
        'store_name': {'key': 'storeName', 'type': 'str'},
        'certificate': {'key': 'certificate', 'type': 'CertificateInformation'},
    }

    def __init__(
        self,
        *,
        store_name: Union[str, "_models.CertificateConfigurationStoreName"],
        encoded_certificate: Optional[str] = None,
        certificate_password: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword encoded_certificate: Base64 Encoded certificate.
        :paramtype encoded_certificate: str
        :keyword certificate_password: Certificate Password.
        :paramtype certificate_password: str
        :keyword store_name: Required. The local certificate store location. Only Root and
         CertificateAuthority are valid locations. Known values are: "CertificateAuthority", "Root".
        :paramtype store_name: str or
         ~azure.mgmt.apimanagement.models.CertificateConfigurationStoreName
        """
        super(CertificateConfiguration, self).__init__(**kwargs)
        self.encoded_certificate = encoded_certificate
        self.certificate_password = certificate_password
        self.store_name = store_name
        self.certificate = None


class CertificateContract(Resource):
    """Certificate details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar subject: Subject attribute of the certificate.
    :vartype subject: str
    :ivar thumbprint: Thumbprint of the certificate.
    :vartype thumbprint: str
    :ivar expiration_date: Expiration date of the certificate. The date conforms to the following
     format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype expiration_date: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'thumbprint': {'key': 'properties.thumbprint', 'type': 'str'},
        'expiration_date': {'key': 'properties.expirationDate', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        subject: Optional[str] = None,
        thumbprint: Optional[str] = None,
        expiration_date: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword subject: Subject attribute of the certificate.
        :paramtype subject: str
        :keyword thumbprint: Thumbprint of the certificate.
        :paramtype thumbprint: str
        :keyword expiration_date: Expiration date of the certificate. The date conforms to the
         following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype expiration_date: ~datetime.datetime
        """
        super(CertificateContract, self).__init__(**kwargs)
        self.subject = subject
        self.thumbprint = thumbprint
        self.expiration_date = expiration_date


class CertificateCreateOrUpdateParameters(msrest.serialization.Model):
    """Certificate create or update details.

    :ivar data: Base 64 encoded certificate using the application/x-pkcs12 representation.
    :vartype data: str
    :ivar password: Password for the Certificate.
    :vartype password: str
    """

    _attribute_map = {
        'data': {'key': 'properties.data', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data: Optional[str] = None,
        password: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword data: Base 64 encoded certificate using the application/x-pkcs12 representation.
        :paramtype data: str
        :keyword password: Password for the Certificate.
        :paramtype password: str
        """
        super(CertificateCreateOrUpdateParameters, self).__init__(**kwargs)
        self.data = data
        self.password = password


class CertificateInformation(msrest.serialization.Model):
    """SSL certificate information.

    All required parameters must be populated in order to send to Azure.

    :ivar expiry: Required. Expiration date of the certificate. The date conforms to the following
     format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype expiry: ~datetime.datetime
    :ivar thumbprint: Required. Thumbprint of the certificate.
    :vartype thumbprint: str
    :ivar subject: Required. Subject of the certificate.
    :vartype subject: str
    """

    _validation = {
        'expiry': {'required': True},
        'thumbprint': {'required': True},
        'subject': {'required': True},
    }

    _attribute_map = {
        'expiry': {'key': 'expiry', 'type': 'iso-8601'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        expiry: datetime.datetime,
        thumbprint: str,
        subject: str,
        **kwargs
    ):
        """
        :keyword expiry: Required. Expiration date of the certificate. The date conforms to the
         following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype expiry: ~datetime.datetime
        :keyword thumbprint: Required. Thumbprint of the certificate.
        :paramtype thumbprint: str
        :keyword subject: Required. Subject of the certificate.
        :paramtype subject: str
        """
        super(CertificateInformation, self).__init__(**kwargs)
        self.expiry = expiry
        self.thumbprint = thumbprint
        self.subject = subject


class ConnectivityStatusContract(msrest.serialization.Model):
    """Details about connectivity to a resource.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The hostname of the resource which the service depends on. This can be
     the database, storage or any other azure resource on which the service depends upon.
    :vartype name: str
    :ivar status: Required. Resource Connectivity Status Type identifier. Known values are:
     "initializing", "success", "failure".
    :vartype status: str or ~azure.mgmt.apimanagement.models.ConnectivityStatusType
    :ivar error: Error details of the connectivity to the resource.
    :vartype error: str
    :ivar last_updated: Required. The date when the resource connectivity status was last updated.
     This status should be updated every 15 minutes. If this status has not been updated, then it
     means that the service has lost network connectivity to the resource, from inside the Virtual
     Network.The date conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the
     ISO 8601 standard.
    :vartype last_updated: ~datetime.datetime
    :ivar last_status_change: Required. The date when the resource connectivity status last Changed
     from success to failure or vice-versa. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype last_status_change: ~datetime.datetime
    """

    _validation = {
        'name': {'required': True, 'min_length': 1},
        'status': {'required': True},
        'last_updated': {'required': True},
        'last_status_change': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'last_status_change': {'key': 'lastStatusChange', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        name: str,
        status: Union[str, "_models.ConnectivityStatusType"],
        last_updated: datetime.datetime,
        last_status_change: datetime.datetime,
        error: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Required. The hostname of the resource which the service depends on. This can be
         the database, storage or any other azure resource on which the service depends upon.
        :paramtype name: str
        :keyword status: Required. Resource Connectivity Status Type identifier. Known values are:
         "initializing", "success", "failure".
        :paramtype status: str or ~azure.mgmt.apimanagement.models.ConnectivityStatusType
        :keyword error: Error details of the connectivity to the resource.
        :paramtype error: str
        :keyword last_updated: Required. The date when the resource connectivity status was last
         updated. This status should be updated every 15 minutes. If this status has not been updated,
         then it means that the service has lost network connectivity to the resource, from inside the
         Virtual Network.The date conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as
         specified by the ISO 8601 standard.
        :paramtype last_updated: ~datetime.datetime
        :keyword last_status_change: Required. The date when the resource connectivity status last
         Changed from success to failure or vice-versa. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype last_status_change: ~datetime.datetime
        """
        super(ConnectivityStatusContract, self).__init__(**kwargs)
        self.name = name
        self.status = status
        self.error = error
        self.last_updated = last_updated
        self.last_status_change = last_status_change


class DeployConfigurationParameters(msrest.serialization.Model):
    """Parameters supplied to the Deploy Configuration operation.

    All required parameters must be populated in order to send to Azure.

    :ivar branch: Required. The name of the Git branch from which the configuration is to be
     deployed to the configuration database.
    :vartype branch: str
    :ivar force: The value enforcing deleting subscriptions to products that are deleted in this
     update.
    :vartype force: bool
    """

    _validation = {
        'branch': {'required': True},
    }

    _attribute_map = {
        'branch': {'key': 'branch', 'type': 'str'},
        'force': {'key': 'force', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        branch: str,
        force: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword branch: Required. The name of the Git branch from which the configuration is to be
         deployed to the configuration database.
        :paramtype branch: str
        :keyword force: The value enforcing deleting subscriptions to products that are deleted in this
         update.
        :paramtype force: bool
        """
        super(DeployConfigurationParameters, self).__init__(**kwargs)
        self.branch = branch
        self.force = force


class DiagnosticCollection(msrest.serialization.Model):
    """Paged Diagnostic list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.DiagnosticContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DiagnosticContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.DiagnosticContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.DiagnosticContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(DiagnosticCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DiagnosticContract(Resource):
    """Diagnostic details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar enabled: Indicates whether a diagnostic should receive data or not.
    :vartype enabled: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Indicates whether a diagnostic should receive data or not.
        :paramtype enabled: bool
        """
        super(DiagnosticContract, self).__init__(**kwargs)
        self.enabled = enabled


class EmailTemplateCollection(msrest.serialization.Model):
    """Paged email template list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.EmailTemplateContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EmailTemplateContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.EmailTemplateContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.EmailTemplateContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(EmailTemplateCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class EmailTemplateContract(Resource):
    """Email Template details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar subject: Subject of the Template.
    :vartype subject: str
    :ivar body: Email Template Body. This should be a valid XDocument.
    :vartype body: str
    :ivar title: Title of the Template.
    :vartype title: str
    :ivar description: Description of the Email Template.
    :vartype description: str
    :ivar is_default: Whether the template is the default template provided by Api Management or
     has been edited.
    :vartype is_default: bool
    :ivar parameters: Email Template Parameter values.
    :vartype parameters:
     list[~azure.mgmt.apimanagement.models.EmailTemplateParametersContractProperties]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'subject': {'max_length': 1000, 'min_length': 1},
        'body': {'min_length': 1},
        'is_default': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'body': {'key': 'properties.body', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'is_default': {'key': 'properties.isDefault', 'type': 'bool'},
        'parameters': {'key': 'properties.parameters', 'type': '[EmailTemplateParametersContractProperties]'},
    }

    def __init__(
        self,
        *,
        subject: Optional[str] = None,
        body: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        parameters: Optional[List["_models.EmailTemplateParametersContractProperties"]] = None,
        **kwargs
    ):
        """
        :keyword subject: Subject of the Template.
        :paramtype subject: str
        :keyword body: Email Template Body. This should be a valid XDocument.
        :paramtype body: str
        :keyword title: Title of the Template.
        :paramtype title: str
        :keyword description: Description of the Email Template.
        :paramtype description: str
        :keyword parameters: Email Template Parameter values.
        :paramtype parameters:
         list[~azure.mgmt.apimanagement.models.EmailTemplateParametersContractProperties]
        """
        super(EmailTemplateContract, self).__init__(**kwargs)
        self.subject = subject
        self.body = body
        self.title = title
        self.description = description
        self.is_default = None
        self.parameters = parameters


class EmailTemplateParametersContractProperties(msrest.serialization.Model):
    """Email Template Parameter contract.

    :ivar name: Template parameter name.
    :vartype name: str
    :ivar title: Template parameter title.
    :vartype title: str
    :ivar description: Template parameter description.
    :vartype description: str
    """

    _validation = {
        'name': {'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
        'title': {'max_length': 4096, 'min_length': 1},
        'description': {'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Template parameter name.
        :paramtype name: str
        :keyword title: Template parameter title.
        :paramtype title: str
        :keyword description: Template parameter description.
        :paramtype description: str
        """
        super(EmailTemplateParametersContractProperties, self).__init__(**kwargs)
        self.name = name
        self.title = title
        self.description = description


class EmailTemplateUpdateParameters(msrest.serialization.Model):
    """Email Template update Parameters.

    :ivar subject: Subject of the Template.
    :vartype subject: str
    :ivar title: Title of the Template.
    :vartype title: str
    :ivar description: Description of the Email Template.
    :vartype description: str
    :ivar body: Email Template Body. This should be a valid XDocument.
    :vartype body: str
    :ivar parameters: Email Template Parameter values.
    :vartype parameters:
     list[~azure.mgmt.apimanagement.models.EmailTemplateParametersContractProperties]
    """

    _validation = {
        'subject': {'max_length': 1000, 'min_length': 1},
        'body': {'min_length': 1},
    }

    _attribute_map = {
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'body': {'key': 'properties.body', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '[EmailTemplateParametersContractProperties]'},
    }

    def __init__(
        self,
        *,
        subject: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        body: Optional[str] = None,
        parameters: Optional[List["_models.EmailTemplateParametersContractProperties"]] = None,
        **kwargs
    ):
        """
        :keyword subject: Subject of the Template.
        :paramtype subject: str
        :keyword title: Title of the Template.
        :paramtype title: str
        :keyword description: Description of the Email Template.
        :paramtype description: str
        :keyword body: Email Template Body. This should be a valid XDocument.
        :paramtype body: str
        :keyword parameters: Email Template Parameter values.
        :paramtype parameters:
         list[~azure.mgmt.apimanagement.models.EmailTemplateParametersContractProperties]
        """
        super(EmailTemplateUpdateParameters, self).__init__(**kwargs)
        self.subject = subject
        self.title = title
        self.description = description
        self.body = body
        self.parameters = parameters


class ErrorFieldContract(msrest.serialization.Model):
    """Error Field contract.

    :ivar code: Property level error code.
    :vartype code: str
    :ivar message: Human-readable representation of property-level error.
    :vartype message: str
    :ivar target: Property name.
    :vartype target: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code: Property level error code.
        :paramtype code: str
        :keyword message: Human-readable representation of property-level error.
        :paramtype message: str
        :keyword target: Property name.
        :paramtype target: str
        """
        super(ErrorFieldContract, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class ErrorResponse(msrest.serialization.Model):
    """Error Body contract.

    :ivar code: Service-defined error code. This code serves as a sub-status for the HTTP error
     code specified in the response.
    :vartype code: str
    :ivar message: Human-readable representation of the error.
    :vartype message: str
    :ivar details: The list of invalid fields send in request, in case of validation error.
    :vartype details: list[~azure.mgmt.apimanagement.models.ErrorFieldContract]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorFieldContract]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        details: Optional[List["_models.ErrorFieldContract"]] = None,
        **kwargs
    ):
        """
        :keyword code: Service-defined error code. This code serves as a sub-status for the HTTP error
         code specified in the response.
        :paramtype code: str
        :keyword message: Human-readable representation of the error.
        :paramtype message: str
        :keyword details: The list of invalid fields send in request, in case of validation error.
        :paramtype details: list[~azure.mgmt.apimanagement.models.ErrorFieldContract]
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details


class GenerateSsoUrlResult(msrest.serialization.Model):
    """Generate SSO Url operations response details.

    :ivar value: Redirect Url containing the SSO URL value.
    :vartype value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Redirect Url containing the SSO URL value.
        :paramtype value: str
        """
        super(GenerateSsoUrlResult, self).__init__(**kwargs)
        self.value = value


class GroupCollection(msrest.serialization.Model):
    """Paged Group list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.GroupContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GroupContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.GroupContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.GroupContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(GroupCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class GroupContract(Resource):
    """Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar display_name: Group name.
    :vartype display_name: str
    :ivar description: Group description. Can contain HTML formatting tags.
    :vartype description: str
    :ivar built_in: true if the group is one of the three system groups (Administrators,
     Developers, or Guests); otherwise false.
    :vartype built_in: bool
    :ivar type_properties_type: Group type. Known values are: "custom", "system", "external".
    :vartype type_properties_type: str or ~azure.mgmt.apimanagement.models.GroupType
    :ivar external_id: For external groups, this property contains the id of the group from the
     external identity provider, e.g. for Azure Active Directory
     aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
     null.
    :vartype external_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 300, 'min_length': 1},
        'description': {'max_length': 1000, 'min_length': 0},
        'built_in': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'built_in': {'key': 'properties.builtIn', 'type': 'bool'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'external_id': {'key': 'properties.externalId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        type_properties_type: Optional[Union[str, "_models.GroupType"]] = None,
        external_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Group name.
        :paramtype display_name: str
        :keyword description: Group description. Can contain HTML formatting tags.
        :paramtype description: str
        :keyword type_properties_type: Group type. Known values are: "custom", "system", "external".
        :paramtype type_properties_type: str or ~azure.mgmt.apimanagement.models.GroupType
        :keyword external_id: For external groups, this property contains the id of the group from the
         external identity provider, e.g. for Azure Active Directory
         aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
         null.
        :paramtype external_id: str
        """
        super(GroupContract, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.built_in = None
        self.type_properties_type = type_properties_type
        self.external_id = external_id


class GroupCreateParameters(msrest.serialization.Model):
    """Parameters supplied to the Create Group operation.

    :ivar display_name: Group name.
    :vartype display_name: str
    :ivar description: Group description.
    :vartype description: str
    :ivar type: Group type. Known values are: "custom", "system", "external".
    :vartype type: str or ~azure.mgmt.apimanagement.models.GroupType
    :ivar external_id: Identifier of the external groups, this property contains the id of the
     group from the external identity provider, e.g. for Azure Active Directory
     aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
     null.
    :vartype external_id: str
    """

    _validation = {
        'display_name': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'type': {'key': 'properties.type', 'type': 'str'},
        'external_id': {'key': 'properties.externalId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        type: Optional[Union[str, "_models.GroupType"]] = None,
        external_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Group name.
        :paramtype display_name: str
        :keyword description: Group description.
        :paramtype description: str
        :keyword type: Group type. Known values are: "custom", "system", "external".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.GroupType
        :keyword external_id: Identifier of the external groups, this property contains the id of the
         group from the external identity provider, e.g. for Azure Active Directory
         aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
         null.
        :paramtype external_id: str
        """
        super(GroupCreateParameters, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.type = type
        self.external_id = external_id


class GroupUpdateParameters(msrest.serialization.Model):
    """Parameters supplied to the Update Group operation.

    :ivar display_name: Group name.
    :vartype display_name: str
    :ivar description: Group description.
    :vartype description: str
    :ivar type: Group type. Known values are: "custom", "system", "external".
    :vartype type: str or ~azure.mgmt.apimanagement.models.GroupType
    :ivar external_id: Identifier of the external groups, this property contains the id of the
     group from the external identity provider, e.g. for Azure Active Directory
     aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
     null.
    :vartype external_id: str
    """

    _validation = {
        'display_name': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'type': {'key': 'properties.type', 'type': 'str'},
        'external_id': {'key': 'properties.externalId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        type: Optional[Union[str, "_models.GroupType"]] = None,
        external_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Group name.
        :paramtype display_name: str
        :keyword description: Group description.
        :paramtype description: str
        :keyword type: Group type. Known values are: "custom", "system", "external".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.GroupType
        :keyword external_id: Identifier of the external groups, this property contains the id of the
         group from the external identity provider, e.g. for Azure Active Directory
         aad://:code:`<tenant>`.onmicrosoft.com/groups/:code:`<group object id>`; otherwise the value is
         null.
        :paramtype external_id: str
        """
        super(GroupUpdateParameters, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.type = type
        self.external_id = external_id


class HostnameConfiguration(msrest.serialization.Model):
    """Custom hostname configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management", "Scm".
    :vartype type: str or ~azure.mgmt.apimanagement.models.HostnameType
    :ivar host_name: Required. Hostname to configure on the Api Management service.
    :vartype host_name: str
    :ivar key_vault_id: Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url
     containing version is provided, auto-update of ssl certificate will not work. This requires Api
     Management service to be configured with MSI. The secret should be of type
     *application/x-pkcs12*.
    :vartype key_vault_id: str
    :ivar encoded_certificate: Base64 Encoded certificate.
    :vartype encoded_certificate: str
    :ivar certificate_password: Certificate Password.
    :vartype certificate_password: str
    :ivar default_ssl_binding: Specify true to setup the certificate associated with this Hostname
     as the Default SSL Certificate. If a client does not send the SNI header, then this will be the
     certificate that will be challenged. The property is useful if a service has multiple custom
     hostname enabled and it needs to decide on the default ssl certificate. The setting only
     applied to Proxy Hostname Type.
    :vartype default_ssl_binding: bool
    :ivar negotiate_client_certificate: Specify true to always negotiate client certificate on the
     hostname. Default Value is false.
    :vartype negotiate_client_certificate: bool
    :ivar certificate: Certificate information.
    :vartype certificate: ~azure.mgmt.apimanagement.models.CertificateInformation
    """

    _validation = {
        'type': {'required': True},
        'host_name': {'required': True},
        'certificate': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'host_name': {'key': 'hostName', 'type': 'str'},
        'key_vault_id': {'key': 'keyVaultId', 'type': 'str'},
        'encoded_certificate': {'key': 'encodedCertificate', 'type': 'str'},
        'certificate_password': {'key': 'certificatePassword', 'type': 'str'},
        'default_ssl_binding': {'key': 'defaultSslBinding', 'type': 'bool'},
        'negotiate_client_certificate': {'key': 'negotiateClientCertificate', 'type': 'bool'},
        'certificate': {'key': 'certificate', 'type': 'CertificateInformation'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.HostnameType"],
        host_name: str,
        key_vault_id: Optional[str] = None,
        encoded_certificate: Optional[str] = None,
        certificate_password: Optional[str] = None,
        default_ssl_binding: Optional[bool] = False,
        negotiate_client_certificate: Optional[bool] = False,
        **kwargs
    ):
        """
        :keyword type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management",
         "Scm".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.HostnameType
        :keyword host_name: Required. Hostname to configure on the Api Management service.
        :paramtype host_name: str
        :keyword key_vault_id: Url to the KeyVault Secret containing the Ssl Certificate. If absolute
         Url containing version is provided, auto-update of ssl certificate will not work. This requires
         Api Management service to be configured with MSI. The secret should be of type
         *application/x-pkcs12*.
        :paramtype key_vault_id: str
        :keyword encoded_certificate: Base64 Encoded certificate.
        :paramtype encoded_certificate: str
        :keyword certificate_password: Certificate Password.
        :paramtype certificate_password: str
        :keyword default_ssl_binding: Specify true to setup the certificate associated with this
         Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this
         will be the certificate that will be challenged. The property is useful if a service has
         multiple custom hostname enabled and it needs to decide on the default ssl certificate. The
         setting only applied to Proxy Hostname Type.
        :paramtype default_ssl_binding: bool
        :keyword negotiate_client_certificate: Specify true to always negotiate client certificate on
         the hostname. Default Value is false.
        :paramtype negotiate_client_certificate: bool
        """
        super(HostnameConfiguration, self).__init__(**kwargs)
        self.type = type
        self.host_name = host_name
        self.key_vault_id = key_vault_id
        self.encoded_certificate = encoded_certificate
        self.certificate_password = certificate_password
        self.default_ssl_binding = default_ssl_binding
        self.negotiate_client_certificate = negotiate_client_certificate
        self.certificate = None


class HostnameConfigurationOld(msrest.serialization.Model):
    """Custom hostname configuration.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management", "Scm".
    :vartype type: str or ~azure.mgmt.apimanagement.models.HostnameType
    :ivar hostname: Required. Hostname to configure.
    :vartype hostname: str
    :ivar certificate: Required. Certificate information.
    :vartype certificate: ~azure.mgmt.apimanagement.models.CertificateInformation
    """

    _validation = {
        'type': {'required': True},
        'hostname': {'required': True},
        'certificate': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'certificate': {'key': 'certificate', 'type': 'CertificateInformation'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.HostnameType"],
        hostname: str,
        certificate: "_models.CertificateInformation",
        **kwargs
    ):
        """
        :keyword type: Required. Hostname type. Known values are: "Proxy", "Portal", "Management",
         "Scm".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.HostnameType
        :keyword hostname: Required. Hostname to configure.
        :paramtype hostname: str
        :keyword certificate: Required. Certificate information.
        :paramtype certificate: ~azure.mgmt.apimanagement.models.CertificateInformation
        """
        super(HostnameConfigurationOld, self).__init__(**kwargs)
        self.type = type
        self.hostname = hostname
        self.certificate = certificate


class IdentityProviderBaseParameters(msrest.serialization.Model):
    """Identity Provider Base Parameter Properties.

    :ivar type: Identity Provider Type identifier. Known values are: "facebook", "google",
     "microsoft", "twitter", "aad", "aadB2C".
    :vartype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
    :ivar allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory login.
    :vartype allowed_tenants: list[str]
    :ivar signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signup_policy_name: str
    :ivar signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signin_policy_name: str
    :ivar profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
     Identity Provider.
    :vartype profile_editing_policy_name: str
    :ivar password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C Identity
     Provider.
    :vartype password_reset_policy_name: str
    """

    _validation = {
        'allowed_tenants': {'max_items': 32, 'min_items': 0},
        'signup_policy_name': {'min_length': 1},
        'signin_policy_name': {'min_length': 1},
        'profile_editing_policy_name': {'min_length': 1},
        'password_reset_policy_name': {'min_length': 1},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'allowed_tenants': {'key': 'allowedTenants', 'type': '[str]'},
        'signup_policy_name': {'key': 'signupPolicyName', 'type': 'str'},
        'signin_policy_name': {'key': 'signinPolicyName', 'type': 'str'},
        'profile_editing_policy_name': {'key': 'profileEditingPolicyName', 'type': 'str'},
        'password_reset_policy_name': {'key': 'passwordResetPolicyName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.IdentityProviderType"]] = None,
        allowed_tenants: Optional[List[str]] = None,
        signup_policy_name: Optional[str] = None,
        signin_policy_name: Optional[str] = None,
        profile_editing_policy_name: Optional[str] = None,
        password_reset_policy_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type: Identity Provider Type identifier. Known values are: "facebook", "google",
         "microsoft", "twitter", "aad", "aadB2C".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
        :keyword allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory
         login.
        :paramtype allowed_tenants: list[str]
        :keyword signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signup_policy_name: str
        :keyword signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signin_policy_name: str
        :keyword profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype profile_editing_policy_name: str
        :keyword password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype password_reset_policy_name: str
        """
        super(IdentityProviderBaseParameters, self).__init__(**kwargs)
        self.type = type
        self.allowed_tenants = allowed_tenants
        self.signup_policy_name = signup_policy_name
        self.signin_policy_name = signin_policy_name
        self.profile_editing_policy_name = profile_editing_policy_name
        self.password_reset_policy_name = password_reset_policy_name


class IdentityProviderContract(Resource):
    """Identity Provider details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar type_properties_type: Identity Provider Type identifier. Known values are: "facebook",
     "google", "microsoft", "twitter", "aad", "aadB2C".
    :vartype type_properties_type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
    :ivar allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory login.
    :vartype allowed_tenants: list[str]
    :ivar signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signup_policy_name: str
    :ivar signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signin_policy_name: str
    :ivar profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
     Identity Provider.
    :vartype profile_editing_policy_name: str
    :ivar password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C Identity
     Provider.
    :vartype password_reset_policy_name: str
    :ivar client_id: Client Id of the Application in the external Identity Provider. It is App ID
     for Facebook login, Client ID for Google login, App ID for Microsoft.
    :vartype client_id: str
    :ivar client_secret: Client secret of the Application in external Identity Provider, used to
     authenticate login request. For example, it is App Secret for Facebook login, API Key for
     Google login, Public Key for Microsoft.
    :vartype client_secret: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'allowed_tenants': {'max_items': 32, 'min_items': 0},
        'signup_policy_name': {'min_length': 1},
        'signin_policy_name': {'min_length': 1},
        'profile_editing_policy_name': {'min_length': 1},
        'password_reset_policy_name': {'min_length': 1},
        'client_id': {'min_length': 1},
        'client_secret': {'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'allowed_tenants': {'key': 'properties.allowedTenants', 'type': '[str]'},
        'signup_policy_name': {'key': 'properties.signupPolicyName', 'type': 'str'},
        'signin_policy_name': {'key': 'properties.signinPolicyName', 'type': 'str'},
        'profile_editing_policy_name': {'key': 'properties.profileEditingPolicyName', 'type': 'str'},
        'password_reset_policy_name': {'key': 'properties.passwordResetPolicyName', 'type': 'str'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type_properties_type: Optional[Union[str, "_models.IdentityProviderType"]] = None,
        allowed_tenants: Optional[List[str]] = None,
        signup_policy_name: Optional[str] = None,
        signin_policy_name: Optional[str] = None,
        profile_editing_policy_name: Optional[str] = None,
        password_reset_policy_name: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type_properties_type: Identity Provider Type identifier. Known values are: "facebook",
         "google", "microsoft", "twitter", "aad", "aadB2C".
        :paramtype type_properties_type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
        :keyword allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory
         login.
        :paramtype allowed_tenants: list[str]
        :keyword signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signup_policy_name: str
        :keyword signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signin_policy_name: str
        :keyword profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype profile_editing_policy_name: str
        :keyword password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype password_reset_policy_name: str
        :keyword client_id: Client Id of the Application in the external Identity Provider. It is App
         ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        :paramtype client_id: str
        :keyword client_secret: Client secret of the Application in external Identity Provider, used to
         authenticate login request. For example, it is App Secret for Facebook login, API Key for
         Google login, Public Key for Microsoft.
        :paramtype client_secret: str
        """
        super(IdentityProviderContract, self).__init__(**kwargs)
        self.type_properties_type = type_properties_type
        self.allowed_tenants = allowed_tenants
        self.signup_policy_name = signup_policy_name
        self.signin_policy_name = signin_policy_name
        self.profile_editing_policy_name = profile_editing_policy_name
        self.password_reset_policy_name = password_reset_policy_name
        self.client_id = client_id
        self.client_secret = client_secret


class IdentityProviderContractProperties(IdentityProviderBaseParameters):
    """The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Identity Provider Type identifier. Known values are: "facebook", "google",
     "microsoft", "twitter", "aad", "aadB2C".
    :vartype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
    :ivar allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory login.
    :vartype allowed_tenants: list[str]
    :ivar signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signup_policy_name: str
    :ivar signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signin_policy_name: str
    :ivar profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
     Identity Provider.
    :vartype profile_editing_policy_name: str
    :ivar password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C Identity
     Provider.
    :vartype password_reset_policy_name: str
    :ivar client_id: Required. Client Id of the Application in the external Identity Provider. It
     is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
    :vartype client_id: str
    :ivar client_secret: Required. Client secret of the Application in external Identity Provider,
     used to authenticate login request. For example, it is App Secret for Facebook login, API Key
     for Google login, Public Key for Microsoft.
    :vartype client_secret: str
    """

    _validation = {
        'allowed_tenants': {'max_items': 32, 'min_items': 0},
        'signup_policy_name': {'min_length': 1},
        'signin_policy_name': {'min_length': 1},
        'profile_editing_policy_name': {'min_length': 1},
        'password_reset_policy_name': {'min_length': 1},
        'client_id': {'required': True, 'min_length': 1},
        'client_secret': {'required': True, 'min_length': 1},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'allowed_tenants': {'key': 'allowedTenants', 'type': '[str]'},
        'signup_policy_name': {'key': 'signupPolicyName', 'type': 'str'},
        'signin_policy_name': {'key': 'signinPolicyName', 'type': 'str'},
        'profile_editing_policy_name': {'key': 'profileEditingPolicyName', 'type': 'str'},
        'password_reset_policy_name': {'key': 'passwordResetPolicyName', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        type: Optional[Union[str, "_models.IdentityProviderType"]] = None,
        allowed_tenants: Optional[List[str]] = None,
        signup_policy_name: Optional[str] = None,
        signin_policy_name: Optional[str] = None,
        profile_editing_policy_name: Optional[str] = None,
        password_reset_policy_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type: Identity Provider Type identifier. Known values are: "facebook", "google",
         "microsoft", "twitter", "aad", "aadB2C".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
        :keyword allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory
         login.
        :paramtype allowed_tenants: list[str]
        :keyword signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signup_policy_name: str
        :keyword signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signin_policy_name: str
        :keyword profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype profile_editing_policy_name: str
        :keyword password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype password_reset_policy_name: str
        :keyword client_id: Required. Client Id of the Application in the external Identity Provider.
         It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        :paramtype client_id: str
        :keyword client_secret: Required. Client secret of the Application in external Identity
         Provider, used to authenticate login request. For example, it is App Secret for Facebook login,
         API Key for Google login, Public Key for Microsoft.
        :paramtype client_secret: str
        """
        super(IdentityProviderContractProperties, self).__init__(type=type, allowed_tenants=allowed_tenants, signup_policy_name=signup_policy_name, signin_policy_name=signin_policy_name, profile_editing_policy_name=profile_editing_policy_name, password_reset_policy_name=password_reset_policy_name, **kwargs)
        self.client_id = client_id
        self.client_secret = client_secret


class IdentityProviderList(msrest.serialization.Model):
    """List of all the Identity Providers configured on the service instance.

    :ivar value: Identity Provider configuration values.
    :vartype value: list[~azure.mgmt.apimanagement.models.IdentityProviderContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IdentityProviderContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.IdentityProviderContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Identity Provider configuration values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.IdentityProviderContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(IdentityProviderList, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class IdentityProviderUpdateParameters(msrest.serialization.Model):
    """Parameters supplied to update Identity Provider.

    :ivar type: Identity Provider Type identifier. Known values are: "facebook", "google",
     "microsoft", "twitter", "aad", "aadB2C".
    :vartype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
    :ivar allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory login.
    :vartype allowed_tenants: list[str]
    :ivar signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signup_policy_name: str
    :ivar signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signin_policy_name: str
    :ivar profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
     Identity Provider.
    :vartype profile_editing_policy_name: str
    :ivar password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C Identity
     Provider.
    :vartype password_reset_policy_name: str
    :ivar client_id: Client Id of the Application in the external Identity Provider. It is App ID
     for Facebook login, Client ID for Google login, App ID for Microsoft.
    :vartype client_id: str
    :ivar client_secret: Client secret of the Application in external Identity Provider, used to
     authenticate login request. For example, it is App Secret for Facebook login, API Key for
     Google login, Public Key for Microsoft.
    :vartype client_secret: str
    """

    _validation = {
        'allowed_tenants': {'max_items': 32, 'min_items': 0},
        'signup_policy_name': {'min_length': 1},
        'signin_policy_name': {'min_length': 1},
        'profile_editing_policy_name': {'min_length': 1},
        'password_reset_policy_name': {'min_length': 1},
        'client_id': {'min_length': 1},
        'client_secret': {'min_length': 1},
    }

    _attribute_map = {
        'type': {'key': 'properties.type', 'type': 'str'},
        'allowed_tenants': {'key': 'properties.allowedTenants', 'type': '[str]'},
        'signup_policy_name': {'key': 'properties.signupPolicyName', 'type': 'str'},
        'signin_policy_name': {'key': 'properties.signinPolicyName', 'type': 'str'},
        'profile_editing_policy_name': {'key': 'properties.profileEditingPolicyName', 'type': 'str'},
        'password_reset_policy_name': {'key': 'properties.passwordResetPolicyName', 'type': 'str'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.IdentityProviderType"]] = None,
        allowed_tenants: Optional[List[str]] = None,
        signup_policy_name: Optional[str] = None,
        signin_policy_name: Optional[str] = None,
        profile_editing_policy_name: Optional[str] = None,
        password_reset_policy_name: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type: Identity Provider Type identifier. Known values are: "facebook", "google",
         "microsoft", "twitter", "aad", "aadB2C".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
        :keyword allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory
         login.
        :paramtype allowed_tenants: list[str]
        :keyword signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signup_policy_name: str
        :keyword signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signin_policy_name: str
        :keyword profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype profile_editing_policy_name: str
        :keyword password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype password_reset_policy_name: str
        :keyword client_id: Client Id of the Application in the external Identity Provider. It is App
         ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        :paramtype client_id: str
        :keyword client_secret: Client secret of the Application in external Identity Provider, used to
         authenticate login request. For example, it is App Secret for Facebook login, API Key for
         Google login, Public Key for Microsoft.
        :paramtype client_secret: str
        """
        super(IdentityProviderUpdateParameters, self).__init__(**kwargs)
        self.type = type
        self.allowed_tenants = allowed_tenants
        self.signup_policy_name = signup_policy_name
        self.signin_policy_name = signin_policy_name
        self.profile_editing_policy_name = profile_editing_policy_name
        self.password_reset_policy_name = password_reset_policy_name
        self.client_id = client_id
        self.client_secret = client_secret


class IdentityProviderUpdateProperties(IdentityProviderBaseParameters):
    """Parameters supplied to the Update Identity Provider operation.

    :ivar type: Identity Provider Type identifier. Known values are: "facebook", "google",
     "microsoft", "twitter", "aad", "aadB2C".
    :vartype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
    :ivar allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory login.
    :vartype allowed_tenants: list[str]
    :ivar signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signup_policy_name: str
    :ivar signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
    :vartype signin_policy_name: str
    :ivar profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
     Identity Provider.
    :vartype profile_editing_policy_name: str
    :ivar password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C Identity
     Provider.
    :vartype password_reset_policy_name: str
    :ivar client_id: Client Id of the Application in the external Identity Provider. It is App ID
     for Facebook login, Client ID for Google login, App ID for Microsoft.
    :vartype client_id: str
    :ivar client_secret: Client secret of the Application in external Identity Provider, used to
     authenticate login request. For example, it is App Secret for Facebook login, API Key for
     Google login, Public Key for Microsoft.
    :vartype client_secret: str
    """

    _validation = {
        'allowed_tenants': {'max_items': 32, 'min_items': 0},
        'signup_policy_name': {'min_length': 1},
        'signin_policy_name': {'min_length': 1},
        'profile_editing_policy_name': {'min_length': 1},
        'password_reset_policy_name': {'min_length': 1},
        'client_id': {'min_length': 1},
        'client_secret': {'min_length': 1},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'allowed_tenants': {'key': 'allowedTenants', 'type': '[str]'},
        'signup_policy_name': {'key': 'signupPolicyName', 'type': 'str'},
        'signin_policy_name': {'key': 'signinPolicyName', 'type': 'str'},
        'profile_editing_policy_name': {'key': 'profileEditingPolicyName', 'type': 'str'},
        'password_reset_policy_name': {'key': 'passwordResetPolicyName', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.IdentityProviderType"]] = None,
        allowed_tenants: Optional[List[str]] = None,
        signup_policy_name: Optional[str] = None,
        signin_policy_name: Optional[str] = None,
        profile_editing_policy_name: Optional[str] = None,
        password_reset_policy_name: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword type: Identity Provider Type identifier. Known values are: "facebook", "google",
         "microsoft", "twitter", "aad", "aadB2C".
        :paramtype type: str or ~azure.mgmt.apimanagement.models.IdentityProviderType
        :keyword allowed_tenants: List of Allowed Tenants when configuring Azure Active Directory
         login.
        :paramtype allowed_tenants: list[str]
        :keyword signup_policy_name: Signup Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signup_policy_name: str
        :keyword signin_policy_name: Signin Policy Name. Only applies to AAD B2C Identity Provider.
        :paramtype signin_policy_name: str
        :keyword profile_editing_policy_name: Profile Editing Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype profile_editing_policy_name: str
        :keyword password_reset_policy_name: Password Reset Policy Name. Only applies to AAD B2C
         Identity Provider.
        :paramtype password_reset_policy_name: str
        :keyword client_id: Client Id of the Application in the external Identity Provider. It is App
         ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        :paramtype client_id: str
        :keyword client_secret: Client secret of the Application in external Identity Provider, used to
         authenticate login request. For example, it is App Secret for Facebook login, API Key for
         Google login, Public Key for Microsoft.
        :paramtype client_secret: str
        """
        super(IdentityProviderUpdateProperties, self).__init__(type=type, allowed_tenants=allowed_tenants, signup_policy_name=signup_policy_name, signin_policy_name=signin_policy_name, profile_editing_policy_name=profile_editing_policy_name, password_reset_policy_name=password_reset_policy_name, **kwargs)
        self.client_id = client_id
        self.client_secret = client_secret


class IssueAttachmentCollection(msrest.serialization.Model):
    """Paged Issue Attachment list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Issue Attachment values.
    :vartype value: list[~azure.mgmt.apimanagement.models.IssueAttachmentContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IssueAttachmentContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IssueAttachmentCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class IssueAttachmentContract(Resource):
    """Issue Attachment Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar title: Filename by which the binary data will be saved.
    :vartype title: str
    :ivar content_format: Either 'link' if content is provided via an HTTP link or the MIME type of
     the Base64-encoded binary data provided in the 'content' property.
    :vartype content_format: str
    :ivar content: An HTTP link or Base64-encoded binary data.
    :vartype content: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'content_format': {'key': 'properties.contentFormat', 'type': 'str'},
        'content': {'key': 'properties.content', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        content_format: Optional[str] = None,
        content: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword title: Filename by which the binary data will be saved.
        :paramtype title: str
        :keyword content_format: Either 'link' if content is provided via an HTTP link or the MIME type
         of the Base64-encoded binary data provided in the 'content' property.
        :paramtype content_format: str
        :keyword content: An HTTP link or Base64-encoded binary data.
        :paramtype content: str
        """
        super(IssueAttachmentContract, self).__init__(**kwargs)
        self.title = title
        self.content_format = content_format
        self.content = content


class IssueCollection(msrest.serialization.Model):
    """Paged Issue list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Issue values.
    :vartype value: list[~azure.mgmt.apimanagement.models.IssueContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IssueContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IssueCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class IssueCommentCollection(msrest.serialization.Model):
    """Paged Issue Comment list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Issue Comment values.
    :vartype value: list[~azure.mgmt.apimanagement.models.IssueCommentContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IssueCommentContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IssueCommentCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class IssueCommentContract(Resource):
    """Issue Comment Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar text: Comment text.
    :vartype text: str
    :ivar created_date: Date and time when the comment was created.
    :vartype created_date: ~datetime.datetime
    :ivar user_id: A resource identifier for the user who left the comment.
    :vartype user_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'text': {'key': 'properties.text', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'user_id': {'key': 'properties.userId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        user_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword text: Comment text.
        :paramtype text: str
        :keyword created_date: Date and time when the comment was created.
        :paramtype created_date: ~datetime.datetime
        :keyword user_id: A resource identifier for the user who left the comment.
        :paramtype user_id: str
        """
        super(IssueCommentContract, self).__init__(**kwargs)
        self.text = text
        self.created_date = created_date
        self.user_id = user_id


class IssueContract(Resource):
    """Issue Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar title: The issue title.
    :vartype title: str
    :ivar description: Text describing the issue.
    :vartype description: str
    :ivar created_date: Date and time when the issue was created.
    :vartype created_date: ~datetime.datetime
    :ivar state: Status of the issue. Known values are: "proposed", "open", "removed", "resolved",
     "closed".
    :vartype state: str or ~azure.mgmt.apimanagement.models.State
    :ivar user_id: A resource identifier for the user created the issue.
    :vartype user_id: str
    :ivar api_id: A resource identifier for the API the issue was created for.
    :vartype api_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'user_id': {'key': 'properties.userId', 'type': 'str'},
        'api_id': {'key': 'properties.apiId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        state: Optional[Union[str, "_models.State"]] = None,
        user_id: Optional[str] = None,
        api_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword title: The issue title.
        :paramtype title: str
        :keyword description: Text describing the issue.
        :paramtype description: str
        :keyword created_date: Date and time when the issue was created.
        :paramtype created_date: ~datetime.datetime
        :keyword state: Status of the issue. Known values are: "proposed", "open", "removed",
         "resolved", "closed".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.State
        :keyword user_id: A resource identifier for the user created the issue.
        :paramtype user_id: str
        :keyword api_id: A resource identifier for the API the issue was created for.
        :paramtype api_id: str
        """
        super(IssueContract, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.created_date = created_date
        self.state = state
        self.user_id = user_id
        self.api_id = api_id


class LoggerCollection(msrest.serialization.Model):
    """Paged Logger list representation.

    :ivar value: Logger values.
    :vartype value: list[~azure.mgmt.apimanagement.models.LoggerContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[LoggerContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.LoggerContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Logger values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.LoggerContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(LoggerCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class LoggerContract(Resource):
    """Logger details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar logger_type: Logger type. Known values are: "azureEventHub", "applicationInsights".
    :vartype logger_type: str or ~azure.mgmt.apimanagement.models.LoggerType
    :ivar description: Logger description.
    :vartype description: str
    :ivar credentials: The name and SendRule connection string of the event hub for azureEventHub
     logger.
     Instrumentation key for applicationInsights logger.
    :vartype credentials: dict[str, str]
    :ivar is_buffered: Whether records are buffered in the logger before publishing. Default is
     assumed to be true.
    :vartype is_buffered: bool
    :ivar sampling: Sampling settings for an ApplicationInsights logger.
    :vartype sampling: ~azure.mgmt.apimanagement.models.LoggerSamplingContract
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'description': {'max_length': 256, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'logger_type': {'key': 'properties.loggerType', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'credentials': {'key': 'properties.credentials', 'type': '{str}'},
        'is_buffered': {'key': 'properties.isBuffered', 'type': 'bool'},
        'sampling': {'key': 'properties.sampling', 'type': 'LoggerSamplingContract'},
    }

    def __init__(
        self,
        *,
        logger_type: Optional[Union[str, "_models.LoggerType"]] = None,
        description: Optional[str] = None,
        credentials: Optional[Dict[str, str]] = None,
        is_buffered: Optional[bool] = None,
        sampling: Optional["_models.LoggerSamplingContract"] = None,
        **kwargs
    ):
        """
        :keyword logger_type: Logger type. Known values are: "azureEventHub", "applicationInsights".
        :paramtype logger_type: str or ~azure.mgmt.apimanagement.models.LoggerType
        :keyword description: Logger description.
        :paramtype description: str
        :keyword credentials: The name and SendRule connection string of the event hub for
         azureEventHub logger.
         Instrumentation key for applicationInsights logger.
        :paramtype credentials: dict[str, str]
        :keyword is_buffered: Whether records are buffered in the logger before publishing. Default is
         assumed to be true.
        :paramtype is_buffered: bool
        :keyword sampling: Sampling settings for an ApplicationInsights logger.
        :paramtype sampling: ~azure.mgmt.apimanagement.models.LoggerSamplingContract
        """
        super(LoggerContract, self).__init__(**kwargs)
        self.logger_type = logger_type
        self.description = description
        self.credentials = credentials
        self.is_buffered = is_buffered
        self.sampling = sampling


class LoggerSamplingContract(msrest.serialization.Model):
    """Sampling settings contract.

    :ivar sampling_type: Sampling type. Known values are: "fixed", "adaptive".
    :vartype sampling_type: str or ~azure.mgmt.apimanagement.models.SamplingType
    :ivar percentage: Rate of sampling for fixed-rate sampling.
    :vartype percentage: float
    :ivar max_telemetry_items_per_second: Target rate of telemetry items per second.
    :vartype max_telemetry_items_per_second: int
    :ivar evaluation_interval: Rate re-evaluation interval in ISO8601 format.
    :vartype evaluation_interval: ~datetime.timedelta
    :ivar percentage_decrease_timeout: Duration in ISO8601 format after which it's allowed to lower
     the sampling rate.
    :vartype percentage_decrease_timeout: ~datetime.timedelta
    :ivar percentage_increase_timeout: Duration in ISO8601 format after which it's allowed to
     increase the sampling rate.
    :vartype percentage_increase_timeout: ~datetime.timedelta
    :ivar min_percentage: Minimum allowed rate of sampling.
    :vartype min_percentage: float
    :ivar max_percentage: Maximum allowed rate of sampling.
    :vartype max_percentage: float
    :ivar moving_average_ratio: Moving average ration assigned to most recent value.
    :vartype moving_average_ratio: float
    :ivar initial_percentage: Initial sampling rate.
    :vartype initial_percentage: float
    """

    _attribute_map = {
        'sampling_type': {'key': 'properties.samplingType', 'type': 'str'},
        'percentage': {'key': 'properties.percentage', 'type': 'float'},
        'max_telemetry_items_per_second': {'key': 'properties.maxTelemetryItemsPerSecond', 'type': 'int'},
        'evaluation_interval': {'key': 'properties.evaluationInterval', 'type': 'duration'},
        'percentage_decrease_timeout': {'key': 'properties.percentageDecreaseTimeout', 'type': 'duration'},
        'percentage_increase_timeout': {'key': 'properties.percentageIncreaseTimeout', 'type': 'duration'},
        'min_percentage': {'key': 'properties.minPercentage', 'type': 'float'},
        'max_percentage': {'key': 'properties.maxPercentage', 'type': 'float'},
        'moving_average_ratio': {'key': 'properties.movingAverageRatio', 'type': 'float'},
        'initial_percentage': {'key': 'properties.initialPercentage', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        sampling_type: Optional[Union[str, "_models.SamplingType"]] = None,
        percentage: Optional[float] = None,
        max_telemetry_items_per_second: Optional[int] = None,
        evaluation_interval: Optional[datetime.timedelta] = None,
        percentage_decrease_timeout: Optional[datetime.timedelta] = None,
        percentage_increase_timeout: Optional[datetime.timedelta] = None,
        min_percentage: Optional[float] = None,
        max_percentage: Optional[float] = None,
        moving_average_ratio: Optional[float] = None,
        initial_percentage: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword sampling_type: Sampling type. Known values are: "fixed", "adaptive".
        :paramtype sampling_type: str or ~azure.mgmt.apimanagement.models.SamplingType
        :keyword percentage: Rate of sampling for fixed-rate sampling.
        :paramtype percentage: float
        :keyword max_telemetry_items_per_second: Target rate of telemetry items per second.
        :paramtype max_telemetry_items_per_second: int
        :keyword evaluation_interval: Rate re-evaluation interval in ISO8601 format.
        :paramtype evaluation_interval: ~datetime.timedelta
        :keyword percentage_decrease_timeout: Duration in ISO8601 format after which it's allowed to
         lower the sampling rate.
        :paramtype percentage_decrease_timeout: ~datetime.timedelta
        :keyword percentage_increase_timeout: Duration in ISO8601 format after which it's allowed to
         increase the sampling rate.
        :paramtype percentage_increase_timeout: ~datetime.timedelta
        :keyword min_percentage: Minimum allowed rate of sampling.
        :paramtype min_percentage: float
        :keyword max_percentage: Maximum allowed rate of sampling.
        :paramtype max_percentage: float
        :keyword moving_average_ratio: Moving average ration assigned to most recent value.
        :paramtype moving_average_ratio: float
        :keyword initial_percentage: Initial sampling rate.
        :paramtype initial_percentage: float
        """
        super(LoggerSamplingContract, self).__init__(**kwargs)
        self.sampling_type = sampling_type
        self.percentage = percentage
        self.max_telemetry_items_per_second = max_telemetry_items_per_second
        self.evaluation_interval = evaluation_interval
        self.percentage_decrease_timeout = percentage_decrease_timeout
        self.percentage_increase_timeout = percentage_increase_timeout
        self.min_percentage = min_percentage
        self.max_percentage = max_percentage
        self.moving_average_ratio = moving_average_ratio
        self.initial_percentage = initial_percentage


class LoggerUpdateContract(msrest.serialization.Model):
    """Logger update contract.

    :ivar logger_type: Logger type. Known values are: "azureEventHub", "applicationInsights".
    :vartype logger_type: str or ~azure.mgmt.apimanagement.models.LoggerType
    :ivar description: Logger description.
    :vartype description: str
    :ivar credentials: Logger credentials.
    :vartype credentials: dict[str, str]
    :ivar is_buffered: Whether records are buffered in the logger before publishing. Default is
     assumed to be true.
    :vartype is_buffered: bool
    """

    _attribute_map = {
        'logger_type': {'key': 'properties.loggerType', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'credentials': {'key': 'properties.credentials', 'type': '{str}'},
        'is_buffered': {'key': 'properties.isBuffered', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        logger_type: Optional[Union[str, "_models.LoggerType"]] = None,
        description: Optional[str] = None,
        credentials: Optional[Dict[str, str]] = None,
        is_buffered: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword logger_type: Logger type. Known values are: "azureEventHub", "applicationInsights".
        :paramtype logger_type: str or ~azure.mgmt.apimanagement.models.LoggerType
        :keyword description: Logger description.
        :paramtype description: str
        :keyword credentials: Logger credentials.
        :paramtype credentials: dict[str, str]
        :keyword is_buffered: Whether records are buffered in the logger before publishing. Default is
         assumed to be true.
        :paramtype is_buffered: bool
        """
        super(LoggerUpdateContract, self).__init__(**kwargs)
        self.logger_type = logger_type
        self.description = description
        self.credentials = credentials
        self.is_buffered = is_buffered


class NetworkStatusContract(msrest.serialization.Model):
    """Network Status details.

    All required parameters must be populated in order to send to Azure.

    :ivar dns_servers: Required. Gets the list of DNS servers IPV4 addresses.
    :vartype dns_servers: list[str]
    :ivar connectivity_status: Required. Gets the list of Connectivity Status to the Resources on
     which the service depends upon.
    :vartype connectivity_status: list[~azure.mgmt.apimanagement.models.ConnectivityStatusContract]
    """

    _validation = {
        'dns_servers': {'required': True},
        'connectivity_status': {'required': True},
    }

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'connectivity_status': {'key': 'connectivityStatus', 'type': '[ConnectivityStatusContract]'},
    }

    def __init__(
        self,
        *,
        dns_servers: List[str],
        connectivity_status: List["_models.ConnectivityStatusContract"],
        **kwargs
    ):
        """
        :keyword dns_servers: Required. Gets the list of DNS servers IPV4 addresses.
        :paramtype dns_servers: list[str]
        :keyword connectivity_status: Required. Gets the list of Connectivity Status to the Resources
         on which the service depends upon.
        :paramtype connectivity_status:
         list[~azure.mgmt.apimanagement.models.ConnectivityStatusContract]
        """
        super(NetworkStatusContract, self).__init__(**kwargs)
        self.dns_servers = dns_servers
        self.connectivity_status = connectivity_status


class NotificationCollection(msrest.serialization.Model):
    """Paged Notification list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.NotificationContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NotificationContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.NotificationContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.NotificationContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(NotificationCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class NotificationContract(Resource):
    """Notification details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar title: Title of the Notification.
    :vartype title: str
    :ivar description: Description of the Notification.
    :vartype description: str
    :ivar recipients: Recipient Parameter values.
    :vartype recipients: ~azure.mgmt.apimanagement.models.RecipientsContractProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'title': {'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'recipients': {'key': 'properties.recipients', 'type': 'RecipientsContractProperties'},
    }

    def __init__(
        self,
        *,
        title: Optional[str] = None,
        description: Optional[str] = None,
        recipients: Optional["_models.RecipientsContractProperties"] = None,
        **kwargs
    ):
        """
        :keyword title: Title of the Notification.
        :paramtype title: str
        :keyword description: Description of the Notification.
        :paramtype description: str
        :keyword recipients: Recipient Parameter values.
        :paramtype recipients: ~azure.mgmt.apimanagement.models.RecipientsContractProperties
        """
        super(NotificationContract, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.recipients = recipients


class OAuth2AuthenticationSettingsContract(msrest.serialization.Model):
    """API OAuth2 Authentication settings details.

    :ivar authorization_server_id: OAuth authorization server identifier.
    :vartype authorization_server_id: str
    :ivar scope: operations scope.
    :vartype scope: str
    """

    _attribute_map = {
        'authorization_server_id': {'key': 'authorizationServerId', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        authorization_server_id: Optional[str] = None,
        scope: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword authorization_server_id: OAuth authorization server identifier.
        :paramtype authorization_server_id: str
        :keyword scope: operations scope.
        :paramtype scope: str
        """
        super(OAuth2AuthenticationSettingsContract, self).__init__(**kwargs)
        self.authorization_server_id = authorization_server_id
        self.scope = scope


class OpenIdConnectProviderCollection(msrest.serialization.Model):
    """Paged OpenIdProviders list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.OpenidConnectProviderContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OpenidConnectProviderContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.OpenidConnectProviderContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.OpenidConnectProviderContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(OpenIdConnectProviderCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OpenidConnectProviderContract(Resource):
    """OpenId Connect Provider details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar display_name: User-friendly OpenID Connect Provider name.
    :vartype display_name: str
    :ivar description: User-friendly description of OpenID Connect Provider.
    :vartype description: str
    :ivar metadata_endpoint: Metadata endpoint URI.
    :vartype metadata_endpoint: str
    :ivar client_id: Client ID of developer console which is the client application.
    :vartype client_id: str
    :ivar client_secret: Client Secret of developer console which is the client application.
    :vartype client_secret: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 50, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'metadata_endpoint': {'key': 'properties.metadataEndpoint', 'type': 'str'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        metadata_endpoint: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: User-friendly OpenID Connect Provider name.
        :paramtype display_name: str
        :keyword description: User-friendly description of OpenID Connect Provider.
        :paramtype description: str
        :keyword metadata_endpoint: Metadata endpoint URI.
        :paramtype metadata_endpoint: str
        :keyword client_id: Client ID of developer console which is the client application.
        :paramtype client_id: str
        :keyword client_secret: Client Secret of developer console which is the client application.
        :paramtype client_secret: str
        """
        super(OpenidConnectProviderContract, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.metadata_endpoint = metadata_endpoint
        self.client_id = client_id
        self.client_secret = client_secret


class OpenidConnectProviderUpdateContract(msrest.serialization.Model):
    """Parameters supplied to the Update OpenID Connect Provider operation.

    :ivar display_name: User-friendly OpenID Connect Provider name.
    :vartype display_name: str
    :ivar description: User-friendly description of OpenID Connect Provider.
    :vartype description: str
    :ivar metadata_endpoint: Metadata endpoint URI.
    :vartype metadata_endpoint: str
    :ivar client_id: Client ID of developer console which is the client application.
    :vartype client_id: str
    :ivar client_secret: Client Secret of developer console which is the client application.
    :vartype client_secret: str
    """

    _validation = {
        'display_name': {'max_length': 50, 'min_length': 0},
    }

    _attribute_map = {
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'metadata_endpoint': {'key': 'properties.metadataEndpoint', 'type': 'str'},
        'client_id': {'key': 'properties.clientId', 'type': 'str'},
        'client_secret': {'key': 'properties.clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        metadata_endpoint: Optional[str] = None,
        client_id: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: User-friendly OpenID Connect Provider name.
        :paramtype display_name: str
        :keyword description: User-friendly description of OpenID Connect Provider.
        :paramtype description: str
        :keyword metadata_endpoint: Metadata endpoint URI.
        :paramtype metadata_endpoint: str
        :keyword client_id: Client ID of developer console which is the client application.
        :paramtype client_id: str
        :keyword client_secret: Client Secret of developer console which is the client application.
        :paramtype client_secret: str
        """
        super(OpenidConnectProviderUpdateContract, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.metadata_endpoint = metadata_endpoint
        self.client_id = client_id
        self.client_secret = client_secret


class Operation(msrest.serialization.Model):
    """REST API operation.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The object that describes the operation.
    :vartype display: ~azure.mgmt.apimanagement.models.OperationDisplay
    :ivar origin: The operation origin.
    :vartype origin: str
    :ivar properties: The operation properties.
    :vartype properties: any
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        properties: Optional[Any] = None,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: The object that describes the operation.
        :paramtype display: ~azure.mgmt.apimanagement.models.OperationDisplay
        :keyword origin: The operation origin.
        :paramtype origin: str
        :keyword properties: The operation properties.
        :paramtype properties: any
        """
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display
        self.origin = origin
        self.properties = properties


class OperationCollection(msrest.serialization.Model):
    """Paged Operation list representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.OperationContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationContract(Resource):
    """Api Operation details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar template_parameters: Collection of URL template parameters.
    :vartype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar description: Description of the operation. May include HTML formatting tags.
    :vartype description: str
    :ivar request: An entity containing request details.
    :vartype request: ~azure.mgmt.apimanagement.models.RequestContract
    :ivar responses: Array of Operation responses.
    :vartype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
    :ivar policies: Operation Policies.
    :vartype policies: str
    :ivar display_name: Operation Name.
    :vartype display_name: str
    :ivar method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not
     limited by only them.
    :vartype method: str
    :ivar url_template: Relative URL template identifying the target resource for this operation.
     May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
    :vartype url_template: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'description': {'max_length': 1000, 'min_length': 0},
        'display_name': {'max_length': 300, 'min_length': 1},
        'url_template': {'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'template_parameters': {'key': 'properties.templateParameters', 'type': '[ParameterContract]'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'request': {'key': 'properties.request', 'type': 'RequestContract'},
        'responses': {'key': 'properties.responses', 'type': '[ResponseContract]'},
        'policies': {'key': 'properties.policies', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'method': {'key': 'properties.method', 'type': 'str'},
        'url_template': {'key': 'properties.urlTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        template_parameters: Optional[List["_models.ParameterContract"]] = None,
        description: Optional[str] = None,
        request: Optional["_models.RequestContract"] = None,
        responses: Optional[List["_models.ResponseContract"]] = None,
        policies: Optional[str] = None,
        display_name: Optional[str] = None,
        method: Optional[str] = None,
        url_template: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword template_parameters: Collection of URL template parameters.
        :paramtype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword description: Description of the operation. May include HTML formatting tags.
        :paramtype description: str
        :keyword request: An entity containing request details.
        :paramtype request: ~azure.mgmt.apimanagement.models.RequestContract
        :keyword responses: Array of Operation responses.
        :paramtype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
        :keyword policies: Operation Policies.
        :paramtype policies: str
        :keyword display_name: Operation Name.
        :paramtype display_name: str
        :keyword method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but
         not limited by only them.
        :paramtype method: str
        :keyword url_template: Relative URL template identifying the target resource for this
         operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
        :paramtype url_template: str
        """
        super(OperationContract, self).__init__(**kwargs)
        self.template_parameters = template_parameters
        self.description = description
        self.request = request
        self.responses = responses
        self.policies = policies
        self.display_name = display_name
        self.method = method
        self.url_template = url_template


class OperationEntityBaseContract(msrest.serialization.Model):
    """Api Operation Entity Base Contract details.

    :ivar template_parameters: Collection of URL template parameters.
    :vartype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar description: Description of the operation. May include HTML formatting tags.
    :vartype description: str
    :ivar request: An entity containing request details.
    :vartype request: ~azure.mgmt.apimanagement.models.RequestContract
    :ivar responses: Array of Operation responses.
    :vartype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
    :ivar policies: Operation Policies.
    :vartype policies: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 0},
    }

    _attribute_map = {
        'template_parameters': {'key': 'templateParameters', 'type': '[ParameterContract]'},
        'description': {'key': 'description', 'type': 'str'},
        'request': {'key': 'request', 'type': 'RequestContract'},
        'responses': {'key': 'responses', 'type': '[ResponseContract]'},
        'policies': {'key': 'policies', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        template_parameters: Optional[List["_models.ParameterContract"]] = None,
        description: Optional[str] = None,
        request: Optional["_models.RequestContract"] = None,
        responses: Optional[List["_models.ResponseContract"]] = None,
        policies: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword template_parameters: Collection of URL template parameters.
        :paramtype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword description: Description of the operation. May include HTML formatting tags.
        :paramtype description: str
        :keyword request: An entity containing request details.
        :paramtype request: ~azure.mgmt.apimanagement.models.RequestContract
        :keyword responses: Array of Operation responses.
        :paramtype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
        :keyword policies: Operation Policies.
        :paramtype policies: str
        """
        super(OperationEntityBaseContract, self).__init__(**kwargs)
        self.template_parameters = template_parameters
        self.description = description
        self.request = request
        self.responses = responses
        self.policies = policies


class OperationContractProperties(OperationEntityBaseContract):
    """Operation Contract Properties.

    All required parameters must be populated in order to send to Azure.

    :ivar template_parameters: Collection of URL template parameters.
    :vartype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar description: Description of the operation. May include HTML formatting tags.
    :vartype description: str
    :ivar request: An entity containing request details.
    :vartype request: ~azure.mgmt.apimanagement.models.RequestContract
    :ivar responses: Array of Operation responses.
    :vartype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
    :ivar policies: Operation Policies.
    :vartype policies: str
    :ivar display_name: Required. Operation Name.
    :vartype display_name: str
    :ivar method: Required. A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST
     but not limited by only them.
    :vartype method: str
    :ivar url_template: Required. Relative URL template identifying the target resource for this
     operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
    :vartype url_template: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 0},
        'display_name': {'required': True, 'max_length': 300, 'min_length': 1},
        'method': {'required': True},
        'url_template': {'required': True, 'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'template_parameters': {'key': 'templateParameters', 'type': '[ParameterContract]'},
        'description': {'key': 'description', 'type': 'str'},
        'request': {'key': 'request', 'type': 'RequestContract'},
        'responses': {'key': 'responses', 'type': '[ResponseContract]'},
        'policies': {'key': 'policies', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'url_template': {'key': 'urlTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        method: str,
        url_template: str,
        template_parameters: Optional[List["_models.ParameterContract"]] = None,
        description: Optional[str] = None,
        request: Optional["_models.RequestContract"] = None,
        responses: Optional[List["_models.ResponseContract"]] = None,
        policies: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword template_parameters: Collection of URL template parameters.
        :paramtype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword description: Description of the operation. May include HTML formatting tags.
        :paramtype description: str
        :keyword request: An entity containing request details.
        :paramtype request: ~azure.mgmt.apimanagement.models.RequestContract
        :keyword responses: Array of Operation responses.
        :paramtype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
        :keyword policies: Operation Policies.
        :paramtype policies: str
        :keyword display_name: Required. Operation Name.
        :paramtype display_name: str
        :keyword method: Required. A Valid HTTP Operation Method. Typical Http Methods like GET, PUT,
         POST but not limited by only them.
        :paramtype method: str
        :keyword url_template: Required. Relative URL template identifying the target resource for this
         operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
        :paramtype url_template: str
        """
        super(OperationContractProperties, self).__init__(template_parameters=template_parameters, description=description, request=request, responses=responses, policies=policies, **kwargs)
        self.display_name = display_name
        self.method = method
        self.url_template = url_template


class OperationDisplay(msrest.serialization.Model):
    """The object that describes the operation.

    :ivar provider: Friendly name of the resource provider.
    :vartype provider: str
    :ivar operation: Operation type: read, write, delete, listKeys/action, etc.
    :vartype operation: str
    :ivar resource: Resource type on which the operation is performed.
    :vartype resource: str
    :ivar description: Friendly name of the operation.
    :vartype description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        operation: Optional[str] = None,
        resource: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Friendly name of the resource provider.
        :paramtype provider: str
        :keyword operation: Operation type: read, write, delete, listKeys/action, etc.
        :paramtype operation: str
        :keyword resource: Resource type on which the operation is performed.
        :paramtype resource: str
        :keyword description: Friendly name of the operation.
        :paramtype description: str
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.operation = operation
        self.resource = resource
        self.description = description


class OperationEntityContract(Resource):
    """Operation Entity Contract Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar display_name: Operation name.
    :vartype display_name: str
    :ivar api_name: Api Name.
    :vartype api_name: str
    :ivar api_revision: Api Revision.
    :vartype api_revision: str
    :ivar api_version: Api Version.
    :vartype api_version: str
    :ivar description: Operation Description.
    :vartype description: str
    :ivar method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not
     limited by only them.
    :vartype method: str
    :ivar url_template: Relative URL template identifying the target resource for this operation.
     May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
    :vartype url_template: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'readonly': True},
        'api_name': {'readonly': True},
        'api_revision': {'readonly': True},
        'api_version': {'readonly': True},
        'description': {'readonly': True},
        'method': {'readonly': True},
        'url_template': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'api_name': {'key': 'properties.apiName', 'type': 'str'},
        'api_revision': {'key': 'properties.apiRevision', 'type': 'str'},
        'api_version': {'key': 'properties.apiVersion', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'method': {'key': 'properties.method', 'type': 'str'},
        'url_template': {'key': 'properties.urlTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationEntityContract, self).__init__(**kwargs)
        self.display_name = None
        self.api_name = None
        self.api_revision = None
        self.api_version = None
        self.description = None
        self.method = None
        self.url_template = None


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.apimanagement.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.Operation"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of operations supported by the resource provider.
        :paramtype value: list[~azure.mgmt.apimanagement.models.Operation]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationResultContract(msrest.serialization.Model):
    """Operation Result.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Operation result identifier.
    :vartype id: str
    :ivar status: Status of an async operation. Known values are: "Started", "InProgress",
     "Succeeded", "Failed".
    :vartype status: str or ~azure.mgmt.apimanagement.models.AsyncOperationStatus
    :ivar started: Start time of an async operation. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype started: ~datetime.datetime
    :ivar updated: Last update time of an async operation. The date conforms to the following
     format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype updated: ~datetime.datetime
    :ivar result_info: Optional result info.
    :vartype result_info: str
    :ivar error: Error Body Contract.
    :vartype error: ~azure.mgmt.apimanagement.models.ErrorResponse
    :ivar action_log: This property if only provided as part of the TenantConfiguration_Validate
     operation. It contains the log the entities which will be updated/created/deleted as part of
     the TenantConfiguration_Deploy operation.
    :vartype action_log: list[~azure.mgmt.apimanagement.models.OperationResultLogItemContract]
    """

    _validation = {
        'action_log': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'started': {'key': 'started', 'type': 'iso-8601'},
        'updated': {'key': 'updated', 'type': 'iso-8601'},
        'result_info': {'key': 'resultInfo', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ErrorResponse'},
        'action_log': {'key': 'actionLog', 'type': '[OperationResultLogItemContract]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "_models.AsyncOperationStatus"]] = None,
        started: Optional[datetime.datetime] = None,
        updated: Optional[datetime.datetime] = None,
        result_info: Optional[str] = None,
        error: Optional["_models.ErrorResponse"] = None,
        **kwargs
    ):
        """
        :keyword id: Operation result identifier.
        :paramtype id: str
        :keyword status: Status of an async operation. Known values are: "Started", "InProgress",
         "Succeeded", "Failed".
        :paramtype status: str or ~azure.mgmt.apimanagement.models.AsyncOperationStatus
        :keyword started: Start time of an async operation. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype started: ~datetime.datetime
        :keyword updated: Last update time of an async operation. The date conforms to the following
         format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype updated: ~datetime.datetime
        :keyword result_info: Optional result info.
        :paramtype result_info: str
        :keyword error: Error Body Contract.
        :paramtype error: ~azure.mgmt.apimanagement.models.ErrorResponse
        """
        super(OperationResultContract, self).__init__(**kwargs)
        self.id = id
        self.status = status
        self.started = started
        self.updated = updated
        self.result_info = result_info
        self.error = error
        self.action_log = None


class OperationResultLogItemContract(msrest.serialization.Model):
    """Log of the entity being created, updated or deleted.

    :ivar object_type: The type of entity contract.
    :vartype object_type: str
    :ivar action: Action like create/update/delete.
    :vartype action: str
    :ivar object_key: Identifier of the entity being created/updated/deleted.
    :vartype object_key: str
    """

    _attribute_map = {
        'object_type': {'key': 'objectType', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'object_key': {'key': 'objectKey', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        object_type: Optional[str] = None,
        action: Optional[str] = None,
        object_key: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword object_type: The type of entity contract.
        :paramtype object_type: str
        :keyword action: Action like create/update/delete.
        :paramtype action: str
        :keyword object_key: Identifier of the entity being created/updated/deleted.
        :paramtype object_key: str
        """
        super(OperationResultLogItemContract, self).__init__(**kwargs)
        self.object_type = object_type
        self.action = action
        self.object_key = object_key


class OperationUpdateContract(msrest.serialization.Model):
    """Api Operation Update Contract details.

    :ivar template_parameters: Collection of URL template parameters.
    :vartype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar description: Description of the operation. May include HTML formatting tags.
    :vartype description: str
    :ivar request: An entity containing request details.
    :vartype request: ~azure.mgmt.apimanagement.models.RequestContract
    :ivar responses: Array of Operation responses.
    :vartype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
    :ivar policies: Operation Policies.
    :vartype policies: str
    :ivar display_name: Operation Name.
    :vartype display_name: str
    :ivar method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not
     limited by only them.
    :vartype method: str
    :ivar url_template: Relative URL template identifying the target resource for this operation.
     May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
    :vartype url_template: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 0},
        'display_name': {'max_length': 300, 'min_length': 1},
        'url_template': {'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'template_parameters': {'key': 'properties.templateParameters', 'type': '[ParameterContract]'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'request': {'key': 'properties.request', 'type': 'RequestContract'},
        'responses': {'key': 'properties.responses', 'type': '[ResponseContract]'},
        'policies': {'key': 'properties.policies', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'method': {'key': 'properties.method', 'type': 'str'},
        'url_template': {'key': 'properties.urlTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        template_parameters: Optional[List["_models.ParameterContract"]] = None,
        description: Optional[str] = None,
        request: Optional["_models.RequestContract"] = None,
        responses: Optional[List["_models.ResponseContract"]] = None,
        policies: Optional[str] = None,
        display_name: Optional[str] = None,
        method: Optional[str] = None,
        url_template: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword template_parameters: Collection of URL template parameters.
        :paramtype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword description: Description of the operation. May include HTML formatting tags.
        :paramtype description: str
        :keyword request: An entity containing request details.
        :paramtype request: ~azure.mgmt.apimanagement.models.RequestContract
        :keyword responses: Array of Operation responses.
        :paramtype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
        :keyword policies: Operation Policies.
        :paramtype policies: str
        :keyword display_name: Operation Name.
        :paramtype display_name: str
        :keyword method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but
         not limited by only them.
        :paramtype method: str
        :keyword url_template: Relative URL template identifying the target resource for this
         operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
        :paramtype url_template: str
        """
        super(OperationUpdateContract, self).__init__(**kwargs)
        self.template_parameters = template_parameters
        self.description = description
        self.request = request
        self.responses = responses
        self.policies = policies
        self.display_name = display_name
        self.method = method
        self.url_template = url_template


class OperationUpdateContractProperties(OperationEntityBaseContract):
    """Operation Update Contract Properties.

    :ivar template_parameters: Collection of URL template parameters.
    :vartype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar description: Description of the operation. May include HTML formatting tags.
    :vartype description: str
    :ivar request: An entity containing request details.
    :vartype request: ~azure.mgmt.apimanagement.models.RequestContract
    :ivar responses: Array of Operation responses.
    :vartype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
    :ivar policies: Operation Policies.
    :vartype policies: str
    :ivar display_name: Operation Name.
    :vartype display_name: str
    :ivar method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not
     limited by only them.
    :vartype method: str
    :ivar url_template: Relative URL template identifying the target resource for this operation.
     May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
    :vartype url_template: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 0},
        'display_name': {'max_length': 300, 'min_length': 1},
        'url_template': {'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'template_parameters': {'key': 'templateParameters', 'type': '[ParameterContract]'},
        'description': {'key': 'description', 'type': 'str'},
        'request': {'key': 'request', 'type': 'RequestContract'},
        'responses': {'key': 'responses', 'type': '[ResponseContract]'},
        'policies': {'key': 'policies', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'url_template': {'key': 'urlTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        template_parameters: Optional[List["_models.ParameterContract"]] = None,
        description: Optional[str] = None,
        request: Optional["_models.RequestContract"] = None,
        responses: Optional[List["_models.ResponseContract"]] = None,
        policies: Optional[str] = None,
        display_name: Optional[str] = None,
        method: Optional[str] = None,
        url_template: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword template_parameters: Collection of URL template parameters.
        :paramtype template_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword description: Description of the operation. May include HTML formatting tags.
        :paramtype description: str
        :keyword request: An entity containing request details.
        :paramtype request: ~azure.mgmt.apimanagement.models.RequestContract
        :keyword responses: Array of Operation responses.
        :paramtype responses: list[~azure.mgmt.apimanagement.models.ResponseContract]
        :keyword policies: Operation Policies.
        :paramtype policies: str
        :keyword display_name: Operation Name.
        :paramtype display_name: str
        :keyword method: A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but
         not limited by only them.
        :paramtype method: str
        :keyword url_template: Relative URL template identifying the target resource for this
         operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}.
        :paramtype url_template: str
        """
        super(OperationUpdateContractProperties, self).__init__(template_parameters=template_parameters, description=description, request=request, responses=responses, policies=policies, **kwargs)
        self.display_name = display_name
        self.method = method
        self.url_template = url_template


class ParameterContract(msrest.serialization.Model):
    """Operation parameters details.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. Parameter name.
    :vartype name: str
    :ivar description: Parameter description.
    :vartype description: str
    :ivar type: Required. Parameter type.
    :vartype type: str
    :ivar default_value: Default parameter value.
    :vartype default_value: str
    :ivar required: whether parameter is required or not.
    :vartype required: bool
    :ivar values: Parameter values.
    :vartype values: list[str]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'str'},
        'required': {'key': 'required', 'type': 'bool'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: str,
        type: str,
        description: Optional[str] = None,
        default_value: Optional[str] = None,
        required: Optional[bool] = None,
        values: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword name: Required. Parameter name.
        :paramtype name: str
        :keyword description: Parameter description.
        :paramtype description: str
        :keyword type: Required. Parameter type.
        :paramtype type: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: str
        :keyword required: whether parameter is required or not.
        :paramtype required: bool
        :keyword values: Parameter values.
        :paramtype values: list[str]
        """
        super(ParameterContract, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.type = type
        self.default_value = default_value
        self.required = required
        self.values = values


class PolicyCollection(msrest.serialization.Model):
    """The response of the list policy operation.

    :ivar value: Policy Contract value.
    :vartype value: list[~azure.mgmt.apimanagement.models.PolicyContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PolicyContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PolicyContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Policy Contract value.
        :paramtype value: list[~azure.mgmt.apimanagement.models.PolicyContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(PolicyCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PolicyContract(Resource):
    """Policy Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar policy_content: Json escaped Xml Encoded contents of the Policy.
    :vartype policy_content: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'policy_content': {'key': 'properties.policyContent', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        policy_content: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword policy_content: Json escaped Xml Encoded contents of the Policy.
        :paramtype policy_content: str
        """
        super(PolicyContract, self).__init__(**kwargs)
        self.policy_content = policy_content


class PolicySnippetContract(msrest.serialization.Model):
    """Policy snippet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Snippet name.
    :vartype name: str
    :ivar content: Snippet content.
    :vartype content: str
    :ivar tool_tip: Snippet toolTip.
    :vartype tool_tip: str
    :ivar scope: Binary OR value of the Snippet scope.
    :vartype scope: int
    """

    _validation = {
        'name': {'readonly': True},
        'content': {'readonly': True},
        'tool_tip': {'readonly': True},
        'scope': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'tool_tip': {'key': 'toolTip', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PolicySnippetContract, self).__init__(**kwargs)
        self.name = None
        self.content = None
        self.tool_tip = None
        self.scope = None


class PolicySnippetsCollection(msrest.serialization.Model):
    """The response of the list policy snippets operation.

    :ivar value: Policy snippet value.
    :vartype value: list[~azure.mgmt.apimanagement.models.PolicySnippetContract]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PolicySnippetContract]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PolicySnippetContract"]] = None,
        **kwargs
    ):
        """
        :keyword value: Policy snippet value.
        :paramtype value: list[~azure.mgmt.apimanagement.models.PolicySnippetContract]
        """
        super(PolicySnippetsCollection, self).__init__(**kwargs)
        self.value = value


class PortalDelegationSettings(Resource):
    """Delegation settings for a developer portal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar url: A delegation Url.
    :vartype url: str
    :ivar validation_key: A base64-encoded validation key to validate, that a request is coming
     from Azure API Management.
    :vartype validation_key: str
    :ivar subscriptions: Subscriptions delegation settings.
    :vartype subscriptions:
     ~azure.mgmt.apimanagement.models.SubscriptionsDelegationSettingsProperties
    :ivar user_registration: User registration delegation settings.
    :vartype user_registration:
     ~azure.mgmt.apimanagement.models.RegistrationDelegationSettingsProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'url': {'key': 'properties.url', 'type': 'str'},
        'validation_key': {'key': 'properties.validationKey', 'type': 'str'},
        'subscriptions': {'key': 'properties.subscriptions', 'type': 'SubscriptionsDelegationSettingsProperties'},
        'user_registration': {'key': 'properties.userRegistration', 'type': 'RegistrationDelegationSettingsProperties'},
    }

    def __init__(
        self,
        *,
        url: Optional[str] = None,
        validation_key: Optional[str] = None,
        subscriptions: Optional["_models.SubscriptionsDelegationSettingsProperties"] = None,
        user_registration: Optional["_models.RegistrationDelegationSettingsProperties"] = None,
        **kwargs
    ):
        """
        :keyword url: A delegation Url.
        :paramtype url: str
        :keyword validation_key: A base64-encoded validation key to validate, that a request is coming
         from Azure API Management.
        :paramtype validation_key: str
        :keyword subscriptions: Subscriptions delegation settings.
        :paramtype subscriptions:
         ~azure.mgmt.apimanagement.models.SubscriptionsDelegationSettingsProperties
        :keyword user_registration: User registration delegation settings.
        :paramtype user_registration:
         ~azure.mgmt.apimanagement.models.RegistrationDelegationSettingsProperties
        """
        super(PortalDelegationSettings, self).__init__(**kwargs)
        self.url = url
        self.validation_key = validation_key
        self.subscriptions = subscriptions
        self.user_registration = user_registration


class PortalSigninSettings(Resource):
    """Sign-In settings for the Developer Portal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar enabled: Redirect Anonymous users to the Sign-In page.
    :vartype enabled: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Redirect Anonymous users to the Sign-In page.
        :paramtype enabled: bool
        """
        super(PortalSigninSettings, self).__init__(**kwargs)
        self.enabled = enabled


class PortalSignupSettings(Resource):
    """Sign-Up settings for a developer portal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar enabled: Allow users to sign up on a developer portal.
    :vartype enabled: bool
    :ivar terms_of_service: Terms of service contract properties.
    :vartype terms_of_service: ~azure.mgmt.apimanagement.models.TermsOfServiceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'terms_of_service': {'key': 'properties.termsOfService', 'type': 'TermsOfServiceProperties'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        terms_of_service: Optional["_models.TermsOfServiceProperties"] = None,
        **kwargs
    ):
        """
        :keyword enabled: Allow users to sign up on a developer portal.
        :paramtype enabled: bool
        :keyword terms_of_service: Terms of service contract properties.
        :paramtype terms_of_service: ~azure.mgmt.apimanagement.models.TermsOfServiceProperties
        """
        super(PortalSignupSettings, self).__init__(**kwargs)
        self.enabled = enabled
        self.terms_of_service = terms_of_service


class ProductCollection(msrest.serialization.Model):
    """Paged Products list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ProductContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProductContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ProductContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.ProductContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(ProductCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProductContract(Resource):
    """Product details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Product description. May include HTML formatting tags.
    :vartype description: str
    :ivar terms: Product terms of use. Developers trying to subscribe to the product will be
     presented and required to accept these terms before they can complete the subscription process.
    :vartype terms: str
    :ivar subscription_required: Whether a product subscription is required for accessing APIs
     included in this product. If true, the product is referred to as "protected" and a valid
     subscription key is required for a request to an API included in the product to succeed. If
     false, the product is referred to as "open" and requests to an API included in the product can
     be made without a subscription key. If property is omitted when creating a new product it's
     value is assumed to be true.
    :vartype subscription_required: bool
    :ivar approval_required: whether subscription approval is required. If false, new subscriptions
     will be approved automatically enabling developers to call the product’s APIs immediately after
     subscribing. If true, administrators must manually approve the subscription before the
     developer can any of the product’s APIs. Can be present only if subscriptionRequired property
     is present and has a value of true.
    :vartype approval_required: bool
    :ivar subscriptions_limit: Whether the number of subscriptions a user can have to this product
     at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present
     only if subscriptionRequired property is present and has a value of true.
    :vartype subscriptions_limit: int
    :ivar state: whether product is published or not. Published products are discoverable by users
     of developer portal. Non published products are visible only to administrators. Default state
     of Product is notPublished. Known values are: "notPublished", "published".
    :vartype state: str or ~azure.mgmt.apimanagement.models.ProductState
    :ivar display_name: Product name.
    :vartype display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'description': {'max_length': 1000, 'min_length': 1},
        'display_name': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'terms': {'key': 'properties.terms', 'type': 'str'},
        'subscription_required': {'key': 'properties.subscriptionRequired', 'type': 'bool'},
        'approval_required': {'key': 'properties.approvalRequired', 'type': 'bool'},
        'subscriptions_limit': {'key': 'properties.subscriptionsLimit', 'type': 'int'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        terms: Optional[str] = None,
        subscription_required: Optional[bool] = None,
        approval_required: Optional[bool] = None,
        subscriptions_limit: Optional[int] = None,
        state: Optional[Union[str, "_models.ProductState"]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Product description. May include HTML formatting tags.
        :paramtype description: str
        :keyword terms: Product terms of use. Developers trying to subscribe to the product will be
         presented and required to accept these terms before they can complete the subscription process.
        :paramtype terms: str
        :keyword subscription_required: Whether a product subscription is required for accessing APIs
         included in this product. If true, the product is referred to as "protected" and a valid
         subscription key is required for a request to an API included in the product to succeed. If
         false, the product is referred to as "open" and requests to an API included in the product can
         be made without a subscription key. If property is omitted when creating a new product it's
         value is assumed to be true.
        :paramtype subscription_required: bool
        :keyword approval_required: whether subscription approval is required. If false, new
         subscriptions will be approved automatically enabling developers to call the product’s APIs
         immediately after subscribing. If true, administrators must manually approve the subscription
         before the developer can any of the product’s APIs. Can be present only if subscriptionRequired
         property is present and has a value of true.
        :paramtype approval_required: bool
        :keyword subscriptions_limit: Whether the number of subscriptions a user can have to this
         product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be
         present only if subscriptionRequired property is present and has a value of true.
        :paramtype subscriptions_limit: int
        :keyword state: whether product is published or not. Published products are discoverable by
         users of developer portal. Non published products are visible only to administrators. Default
         state of Product is notPublished. Known values are: "notPublished", "published".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.ProductState
        :keyword display_name: Product name.
        :paramtype display_name: str
        """
        super(ProductContract, self).__init__(**kwargs)
        self.description = description
        self.terms = terms
        self.subscription_required = subscription_required
        self.approval_required = approval_required
        self.subscriptions_limit = subscriptions_limit
        self.state = state
        self.display_name = display_name


class ProductEntityBaseParameters(msrest.serialization.Model):
    """Product Entity Base Parameters.

    :ivar description: Product description. May include HTML formatting tags.
    :vartype description: str
    :ivar terms: Product terms of use. Developers trying to subscribe to the product will be
     presented and required to accept these terms before they can complete the subscription process.
    :vartype terms: str
    :ivar subscription_required: Whether a product subscription is required for accessing APIs
     included in this product. If true, the product is referred to as "protected" and a valid
     subscription key is required for a request to an API included in the product to succeed. If
     false, the product is referred to as "open" and requests to an API included in the product can
     be made without a subscription key. If property is omitted when creating a new product it's
     value is assumed to be true.
    :vartype subscription_required: bool
    :ivar approval_required: whether subscription approval is required. If false, new subscriptions
     will be approved automatically enabling developers to call the product’s APIs immediately after
     subscribing. If true, administrators must manually approve the subscription before the
     developer can any of the product’s APIs. Can be present only if subscriptionRequired property
     is present and has a value of true.
    :vartype approval_required: bool
    :ivar subscriptions_limit: Whether the number of subscriptions a user can have to this product
     at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present
     only if subscriptionRequired property is present and has a value of true.
    :vartype subscriptions_limit: int
    :ivar state: whether product is published or not. Published products are discoverable by users
     of developer portal. Non published products are visible only to administrators. Default state
     of Product is notPublished. Known values are: "notPublished", "published".
    :vartype state: str or ~azure.mgmt.apimanagement.models.ProductState
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'terms': {'key': 'terms', 'type': 'str'},
        'subscription_required': {'key': 'subscriptionRequired', 'type': 'bool'},
        'approval_required': {'key': 'approvalRequired', 'type': 'bool'},
        'subscriptions_limit': {'key': 'subscriptionsLimit', 'type': 'int'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        terms: Optional[str] = None,
        subscription_required: Optional[bool] = None,
        approval_required: Optional[bool] = None,
        subscriptions_limit: Optional[int] = None,
        state: Optional[Union[str, "_models.ProductState"]] = None,
        **kwargs
    ):
        """
        :keyword description: Product description. May include HTML formatting tags.
        :paramtype description: str
        :keyword terms: Product terms of use. Developers trying to subscribe to the product will be
         presented and required to accept these terms before they can complete the subscription process.
        :paramtype terms: str
        :keyword subscription_required: Whether a product subscription is required for accessing APIs
         included in this product. If true, the product is referred to as "protected" and a valid
         subscription key is required for a request to an API included in the product to succeed. If
         false, the product is referred to as "open" and requests to an API included in the product can
         be made without a subscription key. If property is omitted when creating a new product it's
         value is assumed to be true.
        :paramtype subscription_required: bool
        :keyword approval_required: whether subscription approval is required. If false, new
         subscriptions will be approved automatically enabling developers to call the product’s APIs
         immediately after subscribing. If true, administrators must manually approve the subscription
         before the developer can any of the product’s APIs. Can be present only if subscriptionRequired
         property is present and has a value of true.
        :paramtype approval_required: bool
        :keyword subscriptions_limit: Whether the number of subscriptions a user can have to this
         product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be
         present only if subscriptionRequired property is present and has a value of true.
        :paramtype subscriptions_limit: int
        :keyword state: whether product is published or not. Published products are discoverable by
         users of developer portal. Non published products are visible only to administrators. Default
         state of Product is notPublished. Known values are: "notPublished", "published".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.ProductState
        """
        super(ProductEntityBaseParameters, self).__init__(**kwargs)
        self.description = description
        self.terms = terms
        self.subscription_required = subscription_required
        self.approval_required = approval_required
        self.subscriptions_limit = subscriptions_limit
        self.state = state


class ProductContractProperties(ProductEntityBaseParameters):
    """Product profile.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Product description. May include HTML formatting tags.
    :vartype description: str
    :ivar terms: Product terms of use. Developers trying to subscribe to the product will be
     presented and required to accept these terms before they can complete the subscription process.
    :vartype terms: str
    :ivar subscription_required: Whether a product subscription is required for accessing APIs
     included in this product. If true, the product is referred to as "protected" and a valid
     subscription key is required for a request to an API included in the product to succeed. If
     false, the product is referred to as "open" and requests to an API included in the product can
     be made without a subscription key. If property is omitted when creating a new product it's
     value is assumed to be true.
    :vartype subscription_required: bool
    :ivar approval_required: whether subscription approval is required. If false, new subscriptions
     will be approved automatically enabling developers to call the product’s APIs immediately after
     subscribing. If true, administrators must manually approve the subscription before the
     developer can any of the product’s APIs. Can be present only if subscriptionRequired property
     is present and has a value of true.
    :vartype approval_required: bool
    :ivar subscriptions_limit: Whether the number of subscriptions a user can have to this product
     at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present
     only if subscriptionRequired property is present and has a value of true.
    :vartype subscriptions_limit: int
    :ivar state: whether product is published or not. Published products are discoverable by users
     of developer portal. Non published products are visible only to administrators. Default state
     of Product is notPublished. Known values are: "notPublished", "published".
    :vartype state: str or ~azure.mgmt.apimanagement.models.ProductState
    :ivar display_name: Required. Product name.
    :vartype display_name: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 1},
        'display_name': {'required': True, 'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'terms': {'key': 'terms', 'type': 'str'},
        'subscription_required': {'key': 'subscriptionRequired', 'type': 'bool'},
        'approval_required': {'key': 'approvalRequired', 'type': 'bool'},
        'subscriptions_limit': {'key': 'subscriptionsLimit', 'type': 'int'},
        'state': {'key': 'state', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        terms: Optional[str] = None,
        subscription_required: Optional[bool] = None,
        approval_required: Optional[bool] = None,
        subscriptions_limit: Optional[int] = None,
        state: Optional[Union[str, "_models.ProductState"]] = None,
        **kwargs
    ):
        """
        :keyword description: Product description. May include HTML formatting tags.
        :paramtype description: str
        :keyword terms: Product terms of use. Developers trying to subscribe to the product will be
         presented and required to accept these terms before they can complete the subscription process.
        :paramtype terms: str
        :keyword subscription_required: Whether a product subscription is required for accessing APIs
         included in this product. If true, the product is referred to as "protected" and a valid
         subscription key is required for a request to an API included in the product to succeed. If
         false, the product is referred to as "open" and requests to an API included in the product can
         be made without a subscription key. If property is omitted when creating a new product it's
         value is assumed to be true.
        :paramtype subscription_required: bool
        :keyword approval_required: whether subscription approval is required. If false, new
         subscriptions will be approved automatically enabling developers to call the product’s APIs
         immediately after subscribing. If true, administrators must manually approve the subscription
         before the developer can any of the product’s APIs. Can be present only if subscriptionRequired
         property is present and has a value of true.
        :paramtype approval_required: bool
        :keyword subscriptions_limit: Whether the number of subscriptions a user can have to this
         product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be
         present only if subscriptionRequired property is present and has a value of true.
        :paramtype subscriptions_limit: int
        :keyword state: whether product is published or not. Published products are discoverable by
         users of developer portal. Non published products are visible only to administrators. Default
         state of Product is notPublished. Known values are: "notPublished", "published".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.ProductState
        :keyword display_name: Required. Product name.
        :paramtype display_name: str
        """
        super(ProductContractProperties, self).__init__(description=description, terms=terms, subscription_required=subscription_required, approval_required=approval_required, subscriptions_limit=subscriptions_limit, state=state, **kwargs)
        self.display_name = display_name


class ProductUpdateParameters(msrest.serialization.Model):
    """Product Update parameters.

    :ivar description: Product description. May include HTML formatting tags.
    :vartype description: str
    :ivar terms: Product terms of use. Developers trying to subscribe to the product will be
     presented and required to accept these terms before they can complete the subscription process.
    :vartype terms: str
    :ivar subscription_required: Whether a product subscription is required for accessing APIs
     included in this product. If true, the product is referred to as "protected" and a valid
     subscription key is required for a request to an API included in the product to succeed. If
     false, the product is referred to as "open" and requests to an API included in the product can
     be made without a subscription key. If property is omitted when creating a new product it's
     value is assumed to be true.
    :vartype subscription_required: bool
    :ivar approval_required: whether subscription approval is required. If false, new subscriptions
     will be approved automatically enabling developers to call the product’s APIs immediately after
     subscribing. If true, administrators must manually approve the subscription before the
     developer can any of the product’s APIs. Can be present only if subscriptionRequired property
     is present and has a value of true.
    :vartype approval_required: bool
    :ivar subscriptions_limit: Whether the number of subscriptions a user can have to this product
     at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present
     only if subscriptionRequired property is present and has a value of true.
    :vartype subscriptions_limit: int
    :ivar state: whether product is published or not. Published products are discoverable by users
     of developer portal. Non published products are visible only to administrators. Default state
     of Product is notPublished. Known values are: "notPublished", "published".
    :vartype state: str or ~azure.mgmt.apimanagement.models.ProductState
    :ivar display_name: Product name.
    :vartype display_name: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 1},
        'display_name': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'properties.description', 'type': 'str'},
        'terms': {'key': 'properties.terms', 'type': 'str'},
        'subscription_required': {'key': 'properties.subscriptionRequired', 'type': 'bool'},
        'approval_required': {'key': 'properties.approvalRequired', 'type': 'bool'},
        'subscriptions_limit': {'key': 'properties.subscriptionsLimit', 'type': 'int'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        terms: Optional[str] = None,
        subscription_required: Optional[bool] = None,
        approval_required: Optional[bool] = None,
        subscriptions_limit: Optional[int] = None,
        state: Optional[Union[str, "_models.ProductState"]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Product description. May include HTML formatting tags.
        :paramtype description: str
        :keyword terms: Product terms of use. Developers trying to subscribe to the product will be
         presented and required to accept these terms before they can complete the subscription process.
        :paramtype terms: str
        :keyword subscription_required: Whether a product subscription is required for accessing APIs
         included in this product. If true, the product is referred to as "protected" and a valid
         subscription key is required for a request to an API included in the product to succeed. If
         false, the product is referred to as "open" and requests to an API included in the product can
         be made without a subscription key. If property is omitted when creating a new product it's
         value is assumed to be true.
        :paramtype subscription_required: bool
        :keyword approval_required: whether subscription approval is required. If false, new
         subscriptions will be approved automatically enabling developers to call the product’s APIs
         immediately after subscribing. If true, administrators must manually approve the subscription
         before the developer can any of the product’s APIs. Can be present only if subscriptionRequired
         property is present and has a value of true.
        :paramtype approval_required: bool
        :keyword subscriptions_limit: Whether the number of subscriptions a user can have to this
         product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be
         present only if subscriptionRequired property is present and has a value of true.
        :paramtype subscriptions_limit: int
        :keyword state: whether product is published or not. Published products are discoverable by
         users of developer portal. Non published products are visible only to administrators. Default
         state of Product is notPublished. Known values are: "notPublished", "published".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.ProductState
        :keyword display_name: Product name.
        :paramtype display_name: str
        """
        super(ProductUpdateParameters, self).__init__(**kwargs)
        self.description = description
        self.terms = terms
        self.subscription_required = subscription_required
        self.approval_required = approval_required
        self.subscriptions_limit = subscriptions_limit
        self.state = state
        self.display_name = display_name


class ProductUpdateProperties(ProductEntityBaseParameters):
    """Parameters supplied to the Update Product operation.

    :ivar description: Product description. May include HTML formatting tags.
    :vartype description: str
    :ivar terms: Product terms of use. Developers trying to subscribe to the product will be
     presented and required to accept these terms before they can complete the subscription process.
    :vartype terms: str
    :ivar subscription_required: Whether a product subscription is required for accessing APIs
     included in this product. If true, the product is referred to as "protected" and a valid
     subscription key is required for a request to an API included in the product to succeed. If
     false, the product is referred to as "open" and requests to an API included in the product can
     be made without a subscription key. If property is omitted when creating a new product it's
     value is assumed to be true.
    :vartype subscription_required: bool
    :ivar approval_required: whether subscription approval is required. If false, new subscriptions
     will be approved automatically enabling developers to call the product’s APIs immediately after
     subscribing. If true, administrators must manually approve the subscription before the
     developer can any of the product’s APIs. Can be present only if subscriptionRequired property
     is present and has a value of true.
    :vartype approval_required: bool
    :ivar subscriptions_limit: Whether the number of subscriptions a user can have to this product
     at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present
     only if subscriptionRequired property is present and has a value of true.
    :vartype subscriptions_limit: int
    :ivar state: whether product is published or not. Published products are discoverable by users
     of developer portal. Non published products are visible only to administrators. Default state
     of Product is notPublished. Known values are: "notPublished", "published".
    :vartype state: str or ~azure.mgmt.apimanagement.models.ProductState
    :ivar display_name: Product name.
    :vartype display_name: str
    """

    _validation = {
        'description': {'max_length': 1000, 'min_length': 1},
        'display_name': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'terms': {'key': 'terms', 'type': 'str'},
        'subscription_required': {'key': 'subscriptionRequired', 'type': 'bool'},
        'approval_required': {'key': 'approvalRequired', 'type': 'bool'},
        'subscriptions_limit': {'key': 'subscriptionsLimit', 'type': 'int'},
        'state': {'key': 'state', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        terms: Optional[str] = None,
        subscription_required: Optional[bool] = None,
        approval_required: Optional[bool] = None,
        subscriptions_limit: Optional[int] = None,
        state: Optional[Union[str, "_models.ProductState"]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Product description. May include HTML formatting tags.
        :paramtype description: str
        :keyword terms: Product terms of use. Developers trying to subscribe to the product will be
         presented and required to accept these terms before they can complete the subscription process.
        :paramtype terms: str
        :keyword subscription_required: Whether a product subscription is required for accessing APIs
         included in this product. If true, the product is referred to as "protected" and a valid
         subscription key is required for a request to an API included in the product to succeed. If
         false, the product is referred to as "open" and requests to an API included in the product can
         be made without a subscription key. If property is omitted when creating a new product it's
         value is assumed to be true.
        :paramtype subscription_required: bool
        :keyword approval_required: whether subscription approval is required. If false, new
         subscriptions will be approved automatically enabling developers to call the product’s APIs
         immediately after subscribing. If true, administrators must manually approve the subscription
         before the developer can any of the product’s APIs. Can be present only if subscriptionRequired
         property is present and has a value of true.
        :paramtype approval_required: bool
        :keyword subscriptions_limit: Whether the number of subscriptions a user can have to this
         product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be
         present only if subscriptionRequired property is present and has a value of true.
        :paramtype subscriptions_limit: int
        :keyword state: whether product is published or not. Published products are discoverable by
         users of developer portal. Non published products are visible only to administrators. Default
         state of Product is notPublished. Known values are: "notPublished", "published".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.ProductState
        :keyword display_name: Product name.
        :paramtype display_name: str
        """
        super(ProductUpdateProperties, self).__init__(description=description, terms=terms, subscription_required=subscription_required, approval_required=approval_required, subscriptions_limit=subscriptions_limit, state=state, **kwargs)
        self.display_name = display_name


class PropertyCollection(msrest.serialization.Model):
    """Paged Property list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.PropertyContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PropertyContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PropertyContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.PropertyContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(PropertyCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PropertyContract(Resource):
    """Property details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar tags: A set of tags. Optional tags that when provided can be used to filter the property
     list.
    :vartype tags: list[str]
    :ivar secret: Determines whether the value is a secret and should be encrypted or not. Default
     value is false.
    :vartype secret: bool
    :ivar display_name: Unique name of Property. It may contain only letters, digits, period, dash,
     and underscore characters.
    :vartype display_name: str
    :ivar value: Value of the property. Can contain policy expressions. It may not be empty or
     consist only of whitespace.
    :vartype value: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tags': {'max_items': 32, 'min_items': 0},
        'display_name': {'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
        'value': {'max_length': 4096, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'properties.tags', 'type': '[str]'},
        'secret': {'key': 'properties.secret', 'type': 'bool'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'value': {'key': 'properties.value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        secret: Optional[bool] = None,
        display_name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Optional tags that when provided can be used to filter the
         property list.
        :paramtype tags: list[str]
        :keyword secret: Determines whether the value is a secret and should be encrypted or not.
         Default value is false.
        :paramtype secret: bool
        :keyword display_name: Unique name of Property. It may contain only letters, digits, period,
         dash, and underscore characters.
        :paramtype display_name: str
        :keyword value: Value of the property. Can contain policy expressions. It may not be empty or
         consist only of whitespace.
        :paramtype value: str
        """
        super(PropertyContract, self).__init__(**kwargs)
        self.tags = tags
        self.secret = secret
        self.display_name = display_name
        self.value = value


class PropertyEntityBaseParameters(msrest.serialization.Model):
    """Property Entity Base Parameters set.

    :ivar tags: A set of tags. Optional tags that when provided can be used to filter the property
     list.
    :vartype tags: list[str]
    :ivar secret: Determines whether the value is a secret and should be encrypted or not. Default
     value is false.
    :vartype secret: bool
    """

    _validation = {
        'tags': {'max_items': 32, 'min_items': 0},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
        'secret': {'key': 'secret', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        secret: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Optional tags that when provided can be used to filter the
         property list.
        :paramtype tags: list[str]
        :keyword secret: Determines whether the value is a secret and should be encrypted or not.
         Default value is false.
        :paramtype secret: bool
        """
        super(PropertyEntityBaseParameters, self).__init__(**kwargs)
        self.tags = tags
        self.secret = secret


class PropertyContractProperties(PropertyEntityBaseParameters):
    """Property Contract properties.

    All required parameters must be populated in order to send to Azure.

    :ivar tags: A set of tags. Optional tags that when provided can be used to filter the property
     list.
    :vartype tags: list[str]
    :ivar secret: Determines whether the value is a secret and should be encrypted or not. Default
     value is false.
    :vartype secret: bool
    :ivar display_name: Required. Unique name of Property. It may contain only letters, digits,
     period, dash, and underscore characters.
    :vartype display_name: str
    :ivar value: Required. Value of the property. Can contain policy expressions. It may not be
     empty or consist only of whitespace.
    :vartype value: str
    """

    _validation = {
        'tags': {'max_items': 32, 'min_items': 0},
        'display_name': {'required': True, 'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
        'value': {'required': True, 'max_length': 4096, 'min_length': 1},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
        'secret': {'key': 'secret', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        value: str,
        tags: Optional[List[str]] = None,
        secret: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Optional tags that when provided can be used to filter the
         property list.
        :paramtype tags: list[str]
        :keyword secret: Determines whether the value is a secret and should be encrypted or not.
         Default value is false.
        :paramtype secret: bool
        :keyword display_name: Required. Unique name of Property. It may contain only letters, digits,
         period, dash, and underscore characters.
        :paramtype display_name: str
        :keyword value: Required. Value of the property. Can contain policy expressions. It may not be
         empty or consist only of whitespace.
        :paramtype value: str
        """
        super(PropertyContractProperties, self).__init__(tags=tags, secret=secret, **kwargs)
        self.display_name = display_name
        self.value = value


class PropertyUpdateParameterProperties(PropertyEntityBaseParameters):
    """Property Contract properties.

    :ivar tags: A set of tags. Optional tags that when provided can be used to filter the property
     list.
    :vartype tags: list[str]
    :ivar secret: Determines whether the value is a secret and should be encrypted or not. Default
     value is false.
    :vartype secret: bool
    :ivar display_name: Unique name of Property. It may contain only letters, digits, period, dash,
     and underscore characters.
    :vartype display_name: str
    :ivar value: Value of the property. Can contain policy expressions. It may not be empty or
     consist only of whitespace.
    :vartype value: str
    """

    _validation = {
        'tags': {'max_items': 32, 'min_items': 0},
        'display_name': {'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
        'value': {'max_length': 4096, 'min_length': 1},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '[str]'},
        'secret': {'key': 'secret', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        secret: Optional[bool] = None,
        display_name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Optional tags that when provided can be used to filter the
         property list.
        :paramtype tags: list[str]
        :keyword secret: Determines whether the value is a secret and should be encrypted or not.
         Default value is false.
        :paramtype secret: bool
        :keyword display_name: Unique name of Property. It may contain only letters, digits, period,
         dash, and underscore characters.
        :paramtype display_name: str
        :keyword value: Value of the property. Can contain policy expressions. It may not be empty or
         consist only of whitespace.
        :paramtype value: str
        """
        super(PropertyUpdateParameterProperties, self).__init__(tags=tags, secret=secret, **kwargs)
        self.display_name = display_name
        self.value = value


class PropertyUpdateParameters(msrest.serialization.Model):
    """Property update Parameters.

    :ivar tags: A set of tags. Optional tags that when provided can be used to filter the property
     list.
    :vartype tags: list[str]
    :ivar secret: Determines whether the value is a secret and should be encrypted or not. Default
     value is false.
    :vartype secret: bool
    :ivar display_name: Unique name of Property. It may contain only letters, digits, period, dash,
     and underscore characters.
    :vartype display_name: str
    :ivar value: Value of the property. Can contain policy expressions. It may not be empty or
     consist only of whitespace.
    :vartype value: str
    """

    _validation = {
        'tags': {'max_items': 32, 'min_items': 0},
        'display_name': {'max_length': 256, 'min_length': 1, 'pattern': r'^[A-Za-z0-9-._]+$'},
        'value': {'max_length': 4096, 'min_length': 1},
    }

    _attribute_map = {
        'tags': {'key': 'properties.tags', 'type': '[str]'},
        'secret': {'key': 'properties.secret', 'type': 'bool'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'value': {'key': 'properties.value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List[str]] = None,
        secret: Optional[bool] = None,
        display_name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Optional tags that when provided can be used to filter the
         property list.
        :paramtype tags: list[str]
        :keyword secret: Determines whether the value is a secret and should be encrypted or not.
         Default value is false.
        :paramtype secret: bool
        :keyword display_name: Unique name of Property. It may contain only letters, digits, period,
         dash, and underscore characters.
        :paramtype display_name: str
        :keyword value: Value of the property. Can contain policy expressions. It may not be empty or
         consist only of whitespace.
        :paramtype value: str
        """
        super(PropertyUpdateParameters, self).__init__(**kwargs)
        self.tags = tags
        self.secret = secret
        self.display_name = display_name
        self.value = value


class QuotaCounterCollection(msrest.serialization.Model):
    """Paged Quota Counter list representation.

    :ivar value: Quota counter values.
    :vartype value: list[~azure.mgmt.apimanagement.models.QuotaCounterContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[QuotaCounterContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.QuotaCounterContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Quota counter values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.QuotaCounterContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(QuotaCounterCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class QuotaCounterContract(msrest.serialization.Model):
    """Quota counter details.

    All required parameters must be populated in order to send to Azure.

    :ivar counter_key: Required. The Key value of the Counter. Must not be empty.
    :vartype counter_key: str
    :ivar period_key: Required. Identifier of the Period for which the counter was collected. Must
     not be empty.
    :vartype period_key: str
    :ivar period_start_time: Required. The date of the start of Counter Period. The date conforms
     to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype period_start_time: ~datetime.datetime
    :ivar period_end_time: Required. The date of the end of Counter Period. The date conforms to
     the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype period_end_time: ~datetime.datetime
    :ivar value: Quota Value Properties.
    :vartype value: ~azure.mgmt.apimanagement.models.QuotaCounterValueContractProperties
    """

    _validation = {
        'counter_key': {'required': True, 'min_length': 1},
        'period_key': {'required': True, 'min_length': 1},
        'period_start_time': {'required': True},
        'period_end_time': {'required': True},
    }

    _attribute_map = {
        'counter_key': {'key': 'counterKey', 'type': 'str'},
        'period_key': {'key': 'periodKey', 'type': 'str'},
        'period_start_time': {'key': 'periodStartTime', 'type': 'iso-8601'},
        'period_end_time': {'key': 'periodEndTime', 'type': 'iso-8601'},
        'value': {'key': 'Value', 'type': 'QuotaCounterValueContractProperties'},
    }

    def __init__(
        self,
        *,
        counter_key: str,
        period_key: str,
        period_start_time: datetime.datetime,
        period_end_time: datetime.datetime,
        value: Optional["_models.QuotaCounterValueContractProperties"] = None,
        **kwargs
    ):
        """
        :keyword counter_key: Required. The Key value of the Counter. Must not be empty.
        :paramtype counter_key: str
        :keyword period_key: Required. Identifier of the Period for which the counter was collected.
         Must not be empty.
        :paramtype period_key: str
        :keyword period_start_time: Required. The date of the start of Counter Period. The date
         conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601
         standard.
        :paramtype period_start_time: ~datetime.datetime
        :keyword period_end_time: Required. The date of the end of Counter Period. The date conforms to
         the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype period_end_time: ~datetime.datetime
        :keyword value: Quota Value Properties.
        :paramtype value: ~azure.mgmt.apimanagement.models.QuotaCounterValueContractProperties
        """
        super(QuotaCounterContract, self).__init__(**kwargs)
        self.counter_key = counter_key
        self.period_key = period_key
        self.period_start_time = period_start_time
        self.period_end_time = period_end_time
        self.value = value


class QuotaCounterValueContract(msrest.serialization.Model):
    """Quota counter value details.

    :ivar calls_count: Number of times Counter was called.
    :vartype calls_count: int
    :ivar kb_transferred: Data Transferred in KiloBytes.
    :vartype kb_transferred: float
    """

    _attribute_map = {
        'calls_count': {'key': 'value.callsCount', 'type': 'int'},
        'kb_transferred': {'key': 'value.kbTransferred', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        calls_count: Optional[int] = None,
        kb_transferred: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword calls_count: Number of times Counter was called.
        :paramtype calls_count: int
        :keyword kb_transferred: Data Transferred in KiloBytes.
        :paramtype kb_transferred: float
        """
        super(QuotaCounterValueContract, self).__init__(**kwargs)
        self.calls_count = calls_count
        self.kb_transferred = kb_transferred


class QuotaCounterValueContractProperties(msrest.serialization.Model):
    """Quota counter value details.

    :ivar calls_count: Number of times Counter was called.
    :vartype calls_count: int
    :ivar kb_transferred: Data Transferred in KiloBytes.
    :vartype kb_transferred: float
    """

    _attribute_map = {
        'calls_count': {'key': 'callsCount', 'type': 'int'},
        'kb_transferred': {'key': 'kbTransferred', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        calls_count: Optional[int] = None,
        kb_transferred: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword calls_count: Number of times Counter was called.
        :paramtype calls_count: int
        :keyword kb_transferred: Data Transferred in KiloBytes.
        :paramtype kb_transferred: float
        """
        super(QuotaCounterValueContractProperties, self).__init__(**kwargs)
        self.calls_count = calls_count
        self.kb_transferred = kb_transferred


class RecipientEmailCollection(msrest.serialization.Model):
    """Paged Recipient User list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.RecipientEmailContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RecipientEmailContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.RecipientEmailContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.RecipientEmailContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(RecipientEmailCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class RecipientEmailContract(Resource):
    """Recipient Email details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar email: User Email subscribed to notification.
    :vartype email: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'email': {'key': 'properties.email', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        email: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword email: User Email subscribed to notification.
        :paramtype email: str
        """
        super(RecipientEmailContract, self).__init__(**kwargs)
        self.email = email


class RecipientsContractProperties(msrest.serialization.Model):
    """Notification Parameter contract.

    :ivar emails: List of Emails subscribed for the notification.
    :vartype emails: list[str]
    :ivar users: List of Users subscribed for the notification.
    :vartype users: list[str]
    """

    _attribute_map = {
        'emails': {'key': 'emails', 'type': '[str]'},
        'users': {'key': 'users', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        emails: Optional[List[str]] = None,
        users: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword emails: List of Emails subscribed for the notification.
        :paramtype emails: list[str]
        :keyword users: List of Users subscribed for the notification.
        :paramtype users: list[str]
        """
        super(RecipientsContractProperties, self).__init__(**kwargs)
        self.emails = emails
        self.users = users


class RecipientUserCollection(msrest.serialization.Model):
    """Paged Recipient User list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.RecipientUserContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RecipientUserContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.RecipientUserContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.RecipientUserContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(RecipientUserCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class RecipientUserContract(Resource):
    """Recipient User details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar user_id: API Management UserId subscribed to notification.
    :vartype user_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_id': {'key': 'properties.userId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword user_id: API Management UserId subscribed to notification.
        :paramtype user_id: str
        """
        super(RecipientUserContract, self).__init__(**kwargs)
        self.user_id = user_id


class RegionContract(msrest.serialization.Model):
    """Region profile.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Region name.
    :vartype name: str
    :ivar is_master_region: whether Region is the master region.
    :vartype is_master_region: bool
    :ivar is_deleted: whether Region is deleted.
    :vartype is_deleted: bool
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_master_region': {'key': 'isMasterRegion', 'type': 'bool'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        is_master_region: Optional[bool] = None,
        is_deleted: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword is_master_region: whether Region is the master region.
        :paramtype is_master_region: bool
        :keyword is_deleted: whether Region is deleted.
        :paramtype is_deleted: bool
        """
        super(RegionContract, self).__init__(**kwargs)
        self.name = None
        self.is_master_region = is_master_region
        self.is_deleted = is_deleted


class RegionListResult(msrest.serialization.Model):
    """Lists Regions operation response details.

    :ivar value: Lists of Regions.
    :vartype value: list[~azure.mgmt.apimanagement.models.RegionContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RegionContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.RegionContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Lists of Regions.
        :paramtype value: list[~azure.mgmt.apimanagement.models.RegionContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(RegionListResult, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class RegistrationDelegationSettingsProperties(msrest.serialization.Model):
    """User registration delegation settings properties.

    :ivar enabled: Enable or disable delegation for user registration.
    :vartype enabled: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Enable or disable delegation for user registration.
        :paramtype enabled: bool
        """
        super(RegistrationDelegationSettingsProperties, self).__init__(**kwargs)
        self.enabled = enabled


class ReportCollection(msrest.serialization.Model):
    """Paged Report records list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.ReportRecordContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ReportRecordContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ReportRecordContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.ReportRecordContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(ReportCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class ReportRecordContract(msrest.serialization.Model):
    """Report data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name depending on report endpoint specifies product, API, operation or developer
     name.
    :vartype name: str
    :ivar timestamp: Start of aggregation period. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype timestamp: ~datetime.datetime
    :ivar interval: Length of aggregation period.  Interval must be multiple of 15 minutes and may
     not be zero. The value should be in ISO 8601 format
     (http://en.wikipedia.org/wiki/ISO_8601#Durations).
    :vartype interval: str
    :ivar country: Country to which this record data is related.
    :vartype country: str
    :ivar region: Country region to which this record data is related.
    :vartype region: str
    :ivar zip: Zip code to which this record data is related.
    :vartype zip: str
    :ivar user_id: User identifier path. /users/{userId}.
    :vartype user_id: str
    :ivar product_id: Product identifier path. /products/{productId}.
    :vartype product_id: str
    :ivar api_id: API identifier path. /apis/{apiId}.
    :vartype api_id: str
    :ivar operation_id: Operation identifier path. /apis/{apiId}/operations/{operationId}.
    :vartype operation_id: str
    :ivar api_region: API region identifier.
    :vartype api_region: str
    :ivar subscription_id: Subscription identifier path. /subscriptions/{subscriptionId}.
    :vartype subscription_id: str
    :ivar call_count_success: Number of successful calls. This includes calls returning
     HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect.
    :vartype call_count_success: int
    :ivar call_count_blocked: Number of calls blocked due to invalid credentials. This includes
     calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and
     HttpStatusCode.TooManyRequests.
    :vartype call_count_blocked: int
    :ivar call_count_failed: Number of calls failed due to proxy or backend errors. This includes
     calls returning HttpStatusCode.BadRequest(400) and any Code between
     HttpStatusCode.InternalServerError (500) and 600.
    :vartype call_count_failed: int
    :ivar call_count_other: Number of other calls.
    :vartype call_count_other: int
    :ivar call_count_total: Total number of calls.
    :vartype call_count_total: int
    :ivar bandwidth: Bandwidth consumed.
    :vartype bandwidth: long
    :ivar cache_hit_count: Number of times when content was served from cache policy.
    :vartype cache_hit_count: int
    :ivar cache_miss_count: Number of times content was fetched from backend.
    :vartype cache_miss_count: int
    :ivar api_time_avg: Average time it took to process request.
    :vartype api_time_avg: float
    :ivar api_time_min: Minimum time it took to process request.
    :vartype api_time_min: float
    :ivar api_time_max: Maximum time it took to process request.
    :vartype api_time_max: float
    :ivar service_time_avg: Average time it took to process request on backend.
    :vartype service_time_avg: float
    :ivar service_time_min: Minimum time it took to process request on backend.
    :vartype service_time_min: float
    :ivar service_time_max: Maximum time it took to process request on backend.
    :vartype service_time_max: float
    """

    _validation = {
        'user_id': {'readonly': True},
        'product_id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'interval': {'key': 'interval', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'zip': {'key': 'zip', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'product_id': {'key': 'productId', 'type': 'str'},
        'api_id': {'key': 'apiId', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'api_region': {'key': 'apiRegion', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'call_count_success': {'key': 'callCountSuccess', 'type': 'int'},
        'call_count_blocked': {'key': 'callCountBlocked', 'type': 'int'},
        'call_count_failed': {'key': 'callCountFailed', 'type': 'int'},
        'call_count_other': {'key': 'callCountOther', 'type': 'int'},
        'call_count_total': {'key': 'callCountTotal', 'type': 'int'},
        'bandwidth': {'key': 'bandwidth', 'type': 'long'},
        'cache_hit_count': {'key': 'cacheHitCount', 'type': 'int'},
        'cache_miss_count': {'key': 'cacheMissCount', 'type': 'int'},
        'api_time_avg': {'key': 'apiTimeAvg', 'type': 'float'},
        'api_time_min': {'key': 'apiTimeMin', 'type': 'float'},
        'api_time_max': {'key': 'apiTimeMax', 'type': 'float'},
        'service_time_avg': {'key': 'serviceTimeAvg', 'type': 'float'},
        'service_time_min': {'key': 'serviceTimeMin', 'type': 'float'},
        'service_time_max': {'key': 'serviceTimeMax', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        timestamp: Optional[datetime.datetime] = None,
        interval: Optional[str] = None,
        country: Optional[str] = None,
        region: Optional[str] = None,
        zip: Optional[str] = None,
        api_id: Optional[str] = None,
        operation_id: Optional[str] = None,
        api_region: Optional[str] = None,
        subscription_id: Optional[str] = None,
        call_count_success: Optional[int] = None,
        call_count_blocked: Optional[int] = None,
        call_count_failed: Optional[int] = None,
        call_count_other: Optional[int] = None,
        call_count_total: Optional[int] = None,
        bandwidth: Optional[int] = None,
        cache_hit_count: Optional[int] = None,
        cache_miss_count: Optional[int] = None,
        api_time_avg: Optional[float] = None,
        api_time_min: Optional[float] = None,
        api_time_max: Optional[float] = None,
        service_time_avg: Optional[float] = None,
        service_time_min: Optional[float] = None,
        service_time_max: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword name: Name depending on report endpoint specifies product, API, operation or developer
         name.
        :paramtype name: str
        :keyword timestamp: Start of aggregation period. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype timestamp: ~datetime.datetime
        :keyword interval: Length of aggregation period.  Interval must be multiple of 15 minutes and
         may not be zero. The value should be in ISO 8601 format
         (http://en.wikipedia.org/wiki/ISO_8601#Durations).
        :paramtype interval: str
        :keyword country: Country to which this record data is related.
        :paramtype country: str
        :keyword region: Country region to which this record data is related.
        :paramtype region: str
        :keyword zip: Zip code to which this record data is related.
        :paramtype zip: str
        :keyword api_id: API identifier path. /apis/{apiId}.
        :paramtype api_id: str
        :keyword operation_id: Operation identifier path. /apis/{apiId}/operations/{operationId}.
        :paramtype operation_id: str
        :keyword api_region: API region identifier.
        :paramtype api_region: str
        :keyword subscription_id: Subscription identifier path. /subscriptions/{subscriptionId}.
        :paramtype subscription_id: str
        :keyword call_count_success: Number of successful calls. This includes calls returning
         HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect.
        :paramtype call_count_success: int
        :keyword call_count_blocked: Number of calls blocked due to invalid credentials. This includes
         calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and
         HttpStatusCode.TooManyRequests.
        :paramtype call_count_blocked: int
        :keyword call_count_failed: Number of calls failed due to proxy or backend errors. This
         includes calls returning HttpStatusCode.BadRequest(400) and any Code between
         HttpStatusCode.InternalServerError (500) and 600.
        :paramtype call_count_failed: int
        :keyword call_count_other: Number of other calls.
        :paramtype call_count_other: int
        :keyword call_count_total: Total number of calls.
        :paramtype call_count_total: int
        :keyword bandwidth: Bandwidth consumed.
        :paramtype bandwidth: long
        :keyword cache_hit_count: Number of times when content was served from cache policy.
        :paramtype cache_hit_count: int
        :keyword cache_miss_count: Number of times content was fetched from backend.
        :paramtype cache_miss_count: int
        :keyword api_time_avg: Average time it took to process request.
        :paramtype api_time_avg: float
        :keyword api_time_min: Minimum time it took to process request.
        :paramtype api_time_min: float
        :keyword api_time_max: Maximum time it took to process request.
        :paramtype api_time_max: float
        :keyword service_time_avg: Average time it took to process request on backend.
        :paramtype service_time_avg: float
        :keyword service_time_min: Minimum time it took to process request on backend.
        :paramtype service_time_min: float
        :keyword service_time_max: Maximum time it took to process request on backend.
        :paramtype service_time_max: float
        """
        super(ReportRecordContract, self).__init__(**kwargs)
        self.name = name
        self.timestamp = timestamp
        self.interval = interval
        self.country = country
        self.region = region
        self.zip = zip
        self.user_id = None
        self.product_id = None
        self.api_id = api_id
        self.operation_id = operation_id
        self.api_region = api_region
        self.subscription_id = subscription_id
        self.call_count_success = call_count_success
        self.call_count_blocked = call_count_blocked
        self.call_count_failed = call_count_failed
        self.call_count_other = call_count_other
        self.call_count_total = call_count_total
        self.bandwidth = bandwidth
        self.cache_hit_count = cache_hit_count
        self.cache_miss_count = cache_miss_count
        self.api_time_avg = api_time_avg
        self.api_time_min = api_time_min
        self.api_time_max = api_time_max
        self.service_time_avg = service_time_avg
        self.service_time_min = service_time_min
        self.service_time_max = service_time_max


class RepresentationContract(msrest.serialization.Model):
    """Operation request/response representation details.

    All required parameters must be populated in order to send to Azure.

    :ivar content_type: Required. Specifies a registered or custom content type for this
     representation, e.g. application/xml.
    :vartype content_type: str
    :ivar sample: An example of the representation.
    :vartype sample: str
    :ivar schema_id: Schema identifier. Applicable only if 'contentType' value is neither
     'application/x-www-form-urlencoded' nor 'multipart/form-data'.
    :vartype schema_id: str
    :ivar type_name: Type name defined by the schema. Applicable only if 'contentType' value is
     neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
    :vartype type_name: str
    :ivar form_parameters: Collection of form parameters. Required if 'contentType' value is either
     'application/x-www-form-urlencoded' or 'multipart/form-data'..
    :vartype form_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    """

    _validation = {
        'content_type': {'required': True},
    }

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'sample': {'key': 'sample', 'type': 'str'},
        'schema_id': {'key': 'schemaId', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
        'form_parameters': {'key': 'formParameters', 'type': '[ParameterContract]'},
    }

    def __init__(
        self,
        *,
        content_type: str,
        sample: Optional[str] = None,
        schema_id: Optional[str] = None,
        type_name: Optional[str] = None,
        form_parameters: Optional[List["_models.ParameterContract"]] = None,
        **kwargs
    ):
        """
        :keyword content_type: Required. Specifies a registered or custom content type for this
         representation, e.g. application/xml.
        :paramtype content_type: str
        :keyword sample: An example of the representation.
        :paramtype sample: str
        :keyword schema_id: Schema identifier. Applicable only if 'contentType' value is neither
         'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        :paramtype schema_id: str
        :keyword type_name: Type name defined by the schema. Applicable only if 'contentType' value is
         neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
        :paramtype type_name: str
        :keyword form_parameters: Collection of form parameters. Required if 'contentType' value is
         either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
        :paramtype form_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        """
        super(RepresentationContract, self).__init__(**kwargs)
        self.content_type = content_type
        self.sample = sample
        self.schema_id = schema_id
        self.type_name = type_name
        self.form_parameters = form_parameters


class RequestContract(msrest.serialization.Model):
    """Operation request details.

    :ivar description: Operation request description.
    :vartype description: str
    :ivar query_parameters: Collection of operation request query parameters.
    :vartype query_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar headers: Collection of operation request headers.
    :vartype headers: list[~azure.mgmt.apimanagement.models.ParameterContract]
    :ivar representations: Collection of operation request representations.
    :vartype representations: list[~azure.mgmt.apimanagement.models.RepresentationContract]
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'query_parameters': {'key': 'queryParameters', 'type': '[ParameterContract]'},
        'headers': {'key': 'headers', 'type': '[ParameterContract]'},
        'representations': {'key': 'representations', 'type': '[RepresentationContract]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        query_parameters: Optional[List["_models.ParameterContract"]] = None,
        headers: Optional[List["_models.ParameterContract"]] = None,
        representations: Optional[List["_models.RepresentationContract"]] = None,
        **kwargs
    ):
        """
        :keyword description: Operation request description.
        :paramtype description: str
        :keyword query_parameters: Collection of operation request query parameters.
        :paramtype query_parameters: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword headers: Collection of operation request headers.
        :paramtype headers: list[~azure.mgmt.apimanagement.models.ParameterContract]
        :keyword representations: Collection of operation request representations.
        :paramtype representations: list[~azure.mgmt.apimanagement.models.RepresentationContract]
        """
        super(RequestContract, self).__init__(**kwargs)
        self.description = description
        self.query_parameters = query_parameters
        self.headers = headers
        self.representations = representations


class RequestReportCollection(msrest.serialization.Model):
    """Paged Report records list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.RequestReportRecordContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RequestReportRecordContract]'},
        'count': {'key': 'count', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.RequestReportRecordContract"]] = None,
        count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.RequestReportRecordContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        """
        super(RequestReportCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count


class RequestReportRecordContract(msrest.serialization.Model):
    """Request Report data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar api_id: API identifier path. /apis/{apiId}.
    :vartype api_id: str
    :ivar operation_id: Operation identifier path. /apis/{apiId}/operations/{operationId}.
    :vartype operation_id: str
    :ivar product_id: Product identifier path. /products/{productId}.
    :vartype product_id: str
    :ivar user_id: User identifier path. /users/{userId}.
    :vartype user_id: str
    :ivar method: The HTTP method associated with this request..
    :vartype method: str
    :ivar url: The full URL associated with this request.
    :vartype url: str
    :ivar ip_address: The client IP address associated with this request.
    :vartype ip_address: str
    :ivar backend_response_code: The HTTP status code received by the gateway as a result of
     forwarding this request to the backend.
    :vartype backend_response_code: str
    :ivar response_code: The HTTP status code returned by the gateway.
    :vartype response_code: int
    :ivar response_size: The size of the response returned by the gateway.
    :vartype response_size: int
    :ivar timestamp: The date and time when this request was received by the gateway in ISO 8601
     format.
    :vartype timestamp: ~datetime.datetime
    :ivar cache: Specifies if response cache was involved in generating the response. If the value
     is none, the cache was not used. If the value is hit, cached response was returned. If the
     value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by
     the backend.
    :vartype cache: str
    :ivar api_time: The total time it took to process this request.
    :vartype api_time: float
    :ivar service_time: he time it took to forward this request to the backend and get the response
     back.
    :vartype service_time: float
    :ivar api_region: Azure region where the gateway that processed this request is located.
    :vartype api_region: str
    :ivar subscription_id: Subscription identifier path. /subscriptions/{subscriptionId}.
    :vartype subscription_id: str
    :ivar request_id: Request Identifier.
    :vartype request_id: str
    :ivar request_size: The size of this request..
    :vartype request_size: int
    """

    _validation = {
        'product_id': {'readonly': True},
        'user_id': {'readonly': True},
    }

    _attribute_map = {
        'api_id': {'key': 'apiId', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'product_id': {'key': 'productId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'backend_response_code': {'key': 'backendResponseCode', 'type': 'str'},
        'response_code': {'key': 'responseCode', 'type': 'int'},
        'response_size': {'key': 'responseSize', 'type': 'int'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'cache': {'key': 'cache', 'type': 'str'},
        'api_time': {'key': 'apiTime', 'type': 'float'},
        'service_time': {'key': 'serviceTime', 'type': 'float'},
        'api_region': {'key': 'apiRegion', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'request_size': {'key': 'requestSize', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        api_id: Optional[str] = None,
        operation_id: Optional[str] = None,
        method: Optional[str] = None,
        url: Optional[str] = None,
        ip_address: Optional[str] = None,
        backend_response_code: Optional[str] = None,
        response_code: Optional[int] = None,
        response_size: Optional[int] = None,
        timestamp: Optional[datetime.datetime] = None,
        cache: Optional[str] = None,
        api_time: Optional[float] = None,
        service_time: Optional[float] = None,
        api_region: Optional[str] = None,
        subscription_id: Optional[str] = None,
        request_id: Optional[str] = None,
        request_size: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword api_id: API identifier path. /apis/{apiId}.
        :paramtype api_id: str
        :keyword operation_id: Operation identifier path. /apis/{apiId}/operations/{operationId}.
        :paramtype operation_id: str
        :keyword method: The HTTP method associated with this request..
        :paramtype method: str
        :keyword url: The full URL associated with this request.
        :paramtype url: str
        :keyword ip_address: The client IP address associated with this request.
        :paramtype ip_address: str
        :keyword backend_response_code: The HTTP status code received by the gateway as a result of
         forwarding this request to the backend.
        :paramtype backend_response_code: str
        :keyword response_code: The HTTP status code returned by the gateway.
        :paramtype response_code: int
        :keyword response_size: The size of the response returned by the gateway.
        :paramtype response_size: int
        :keyword timestamp: The date and time when this request was received by the gateway in ISO 8601
         format.
        :paramtype timestamp: ~datetime.datetime
        :keyword cache: Specifies if response cache was involved in generating the response. If the
         value is none, the cache was not used. If the value is hit, cached response was returned. If
         the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled
         by the backend.
        :paramtype cache: str
        :keyword api_time: The total time it took to process this request.
        :paramtype api_time: float
        :keyword service_time: he time it took to forward this request to the backend and get the
         response back.
        :paramtype service_time: float
        :keyword api_region: Azure region where the gateway that processed this request is located.
        :paramtype api_region: str
        :keyword subscription_id: Subscription identifier path. /subscriptions/{subscriptionId}.
        :paramtype subscription_id: str
        :keyword request_id: Request Identifier.
        :paramtype request_id: str
        :keyword request_size: The size of this request..
        :paramtype request_size: int
        """
        super(RequestReportRecordContract, self).__init__(**kwargs)
        self.api_id = api_id
        self.operation_id = operation_id
        self.product_id = None
        self.user_id = None
        self.method = method
        self.url = url
        self.ip_address = ip_address
        self.backend_response_code = backend_response_code
        self.response_code = response_code
        self.response_size = response_size
        self.timestamp = timestamp
        self.cache = cache
        self.api_time = api_time
        self.service_time = service_time
        self.api_region = api_region
        self.subscription_id = subscription_id
        self.request_id = request_id
        self.request_size = request_size


class ResponseContract(msrest.serialization.Model):
    """Operation response details.

    All required parameters must be populated in order to send to Azure.

    :ivar status_code: Required. Operation response HTTP status code.
    :vartype status_code: int
    :ivar description: Operation response description.
    :vartype description: str
    :ivar representations: Collection of operation response representations.
    :vartype representations: list[~azure.mgmt.apimanagement.models.RepresentationContract]
    :ivar headers: Collection of operation response headers.
    :vartype headers: list[~azure.mgmt.apimanagement.models.ParameterContract]
    """

    _validation = {
        'status_code': {'required': True},
    }

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'description': {'key': 'description', 'type': 'str'},
        'representations': {'key': 'representations', 'type': '[RepresentationContract]'},
        'headers': {'key': 'headers', 'type': '[ParameterContract]'},
    }

    def __init__(
        self,
        *,
        status_code: int,
        description: Optional[str] = None,
        representations: Optional[List["_models.RepresentationContract"]] = None,
        headers: Optional[List["_models.ParameterContract"]] = None,
        **kwargs
    ):
        """
        :keyword status_code: Required. Operation response HTTP status code.
        :paramtype status_code: int
        :keyword description: Operation response description.
        :paramtype description: str
        :keyword representations: Collection of operation response representations.
        :paramtype representations: list[~azure.mgmt.apimanagement.models.RepresentationContract]
        :keyword headers: Collection of operation response headers.
        :paramtype headers: list[~azure.mgmt.apimanagement.models.ParameterContract]
        """
        super(ResponseContract, self).__init__(**kwargs)
        self.status_code = status_code
        self.description = description
        self.representations = representations
        self.headers = headers


class SaveConfigurationParameter(msrest.serialization.Model):
    """Parameters supplied to the Save Tenant Configuration operation.

    All required parameters must be populated in order to send to Azure.

    :ivar branch: Required. The name of the Git branch in which to commit the current configuration
     snapshot.
    :vartype branch: str
    :ivar force: The value if true, the current configuration database is committed to the Git
     repository, even if the Git repository has newer changes that would be overwritten.
    :vartype force: bool
    """

    _validation = {
        'branch': {'required': True},
    }

    _attribute_map = {
        'branch': {'key': 'branch', 'type': 'str'},
        'force': {'key': 'force', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        branch: str,
        force: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword branch: Required. The name of the Git branch in which to commit the current
         configuration snapshot.
        :paramtype branch: str
        :keyword force: The value if true, the current configuration database is committed to the Git
         repository, even if the Git repository has newer changes that would be overwritten.
        :paramtype force: bool
        """
        super(SaveConfigurationParameter, self).__init__(**kwargs)
        self.branch = branch
        self.force = force


class SchemaCollection(msrest.serialization.Model):
    """The response of the list schema operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Api Schema Contract value.
    :vartype value: list[~azure.mgmt.apimanagement.models.SchemaContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SchemaContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(SchemaCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class SchemaContract(Resource):
    """Schema Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar content_type: Must be a valid a media type used in a Content-Type header as defined in
     the RFC 2616. Media type of the schema document (e.g. application/json, application/xml).
    :vartype content_type: str
    :ivar value: Json escaped string defining the document representing the Schema.
    :vartype value: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'content_type': {'key': 'properties.contentType', 'type': 'str'},
        'value': {'key': 'properties.document.value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_type: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword content_type: Must be a valid a media type used in a Content-Type header as defined in
         the RFC 2616. Media type of the schema document (e.g. application/json, application/xml).
        :paramtype content_type: str
        :keyword value: Json escaped string defining the document representing the Schema.
        :paramtype value: str
        """
        super(SchemaContract, self).__init__(**kwargs)
        self.content_type = content_type
        self.value = value


class SubscriptionCollection(msrest.serialization.Model):
    """Paged Subscriptions list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.SubscriptionContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SubscriptionContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.SubscriptionContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.SubscriptionContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(SubscriptionCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SubscriptionContract(Resource):
    """Subscription details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar user_id: The user resource identifier of the subscription owner. The value is a valid
     relative URL in the format of /users/{uid} where {uid} is a user identifier.
    :vartype user_id: str
    :ivar product_id: The product resource identifier of the subscribed product. The value is a
     valid relative URL in the format of /products/{productId} where {productId} is a product
     identifier.
    :vartype product_id: str
    :ivar display_name: The name of the subscription, or null if the subscription has no name.
    :vartype display_name: str
    :ivar state: Subscription state. Possible states are * active – the subscription is active, *
     suspended – the subscription is blocked, and the subscriber cannot call any APIs of the
     product, * submitted – the subscription request has been made by the developer, but has not yet
     been approved or rejected, * rejected – the subscription request has been denied by an
     administrator, * cancelled – the subscription has been cancelled by the developer or
     administrator, * expired – the subscription reached its expiration date and was deactivated.
     Known values are: "suspended", "active", "expired", "submitted", "rejected", "cancelled".
    :vartype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
    :ivar created_date: Subscription creation date. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype created_date: ~datetime.datetime
    :ivar start_date: Subscription activation date. The setting is for audit purposes only and the
     subscription is not automatically activated. The subscription lifecycle can be managed by using
     the ``state`` property. The date conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as
     specified by the ISO 8601 standard.
    :vartype start_date: ~datetime.datetime
    :ivar expiration_date: Subscription expiration date. The setting is for audit purposes only and
     the subscription is not automatically expired. The subscription lifecycle can be managed by
     using the ``state`` property. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype expiration_date: ~datetime.datetime
    :ivar end_date: Date when subscription was cancelled or expired. The setting is for audit
     purposes only and the subscription is not automatically cancelled. The subscription lifecycle
     can be managed by using the ``state`` property. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype end_date: ~datetime.datetime
    :ivar notification_date: Upcoming subscription expiration notification date. The date conforms
     to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype notification_date: ~datetime.datetime
    :ivar primary_key: Subscription primary key.
    :vartype primary_key: str
    :ivar secondary_key: Subscription secondary key.
    :vartype secondary_key: str
    :ivar state_comment: Optional subscription comment added by an administrator.
    :vartype state_comment: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 100, 'min_length': 0},
        'created_date': {'readonly': True},
        'primary_key': {'max_length': 256, 'min_length': 1},
        'secondary_key': {'max_length': 256, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_id': {'key': 'properties.userId', 'type': 'str'},
        'product_id': {'key': 'properties.productId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'start_date': {'key': 'properties.startDate', 'type': 'iso-8601'},
        'expiration_date': {'key': 'properties.expirationDate', 'type': 'iso-8601'},
        'end_date': {'key': 'properties.endDate', 'type': 'iso-8601'},
        'notification_date': {'key': 'properties.notificationDate', 'type': 'iso-8601'},
        'primary_key': {'key': 'properties.primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'properties.secondaryKey', 'type': 'str'},
        'state_comment': {'key': 'properties.stateComment', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        product_id: Optional[str] = None,
        display_name: Optional[str] = None,
        state: Optional[Union[str, "_models.SubscriptionState"]] = None,
        start_date: Optional[datetime.datetime] = None,
        expiration_date: Optional[datetime.datetime] = None,
        end_date: Optional[datetime.datetime] = None,
        notification_date: Optional[datetime.datetime] = None,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
        state_comment: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword user_id: The user resource identifier of the subscription owner. The value is a valid
         relative URL in the format of /users/{uid} where {uid} is a user identifier.
        :paramtype user_id: str
        :keyword product_id: The product resource identifier of the subscribed product. The value is a
         valid relative URL in the format of /products/{productId} where {productId} is a product
         identifier.
        :paramtype product_id: str
        :keyword display_name: The name of the subscription, or null if the subscription has no name.
        :paramtype display_name: str
        :keyword state: Subscription state. Possible states are * active – the subscription is active,
         * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the
         product, * submitted – the subscription request has been made by the developer, but has not yet
         been approved or rejected, * rejected – the subscription request has been denied by an
         administrator, * cancelled – the subscription has been cancelled by the developer or
         administrator, * expired – the subscription reached its expiration date and was deactivated.
         Known values are: "suspended", "active", "expired", "submitted", "rejected", "cancelled".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
        :keyword start_date: Subscription activation date. The setting is for audit purposes only and
         the subscription is not automatically activated. The subscription lifecycle can be managed by
         using the ``state`` property. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype start_date: ~datetime.datetime
        :keyword expiration_date: Subscription expiration date. The setting is for audit purposes only
         and the subscription is not automatically expired. The subscription lifecycle can be managed by
         using the ``state`` property. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype expiration_date: ~datetime.datetime
        :keyword end_date: Date when subscription was cancelled or expired. The setting is for audit
         purposes only and the subscription is not automatically cancelled. The subscription lifecycle
         can be managed by using the ``state`` property. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype end_date: ~datetime.datetime
        :keyword notification_date: Upcoming subscription expiration notification date. The date
         conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601
         standard.
        :paramtype notification_date: ~datetime.datetime
        :keyword primary_key: Subscription primary key.
        :paramtype primary_key: str
        :keyword secondary_key: Subscription secondary key.
        :paramtype secondary_key: str
        :keyword state_comment: Optional subscription comment added by an administrator.
        :paramtype state_comment: str
        """
        super(SubscriptionContract, self).__init__(**kwargs)
        self.user_id = user_id
        self.product_id = product_id
        self.display_name = display_name
        self.state = state
        self.created_date = None
        self.start_date = start_date
        self.expiration_date = expiration_date
        self.end_date = end_date
        self.notification_date = notification_date
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.state_comment = state_comment


class SubscriptionCreateParameters(msrest.serialization.Model):
    """Subscription create details.

    :ivar user_id: User (user id path) for whom subscription is being created in form /users/{uid}.
    :vartype user_id: str
    :ivar product_id: Product (product id path) for which subscription is being created in form
     /products/{productId}.
    :vartype product_id: str
    :ivar display_name: Subscription name.
    :vartype display_name: str
    :ivar primary_key: Primary subscription key. If not specified during request key will be
     generated automatically.
    :vartype primary_key: str
    :ivar secondary_key: Secondary subscription key. If not specified during request key will be
     generated automatically.
    :vartype secondary_key: str
    :ivar state: Initial subscription state. If no value is specified, subscription is created with
     Submitted state. Possible states are * active – the subscription is active, * suspended – the
     subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted –
     the subscription request has been made by the developer, but has not yet been approved or
     rejected, * rejected – the subscription request has been denied by an administrator, *
     cancelled – the subscription has been cancelled by the developer or administrator, * expired –
     the subscription reached its expiration date and was deactivated. Known values are:
     "suspended", "active", "expired", "submitted", "rejected", "cancelled".
    :vartype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
    """

    _validation = {
        'display_name': {'max_length': 100, 'min_length': 1},
        'primary_key': {'max_length': 256, 'min_length': 1},
        'secondary_key': {'max_length': 256, 'min_length': 1},
    }

    _attribute_map = {
        'user_id': {'key': 'properties.userId', 'type': 'str'},
        'product_id': {'key': 'properties.productId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'primary_key': {'key': 'properties.primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'properties.secondaryKey', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        product_id: Optional[str] = None,
        display_name: Optional[str] = None,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
        state: Optional[Union[str, "_models.SubscriptionState"]] = None,
        **kwargs
    ):
        """
        :keyword user_id: User (user id path) for whom subscription is being created in form
         /users/{uid}.
        :paramtype user_id: str
        :keyword product_id: Product (product id path) for which subscription is being created in form
         /products/{productId}.
        :paramtype product_id: str
        :keyword display_name: Subscription name.
        :paramtype display_name: str
        :keyword primary_key: Primary subscription key. If not specified during request key will be
         generated automatically.
        :paramtype primary_key: str
        :keyword secondary_key: Secondary subscription key. If not specified during request key will be
         generated automatically.
        :paramtype secondary_key: str
        :keyword state: Initial subscription state. If no value is specified, subscription is created
         with Submitted state. Possible states are * active – the subscription is active, * suspended –
         the subscription is blocked, and the subscriber cannot call any APIs of the product, *
         submitted – the subscription request has been made by the developer, but has not yet been
         approved or rejected, * rejected – the subscription request has been denied by an
         administrator, * cancelled – the subscription has been cancelled by the developer or
         administrator, * expired – the subscription reached its expiration date and was deactivated.
         Known values are: "suspended", "active", "expired", "submitted", "rejected", "cancelled".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
        """
        super(SubscriptionCreateParameters, self).__init__(**kwargs)
        self.user_id = user_id
        self.product_id = product_id
        self.display_name = display_name
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.state = state


class SubscriptionKeyParameterNamesContract(msrest.serialization.Model):
    """Subscription key parameter names details.

    :ivar header: Subscription key header name.
    :vartype header: str
    :ivar query: Subscription key query string parameter name.
    :vartype query: str
    """

    _attribute_map = {
        'header': {'key': 'header', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        header: Optional[str] = None,
        query: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword header: Subscription key header name.
        :paramtype header: str
        :keyword query: Subscription key query string parameter name.
        :paramtype query: str
        """
        super(SubscriptionKeyParameterNamesContract, self).__init__(**kwargs)
        self.header = header
        self.query = query


class SubscriptionsDelegationSettingsProperties(msrest.serialization.Model):
    """Subscriptions delegation settings properties.

    :ivar enabled: Enable or disable delegation for subscriptions.
    :vartype enabled: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Enable or disable delegation for subscriptions.
        :paramtype enabled: bool
        """
        super(SubscriptionsDelegationSettingsProperties, self).__init__(**kwargs)
        self.enabled = enabled


class SubscriptionUpdateParameters(msrest.serialization.Model):
    """Subscription update details.

    :ivar user_id: User identifier path: /users/{uid}.
    :vartype user_id: str
    :ivar product_id: Product identifier path: /products/{productId}.
    :vartype product_id: str
    :ivar expiration_date: Subscription expiration date. The setting is for audit purposes only and
     the subscription is not automatically expired. The subscription lifecycle can be managed by
     using the ``state`` property. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype expiration_date: ~datetime.datetime
    :ivar display_name: Subscription name.
    :vartype display_name: str
    :ivar primary_key: Primary subscription key.
    :vartype primary_key: str
    :ivar secondary_key: Secondary subscription key.
    :vartype secondary_key: str
    :ivar state: Subscription state. Possible states are * active – the subscription is active, *
     suspended – the subscription is blocked, and the subscriber cannot call any APIs of the
     product, * submitted – the subscription request has been made by the developer, but has not yet
     been approved or rejected, * rejected – the subscription request has been denied by an
     administrator, * cancelled – the subscription has been cancelled by the developer or
     administrator, * expired – the subscription reached its expiration date and was deactivated.
     Known values are: "suspended", "active", "expired", "submitted", "rejected", "cancelled".
    :vartype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
    :ivar state_comment: Comments describing subscription state change by the administrator.
    :vartype state_comment: str
    """

    _validation = {
        'primary_key': {'max_length': 256, 'min_length': 1},
        'secondary_key': {'max_length': 256, 'min_length': 1},
    }

    _attribute_map = {
        'user_id': {'key': 'properties.userId', 'type': 'str'},
        'product_id': {'key': 'properties.productId', 'type': 'str'},
        'expiration_date': {'key': 'properties.expirationDate', 'type': 'iso-8601'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'primary_key': {'key': 'properties.primaryKey', 'type': 'str'},
        'secondary_key': {'key': 'properties.secondaryKey', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'state_comment': {'key': 'properties.stateComment', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        product_id: Optional[str] = None,
        expiration_date: Optional[datetime.datetime] = None,
        display_name: Optional[str] = None,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
        state: Optional[Union[str, "_models.SubscriptionState"]] = None,
        state_comment: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword user_id: User identifier path: /users/{uid}.
        :paramtype user_id: str
        :keyword product_id: Product identifier path: /products/{productId}.
        :paramtype product_id: str
        :keyword expiration_date: Subscription expiration date. The setting is for audit purposes only
         and the subscription is not automatically expired. The subscription lifecycle can be managed by
         using the ``state`` property. The date conforms to the following format:
         ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype expiration_date: ~datetime.datetime
        :keyword display_name: Subscription name.
        :paramtype display_name: str
        :keyword primary_key: Primary subscription key.
        :paramtype primary_key: str
        :keyword secondary_key: Secondary subscription key.
        :paramtype secondary_key: str
        :keyword state: Subscription state. Possible states are * active – the subscription is active,
         * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the
         product, * submitted – the subscription request has been made by the developer, but has not yet
         been approved or rejected, * rejected – the subscription request has been denied by an
         administrator, * cancelled – the subscription has been cancelled by the developer or
         administrator, * expired – the subscription reached its expiration date and was deactivated.
         Known values are: "suspended", "active", "expired", "submitted", "rejected", "cancelled".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.SubscriptionState
        :keyword state_comment: Comments describing subscription state change by the administrator.
        :paramtype state_comment: str
        """
        super(SubscriptionUpdateParameters, self).__init__(**kwargs)
        self.user_id = user_id
        self.product_id = product_id
        self.expiration_date = expiration_date
        self.display_name = display_name
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.state = state
        self.state_comment = state_comment


class TagCollection(msrest.serialization.Model):
    """Paged Tag list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.TagContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TagContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.TagContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.TagContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(TagCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TagContract(Resource):
    """Tag Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar display_name: Tag name.
    :vartype display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'max_length': 160, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Tag name.
        :paramtype display_name: str
        """
        super(TagContract, self).__init__(**kwargs)
        self.display_name = display_name


class TagCreateUpdateParameters(msrest.serialization.Model):
    """Parameters supplied to Create/Update Tag operations.

    :ivar display_name: Tag name.
    :vartype display_name: str
    """

    _validation = {
        'display_name': {'max_length': 160, 'min_length': 1},
    }

    _attribute_map = {
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Tag name.
        :paramtype display_name: str
        """
        super(TagCreateUpdateParameters, self).__init__(**kwargs)
        self.display_name = display_name


class TagDescriptionBaseProperties(msrest.serialization.Model):
    """Parameters supplied to the Create TagDescription operation.

    :ivar description: Description of the Tag.
    :vartype description: str
    :ivar external_docs_url: Absolute URL of external resources describing the tag.
    :vartype external_docs_url: str
    :ivar external_docs_description: Description of the external resources describing the tag.
    :vartype external_docs_description: str
    """

    _validation = {
        'external_docs_url': {'max_length': 2000, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'external_docs_url': {'key': 'externalDocsUrl', 'type': 'str'},
        'external_docs_description': {'key': 'externalDocsDescription', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        external_docs_url: Optional[str] = None,
        external_docs_description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the Tag.
        :paramtype description: str
        :keyword external_docs_url: Absolute URL of external resources describing the tag.
        :paramtype external_docs_url: str
        :keyword external_docs_description: Description of the external resources describing the tag.
        :paramtype external_docs_description: str
        """
        super(TagDescriptionBaseProperties, self).__init__(**kwargs)
        self.description = description
        self.external_docs_url = external_docs_url
        self.external_docs_description = external_docs_description


class TagDescriptionCollection(msrest.serialization.Model):
    """Paged TagDescription list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.TagDescriptionContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TagDescriptionContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.TagDescriptionContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.TagDescriptionContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(TagDescriptionCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TagDescriptionContract(Resource):
    """Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar description: Description of the Tag.
    :vartype description: str
    :ivar external_docs_url: Absolute URL of external resources describing the tag.
    :vartype external_docs_url: str
    :ivar external_docs_description: Description of the external resources describing the tag.
    :vartype external_docs_description: str
    :ivar display_name: Tag name.
    :vartype display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'external_docs_url': {'max_length': 2000, 'min_length': 0},
        'display_name': {'max_length': 160, 'min_length': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'external_docs_url': {'key': 'properties.externalDocsUrl', 'type': 'str'},
        'external_docs_description': {'key': 'properties.externalDocsDescription', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        external_docs_url: Optional[str] = None,
        external_docs_description: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the Tag.
        :paramtype description: str
        :keyword external_docs_url: Absolute URL of external resources describing the tag.
        :paramtype external_docs_url: str
        :keyword external_docs_description: Description of the external resources describing the tag.
        :paramtype external_docs_description: str
        :keyword display_name: Tag name.
        :paramtype display_name: str
        """
        super(TagDescriptionContract, self).__init__(**kwargs)
        self.description = description
        self.external_docs_url = external_docs_url
        self.external_docs_description = external_docs_description
        self.display_name = display_name


class TagDescriptionContractProperties(TagDescriptionBaseProperties):
    """TagDescription contract Properties.

    :ivar description: Description of the Tag.
    :vartype description: str
    :ivar external_docs_url: Absolute URL of external resources describing the tag.
    :vartype external_docs_url: str
    :ivar external_docs_description: Description of the external resources describing the tag.
    :vartype external_docs_description: str
    :ivar display_name: Tag name.
    :vartype display_name: str
    """

    _validation = {
        'external_docs_url': {'max_length': 2000, 'min_length': 0},
        'display_name': {'max_length': 160, 'min_length': 1},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'external_docs_url': {'key': 'externalDocsUrl', 'type': 'str'},
        'external_docs_description': {'key': 'externalDocsDescription', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        external_docs_url: Optional[str] = None,
        external_docs_description: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the Tag.
        :paramtype description: str
        :keyword external_docs_url: Absolute URL of external resources describing the tag.
        :paramtype external_docs_url: str
        :keyword external_docs_description: Description of the external resources describing the tag.
        :paramtype external_docs_description: str
        :keyword display_name: Tag name.
        :paramtype display_name: str
        """
        super(TagDescriptionContractProperties, self).__init__(description=description, external_docs_url=external_docs_url, external_docs_description=external_docs_description, **kwargs)
        self.display_name = display_name


class TagDescriptionCreateParameters(msrest.serialization.Model):
    """Parameters supplied to the Create TagDescription operation.

    :ivar description: Description of the Tag.
    :vartype description: str
    :ivar external_docs_url: Absolute URL of external resources describing the tag.
    :vartype external_docs_url: str
    :ivar external_docs_description: Description of the external resources describing the tag.
    :vartype external_docs_description: str
    """

    _validation = {
        'external_docs_url': {'max_length': 2000, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'properties.description', 'type': 'str'},
        'external_docs_url': {'key': 'properties.externalDocsUrl', 'type': 'str'},
        'external_docs_description': {'key': 'properties.externalDocsDescription', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        external_docs_url: Optional[str] = None,
        external_docs_description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the Tag.
        :paramtype description: str
        :keyword external_docs_url: Absolute URL of external resources describing the tag.
        :paramtype external_docs_url: str
        :keyword external_docs_description: Description of the external resources describing the tag.
        :paramtype external_docs_description: str
        """
        super(TagDescriptionCreateParameters, self).__init__(**kwargs)
        self.description = description
        self.external_docs_url = external_docs_url
        self.external_docs_description = external_docs_description


class TagResourceCollection(msrest.serialization.Model):
    """Paged Tag list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.TagResourceContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TagResourceContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.TagResourceContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.TagResourceContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(TagResourceCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TagResourceContract(Resource):
    """Contract details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar tag: Tag associated with the resource.
    :vartype tag: ~azure.mgmt.apimanagement.models.TagContract
    :ivar api: Api associated with the tag.
    :vartype api: ~azure.mgmt.apimanagement.models.ApiContract
    :ivar operation: Api associated with the tag.
    :vartype operation: ~azure.mgmt.apimanagement.models.OperationEntityContract
    :ivar product: Product associated with the tag.
    :vartype product: ~azure.mgmt.apimanagement.models.ProductContract
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tag': {'key': 'properties.tag', 'type': 'TagContract'},
        'api': {'key': 'properties.api', 'type': 'ApiContract'},
        'operation': {'key': 'properties.operation', 'type': 'OperationEntityContract'},
        'product': {'key': 'properties.product', 'type': 'ProductContract'},
    }

    def __init__(
        self,
        *,
        tag: Optional["_models.TagContract"] = None,
        api: Optional["_models.ApiContract"] = None,
        operation: Optional["_models.OperationEntityContract"] = None,
        product: Optional["_models.ProductContract"] = None,
        **kwargs
    ):
        """
        :keyword tag: Tag associated with the resource.
        :paramtype tag: ~azure.mgmt.apimanagement.models.TagContract
        :keyword api: Api associated with the tag.
        :paramtype api: ~azure.mgmt.apimanagement.models.ApiContract
        :keyword operation: Api associated with the tag.
        :paramtype operation: ~azure.mgmt.apimanagement.models.OperationEntityContract
        :keyword product: Product associated with the tag.
        :paramtype product: ~azure.mgmt.apimanagement.models.ProductContract
        """
        super(TagResourceContract, self).__init__(**kwargs)
        self.tag = tag
        self.api = api
        self.operation = operation
        self.product = product


class TenantConfigurationSyncStateContract(msrest.serialization.Model):
    """Tenant Configuration Synchronization State.

    :ivar branch: The name of Git branch.
    :vartype branch: str
    :ivar commit_id: The latest commit Id.
    :vartype commit_id: str
    :ivar is_export: value indicating if last sync was save (true) or deploy (false) operation.
    :vartype is_export: bool
    :ivar is_synced: value indicating if last synchronization was later than the configuration
     change.
    :vartype is_synced: bool
    :ivar is_git_enabled: value indicating whether Git configuration access is enabled.
    :vartype is_git_enabled: bool
    :ivar sync_date: The date of the latest synchronization. The date conforms to the following
     format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype sync_date: ~datetime.datetime
    :ivar configuration_change_date: The date of the latest configuration change. The date conforms
     to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype configuration_change_date: ~datetime.datetime
    """

    _attribute_map = {
        'branch': {'key': 'branch', 'type': 'str'},
        'commit_id': {'key': 'commitId', 'type': 'str'},
        'is_export': {'key': 'isExport', 'type': 'bool'},
        'is_synced': {'key': 'isSynced', 'type': 'bool'},
        'is_git_enabled': {'key': 'isGitEnabled', 'type': 'bool'},
        'sync_date': {'key': 'syncDate', 'type': 'iso-8601'},
        'configuration_change_date': {'key': 'configurationChangeDate', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        branch: Optional[str] = None,
        commit_id: Optional[str] = None,
        is_export: Optional[bool] = None,
        is_synced: Optional[bool] = None,
        is_git_enabled: Optional[bool] = None,
        sync_date: Optional[datetime.datetime] = None,
        configuration_change_date: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword branch: The name of Git branch.
        :paramtype branch: str
        :keyword commit_id: The latest commit Id.
        :paramtype commit_id: str
        :keyword is_export: value indicating if last sync was save (true) or deploy (false) operation.
        :paramtype is_export: bool
        :keyword is_synced: value indicating if last synchronization was later than the configuration
         change.
        :paramtype is_synced: bool
        :keyword is_git_enabled: value indicating whether Git configuration access is enabled.
        :paramtype is_git_enabled: bool
        :keyword sync_date: The date of the latest synchronization. The date conforms to the following
         format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype sync_date: ~datetime.datetime
        :keyword configuration_change_date: The date of the latest configuration change. The date
         conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601
         standard.
        :paramtype configuration_change_date: ~datetime.datetime
        """
        super(TenantConfigurationSyncStateContract, self).__init__(**kwargs)
        self.branch = branch
        self.commit_id = commit_id
        self.is_export = is_export
        self.is_synced = is_synced
        self.is_git_enabled = is_git_enabled
        self.sync_date = sync_date
        self.configuration_change_date = configuration_change_date


class TermsOfServiceProperties(msrest.serialization.Model):
    """Terms of service contract properties.

    :ivar text: A terms of service text.
    :vartype text: str
    :ivar enabled: Display terms of service during a sign-up process.
    :vartype enabled: bool
    :ivar consent_required: Ask user for consent.
    :vartype consent_required: bool
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'consent_required': {'key': 'consentRequired', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        enabled: Optional[bool] = None,
        consent_required: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword text: A terms of service text.
        :paramtype text: str
        :keyword enabled: Display terms of service during a sign-up process.
        :paramtype enabled: bool
        :keyword consent_required: Ask user for consent.
        :paramtype consent_required: bool
        """
        super(TermsOfServiceProperties, self).__init__(**kwargs)
        self.text = text
        self.enabled = enabled
        self.consent_required = consent_required


class TokenBodyParameterContract(msrest.serialization.Model):
    """OAuth acquire token request body parameter (www-url-form-encoded).

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. body parameter name.
    :vartype name: str
    :ivar value: Required. body parameter value.
    :vartype value: str
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        value: str,
        **kwargs
    ):
        """
        :keyword name: Required. body parameter name.
        :paramtype name: str
        :keyword value: Required. body parameter value.
        :paramtype value: str
        """
        super(TokenBodyParameterContract, self).__init__(**kwargs)
        self.name = name
        self.value = value


class UserCollection(msrest.serialization.Model):
    """Paged Users list representation.

    :ivar value: Page values.
    :vartype value: list[~azure.mgmt.apimanagement.models.UserContract]
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UserContract]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.UserContract"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Page values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.UserContract]
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(UserCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UserContract(Resource):
    """User details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type for API Management resource.
    :vartype type: str
    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    :ivar email: Email address.
    :vartype email: str
    :ivar registration_date: Date of user registration. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype registration_date: ~datetime.datetime
    :ivar groups: Collection of groups user is part of.
    :vartype groups: list[~azure.mgmt.apimanagement.models.GroupContract]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'identities': {'readonly': True},
        'groups': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'note': {'key': 'properties.note', 'type': 'str'},
        'identities': {'key': 'properties.identities', 'type': '[UserIdentityContract]'},
        'first_name': {'key': 'properties.firstName', 'type': 'str'},
        'last_name': {'key': 'properties.lastName', 'type': 'str'},
        'email': {'key': 'properties.email', 'type': 'str'},
        'registration_date': {'key': 'properties.registrationDate', 'type': 'iso-8601'},
        'groups': {'key': 'properties.groups', 'type': '[GroupContract]'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        email: Optional[str] = None,
        registration_date: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        :keyword email: Email address.
        :paramtype email: str
        :keyword registration_date: Date of user registration. The date conforms to the following
         format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype registration_date: ~datetime.datetime
        """
        super(UserContract, self).__init__(**kwargs)
        self.state = state
        self.note = note
        self.identities = None
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.registration_date = registration_date
        self.groups = None


class UserEntityBaseParameters(msrest.serialization.Model):
    """User Entity Base Parameters set.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    """

    _validation = {
        'identities': {'readonly': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[UserIdentityContract]'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        """
        super(UserEntityBaseParameters, self).__init__(**kwargs)
        self.state = state
        self.note = note
        self.identities = None


class UserContractProperties(UserEntityBaseParameters):
    """User profile.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    :ivar email: Email address.
    :vartype email: str
    :ivar registration_date: Date of user registration. The date conforms to the following format:
     ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
    :vartype registration_date: ~datetime.datetime
    :ivar groups: Collection of groups user is part of.
    :vartype groups: list[~azure.mgmt.apimanagement.models.GroupContract]
    """

    _validation = {
        'identities': {'readonly': True},
        'groups': {'readonly': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[UserIdentityContract]'},
        'first_name': {'key': 'firstName', 'type': 'str'},
        'last_name': {'key': 'lastName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'registration_date': {'key': 'registrationDate', 'type': 'iso-8601'},
        'groups': {'key': 'groups', 'type': '[GroupContract]'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        email: Optional[str] = None,
        registration_date: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        :keyword email: Email address.
        :paramtype email: str
        :keyword registration_date: Date of user registration. The date conforms to the following
         format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the ISO 8601 standard.
        :paramtype registration_date: ~datetime.datetime
        """
        super(UserContractProperties, self).__init__(state=state, note=note, **kwargs)
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.registration_date = registration_date
        self.groups = None


class UserCreateParameterProperties(UserEntityBaseParameters):
    """Parameters supplied to the Create User operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar email: Required. Email address. Must not be empty and must be unique within the service
     instance.
    :vartype email: str
    :ivar first_name: Required. First name.
    :vartype first_name: str
    :ivar last_name: Required. Last name.
    :vartype last_name: str
    :ivar password: User Password. If no value is provided, a default password is generated.
    :vartype password: str
    :ivar confirmation: Determines the type of confirmation e-mail that will be sent to the newly
     created user. Known values are: "signup", "invite".
    :vartype confirmation: str or ~azure.mgmt.apimanagement.models.Confirmation
    """

    _validation = {
        'identities': {'readonly': True},
        'email': {'required': True, 'max_length': 254, 'min_length': 1},
        'first_name': {'required': True, 'max_length': 100, 'min_length': 1},
        'last_name': {'required': True, 'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[UserIdentityContract]'},
        'email': {'key': 'email', 'type': 'str'},
        'first_name': {'key': 'firstName', 'type': 'str'},
        'last_name': {'key': 'lastName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'confirmation': {'key': 'confirmation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        email: str,
        first_name: str,
        last_name: str,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        password: Optional[str] = None,
        confirmation: Optional[Union[str, "_models.Confirmation"]] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword email: Required. Email address. Must not be empty and must be unique within the
         service instance.
        :paramtype email: str
        :keyword first_name: Required. First name.
        :paramtype first_name: str
        :keyword last_name: Required. Last name.
        :paramtype last_name: str
        :keyword password: User Password. If no value is provided, a default password is generated.
        :paramtype password: str
        :keyword confirmation: Determines the type of confirmation e-mail that will be sent to the
         newly created user. Known values are: "signup", "invite".
        :paramtype confirmation: str or ~azure.mgmt.apimanagement.models.Confirmation
        """
        super(UserCreateParameterProperties, self).__init__(state=state, note=note, **kwargs)
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.password = password
        self.confirmation = confirmation


class UserCreateParameters(msrest.serialization.Model):
    """User create details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar email: Email address. Must not be empty and must be unique within the service instance.
    :vartype email: str
    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    :ivar password: User Password. If no value is provided, a default password is generated.
    :vartype password: str
    :ivar confirmation: Determines the type of confirmation e-mail that will be sent to the newly
     created user. Known values are: "signup", "invite".
    :vartype confirmation: str or ~azure.mgmt.apimanagement.models.Confirmation
    """

    _validation = {
        'identities': {'readonly': True},
        'email': {'max_length': 254, 'min_length': 1},
        'first_name': {'max_length': 100, 'min_length': 1},
        'last_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'state': {'key': 'properties.state', 'type': 'str'},
        'note': {'key': 'properties.note', 'type': 'str'},
        'identities': {'key': 'properties.identities', 'type': '[UserIdentityContract]'},
        'email': {'key': 'properties.email', 'type': 'str'},
        'first_name': {'key': 'properties.firstName', 'type': 'str'},
        'last_name': {'key': 'properties.lastName', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'confirmation': {'key': 'properties.confirmation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        email: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        password: Optional[str] = None,
        confirmation: Optional[Union[str, "_models.Confirmation"]] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword email: Email address. Must not be empty and must be unique within the service
         instance.
        :paramtype email: str
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        :keyword password: User Password. If no value is provided, a default password is generated.
        :paramtype password: str
        :keyword confirmation: Determines the type of confirmation e-mail that will be sent to the
         newly created user. Known values are: "signup", "invite".
        :paramtype confirmation: str or ~azure.mgmt.apimanagement.models.Confirmation
        """
        super(UserCreateParameters, self).__init__(**kwargs)
        self.state = state
        self.note = note
        self.identities = None
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.password = password
        self.confirmation = confirmation


class UserIdentityCollection(msrest.serialization.Model):
    """List of Users Identity list representation.

    :ivar value: User Identity values.
    :vartype value: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar count: Total record count number across all pages.
    :vartype count: long
    :ivar next_link: Next page link if any.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UserIdentityContract]'},
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.UserIdentityContract"]] = None,
        count: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: User Identity values.
        :paramtype value: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
        :keyword count: Total record count number across all pages.
        :paramtype count: long
        :keyword next_link: Next page link if any.
        :paramtype next_link: str
        """
        super(UserIdentityCollection, self).__init__(**kwargs)
        self.value = value
        self.count = count
        self.next_link = next_link


class UserIdentityContract(msrest.serialization.Model):
    """User identity details.

    :ivar provider: Identity provider name.
    :vartype provider: str
    :ivar id: Identifier value within provider.
    :vartype id: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Identity provider name.
        :paramtype provider: str
        :keyword id: Identifier value within provider.
        :paramtype id: str
        """
        super(UserIdentityContract, self).__init__(**kwargs)
        self.provider = provider
        self.id = id


class UserTokenParameters(msrest.serialization.Model):
    """Parameters supplied to the Get User Token operation.

    All required parameters must be populated in order to send to Azure.

    :ivar key_type: Required. The Key to be used to generate token for user. Known values are:
     "primary", "secondary". Default value: "primary".
    :vartype key_type: str or ~azure.mgmt.apimanagement.models.KeyType
    :ivar expiry: Required. The Expiry time of the Token. Maximum token expiry time is set to 30
     days. The date conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the
     ISO 8601 standard.
    :vartype expiry: ~datetime.datetime
    """

    _validation = {
        'key_type': {'required': True},
        'expiry': {'required': True},
    }

    _attribute_map = {
        'key_type': {'key': 'keyType', 'type': 'str'},
        'expiry': {'key': 'expiry', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        key_type: Union[str, "_models.KeyType"] = "primary",
        expiry: datetime.datetime,
        **kwargs
    ):
        """
        :keyword key_type: Required. The Key to be used to generate token for user. Known values are:
         "primary", "secondary". Default value: "primary".
        :paramtype key_type: str or ~azure.mgmt.apimanagement.models.KeyType
        :keyword expiry: Required. The Expiry time of the Token. Maximum token expiry time is set to 30
         days. The date conforms to the following format: ``yyyy-MM-ddTHH:mm:ssZ`` as specified by the
         ISO 8601 standard.
        :paramtype expiry: ~datetime.datetime
        """
        super(UserTokenParameters, self).__init__(**kwargs)
        self.key_type = key_type
        self.expiry = expiry


class UserTokenResult(msrest.serialization.Model):
    """Get User Token response details.

    :ivar value: Shared Access Authorization token for the User.
    :vartype value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Shared Access Authorization token for the User.
        :paramtype value: str
        """
        super(UserTokenResult, self).__init__(**kwargs)
        self.value = value


class UserUpdateParameters(msrest.serialization.Model):
    """User update parameters.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar email: Email address. Must not be empty and must be unique within the service instance.
    :vartype email: str
    :ivar password: User Password.
    :vartype password: str
    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    """

    _validation = {
        'identities': {'readonly': True},
        'email': {'max_length': 254, 'min_length': 1},
        'first_name': {'max_length': 100, 'min_length': 1},
        'last_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'state': {'key': 'properties.state', 'type': 'str'},
        'note': {'key': 'properties.note', 'type': 'str'},
        'identities': {'key': 'properties.identities', 'type': '[UserIdentityContract]'},
        'email': {'key': 'properties.email', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'first_name': {'key': 'properties.firstName', 'type': 'str'},
        'last_name': {'key': 'properties.lastName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        email: Optional[str] = None,
        password: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword email: Email address. Must not be empty and must be unique within the service
         instance.
        :paramtype email: str
        :keyword password: User Password.
        :paramtype password: str
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        """
        super(UserUpdateParameters, self).__init__(**kwargs)
        self.state = state
        self.note = note
        self.identities = None
        self.email = email
        self.password = password
        self.first_name = first_name
        self.last_name = last_name


class UserUpdateParametersProperties(UserEntityBaseParameters):
    """Parameters supplied to the Update User operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar state: Account state. Specifies whether the user is active or not. Blocked users are
     unable to sign into the developer portal or call any APIs of subscribed products. Default state
     is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
     "active".
    :vartype state: str or ~azure.mgmt.apimanagement.models.UserState
    :ivar note: Optional note about a user set by the administrator.
    :vartype note: str
    :ivar identities: Collection of user identities.
    :vartype identities: list[~azure.mgmt.apimanagement.models.UserIdentityContract]
    :ivar email: Email address. Must not be empty and must be unique within the service instance.
    :vartype email: str
    :ivar password: User Password.
    :vartype password: str
    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    """

    _validation = {
        'identities': {'readonly': True},
        'email': {'max_length': 254, 'min_length': 1},
        'first_name': {'max_length': 100, 'min_length': 1},
        'last_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[UserIdentityContract]'},
        'email': {'key': 'email', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'first_name': {'key': 'firstName', 'type': 'str'},
        'last_name': {'key': 'lastName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.UserState"]] = "active",
        note: Optional[str] = None,
        email: Optional[str] = None,
        password: Optional[str] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword state: Account state. Specifies whether the user is active or not. Blocked users are
         unable to sign into the developer portal or call any APIs of subscribed products. Default state
         is Active. Known values are: "active", "blocked", "pending", "deleted". Default value:
         "active".
        :paramtype state: str or ~azure.mgmt.apimanagement.models.UserState
        :keyword note: Optional note about a user set by the administrator.
        :paramtype note: str
        :keyword email: Email address. Must not be empty and must be unique within the service
         instance.
        :paramtype email: str
        :keyword password: User Password.
        :paramtype password: str
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        """
        super(UserUpdateParametersProperties, self).__init__(state=state, note=note, **kwargs)
        self.email = email
        self.password = password
        self.first_name = first_name
        self.last_name = last_name


class VirtualNetworkConfiguration(msrest.serialization.Model):
    """Configuration of a virtual network to which API Management service is deployed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vnetid: The virtual network ID. This is typically a GUID. Expect a null GUID by default.
    :vartype vnetid: str
    :ivar subnetname: The name of the subnet.
    :vartype subnetname: str
    :ivar subnet_resource_id: The full resource ID of a subnet in a virtual network to deploy the
     API Management service in.
    :vartype subnet_resource_id: str
    """

    _validation = {
        'vnetid': {'readonly': True},
        'subnetname': {'readonly': True},
        'subnet_resource_id': {'pattern': r'^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$'},
    }

    _attribute_map = {
        'vnetid': {'key': 'vnetid', 'type': 'str'},
        'subnetname': {'key': 'subnetname', 'type': 'str'},
        'subnet_resource_id': {'key': 'subnetResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_resource_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword subnet_resource_id: The full resource ID of a subnet in a virtual network to deploy
         the API Management service in.
        :paramtype subnet_resource_id: str
        """
        super(VirtualNetworkConfiguration, self).__init__(**kwargs)
        self.vnetid = None
        self.subnetname = None
        self.subnet_resource_id = subnet_resource_id


class X509CertificateName(msrest.serialization.Model):
    """Properties of server X509Names.

    :ivar name: Common Name of the Certificate.
    :vartype name: str
    :ivar issuer_certificate_thumbprint: Thumbprint for the Issuer of the Certificate.
    :vartype issuer_certificate_thumbprint: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'issuer_certificate_thumbprint': {'key': 'issuerCertificateThumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        issuer_certificate_thumbprint: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Common Name of the Certificate.
        :paramtype name: str
        :keyword issuer_certificate_thumbprint: Thumbprint for the Issuer of the Certificate.
        :paramtype issuer_certificate_thumbprint: str
        """
        super(X509CertificateName, self).__init__(**kwargs)
        self.name = name
        self.issuer_certificate_thumbprint = issuer_certificate_thumbprint
