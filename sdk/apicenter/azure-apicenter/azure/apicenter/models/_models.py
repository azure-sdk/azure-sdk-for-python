# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Api(_Model):
    """API resource model.

    :ivar name: Api identifier. Required.
    :vartype name: str
    :ivar title: The name of the API. Required.
    :vartype title: str
    :ivar summary: Short description of the API.
    :vartype summary: str
    :ivar description: The description of the API.
    :vartype description: str
    :ivar kind: Kind of API. For example, REST or GraphQL. Required. Known values are: "rest",
     "graphql", "grpc", "soap", "webhook", and "websocket".
    :vartype kind: str or ~azure.apicenter.models.ApiKind
    :ivar lifecycle_stage: Current lifecycle stage of the API. Known values are: "design",
     "development", "testing", "preview", "production", "deprecated", and "retired".
    :vartype lifecycle_stage: str or ~azure.apicenter.models.LifecycleStage
    :ivar terms_of_service: Terms of service for the API.
    :vartype terms_of_service: ~azure.apicenter.models.TermsOfService
    :ivar license: The license information for the API.
    :vartype license: ~azure.apicenter.models.License
    :ivar external_documentation: External documentation.
    :vartype external_documentation: list[~azure.apicenter.models.ExternalDocumentation]
    :ivar contacts: Points of contact for the API.
    :vartype contacts: list[~azure.apicenter.models.Contact]
    :ivar custom_properties: The custom metadata defined for API entities.
    :vartype custom_properties: any
    :ivar last_updated: Last updated date and time.
    :vartype last_updated: ~datetime.datetime
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Api identifier. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the API. Required."""
    summary: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Short description of the API."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the API."""
    kind: Union[str, "_models.ApiKind"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind of API. For example, REST or GraphQL. Required. Known values are: \"rest\", \"graphql\",
     \"grpc\", \"soap\", \"webhook\", and \"websocket\"."""
    lifecycle_stage: Optional[Union[str, "_models.LifecycleStage"]] = rest_field(
        name="lifecycleStage", visibility=["read"]
    )
    """Current lifecycle stage of the API. Known values are: \"design\", \"development\", \"testing\",
     \"preview\", \"production\", \"deprecated\", and \"retired\"."""
    terms_of_service: Optional["_models.TermsOfService"] = rest_field(
        name="termsOfService", visibility=["read", "create", "update", "delete", "query"]
    )
    """Terms of service for the API."""
    license: Optional["_models.License"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The license information for the API."""
    external_documentation: Optional[List["_models.ExternalDocumentation"]] = rest_field(
        name="externalDocumentation", visibility=["read", "create", "update", "delete", "query"]
    )
    """External documentation."""
    contacts: Optional[List["_models.Contact"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Points of contact for the API."""
    custom_properties: Optional[Any] = rest_field(
        name="customProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom metadata defined for API entities."""
    last_updated: Optional[datetime.datetime] = rest_field(name="lastUpdated", visibility=["read"], format="rfc3339")
    """Last updated date and time."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
        kind: Union[str, "_models.ApiKind"],
        summary: Optional[str] = None,
        description: Optional[str] = None,
        terms_of_service: Optional["_models.TermsOfService"] = None,
        license: Optional["_models.License"] = None,
        external_documentation: Optional[List["_models.ExternalDocumentation"]] = None,
        contacts: Optional[List["_models.Contact"]] = None,
        custom_properties: Optional[Any] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiDefinition(_Model):
    """API definition resource model.

    :ivar name: Definition identifier. Required.
    :vartype name: str
    :ivar title: The name of the API definition. Required.
    :vartype title: str
    :ivar description: The description of the API definition.
    :vartype description: str
    :ivar specification: The API specification details.
    :vartype specification: ~azure.apicenter.models.ApiSpecification
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Definition identifier. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the API definition. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the API definition."""
    specification: Optional["_models.ApiSpecification"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The API specification details."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
        description: Optional[str] = None,
        specification: Optional["_models.ApiSpecification"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiDeployment(_Model):
    """API deployment resource model.

    :ivar name: Deployment identifier. Required.
    :vartype name: str
    :ivar title: The name of the deployment. Required.
    :vartype title: str
    :ivar description: The description of the deployment.
    :vartype description: str
    :ivar environment: The name of the deployment environment. Required.
    :vartype environment: str
    :ivar server: The server information of the API deployment. Required.
    :vartype server: ~azure.apicenter.models.ApiDeploymentServer
    :ivar custom_properties: The custom metadata defined for API deployment entities.
    :vartype custom_properties: any
    :ivar recommended: Indicates if this is currently recommended deployment.
    :vartype recommended: bool
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Deployment identifier. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the deployment. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the deployment."""
    environment: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the deployment environment. Required."""
    server: "_models.ApiDeploymentServer" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The server information of the API deployment. Required."""
    custom_properties: Optional[Any] = rest_field(
        name="customProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom metadata defined for API deployment entities."""
    recommended: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates if this is currently recommended deployment."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
        environment: str,
        server: "_models.ApiDeploymentServer",
        description: Optional[str] = None,
        custom_properties: Optional[Any] = None,
        recommended: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiDeploymentServer(_Model):
    """Api Deployment Server.

    :ivar runtime_uris: Base runtime URIs for this deployment. Required.
    :vartype runtime_uris: list[str]
    """

    runtime_uris: List[str] = rest_field(name="runtimeUris", visibility=["read", "create", "update", "delete", "query"])
    """Base runtime URIs for this deployment. Required."""

    @overload
    def __init__(
        self,
        *,
        runtime_uris: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiSpecExportResult(_Model):
    """Export specification result model.

    :ivar definition_name: API definition identifier. Required.
    :vartype definition_name: str
    :ivar value: The result of the specification export. Required.
    :vartype value: str
    :ivar format: The format of the specification export result. Required. "link"
    :vartype format: str or ~azure.apicenter.models.ApiSpecExportResultFormat
    """

    definition_name: str = rest_field(name="definitionName", visibility=["query"])
    """API definition identifier. Required."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the specification export. Required."""
    format: Union[str, "_models.ApiSpecExportResultFormat"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The format of the specification export result. Required. \"link\""""

    @overload
    def __init__(
        self,
        *,
        definition_name: str,
        value: str,
        format: Union[str, "_models.ApiSpecExportResultFormat"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiSpecification(_Model):
    """API specification.

    :ivar name: API specification name, e.g. 'swagger' or 'openapi'. Required.
    :vartype name: str
    :ivar version: API specification version, e.g. '3.0.1'. Required.
    :vartype version: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API specification name, e.g. 'swagger' or 'openapi'. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API specification version, e.g. '3.0.1'. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiVersion(_Model):
    """API version resource model.

    :ivar name: Version identifier. Required.
    :vartype name: str
    :ivar title: Version title. Required.
    :vartype title: str
    :ivar lifecycle_stage: Current lifecycle stage of the API version. Required. Known values are:
     "design", "development", "testing", "preview", "production", "deprecated", and "retired".
    :vartype lifecycle_stage: str or ~azure.apicenter.models.LifecycleStage
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Version identifier. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Version title. Required."""
    lifecycle_stage: Union[str, "_models.LifecycleStage"] = rest_field(
        name="lifecycleStage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current lifecycle stage of the API version. Required. Known values are: \"design\",
     \"development\", \"testing\", \"preview\", \"production\", \"deprecated\", and \"retired\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
        lifecycle_stage: Union[str, "_models.LifecycleStage"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Contact(_Model):
    """API contact information.

    :ivar name: Name of the contact. Required.
    :vartype name: str
    :ivar url: URL for the contact.
    :vartype url: str
    :ivar email: Email address for the contact.
    :vartype email: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the contact. Required."""
    url: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URL for the contact."""
    email: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Email address for the contact."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        url: Optional[str] = None,
        email: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Environment(_Model):
    """Environment resource model.

    :ivar name: Environment identifier. Required.
    :vartype name: str
    :ivar title: The name of the environment. Required.
    :vartype title: str
    :ivar kind: Kind of deployment environment. Required. Known values are: "development",
     "testing", "staging", and "production".
    :vartype kind: str or ~azure.apicenter.models.EnvironmentKind
    :ivar description: Description of the environment.
    :vartype description: str
    :ivar server: Server information of the environment.
    :vartype server: ~azure.apicenter.models.EnvironmentServer
    :ivar onboarding: Onboarding information for this environment.
    :vartype onboarding: ~azure.apicenter.models.EnvironmentOnboardingModel
    :ivar custom_properties: The custom metadata defined for environment entities.
    :vartype custom_properties: any
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Environment identifier. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the environment. Required."""
    kind: Union[str, "_models.EnvironmentKind"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind of deployment environment. Required. Known values are: \"development\", \"testing\",
     \"staging\", and \"production\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the environment."""
    server: Optional["_models.EnvironmentServer"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Server information of the environment."""
    onboarding: Optional["_models.EnvironmentOnboardingModel"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Onboarding information for this environment."""
    custom_properties: Optional[Any] = rest_field(
        name="customProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom metadata defined for environment entities."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
        kind: Union[str, "_models.EnvironmentKind"],
        description: Optional[str] = None,
        server: Optional["_models.EnvironmentServer"] = None,
        onboarding: Optional["_models.EnvironmentOnboardingModel"] = None,
        custom_properties: Optional[Any] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentOnboardingModel(_Model):
    """Environment Onboarding Model.

    :ivar instructions: Instructions how to onboard to the environment. Required.
    :vartype instructions: str
    :ivar developer_portal_uris: Developer portal URIs of the environment. Required.
    :vartype developer_portal_uris: list[str]
    """

    instructions: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Instructions how to onboard to the environment. Required."""
    developer_portal_uris: List[str] = rest_field(
        name="developerPortalUris", visibility=["read", "create", "update", "delete", "query"]
    )
    """Developer portal URIs of the environment. Required."""

    @overload
    def __init__(
        self,
        *,
        instructions: str,
        developer_portal_uris: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentServer(_Model):
    """Environment Server.

    :ivar type: Type of the server that represents the environment. Required.
    :vartype type: str
    :ivar management_portal_uris: URIs of the server's management portal. Required.
    :vartype management_portal_uris: list[str]
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the server that represents the environment. Required."""
    management_portal_uris: List[str] = rest_field(
        name="managementPortalUris", visibility=["read", "create", "update", "delete", "query"]
    )
    """URIs of the server's management portal. Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        management_portal_uris: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExternalDocumentation(_Model):
    """Api External Documentation Model.

    :ivar title: Title of the documentation. Required.
    :vartype title: str
    :ivar description: Description of the documentation. Required.
    :vartype description: str
    :ivar url: URL pointing to the documentation. Required.
    :vartype url: str
    """

    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the documentation. Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the documentation. Required."""
    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URL pointing to the documentation. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        description: str,
        url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class License(_Model):
    """API License Model.

    :ivar name: Name of the license. Required.
    :vartype name: str
    :ivar url: URL pointing to the license details. The URL field is mutually exclusive of the
     identifier field.
    :vartype url: str
    :ivar identifier: SPDX license information for the API. The identifier field is mutually
     exclusive of the URL field.
    :vartype identifier: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the license. Required."""
    url: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URL pointing to the license details. The URL field is mutually exclusive of the identifier
     field."""
    identifier: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """SPDX license information for the API. The identifier field is mutually exclusive of the URL
     field."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        url: Optional[str] = None,
        identifier: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PagedApiAll(_Model):
    """Paged collection of API items across workspaces.

    :ivar value: The Api items on this page. Required.
    :vartype value: list[~azure.apicenter.models.Api]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.Api"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Api items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.Api"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PagedEnvironmentAll(_Model):
    """Paged collection of Environment items across workspaces.

    :ivar value: The Environment items on this page. Required.
    :vartype value: list[~azure.apicenter.models.Environment]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.Environment"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Environment items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.Environment"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceOperationStatusApiSpecExportResultApiSpecExportResultError(_Model):  # pylint: disable=name-too-long
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.apicenter.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.apicenter.models.ApiSpecExportResult
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.ApiSpecExportResult"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.ApiSpecExportResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TermsOfService(_Model):
    """API Terms of Service.

    :ivar url: URL pointing to the terms of service. Required.
    :vartype url: str
    """

    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URL pointing to the terms of service. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
