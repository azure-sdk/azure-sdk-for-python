# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.apicenter import ApiCenterMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestApiCenterMgmtWorkspacesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ApiCenterMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_list(self, resource_group):
        response = self.client.workspaces.list(
            resource_group_name=resource_group.name,
            service_name="str",
            api_version="2024-12-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_get(self, resource_group):
        response = self.client.workspaces.get(
            resource_group_name=resource_group.name,
            service_name="str",
            workspace_name="str",
            api_version="2024-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_create_or_update(self, resource_group):
        response = self.client.workspaces.create_or_update(
            resource_group_name=resource_group.name,
            service_name="str",
            workspace_name="str",
            resource={
                "description": "str",
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "title": "str",
                "type": "str",
            },
            api_version="2024-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_delete(self, resource_group):
        response = self.client.workspaces.delete(
            resource_group_name=resource_group.name,
            service_name="str",
            workspace_name="str",
            api_version="2024-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_head(self, resource_group):
        response = self.client.workspaces.head(
            resource_group_name=resource_group.name,
            service_name="str",
            workspace_name="str",
            api_version="2024-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_begin_import_api_source(self, resource_group):
        response = self.client.workspaces.begin_import_api_source(
            resource_group_name=resource_group.name,
            service_name="str",
            workspace_name="str",
            body={
                "apiSourceType": "str",
                "amazonApiGatewaySource": {
                    "accessKey": "str",
                    "regionName": "str",
                    "secretAccessKey": "str",
                    "msiResourceId": "str",
                },
                "azureApiManagementSource": {"resourceId": "str", "msiResourceId": "str"},
                "importSpecification": "str",
                "targetEnvironmentId": "str",
                "targetLifecycleStage": "str",
            },
            api_version="2024-12-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
