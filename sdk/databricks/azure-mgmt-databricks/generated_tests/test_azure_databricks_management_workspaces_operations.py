# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.databricks import AzureDatabricksManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureDatabricksManagementWorkspacesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureDatabricksManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_get(self, resource_group):
        response = self.client.workspaces.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_begin_delete(self, resource_group):
        response = self.client.workspaces.begin_delete(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_begin_create_or_update(self, resource_group):
        response = self.client.workspaces.begin_create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            parameters={
                "location": "str",
                "managedResourceGroupId": "str",
                "accessConnector": {"id": "str", "identityType": "str", "userAssignedIdentityId": "str"},
                "authorizations": [{"principalId": "str", "roleDefinitionId": "str"}],
                "createdBy": {"applicationId": "str", "oid": "str", "puid": "str"},
                "createdDateTime": "2020-02-20 00:00:00",
                "defaultCatalog": {"initialName": "str", "initialType": "HiveMetastore"},
                "defaultStorageFirewall": "str",
                "diskEncryptionSetId": "str",
                "encryption": {
                    "entities": {
                        "managedDisk": {
                            "keySource": "str",
                            "keyVaultProperties": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                            "rotationToLatestKeyVersionEnabled": bool,
                        },
                        "managedServices": {
                            "keySource": "str",
                            "keyVaultProperties": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                        },
                    }
                },
                "enhancedSecurityCompliance": {
                    "automaticClusterUpdate": {"value": "str"},
                    "complianceSecurityProfile": {"complianceStandards": ["str"], "value": "str"},
                    "enhancedSecurityMonitoring": {"value": "str"},
                },
                "id": "str",
                "isUcEnabled": bool,
                "managedDiskIdentity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "name": "str",
                "parameters": {
                    "amlWorkspaceId": {"value": "str", "type": "str"},
                    "customPrivateSubnetName": {"value": "str", "type": "str"},
                    "customPublicSubnetName": {"value": "str", "type": "str"},
                    "customVirtualNetworkId": {"value": "str", "type": "str"},
                    "enableNoPublicIp": {"value": bool, "type": "str"},
                    "encryption": {
                        "type": "str",
                        "value": {"KeyName": "str", "keySource": "Default", "keyvaulturi": "str", "keyversion": "str"},
                    },
                    "loadBalancerBackendPoolName": {"value": "str", "type": "str"},
                    "loadBalancerId": {"value": "str", "type": "str"},
                    "natGatewayName": {"value": "str", "type": "str"},
                    "prepareEncryption": {"value": bool, "type": "str"},
                    "publicIpName": {"value": "str", "type": "str"},
                    "requireInfrastructureEncryption": {"value": bool, "type": "str"},
                    "resourceTags": {"value": {}, "type": "str"},
                    "storageAccountName": {"value": "str", "type": "str"},
                    "storageAccountSkuName": {"value": "str", "type": "str"},
                    "vnetAddressPrefix": {"value": "str", "type": "str"},
                },
                "privateEndpointConnections": [
                    {
                        "properties": {
                            "privateLinkServiceConnectionState": {
                                "status": "str",
                                "actionsRequired": "str",
                                "description": "str",
                            },
                            "groupIds": ["str"],
                            "privateEndpoint": {"id": "str"},
                            "provisioningState": "str",
                        },
                        "id": "str",
                        "name": "str",
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "publicNetworkAccess": "str",
                "requiredNsgRules": "str",
                "sku": {"name": "str", "tier": "str"},
                "storageAccountIdentity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "uiDefinitionUri": "str",
                "updatedBy": {"applicationId": "str", "oid": "str", "puid": "str"},
                "workspaceId": "str",
                "workspaceUrl": "str",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_begin_update(self, resource_group):
        response = self.client.workspaces.begin_update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            parameters={"tags": {"str": "str"}},
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_list_by_resource_group(self, resource_group):
        response = self.client.workspaces.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_workspaces_list_by_subscription(self, resource_group):
        response = self.client.workspaces.list_by_subscription(
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
