# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from io import IOBase
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core import AsyncPipelineClient
from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._utils.serialization import Deserializer, Serializer
from ...operations._azure_bare_metal_storage_instances_operations import (
    build_create_request,
    build_delete_request,
    build_get_request,
    build_list_by_resource_group_request,
    build_list_by_subscription_request,
    build_update_request,
)
from .._configuration import BareMetalInfrastructureClientConfiguration

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class AzureBareMetalStorageInstancesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.baremetalinfrastructure.aio.BareMetalInfrastructureClient`'s
        :attr:`azure_bare_metal_storage_instances` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: BareMetalInfrastructureClientConfiguration = (
            input_args.pop(0) if input_args else kwargs.pop("config")
        )
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> AsyncIterable["_models.AzureBareMetalStorageInstance"]:
        """Gets a list of Azure Bare Metal Storage instances in the specified subscription.

        Gets a list of AzureBareMetalStorage instances in the specified subscription. The operations
        returns various properties of each Azure Bare Metal Instance.

        :return: An iterator like instance of either AzureBareMetalStorageInstance or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.AzureBareMetalStorageInstancesListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("AzureBareMetalStorageInstancesListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(
        self, resource_group_name: str, **kwargs: Any
    ) -> AsyncIterable["_models.AzureBareMetalStorageInstance"]:
        """Gets a list of Azure Bare Metal Storage instances in the specified subscription and resource
        group.

        Gets a list of AzureBareMetalStorage instances in the specified subscription and resource
        group. The operations returns various properties of each Azure Bare Metal Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of either AzureBareMetalStorageInstance or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.AzureBareMetalStorageInstancesListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("AzureBareMetalStorageInstancesListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get(
        self, resource_group_name: str, azure_bare_metal_storage_instance_name: str, **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Gets an Azure Bare Metal Storage instance.

        Gets an Azure Bare Metal Storage instance for the specified subscription, resource group, and
        instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.AzureBareMetalStorageInstance] = kwargs.pop("cls", None)

        _request = build_get_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("AzureBareMetalStorageInstance", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: _models.AzureBareMetalStorageInstance,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Create an azure bare metal storage resource.

        Creates an Azure Bare Metal Storage Instance for the specified subscription, resource group,
        and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Required.
        :type request_body_parameters:
         ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Create an azure bare metal storage resource.

        Creates an Azure Bare Metal Storage Instance for the specified subscription, resource group,
        and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Required.
        :type request_body_parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        request_body_parameters: Union[_models.AzureBareMetalStorageInstance, IO[bytes]],
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Create an azure bare metal storage resource.

        Creates an Azure Bare Metal Storage Instance for the specified subscription, resource group,
        and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param request_body_parameters: request body for put call. Is either a
         AzureBareMetalStorageInstance type or a IO[bytes] type. Required.
        :type request_body_parameters:
         ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance or IO[bytes]
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AzureBareMetalStorageInstance] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body_parameters, (IOBase, bytes)):
            _content = request_body_parameters
        else:
            _json = self._serialize.body(request_body_parameters, "AzureBareMetalStorageInstance")

        _request = build_create_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("AzureBareMetalStorageInstance", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        azure_bare_metal_storage_instance_body_parameter: _models.AzureBareMetalStorageInstanceBody,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Patches the Tags field of a Azure BareMetalStorage instance.

        Patches the Tags field of a Azure BareMetalStorage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param azure_bare_metal_storage_instance_body_parameter: Request body that only contains the
         Tags and Identity Field. Required.
        :type azure_bare_metal_storage_instance_body_parameter:
         ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstanceBody
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        azure_bare_metal_storage_instance_body_parameter: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Patches the Tags field of a Azure BareMetalStorage instance.

        Patches the Tags field of a Azure BareMetalStorage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param azure_bare_metal_storage_instance_body_parameter: Request body that only contains the
         Tags and Identity Field. Required.
        :type azure_bare_metal_storage_instance_body_parameter: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        resource_group_name: str,
        azure_bare_metal_storage_instance_name: str,
        azure_bare_metal_storage_instance_body_parameter: Union[_models.AzureBareMetalStorageInstanceBody, IO[bytes]],
        **kwargs: Any
    ) -> _models.AzureBareMetalStorageInstance:
        """Patches the Tags field of a Azure BareMetalStorage instance.

        Patches the Tags field of a Azure BareMetalStorage instance for the specified subscription,
        resource group, and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :param azure_bare_metal_storage_instance_body_parameter: Request body that only contains the
         Tags and Identity Field. Is either a AzureBareMetalStorageInstanceBody type or a IO[bytes]
         type. Required.
        :type azure_bare_metal_storage_instance_body_parameter:
         ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstanceBody or IO[bytes]
        :return: AzureBareMetalStorageInstance or the result of cls(response)
        :rtype: ~azure.mgmt.baremetalinfrastructure.models.AzureBareMetalStorageInstance
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AzureBareMetalStorageInstance] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(azure_bare_metal_storage_instance_body_parameter, (IOBase, bytes)):
            _content = azure_bare_metal_storage_instance_body_parameter
        else:
            _json = self._serialize.body(
                azure_bare_metal_storage_instance_body_parameter, "AzureBareMetalStorageInstanceBody"
            )

        _request = build_update_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("AzureBareMetalStorageInstance", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(
        self, resource_group_name: str, azure_bare_metal_storage_instance_name: str, **kwargs: Any
    ) -> None:
        """Delete an AzureBareMetalStorageInstance.

        Deletes an Azure Bare Metal Storage Instance for the specified subscription, resource group,
        and instance name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param azure_bare_metal_storage_instance_name: Name of the Azure Bare Metal Storage Instance,
         also known as the ResourceName. Required.
        :type azure_bare_metal_storage_instance_name: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            resource_group_name=resource_group_name,
            azure_bare_metal_storage_instance_name=azure_bare_metal_storage_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore
