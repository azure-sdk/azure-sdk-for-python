# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.baremetalinfrastructure.aio import BareMetalInfrastructureClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestBareMetalInfrastructureAzureBareMetalStorageInstancesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(BareMetalInfrastructureClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription(self, resource_group):
        response = self.client.azure_bare_metal_storage_instances.list_by_subscription(
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.azure_bare_metal_storage_instances.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.azure_bare_metal_storage_instances.get(
            resource_group_name=resource_group.name,
            azure_bare_metal_storage_instance_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create(self, resource_group):
        response = await self.client.azure_bare_metal_storage_instances.create(
            resource_group_name=resource_group.name,
            azure_bare_metal_storage_instance_name="str",
            request_body_parameters={
                "location": "str",
                "azureBareMetalStorageInstanceUniqueIdentifier": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "name": "str",
                "storageProperties": {
                    "generation": "str",
                    "hardwareType": "str",
                    "offeringType": "str",
                    "provisioningState": "str",
                    "storageBillingProperties": {"azureBareMetalStorageInstanceSize": "str", "billingMode": "str"},
                    "storageType": "str",
                    "workloadType": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.azure_bare_metal_storage_instances.update(
            resource_group_name=resource_group.name,
            azure_bare_metal_storage_instance_name="str",
            azure_bare_metal_storage_instance_body_parameter={
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "tags": {"str": "str"},
            },
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.azure_bare_metal_storage_instances.delete(
            resource_group_name=resource_group.name,
            azure_bare_metal_storage_instance_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...
