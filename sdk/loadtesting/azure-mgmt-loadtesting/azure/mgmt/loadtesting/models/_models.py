# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class CheckQuotaAvailabilityResponse(_model_base.Model):
    """Check quota availability response object.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar properties: Check quota availability response properties.
    :vartype properties: ~azure.mgmt.loadtesting.models.CheckQuotaAvailabilityResponseProperties
    """

    id: str = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     Required."""
    type: str = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\". Required."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    properties: Optional["_models.CheckQuotaAvailabilityResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Check quota availability response properties."""

    __flattened_items = ["is_available", "availability_status"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CheckQuotaAvailabilityResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CheckQuotaAvailabilityResponseProperties(_model_base.Model):
    """Check quota availability response properties.

    :ivar is_available: True/False indicating whether the quota request be granted based on
     availability.
    :vartype is_available: bool
    :ivar availability_status: Message indicating additional details to add to quota support
     request.
    :vartype availability_status: str
    """

    is_available: Optional[bool] = rest_field(
        name="isAvailable", visibility=["read", "create", "update", "delete", "query"]
    )
    """True/False indicating whether the quota request be granted based on availability."""
    availability_status: Optional[str] = rest_field(
        name="availabilityStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Message indicating additional details to add to quota support request."""

    @overload
    def __init__(
        self,
        *,
        is_available: Optional[bool] = None,
        availability_status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EncryptionProperties(_model_base.Model):
    """Key and identity details for Customer Managed Key encryption of load test resource.

    :ivar identity: All identity configuration for Customer-managed key settings defining which
     identity should be used to auth to Key Vault.
    :vartype identity: ~azure.mgmt.loadtesting.models.EncryptionPropertiesIdentity
    :ivar key_url: key encryption key Url, versioned. Ex:
     `https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
     <https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78>`_ or
     `https://contosovault.vault.azure.net/keys/contosokek
     <https://contosovault.vault.azure.net/keys/contosokek>`_.
    :vartype key_url: str
    """

    identity: Optional["_models.EncryptionPropertiesIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """All identity configuration for Customer-managed key settings defining which identity should be
     used to auth to Key Vault."""
    key_url: Optional[str] = rest_field(name="keyUrl", visibility=["read", "create", "update", "delete", "query"])
    """key encryption key Url, versioned. Ex:
     `https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78
     <https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78>`_ or
     `https://contosovault.vault.azure.net/keys/contosokek
     <https://contosovault.vault.azure.net/keys/contosokek>`_."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.EncryptionPropertiesIdentity"] = None,
        key_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EncryptionPropertiesIdentity(_model_base.Model):
    """All identity configuration for Customer-managed key settings defining which identity should be
    used to auth to Key Vault.

    :ivar type: Managed identity type to use for accessing encryption key Url. Known values are:
     "SystemAssigned" and "UserAssigned".
    :vartype type: str or ~azure.mgmt.loadtesting.models.Type
    :ivar resource_id: User assigned identity to use for accessing key encryption key Url. Ex:
     /subscriptions/a0a0a0a0-bbbb-cccd-dddd-e1e1e1e1e1e1/resourceGroups/<resource
     group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId.
    :vartype resource_id: str
    """

    type: Optional[Union[str, "_models.Type"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Managed identity type to use for accessing encryption key Url. Known values are:
     \"SystemAssigned\" and \"UserAssigned\"."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """User assigned identity to use for accessing key encryption key Url. Ex:
     /subscriptions/a0a0a0a0-bbbb-cccd-dddd-e1e1e1e1e1e1/resourceGroups/<resource
     group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.Type"]] = None,
        resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EndpointDependency(_model_base.Model):
    """A domain name and connection details used to access a dependency.

    :ivar domain_name: The domain name of the dependency. Domain names may be fully qualified or
     may contain a * wildcard. Required.
    :vartype domain_name: str
    :ivar description: Human-readable supplemental information about the dependency and when it is
     applicable.
    :vartype description: str
    :ivar endpoint_details: The list of connection details for this endpoint.
    :vartype endpoint_details: list[~azure.mgmt.loadtesting.models.EndpointDetail]
    """

    domain_name: str = rest_field(name="domainName", visibility=["read"])
    """The domain name of the dependency. Domain names may be fully qualified or may contain a *
     wildcard. Required."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Human-readable supplemental information about the dependency and when it is applicable."""
    endpoint_details: Optional[List["_models.EndpointDetail"]] = rest_field(name="endpointDetails", visibility=["read"])
    """The list of connection details for this endpoint."""


class EndpointDetail(_model_base.Model):
    """Details about the connection between the Batch service and the endpoint.

    :ivar port: The port an endpoint is connected to.
    :vartype port: int
    """

    port: Optional[int] = rest_field(visibility=["read"])
    """The port an endpoint is connected to."""


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.loadtesting.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.loadtesting.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.loadtesting.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LoadTestProperties(_model_base.Model):
    """LoadTest resource properties.

    :ivar description: Description of the resource.
    :vartype description: str
    :ivar provisioning_state: Resource provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", and "Deleted".
    :vartype provisioning_state: str or ~azure.mgmt.loadtesting.models.ResourceState
    :ivar data_plane_uri: Resource data plane URI.
    :vartype data_plane_uri: str
    :ivar encryption: CMK Encryption property.
    :vartype encryption: ~azure.mgmt.loadtesting.models.EncryptionProperties
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the resource."""
    provisioning_state: Optional[Union[str, "_models.ResourceState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Resource provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", and
     \"Deleted\"."""
    data_plane_uri: Optional[str] = rest_field(name="dataPlaneURI", visibility=["read"])
    """Resource data plane URI."""
    encryption: Optional["_models.EncryptionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """CMK Encryption property."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        encryption: Optional["_models.EncryptionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LoadTestResource(TrackedResource):
    """LoadTest details.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.loadtesting.models.LoadTestProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.loadtesting.models.ManagedServiceIdentity
    """

    properties: Optional["_models.LoadTestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.LoadTestProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LoadTestResourceUpdate(_model_base.Model):
    """The type used for update operations of the LoadTestResource.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.loadtesting.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.loadtesting.models.LoadTestResourceUpdateProperties
    """

    identity: Optional["_models.ManagedServiceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.LoadTestResourceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.LoadTestResourceUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LoadTestResourceUpdateProperties(_model_base.Model):
    """The updatable properties of the LoadTestResource.

    :ivar description: Description of the resource.
    :vartype description: str
    :ivar encryption: CMK Encryption property.
    :vartype encryption: ~azure.mgmt.loadtesting.models.EncryptionProperties
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the resource."""
    encryption: Optional["_models.EncryptionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """CMK Encryption property."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        encryption: Optional["_models.EncryptionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_model_base.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.loadtesting.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.loadtesting.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OutboundEnvironmentEndpoint(_model_base.Model):
    """A collection of related endpoints from the same service for which the Batch service requires
    outbound access.

    :ivar category: The type of service that Azure Load Testing connects to.
    :vartype category: str
    :ivar endpoints: The endpoints for this service to which the Batch service makes outbound
     calls.
    :vartype endpoints: list[~azure.mgmt.loadtesting.models.EndpointDependency]
    """

    category: Optional[str] = rest_field(visibility=["read"])
    """The type of service that Azure Load Testing connects to."""
    endpoints: Optional[List["_models.EndpointDependency"]] = rest_field(visibility=["read"])
    """The endpoints for this service to which the Batch service makes outbound calls."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    """


class QuotaBucketRequest(_model_base.Model):
    """Request object of new quota for a quota bucket.

    :ivar properties: Request object of new quota for a quota bucket.
    :vartype properties: ~azure.mgmt.loadtesting.models.QuotaBucketRequestProperties
    """

    properties: Optional["_models.QuotaBucketRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Request object of new quota for a quota bucket."""

    __flattened_items = ["current_usage", "current_quota", "new_quota", "dimensions"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.QuotaBucketRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class QuotaBucketRequestProperties(_model_base.Model):
    """New quota request request properties.

    :ivar current_usage: Current quota usage of the quota bucket.
    :vartype current_usage: int
    :ivar current_quota: Current quota limit of the quota bucket.
    :vartype current_quota: int
    :ivar new_quota: New quota limit of the quota bucket.
    :vartype new_quota: int
    :ivar dimensions: Dimensions for new quota request.
    :vartype dimensions: ~azure.mgmt.loadtesting.models.QuotaBucketRequestPropertiesDimensions
    """

    current_usage: Optional[int] = rest_field(
        name="currentUsage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current quota usage of the quota bucket."""
    current_quota: Optional[int] = rest_field(
        name="currentQuota", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current quota limit of the quota bucket."""
    new_quota: Optional[int] = rest_field(name="newQuota", visibility=["read", "create", "update", "delete", "query"])
    """New quota limit of the quota bucket."""
    dimensions: Optional["_models.QuotaBucketRequestPropertiesDimensions"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Dimensions for new quota request."""

    @overload
    def __init__(
        self,
        *,
        current_usage: Optional[int] = None,
        current_quota: Optional[int] = None,
        new_quota: Optional[int] = None,
        dimensions: Optional["_models.QuotaBucketRequestPropertiesDimensions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QuotaBucketRequestPropertiesDimensions(_model_base.Model):
    """Dimensions for new quota request.

    :ivar subscription_id: Subscription Id dimension for new quota request of the quota bucket.
    :vartype subscription_id: str
    :ivar location: Location dimension for new quota request of the quota bucket.
    :vartype location: str
    """

    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription Id dimension for new quota request of the quota bucket."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Location dimension for new quota request of the quota bucket."""

    @overload
    def __init__(
        self,
        *,
        subscription_id: Optional[str] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QuotaResource(ProxyResource):
    """Quota bucket details object.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.loadtesting.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.loadtesting.models.QuotaResourceProperties
    """

    properties: Optional["_models.QuotaResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.QuotaResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QuotaResourceProperties(_model_base.Model):
    """Quota bucket resource properties.

    :ivar limit: Current quota limit of the quota bucket.
    :vartype limit: int
    :ivar usage: Current quota usage of the quota bucket.
    :vartype usage: int
    :ivar provisioning_state: Resource provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", and "Deleted".
    :vartype provisioning_state: str or ~azure.mgmt.loadtesting.models.ResourceState
    """

    limit: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Current quota limit of the quota bucket."""
    usage: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Current quota usage of the quota bucket."""
    provisioning_state: Optional[Union[str, "_models.ResourceState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Resource provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", and
     \"Deleted\"."""

    @overload
    def __init__(
        self,
        *,
        limit: Optional[int] = None,
        usage: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.loadtesting.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.loadtesting.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_model_base.Model):
    """User assigned identity properties.

    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    """

    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
