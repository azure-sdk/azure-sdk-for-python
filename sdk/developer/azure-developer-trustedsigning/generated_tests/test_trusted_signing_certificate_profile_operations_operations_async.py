# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import TrustedSigningPreparer
from testpreparer_async import TrustedSigningClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTrustedSigningCertificateProfileOperationsOperationsAsync(TrustedSigningClientTestBaseAsync):
    @TrustedSigningPreparer()
    @recorded_by_proxy_async
    async def test_certificate_profile_operations_get_signing_status(self, trustedsigning_endpoint):
        client = self.create_async_client(endpoint=trustedsigning_endpoint)
        response = await client.certificate_profile_operations.get_signing_status(
            account_name="str",
            certificate_profile="str",
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TrustedSigningPreparer()
    @recorded_by_proxy_async
    async def test_certificate_profile_operations_get_sign_root_certificate(self, trustedsigning_endpoint):
        client = self.create_async_client(endpoint=trustedsigning_endpoint)
        response = await client.certificate_profile_operations.get_sign_root_certificate(
            account_name="str",
            certificate_profile="str",
        )

        # please add some check logic here by yourself
        # ...

    @TrustedSigningPreparer()
    @recorded_by_proxy_async
    async def test_certificate_profile_operations_list_extended_key_usages(self, trustedsigning_endpoint):
        client = self.create_async_client(endpoint=trustedsigning_endpoint)
        response = client.certificate_profile_operations.list_extended_key_usages(
            account_name="str",
            certificate_profile="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TrustedSigningPreparer()
    @recorded_by_proxy_async
    async def test_certificate_profile_operations_begin_sign(self, trustedsigning_endpoint):
        client = self.create_async_client(endpoint=trustedsigning_endpoint)
        response = await (
            await client.certificate_profile_operations.begin_sign(
                account_name="str",
                certificate_profile="str",
                body={
                    "digest": bytes("bytes", encoding="utf-8"),
                    "signatureAlgorithm": "str",
                    "authenticodeHashList": [bytes("bytes", encoding="utf-8")],
                    "fileHashList": [bytes("bytes", encoding="utf-8")],
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
