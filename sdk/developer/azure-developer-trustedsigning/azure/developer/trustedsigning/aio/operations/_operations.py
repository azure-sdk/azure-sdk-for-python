# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, AsyncIterable, AsyncIterator, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core import AsyncPipelineClient
from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ..._serialization import Deserializer, Serializer
from ...operations._operations import (
    build_certificate_profile_operations_get_sign_root_certificate_request,
    build_certificate_profile_operations_get_signing_status_request,
    build_certificate_profile_operations_list_extended_key_usages_request,
    build_certificate_profile_operations_sign_request,
)
from .._configuration import TrustedSigningClientConfiguration

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class CertificateProfileOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.trustedsigning.aio.TrustedSigningClient`'s
        :attr:`certificate_profile_operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: TrustedSigningClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_signing_status(
        self, account_name: str, certificate_profile: str, operation_id: str, **kwargs: Any
    ) -> _models.OperationStatusSignResultError:
        """Gets the status of a signing operation.

        This status operation requires that a Sign request has been submitted and the operationId is
        known.

        :param account_name: Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Signing Certificate profile name. Required.
        :type certificate_profile: str
        :param operation_id: The unique ID of the operation. Required.
        :type operation_id: str
        :return: OperationStatusSignResultError. The OperationStatusSignResultError is compatible with
         MutableMapping
        :rtype: ~azure.developer.trustedsigning.models.OperationStatusSignResultError
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.OperationStatusSignResultError] = kwargs.pop("cls", None)

        _request = build_certificate_profile_operations_get_signing_status_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            operation_id=operation_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.OperationStatusSignResultError, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_sign_root_certificate(
        self, account_name: str, certificate_profile: str, **kwargs: Any
    ) -> AsyncIterator[bytes]:
        """Gets the signing root certificate on the certificate chain for that account and profile name.

        The root certificate is generated as part of the initial account creation and it is used to
        sign the bits for the profile provided.

        :param account_name: Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Signing Certificate profile name. Required.
        :type certificate_profile: str
        :return: AsyncIterator[bytes]
        :rtype: AsyncIterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        _request = build_certificate_profile_operations_get_sign_root_certificate_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_extended_key_usages(
        self, account_name: str, certificate_profile: str, **kwargs: Any
    ) -> AsyncIterable["_models.ExtendedKeyUsage"]:
        """Gets a list of extended key usage object identifiers that are allowed for this account and
        profile combination.

        The list of extended key usages are used to determine the purpose of the certificate usage as
        part of the signing operation.

        :param account_name: Azure Trusted Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Trusted Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :return: An iterator like instance of ExtendedKeyUsage
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.trustedsigning.models.ExtendedKeyUsage]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.ExtendedKeyUsage]] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_certificate_profile_operations_list_extended_key_usages_request(
                    account_name=account_name,
                    certificate_profile=certificate_profile,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ExtendedKeyUsage], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    async def _sign_initial(
        self,
        account_name: str,
        certificate_profile: str,
        body: Union[_models.SigningPayloadOptions, JSON, IO[bytes]],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_certificate_profile_operations_sign_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            client_version=client_version,
            x_correlation_id=x_correlation_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            try:
                await response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: _models.SigningPayloadOptions,
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SignResult]:
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Trusted Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Trusted Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Body parameter. Required.
        :type body: ~azure.developer.trustedsigning.models.SigningPayloadOptions
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SignResult. The SignResult is compatible
         with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.developer.trustedsigning.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: JSON,
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SignResult]:
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Trusted Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Trusted Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Body parameter. Required.
        :type body: JSON
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SignResult. The SignResult is compatible
         with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.developer.trustedsigning.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: IO[bytes],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SignResult]:
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Trusted Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Trusted Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Body parameter. Required.
        :type body: IO[bytes]
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SignResult. The SignResult is compatible
         with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.developer.trustedsigning.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: Union[_models.SigningPayloadOptions, JSON, IO[bytes]],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SignResult]:
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Trusted Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Trusted Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Body parameter. Is one of the following types: SigningPayloadOptions, JSON,
         IO[bytes] Required.
        :type body: ~azure.developer.trustedsigning.models.SigningPayloadOptions or JSON or IO[bytes]
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :return: An instance of AsyncLROPoller that returns SignResult. The SignResult is compatible
         with MutableMapping
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.developer.trustedsigning.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SignResult] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._sign_initial(
                account_name=account_name,
                certificate_profile=certificate_profile,
                body=body,
                client_version=client_version,
                x_correlation_id=x_correlation_id,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            await raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.SignResult, response.json().get("result"))
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncLROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller[_models.SignResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller[_models.SignResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )
