# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class ExtendedKeyUsage(_model_base.Model):
    """Extended key usage object identifier that are allowable.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar eku: An oid string that represents an eku. Required.
    :vartype eku: str
    """

    eku: str = rest_field(visibility=["read"])
    """An oid string that represents an eku. Required."""


class OperationStatusSignResultError(_model_base.Model):
    """Provides status details for long running operations.


    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.developer.trustedsigning.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.developer.trustedsigning.models.SignResult
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.SignResult"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.SignResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SigningPayloadOptions(_model_base.Model):
    """The artifact request information to be signed by the service.

    All required parameters must be populated in order to send to server.

    :ivar signature_algorithm: The supported signature algorithm identifiers. Required. Known
     values are: "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512",
     and "ES256K".
    :vartype signature_algorithm: str or ~azure.developer.trustedsigning.models.SignatureAlgorithm
    :ivar digest: Content digest to sign. Required.
    :vartype digest: bytes
    :ivar file_hash_list: List of full file digital signatures.
    :vartype file_hash_list: list[bytes]
    :ivar authenticode_hash_list: List of authenticode digital signatures.
    :vartype authenticode_hash_list: list[bytes]
    """

    signature_algorithm: Union[str, "_models.SignatureAlgorithm"] = rest_field(
        name="signatureAlgorithm", visibility=["read", "create", "update", "delete", "query"]
    )
    """The supported signature algorithm identifiers. Required. Known values are: \"RS256\",
     \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\", and
     \"ES256K\"."""
    digest: bytes = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Content digest to sign. Required."""
    file_hash_list: Optional[List[bytes]] = rest_field(
        name="fileHashList", visibility=["read", "create", "update", "delete", "query"], format="base64"
    )
    """List of full file digital signatures."""
    authenticode_hash_list: Optional[List[bytes]] = rest_field(
        name="authenticodeHashList", visibility=["read", "create", "update", "delete", "query"], format="base64"
    )
    """List of authenticode digital signatures."""

    @overload
    def __init__(
        self,
        *,
        signature_algorithm: Union[str, "_models.SignatureAlgorithm"],
        digest: bytes,
        file_hash_list: Optional[List[bytes]] = None,
        authenticode_hash_list: Optional[List[bytes]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SignResult(_model_base.Model):
    """The sign status model.

    :ivar signature: Digital signature of the requested content digest.
    :vartype signature: bytes
    :ivar signing_certificate: Signing certificate corresponding to the private key used to sign
     the requested
     digest.
    :vartype signing_certificate: bytes
    """

    signature: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Digital signature of the requested content digest."""
    signing_certificate: Optional[bytes] = rest_field(
        name="signingCertificate", visibility=["read", "create", "update", "delete", "query"], format="base64"
    )
    """Signing certificate corresponding to the private key used to sign the requested
     digest."""

    @overload
    def __init__(
        self,
        *,
        signature: Optional[bytes] = None,
        signing_certificate: Optional[bytes] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
