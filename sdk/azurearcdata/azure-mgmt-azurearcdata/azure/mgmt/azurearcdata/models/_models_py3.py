# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Literal, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class ActiveDirectoryConnectorDNSDetails(_serialization.Model):
    """DNS server details.

    All required parameters must be populated in order to send to server.

    :ivar domain_name: DNS domain name for which DNS lookups should be forwarded to the Active
     Directory DNS servers.
    :vartype domain_name: str
    :ivar nameserver_ip_addresses: List of Active Directory DNS server IP addresses. Required.
    :vartype nameserver_ip_addresses: list[str]
    :ivar replicas: Replica count for DNS proxy service. Default value is 1.
    :vartype replicas: int
    :ivar prefer_k8_s_dns_for_ptr_lookups: Flag indicating whether to prefer Kubernetes DNS server
     response over AD DNS server response for IP address lookups.
    :vartype prefer_k8_s_dns_for_ptr_lookups: bool
    """

    _validation = {
        "nameserver_ip_addresses": {"required": True},
    }

    _attribute_map = {
        "domain_name": {"key": "domainName", "type": "str"},
        "nameserver_ip_addresses": {"key": "nameserverIPAddresses", "type": "[str]"},
        "replicas": {"key": "replicas", "type": "int"},
        "prefer_k8_s_dns_for_ptr_lookups": {"key": "preferK8sDnsForPtrLookups", "type": "bool"},
    }

    def __init__(
        self,
        *,
        nameserver_ip_addresses: List[str],
        domain_name: Optional[str] = None,
        replicas: int = 1,
        prefer_k8_s_dns_for_ptr_lookups: bool = True,
        **kwargs: Any
    ) -> None:
        """
        :keyword domain_name: DNS domain name for which DNS lookups should be forwarded to the Active
         Directory DNS servers.
        :paramtype domain_name: str
        :keyword nameserver_ip_addresses: List of Active Directory DNS server IP addresses. Required.
        :paramtype nameserver_ip_addresses: list[str]
        :keyword replicas: Replica count for DNS proxy service. Default value is 1.
        :paramtype replicas: int
        :keyword prefer_k8_s_dns_for_ptr_lookups: Flag indicating whether to prefer Kubernetes DNS
         server response over AD DNS server response for IP address lookups.
        :paramtype prefer_k8_s_dns_for_ptr_lookups: bool
        """
        super().__init__(**kwargs)
        self.domain_name = domain_name
        self.nameserver_ip_addresses = nameserver_ip_addresses
        self.replicas = replicas
        self.prefer_k8_s_dns_for_ptr_lookups = prefer_k8_s_dns_for_ptr_lookups


class ActiveDirectoryConnectorDomainDetails(_serialization.Model):
    """Active Directory domain details.

    All required parameters must be populated in order to send to server.

    :ivar realm: Name (uppercase) of the Active Directory domain that this AD connector will be
     associated with. Required.
    :vartype realm: str
    :ivar netbios_domain_name: NETBIOS name of the Active Directory domain.
    :vartype netbios_domain_name: str
    :ivar service_account_provisioning: The service account provisioning mode for this Active
     Directory connector. Known values are: "automatic" and "manual".
    :vartype service_account_provisioning: str or
     ~azure.mgmt.azurearcdata.models.AccountProvisioningMode
    :ivar ou_distinguished_name: The distinguished name of the Active Directory Organizational
     Unit.
    :vartype ou_distinguished_name: str
    :ivar domain_controllers: null.
    :vartype domain_controllers: ~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainControllers
    """

    _validation = {
        "realm": {"required": True},
    }

    _attribute_map = {
        "realm": {"key": "realm", "type": "str"},
        "netbios_domain_name": {"key": "netbiosDomainName", "type": "str"},
        "service_account_provisioning": {"key": "serviceAccountProvisioning", "type": "str"},
        "ou_distinguished_name": {"key": "ouDistinguishedName", "type": "str"},
        "domain_controllers": {"key": "domainControllers", "type": "ActiveDirectoryDomainControllers"},
    }

    def __init__(
        self,
        *,
        realm: str,
        netbios_domain_name: Optional[str] = None,
        service_account_provisioning: Union[str, "_models.AccountProvisioningMode"] = "manual",
        ou_distinguished_name: Optional[str] = None,
        domain_controllers: Optional["_models.ActiveDirectoryDomainControllers"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword realm: Name (uppercase) of the Active Directory domain that this AD connector will be
         associated with. Required.
        :paramtype realm: str
        :keyword netbios_domain_name: NETBIOS name of the Active Directory domain.
        :paramtype netbios_domain_name: str
        :keyword service_account_provisioning: The service account provisioning mode for this Active
         Directory connector. Known values are: "automatic" and "manual".
        :paramtype service_account_provisioning: str or
         ~azure.mgmt.azurearcdata.models.AccountProvisioningMode
        :keyword ou_distinguished_name: The distinguished name of the Active Directory Organizational
         Unit.
        :paramtype ou_distinguished_name: str
        :keyword domain_controllers: null.
        :paramtype domain_controllers: ~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainControllers
        """
        super().__init__(**kwargs)
        self.realm = realm
        self.netbios_domain_name = netbios_domain_name
        self.service_account_provisioning = service_account_provisioning
        self.ou_distinguished_name = ou_distinguished_name
        self.domain_controllers = domain_controllers


class ActiveDirectoryConnectorListResult(_serialization.Model):
    """A list of active directory connectors.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorResource]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ActiveDirectoryConnectorResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ActiveDirectoryConnectorProperties(_serialization.Model):
    """The properties of an Active Directory connector resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar domain_service_account_login_information: Username and password for domain service
     account authentication.
    :vartype domain_service_account_login_information:
     ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar provisioning_state: The provisioning state of the Active Directory connector resource.
    :vartype provisioning_state: str
    :ivar spec: null. Required.
    :vartype spec: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorSpec
    :ivar status: null.
    :vartype status: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorStatus
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "spec": {"required": True},
    }

    _attribute_map = {
        "domain_service_account_login_information": {
            "key": "domainServiceAccountLoginInformation",
            "type": "BasicLoginInformation",
        },
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "spec": {"key": "spec", "type": "ActiveDirectoryConnectorSpec"},
        "status": {"key": "status", "type": "ActiveDirectoryConnectorStatus"},
    }

    def __init__(
        self,
        *,
        spec: "_models.ActiveDirectoryConnectorSpec",
        domain_service_account_login_information: Optional["_models.BasicLoginInformation"] = None,
        status: Optional["_models.ActiveDirectoryConnectorStatus"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword domain_service_account_login_information: Username and password for domain service
         account authentication.
        :paramtype domain_service_account_login_information:
         ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword spec: null. Required.
        :paramtype spec: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorSpec
        :keyword status: null.
        :paramtype status: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorStatus
        """
        super().__init__(**kwargs)
        self.domain_service_account_login_information = domain_service_account_login_information
        self.provisioning_state = None
        self.spec = spec
        self.status = status


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    """


class ActiveDirectoryConnectorResource(ProxyResource):
    """Active directory connector resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar properties: null. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "ActiveDirectoryConnectorProperties"},
    }

    def __init__(self, *, properties: "_models.ActiveDirectoryConnectorProperties", **kwargs: Any) -> None:
        """
        :keyword properties: null. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ActiveDirectoryConnectorSpec(_serialization.Model):
    """The specifications of the AD Kubernetes resource.

    All required parameters must be populated in order to send to server.

    :ivar active_directory: null. Required.
    :vartype active_directory:
     ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorDomainDetails
    :ivar dns: null. Required.
    :vartype dns: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorDNSDetails
    """

    _validation = {
        "active_directory": {"required": True},
        "dns": {"required": True},
    }

    _attribute_map = {
        "active_directory": {"key": "activeDirectory", "type": "ActiveDirectoryConnectorDomainDetails"},
        "dns": {"key": "dns", "type": "ActiveDirectoryConnectorDNSDetails"},
    }

    def __init__(
        self,
        *,
        active_directory: "_models.ActiveDirectoryConnectorDomainDetails",
        dns: "_models.ActiveDirectoryConnectorDNSDetails",
        **kwargs: Any
    ) -> None:
        """
        :keyword active_directory: null. Required.
        :paramtype active_directory:
         ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorDomainDetails
        :keyword dns: null. Required.
        :paramtype dns: ~azure.mgmt.azurearcdata.models.ActiveDirectoryConnectorDNSDetails
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.dns = dns


class ActiveDirectoryConnectorStatus(_serialization.Model):
    """The status of the Kubernetes custom resource.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar last_update_time: The time that the custom resource was last updated.
    :vartype last_update_time: str
    :ivar observed_generation: The version of the replicaSet associated with the AD connector
     custom resource.
    :vartype observed_generation: int
    :ivar state: The state of the AD connector custom resource.
    :vartype state: str
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "last_update_time": {"key": "lastUpdateTime", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        last_update_time: Optional[str] = None,
        observed_generation: Optional[int] = None,
        state: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword last_update_time: The time that the custom resource was last updated.
        :paramtype last_update_time: str
        :keyword observed_generation: The version of the replicaSet associated with the AD connector
         custom resource.
        :paramtype observed_generation: int
        :keyword state: The state of the AD connector custom resource.
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.last_update_time = last_update_time
        self.observed_generation = observed_generation
        self.state = state


class ActiveDirectoryDomainController(_serialization.Model):
    """Information about a domain controller in the AD domain.

    All required parameters must be populated in order to send to server.

    :ivar hostname: Fully-qualified domain name of a domain controller in the AD domain. Required.
    :vartype hostname: str
    """

    _validation = {
        "hostname": {"required": True},
    }

    _attribute_map = {
        "hostname": {"key": "hostname", "type": "str"},
    }

    def __init__(self, *, hostname: str, **kwargs: Any) -> None:
        """
        :keyword hostname: Fully-qualified domain name of a domain controller in the AD domain.
         Required.
        :paramtype hostname: str
        """
        super().__init__(**kwargs)
        self.hostname = hostname


class ActiveDirectoryDomainControllers(_serialization.Model):
    """Details about the Active Directory domain controllers associated with this AD connector
    instance.

    :ivar primary_domain_controller: Information about the Primary Domain Controller (PDC) in the
     AD domain.
    :vartype primary_domain_controller:
     ~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainController
    :ivar secondary_domain_controllers: null.
    :vartype secondary_domain_controllers:
     list[~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainController]
    """

    _attribute_map = {
        "primary_domain_controller": {"key": "primaryDomainController", "type": "ActiveDirectoryDomainController"},
        "secondary_domain_controllers": {
            "key": "secondaryDomainControllers",
            "type": "[ActiveDirectoryDomainController]",
        },
    }

    def __init__(
        self,
        *,
        primary_domain_controller: Optional["_models.ActiveDirectoryDomainController"] = None,
        secondary_domain_controllers: Optional[List["_models.ActiveDirectoryDomainController"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword primary_domain_controller: Information about the Primary Domain Controller (PDC) in
         the AD domain.
        :paramtype primary_domain_controller:
         ~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainController
        :keyword secondary_domain_controllers: null.
        :paramtype secondary_domain_controllers:
         list[~azure.mgmt.azurearcdata.models.ActiveDirectoryDomainController]
        """
        super().__init__(**kwargs)
        self.primary_domain_controller = primary_domain_controller
        self.secondary_domain_controllers = secondary_domain_controllers


class ActiveDirectoryInformation(_serialization.Model):
    """Active Directory information that related to the resource.

    :ivar keytab_information: Keytab information that is used for the Sql Managed Instance when
     Active Directory authentication is used.
    :vartype keytab_information: ~azure.mgmt.azurearcdata.models.KeytabInformation
    """

    _attribute_map = {
        "keytab_information": {"key": "keytabInformation", "type": "KeytabInformation"},
    }

    def __init__(self, *, keytab_information: Optional["_models.KeytabInformation"] = None, **kwargs: Any) -> None:
        """
        :keyword keytab_information: Keytab information that is used for the Sql Managed Instance when
         Active Directory authentication is used.
        :paramtype keytab_information: ~azure.mgmt.azurearcdata.models.KeytabInformation
        """
        super().__init__(**kwargs)
        self.keytab_information = keytab_information


class ArcSqlServerAvailabilityGroupListResult(_serialization.Model):
    """A list of Arc Sql Server Availability Groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of Arc Sql Server Availability Groups.
    :vartype value: list[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlServerAvailabilityGroupResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ArcSqlServerDatabaseListResult(_serialization.Model):
    """A list of Arc Sql Server database.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of  Arc Sql Server database.
    :vartype value: list[~azure.mgmt.azurearcdata.models.SqlServerDatabaseResource]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlServerDatabaseResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class AvailabilityGroupConfigure(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The specifications of the availability group replica configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar endpoint_url: Mirroring endpoint URL of availability group replica.
    :vartype endpoint_url: str
    :ivar availability_mode_description: The Availability Synchronization mode of the availability
     group replica.
    :vartype availability_mode_description: str
    :ivar failover_mode_description: The failover mode of the availability group replica.
    :vartype failover_mode_description: str
    :ivar session_timeout: The time-out period of availability group session replica, in seconds.
    :vartype session_timeout: int
    :ivar primary_role_allow_connections_description: Whether the availability allows all
     connections or only read-write connections.
    :vartype primary_role_allow_connections_description: str
    :ivar secondary_role_allow_connections_description: Whether an availability replica that is
     performing the secondary role (that is, a secondary replica) can accept connections from
     clients.
    :vartype secondary_role_allow_connections_description: str
    :ivar replica_create_date: Date that the replica was created.
    :vartype replica_create_date: ~datetime.datetime
    :ivar replica_modify_date: Date that the replica was modified.
    :vartype replica_modify_date: ~datetime.datetime
    :ivar backup_priority: Represents the user-specified priority for performing backups on this
     replica relative to the other replicas in the same availability group.
    :vartype backup_priority: int
    :ivar read_only_routing_url: Connectivity endpoint (URL) of the read only availability replica.
    :vartype read_only_routing_url: str
    :ivar read_write_routing_url: Connectivity endpoint (URL) of the read write availability
     replica.
    :vartype read_write_routing_url: str
    :ivar seeding_mode_description: Describes seeding mode.
    :vartype seeding_mode_description: str
    """

    _validation = {
        "availability_mode_description": {"readonly": True},
        "failover_mode_description": {"readonly": True},
        "primary_role_allow_connections_description": {"readonly": True},
        "secondary_role_allow_connections_description": {"readonly": True},
        "replica_create_date": {"readonly": True},
        "replica_modify_date": {"readonly": True},
        "seeding_mode_description": {"readonly": True},
    }

    _attribute_map = {
        "endpoint_url": {"key": "endpointUrl", "type": "str"},
        "availability_mode_description": {"key": "availabilityModeDescription", "type": "str"},
        "failover_mode_description": {"key": "failoverModeDescription", "type": "str"},
        "session_timeout": {"key": "sessionTimeout", "type": "int"},
        "primary_role_allow_connections_description": {"key": "primaryRoleAllowConnectionsDescription", "type": "str"},
        "secondary_role_allow_connections_description": {
            "key": "secondaryRoleAllowConnectionsDescription",
            "type": "str",
        },
        "replica_create_date": {"key": "replicaCreateDate", "type": "iso-8601"},
        "replica_modify_date": {"key": "replicaModifyDate", "type": "iso-8601"},
        "backup_priority": {"key": "backupPriority", "type": "int"},
        "read_only_routing_url": {"key": "readOnlyRoutingUrl", "type": "str"},
        "read_write_routing_url": {"key": "readWriteRoutingUrl", "type": "str"},
        "seeding_mode_description": {"key": "seedingModeDescription", "type": "str"},
    }

    def __init__(
        self,
        *,
        endpoint_url: Optional[str] = None,
        session_timeout: Optional[int] = None,
        backup_priority: Optional[int] = None,
        read_only_routing_url: Optional[str] = None,
        read_write_routing_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword endpoint_url: Mirroring endpoint URL of availability group replica.
        :paramtype endpoint_url: str
        :keyword session_timeout: The time-out period of availability group session replica, in
         seconds.
        :paramtype session_timeout: int
        :keyword backup_priority: Represents the user-specified priority for performing backups on this
         replica relative to the other replicas in the same availability group.
        :paramtype backup_priority: int
        :keyword read_only_routing_url: Connectivity endpoint (URL) of the read only availability
         replica.
        :paramtype read_only_routing_url: str
        :keyword read_write_routing_url: Connectivity endpoint (URL) of the read write availability
         replica.
        :paramtype read_write_routing_url: str
        """
        super().__init__(**kwargs)
        self.endpoint_url = endpoint_url
        self.availability_mode_description = None
        self.failover_mode_description = None
        self.session_timeout = session_timeout
        self.primary_role_allow_connections_description = None
        self.secondary_role_allow_connections_description = None
        self.replica_create_date = None
        self.replica_modify_date = None
        self.backup_priority = backup_priority
        self.read_only_routing_url = read_only_routing_url
        self.read_write_routing_url = read_write_routing_url
        self.seeding_mode_description = None


class AvailabilityGroupInfo(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The specifications of the availability group state.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar failure_condition_level: User-defined failure condition level under which an automatic
     failover must be triggered.
    :vartype failure_condition_level: int
    :ivar health_check_timeout: Wait time (in milliseconds) for the sp_server_diagnostics system
     stored procedure to return server-health information, before the server instance is assumed to
     be slow or not responding.
    :vartype health_check_timeout: int
    :ivar automated_backup_preference_description: Preferred location for performing backups on the
     availability databases in this availability group.
    :vartype automated_backup_preference_description: str
    :ivar version: SQL Server availability group current version.
    :vartype version: int
    :ivar basic_features: Specifies whether this is a basic availability group.
    :vartype basic_features: bool
    :ivar dtc_support: Specifies whether DTC support has been enabled for this availability group.
    :vartype dtc_support: bool
    :ivar db_failover: Specifies whether the availability group supports failover for database
     health conditions.
    :vartype db_failover: bool
    :ivar is_distributed: Specifies whether this is a distributed availability group.
    :vartype is_distributed: bool
    :ivar cluster_type_description: SQL Server availability group cluster type description.
    :vartype cluster_type_description: str
    :ivar required_synchronized_secondaries_to_commit: The number of secondary replicas that must
     be in a synchronized state for a commit to complete.
    :vartype required_synchronized_secondaries_to_commit: int
    :ivar is_contained: SQL Server availability group contained system databases.
    :vartype is_contained: bool
    :ivar primary_replica: Name of the server instance that is hosting the current primary replica.
    :vartype primary_replica: str
    :ivar primary_recovery_health_description: Indicates the recovery health of the primary
     replica.
    :vartype primary_recovery_health_description: str
    :ivar secondary_recovery_health_description: Indicates the recovery health of a secondary
     replica.
    :vartype secondary_recovery_health_description: str
    :ivar synchronization_health_description: Reflects a roll-up of the synchronization health of
     all availability replicas in the availability group.
    :vartype synchronization_health_description: str
    :ivar replication_partner_type: Known values are: "SQLServer", "AzureSQLVM",
     "AzureSQLManagedInstance", and "Unknown".
    :vartype replication_partner_type: str or
     ~azure.mgmt.azurearcdata.models.ReplicationPartnerType
    """

    _validation = {
        "automated_backup_preference_description": {"readonly": True},
        "version": {"readonly": True},
        "cluster_type_description": {"readonly": True},
        "primary_replica": {"readonly": True},
        "primary_recovery_health_description": {"readonly": True},
        "secondary_recovery_health_description": {"readonly": True},
        "synchronization_health_description": {"readonly": True},
        "replication_partner_type": {"readonly": True},
    }

    _attribute_map = {
        "failure_condition_level": {"key": "failureConditionLevel", "type": "int"},
        "health_check_timeout": {"key": "healthCheckTimeout", "type": "int"},
        "automated_backup_preference_description": {"key": "automatedBackupPreferenceDescription", "type": "str"},
        "version": {"key": "version", "type": "int"},
        "basic_features": {"key": "basicFeatures", "type": "bool"},
        "dtc_support": {"key": "dtcSupport", "type": "bool"},
        "db_failover": {"key": "dbFailover", "type": "bool"},
        "is_distributed": {"key": "isDistributed", "type": "bool"},
        "cluster_type_description": {"key": "clusterTypeDescription", "type": "str"},
        "required_synchronized_secondaries_to_commit": {
            "key": "requiredSynchronizedSecondariesToCommit",
            "type": "int",
        },
        "is_contained": {"key": "isContained", "type": "bool"},
        "primary_replica": {"key": "primaryReplica", "type": "str"},
        "primary_recovery_health_description": {"key": "primaryRecoveryHealthDescription", "type": "str"},
        "secondary_recovery_health_description": {"key": "secondaryRecoveryHealthDescription", "type": "str"},
        "synchronization_health_description": {"key": "synchronizationHealthDescription", "type": "str"},
        "replication_partner_type": {"key": "replicationPartnerType", "type": "str"},
    }

    def __init__(
        self,
        *,
        failure_condition_level: Optional[int] = None,
        health_check_timeout: Optional[int] = None,
        basic_features: Optional[bool] = None,
        dtc_support: Optional[bool] = None,
        db_failover: Optional[bool] = None,
        is_distributed: Optional[bool] = None,
        required_synchronized_secondaries_to_commit: Optional[int] = None,
        is_contained: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword failure_condition_level: User-defined failure condition level under which an automatic
         failover must be triggered.
        :paramtype failure_condition_level: int
        :keyword health_check_timeout: Wait time (in milliseconds) for the sp_server_diagnostics system
         stored procedure to return server-health information, before the server instance is assumed to
         be slow or not responding.
        :paramtype health_check_timeout: int
        :keyword basic_features: Specifies whether this is a basic availability group.
        :paramtype basic_features: bool
        :keyword dtc_support: Specifies whether DTC support has been enabled for this availability
         group.
        :paramtype dtc_support: bool
        :keyword db_failover: Specifies whether the availability group supports failover for database
         health conditions.
        :paramtype db_failover: bool
        :keyword is_distributed: Specifies whether this is a distributed availability group.
        :paramtype is_distributed: bool
        :keyword required_synchronized_secondaries_to_commit: The number of secondary replicas that
         must be in a synchronized state for a commit to complete.
        :paramtype required_synchronized_secondaries_to_commit: int
        :keyword is_contained: SQL Server availability group contained system databases.
        :paramtype is_contained: bool
        """
        super().__init__(**kwargs)
        self.failure_condition_level = failure_condition_level
        self.health_check_timeout = health_check_timeout
        self.automated_backup_preference_description = None
        self.version = None
        self.basic_features = basic_features
        self.dtc_support = dtc_support
        self.db_failover = db_failover
        self.is_distributed = is_distributed
        self.cluster_type_description = None
        self.required_synchronized_secondaries_to_commit = required_synchronized_secondaries_to_commit
        self.is_contained = is_contained
        self.primary_replica = None
        self.primary_recovery_health_description = None
        self.secondary_recovery_health_description = None
        self.synchronization_health_description = None
        self.replication_partner_type = None


class AvailabilityGroupState(_serialization.Model):
    """The specifications of the availability group state.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar availability_group_replica_role: Current Always On availability groups role of the
     availability group replica.
    :vartype availability_group_replica_role: str
    :ivar operational_state_description: Current operational state of the availability group
     replica.
    :vartype operational_state_description: str
    :ivar recovery_health_description: Recovery health of the availability group replica.
    :vartype recovery_health_description: str
    :ivar synchronization_health_description: Reflects a rollup of the database synchronization
     state (synchronization_state) of all joined availability databases (also known as replicas) and
     the availability mode of the replica (synchronous-commit or asynchronous-commit mode). The
     rollup will reflect the least healthy accumulated state the databases on the replica.
    :vartype synchronization_health_description: str
    :ivar connected_state_description: Whether a secondary replica is currently connected to the
     primary replica.
    :vartype connected_state_description: str
    :ivar last_connect_error_description: Text description of the last connection error of the
     availability group replica.
    :vartype last_connect_error_description: str
    :ivar last_connect_error_timestamp: Date and time timestamp indicating when the last connect
     error occurred.
    :vartype last_connect_error_timestamp: ~datetime.datetime
    """

    _validation = {
        "availability_group_replica_role": {"readonly": True},
        "operational_state_description": {"readonly": True},
        "recovery_health_description": {"readonly": True},
        "synchronization_health_description": {"readonly": True},
        "connected_state_description": {"readonly": True},
        "last_connect_error_description": {"readonly": True},
        "last_connect_error_timestamp": {"readonly": True},
    }

    _attribute_map = {
        "availability_group_replica_role": {"key": "availabilityGroupReplicaRole", "type": "str"},
        "operational_state_description": {"key": "operationalStateDescription", "type": "str"},
        "recovery_health_description": {"key": "recoveryHealthDescription", "type": "str"},
        "synchronization_health_description": {"key": "synchronizationHealthDescription", "type": "str"},
        "connected_state_description": {"key": "connectedStateDescription", "type": "str"},
        "last_connect_error_description": {"key": "lastConnectErrorDescription", "type": "str"},
        "last_connect_error_timestamp": {"key": "lastConnectErrorTimestamp", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.availability_group_replica_role = None
        self.operational_state_description = None
        self.recovery_health_description = None
        self.synchronization_health_description = None
        self.connected_state_description = None
        self.last_connect_error_description = None
        self.last_connect_error_timestamp = None


class BackupPolicy(_serialization.Model):
    """The backup profile for the SQL server.

    :ivar retention_period_days: The retention period for all the databases in this managed
     instance.
    :vartype retention_period_days: int
    :ivar full_backup_days: The value indicating days between full backups.
    :vartype full_backup_days: int
    :ivar differential_backup_hours: The differential backup interval in hours. Known values are:
     12 and 24.
    :vartype differential_backup_hours: int or
     ~azure.mgmt.azurearcdata.models.DifferentialBackupHours
    :ivar transaction_log_backup_minutes: The value indicating minutes between transaction log
     backups.
    :vartype transaction_log_backup_minutes: int
    """

    _validation = {
        "retention_period_days": {"maximum": 35, "minimum": 0},
        "full_backup_days": {"maximum": 7, "minimum": 0},
        "transaction_log_backup_minutes": {"maximum": 60, "minimum": 0},
    }

    _attribute_map = {
        "retention_period_days": {"key": "retentionPeriodDays", "type": "int"},
        "full_backup_days": {"key": "fullBackupDays", "type": "int"},
        "differential_backup_hours": {"key": "differentialBackupHours", "type": "int"},
        "transaction_log_backup_minutes": {"key": "transactionLogBackupMinutes", "type": "int"},
    }

    def __init__(
        self,
        *,
        retention_period_days: Optional[int] = None,
        full_backup_days: Optional[int] = None,
        differential_backup_hours: Optional[Union[int, "_models.DifferentialBackupHours"]] = None,
        transaction_log_backup_minutes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_days: The retention period for all the databases in this managed
         instance.
        :paramtype retention_period_days: int
        :keyword full_backup_days: The value indicating days between full backups.
        :paramtype full_backup_days: int
        :keyword differential_backup_hours: The differential backup interval in hours. Known values
         are: 12 and 24.
        :paramtype differential_backup_hours: int or
         ~azure.mgmt.azurearcdata.models.DifferentialBackupHours
        :keyword transaction_log_backup_minutes: The value indicating minutes between transaction log
         backups.
        :paramtype transaction_log_backup_minutes: int
        """
        super().__init__(**kwargs)
        self.retention_period_days = retention_period_days
        self.full_backup_days = full_backup_days
        self.differential_backup_hours = differential_backup_hours
        self.transaction_log_backup_minutes = transaction_log_backup_minutes


class BasicLoginInformation(_serialization.Model):
    """Username and password for basic login authentication.

    :ivar username: Login username.
    :vartype username: str
    :ivar password: Login password.
    :vartype password: str
    """

    _attribute_map = {
        "username": {"key": "username", "type": "str"},
        "password": {"key": "password", "type": "str"},
    }

    def __init__(self, *, username: Optional[str] = None, password: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword username: Login username.
        :paramtype username: str
        :keyword password: Login password.
        :paramtype password: str
        """
        super().__init__(**kwargs)
        self.username = username
        self.password = password


class CommonSku(_serialization.Model):
    """The resource model definition representing SKU for ARM resources.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU.  It is typically a letter+number code. Required.
    :vartype name: str
    :ivar dev: Whether dev/test is enabled. When the dev field is set to true, the resource is used
     for dev/test purpose.
    :vartype dev: bool
    :ivar size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :vartype size: str
    :ivar family: If the service has different generations of hardware, for the same SKU, then that
     can be captured here.
    :vartype family: str
    :ivar capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :vartype capacity: int
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "dev": {"key": "dev", "type": "bool"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        dev: bool = True,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the SKU.  It is typically a letter+number code. Required.
        :paramtype name: str
        :keyword dev: Whether dev/test is enabled. When the dev field is set to true, the resource is
         used for dev/test purpose.
        :paramtype dev: bool
        :keyword size: The SKU size. When the name field is the combination of tier and some other
         value, this would be the standalone code.
        :paramtype size: str
        :keyword family: If the service has different generations of hardware, for the same SKU, then
         that can be captured here.
        :paramtype family: str
        :keyword capacity: If the SKU supports scale out/in then the capacity integer should be
         included. If scale out/in is not possible for the resource this may be omitted.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.dev = dev
        self.size = size
        self.family = family
        self.capacity = capacity


class DataControllerProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The data controller properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar infrastructure: The infrastructure the data controller is running on. Known values are:
     "azure", "gcp", "aws", "alibaba", "onpremises", and "other".
    :vartype infrastructure: str or ~azure.mgmt.azurearcdata.models.Infrastructure
    :ivar on_premise_property: Properties from the Kubernetes data controller.
    :vartype on_premise_property: ~azure.mgmt.azurearcdata.models.OnPremiseProperty
    :ivar k8_s_raw: The raw kubernetes information.
    :vartype k8_s_raw: JSON
    :ivar upload_watermark: Properties on upload watermark.  Mostly timestamp for each upload data
     type.
    :vartype upload_watermark: ~azure.mgmt.azurearcdata.models.UploadWatermark
    :ivar last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current date
     time.
    :vartype last_uploaded_date: ~datetime.datetime
    :ivar basic_login_information: Deprecated. Azure Arc Data Services data controller no longer
     expose any endpoint. All traffic are exposed through Kubernetes native API.
    :vartype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar metrics_dashboard_credential: Login credential for metrics dashboard on the Kubernetes
     cluster.
    :vartype metrics_dashboard_credential: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar logs_dashboard_credential: Login credential for logs dashboard on the Kubernetes cluster.
    :vartype logs_dashboard_credential: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar log_analytics_workspace_config: Log analytics workspace id and primary key.
    :vartype log_analytics_workspace_config:
     ~azure.mgmt.azurearcdata.models.LogAnalyticsWorkspaceConfig
    :ivar upload_service_principal: Deprecated. Service principal is deprecated in favor of Arc
     Kubernetes service extension managed identity.
    :vartype upload_service_principal: ~azure.mgmt.azurearcdata.models.UploadServicePrincipal
    :ivar provisioning_state: The provisioning state of the Arc Data Controller resource.
    :vartype provisioning_state: str
    :ivar cluster_id: If a CustomLocation is provided, this contains the ARM id of the connected
     cluster the custom location belongs to.
    :vartype cluster_id: str
    :ivar extension_id: If a CustomLocation is provided, this contains the ARM id of the extension
     the custom location belongs to.
    :vartype extension_id: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "infrastructure": {"key": "infrastructure", "type": "str"},
        "on_premise_property": {"key": "onPremiseProperty", "type": "OnPremiseProperty"},
        "k8_s_raw": {"key": "k8sRaw", "type": "object"},
        "upload_watermark": {"key": "uploadWatermark", "type": "UploadWatermark"},
        "last_uploaded_date": {"key": "lastUploadedDate", "type": "iso-8601"},
        "basic_login_information": {"key": "basicLoginInformation", "type": "BasicLoginInformation"},
        "metrics_dashboard_credential": {"key": "metricsDashboardCredential", "type": "BasicLoginInformation"},
        "logs_dashboard_credential": {"key": "logsDashboardCredential", "type": "BasicLoginInformation"},
        "log_analytics_workspace_config": {"key": "logAnalyticsWorkspaceConfig", "type": "LogAnalyticsWorkspaceConfig"},
        "upload_service_principal": {"key": "uploadServicePrincipal", "type": "UploadServicePrincipal"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "cluster_id": {"key": "clusterId", "type": "str"},
        "extension_id": {"key": "extensionId", "type": "str"},
    }

    def __init__(
        self,
        *,
        infrastructure: Union[str, "_models.Infrastructure"] = "other",
        on_premise_property: Optional["_models.OnPremiseProperty"] = None,
        k8_s_raw: Optional[JSON] = None,
        upload_watermark: Optional["_models.UploadWatermark"] = None,
        last_uploaded_date: Optional[datetime.datetime] = None,
        basic_login_information: Optional["_models.BasicLoginInformation"] = None,
        metrics_dashboard_credential: Optional["_models.BasicLoginInformation"] = None,
        logs_dashboard_credential: Optional["_models.BasicLoginInformation"] = None,
        log_analytics_workspace_config: Optional["_models.LogAnalyticsWorkspaceConfig"] = None,
        upload_service_principal: Optional["_models.UploadServicePrincipal"] = None,
        cluster_id: Optional[str] = None,
        extension_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword infrastructure: The infrastructure the data controller is running on. Known values
         are: "azure", "gcp", "aws", "alibaba", "onpremises", and "other".
        :paramtype infrastructure: str or ~azure.mgmt.azurearcdata.models.Infrastructure
        :keyword on_premise_property: Properties from the Kubernetes data controller.
        :paramtype on_premise_property: ~azure.mgmt.azurearcdata.models.OnPremiseProperty
        :keyword k8_s_raw: The raw kubernetes information.
        :paramtype k8_s_raw: JSON
        :keyword upload_watermark: Properties on upload watermark.  Mostly timestamp for each upload
         data type.
        :paramtype upload_watermark: ~azure.mgmt.azurearcdata.models.UploadWatermark
        :keyword last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current
         date time.
        :paramtype last_uploaded_date: ~datetime.datetime
        :keyword basic_login_information: Deprecated. Azure Arc Data Services data controller no longer
         expose any endpoint. All traffic are exposed through Kubernetes native API.
        :paramtype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword metrics_dashboard_credential: Login credential for metrics dashboard on the Kubernetes
         cluster.
        :paramtype metrics_dashboard_credential: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword logs_dashboard_credential: Login credential for logs dashboard on the Kubernetes
         cluster.
        :paramtype logs_dashboard_credential: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword log_analytics_workspace_config: Log analytics workspace id and primary key.
        :paramtype log_analytics_workspace_config:
         ~azure.mgmt.azurearcdata.models.LogAnalyticsWorkspaceConfig
        :keyword upload_service_principal: Deprecated. Service principal is deprecated in favor of Arc
         Kubernetes service extension managed identity.
        :paramtype upload_service_principal: ~azure.mgmt.azurearcdata.models.UploadServicePrincipal
        :keyword cluster_id: If a CustomLocation is provided, this contains the ARM id of the connected
         cluster the custom location belongs to.
        :paramtype cluster_id: str
        :keyword extension_id: If a CustomLocation is provided, this contains the ARM id of the
         extension the custom location belongs to.
        :paramtype extension_id: str
        """
        super().__init__(**kwargs)
        self.infrastructure = infrastructure
        self.on_premise_property = on_premise_property
        self.k8_s_raw = k8_s_raw
        self.upload_watermark = upload_watermark
        self.last_uploaded_date = last_uploaded_date
        self.basic_login_information = basic_login_information
        self.metrics_dashboard_credential = metrics_dashboard_credential
        self.logs_dashboard_credential = logs_dashboard_credential
        self.log_analytics_workspace_config = log_analytics_workspace_config
        self.upload_service_principal = upload_service_principal
        self.provisioning_state = None
        self.cluster_id = cluster_id
        self.extension_id = extension_id


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class DataControllerResource(TrackedResource):
    """Data controller resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar extended_location: The extendedLocation of the resource.
    :vartype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
    :ivar properties: The data controller's properties. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.DataControllerProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "properties": {"key": "properties", "type": "DataControllerProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.DataControllerProperties",
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword extended_location: The extendedLocation of the resource.
        :paramtype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
        :keyword properties: The data controller's properties. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.DataControllerProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.extended_location = extended_location
        self.properties = properties


class DataControllerUpdate(_serialization.Model):
    """Used for updating a data controller resource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The data controller's properties.
    :vartype properties: ~azure.mgmt.azurearcdata.models.DataControllerProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "DataControllerProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DataControllerProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The data controller's properties.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.DataControllerProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.azurearcdata.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.azurearcdata.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.azurearcdata.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.azurearcdata.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ExtendedLocation(_serialization.Model):
    """The complex type of the extended location.

    :ivar name: The name of the extended location.
    :vartype name: str
    :ivar type: The type of the extended location. "CustomLocation"
    :vartype type: str or ~azure.mgmt.azurearcdata.models.ExtendedLocationTypes
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.ExtendedLocationTypes"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the extended location.
        :paramtype name: str
        :keyword type: The type of the extended location. "CustomLocation"
        :paramtype type: str or ~azure.mgmt.azurearcdata.models.ExtendedLocationTypes
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class FailoverCluster(_serialization.Model):
    """Failover Cluster Instance properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The GUID of the SQL Server's underlying Failover Cluster.
    :vartype id: str
    :ivar network_name: The network name to connect to the SQL FCI.
    :vartype network_name: str
    :ivar sql_instance_ids: The ARM IDs of the Arc SQL Server resources, belonging to the current
     server's Failover cluster.
    :vartype sql_instance_ids: list[str]
    :ivar host_names: The host names which are part of the SQL FCI resource group.
    :vartype host_names: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "network_name": {"readonly": True},
        "sql_instance_ids": {"readonly": True},
        "host_names": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "network_name": {"key": "networkName", "type": "str"},
        "sql_instance_ids": {"key": "sqlInstanceIds", "type": "[str]"},
        "host_names": {"key": "hostNames", "type": "[str]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.network_name = None
        self.sql_instance_ids = None
        self.host_names = None


class FailoverGroupListResult(_serialization.Model):
    """A list of failover groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of failover group results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.FailoverGroupResource]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FailoverGroupResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class FailoverGroupProperties(_serialization.Model):
    """The properties of a failover group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar provisioning_state: The provisioning state of the failover group resource. Known values
     are: "Succeeded", "Failed", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azurearcdata.models.ProvisioningState
    :ivar partner_managed_instance_id: The resource ID of the partner SQL managed instance.
     Required.
    :vartype partner_managed_instance_id: str
    :ivar spec: The specifications of the failover group resource. Required.
    :vartype spec: ~azure.mgmt.azurearcdata.models.FailoverGroupSpec
    :ivar status: The status of the failover group custom resource.
    :vartype status: JSON
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "partner_managed_instance_id": {"required": True},
        "spec": {"required": True},
    }

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "partner_managed_instance_id": {"key": "partnerManagedInstanceId", "type": "str"},
        "spec": {"key": "spec", "type": "FailoverGroupSpec"},
        "status": {"key": "status", "type": "object"},
    }

    def __init__(
        self,
        *,
        partner_managed_instance_id: str,
        spec: "_models.FailoverGroupSpec",
        additional_properties: Optional[Dict[str, Any]] = None,
        status: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword partner_managed_instance_id: The resource ID of the partner SQL managed instance.
         Required.
        :paramtype partner_managed_instance_id: str
        :keyword spec: The specifications of the failover group resource. Required.
        :paramtype spec: ~azure.mgmt.azurearcdata.models.FailoverGroupSpec
        :keyword status: The status of the failover group custom resource.
        :paramtype status: JSON
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.provisioning_state = None
        self.partner_managed_instance_id = partner_managed_instance_id
        self.spec = spec
        self.status = status


class FailoverGroupResource(ProxyResource):
    """A failover group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar properties: null. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.FailoverGroupProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FailoverGroupProperties"},
    }

    def __init__(self, *, properties: "_models.FailoverGroupProperties", **kwargs: Any) -> None:
        """
        :keyword properties: null. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.FailoverGroupProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FailoverGroupSpec(_serialization.Model):
    """The specifications of the failover group resource.

    All required parameters must be populated in order to send to server.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar shared_name: The shared name of the failover group for this SQL managed instance. Both
     SQL managed instance and its partner have to use the same shared name.
    :vartype shared_name: str
    :ivar source_mi: The name of the SQL managed instance with this failover group role.
    :vartype source_mi: str
    :ivar partner_mi: The name of the partner SQL managed instance.
    :vartype partner_mi: str
    :ivar partner_mirroring_url: The mirroring endpoint URL of the partner SQL managed instance.
    :vartype partner_mirroring_url: str
    :ivar partner_mirroring_cert: The mirroring endpoint public certificate for the partner SQL
     managed instance. Only PEM format is supported.
    :vartype partner_mirroring_cert: str
    :ivar partner_sync_mode: The partner sync mode of the SQL managed instance. Known values are:
     "async" and "sync".
    :vartype partner_sync_mode: str or ~azure.mgmt.azurearcdata.models.FailoverGroupPartnerSyncMode
    :ivar role: The role of the SQL managed instance in this failover group. Known values are:
     "primary", "secondary", "force-primary-allow-data-loss", and "force-secondary".
    :vartype role: str or ~azure.mgmt.azurearcdata.models.InstanceFailoverGroupRole
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "shared_name": {"key": "sharedName", "type": "str"},
        "source_mi": {"key": "sourceMI", "type": "str"},
        "partner_mi": {"key": "partnerMI", "type": "str"},
        "partner_mirroring_url": {"key": "partnerMirroringURL", "type": "str"},
        "partner_mirroring_cert": {"key": "partnerMirroringCert", "type": "str"},
        "partner_sync_mode": {"key": "partnerSyncMode", "type": "str"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self,
        *,
        role: Union[str, "_models.InstanceFailoverGroupRole"] = "primary",
        additional_properties: Optional[Dict[str, Any]] = None,
        shared_name: Optional[str] = None,
        source_mi: Optional[str] = None,
        partner_mi: Optional[str] = None,
        partner_mirroring_url: Optional[str] = None,
        partner_mirroring_cert: Optional[str] = None,
        partner_sync_mode: Union[str, "_models.FailoverGroupPartnerSyncMode"] = "async",
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword shared_name: The shared name of the failover group for this SQL managed instance. Both
         SQL managed instance and its partner have to use the same shared name.
        :paramtype shared_name: str
        :keyword source_mi: The name of the SQL managed instance with this failover group role.
        :paramtype source_mi: str
        :keyword partner_mi: The name of the partner SQL managed instance.
        :paramtype partner_mi: str
        :keyword partner_mirroring_url: The mirroring endpoint URL of the partner SQL managed instance.
        :paramtype partner_mirroring_url: str
        :keyword partner_mirroring_cert: The mirroring endpoint public certificate for the partner SQL
         managed instance. Only PEM format is supported.
        :paramtype partner_mirroring_cert: str
        :keyword partner_sync_mode: The partner sync mode of the SQL managed instance. Known values
         are: "async" and "sync".
        :paramtype partner_sync_mode: str or
         ~azure.mgmt.azurearcdata.models.FailoverGroupPartnerSyncMode
        :keyword role: The role of the SQL managed instance in this failover group. Known values are:
         "primary", "secondary", "force-primary-allow-data-loss", and "force-secondary".
        :paramtype role: str or ~azure.mgmt.azurearcdata.models.InstanceFailoverGroupRole
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.shared_name = shared_name
        self.source_mi = source_mi
        self.partner_mi = partner_mi
        self.partner_mirroring_url = partner_mirroring_url
        self.partner_mirroring_cert = partner_mirroring_cert
        self.partner_sync_mode = partner_sync_mode
        self.role = role


class K8SActiveDirectory(_serialization.Model):
    """The kubernetes active directory information.

    :ivar connector:
    :vartype connector: ~azure.mgmt.azurearcdata.models.K8SActiveDirectoryConnector
    :ivar account_name: Account name for AAD.
    :vartype account_name: str
    :ivar keytab_secret: Keytab secret used to authenticate with Active Directory.
    :vartype keytab_secret: str
    :ivar encryption_types: An array of encryption types.
    :vartype encryption_types: list[str]
    """

    _attribute_map = {
        "connector": {"key": "connector", "type": "K8SActiveDirectoryConnector"},
        "account_name": {"key": "accountName", "type": "str"},
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
        "encryption_types": {"key": "encryptionTypes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        connector: Optional["_models.K8SActiveDirectoryConnector"] = None,
        account_name: Optional[str] = None,
        keytab_secret: Optional[str] = None,
        encryption_types: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connector:
        :paramtype connector: ~azure.mgmt.azurearcdata.models.K8SActiveDirectoryConnector
        :keyword account_name: Account name for AAD.
        :paramtype account_name: str
        :keyword keytab_secret: Keytab secret used to authenticate with Active Directory.
        :paramtype keytab_secret: str
        :keyword encryption_types: An array of encryption types.
        :paramtype encryption_types: list[str]
        """
        super().__init__(**kwargs)
        self.connector = connector
        self.account_name = account_name
        self.keytab_secret = keytab_secret
        self.encryption_types = encryption_types


class K8SActiveDirectoryConnector(_serialization.Model):
    """K8SActiveDirectoryConnector.

    :ivar name: Name of the connector.
    :vartype name: str
    :ivar namespace: Name space of the connector.
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, namespace: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Name of the connector.
        :paramtype name: str
        :keyword namespace: Name space of the connector.
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class K8SNetworkSettings(_serialization.Model):
    """The kubernetes network settings information.

    :ivar forceencryption: If 1, then SQL Server forces all connections to be encrypted. By
     default, this option is 0.
    :vartype forceencryption: int
    :ivar tlsciphers: Specifies which ciphers are allowed by SQL Server for TLS.
    :vartype tlsciphers: str
    :ivar tlsprotocols: A comma-separated list of which TLS protocols are allowed by SQL Server.
    :vartype tlsprotocols: str
    """

    _attribute_map = {
        "forceencryption": {"key": "forceencryption", "type": "int"},
        "tlsciphers": {"key": "tlsciphers", "type": "str"},
        "tlsprotocols": {"key": "tlsprotocols", "type": "str"},
    }

    def __init__(
        self,
        *,
        forceencryption: Optional[int] = None,
        tlsciphers: Optional[str] = None,
        tlsprotocols: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword forceencryption: If 1, then SQL Server forces all connections to be encrypted. By
         default, this option is 0.
        :paramtype forceencryption: int
        :keyword tlsciphers: Specifies which ciphers are allowed by SQL Server for TLS.
        :paramtype tlsciphers: str
        :keyword tlsprotocols: A comma-separated list of which TLS protocols are allowed by SQL Server.
        :paramtype tlsprotocols: str
        """
        super().__init__(**kwargs)
        self.forceencryption = forceencryption
        self.tlsciphers = tlsciphers
        self.tlsprotocols = tlsprotocols


class K8SResourceRequirements(_serialization.Model):
    """The kubernetes resource limits and requests used to restrict or reserve resource usage.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar requests: Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu'
     request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default
     'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and
     maximum 'memory' is '128Gi'.
    :vartype requests: dict[str, str]
    :ivar limits: Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request
     must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory'
     is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum
     'memory' is '128Gi'.
    :vartype limits: dict[str, str]
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "requests": {"key": "requests", "type": "{str}"},
        "limits": {"key": "limits", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        requests: Optional[Dict[str, str]] = None,
        limits: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword requests: Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu'
         request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default
         'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and
         maximum 'memory' is '128Gi'.
        :paramtype requests: dict[str, str]
        :keyword limits: Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request
         must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory'
         is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum
         'memory' is '128Gi'.
        :paramtype limits: dict[str, str]
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.requests = requests
        self.limits = limits


class K8SScheduling(_serialization.Model):
    """The kubernetes scheduling information.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar default: The kubernetes scheduling options. It describes restrictions used to help
     Kubernetes select appropriate nodes to host the database service.
    :vartype default: ~azure.mgmt.azurearcdata.models.K8SSchedulingOptions
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "default": {"key": "default", "type": "K8SSchedulingOptions"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        default: Optional["_models.K8SSchedulingOptions"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword default: The kubernetes scheduling options. It describes restrictions used to help
         Kubernetes select appropriate nodes to host the database service.
        :paramtype default: ~azure.mgmt.azurearcdata.models.K8SSchedulingOptions
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.default = default


class K8SSchedulingOptions(_serialization.Model):
    """The kubernetes scheduling options. It describes restrictions used to help Kubernetes select
    appropriate nodes to host the database service.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar resources: The kubernetes resource limits and requests used to restrict or reserve
     resource usage.
    :vartype resources: ~azure.mgmt.azurearcdata.models.K8SResourceRequirements
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "resources": {"key": "resources", "type": "K8SResourceRequirements"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        resources: Optional["_models.K8SResourceRequirements"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword resources: The kubernetes resource limits and requests used to restrict or reserve
         resource usage.
        :paramtype resources: ~azure.mgmt.azurearcdata.models.K8SResourceRequirements
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.resources = resources


class K8SSecurity(_serialization.Model):
    """The kubernetes security information.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar admin_login_secret: Admin login secret key.
    :vartype admin_login_secret: str
    :ivar service_certificate_secret: Service certificate secret used.
    :vartype service_certificate_secret: str
    :ivar active_directory: The kubernetes active directory information.
    :vartype active_directory: ~azure.mgmt.azurearcdata.models.K8SActiveDirectory
    :ivar transparent_data_encryption: Transparent data encryption information.
    :vartype transparent_data_encryption:
     ~azure.mgmt.azurearcdata.models.K8StransparentDataEncryption
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {"key": "serviceCertificateSecret", "type": "str"},
        "active_directory": {"key": "activeDirectory", "type": "K8SActiveDirectory"},
        "transparent_data_encryption": {"key": "transparentDataEncryption", "type": "K8StransparentDataEncryption"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        active_directory: Optional["_models.K8SActiveDirectory"] = None,
        transparent_data_encryption: Optional["_models.K8StransparentDataEncryption"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword admin_login_secret: Admin login secret key.
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret: Service certificate secret used.
        :paramtype service_certificate_secret: str
        :keyword active_directory: The kubernetes active directory information.
        :paramtype active_directory: ~azure.mgmt.azurearcdata.models.K8SActiveDirectory
        :keyword transparent_data_encryption: Transparent data encryption information.
        :paramtype transparent_data_encryption:
         ~azure.mgmt.azurearcdata.models.K8StransparentDataEncryption
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret
        self.active_directory = active_directory
        self.transparent_data_encryption = transparent_data_encryption


class K8SSettings(_serialization.Model):
    """The kubernetes settings information.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar network: The kubernetes network settings information.
    :vartype network: ~azure.mgmt.azurearcdata.models.K8SNetworkSettings
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "network": {"key": "network", "type": "K8SNetworkSettings"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        network: Optional["_models.K8SNetworkSettings"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword network: The kubernetes network settings information.
        :paramtype network: ~azure.mgmt.azurearcdata.models.K8SNetworkSettings
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.network = network


class K8StransparentDataEncryption(_serialization.Model):
    """Transparent data encryption information.

    :ivar mode: Transparent data encryption mode. Can be Service Managed, Customer managed or
     disabled.
    :vartype mode: str
    :ivar protector_secret: Protector secret for customer managed Transparent data encryption mode.
    :vartype protector_secret: str
    """

    _attribute_map = {
        "mode": {"key": "mode", "type": "str"},
        "protector_secret": {"key": "protectorSecret", "type": "str"},
    }

    def __init__(self, *, mode: Optional[str] = None, protector_secret: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword mode: Transparent data encryption mode. Can be Service Managed, Customer managed or
         disabled.
        :paramtype mode: str
        :keyword protector_secret: Protector secret for customer managed Transparent data encryption
         mode.
        :paramtype protector_secret: str
        """
        super().__init__(**kwargs)
        self.mode = mode
        self.protector_secret = protector_secret


class KeytabInformation(_serialization.Model):
    """Keytab used for authenticate with Active Directory.

    :ivar keytab: A base64-encoded keytab.
    :vartype keytab: str
    """

    _attribute_map = {
        "keytab": {"key": "keytab", "type": "str"},
    }

    def __init__(self, *, keytab: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword keytab: A base64-encoded keytab.
        :paramtype keytab: str
        """
        super().__init__(**kwargs)
        self.keytab = keytab


class LogAnalyticsWorkspaceConfig(_serialization.Model):
    """Log analytics workspace id and primary key.

    :ivar workspace_id: Azure Log Analytics workspace ID.
    :vartype workspace_id: str
    :ivar primary_key: Primary key of the workspace.
    :vartype primary_key: str
    """

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "primary_key": {"key": "primaryKey", "type": "str"},
    }

    def __init__(self, *, workspace_id: Optional[str] = None, primary_key: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword workspace_id: Azure Log Analytics workspace ID.
        :paramtype workspace_id: str
        :keyword primary_key: Primary key of the workspace.
        :paramtype primary_key: str
        """
        super().__init__(**kwargs)
        self.workspace_id = workspace_id
        self.primary_key = primary_key


class Monitoring(_serialization.Model):
    """The monitoring configuration.

    :ivar enabled: Indicates if monitoring is enabled for this SQL Server instance.
    :vartype enabled: bool
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Indicates if monitoring is enabled for this SQL Server instance.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.enabled = enabled


class OnPremiseProperty(_serialization.Model):
    """Properties from the Kubernetes data controller.

    All required parameters must be populated in order to send to server.

    :ivar id: A globally unique ID identifying the associated Kubernetes cluster. Required.
    :vartype id: str
    :ivar public_signing_key: Certificate that contains the Kubernetes cluster public key used to
     verify signing. Required.
    :vartype public_signing_key: str
    :ivar signing_certificate_thumbprint: Unique thumbprint returned to customer to verify the
     certificate being uploaded.
    :vartype signing_certificate_thumbprint: str
    """

    _validation = {
        "id": {"required": True},
        "public_signing_key": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "public_signing_key": {"key": "publicSigningKey", "type": "str"},
        "signing_certificate_thumbprint": {"key": "signingCertificateThumbprint", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        public_signing_key: str,
        signing_certificate_thumbprint: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: A globally unique ID identifying the associated Kubernetes cluster. Required.
        :paramtype id: str
        :keyword public_signing_key: Certificate that contains the Kubernetes cluster public key used
         to verify signing. Required.
        :paramtype public_signing_key: str
        :keyword signing_certificate_thumbprint: Unique thumbprint returned to customer to verify the
         certificate being uploaded.
        :paramtype signing_certificate_thumbprint: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.public_signing_key = public_signing_key
        self.signing_certificate_thumbprint = signing_certificate_thumbprint


class Operation(_serialization.Model):
    """Azure Data Services on Azure Arc operation definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operation being performed on this particular object. Required.
    :vartype name: str
    :ivar display: The localized display information for this particular operation / action.
     Required.
    :vartype display: ~azure.mgmt.azurearcdata.models.OperationDisplay
    :ivar origin: The intended executor of the operation. Known values are: "user" and "system".
    :vartype origin: str or ~azure.mgmt.azurearcdata.models.OperationOrigin
    :ivar is_data_action: Indicates whether the operation is a data action. Required.
    :vartype is_data_action: bool
    :ivar properties: Additional descriptions for the operation.
    :vartype properties: dict[str, any]
    """

    _validation = {
        "name": {"required": True},
        "display": {"required": True},
        "origin": {"readonly": True},
        "is_data_action": {"required": True},
        "properties": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "properties": {"key": "properties", "type": "{object}"},
    }

    def __init__(self, *, name: str, display: "_models.OperationDisplay", is_data_action: bool, **kwargs: Any) -> None:
        """
        :keyword name: The name of the operation being performed on this particular object. Required.
        :paramtype name: str
        :keyword display: The localized display information for this particular operation / action.
         Required.
        :paramtype display: ~azure.mgmt.azurearcdata.models.OperationDisplay
        :keyword is_data_action: Indicates whether the operation is a data action. Required.
        :paramtype is_data_action: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.display = display
        self.origin = None
        self.is_data_action = is_data_action
        self.properties = None


class OperationDisplay(_serialization.Model):
    """Display metadata associated with the operation.

    All required parameters must be populated in order to send to server.

    :ivar provider: The localized friendly form of the resource provider name. Required.
    :vartype provider: str
    :ivar resource: The localized friendly form of the resource type related to this
     action/operation. Required.
    :vartype resource: str
    :ivar operation: The localized friendly name for the operation. Required.
    :vartype operation: str
    :ivar description: The localized friendly description for the operation. Required.
    :vartype description: str
    """

    _validation = {
        "provider": {"required": True},
        "resource": {"required": True},
        "operation": {"required": True},
        "description": {"required": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, provider: str, resource: str, operation: str, description: str, **kwargs: Any) -> None:
        """
        :keyword provider: The localized friendly form of the resource provider name. Required.
        :paramtype provider: str
        :keyword resource: The localized friendly form of the resource type related to this
         action/operation. Required.
        :paramtype resource: str
        :keyword operation: The localized friendly name for the operation. Required.
        :paramtype operation: str
        :keyword description: The localized friendly description for the operation. Required.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationListResult(_serialization.Model):
    """Result of the request to list Azure Data Services on Azure Arc operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.Operation]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class PageOfDataControllerResource(_serialization.Model):
    """A list of data controllers.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.DataControllerResource]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[DataControllerResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.DataControllerResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Array of results.
        :paramtype value: list[~azure.mgmt.azurearcdata.models.DataControllerResource]
        :keyword next_link: Link to retrieve next page of results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PostgresInstance(TrackedResource):
    """A Postgres Instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar extended_location: The extendedLocation of the resource.
    :vartype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
    :ivar properties: null. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.PostgresInstanceProperties
    :ivar sku: Resource sku.
    :vartype sku: ~azure.mgmt.azurearcdata.models.PostgresInstanceSku
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "properties": {"key": "properties", "type": "PostgresInstanceProperties"},
        "sku": {"key": "sku", "type": "PostgresInstanceSku"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.PostgresInstanceProperties",
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        sku: Optional["_models.PostgresInstanceSku"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword extended_location: The extendedLocation of the resource.
        :paramtype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
        :keyword properties: null. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.PostgresInstanceProperties
        :keyword sku: Resource sku.
        :paramtype sku: ~azure.mgmt.azurearcdata.models.PostgresInstanceSku
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.extended_location = extended_location
        self.properties = properties
        self.sku = sku


class PostgresInstanceListResult(_serialization.Model):
    """A list of PostgresInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.PostgresInstance]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PostgresInstance]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class PostgresInstanceProperties(_serialization.Model):
    """Postgres Instance properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar data_controller_id: The data controller id.
    :vartype data_controller_id: str
    :ivar admin: The instance admin.
    :vartype admin: str
    :ivar basic_login_information: Username and password for basic authentication.
    :vartype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar k8_s_raw: The raw kubernetes information.
    :vartype k8_s_raw: JSON
    :ivar last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current date
     time.
    :vartype last_uploaded_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning state of the Azure Arc-enabled PostgreSQL instance.
    :vartype provisioning_state: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "data_controller_id": {"key": "dataControllerId", "type": "str"},
        "admin": {"key": "admin", "type": "str"},
        "basic_login_information": {"key": "basicLoginInformation", "type": "BasicLoginInformation"},
        "k8_s_raw": {"key": "k8sRaw", "type": "object"},
        "last_uploaded_date": {"key": "lastUploadedDate", "type": "iso-8601"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_controller_id: Optional[str] = None,
        admin: Optional[str] = None,
        basic_login_information: Optional["_models.BasicLoginInformation"] = None,
        k8_s_raw: Optional[JSON] = None,
        last_uploaded_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword data_controller_id: The data controller id.
        :paramtype data_controller_id: str
        :keyword admin: The instance admin.
        :paramtype admin: str
        :keyword basic_login_information: Username and password for basic authentication.
        :paramtype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword k8_s_raw: The raw kubernetes information.
        :paramtype k8_s_raw: JSON
        :keyword last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current
         date time.
        :paramtype last_uploaded_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.data_controller_id = data_controller_id
        self.admin = admin
        self.basic_login_information = basic_login_information
        self.k8_s_raw = k8_s_raw
        self.last_uploaded_date = last_uploaded_date
        self.provisioning_state = None


class PostgresInstanceSku(CommonSku):
    """The resource model definition representing SKU for Azure Database for PostgresSQL - Azure Arc.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU.  It is typically a letter+number code. Required.
    :vartype name: str
    :ivar dev: Whether dev/test is enabled. When the dev field is set to true, the resource is used
     for dev/test purpose.
    :vartype dev: bool
    :ivar size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :vartype size: str
    :ivar family: If the service has different generations of hardware, for the same SKU, then that
     can be captured here.
    :vartype family: str
    :ivar capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :vartype capacity: int
    :ivar tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier. Default value is "Hyperscale".
    :vartype tier: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "dev": {"key": "dev", "type": "bool"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        dev: bool = True,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        tier: Literal["Hyperscale"] = "Hyperscale",
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the SKU.  It is typically a letter+number code. Required.
        :paramtype name: str
        :keyword dev: Whether dev/test is enabled. When the dev field is set to true, the resource is
         used for dev/test purpose.
        :paramtype dev: bool
        :keyword size: The SKU size. When the name field is the combination of tier and some other
         value, this would be the standalone code.
        :paramtype size: str
        :keyword family: If the service has different generations of hardware, for the same SKU, then
         that can be captured here.
        :paramtype family: str
        :keyword capacity: If the SKU supports scale out/in then the capacity integer should be
         included. If scale out/in is not possible for the resource this may be omitted.
        :paramtype capacity: int
        :keyword tier: This field is required to be implemented by the Resource Provider if the service
         has more than one tier. Default value is "Hyperscale".
        :paramtype tier: str
        """
        super().__init__(name=name, dev=dev, size=size, family=family, capacity=capacity, **kwargs)
        self.tier = tier


class PostgresInstanceUpdate(_serialization.Model):
    """An update to a Postgres Instance.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Postgres Instance properties.
    :vartype properties: ~azure.mgmt.azurearcdata.models.PostgresInstanceProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "PostgresInstanceProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PostgresInstanceProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: Postgres Instance properties.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.PostgresInstanceProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class SqlAvailabilityGroupDatabaseReplicaResourceProperties(_serialization.Model):  # pylint: disable=name-too-long
    """The properties of Arc Sql availability group database replica resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar database_name: the database name.
    :vartype database_name: str
    :ivar replica_name: the database replica name.
    :vartype replica_name: str
    :ivar is_local: Whether the availability database is local.
    :vartype is_local: bool
    :ivar is_primary_replica: Returns 1 if the replica is primary, or 0 if it is a secondary
     replica.
    :vartype is_primary_replica: bool
    :ivar synchronization_state_description: Description of the data-movement state.
    :vartype synchronization_state_description: str
    :ivar is_commit_participant: Whether this replica is transaction committer.
    :vartype is_commit_participant: bool
    :ivar synchronization_health_description: Description of the health of database.
    :vartype synchronization_health_description: str
    :ivar database_state_description: Description of the database state of the availability
     replica.
    :vartype database_state_description: str
    :ivar is_suspended: Whether this data movement is suspended.
    :vartype is_suspended: bool
    :ivar suspend_reason_description: Description of the database suspended state reason.
    :vartype suspend_reason_description: str
    """

    _validation = {
        "replica_name": {"readonly": True},
        "is_local": {"readonly": True},
        "is_primary_replica": {"readonly": True},
        "synchronization_state_description": {"readonly": True},
        "is_commit_participant": {"readonly": True},
        "synchronization_health_description": {"readonly": True},
        "database_state_description": {"readonly": True},
        "is_suspended": {"readonly": True},
        "suspend_reason_description": {"readonly": True},
    }

    _attribute_map = {
        "database_name": {"key": "databaseName", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "is_local": {"key": "isLocal", "type": "bool"},
        "is_primary_replica": {"key": "isPrimaryReplica", "type": "bool"},
        "synchronization_state_description": {"key": "synchronizationStateDescription", "type": "str"},
        "is_commit_participant": {"key": "isCommitParticipant", "type": "bool"},
        "synchronization_health_description": {"key": "synchronizationHealthDescription", "type": "str"},
        "database_state_description": {"key": "databaseStateDescription", "type": "str"},
        "is_suspended": {"key": "isSuspended", "type": "bool"},
        "suspend_reason_description": {"key": "suspendReasonDescription", "type": "str"},
    }

    def __init__(self, *, database_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword database_name: the database name.
        :paramtype database_name: str
        """
        super().__init__(**kwargs)
        self.database_name = database_name
        self.replica_name = None
        self.is_local = None
        self.is_primary_replica = None
        self.synchronization_state_description = None
        self.is_commit_participant = None
        self.synchronization_health_description = None
        self.database_state_description = None
        self.is_suspended = None
        self.suspend_reason_description = None


class SqlAvailabilityGroupReplicaResourceProperties(_serialization.Model):  # pylint: disable=name-too-long
    """The properties of Arc Sql availability group replica resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar replica_id: ID GUID of the availability group.
    :vartype replica_id: str
    :ivar replica_name: the replica name.
    :vartype replica_name: str
    :ivar configure: null.
    :vartype configure: ~azure.mgmt.azurearcdata.models.AvailabilityGroupConfigure
    :ivar state: null.
    :vartype state: ~azure.mgmt.azurearcdata.models.AvailabilityGroupState
    """

    _validation = {
        "replica_id": {"readonly": True, "pattern": r"^[A-Za-z0-9]{8}-([A-Za-z0-9]{4}-){3}[A-Za-z0-9]{12}$"},
    }

    _attribute_map = {
        "replica_id": {"key": "replicaId", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "configure": {"key": "configure", "type": "AvailabilityGroupConfigure"},
        "state": {"key": "state", "type": "AvailabilityGroupState"},
    }

    def __init__(
        self,
        *,
        replica_name: Optional[str] = None,
        configure: Optional["_models.AvailabilityGroupConfigure"] = None,
        state: Optional["_models.AvailabilityGroupState"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword replica_name: the replica name.
        :paramtype replica_name: str
        :keyword configure: null.
        :paramtype configure: ~azure.mgmt.azurearcdata.models.AvailabilityGroupConfigure
        :keyword state: null.
        :paramtype state: ~azure.mgmt.azurearcdata.models.AvailabilityGroupState
        """
        super().__init__(**kwargs)
        self.replica_id = None
        self.replica_name = replica_name
        self.configure = configure
        self.state = state


class SqlManagedInstance(TrackedResource):
    """A SqlManagedInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: null. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceProperties
    :ivar extended_location: The extendedLocation of the resource.
    :vartype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
    :ivar sku: Resource sku.
    :vartype sku: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceSku
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "SqlManagedInstanceProperties"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "sku": {"key": "sku", "type": "SqlManagedInstanceSku"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.SqlManagedInstanceProperties",
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        sku: Optional["_models.SqlManagedInstanceSku"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: null. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceProperties
        :keyword extended_location: The extendedLocation of the resource.
        :paramtype extended_location: ~azure.mgmt.azurearcdata.models.ExtendedLocation
        :keyword sku: Resource sku.
        :paramtype sku: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceSku
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.extended_location = extended_location
        self.sku = sku


class SqlManagedInstanceK8SRaw(_serialization.Model):
    """The raw kubernetes information.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar spec: The kubernetes spec information.
    :vartype spec: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceK8SSpec
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "spec": {"key": "spec", "type": "SqlManagedInstanceK8SSpec"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        spec: Optional["_models.SqlManagedInstanceK8SSpec"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword spec: The kubernetes spec information.
        :paramtype spec: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceK8SSpec
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.spec = spec


class SqlManagedInstanceK8SSpec(_serialization.Model):
    """The kubernetes spec information.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar scheduling: The kubernetes scheduling information.
    :vartype scheduling: ~azure.mgmt.azurearcdata.models.K8SScheduling
    :ivar replicas: This option specifies the number of SQL Managed Instance replicas that will be
     deployed in your Kubernetes cluster for high availability purposes. If sku.tier is
     BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is
     GeneralPurpose, replicas must be '1'.
    :vartype replicas: int
    :ivar security: The kubernetes security information.
    :vartype security: ~azure.mgmt.azurearcdata.models.K8SSecurity
    :ivar settings: The kubernetes settings information.
    :vartype settings: ~azure.mgmt.azurearcdata.models.K8SSettings
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "scheduling": {"key": "scheduling", "type": "K8SScheduling"},
        "replicas": {"key": "replicas", "type": "int"},
        "security": {"key": "security", "type": "K8SSecurity"},
        "settings": {"key": "settings", "type": "K8SSettings"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        scheduling: Optional["_models.K8SScheduling"] = None,
        replicas: Optional[int] = None,
        security: Optional["_models.K8SSecurity"] = None,
        settings: Optional["_models.K8SSettings"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword scheduling: The kubernetes scheduling information.
        :paramtype scheduling: ~azure.mgmt.azurearcdata.models.K8SScheduling
        :keyword replicas: This option specifies the number of SQL Managed Instance replicas that will
         be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is
         BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is
         GeneralPurpose, replicas must be '1'.
        :paramtype replicas: int
        :keyword security: The kubernetes security information.
        :paramtype security: ~azure.mgmt.azurearcdata.models.K8SSecurity
        :keyword settings: The kubernetes settings information.
        :paramtype settings: ~azure.mgmt.azurearcdata.models.K8SSettings
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.scheduling = scheduling
        self.replicas = replicas
        self.security = security
        self.settings = settings


class SqlManagedInstanceListResult(_serialization.Model):
    """A list of SqlManagedInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.SqlManagedInstance]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlManagedInstance]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class SqlManagedInstanceProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of sqlManagedInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar data_controller_id: null.
    :vartype data_controller_id: str
    :ivar admin: The instance admin user.
    :vartype admin: str
    :ivar start_time: The instance start time.
    :vartype start_time: str
    :ivar end_time: The instance end time.
    :vartype end_time: str
    :ivar k8_s_raw: The raw kubernetes information.
    :vartype k8_s_raw: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceK8SRaw
    :ivar basic_login_information: Username and password for basic authentication.
    :vartype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
    :ivar last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current date
     time.
    :vartype last_uploaded_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning state of the Arc-enabled SQL Managed Instance
     resource.
    :vartype provisioning_state: str
    :ivar active_directory_information: Active Directory information related to this SQL Managed
     Instance.
    :vartype active_directory_information:
     ~azure.mgmt.azurearcdata.models.ActiveDirectoryInformation
    :ivar license_type: The license type to apply for this managed instance. Known values are:
     "BasePrice", "LicenseIncluded", and "DisasterRecovery".
    :vartype license_type: str or ~azure.mgmt.azurearcdata.models.ArcSqlManagedInstanceLicenseType
    :ivar cluster_id: If a CustomLocation is provided, this contains the ARM id of the connected
     cluster the custom location belongs to.
    :vartype cluster_id: str
    :ivar extension_id: If a CustomLocation is provided, this contains the ARM id of the extension
     the custom location belongs to.
    :vartype extension_id: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "data_controller_id": {"key": "dataControllerId", "type": "str"},
        "admin": {"key": "admin", "type": "str"},
        "start_time": {"key": "startTime", "type": "str"},
        "end_time": {"key": "endTime", "type": "str"},
        "k8_s_raw": {"key": "k8sRaw", "type": "SqlManagedInstanceK8SRaw"},
        "basic_login_information": {"key": "basicLoginInformation", "type": "BasicLoginInformation"},
        "last_uploaded_date": {"key": "lastUploadedDate", "type": "iso-8601"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "active_directory_information": {"key": "activeDirectoryInformation", "type": "ActiveDirectoryInformation"},
        "license_type": {"key": "licenseType", "type": "str"},
        "cluster_id": {"key": "clusterId", "type": "str"},
        "extension_id": {"key": "extensionId", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_controller_id: Optional[str] = None,
        admin: Optional[str] = None,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        k8_s_raw: Optional["_models.SqlManagedInstanceK8SRaw"] = None,
        basic_login_information: Optional["_models.BasicLoginInformation"] = None,
        last_uploaded_date: Optional[datetime.datetime] = None,
        active_directory_information: Optional["_models.ActiveDirectoryInformation"] = None,
        license_type: Union[str, "_models.ArcSqlManagedInstanceLicenseType"] = "BasePrice",
        cluster_id: Optional[str] = None,
        extension_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword data_controller_id: null.
        :paramtype data_controller_id: str
        :keyword admin: The instance admin user.
        :paramtype admin: str
        :keyword start_time: The instance start time.
        :paramtype start_time: str
        :keyword end_time: The instance end time.
        :paramtype end_time: str
        :keyword k8_s_raw: The raw kubernetes information.
        :paramtype k8_s_raw: ~azure.mgmt.azurearcdata.models.SqlManagedInstanceK8SRaw
        :keyword basic_login_information: Username and password for basic authentication.
        :paramtype basic_login_information: ~azure.mgmt.azurearcdata.models.BasicLoginInformation
        :keyword last_uploaded_date: Last uploaded date from Kubernetes cluster. Defaults to current
         date time.
        :paramtype last_uploaded_date: ~datetime.datetime
        :keyword active_directory_information: Active Directory information related to this SQL Managed
         Instance.
        :paramtype active_directory_information:
         ~azure.mgmt.azurearcdata.models.ActiveDirectoryInformation
        :keyword license_type: The license type to apply for this managed instance. Known values are:
         "BasePrice", "LicenseIncluded", and "DisasterRecovery".
        :paramtype license_type: str or
         ~azure.mgmt.azurearcdata.models.ArcSqlManagedInstanceLicenseType
        :keyword cluster_id: If a CustomLocation is provided, this contains the ARM id of the connected
         cluster the custom location belongs to.
        :paramtype cluster_id: str
        :keyword extension_id: If a CustomLocation is provided, this contains the ARM id of the
         extension the custom location belongs to.
        :paramtype extension_id: str
        """
        super().__init__(**kwargs)
        self.data_controller_id = data_controller_id
        self.admin = admin
        self.start_time = start_time
        self.end_time = end_time
        self.k8_s_raw = k8_s_raw
        self.basic_login_information = basic_login_information
        self.last_uploaded_date = last_uploaded_date
        self.provisioning_state = None
        self.active_directory_information = active_directory_information
        self.license_type = license_type
        self.cluster_id = cluster_id
        self.extension_id = extension_id


class SqlManagedInstanceSku(_serialization.Model):
    """The resource model definition representing SKU for Azure Managed Instance - Azure Arc.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU. Required. Default value is "vCore".
    :vartype name: str
    :ivar tier: The pricing tier for the instance. Known values are: "GeneralPurpose" and
     "BusinessCritical".
    :vartype tier: str or ~azure.mgmt.azurearcdata.models.SqlManagedInstanceSkuTier
    :ivar dev: Whether dev/test is enabled. When the dev field is set to true, the resource is used
     for dev/test purpose.
    :vartype dev: bool
    :ivar size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :vartype size: str
    :ivar family: The SKU family.
    :vartype family: str
    :ivar capacity: The SKU capacity.
    :vartype capacity: int
    """

    _validation = {
        "name": {"required": True, "constant": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
        "dev": {"key": "dev", "type": "bool"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    name = "vCore"

    def __init__(
        self,
        *,
        tier: Union[str, "_models.SqlManagedInstanceSkuTier"] = "GeneralPurpose",
        dev: bool = True,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tier: The pricing tier for the instance. Known values are: "GeneralPurpose" and
         "BusinessCritical".
        :paramtype tier: str or ~azure.mgmt.azurearcdata.models.SqlManagedInstanceSkuTier
        :keyword dev: Whether dev/test is enabled. When the dev field is set to true, the resource is
         used for dev/test purpose.
        :paramtype dev: bool
        :keyword size: The SKU size. When the name field is the combination of tier and some other
         value, this would be the standalone code.
        :paramtype size: str
        :keyword family: The SKU family.
        :paramtype family: str
        :keyword capacity: The SKU capacity.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.tier = tier
        self.dev = dev
        self.size = size
        self.family = family
        self.capacity = capacity


class SqlManagedInstanceUpdate(_serialization.Model):
    """An update to a SQL Managed Instance.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class SqlServerAvailabilityGroupResource(TrackedResource):
    """Arc Sql Server Availability Group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of Arc Sql Server availability group. Required.
    :vartype properties:
     ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "SqlServerAvailabilityGroupResourceProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.SqlServerAvailabilityGroupResourceProperties",
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Properties of Arc Sql Server availability group. Required.
        :paramtype properties:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class SqlServerAvailabilityGroupResourceProperties(_serialization.Model):  # pylint: disable=name-too-long
    """The properties of Arc Sql Server availability group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar availability_group_id: ID GUID of the availability group.
    :vartype availability_group_id: str
    :ivar server_name: the SQL server name.
    :vartype server_name: str
    :ivar instance_name: the SQL Server Instance name.
    :vartype instance_name: str
    :ivar collection_timestamp: Timestamp for when the data was collected from the client machine.
    :vartype collection_timestamp: ~datetime.datetime
    :ivar info: Availability Group Info.
    :vartype info: ~azure.mgmt.azurearcdata.models.AvailabilityGroupInfo
    :ivar replicas: A list of Availability Group Replicas.
    :vartype replicas:
     ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesReplicas
    :ivar databases: A list of Availability Group Database Replicas.
    :vartype databases:
     ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesDatabases
    :ivar provisioning_state: The provisioning state of the Arc-enabled SQL Server availability
     group resource.
    :vartype provisioning_state: str
    """

    _validation = {
        "availability_group_id": {"readonly": True, "pattern": r"^[A-Za-z0-9]{8}-([A-Za-z0-9]{4}-){3}[A-Za-z0-9]{12}$"},
        "server_name": {"readonly": True},
        "instance_name": {"readonly": True},
        "collection_timestamp": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "availability_group_id": {"key": "availabilityGroupId", "type": "str"},
        "server_name": {"key": "serverName", "type": "str"},
        "instance_name": {"key": "instanceName", "type": "str"},
        "collection_timestamp": {"key": "collectionTimestamp", "type": "iso-8601"},
        "info": {"key": "info", "type": "AvailabilityGroupInfo"},
        "replicas": {"key": "replicas", "type": "SqlServerAvailabilityGroupResourcePropertiesReplicas"},
        "databases": {"key": "databases", "type": "SqlServerAvailabilityGroupResourcePropertiesDatabases"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        info: Optional["_models.AvailabilityGroupInfo"] = None,
        replicas: Optional["_models.SqlServerAvailabilityGroupResourcePropertiesReplicas"] = None,
        databases: Optional["_models.SqlServerAvailabilityGroupResourcePropertiesDatabases"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword info: Availability Group Info.
        :paramtype info: ~azure.mgmt.azurearcdata.models.AvailabilityGroupInfo
        :keyword replicas: A list of Availability Group Replicas.
        :paramtype replicas:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesReplicas
        :keyword databases: A list of Availability Group Database Replicas.
        :paramtype databases:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesDatabases
        """
        super().__init__(**kwargs)
        self.availability_group_id = None
        self.server_name = None
        self.instance_name = None
        self.collection_timestamp = None
        self.info = info
        self.replicas = replicas
        self.databases = databases
        self.provisioning_state = None


class SqlServerAvailabilityGroupResourcePropertiesDatabases(_serialization.Model):  # pylint: disable=name-too-long
    """A list of Availability Group Database Replicas.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of Availability Group Database Replicas.
    :vartype value:
     list[~azure.mgmt.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlAvailabilityGroupDatabaseReplicaResourceProperties]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.SqlAvailabilityGroupDatabaseReplicaResourceProperties"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Array of Availability Group Database Replicas.
        :paramtype value:
         list[~azure.mgmt.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class SqlServerAvailabilityGroupResourcePropertiesReplicas(_serialization.Model):  # pylint: disable=name-too-long
    """A list of Availability Group Replicas.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of Availability Group Replicas.
    :vartype value:
     list[~azure.mgmt.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlAvailabilityGroupReplicaResourceProperties]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.SqlAvailabilityGroupReplicaResourceProperties"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: Array of Availability Group Replicas.
        :paramtype value:
         list[~azure.mgmt.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class SqlServerAvailabilityGroupUpdate(_serialization.Model):
    """An update to availability group resource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The Server Availability Group's properties.
    :vartype properties:
     ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "SqlServerAvailabilityGroupResourceProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SqlServerAvailabilityGroupResourceProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The Server Availability Group's properties.
        :paramtype properties:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class SqlServerDatabaseResource(TrackedResource):
    """Arc Sql Server database.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of Arc Sql Server database. Required.
    :vartype properties: ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourceProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "SqlServerDatabaseResourceProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.SqlServerDatabaseResourceProperties",
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Properties of Arc Sql Server database. Required.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourceProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class SqlServerDatabaseResourceProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The properties of Arc Sql Server database resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar collation_name: Collation of the database.
    :vartype collation_name: str
    :ivar database_creation_date: Creation date of the database.
    :vartype database_creation_date: ~datetime.datetime
    :ivar compatibility_level: Compatibility level of the database.
    :vartype compatibility_level: int
    :ivar size_mb: Size of the database.
    :vartype size_mb: float
    :ivar space_available_mb: Space left of the database.
    :vartype space_available_mb: float
    :ivar state: State of the database. Known values are: "Online", "Restoring", "Recovering",
     "RecoveryPending", "Suspect", "Emergency", "Offline", "Copying", and "OfflineSecondary".
    :vartype state: str or ~azure.mgmt.azurearcdata.models.DatabaseState
    :ivar is_read_only: Whether the database is read only or not.
    :vartype is_read_only: bool
    :ivar recovery_mode: Status of the database. Known values are: "Full", "Bulk-logged", and
     "Simple".
    :vartype recovery_mode: str or ~azure.mgmt.azurearcdata.models.RecoveryMode
    :ivar database_options: List of features that are enabled for the database.
    :vartype database_options:
     ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourcePropertiesDatabaseOptions
    :ivar backup_information:
    :vartype backup_information:
     ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourcePropertiesBackupInformation
    :ivar backup_policy: The backup profile for the SQL server.
    :vartype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
    :ivar earliest_restore_date: This records the earliest start date and time that restore is
     available for this database (ISO8601 format).
    :vartype earliest_restore_date: ~datetime.datetime
    :ivar create_mode: Database create mode. PointInTimeRestore: Create a database by restoring a
     point in time backup of an existing database. sourceDatabaseId and restorePointInTime must be
     specified. Known values are: "Default" and "PointInTimeRestore".
    :vartype create_mode: str or ~azure.mgmt.azurearcdata.models.DatabaseCreateMode
    :ivar source_database_id: The resource identifier of the source database associated with create
     operation of this database.
    :vartype source_database_id: str
    :ivar restore_point_in_time: Conditional. If createMode is PointInTimeRestore, this value is
     required. Specifies the point in time (ISO8601 format) of the source database that will be
     restored to create the new database.
    :vartype restore_point_in_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state of the Arc-enabled SQL Server database
     resource.
    :vartype provisioning_state: str
    :ivar last_database_upload_time: The time when last successful database upload was performed.
    :vartype last_database_upload_time: ~datetime.datetime
    """

    _validation = {
        "compatibility_level": {"maximum": 200, "minimum": 80},
        "earliest_restore_date": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "last_database_upload_time": {"readonly": True},
    }

    _attribute_map = {
        "collation_name": {"key": "collationName", "type": "str"},
        "database_creation_date": {"key": "databaseCreationDate", "type": "iso-8601"},
        "compatibility_level": {"key": "compatibilityLevel", "type": "int"},
        "size_mb": {"key": "sizeMB", "type": "float"},
        "space_available_mb": {"key": "spaceAvailableMB", "type": "float"},
        "state": {"key": "state", "type": "str"},
        "is_read_only": {"key": "isReadOnly", "type": "bool"},
        "recovery_mode": {"key": "recoveryMode", "type": "str"},
        "database_options": {"key": "databaseOptions", "type": "SqlServerDatabaseResourcePropertiesDatabaseOptions"},
        "backup_information": {
            "key": "backupInformation",
            "type": "SqlServerDatabaseResourcePropertiesBackupInformation",
        },
        "backup_policy": {"key": "backupPolicy", "type": "BackupPolicy"},
        "earliest_restore_date": {"key": "earliestRestoreDate", "type": "iso-8601"},
        "create_mode": {"key": "createMode", "type": "str"},
        "source_database_id": {"key": "sourceDatabaseId", "type": "str"},
        "restore_point_in_time": {"key": "restorePointInTime", "type": "iso-8601"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "last_database_upload_time": {"key": "lastDatabaseUploadTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        collation_name: Optional[str] = None,
        database_creation_date: Optional[datetime.datetime] = None,
        compatibility_level: Optional[int] = None,
        size_mb: Optional[float] = None,
        space_available_mb: Optional[float] = None,
        state: Optional[Union[str, "_models.DatabaseState"]] = None,
        is_read_only: Optional[bool] = None,
        recovery_mode: Optional[Union[str, "_models.RecoveryMode"]] = None,
        database_options: Optional["_models.SqlServerDatabaseResourcePropertiesDatabaseOptions"] = None,
        backup_information: Optional["_models.SqlServerDatabaseResourcePropertiesBackupInformation"] = None,
        backup_policy: Optional["_models.BackupPolicy"] = None,
        create_mode: Optional[Union[str, "_models.DatabaseCreateMode"]] = None,
        source_database_id: Optional[str] = None,
        restore_point_in_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword collation_name: Collation of the database.
        :paramtype collation_name: str
        :keyword database_creation_date: Creation date of the database.
        :paramtype database_creation_date: ~datetime.datetime
        :keyword compatibility_level: Compatibility level of the database.
        :paramtype compatibility_level: int
        :keyword size_mb: Size of the database.
        :paramtype size_mb: float
        :keyword space_available_mb: Space left of the database.
        :paramtype space_available_mb: float
        :keyword state: State of the database. Known values are: "Online", "Restoring", "Recovering",
         "RecoveryPending", "Suspect", "Emergency", "Offline", "Copying", and "OfflineSecondary".
        :paramtype state: str or ~azure.mgmt.azurearcdata.models.DatabaseState
        :keyword is_read_only: Whether the database is read only or not.
        :paramtype is_read_only: bool
        :keyword recovery_mode: Status of the database. Known values are: "Full", "Bulk-logged", and
         "Simple".
        :paramtype recovery_mode: str or ~azure.mgmt.azurearcdata.models.RecoveryMode
        :keyword database_options: List of features that are enabled for the database.
        :paramtype database_options:
         ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourcePropertiesDatabaseOptions
        :keyword backup_information:
        :paramtype backup_information:
         ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourcePropertiesBackupInformation
        :keyword backup_policy: The backup profile for the SQL server.
        :paramtype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
        :keyword create_mode: Database create mode. PointInTimeRestore: Create a database by restoring
         a point in time backup of an existing database. sourceDatabaseId and restorePointInTime must be
         specified. Known values are: "Default" and "PointInTimeRestore".
        :paramtype create_mode: str or ~azure.mgmt.azurearcdata.models.DatabaseCreateMode
        :keyword source_database_id: The resource identifier of the source database associated with
         create operation of this database.
        :paramtype source_database_id: str
        :keyword restore_point_in_time: Conditional. If createMode is PointInTimeRestore, this value is
         required. Specifies the point in time (ISO8601 format) of the source database that will be
         restored to create the new database.
        :paramtype restore_point_in_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.collation_name = collation_name
        self.database_creation_date = database_creation_date
        self.compatibility_level = compatibility_level
        self.size_mb = size_mb
        self.space_available_mb = space_available_mb
        self.state = state
        self.is_read_only = is_read_only
        self.recovery_mode = recovery_mode
        self.database_options = database_options
        self.backup_information = backup_information
        self.backup_policy = backup_policy
        self.earliest_restore_date = None
        self.create_mode = create_mode
        self.source_database_id = source_database_id
        self.restore_point_in_time = restore_point_in_time
        self.provisioning_state = None
        self.last_database_upload_time = None


class SqlServerDatabaseResourcePropertiesBackupInformation(_serialization.Model):  # pylint: disable=name-too-long
    """SqlServerDatabaseResourcePropertiesBackupInformation.

    :ivar last_full_backup: Date time of last full backup.
    :vartype last_full_backup: ~datetime.datetime
    :ivar last_log_backup: Date time of last log backup.
    :vartype last_log_backup: ~datetime.datetime
    """

    _attribute_map = {
        "last_full_backup": {"key": "lastFullBackup", "type": "iso-8601"},
        "last_log_backup": {"key": "lastLogBackup", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        last_full_backup: Optional[datetime.datetime] = None,
        last_log_backup: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword last_full_backup: Date time of last full backup.
        :paramtype last_full_backup: ~datetime.datetime
        :keyword last_log_backup: Date time of last log backup.
        :paramtype last_log_backup: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.last_full_backup = last_full_backup
        self.last_log_backup = last_log_backup


class SqlServerDatabaseResourcePropertiesDatabaseOptions(_serialization.Model):  # pylint: disable=name-too-long
    """List of features that are enabled for the database.

    :ivar is_auto_close_on:
    :vartype is_auto_close_on: bool
    :ivar is_auto_shrink_on:
    :vartype is_auto_shrink_on: bool
    :ivar is_auto_create_stats_on:
    :vartype is_auto_create_stats_on: bool
    :ivar is_auto_update_stats_on:
    :vartype is_auto_update_stats_on: bool
    :ivar is_remote_data_archive_enabled:
    :vartype is_remote_data_archive_enabled: bool
    :ivar is_memory_optimization_enabled:
    :vartype is_memory_optimization_enabled: bool
    :ivar is_encrypted:
    :vartype is_encrypted: bool
    :ivar is_trustworthy_on:
    :vartype is_trustworthy_on: bool
    """

    _attribute_map = {
        "is_auto_close_on": {"key": "isAutoCloseOn", "type": "bool"},
        "is_auto_shrink_on": {"key": "isAutoShrinkOn", "type": "bool"},
        "is_auto_create_stats_on": {"key": "isAutoCreateStatsOn", "type": "bool"},
        "is_auto_update_stats_on": {"key": "isAutoUpdateStatsOn", "type": "bool"},
        "is_remote_data_archive_enabled": {"key": "isRemoteDataArchiveEnabled", "type": "bool"},
        "is_memory_optimization_enabled": {"key": "isMemoryOptimizationEnabled", "type": "bool"},
        "is_encrypted": {"key": "isEncrypted", "type": "bool"},
        "is_trustworthy_on": {"key": "isTrustworthyOn", "type": "bool"},
    }

    def __init__(
        self,
        *,
        is_auto_close_on: Optional[bool] = None,
        is_auto_shrink_on: Optional[bool] = None,
        is_auto_create_stats_on: Optional[bool] = None,
        is_auto_update_stats_on: Optional[bool] = None,
        is_remote_data_archive_enabled: Optional[bool] = None,
        is_memory_optimization_enabled: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_trustworthy_on: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword is_auto_close_on:
        :paramtype is_auto_close_on: bool
        :keyword is_auto_shrink_on:
        :paramtype is_auto_shrink_on: bool
        :keyword is_auto_create_stats_on:
        :paramtype is_auto_create_stats_on: bool
        :keyword is_auto_update_stats_on:
        :paramtype is_auto_update_stats_on: bool
        :keyword is_remote_data_archive_enabled:
        :paramtype is_remote_data_archive_enabled: bool
        :keyword is_memory_optimization_enabled:
        :paramtype is_memory_optimization_enabled: bool
        :keyword is_encrypted:
        :paramtype is_encrypted: bool
        :keyword is_trustworthy_on:
        :paramtype is_trustworthy_on: bool
        """
        super().__init__(**kwargs)
        self.is_auto_close_on = is_auto_close_on
        self.is_auto_shrink_on = is_auto_shrink_on
        self.is_auto_create_stats_on = is_auto_create_stats_on
        self.is_auto_update_stats_on = is_auto_update_stats_on
        self.is_remote_data_archive_enabled = is_remote_data_archive_enabled
        self.is_memory_optimization_enabled = is_memory_optimization_enabled
        self.is_encrypted = is_encrypted
        self.is_trustworthy_on = is_trustworthy_on


class SqlServerDatabaseUpdate(_serialization.Model):
    """An update to database resource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The data controller's properties.
    :vartype properties: ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourceProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "SqlServerDatabaseResourceProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SqlServerDatabaseResourceProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The data controller's properties.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.SqlServerDatabaseResourceProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class SqlServerInstance(TrackedResource):
    """A SqlServerInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azurearcdata.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: null.
    :vartype properties: ~azure.mgmt.azurearcdata.models.SqlServerInstanceProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "SqlServerInstanceProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SqlServerInstanceProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: null.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.SqlServerInstanceProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class SqlServerInstanceListResult(_serialization.Model):
    """A list of SqlServerInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of results.
    :vartype value: list[~azure.mgmt.azurearcdata.models.SqlServerInstance]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SqlServerInstance]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class SqlServerInstanceProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of SqlServerInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar version: SQL Server version. Known values are: "SQL Server 2012", "SQL Server 2014", "SQL
     Server 2016", "SQL Server 2017", "SQL Server 2019", "SQL Server 2022", and "Unknown".
    :vartype version: str or ~azure.mgmt.azurearcdata.models.SqlVersion
    :ivar edition: SQL Server edition. Known values are: "Evaluation", "Enterprise", "Standard",
     "Web", "Developer", "Express", and "Business Intelligence".
    :vartype edition: str or ~azure.mgmt.azurearcdata.models.EditionType
    :ivar container_resource_id: ARM Resource id of the container resource (Azure Arc for Servers).
    :vartype container_resource_id: str
    :ivar create_time: The time when the resource was created.
    :vartype create_time: str
    :ivar v_core: The number of logical processors used by the SQL Server instance.
    :vartype v_core: str
    :ivar cores: The number of total cores of the Operating System Environment (OSE) hosting the
     SQL Server instance.
    :vartype cores: str
    :ivar status: The cloud connectivity status. Known values are: "Connected", "Disconnected",
     "Registered", and "Unknown".
    :vartype status: str or ~azure.mgmt.azurearcdata.models.ConnectionStatus
    :ivar patch_level: SQL Server update level.
    :vartype patch_level: str
    :ivar collation: SQL Server collation.
    :vartype collation: str
    :ivar current_version: SQL Server current version.
    :vartype current_version: str
    :ivar instance_name: SQL Server instance name.
    :vartype instance_name: str
    :ivar tcp_dynamic_ports: Dynamic TCP ports used by SQL Server.
    :vartype tcp_dynamic_ports: str
    :ivar tcp_static_ports: Static TCP ports used by SQL Server.
    :vartype tcp_static_ports: str
    :ivar product_id: SQL Server product ID.
    :vartype product_id: str
    :ivar license_type: SQL Server license type. Known values are: "Undefined", "Free", "HADR",
     "ServerCAL", "LicenseOnly", "PAYG", and "Paid".
    :vartype license_type: str or ~azure.mgmt.azurearcdata.models.ArcSqlServerLicenseType
    :ivar azure_defender_status_last_updated: Timestamp of last Azure Defender status update.
    :vartype azure_defender_status_last_updated: ~datetime.datetime
    :ivar azure_defender_status: Status of Azure Defender. Known values are: "Protected",
     "Unprotected", and "Unknown".
    :vartype azure_defender_status: str or ~azure.mgmt.azurearcdata.models.DefenderStatus
    :ivar provisioning_state: The provisioning state of the Arc-enabled SQL Server resource.
    :vartype provisioning_state: str
    :ivar last_inventory_upload_time: The time when last successful inventory upload was performed.
    :vartype last_inventory_upload_time: ~datetime.datetime
    :ivar last_usage_upload_time: The time when last successful usage upload was performed.
    :vartype last_usage_upload_time: ~datetime.datetime
    :ivar host_type: Type of host for Azure Arc SQL Server. Known values are: "Azure Virtual
     Machine", "Azure VMWare Virtual Machine", "Azure Kubernetes Service", "AWS VMWare Virtual
     Machine", "AWS Kubernetes Service", "GCP VMWare Virtual Machine", "GCP Kubernetes Service",
     "Container", "Virtual Machine", "Physical Server", "AWS Virtual Machine", "GCP Virtual
     Machine", and "Other".
    :vartype host_type: str or ~azure.mgmt.azurearcdata.models.HostType
    :ivar always_on_role: The role of the SQL Server, based on availability. Known values are:
     "None", "FailoverClusterInstance", "FailoverClusterNode", and "AvailabilityGroupReplica".
    :vartype always_on_role: str or ~azure.mgmt.azurearcdata.models.AlwaysOnRole
    :ivar failover_cluster: Failover Cluster Instance properties.
    :vartype failover_cluster: ~azure.mgmt.azurearcdata.models.FailoverCluster
    :ivar backup_policy: The backup profile for the SQL server.
    :vartype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
    :ivar upgrade_locked_until: Upgrade Action for this resource is locked until it expires. The
     Expiration time indicated by this value. It is not locked when it is empty.
    :vartype upgrade_locked_until: ~datetime.datetime
    :ivar monitoring: The monitoring configuration.
    :vartype monitoring: ~azure.mgmt.azurearcdata.models.Monitoring
    """

    _validation = {
        "container_resource_id": {"readonly": True},
        "create_time": {"readonly": True},
        "v_core": {"readonly": True},
        "status": {"readonly": True},
        "patch_level": {"readonly": True},
        "collation": {"readonly": True},
        "current_version": {"readonly": True},
        "tcp_dynamic_ports": {"readonly": True},
        "tcp_static_ports": {"readonly": True},
        "product_id": {"readonly": True},
        "license_type": {"readonly": True},
        "azure_defender_status_last_updated": {"readonly": True},
        "azure_defender_status": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "last_inventory_upload_time": {"readonly": True},
        "last_usage_upload_time": {"readonly": True},
        "always_on_role": {"readonly": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "str"},
        "edition": {"key": "edition", "type": "str"},
        "container_resource_id": {"key": "containerResourceId", "type": "str"},
        "create_time": {"key": "createTime", "type": "str"},
        "v_core": {"key": "vCore", "type": "str"},
        "cores": {"key": "cores", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "patch_level": {"key": "patchLevel", "type": "str"},
        "collation": {"key": "collation", "type": "str"},
        "current_version": {"key": "currentVersion", "type": "str"},
        "instance_name": {"key": "instanceName", "type": "str"},
        "tcp_dynamic_ports": {"key": "tcpDynamicPorts", "type": "str"},
        "tcp_static_ports": {"key": "tcpStaticPorts", "type": "str"},
        "product_id": {"key": "productId", "type": "str"},
        "license_type": {"key": "licenseType", "type": "str"},
        "azure_defender_status_last_updated": {"key": "azureDefenderStatusLastUpdated", "type": "iso-8601"},
        "azure_defender_status": {"key": "azureDefenderStatus", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "last_inventory_upload_time": {"key": "lastInventoryUploadTime", "type": "iso-8601"},
        "last_usage_upload_time": {"key": "lastUsageUploadTime", "type": "iso-8601"},
        "host_type": {"key": "hostType", "type": "str"},
        "always_on_role": {"key": "alwaysOnRole", "type": "str"},
        "failover_cluster": {"key": "failoverCluster", "type": "FailoverCluster"},
        "backup_policy": {"key": "backupPolicy", "type": "BackupPolicy"},
        "upgrade_locked_until": {"key": "upgradeLockedUntil", "type": "iso-8601"},
        "monitoring": {"key": "monitoring", "type": "Monitoring"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        version: Optional[Union[str, "_models.SqlVersion"]] = None,
        edition: Optional[Union[str, "_models.EditionType"]] = None,
        cores: Optional[str] = None,
        instance_name: Optional[str] = None,
        host_type: Optional[Union[str, "_models.HostType"]] = None,
        failover_cluster: Optional["_models.FailoverCluster"] = None,
        backup_policy: Optional["_models.BackupPolicy"] = None,
        upgrade_locked_until: Optional[datetime.datetime] = None,
        monitoring: Optional["_models.Monitoring"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword version: SQL Server version. Known values are: "SQL Server 2012", "SQL Server 2014",
         "SQL Server 2016", "SQL Server 2017", "SQL Server 2019", "SQL Server 2022", and "Unknown".
        :paramtype version: str or ~azure.mgmt.azurearcdata.models.SqlVersion
        :keyword edition: SQL Server edition. Known values are: "Evaluation", "Enterprise", "Standard",
         "Web", "Developer", "Express", and "Business Intelligence".
        :paramtype edition: str or ~azure.mgmt.azurearcdata.models.EditionType
        :keyword cores: The number of total cores of the Operating System Environment (OSE) hosting the
         SQL Server instance.
        :paramtype cores: str
        :keyword instance_name: SQL Server instance name.
        :paramtype instance_name: str
        :keyword host_type: Type of host for Azure Arc SQL Server. Known values are: "Azure Virtual
         Machine", "Azure VMWare Virtual Machine", "Azure Kubernetes Service", "AWS VMWare Virtual
         Machine", "AWS Kubernetes Service", "GCP VMWare Virtual Machine", "GCP Kubernetes Service",
         "Container", "Virtual Machine", "Physical Server", "AWS Virtual Machine", "GCP Virtual
         Machine", and "Other".
        :paramtype host_type: str or ~azure.mgmt.azurearcdata.models.HostType
        :keyword failover_cluster: Failover Cluster Instance properties.
        :paramtype failover_cluster: ~azure.mgmt.azurearcdata.models.FailoverCluster
        :keyword backup_policy: The backup profile for the SQL server.
        :paramtype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
        :keyword upgrade_locked_until: Upgrade Action for this resource is locked until it expires. The
         Expiration time indicated by this value. It is not locked when it is empty.
        :paramtype upgrade_locked_until: ~datetime.datetime
        :keyword monitoring: The monitoring configuration.
        :paramtype monitoring: ~azure.mgmt.azurearcdata.models.Monitoring
        """
        super().__init__(**kwargs)
        self.version = version
        self.edition = edition
        self.container_resource_id = None
        self.create_time = None
        self.v_core = None
        self.cores = cores
        self.status = None
        self.patch_level = None
        self.collation = None
        self.current_version = None
        self.instance_name = instance_name
        self.tcp_dynamic_ports = None
        self.tcp_static_ports = None
        self.product_id = None
        self.license_type = None
        self.azure_defender_status_last_updated = None
        self.azure_defender_status = None
        self.provisioning_state = None
        self.last_inventory_upload_time = None
        self.last_usage_upload_time = None
        self.host_type = host_type
        self.always_on_role = None
        self.failover_cluster = failover_cluster
        self.backup_policy = backup_policy
        self.upgrade_locked_until = upgrade_locked_until
        self.monitoring = monitoring


class SqlServerInstanceTelemetryColumn(_serialization.Model):
    """The telemetry column for the SQL Server instance.

    :ivar name: The name of the telemetry column.
    :vartype name: str
    :ivar type: The type of the telemetry column. Known values are: "bool", "datetime", "int",
     "long", "double", "string", "guid", and "timespan".
    :vartype type: str or ~azure.mgmt.azurearcdata.models.SqlServerInstanceTelemetryColumnType
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.SqlServerInstanceTelemetryColumnType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the telemetry column.
        :paramtype name: str
        :keyword type: The type of the telemetry column. Known values are: "bool", "datetime", "int",
         "long", "double", "string", "guid", and "timespan".
        :paramtype type: str or ~azure.mgmt.azurearcdata.models.SqlServerInstanceTelemetryColumnType
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class SqlServerInstanceTelemetryRequest(_serialization.Model):
    """The Arc SQL Server instance telemetry retrieval request.

    All required parameters must be populated in order to send to server.

    :ivar dataset_name: The name of the telemetry dataset to retrieve. Required.
    :vartype dataset_name: str
    :ivar start_time: The start time for the time range to fetch telemetry for. If not specified,
     the current time minus 1 hour is used.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time for the time range to fetch telemetry for. If not specified, the
     current time is used.
    :vartype end_time: ~datetime.datetime
    :ivar interval: The time granularity to fetch telemetry for. This is an ISO8601 duration.
     Examples: PT15M, PT1H, P1D.
    :vartype interval: ~datetime.timedelta
    :ivar aggregation_type: The aggregation type to use for the numerical columns in the dataset.
     Known values are: "Average", "Minimum", "Maximum", "Sum", and "Count".
    :vartype aggregation_type: str or ~azure.mgmt.azurearcdata.models.AggregationType
    :ivar database_names: The list of database names to return telemetry for. If not specified,
     telemetry for all databases will be aggregated and returned.
    :vartype database_names: list[str]
    """

    _validation = {
        "dataset_name": {"required": True},
    }

    _attribute_map = {
        "dataset_name": {"key": "datasetName", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "interval": {"key": "interval", "type": "duration"},
        "aggregation_type": {"key": "aggregationType", "type": "str"},
        "database_names": {"key": "databaseNames", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        dataset_name: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        interval: datetime.timedelta = "PT1H",
        aggregation_type: Union[str, "_models.AggregationType"] = "Average",
        database_names: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword dataset_name: The name of the telemetry dataset to retrieve. Required.
        :paramtype dataset_name: str
        :keyword start_time: The start time for the time range to fetch telemetry for. If not
         specified, the current time minus 1 hour is used.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time for the time range to fetch telemetry for. If not specified,
         the current time is used.
        :paramtype end_time: ~datetime.datetime
        :keyword interval: The time granularity to fetch telemetry for. This is an ISO8601 duration.
         Examples: PT15M, PT1H, P1D.
        :paramtype interval: ~datetime.timedelta
        :keyword aggregation_type: The aggregation type to use for the numerical columns in the
         dataset. Known values are: "Average", "Minimum", "Maximum", "Sum", and "Count".
        :paramtype aggregation_type: str or ~azure.mgmt.azurearcdata.models.AggregationType
        :keyword database_names: The list of database names to return telemetry for. If not specified,
         telemetry for all databases will be aggregated and returned.
        :paramtype database_names: list[str]
        """
        super().__init__(**kwargs)
        self.dataset_name = dataset_name
        self.start_time = start_time
        self.end_time = end_time
        self.interval = interval
        self.aggregation_type = aggregation_type
        self.database_names = database_names


class SqlServerInstanceTelemetryResponse(_serialization.Model):
    """A section of the telemetry response for the SQL Server instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar columns: The columns of the result telemetry table for the SQL Server instance. Required.
    :vartype columns: list[~azure.mgmt.azurearcdata.models.SqlServerInstanceTelemetryColumn]
    :ivar rows: A list of rows from the result telemetry table for the SQL Server instance.
     Required.
    :vartype rows: list[list[str]]
    :ivar next_link: The link to the next section of rows of the telemetry response for the SQL
     Server instance. Null if no more sections are available.
    :vartype next_link: str
    """

    _validation = {
        "columns": {"required": True},
        "rows": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "columns": {"key": "columns", "type": "[SqlServerInstanceTelemetryColumn]"},
        "rows": {"key": "rows", "type": "[[str]]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, columns: List["_models.SqlServerInstanceTelemetryColumn"], rows: List[List[str]], **kwargs: Any
    ) -> None:
        """
        :keyword columns: The columns of the result telemetry table for the SQL Server instance.
         Required.
        :paramtype columns: list[~azure.mgmt.azurearcdata.models.SqlServerInstanceTelemetryColumn]
        :keyword rows: A list of rows from the result telemetry table for the SQL Server instance.
         Required.
        :paramtype rows: list[list[str]]
        """
        super().__init__(**kwargs)
        self.columns = columns
        self.rows = rows
        self.next_link = None


class SqlServerInstanceUpdate(_serialization.Model):
    """An update to a SQL Server Instance.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: null.
    :vartype properties: ~azure.mgmt.azurearcdata.models.SqlServerInstanceUpdateProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "SqlServerInstanceUpdateProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SqlServerInstanceUpdateProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: null.
        :paramtype properties: ~azure.mgmt.azurearcdata.models.SqlServerInstanceUpdateProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class SqlServerInstanceUpdateProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of update SqlServerInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar version: SQL Server version. Known values are: "SQL Server 2012", "SQL Server 2014", "SQL
     Server 2016", "SQL Server 2017", "SQL Server 2019", "SQL Server 2022", and "Unknown".
    :vartype version: str or ~azure.mgmt.azurearcdata.models.SqlVersion
    :ivar edition: SQL Server edition. Known values are: "Evaluation", "Enterprise", "Standard",
     "Web", "Developer", "Express", and "Business Intelligence".
    :vartype edition: str or ~azure.mgmt.azurearcdata.models.EditionType
    :ivar container_resource_id: ARM Resource id of the container resource (Azure Arc for Servers).
    :vartype container_resource_id: str
    :ivar create_time: The time when the resource was created.
    :vartype create_time: str
    :ivar v_core: The number of logical processors used by the SQL Server instance.
    :vartype v_core: str
    :ivar cores: The number of total cores of the Operating System Environment (OSE) hosting the
     SQL Server instance.
    :vartype cores: str
    :ivar status: The cloud connectivity status. Known values are: "Connected", "Disconnected",
     "Registered", and "Unknown".
    :vartype status: str or ~azure.mgmt.azurearcdata.models.ConnectionStatus
    :ivar patch_level: SQL Server update level.
    :vartype patch_level: str
    :ivar collation: SQL Server collation.
    :vartype collation: str
    :ivar current_version: SQL Server current version.
    :vartype current_version: str
    :ivar instance_name: SQL Server instance name.
    :vartype instance_name: str
    :ivar tcp_dynamic_ports: Dynamic TCP ports used by SQL Server.
    :vartype tcp_dynamic_ports: str
    :ivar tcp_static_ports: Static TCP ports used by SQL Server.
    :vartype tcp_static_ports: str
    :ivar product_id: SQL Server product ID.
    :vartype product_id: str
    :ivar license_type: SQL Server license type. Known values are: "Undefined", "Free", "HADR",
     "ServerCAL", "LicenseOnly", "PAYG", and "Paid".
    :vartype license_type: str or ~azure.mgmt.azurearcdata.models.ArcSqlServerLicenseType
    :ivar azure_defender_status_last_updated: Timestamp of last Azure Defender status update.
    :vartype azure_defender_status_last_updated: ~datetime.datetime
    :ivar azure_defender_status: Status of Azure Defender. Known values are: "Protected",
     "Unprotected", and "Unknown".
    :vartype azure_defender_status: str or ~azure.mgmt.azurearcdata.models.DefenderStatus
    :ivar provisioning_state: The provisioning state of the Arc-enabled SQL Server resource.
    :vartype provisioning_state: str
    :ivar last_inventory_upload_time: The time when last successful inventory upload was performed.
    :vartype last_inventory_upload_time: ~datetime.datetime
    :ivar last_usage_upload_time: The time when last successful usage upload was performed.
    :vartype last_usage_upload_time: ~datetime.datetime
    :ivar host_type: Type of host for Azure Arc SQL Server. Known values are: "Azure Virtual
     Machine", "Azure VMWare Virtual Machine", "Azure Kubernetes Service", "AWS VMWare Virtual
     Machine", "AWS Kubernetes Service", "GCP VMWare Virtual Machine", "GCP Kubernetes Service",
     "Container", "Virtual Machine", "Physical Server", "AWS Virtual Machine", "GCP Virtual
     Machine", and "Other".
    :vartype host_type: str or ~azure.mgmt.azurearcdata.models.HostType
    :ivar always_on_role: The role of the SQL Server, based on availability. Known values are:
     "None", "FailoverClusterInstance", "FailoverClusterNode", and "AvailabilityGroupReplica".
    :vartype always_on_role: str or ~azure.mgmt.azurearcdata.models.AlwaysOnRole
    :ivar failover_cluster: Failover Cluster Instance properties.
    :vartype failover_cluster: ~azure.mgmt.azurearcdata.models.FailoverCluster
    :ivar backup_policy: The backup profile for the SQL server.
    :vartype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
    :ivar upgrade_locked_until: Upgrade Action for this resource is locked until it expires. The
     Expiration time indicated by this value. It is not locked when it is empty.
    :vartype upgrade_locked_until: ~datetime.datetime
    :ivar monitoring: The monitoring configuration.
    :vartype monitoring: ~azure.mgmt.azurearcdata.models.Monitoring
    """

    _validation = {
        "container_resource_id": {"readonly": True},
        "create_time": {"readonly": True},
        "v_core": {"readonly": True},
        "status": {"readonly": True},
        "patch_level": {"readonly": True},
        "collation": {"readonly": True},
        "current_version": {"readonly": True},
        "tcp_dynamic_ports": {"readonly": True},
        "tcp_static_ports": {"readonly": True},
        "product_id": {"readonly": True},
        "license_type": {"readonly": True},
        "azure_defender_status_last_updated": {"readonly": True},
        "azure_defender_status": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "last_inventory_upload_time": {"readonly": True},
        "last_usage_upload_time": {"readonly": True},
        "always_on_role": {"readonly": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "str"},
        "edition": {"key": "edition", "type": "str"},
        "container_resource_id": {"key": "containerResourceId", "type": "str"},
        "create_time": {"key": "createTime", "type": "str"},
        "v_core": {"key": "vCore", "type": "str"},
        "cores": {"key": "cores", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "patch_level": {"key": "patchLevel", "type": "str"},
        "collation": {"key": "collation", "type": "str"},
        "current_version": {"key": "currentVersion", "type": "str"},
        "instance_name": {"key": "instanceName", "type": "str"},
        "tcp_dynamic_ports": {"key": "tcpDynamicPorts", "type": "str"},
        "tcp_static_ports": {"key": "tcpStaticPorts", "type": "str"},
        "product_id": {"key": "productId", "type": "str"},
        "license_type": {"key": "licenseType", "type": "str"},
        "azure_defender_status_last_updated": {"key": "azureDefenderStatusLastUpdated", "type": "iso-8601"},
        "azure_defender_status": {"key": "azureDefenderStatus", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "last_inventory_upload_time": {"key": "lastInventoryUploadTime", "type": "iso-8601"},
        "last_usage_upload_time": {"key": "lastUsageUploadTime", "type": "iso-8601"},
        "host_type": {"key": "hostType", "type": "str"},
        "always_on_role": {"key": "alwaysOnRole", "type": "str"},
        "failover_cluster": {"key": "failoverCluster", "type": "FailoverCluster"},
        "backup_policy": {"key": "backupPolicy", "type": "BackupPolicy"},
        "upgrade_locked_until": {"key": "upgradeLockedUntil", "type": "iso-8601"},
        "monitoring": {"key": "monitoring", "type": "Monitoring"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        version: Optional[Union[str, "_models.SqlVersion"]] = None,
        edition: Optional[Union[str, "_models.EditionType"]] = None,
        cores: Optional[str] = None,
        instance_name: Optional[str] = None,
        host_type: Optional[Union[str, "_models.HostType"]] = None,
        failover_cluster: Optional["_models.FailoverCluster"] = None,
        backup_policy: Optional["_models.BackupPolicy"] = None,
        upgrade_locked_until: Optional[datetime.datetime] = None,
        monitoring: Optional["_models.Monitoring"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword version: SQL Server version. Known values are: "SQL Server 2012", "SQL Server 2014",
         "SQL Server 2016", "SQL Server 2017", "SQL Server 2019", "SQL Server 2022", and "Unknown".
        :paramtype version: str or ~azure.mgmt.azurearcdata.models.SqlVersion
        :keyword edition: SQL Server edition. Known values are: "Evaluation", "Enterprise", "Standard",
         "Web", "Developer", "Express", and "Business Intelligence".
        :paramtype edition: str or ~azure.mgmt.azurearcdata.models.EditionType
        :keyword cores: The number of total cores of the Operating System Environment (OSE) hosting the
         SQL Server instance.
        :paramtype cores: str
        :keyword instance_name: SQL Server instance name.
        :paramtype instance_name: str
        :keyword host_type: Type of host for Azure Arc SQL Server. Known values are: "Azure Virtual
         Machine", "Azure VMWare Virtual Machine", "Azure Kubernetes Service", "AWS VMWare Virtual
         Machine", "AWS Kubernetes Service", "GCP VMWare Virtual Machine", "GCP Kubernetes Service",
         "Container", "Virtual Machine", "Physical Server", "AWS Virtual Machine", "GCP Virtual
         Machine", and "Other".
        :paramtype host_type: str or ~azure.mgmt.azurearcdata.models.HostType
        :keyword failover_cluster: Failover Cluster Instance properties.
        :paramtype failover_cluster: ~azure.mgmt.azurearcdata.models.FailoverCluster
        :keyword backup_policy: The backup profile for the SQL server.
        :paramtype backup_policy: ~azure.mgmt.azurearcdata.models.BackupPolicy
        :keyword upgrade_locked_until: Upgrade Action for this resource is locked until it expires. The
         Expiration time indicated by this value. It is not locked when it is empty.
        :paramtype upgrade_locked_until: ~datetime.datetime
        :keyword monitoring: The monitoring configuration.
        :paramtype monitoring: ~azure.mgmt.azurearcdata.models.Monitoring
        """
        super().__init__(**kwargs)
        self.version = version
        self.edition = edition
        self.container_resource_id = None
        self.create_time = None
        self.v_core = None
        self.cores = cores
        self.status = None
        self.patch_level = None
        self.collation = None
        self.current_version = None
        self.instance_name = instance_name
        self.tcp_dynamic_ports = None
        self.tcp_static_ports = None
        self.product_id = None
        self.license_type = None
        self.azure_defender_status_last_updated = None
        self.azure_defender_status = None
        self.provisioning_state = None
        self.last_inventory_upload_time = None
        self.last_usage_upload_time = None
        self.host_type = host_type
        self.always_on_role = None
        self.failover_cluster = failover_cluster
        self.backup_policy = backup_policy
        self.upgrade_locked_until = upgrade_locked_until
        self.monitoring = monitoring


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.azurearcdata.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.azurearcdata.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.azurearcdata.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.azurearcdata.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UploadServicePrincipal(_serialization.Model):
    """Service principal for uploading billing, metrics and logs.

    :ivar client_id: Client ID of the service principal for uploading data.
    :vartype client_id: str
    :ivar tenant_id: Tenant ID of the service principal.
    :vartype tenant_id: str
    :ivar authority: Authority for the service principal. Example:
     https://login.microsoftonline.com/.
    :vartype authority: str
    :ivar client_secret: Secret of the service principal.
    :vartype client_secret: str
    """

    _attribute_map = {
        "client_id": {"key": "clientId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "authority": {"key": "authority", "type": "str"},
        "client_secret": {"key": "clientSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        client_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        authority: Optional[str] = None,
        client_secret: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword client_id: Client ID of the service principal for uploading data.
        :paramtype client_id: str
        :keyword tenant_id: Tenant ID of the service principal.
        :paramtype tenant_id: str
        :keyword authority: Authority for the service principal. Example:
         https://login.microsoftonline.com/.
        :paramtype authority: str
        :keyword client_secret: Secret of the service principal.
        :paramtype client_secret: str
        """
        super().__init__(**kwargs)
        self.client_id = client_id
        self.tenant_id = tenant_id
        self.authority = authority
        self.client_secret = client_secret


class UploadWatermark(_serialization.Model):
    """Properties on upload watermark.  Mostly timestamp for each upload data type.

    :ivar metrics: Last uploaded date for metrics from kubernetes cluster. Defaults to current date
     time.
    :vartype metrics: ~datetime.datetime
    :ivar logs: Last uploaded date for logs from kubernetes cluster. Defaults to current date time.
    :vartype logs: ~datetime.datetime
    :ivar usages: Last uploaded date for usages from kubernetes cluster. Defaults to current date
     time.
    :vartype usages: ~datetime.datetime
    """

    _attribute_map = {
        "metrics": {"key": "metrics", "type": "iso-8601"},
        "logs": {"key": "logs", "type": "iso-8601"},
        "usages": {"key": "usages", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        metrics: Optional[datetime.datetime] = None,
        logs: Optional[datetime.datetime] = None,
        usages: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword metrics: Last uploaded date for metrics from kubernetes cluster. Defaults to current
         date time.
        :paramtype metrics: ~datetime.datetime
        :keyword logs: Last uploaded date for logs from kubernetes cluster. Defaults to current date
         time.
        :paramtype logs: ~datetime.datetime
        :keyword usages: Last uploaded date for usages from kubernetes cluster. Defaults to current
         date time.
        :paramtype usages: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.metrics = metrics
        self.logs = logs
        self.usages = usages
