# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccountProvisioningMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The service account provisioning mode for this Active Directory connector."""

    AUTOMATIC = "automatic"
    MANUAL = "manual"


class ActivationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The activation state of the license."""

    ACTIVATED = "Activated"
    DEACTIVATED = "Deactivated"


class AggregationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The aggregation type to use for the numerical columns in the dataset."""

    AVERAGE = "Average"
    MINIMUM = "Minimum"
    MAXIMUM = "Maximum"
    SUM = "Sum"
    COUNT = "Count"


class AlwaysOnRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The role of the SQL Server, based on availability."""

    NONE = "None"
    FAILOVER_CLUSTER_INSTANCE = "FailoverClusterInstance"
    FAILOVER_CLUSTER_NODE = "FailoverClusterNode"
    AVAILABILITY_GROUP_REPLICA = "AvailabilityGroupReplica"


class ArcSqlManagedInstanceLicenseType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The license type to apply for this managed instance."""

    BASE_PRICE = "BasePrice"
    LICENSE_INCLUDED = "LicenseIncluded"
    DISASTER_RECOVERY = "DisasterRecovery"


class ArcSqlServerAvailabilityMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Property that determines whether a given availability replica can run in synchronous-commit
    mode.
    """

    SYNCHRONOUS_COMMIT = "SYNCHRONOUS_COMMIT"
    ASYNCHRONOUS_COMMIT = "ASYNCHRONOUS_COMMIT"


class ArcSqlServerFailoverMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Property to set the failover mode of the availability group replica."""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    EXTERNAL = "EXTERNAL"


class ArcSqlServerLicenseType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SQL Server license type."""

    UNDEFINED = "Undefined"
    FREE = "Free"
    HADR = "HADR"
    SERVER_CAL = "ServerCAL"
    LICENSE_ONLY = "LicenseOnly"
    PAYG = "PAYG"
    PAID = "Paid"


class AutomatedBackupPreference(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Preferred replica for running automated backups."""

    PRIMARY = "PRIMARY"
    SECONDARY_ONLY = "SECONDARY_ONLY"
    SECONDARY = "SECONDARY"
    NONE = "NONE"


class BillingPlan(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SQL Server ESU license type."""

    PAYG = "PAYG"
    PAID = "Paid"


class ClusterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Set to WSFC when availability group is on a failover cluster instance on a Windows Server
    failover cluster. Set to NONE when availability group not using WSFC for cluster coordination.
    """

    WSFC = "WSFC"
    NONE = "NONE"


class ConnectionAuth(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The endpoint connection authentication type(s)."""

    WINDOWS_NTLM = "Windows_NTLM"
    WINDOWS_KERBEROS = "Windows_Kerberos"
    WINDOWS_NEGOTIATE = "Windows_Negotiate"
    CERTIFICATE = "Certificate"
    WINDOWS_NTLM_CERTIFICATE = "Windows_NTLM_Certificate"
    WINDOWS_KERBEROS_CERTIFICATE = "Windows_Kerberos_Certificate"
    WINDOWS_NEGOTIATE_CERTIFICATE = "Windows_Negotiate_Certificate"
    CERTIFICATE_WINDOWS_NTLM = "Certificate_Windows_NTLM"
    CERTIFICATE_WINDOWS_KERBEROS = "Certificate_Windows_Kerberos"
    CERTIFICATE_WINDOWS_NEGOTIATE = "Certificate_Windows_Negotiate"


class ConnectionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The cloud connectivity status."""

    CONNECTED = "Connected"
    DISCONNECTED = "Disconnected"
    REGISTERED = "Registered"
    UNKNOWN = "Unknown"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class DatabaseCreateMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup
    of an existing database. sourceDatabaseId and restorePointInTime must be specified.
    """

    DEFAULT = "Default"
    POINT_IN_TIME_RESTORE = "PointInTimeRestore"


class DatabaseState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """State of the database."""

    ONLINE = "Online"
    RESTORING = "Restoring"
    RECOVERING = "Recovering"
    RECOVERY_PENDING = "RecoveryPending"
    SUSPECT = "Suspect"
    EMERGENCY = "Emergency"
    OFFLINE = "Offline"
    COPYING = "Copying"
    OFFLINE_SECONDARY = "OfflineSecondary"


class DbFailover(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies whether the availability group supports failover for database health conditions."""

    ON = "ON"
    OFF = "OFF"


class DefenderStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status of Azure Defender."""

    PROTECTED = "Protected"
    UNPROTECTED = "Unprotected"
    UNKNOWN = "Unknown"


class DifferentialBackupHours(int, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The differential backup interval in hours."""

    TWELVE = 12
    TWENTY_FOUR = 24


class DtcSupport(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies whether DTC support has been enabled for this availability group."""

    PER_DB = "PER_DB"
    NONE = "NONE"


class EditionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SQL Server edition."""

    EVALUATION = "Evaluation"
    ENTERPRISE = "Enterprise"
    STANDARD = "Standard"
    WEB = "Web"
    DEVELOPER = "Developer"
    EXPRESS = "Express"
    BUSINESS_INTELLIGENCE = "Business Intelligence"


class EncryptionAlgorithm(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The encryption algorithm(s) used by the endpoint."""

    NONE = "NONE"
    RC4 = "RC4"
    AES = "AES"
    NONE_RC4 = "NONE, RC4"
    NONE_AES = "NONE, AES"
    RC4_AES = "RC4, AES"
    AES_RC4 = "AES, RC4"
    NONE_RC4_AES = "NONE, RC4, AES"
    NONE_AES_RC4 = "NONE, AES, RC4"


class ExecutionState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The execution state of the background job."""

    WAITING = "Waiting"
    RUNNING = "Running"


class ExtendedLocationTypes(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of extendedLocation."""

    CUSTOM_LOCATION = "CustomLocation"


class FailoverGroupPartnerSyncMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The partner sync mode of the SQL managed instance."""

    ASYNC = "async"
    SYNC = "sync"
    ASYNC_ENUM = "async"


class FailureConditionLevel(int, Enum, metaclass=CaseInsensitiveEnumMeta):
    """User-defined failure condition level under which an automatic failover must be triggered."""

    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5


class HostType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of host for Azure Arc SQL Server."""

    AZURE_VIRTUAL_MACHINE = "Azure Virtual Machine"
    AZURE_VM_WARE_VIRTUAL_MACHINE = "Azure VMWare Virtual Machine"
    AZURE_KUBERNETES_SERVICE = "Azure Kubernetes Service"
    AWS_VM_WARE_VIRTUAL_MACHINE = "AWS VMWare Virtual Machine"
    AWS_KUBERNETES_SERVICE = "AWS Kubernetes Service"
    GCP_VM_WARE_VIRTUAL_MACHINE = "GCP VMWare Virtual Machine"
    GCP_KUBERNETES_SERVICE = "GCP Kubernetes Service"
    CONTAINER = "Container"
    VIRTUAL_MACHINE = "Virtual Machine"
    PHYSICAL_SERVER = "Physical Server"
    AWS_VIRTUAL_MACHINE = "AWS Virtual Machine"
    GCP_VIRTUAL_MACHINE = "GCP Virtual Machine"
    OTHER = "Other"


class Infrastructure(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The infrastructure the data controller is running on."""

    AZURE = "azure"
    GCP = "gcp"
    AWS = "aws"
    ALIBABA = "alibaba"
    ONPREMISES = "onpremises"
    OTHER = "other"


class InstanceFailoverGroupRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The role of the SQL managed instance in this failover group."""

    PRIMARY = "primary"
    SECONDARY = "secondary"
    FORCE_PRIMARY_ALLOW_DATA_LOSS = "force-primary-allow-data-loss"
    FORCE_SECONDARY = "force-secondary"


class JobStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the job."""

    NOT_STARTED = "NotStarted"
    IN_PROGRESS = "InProgress"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"


class LastExecutionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The last execution status of the background job."""

    SUCCEEDED = "Succeeded"
    COMPLETED = "Completed"
    FAILED = "Failed"
    FAULTED = "Faulted"
    POSTPONED = "Postponed"
    RESCHEDULED = "Rescheduled"


class LicenseCategory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """This property represents the choice between SQL Server Core and ESU licenses."""

    CORE = "Core"


class OperationOrigin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation."""

    USER = "user"
    SYSTEM = "system"


class PrimaryAllowConnections(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Whether the primary replica should allow all connections or only READ_WRITE connections
    (disallowing ReadOnly connections).
    """

    ALL = "ALL"
    READ_WRITE = "READ_WRITE"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The provisioning state of the failover group resource."""

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    ACCEPTED = "Accepted"


class RecommendationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The target recommendation Status for this database."""

    NOT_READY = "NotReady"
    READY = "Ready"
    UNKNOWN = "Unknown"


class RecoveryMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status of the database."""

    FULL = "Full"
    BULK_LOGGED = "Bulk-logged"
    SIMPLE = "Simple"


class ReplicationPartnerType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ReplicationPartnerType."""

    SQL_SERVER = "SQLServer"
    AZURE_SQLVM = "AzureSQLVM"
    AZURE_SQL_MANAGED_INSTANCE = "AzureSQLManagedInstance"
    UNKNOWN = "Unknown"


class Result(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The result of the sequencer action."""

    NOT_COMPLETED = "NotCompleted"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    TIMED_OUT = "TimedOut"
    SKIPPED = "Skipped"


class Role(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Mirroring Role."""

    NONE = "NONE"
    PARTNER = "PARTNER"
    WITNESS = "WITNESS"
    ALL = "ALL"


class ScopeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Azure scope to which the license will apply."""

    TENANT = "Tenant"
    SUBSCRIPTION = "Subscription"
    RESOURCE_GROUP = "ResourceGroup"


class SecondaryAllowConnections(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Whether the secondary replica should allow all connections, no connections, or only ReadOnly
    connections.
    """

    NO = "NO"
    ALL = "ALL"
    READ_ONLY = "READ_ONLY"


class SeedingMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding.
    This method will seed the secondary replica over the network. This method does not require you
    to backup and restore a copy of the primary database on the replica. MANUAL specifies manual
    seeding (default). This method requires you to create a backup of the database on the primary
    replica and manually restore that backup on the secondary replica.
    """

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"


class SequencerState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of the sequencer action."""

    NOT_STARTED = "NotStarted"
    WAITING_PREDECESSORS = "WaitingPredecessors"
    EXECUTING_ACTION = "ExecutingAction"
    CREATING_SUCCESSORS = "CreatingSuccessors"
    COMPLETED = "Completed"


class ServiceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates if the resource represents a SQL Server engine or a SQL Server component service
    installed on the host.
    """

    ENGINE = "Engine"
    """SQL Server Database Services."""
    SSRS = "SSRS"
    """SQL Server Reporting Services."""
    SSAS = "SSAS"
    """SQL Server Analysis Services."""
    SSIS = "SSIS"
    """SQL Server Integration Services."""
    PBIRS = "PBIRS"
    """Power BI Report Server."""


class SqlManagedInstanceSkuTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The pricing tier for the instance."""

    GENERAL_PURPOSE = "GeneralPurpose"
    BUSINESS_CRITICAL = "BusinessCritical"


class SqlServerInstanceTelemetryColumnType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the telemetry column."""

    BOOL = "bool"
    DATETIME = "datetime"
    INT = "int"
    LONG = "long"
    DOUBLE = "double"
    STRING = "string"
    GUID = "guid"
    TIMESPAN = "timespan"
    INT_ENUM = "int"


class SqlVersion(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SQL Server version."""

    SQL_SERVER2012 = "SQL Server 2012"
    SQL_SERVER2014 = "SQL Server 2014"
    SQL_SERVER2016 = "SQL Server 2016"
    SQL_SERVER2017 = "SQL Server 2017"
    SQL_SERVER2019 = "SQL Server 2019"
    SQL_SERVER2022 = "SQL Server 2022"
    UNKNOWN = "Unknown"


class State(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The activation state of the license."""

    INACTIVE = "Inactive"
    ACTIVE = "Active"
    TERMINATED = "Terminated"
    ENABLED = "Enabled"
    DISABLED = "Disabled"
    DELETED = "Deleted"
    COMPLETED = "Completed"
    FAULTED = "Faulted"
    SUSPENDED = "Suspended"


class Version(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The SQL Server version the license covers."""

    SQL_SERVER2012 = "SQL Server 2012"
    SQL_SERVER2014 = "SQL Server 2014"
