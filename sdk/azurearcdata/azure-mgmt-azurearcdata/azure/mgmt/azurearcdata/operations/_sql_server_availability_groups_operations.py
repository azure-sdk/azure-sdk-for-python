# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Iterator, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models as _models
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_create_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_delete_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_update_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_detail_view_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/getDetailView",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_failover_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failover",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_force_failover_allow_data_loss_request(  # pylint: disable=name-too-long
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/forceFailoverAllowDataLoss",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_create_availability_group_request(
    resource_group_name: str, sql_server_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createAvailabilityGroup",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_create_distributed_availability_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, sql_server_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createDistributedAvailabilityGroup",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_create_managed_instance_link_request(  # pylint: disable=name-too-long
    resource_group_name: str, sql_server_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/createManagedInstanceLink",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_add_databases_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/addDatabases",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_failover_mi_link_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/failoverMiLink",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_remove_databases_request(
    resource_group_name: str,
    sql_server_instance_name: str,
    availability_group_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups/{availabilityGroupName}/removeDatabases",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
        "availabilityGroupName": _SERIALIZER.url("availability_group_name", availability_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_list_request(
    resource_group_name: str, sql_server_instance_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-03-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/availabilityGroups",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sqlServerInstanceName": _SERIALIZER.url("sql_server_instance_name", sql_server_instance_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class SqlServerAvailabilityGroupsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.azurearcdata.AzureArcDataManagementClient`'s
        :attr:`sql_server_availability_groups` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_resource: _models.SqlServerAvailabilityGroupResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Creates or replaces an Arc Sql Server Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_resource: The request body for availability group
         resource. Required.
        :type sql_server_availability_group_resource:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Creates or replaces an Arc Sql Server Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_resource: The request body for availability group
         resource. Required.
        :type sql_server_availability_group_resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_resource: Union[_models.SqlServerAvailabilityGroupResource, IO[bytes]],
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Creates or replaces an Arc Sql Server Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_resource: The request body for availability group
         resource. Is either a SqlServerAvailabilityGroupResource type or a IO[bytes] type. Required.
        :type sql_server_availability_group_resource:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource or IO[bytes]
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(sql_server_availability_group_resource, (IOBase, bytes)):
            _content = sql_server_availability_group_resource
        else:
            _json = self._serialize.body(sql_server_availability_group_resource, "SqlServerAvailabilityGroupResource")

        _request = build_create_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _delete_initial(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_delete_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> LROPoller[None]:
        """Deletes an Arc Sql Server availability group resource.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :return: An instance of LROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                availability_group_name=availability_group_name,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def get(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Retrieves an Arc Sql Server availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        _request = build_get_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _update_initial(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_update: Union[_models.SqlServerAvailabilityGroupUpdate, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(sql_server_availability_group_update, (IOBase, bytes)):
            _content = sql_server_availability_group_update
        else:
            _json = self._serialize.body(sql_server_availability_group_update, "SqlServerAvailabilityGroupUpdate")

        _request = build_update_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_update: _models.SqlServerAvailabilityGroupUpdate,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Updates an existing Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_update: The requested server availability group resource
         state. Required.
        :type sql_server_availability_group_update:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupUpdate
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_update: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Updates an existing Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_update: The requested server availability group resource
         state. Required.
        :type sql_server_availability_group_update: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        sql_server_availability_group_update: Union[_models.SqlServerAvailabilityGroupUpdate, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Updates an existing Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param sql_server_availability_group_update: The requested server availability group resource
         state. Is either a SqlServerAvailabilityGroupUpdate type or a IO[bytes] type. Required.
        :type sql_server_availability_group_update:
         ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupUpdate or IO[bytes]
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                availability_group_name=availability_group_name,
                sql_server_availability_group_update=sql_server_availability_group_update,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SqlServerAvailabilityGroupResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SqlServerAvailabilityGroupResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace
    def detail_view(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Retrieves detailed properties of the Availability Group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        _request = build_detail_view_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def failover(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request manual failover of the availability group to this server.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        _request = build_failover_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def force_failover_allow_data_loss(
        self, resource_group_name: str, sql_server_instance_name: str, availability_group_name: str, **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request forced failover of the availability group to this server.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        _request = build_force_failover_allow_data_loss_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _create_availability_group_initial(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_ag_configuration: Union[_models.AvailabilityGroupCreateUpdateConfiguration, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_ag_configuration, (IOBase, bytes)):
            _content = create_ag_configuration
        else:
            _json = self._serialize.body(create_ag_configuration, "AvailabilityGroupCreateUpdateConfiguration")

        _request = build_create_availability_group_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create_availability_group(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_ag_configuration: _models.AvailabilityGroupCreateUpdateConfiguration,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_ag_configuration: The configuration for the new SQL Server availability group
         resource. Required.
        :type create_ag_configuration:
         ~azure.mgmt.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_create_availability_group(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_ag_configuration: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_ag_configuration: The configuration for the new SQL Server availability group
         resource. Required.
        :type create_ag_configuration: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_create_availability_group(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_ag_configuration: Union[_models.AvailabilityGroupCreateUpdateConfiguration, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_ag_configuration: The configuration for the new SQL Server availability group
         resource. Is either a AvailabilityGroupCreateUpdateConfiguration type or a IO[bytes] type.
         Required.
        :type create_ag_configuration:
         ~azure.mgmt.azurearcdata.models.AvailabilityGroupCreateUpdateConfiguration or IO[bytes]
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_availability_group_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                create_ag_configuration=create_ag_configuration,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SqlServerAvailabilityGroupResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SqlServerAvailabilityGroupResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _create_distributed_availability_group_initial(  # pylint: disable=name-too-long
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_dag_configuration: Union[_models.DistributedAvailabilityGroupCreateUpdateConfiguration, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_dag_configuration, (IOBase, bytes)):
            _content = create_dag_configuration
        else:
            _json = self._serialize.body(
                create_dag_configuration, "DistributedAvailabilityGroupCreateUpdateConfiguration"
            )

        _request = build_create_distributed_availability_group_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create_distributed_availability_group(  # pylint: disable=name-too-long
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_dag_configuration: _models.DistributedAvailabilityGroupCreateUpdateConfiguration,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server distributed availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_dag_configuration: The configuration for the new SQL Server availability group
         resource. Required.
        :type create_dag_configuration:
         ~azure.mgmt.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_create_distributed_availability_group(  # pylint: disable=name-too-long
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_dag_configuration: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server distributed availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_dag_configuration: The configuration for the new SQL Server availability group
         resource. Required.
        :type create_dag_configuration: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_create_distributed_availability_group(  # pylint: disable=name-too-long
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_dag_configuration: Union[_models.DistributedAvailabilityGroupCreateUpdateConfiguration, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create a SQL Server distributed availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_dag_configuration: The configuration for the new SQL Server availability group
         resource. Is either a DistributedAvailabilityGroupCreateUpdateConfiguration type or a IO[bytes]
         type. Required.
        :type create_dag_configuration:
         ~azure.mgmt.azurearcdata.models.DistributedAvailabilityGroupCreateUpdateConfiguration or
         IO[bytes]
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_distributed_availability_group_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                create_dag_configuration=create_dag_configuration,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SqlServerAvailabilityGroupResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SqlServerAvailabilityGroupResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _create_managed_instance_link_initial(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_managed_instance_link_configuration: Union[
            _models.ManagedInstanceLinkCreateUpdateConfiguration, IO[bytes]
        ],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_managed_instance_link_configuration, (IOBase, bytes)):
            _content = create_managed_instance_link_configuration
        else:
            _json = self._serialize.body(
                create_managed_instance_link_configuration, "ManagedInstanceLinkCreateUpdateConfiguration"
            )

        _request = build_create_managed_instance_link_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Azure-AsyncOperation"] = self._deserialize(
                "str", response.headers.get("Azure-AsyncOperation")
            )

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create_managed_instance_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_managed_instance_link_configuration: _models.ManagedInstanceLinkCreateUpdateConfiguration,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create an Managed Instance Link.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_managed_instance_link_configuration: The configuration for the new Managed
         Instance Link resource. Required.
        :type create_managed_instance_link_configuration:
         ~azure.mgmt.azurearcdata.models.ManagedInstanceLinkCreateUpdateConfiguration
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_create_managed_instance_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_managed_instance_link_configuration: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create an Managed Instance Link.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_managed_instance_link_configuration: The configuration for the new Managed
         Instance Link resource. Required.
        :type create_managed_instance_link_configuration: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_create_managed_instance_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        create_managed_instance_link_configuration: Union[
            _models.ManagedInstanceLinkCreateUpdateConfiguration, IO[bytes]
        ],
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Create an Managed Instance Link.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param create_managed_instance_link_configuration: The configuration for the new Managed
         Instance Link resource. Is either a ManagedInstanceLinkCreateUpdateConfiguration type or a
         IO[bytes] type. Required.
        :type create_managed_instance_link_configuration:
         ~azure.mgmt.azurearcdata.models.ManagedInstanceLinkCreateUpdateConfiguration or IO[bytes]
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_managed_instance_link_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                create_managed_instance_link_configuration=create_managed_instance_link_configuration,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SqlServerAvailabilityGroupResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SqlServerAvailabilityGroupResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def add_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: _models.Databases,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request adding database(s) to an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to add to the SQL Server availability group resource.
         Required.
        :type databases: ~azure.mgmt.azurearcdata.models.Databases
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def add_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request adding database(s) to an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to add to the SQL Server availability group resource.
         Required.
        :type databases: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: Union[_models.Databases, IO[bytes]],
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request adding database(s) to an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to add to the SQL Server availability group resource. Is
         either a Databases type or a IO[bytes] type. Required.
        :type databases: ~azure.mgmt.azurearcdata.models.Databases or IO[bytes]
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(databases, (IOBase, bytes)):
            _content = databases
        else:
            _json = self._serialize.body(databases, "Databases")

        _request = build_add_databases_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _failover_mi_link_initial(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        managed_instance_resource_id: Union[_models.FailoverMiLinkResourceId, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(managed_instance_resource_id, (IOBase, bytes)):
            _content = managed_instance_resource_id
        else:
            _json = self._serialize.body(managed_instance_resource_id, "FailoverMiLinkResourceId")

        _request = build_failover_mi_link_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop("decompress", True)
        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Azure-AsyncOperation"] = self._deserialize(
                "str", response.headers.get("Azure-AsyncOperation")
            )

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_failover_mi_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        managed_instance_resource_id: _models.FailoverMiLinkResourceId,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Request failover of Arc Sql Server to Azure Managed Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param managed_instance_resource_id: The azure resource identifier for the Sql Managed
         Instance. Required.
        :type managed_instance_resource_id: ~azure.mgmt.azurearcdata.models.FailoverMiLinkResourceId
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def begin_failover_mi_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        managed_instance_resource_id: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Request failover of Arc Sql Server to Azure Managed Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param managed_instance_resource_id: The azure resource identifier for the Sql Managed
         Instance. Required.
        :type managed_instance_resource_id: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def begin_failover_mi_link(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        managed_instance_resource_id: Union[_models.FailoverMiLinkResourceId, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.SqlServerAvailabilityGroupResource]:
        """Request failover of Arc Sql Server to Azure Managed Instance.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param managed_instance_resource_id: The azure resource identifier for the Sql Managed
         Instance. Is either a FailoverMiLinkResourceId type or a IO[bytes] type. Required.
        :type managed_instance_resource_id: ~azure.mgmt.azurearcdata.models.FailoverMiLinkResourceId or
         IO[bytes]
        :return: An instance of LROPoller that returns either SqlServerAvailabilityGroupResource or the
         result of cls(response)
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._failover_mi_link_initial(
                resource_group_name=resource_group_name,
                sql_server_instance_name=sql_server_instance_name,
                availability_group_name=availability_group_name,
                managed_instance_resource_id=managed_instance_resource_id,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SqlServerAvailabilityGroupResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SqlServerAvailabilityGroupResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def remove_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: _models.Databases,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request removing database(s) from an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to remove from the SQL Server availability group resource.
         Required.
        :type databases: ~azure.mgmt.azurearcdata.models.Databases
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def remove_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request removing database(s) from an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to remove from the SQL Server availability group resource.
         Required.
        :type databases: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_databases(
        self,
        resource_group_name: str,
        sql_server_instance_name: str,
        availability_group_name: str,
        databases: Union[_models.Databases, IO[bytes]],
        **kwargs: Any
    ) -> _models.SqlServerAvailabilityGroupResource:
        """Request removing database(s) from an existing availability group.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :param availability_group_name: Name of SQL Availability Group. Required.
        :type availability_group_name: str
        :param databases: The database names to remove from the SQL Server availability group resource.
         Is either a Databases type or a IO[bytes] type. Required.
        :type databases: ~azure.mgmt.azurearcdata.models.Databases or IO[bytes]
        :return: SqlServerAvailabilityGroupResource or the result of cls(response)
        :rtype: ~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SqlServerAvailabilityGroupResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(databases, (IOBase, bytes)):
            _content = databases
        else:
            _json = self._serialize.body(databases, "Databases")

        _request = build_remove_databases_request(
            resource_group_name=resource_group_name,
            sql_server_instance_name=sql_server_instance_name,
            availability_group_name=availability_group_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SqlServerAvailabilityGroupResource", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list(
        self, resource_group_name: str, sql_server_instance_name: str, **kwargs: Any
    ) -> Iterable["_models.SqlServerAvailabilityGroupResource"]:
        """List the availability group associated with the given Arc Sql Server.

        List the availability group associated with the given Arc Sql Server.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param sql_server_instance_name: Name of SQL Server Instance. Required.
        :type sql_server_instance_name: str
        :return: An iterator like instance of either SqlServerAvailabilityGroupResource or the result
         of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.azurearcdata.models.SqlServerAvailabilityGroupResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.ArcSqlServerAvailabilityGroupListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_request(
                    resource_group_name=resource_group_name,
                    sql_server_instance_name=sql_server_instance_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("ArcSqlServerAvailabilityGroupListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
