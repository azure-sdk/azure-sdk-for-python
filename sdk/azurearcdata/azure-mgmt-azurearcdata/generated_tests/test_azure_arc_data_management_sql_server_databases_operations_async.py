# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurearcdata.aio import AzureArcDataManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureArcDataManagementSqlServerDatabasesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureArcDataManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create(self, resource_group):
        response = await self.client.sql_server_databases.create(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            database_name="str",
            sql_server_database_resource={
                "location": "str",
                "properties": {
                    "backupInformation": {
                        "lastFullBackup": "2020-02-20 00:00:00",
                        "lastLogBackup": "2020-02-20 00:00:00",
                    },
                    "backupPolicy": {
                        "differentialBackupHours": 0,
                        "fullBackupDays": 0,
                        "retentionPeriodDays": 0,
                        "transactionLogBackupMinutes": 0,
                    },
                    "collationName": "str",
                    "compatibilityLevel": 0,
                    "createMode": "str",
                    "databaseCreationDate": "2020-02-20 00:00:00",
                    "databaseOptions": {
                        "isAutoCloseOn": bool,
                        "isAutoCreateStatsOn": bool,
                        "isAutoShrinkOn": bool,
                        "isAutoUpdateStatsOn": bool,
                        "isEncrypted": bool,
                        "isMemoryOptimizationEnabled": bool,
                        "isRemoteDataArchiveEnabled": bool,
                        "isTrustworthyOn": bool,
                    },
                    "earliestRestoreDate": "2020-02-20 00:00:00",
                    "isReadOnly": bool,
                    "lastDatabaseUploadTime": "2020-02-20 00:00:00",
                    "migration": {
                        "assessment": {
                            "assessmentUploadTime": "2020-02-20 00:00:00",
                            "databaseAssessments": [
                                {
                                    "appliesToMigrationTargetPlatform": "str",
                                    "featureId": "str",
                                    "issueCategory": "str",
                                    "moreInformation": "str",
                                }
                            ],
                            "targetReadiness": {
                                "azureSqlDatabase": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                                "azureSqlManagedInstance": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                                "azureSqlVirtualMachine": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                            },
                        }
                    },
                    "provisioningState": "str",
                    "recoveryMode": "str",
                    "restorePointInTime": "2020-02-20 00:00:00",
                    "sizeMB": 0.0,
                    "sourceDatabaseId": "str",
                    "spaceAvailableMB": 0.0,
                    "state": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.sql_server_databases.begin_delete(
                resource_group_name=resource_group.name,
                sql_server_instance_name="str",
                database_name="str",
                api_version="2024-05-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.sql_server_databases.get(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            database_name="str",
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update(self, resource_group):
        response = await (
            await self.client.sql_server_databases.begin_update(
                resource_group_name=resource_group.name,
                sql_server_instance_name="str",
                database_name="str",
                sql_server_database_update={
                    "properties": {
                        "backupInformation": {
                            "lastFullBackup": "2020-02-20 00:00:00",
                            "lastLogBackup": "2020-02-20 00:00:00",
                        },
                        "backupPolicy": {
                            "differentialBackupHours": 0,
                            "fullBackupDays": 0,
                            "retentionPeriodDays": 0,
                            "transactionLogBackupMinutes": 0,
                        },
                        "collationName": "str",
                        "compatibilityLevel": 0,
                        "createMode": "str",
                        "databaseCreationDate": "2020-02-20 00:00:00",
                        "databaseOptions": {
                            "isAutoCloseOn": bool,
                            "isAutoCreateStatsOn": bool,
                            "isAutoShrinkOn": bool,
                            "isAutoUpdateStatsOn": bool,
                            "isEncrypted": bool,
                            "isMemoryOptimizationEnabled": bool,
                            "isRemoteDataArchiveEnabled": bool,
                            "isTrustworthyOn": bool,
                        },
                        "earliestRestoreDate": "2020-02-20 00:00:00",
                        "isReadOnly": bool,
                        "lastDatabaseUploadTime": "2020-02-20 00:00:00",
                        "migration": {
                            "assessment": {
                                "assessmentUploadTime": "2020-02-20 00:00:00",
                                "databaseAssessments": [
                                    {
                                        "appliesToMigrationTargetPlatform": "str",
                                        "featureId": "str",
                                        "issueCategory": "str",
                                        "moreInformation": "str",
                                    }
                                ],
                                "targetReadiness": {
                                    "azureSqlDatabase": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                                    "azureSqlManagedInstance": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                                    "azureSqlVirtualMachine": {"numOfBlockerIssues": 0, "recommendationStatus": "str"},
                                },
                            }
                        },
                        "provisioningState": "str",
                        "recoveryMode": "str",
                        "restorePointInTime": "2020-02-20 00:00:00",
                        "sizeMB": 0.0,
                        "sourceDatabaseId": "str",
                        "spaceAvailableMB": 0.0,
                        "state": "str",
                    },
                    "tags": {"str": "str"},
                },
                api_version="2024-05-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.sql_server_databases.list(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2024-05-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
