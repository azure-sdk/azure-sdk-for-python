# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurearcdata import AzureArcDataManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureArcDataManagementSqlServerEsuLicensesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureArcDataManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_list(self, resource_group):
        response = self.client.sql_server_esu_licenses.list(
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_list_by_resource_group(self, resource_group):
        response = self.client.sql_server_esu_licenses.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_get(self, resource_group):
        response = self.client.sql_server_esu_licenses.get(
            resource_group_name=resource_group.name,
            sql_server_esu_license_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_create(self, resource_group):
        response = self.client.sql_server_esu_licenses.create(
            resource_group_name=resource_group.name,
            sql_server_esu_license_name="str",
            sql_server_esu_license={
                "location": "str",
                "properties": {
                    "activationState": "str",
                    "billingPlan": "str",
                    "physicalCores": 0,
                    "scopeType": "str",
                    "version": "str",
                    "activatedAt": "2020-02-20 00:00:00",
                    "tenantId": "str",
                    "terminatedAt": "2020-02-20 00:00:00",
                    "uniqueId": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_delete(self, resource_group):
        response = self.client.sql_server_esu_licenses.delete(
            resource_group_name=resource_group.name,
            sql_server_esu_license_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_esu_licenses_update(self, resource_group):
        response = self.client.sql_server_esu_licenses.update(
            resource_group_name=resource_group.name,
            sql_server_esu_license_name="str",
            parameters={
                "properties": {
                    "activatedAt": "2020-02-20 00:00:00",
                    "activationState": "str",
                    "billingPlan": "str",
                    "physicalCores": 0,
                    "scopeType": "str",
                    "tenantId": "str",
                    "terminatedAt": "2020-02-20 00:00:00",
                    "uniqueId": "str",
                    "version": "str",
                },
                "tags": {"str": "str"},
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...
