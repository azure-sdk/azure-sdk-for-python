# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurearcdata import AzureArcDataManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureArcDataManagementSqlServerInstancesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureArcDataManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_list(self, resource_group):
        response = self.client.sql_server_instances.list(
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_list_by_resource_group(self, resource_group):
        response = self.client.sql_server_instances.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_get(self, resource_group):
        response = self.client.sql_server_instances.get(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_begin_create(self, resource_group):
        response = self.client.sql_server_instances.begin_create(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            sql_server_instance={
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "alwaysOnRole": "str",
                    "authentication": {
                        "mode": "str",
                        "sqlServerEntraIdentity": [{"clientId": "str", "identityType": "str"}],
                    },
                    "azureDefenderStatus": "str",
                    "azureDefenderStatusLastUpdated": "2020-02-20 00:00:00",
                    "backupPolicy": {
                        "differentialBackupHours": 0,
                        "fullBackupDays": 0,
                        "retentionPeriodDays": 0,
                        "transactionLogBackupMinutes": 0,
                    },
                    "clientConnection": {"enabled": bool},
                    "collation": "str",
                    "containerResourceId": "str",
                    "cores": "str",
                    "createTime": "str",
                    "currentVersion": "str",
                    "databaseMirroringEndpoint": {
                        "certificateName": "str",
                        "connectionAuth": "str",
                        "encryptionAlgorithm": "str",
                        "endpointName": "str",
                        "ipAddress": "str",
                        "isDynamicPort": bool,
                        "isEncryptionEnabled": bool,
                        "port": 0,
                        "role": "str",
                    },
                    "dbMasterKeyExists": bool,
                    "edition": "str",
                    "failoverCluster": {
                        "hostIPAddresses": [{"ipAddress": "str", "subnetMask": "str"}],
                        "hostNames": ["str"],
                        "id": "str",
                        "networkName": "str",
                        "sqlInstanceIds": ["str"],
                    },
                    "hostType": "str",
                    "instanceName": "str",
                    "isDigiCertPkiCertTrustConfigured": bool,
                    "isHadrEnabled": bool,
                    "isMicrosoftPkiCertTrustConfigured": bool,
                    "lastInventoryUploadTime": "2020-02-20 00:00:00",
                    "lastUsageUploadTime": "2020-02-20 00:00:00",
                    "licenseType": "str",
                    "maxServerMemoryMB": 0,
                    "migration": {
                        "assessment": {
                            "assessmentUploadTime": "2020-02-20 00:00:00",
                            "enabled": bool,
                            "serverAssessments": [
                                {
                                    "appliesToMigrationTargetPlatform": "str",
                                    "featureId": "str",
                                    "impactedObjects": [{"impactDetail": "str", "name": "str", "objectType": "str"}],
                                    "issueCategory": "str",
                                    "moreInformation": "str",
                                }
                            ],
                            "skuRecommendationResults": {
                                "azureSqlDatabase": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {
                                            "computeTier": "str",
                                            "hardwareType": "str",
                                            "sqlPurchasingModel": "str",
                                            "sqlServiceTier": "str",
                                            "zoneRedundancyAvailable": bool,
                                        }
                                    },
                                },
                                "azureSqlManagedInstance": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {
                                            "computeTier": "str",
                                            "hardwareType": "str",
                                            "sqlPurchasingModel": "str",
                                            "sqlServiceTier": "str",
                                            "zoneRedundancyAvailable": bool,
                                        }
                                    },
                                },
                                "azureSqlVirtualMachine": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {"availableVmSkus": ["str"], "virtualMachineFamily": "str"}
                                    },
                                },
                            },
                        }
                    },
                    "monitoring": {"enabled": bool},
                    "patchLevel": "str",
                    "productId": "str",
                    "provisioningState": "str",
                    "serviceType": "str",
                    "status": "str",
                    "tcpDynamicPorts": "str",
                    "tcpStaticPorts": "str",
                    "traceFlags": [0],
                    "upgradeLockedUntil": "2020-02-20 00:00:00",
                    "vCore": "str",
                    "version": "str",
                    "vmId": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_begin_delete(self, resource_group):
        response = self.client.sql_server_instances.begin_delete(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_begin_update(self, resource_group):
        response = self.client.sql_server_instances.begin_update(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            parameters={
                "properties": {
                    "alwaysOnRole": "str",
                    "authentication": {
                        "mode": "str",
                        "sqlServerEntraIdentity": [{"clientId": "str", "identityType": "str"}],
                    },
                    "azureDefenderStatus": "str",
                    "azureDefenderStatusLastUpdated": "2020-02-20 00:00:00",
                    "backupPolicy": {
                        "differentialBackupHours": 0,
                        "fullBackupDays": 0,
                        "retentionPeriodDays": 0,
                        "transactionLogBackupMinutes": 0,
                    },
                    "clientConnection": {"enabled": bool},
                    "collation": "str",
                    "containerResourceId": "str",
                    "cores": "str",
                    "createTime": "str",
                    "currentVersion": "str",
                    "dbMasterKeyExists": bool,
                    "edition": "str",
                    "failoverCluster": {
                        "hostIPAddresses": [{"ipAddress": "str", "subnetMask": "str"}],
                        "hostNames": ["str"],
                        "id": "str",
                        "networkName": "str",
                        "sqlInstanceIds": ["str"],
                    },
                    "hostType": "str",
                    "instanceName": "str",
                    "isHadrEnabled": bool,
                    "lastInventoryUploadTime": "2020-02-20 00:00:00",
                    "lastUsageUploadTime": "2020-02-20 00:00:00",
                    "licenseType": "str",
                    "migration": {
                        "assessment": {
                            "assessmentUploadTime": "2020-02-20 00:00:00",
                            "enabled": bool,
                            "serverAssessments": [
                                {
                                    "appliesToMigrationTargetPlatform": "str",
                                    "featureId": "str",
                                    "impactedObjects": [{"impactDetail": "str", "name": "str", "objectType": "str"}],
                                    "issueCategory": "str",
                                    "moreInformation": "str",
                                }
                            ],
                            "skuRecommendationResults": {
                                "azureSqlDatabase": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {
                                            "computeTier": "str",
                                            "hardwareType": "str",
                                            "sqlPurchasingModel": "str",
                                            "sqlServiceTier": "str",
                                            "zoneRedundancyAvailable": bool,
                                        }
                                    },
                                },
                                "azureSqlManagedInstance": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {
                                            "computeTier": "str",
                                            "hardwareType": "str",
                                            "sqlPurchasingModel": "str",
                                            "sqlServiceTier": "str",
                                            "zoneRedundancyAvailable": bool,
                                        }
                                    },
                                },
                                "azureSqlVirtualMachine": {
                                    "monthlyCost": {"computeCost": 0.0, "storageCost": 0.0, "totalCost": 0.0},
                                    "numberOfServerBlockerIssues": 0,
                                    "recommendationStatus": "str",
                                    "targetSku": {
                                        "category": {"availableVmSkus": ["str"], "virtualMachineFamily": "str"}
                                    },
                                },
                            },
                        }
                    },
                    "monitoring": {"enabled": bool},
                    "patchLevel": "str",
                    "productId": "str",
                    "provisioningState": "str",
                    "serviceType": "str",
                    "status": "str",
                    "tcpDynamicPorts": "str",
                    "tcpStaticPorts": "str",
                    "traceFlags": [0],
                    "upgradeLockedUntil": "2020-02-20 00:00:00",
                    "vCore": "str",
                    "version": "str",
                    "vmId": "str",
                },
                "tags": {"str": "str"},
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_begin_get_telemetry(self, resource_group):
        response = self.client.sql_server_instances.begin_get_telemetry(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            sql_server_instance_telemetry_request={
                "datasetName": "str",
                "aggregationType": "Average",
                "databaseNames": ["str"],
                "endTime": "2020-02-20 00:00:00",
                "interval": "PT1H",
                "startTime": "2020-02-20 00:00:00",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_run_migration_assessment(self, resource_group):
        response = self.client.sql_server_instances.run_migration_assessment(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_get_jobs_status(self, resource_group):
        response = self.client.sql_server_instances.get_jobs_status(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_pre_upgrade(self, resource_group):
        response = self.client.sql_server_instances.pre_upgrade(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_post_upgrade(self, resource_group):
        response = self.client.sql_server_instances.post_upgrade(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_server_instances_begin_run_managed_instance_link_assessment(self, resource_group):
        response = self.client.sql_server_instances.begin_run_managed_instance_link_assessment(
            resource_group_name=resource_group.name,
            sql_server_instance_name="str",
            sql_server_instance_managed_instance_link_assessment_request={
                "availabilityGroupName": "str",
                "azureManagedInstanceResourceId": "str",
                "databaseName": "str",
                "azureManagedInstanceRole": "str",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
