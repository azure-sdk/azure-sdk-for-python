# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurearcdata import AzureArcDataManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureArcDataManagementDataControllersOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureArcDataManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_list_in_subscription(self, resource_group):
        response = self.client.data_controllers.list_in_subscription(
            api_version="2024-05-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_list_in_group(self, resource_group):
        response = self.client.data_controllers.list_in_group(
            resource_group_name=resource_group.name,
            api_version="2024-05-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_begin_put_data_controller(self, resource_group):
        response = self.client.data_controllers.begin_put_data_controller(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            data_controller_resource={
                "location": "str",
                "properties": {
                    "basicLoginInformation": {"password": "str", "username": "str"},
                    "clusterId": "str",
                    "extensionId": "str",
                    "infrastructure": "other",
                    "k8sRaw": {},
                    "lastUploadedDate": "2020-02-20 00:00:00",
                    "logAnalyticsWorkspaceConfig": {"primaryKey": "str", "workspaceId": "str"},
                    "logsDashboardCredential": {"password": "str", "username": "str"},
                    "metricsDashboardCredential": {"password": "str", "username": "str"},
                    "onPremiseProperty": {
                        "id": "str",
                        "publicSigningKey": "str",
                        "signingCertificateThumbprint": "str",
                    },
                    "provisioningState": "str",
                    "uploadServicePrincipal": {
                        "authority": "str",
                        "clientId": "str",
                        "clientSecret": "str",
                        "tenantId": "str",
                    },
                    "uploadWatermark": {
                        "logs": "2020-02-20 00:00:00",
                        "metrics": "2020-02-20 00:00:00",
                        "usages": "2020-02-20 00:00:00",
                    },
                },
                "extendedLocation": {"name": "str", "type": "str"},
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_begin_delete_data_controller(self, resource_group):
        response = self.client.data_controllers.begin_delete_data_controller(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            api_version="2024-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_get_data_controller(self, resource_group):
        response = self.client.data_controllers.get_data_controller(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_data_controllers_begin_patch_data_controller(self, resource_group):
        response = self.client.data_controllers.begin_patch_data_controller(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            data_controller_resource={
                "properties": {
                    "basicLoginInformation": {"password": "str", "username": "str"},
                    "clusterId": "str",
                    "extensionId": "str",
                    "infrastructure": "other",
                    "k8sRaw": {},
                    "lastUploadedDate": "2020-02-20 00:00:00",
                    "logAnalyticsWorkspaceConfig": {"primaryKey": "str", "workspaceId": "str"},
                    "logsDashboardCredential": {"password": "str", "username": "str"},
                    "metricsDashboardCredential": {"password": "str", "username": "str"},
                    "onPremiseProperty": {
                        "id": "str",
                        "publicSigningKey": "str",
                        "signingCertificateThumbprint": "str",
                    },
                    "provisioningState": "str",
                    "uploadServicePrincipal": {
                        "authority": "str",
                        "clientId": "str",
                        "clientSecret": "str",
                        "tenantId": "str",
                    },
                    "uploadWatermark": {
                        "logs": "2020-02-20 00:00:00",
                        "metrics": "2020-02-20 00:00:00",
                        "usages": "2020-02-20 00:00:00",
                    },
                },
                "tags": {"str": "str"},
            },
            api_version="2024-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
