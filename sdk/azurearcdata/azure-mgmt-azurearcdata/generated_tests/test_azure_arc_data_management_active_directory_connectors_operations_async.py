# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurearcdata.aio import AzureArcDataManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureArcDataManagementActiveDirectoryConnectorsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureArcDataManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.active_directory_connectors.list(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            api_version="2024-05-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create(self, resource_group):
        response = await (
            await self.client.active_directory_connectors.begin_create(
                resource_group_name=resource_group.name,
                data_controller_name="str",
                active_directory_connector_name="str",
                active_directory_connector_resource={
                    "properties": {
                        "spec": {
                            "activeDirectory": {
                                "realm": "str",
                                "domainControllers": {
                                    "primaryDomainController": {"hostname": "str"},
                                    "secondaryDomainControllers": [{"hostname": "str"}],
                                },
                                "netbiosDomainName": "str",
                                "ouDistinguishedName": "str",
                                "serviceAccountProvisioning": "manual",
                            },
                            "dns": {
                                "nameserverIPAddresses": ["str"],
                                "domainName": "str",
                                "preferK8sDnsForPtrLookups": True,
                                "replicas": 1,
                            },
                        },
                        "domainServiceAccountLoginInformation": {"password": "str", "username": "str"},
                        "provisioningState": "str",
                        "status": {"lastUpdateTime": "str", "observedGeneration": 0, "state": "str"},
                    },
                    "id": "str",
                    "name": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
                api_version="2024-05-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.active_directory_connectors.begin_delete(
                resource_group_name=resource_group.name,
                data_controller_name="str",
                active_directory_connector_name="str",
                api_version="2024-05-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.active_directory_connectors.get(
            resource_group_name=resource_group.name,
            data_controller_name="str",
            active_directory_connector_name="str",
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...
