# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.orbital import AzureOrbital

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureOrbitalContactsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureOrbital)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_contacts_list(self, resource_group):
        response = self.client.contacts.list(
            resource_group_name=resource_group.name,
            spacecraft_name="str",
            api_version="2022-11-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_contacts_get(self, resource_group):
        response = self.client.contacts.get(
            resource_group_name=resource_group.name,
            spacecraft_name="str",
            contact_name="str",
            api_version="2022-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_contacts_begin_create(self, resource_group):
        response = self.client.contacts.begin_create(
            resource_group_name=resource_group.name,
            spacecraft_name="str",
            contact_name="str",
            parameters={
                "contactProfile": {"id": "str"},
                "groundStationName": "str",
                "reservationEndTime": "2020-02-20 00:00:00",
                "reservationStartTime": "2020-02-20 00:00:00",
                "antennaConfiguration": {"destinationIp": "str", "sourceIps": ["str"]},
                "endAzimuthDegrees": 0.0,
                "endElevationDegrees": 0.0,
                "errorMessage": "str",
                "id": "str",
                "maximumElevationDegrees": 0.0,
                "name": "str",
                "provisioningState": "str",
                "rxEndTime": "2020-02-20 00:00:00",
                "rxStartTime": "2020-02-20 00:00:00",
                "startAzimuthDegrees": 0.0,
                "startElevationDegrees": 0.0,
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "txEndTime": "2020-02-20 00:00:00",
                "txStartTime": "2020-02-20 00:00:00",
                "type": "str",
            },
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_contacts_begin_delete(self, resource_group):
        response = self.client.contacts.begin_delete(
            resource_group_name=resource_group.name,
            spacecraft_name="str",
            contact_name="str",
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
