# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.monitor.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.monitor.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspace(TrackedResource):
    """An Azure Monitor Workspace definition.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.monitor.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.monitor.models.AzureMonitorWorkspaceProperties
    :ivar etag: Resource entity tag (ETag).
    :vartype etag: str
    """

    properties: Optional["_models.AzureMonitorWorkspaceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """Resource entity tag (ETag)."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AzureMonitorWorkspaceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspaceLogsApiConfig(_model_base.Model):
    """Azure Monitor Workspace Logs Api configurations.

    :ivar data_collection_endpoint_url: Data collection endpoint ingestion url. Required.
    :vartype data_collection_endpoint_url: str
    :ivar stream: Stream name in destination. Azure Monitor stream is related to the destination
     table. Required.
    :vartype stream: str
    :ivar data_collection_rule: Data Collection Rule (DCR) immutable id. Required.
    :vartype data_collection_rule: str
    :ivar schema: The schema mapping for incoming data. Required.
    :vartype schema: ~azure.mgmt.monitor.models.SchemaMap
    """

    data_collection_endpoint_url: str = rest_field(
        name="dataCollectionEndpointUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data collection endpoint ingestion url. Required."""
    stream: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Stream name in destination. Azure Monitor stream is related to the destination table. Required."""
    data_collection_rule: str = rest_field(
        name="dataCollectionRule", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data Collection Rule (DCR) immutable id. Required."""
    schema: "_models.SchemaMap" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The schema mapping for incoming data. Required."""

    @overload
    def __init__(
        self,
        *,
        data_collection_endpoint_url: str,
        stream: str,
        data_collection_rule: str,
        schema: "_models.SchemaMap",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspaceLogsExporter(_model_base.Model):
    """Azure Monitor Workspace Logs specific configurations.

    :ivar api: API configurations for Azure Monitor workspace exporter. Required.
    :vartype api: ~azure.mgmt.monitor.models.AzureMonitorWorkspaceLogsApiConfig
    :ivar concurrency: Concurrency configuration for the exporter.
    :vartype concurrency: ~azure.mgmt.monitor.models.ConcurrencyConfiguration
    :ivar cache: Cache configurations.
    :vartype cache: ~azure.mgmt.monitor.models.CacheConfiguration
    """

    api: "_models.AzureMonitorWorkspaceLogsApiConfig" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """API configurations for Azure Monitor workspace exporter. Required."""
    concurrency: Optional["_models.ConcurrencyConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Concurrency configuration for the exporter."""
    cache: Optional["_models.CacheConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Cache configurations."""

    @overload
    def __init__(
        self,
        *,
        api: "_models.AzureMonitorWorkspaceLogsApiConfig",
        concurrency: Optional["_models.ConcurrencyConfiguration"] = None,
        cache: Optional["_models.CacheConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspaceProperties(_model_base.Model):
    """Properties that need to be specified to create a new workspace.

    :ivar account_id: The immutable ID of the Azure Monitor workspace. This property is read-only.
    :vartype account_id: str
    :ivar metrics: Information about metrics for the Azure Monitor workspace.
    :vartype metrics: ~azure.mgmt.monitor.models.Metrics
    :ivar provisioning_state: The provisioning state of the Azure Monitor workspace. Set to
     Succeeded if everything is healthy. Known values are: "Succeeded", "Failed", "Canceled",
     "Creating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.monitor.models.ProvisioningState
    :ivar default_ingestion_settings: The Data Collection Rule and Endpoint used for ingestion by
     default.
    :vartype default_ingestion_settings: ~azure.mgmt.monitor.models.IngestionSettings
    :ivar private_endpoint_connections: List of private endpoint connections.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.monitor.models.PrivateEndpointConnection]
    :ivar public_network_access: Gets or sets allow or disallow public network access to workspace.
     Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.monitor.models.PublicNetworkAccess
    """

    account_id: Optional[str] = rest_field(name="accountId", visibility=["read"])
    """The immutable ID of the Azure Monitor workspace. This property is read-only."""
    metrics: Optional["_models.Metrics"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Information about metrics for the Azure Monitor workspace."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the Azure Monitor workspace. Set to Succeeded if everything is
     healthy. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\", and
     \"Deleting\"."""
    default_ingestion_settings: Optional["_models.IngestionSettings"] = rest_field(
        name="defaultIngestionSettings", visibility=["read"]
    )
    """The Data Collection Rule and Endpoint used for ingestion by default."""
    private_endpoint_connections: Optional[List["_models.PrivateEndpointConnection"]] = rest_field(
        name="privateEndpointConnections", visibility=["read"]
    )
    """List of private endpoint connections."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = rest_field(
        name="publicNetworkAccess", visibility=["read"]
    )
    """Gets or sets allow or disallow public network access to workspace. Known values are:
     \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        metrics: Optional["_models.Metrics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspaceUpdate(_model_base.Model):
    """The type used for update operations of the AzureMonitorWorkspace.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.monitor.models.AzureMonitorWorkspaceUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.AzureMonitorWorkspaceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AzureMonitorWorkspaceUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureMonitorWorkspaceUpdateProperties(_model_base.Model):
    """The updatable properties of the AzureMonitorWorkspace.

    :ivar metrics: Information about metrics for the Azure Monitor workspace.
    :vartype metrics: ~azure.mgmt.monitor.models.Metrics
    """

    metrics: Optional["_models.Metrics"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Information about metrics for the Azure Monitor workspace."""

    @overload
    def __init__(
        self,
        *,
        metrics: Optional["_models.Metrics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BatchProcessor(_model_base.Model):
    """Batch processor.

    :ivar batch_size: Size of the batch.
    :vartype batch_size: int
    :ivar timeout: Timeout in milliseconds.
    :vartype timeout: int
    """

    batch_size: Optional[int] = rest_field(name="batchSize", visibility=["read", "create", "update", "delete", "query"])
    """Size of the batch."""
    timeout: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Timeout in milliseconds."""

    @overload
    def __init__(
        self,
        *,
        batch_size: Optional[int] = None,
        timeout: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CacheConfiguration(_model_base.Model):
    """Cache configurations.

    :ivar max_storage_usage: Max storage usage in megabytes.
    :vartype max_storage_usage: int
    :ivar retention_period: Retention period in minutes.
    :vartype retention_period: int
    """

    max_storage_usage: Optional[int] = rest_field(
        name="maxStorageUsage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Max storage usage in megabytes."""
    retention_period: Optional[int] = rest_field(
        name="retentionPeriod", visibility=["read", "create", "update", "delete", "query"]
    )
    """Retention period in minutes."""

    @overload
    def __init__(
        self,
        *,
        max_storage_usage: Optional[int] = None,
        retention_period: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConcurrencyConfiguration(_model_base.Model):
    """Concurrent publishing configuration.

    :ivar worker_count: Number of parallel workers processing the log queues.
    :vartype worker_count: int
    :ivar batch_queue_size: Size of the queue for log batches.
    :vartype batch_queue_size: int
    """

    worker_count: Optional[int] = rest_field(
        name="workerCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """Number of parallel workers processing the log queues."""
    batch_queue_size: Optional[int] = rest_field(
        name="batchQueueSize", visibility=["read", "create", "update", "delete", "query"]
    )
    """Size of the queue for log batches."""

    @overload
    def __init__(
        self,
        *,
        worker_count: Optional[int] = None,
        batch_queue_size: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.monitor.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.monitor.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.monitor.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Exporter(_model_base.Model):
    """Exporter Info.

    :ivar type: The type of exporter. Required. Known values are: "AzureMonitorWorkspaceLogs" and
     "PipelineGroup".
    :vartype type: str or ~azure.mgmt.monitor.models.ExporterType
    :ivar name: The name of exporter. Required.
    :vartype name: str
    :ivar azure_monitor_workspace_logs: Azure Monitor Workspace Logs specific configurations.
    :vartype azure_monitor_workspace_logs:
     ~azure.mgmt.monitor.models.AzureMonitorWorkspaceLogsExporter
    :ivar tcp: TCP based exporter. Used for pipelineGroup exporter.
    :vartype tcp: ~azure.mgmt.monitor.models.TcpExporter
    """

    type: Union[str, "_models.ExporterType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of exporter. Required. Known values are: \"AzureMonitorWorkspaceLogs\" and
     \"PipelineGroup\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of exporter. Required."""
    azure_monitor_workspace_logs: Optional["_models.AzureMonitorWorkspaceLogsExporter"] = rest_field(
        name="azureMonitorWorkspaceLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Monitor Workspace Logs specific configurations."""
    tcp: Optional["_models.TcpExporter"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TCP based exporter. Used for pipelineGroup exporter."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ExporterType"],
        name: str,
        azure_monitor_workspace_logs: Optional["_models.AzureMonitorWorkspaceLogsExporter"] = None,
        tcp: Optional["_models.TcpExporter"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtendedLocation(_model_base.Model):
    """The complex type of the extended location.

    :ivar name: The name of the extended location. Required.
    :vartype name: str
    :ivar type: The type of the extended location. Required. Known values are: "EdgeZone" and
     "CustomLocation".
    :vartype type: str or ~azure.mgmt.monitor.models.ExtendedLocationType
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the extended location. Required."""
    type: Union[str, "_models.ExtendedLocationType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the extended location. Required. Known values are: \"EdgeZone\" and
     \"CustomLocation\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "_models.ExtendedLocationType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IngestionSettings(_model_base.Model):
    """Settings for data ingestion.

    :ivar data_collection_rule_resource_id: The Azure resource Id of the default data collection
     rule for this workspace.
    :vartype data_collection_rule_resource_id: str
    :ivar data_collection_endpoint_resource_id: The Azure resource Id of the default data
     collection endpoint for this workspace.
    :vartype data_collection_endpoint_resource_id: str
    """

    data_collection_rule_resource_id: Optional[str] = rest_field(
        name="dataCollectionRuleResourceId", visibility=["read"]
    )
    """The Azure resource Id of the default data collection rule for this workspace."""
    data_collection_endpoint_resource_id: Optional[str] = rest_field(
        name="dataCollectionEndpointResourceId", visibility=["read"]
    )
    """The Azure resource Id of the default data collection endpoint for this workspace."""


class Metrics(_model_base.Model):
    """Information about metrics for the workspace.

    :ivar prometheus_query_endpoint: The Prometheus query endpoint for the workspace.
    :vartype prometheus_query_endpoint: str
    :ivar internal_id: An internal identifier for the metrics container. Only to be used by the
     system.
    :vartype internal_id: str
    """

    prometheus_query_endpoint: Optional[str] = rest_field(name="prometheusQueryEndpoint", visibility=["read"])
    """The Prometheus query endpoint for the workspace."""
    internal_id: Optional[str] = rest_field(name="internalId", visibility=["read"])
    """An internal identifier for the metrics container. Only to be used by the system."""


class NetworkingConfiguration(_model_base.Model):
    """Networking configuration for the pipeline group instance.

    :ivar external_networking_mode: External networking mode. Required. "LoadBalancerOnly"
    :vartype external_networking_mode: str or ~azure.mgmt.monitor.models.ExternalNetworkingMode
    :ivar host: The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
    :vartype host: str
    :ivar routes: Networking routes configuration. Required.
    :vartype routes: list[~azure.mgmt.monitor.models.NetworkingRoute]
    """

    external_networking_mode: Union[str, "_models.ExternalNetworkingMode"] = rest_field(
        name="externalNetworkingMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """External networking mode. Required. \"LoadBalancerOnly\""""
    host: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com."""
    routes: List["_models.NetworkingRoute"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Networking routes configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        external_networking_mode: Union[str, "_models.ExternalNetworkingMode"],
        routes: List["_models.NetworkingRoute"],
        host: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkingRoute(_model_base.Model):
    """Networking route configuration.

    :ivar receiver: The name of the previously defined receiver. Required.
    :vartype receiver: str
    :ivar port: The port that will be configured externally. If not specified, it will use the port
     from the receiver definition.
    :vartype port: int
    :ivar path: Route path.
    :vartype path: str
    :ivar subdomain: Route subdomain.
    :vartype subdomain: str
    """

    receiver: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the previously defined receiver. Required."""
    port: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The port that will be configured externally. If not specified, it will use the port from the
     receiver definition."""
    path: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Route path."""
    subdomain: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Route subdomain."""

    @overload
    def __init__(
        self,
        *,
        receiver: str,
        port: Optional[int] = None,
        path: Optional[str] = None,
        subdomain: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.monitor.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.monitor.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.monitor.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OtlpReceiver(_model_base.Model):
    """OTLP Receiver.

    :ivar endpoint: OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>. Required.
    :vartype endpoint: str
    """

    endpoint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PersistenceConfigurations(_model_base.Model):
    """Persistence options to all pipelines in the instance.

    :ivar persistent_volume_name: The name of the mounted persistent volume. Required.
    :vartype persistent_volume_name: str
    """

    persistent_volume_name: str = rest_field(
        name="persistentVolumeName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the mounted persistent volume. Required."""

    @overload
    def __init__(
        self,
        *,
        persistent_volume_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Pipeline(_model_base.Model):
    """Pipeline Info.

    :ivar name: Name of the pipeline. Required.
    :vartype name: str
    :ivar type: The type of pipeline. Required. "logs"
    :vartype type: str or ~azure.mgmt.monitor.models.PipelineType
    :ivar receivers: Reference to receivers configured for the pipeline. Required.
    :vartype receivers: list[str]
    :ivar processors: Reference to processors configured for the pipeline.
    :vartype processors: list[str]
    :ivar exporters: Reference to exporters configured for the pipeline. Required.
    :vartype exporters: list[str]
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the pipeline. Required."""
    type: Union[str, "_models.PipelineType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of pipeline. Required. \"logs\""""
    receivers: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reference to receivers configured for the pipeline. Required."""
    processors: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reference to processors configured for the pipeline."""
    exporters: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reference to exporters configured for the pipeline. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "_models.PipelineType"],
        receivers: List[str],
        exporters: List[str],
        processors: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PipelineGroup(TrackedResource):
    """A pipeline group definition.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.monitor.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.monitor.models.PipelineGroupProperties
    :ivar extended_location: The extended location for given pipeline group.
    :vartype extended_location: ~azure.mgmt.monitor.models.ExtendedLocation
    """

    properties: Optional["_models.PipelineGroupProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """The extended location for given pipeline group."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PipelineGroupProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PipelineGroupProperties(_model_base.Model):
    """Properties that need to be specified to create a new pipeline group instance.

    :ivar replicas: Defines the amount of replicas of the pipeline group instance.
    :vartype replicas: int
    :ivar receivers: The receivers specified for a pipeline group instance. Required.
    :vartype receivers: list[~azure.mgmt.monitor.models.Receiver]
    :ivar processors: The processors specified for a pipeline group instance. Required.
    :vartype processors: list[~azure.mgmt.monitor.models.Processor]
    :ivar exporters: The exporters specified for a pipeline group instance. Required.
    :vartype exporters: list[~azure.mgmt.monitor.models.Exporter]
    :ivar service: The service section for a given pipeline group instance. Required.
    :vartype service: ~azure.mgmt.monitor.models.Service
    :ivar networking_configurations: Networking configurations for the pipeline group instance.
    :vartype networking_configurations: list[~azure.mgmt.monitor.models.NetworkingConfiguration]
    :ivar provisioning_state: The provisioning state of a pipeline group instance. Set to Succeeded
     if everything is healthy. Known values are: "Succeeded", "Failed", "Canceled", "Creating", and
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.monitor.models.ProvisioningState
    """

    replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Defines the amount of replicas of the pipeline group instance."""
    receivers: List["_models.Receiver"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The receivers specified for a pipeline group instance. Required."""
    processors: List["_models.Processor"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The processors specified for a pipeline group instance. Required."""
    exporters: List["_models.Exporter"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The exporters specified for a pipeline group instance. Required."""
    service: "_models.Service" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The service section for a given pipeline group instance. Required."""
    networking_configurations: Optional[List["_models.NetworkingConfiguration"]] = rest_field(
        name="networkingConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Networking configurations for the pipeline group instance."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
     Known values are: \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\", and \"Deleting\"."""

    @overload
    def __init__(
        self,
        *,
        receivers: List["_models.Receiver"],
        processors: List["_models.Processor"],
        exporters: List["_models.Exporter"],
        service: "_models.Service",
        replicas: Optional[int] = None,
        networking_configurations: Optional[List["_models.NetworkingConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PipelineGroupUpdate(_model_base.Model):
    """The type used for update operations of the PipelineGroup.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.monitor.models.PipelineGroupUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.PipelineGroupUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PipelineGroupUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PipelineGroupUpdateProperties(_model_base.Model):
    """The updatable properties of the PipelineGroup.

    :ivar replicas: Defines the amount of replicas of the pipeline group instance.
    :vartype replicas: int
    :ivar receivers: The receivers specified for a pipeline group instance.
    :vartype receivers: list[~azure.mgmt.monitor.models.Receiver]
    :ivar processors: The processors specified for a pipeline group instance.
    :vartype processors: list[~azure.mgmt.monitor.models.Processor]
    :ivar exporters: The exporters specified for a pipeline group instance.
    :vartype exporters: list[~azure.mgmt.monitor.models.Exporter]
    :ivar service: The service section for a given pipeline group instance.
    :vartype service: ~azure.mgmt.monitor.models.Service
    :ivar networking_configurations: Networking configurations for the pipeline group instance.
    :vartype networking_configurations: list[~azure.mgmt.monitor.models.NetworkingConfiguration]
    """

    replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Defines the amount of replicas of the pipeline group instance."""
    receivers: Optional[List["_models.Receiver"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The receivers specified for a pipeline group instance."""
    processors: Optional[List["_models.Processor"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The processors specified for a pipeline group instance."""
    exporters: Optional[List["_models.Exporter"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The exporters specified for a pipeline group instance."""
    service: Optional["_models.Service"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The service section for a given pipeline group instance."""
    networking_configurations: Optional[List["_models.NetworkingConfiguration"]] = rest_field(
        name="networkingConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Networking configurations for the pipeline group instance."""

    @overload
    def __init__(
        self,
        *,
        replicas: Optional[int] = None,
        receivers: Optional[List["_models.Receiver"]] = None,
        processors: Optional[List["_models.Processor"]] = None,
        exporters: Optional[List["_models.Exporter"]] = None,
        service: Optional["_models.Service"] = None,
        networking_configurations: Optional[List["_models.NetworkingConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpoint(_model_base.Model):
    """The Private Endpoint resource.

    :ivar id: The resource identifier for private endpoint.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The resource identifier for private endpoint."""


class PrivateEndpointConnection(Resource):
    """The private endpoint connection resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.monitor.models.SystemData
    :ivar properties: The private endpoint connection properties.
    :vartype properties: ~azure.mgmt.monitor.models.PrivateEndpointConnectionProperties
    """

    properties: Optional["_models.PrivateEndpointConnectionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The private endpoint connection properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateEndpointConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnectionProperties(_model_base.Model):
    """Properties of the private endpoint connection.

    :ivar group_ids: The group ids for the private endpoint resource.
    :vartype group_ids: list[str]
    :ivar private_endpoint: The private endpoint resource.
    :vartype private_endpoint: ~azure.mgmt.monitor.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider. Required.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.monitor.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.monitor.models.PrivateEndpointConnectionProvisioningState
    """

    group_ids: Optional[List[str]] = rest_field(name="groupIds", visibility=["read"])
    """The group ids for the private endpoint resource."""
    private_endpoint: Optional["_models.PrivateEndpoint"] = rest_field(
        name="privateEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The private endpoint resource."""
    private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState" = rest_field(
        name="privateLinkServiceConnectionState", visibility=["read", "create", "update", "delete", "query"]
    )
    """A collection of information about the state of the connection between service consumer and
     provider. Required."""
    provisioning_state: Optional[Union[str, "_models.PrivateEndpointConnectionProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the private endpoint connection resource. Known values are:
     \"Succeeded\", \"Creating\", \"Deleting\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState",
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkServiceConnectionState(_model_base.Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.monitor.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the connection has been Approved/Rejected/Removed by the owner of the
     service. Known values are: \"Pending\", \"Approved\", and \"Rejected\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The reason for approval/rejection of the connection."""
    actions_required: Optional[str] = rest_field(
        name="actionsRequired", visibility=["read", "create", "update", "delete", "query"]
    )
    """A message indicating if changes on the service provider require any updates on the consumer."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Processor(_model_base.Model):
    """Processor Info.

    :ivar type: The type of processor. Required. "Batch"
    :vartype type: str or ~azure.mgmt.monitor.models.ProcessorType
    :ivar name: The name of processor. Required.
    :vartype name: str
    :ivar batch: Batch processor configurations.
    :vartype batch: ~azure.mgmt.monitor.models.BatchProcessor
    """

    type: Union[str, "_models.ProcessorType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of processor. Required. \"Batch\""""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of processor. Required."""
    batch: Optional["_models.BatchProcessor"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Batch processor configurations."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ProcessorType"],
        name: str,
        batch: Optional["_models.BatchProcessor"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Receiver(_model_base.Model):
    """Receiver Info.

    :ivar type: The type of receiver. Required. Known values are: "Syslog", "Ama", "PipelineGroup",
     "OTLP", and "UDP".
    :vartype type: str or ~azure.mgmt.monitor.models.ReceiverType
    :ivar name: The name of receiver. Required.
    :vartype name: str
    :ivar syslog: Syslog configurations. This field is mandatory for syslog type receivers.
    :vartype syslog: ~azure.mgmt.monitor.models.SyslogReceiver
    :ivar otlp: OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup
     receivers.
    :vartype otlp: ~azure.mgmt.monitor.models.OtlpReceiver
    :ivar udp: UDP receiver configurations. This field is mandatory for UDP receivers.
    :vartype udp: ~azure.mgmt.monitor.models.UdpReceiver
    """

    type: Union[str, "_models.ReceiverType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of receiver. Required. Known values are: \"Syslog\", \"Ama\", \"PipelineGroup\",
     \"OTLP\", and \"UDP\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of receiver. Required."""
    syslog: Optional["_models.SyslogReceiver"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Syslog configurations. This field is mandatory for syslog type receivers."""
    otlp: Optional["_models.OtlpReceiver"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers."""
    udp: Optional["_models.UdpReceiver"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """UDP receiver configurations. This field is mandatory for UDP receivers."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ReceiverType"],
        name: str,
        syslog: Optional["_models.SyslogReceiver"] = None,
        otlp: Optional["_models.OtlpReceiver"] = None,
        udp: Optional["_models.UdpReceiver"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RecordMap(_model_base.Model):
    """Record map for schema in azure monitor.

    :ivar from_property: Record Map Key. Required.
    :vartype from_property: str
    :ivar to: Record Map Value. Required.
    :vartype to: str
    """

    from_property: str = rest_field(name="from", visibility=["read", "create", "update", "delete", "query"])
    """Record Map Key. Required."""
    to: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Record Map Value. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceMap(_model_base.Model):
    """Resource map for schema in azure monitor.

    :ivar from_property: Resource Map Key. Required.
    :vartype from_property: str
    :ivar to: Resource Map Value. Required.
    :vartype to: str
    """

    from_property: str = rest_field(name="from", visibility=["read", "create", "update", "delete", "query"])
    """Resource Map Key. Required."""
    to: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource Map Value. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SchemaMap(_model_base.Model):
    """Schema map for azure monitor for logs.

    :ivar record_map: Record Map. Required.
    :vartype record_map: list[~azure.mgmt.monitor.models.RecordMap]
    :ivar resource_map: Resource Map captures information about the entity for which telemetry is
     recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource
     that specifies the cluster, namespace, pod, and container name.Resource may capture an entire
     hierarchy of entity identification. It may describe the host in the cloud and specific
     container or an application running in the process.
    :vartype resource_map: list[~azure.mgmt.monitor.models.ResourceMap]
    :ivar scope_map: A scope map is a logical unit of the application code with which the emitted
     telemetry can be associated.
    :vartype scope_map: list[~azure.mgmt.monitor.models.ScopeMap]
    """

    record_map: List["_models.RecordMap"] = rest_field(
        name="recordMap", visibility=["read", "create", "update", "delete", "query"]
    )
    """Record Map. Required."""
    resource_map: Optional[List["_models.ResourceMap"]] = rest_field(
        name="resourceMap", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Map captures information about the entity for which telemetry is recorded. For
     example, metrics exposed by a Kubernetes container can be linked to a resource that specifies
     the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of
     entity identification. It may describe the host in the cloud and specific container or an
     application running in the process."""
    scope_map: Optional[List["_models.ScopeMap"]] = rest_field(
        name="scopeMap", visibility=["read", "create", "update", "delete", "query"]
    )
    """A scope map is a logical unit of the application code with which the emitted telemetry can be
     associated."""

    @overload
    def __init__(
        self,
        *,
        record_map: List["_models.RecordMap"],
        resource_map: Optional[List["_models.ResourceMap"]] = None,
        scope_map: Optional[List["_models.ScopeMap"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScopeMap(_model_base.Model):
    """Scope map for schema in azure monitor.

    :ivar from_property: Scope Map Key. Required.
    :vartype from_property: str
    :ivar to: Scope Map Value. Required.
    :vartype to: str
    """

    from_property: str = rest_field(name="from", visibility=["read", "create", "update", "delete", "query"])
    """Scope Map Key. Required."""
    to: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Scope Map Value. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Service(_model_base.Model):
    """Service Info.

    :ivar pipelines: Pipelines belonging to a given pipeline group. Required.
    :vartype pipelines: list[~azure.mgmt.monitor.models.Pipeline]
    :ivar persistence: Persistence options to all pipelines in the instance.
    :vartype persistence: ~azure.mgmt.monitor.models.PersistenceConfigurations
    """

    pipelines: List["_models.Pipeline"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Pipelines belonging to a given pipeline group. Required."""
    persistence: Optional["_models.PersistenceConfigurations"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Persistence options to all pipelines in the instance."""

    @overload
    def __init__(
        self,
        *,
        pipelines: List["_models.Pipeline"],
        persistence: Optional["_models.PersistenceConfigurations"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SyslogReceiver(_model_base.Model):
    """Base receiver using TCP as transport protocol.

    :ivar endpoint: Syslog receiver endpoint definition. Example: 0.0.0.0:<port>. Required.
    :vartype endpoint: str
    :ivar protocol: Protocol to parse syslog messages. Default rfc3164. Known values are: "rfc3164"
     and "rfc5424".
    :vartype protocol: str or ~azure.mgmt.monitor.models.SyslogProtocol
    """

    endpoint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Syslog receiver endpoint definition. Example: 0.0.0.0:<port>. Required."""
    protocol: Optional[Union[str, "_models.SyslogProtocol"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Protocol to parse syslog messages. Default rfc3164. Known values are: \"rfc3164\" and
     \"rfc5424\"."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        protocol: Optional[Union[str, "_models.SyslogProtocol"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.monitor.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.monitor.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TcpExporter(_model_base.Model):
    """Base exporter using TCP as transport protocol.

    :ivar url: TCP url to export. Required.
    :vartype url: str
    """

    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TCP url to export. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UdpReceiver(_model_base.Model):
    """Receiver using UDP as transport protocol.

    :ivar endpoint: TCP endpoint definition. Example: 0.0.0.0:<port>. Required.
    :vartype endpoint: str
    :ivar encoding: The encoding of the stream being received. Known values are: "nop", "utf-8",
     "utf-16le", "utf-16be", "ascii", and "big5".
    :vartype encoding: str or ~azure.mgmt.monitor.models.StreamEncodingType
    :ivar read_queue_length: Max read queue length.
    :vartype read_queue_length: int
    """

    endpoint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TCP endpoint definition. Example: 0.0.0.0:<port>. Required."""
    encoding: Optional[Union[str, "_models.StreamEncodingType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The encoding of the stream being received. Known values are: \"nop\", \"utf-8\", \"utf-16le\",
     \"utf-16be\", \"ascii\", and \"big5\"."""
    read_queue_length: Optional[int] = rest_field(
        name="readQueueLength", visibility=["read", "create", "update", "delete", "query"]
    )
    """Max read queue length."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        encoding: Optional[Union[str, "_models.StreamEncodingType"]] = None,
        read_queue_length: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
