# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.monitor.aio import MonitorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMonitorManagementManagementGroupDiagnosticSettingsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MonitorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.management_group_diagnostic_settings.get(
            management_group_id="str",
            name="str",
            api_version="2020-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.management_group_diagnostic_settings.create_or_update(
            management_group_id="str",
            name="str",
            parameters={
                "eventHubAuthorizationRuleId": "str",
                "eventHubName": "str",
                "id": "str",
                "location": "str",
                "logs": [{"category": "str", "enabled": bool}],
                "name": "str",
                "serviceBusRuleId": "str",
                "storageAccountId": "str",
                "type": "str",
                "workspaceId": "str",
            },
            api_version="2020-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.management_group_diagnostic_settings.delete(
            management_group_id="str",
            name="str",
            api_version="2020-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.management_group_diagnostic_settings.list(
            management_group_id="str",
            api_version="2020-01-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
