# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.monitor.aio import MonitorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMonitorManagementActionGroupsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MonitorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.action_groups.create_or_update(
            resource_group_name=resource_group.name,
            action_group_name="str",
            action_group={
                "location": "str",
                "automationRunbookReceivers": [
                    {
                        "automationAccountId": "str",
                        "isGlobalRunbook": bool,
                        "runbookName": "str",
                        "webhookResourceId": "str",
                        "name": "str",
                        "serviceUri": "str",
                    }
                ],
                "azureAppPushReceivers": [{"emailAddress": "str", "name": "str"}],
                "emailReceivers": [{"emailAddress": "str", "name": "str", "status": "str"}],
                "enabled": True,
                "groupShortName": "str",
                "id": "str",
                "itsmReceivers": [
                    {
                        "connectionId": "str",
                        "name": "str",
                        "region": "str",
                        "ticketConfiguration": "str",
                        "workspaceId": "str",
                    }
                ],
                "name": "str",
                "smsReceivers": [{"countryCode": "str", "name": "str", "phoneNumber": "str", "status": "str"}],
                "tags": {"str": "str"},
                "type": "str",
                "webhookReceivers": [{"name": "str", "serviceUri": "str"}],
            },
            api_version="2017-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.action_groups.get(
            resource_group_name=resource_group.name,
            action_group_name="str",
            api_version="2017-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.action_groups.delete(
            resource_group_name=resource_group.name,
            action_group_name="str",
            api_version="2017-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.action_groups.update(
            resource_group_name=resource_group.name,
            action_group_name="str",
            action_group_patch={"enabled": True, "tags": {"str": "str"}},
            api_version="2017-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription_id(self, resource_group):
        response = self.client.action_groups.list_by_subscription_id(
            api_version="2017-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.action_groups.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2017-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_enable_receiver(self, resource_group):
        response = await self.client.action_groups.enable_receiver(
            resource_group_name=resource_group.name,
            action_group_name="str",
            enable_request={"receiverName": "str"},
            api_version="2017-04-01",
        )

        # please add some check logic here by yourself
        # ...
