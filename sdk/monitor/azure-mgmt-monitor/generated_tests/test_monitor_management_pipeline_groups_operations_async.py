# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.monitor.aio import MonitorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMonitorManagementPipelineGroupsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MonitorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_get(self, resource_group):
        response = await self.client.pipeline_groups.get(
            resource_group_name=resource_group.name,
            pipeline_group_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.pipeline_groups.begin_create_or_update(
                resource_group_name=resource_group.name,
                pipeline_group_name="str",
                resource={
                    "location": "str",
                    "extendedLocation": {"name": "str", "type": "str"},
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "exporters": [
                            {
                                "name": "str",
                                "type": "str",
                                "azureMonitorWorkspaceLogs": {
                                    "api": {
                                        "dataCollectionEndpointUrl": "str",
                                        "dataCollectionRule": "str",
                                        "schema": {
                                            "recordMap": [{"from": "str", "to": "str"}],
                                            "resourceMap": [{"from": "str", "to": "str"}],
                                            "scopeMap": [{"from": "str", "to": "str"}],
                                        },
                                        "stream": "str",
                                    },
                                    "cache": {"maxStorageUsage": 0, "retentionPeriod": 0},
                                    "concurrency": {"batchQueueSize": 0, "workerCount": 0},
                                },
                                "tcp": {"url": "str"},
                            }
                        ],
                        "processors": [{"name": "str", "type": "str", "batch": {"batchSize": 0, "timeout": 0}}],
                        "receivers": [
                            {
                                "name": "str",
                                "type": "str",
                                "otlp": {"endpoint": "str"},
                                "syslog": {"endpoint": "str", "protocol": "str"},
                                "udp": {"endpoint": "str", "encoding": "str", "readQueueLength": 0},
                            }
                        ],
                        "service": {
                            "pipelines": [
                                {
                                    "exporters": ["str"],
                                    "name": "str",
                                    "receivers": ["str"],
                                    "type": "str",
                                    "processors": ["str"],
                                }
                            ],
                            "persistence": {"persistentVolumeName": "str"},
                        },
                        "networkingConfigurations": [
                            {
                                "externalNetworkingMode": "str",
                                "routes": [{"receiver": "str", "path": "str", "port": 0, "subdomain": "str"}],
                                "host": "str",
                            }
                        ],
                        "provisioningState": "str",
                        "replicas": 0,
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_begin_delete(self, resource_group):
        response = await (
            await self.client.pipeline_groups.begin_delete(
                resource_group_name=resource_group.name,
                pipeline_group_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_begin_update(self, resource_group):
        response = await (
            await self.client.pipeline_groups.begin_update(
                resource_group_name=resource_group.name,
                pipeline_group_name="str",
                properties={
                    "properties": {
                        "exporters": [
                            {
                                "name": "str",
                                "type": "str",
                                "azureMonitorWorkspaceLogs": {
                                    "api": {
                                        "dataCollectionEndpointUrl": "str",
                                        "dataCollectionRule": "str",
                                        "schema": {
                                            "recordMap": [{"from": "str", "to": "str"}],
                                            "resourceMap": [{"from": "str", "to": "str"}],
                                            "scopeMap": [{"from": "str", "to": "str"}],
                                        },
                                        "stream": "str",
                                    },
                                    "cache": {"maxStorageUsage": 0, "retentionPeriod": 0},
                                    "concurrency": {"batchQueueSize": 0, "workerCount": 0},
                                },
                                "tcp": {"url": "str"},
                            }
                        ],
                        "networkingConfigurations": [
                            {
                                "externalNetworkingMode": "str",
                                "routes": [{"receiver": "str", "path": "str", "port": 0, "subdomain": "str"}],
                                "host": "str",
                            }
                        ],
                        "processors": [{"name": "str", "type": "str", "batch": {"batchSize": 0, "timeout": 0}}],
                        "receivers": [
                            {
                                "name": "str",
                                "type": "str",
                                "otlp": {"endpoint": "str"},
                                "syslog": {"endpoint": "str", "protocol": "str"},
                                "udp": {"endpoint": "str", "encoding": "str", "readQueueLength": 0},
                            }
                        ],
                        "replicas": 0,
                        "service": {
                            "pipelines": [
                                {
                                    "exporters": ["str"],
                                    "name": "str",
                                    "receivers": ["str"],
                                    "type": "str",
                                    "processors": ["str"],
                                }
                            ],
                            "persistence": {"persistentVolumeName": "str"},
                        },
                    },
                    "tags": {"str": "str"},
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_list_by_resource_group(self, resource_group):
        response = self.client.pipeline_groups.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_pipeline_groups_list_by_subscription(self, resource_group):
        response = self.client.pipeline_groups.list_by_subscription()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
