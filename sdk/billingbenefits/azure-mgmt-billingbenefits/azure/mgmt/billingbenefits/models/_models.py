# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import DiscountEntityType, DiscountType

if TYPE_CHECKING:
    from .. import models as _models


class AppliedScopeProperties(_Model):
    """Properties specific to applied scope type. Not required if not applicable.

    :ivar tenant_id: Tenant ID where the benefit is applied.
    :vartype tenant_id: str
    :ivar management_group_id: Fully-qualified identifier of the management group where the benefit
     must be applied.
    :vartype management_group_id: str
    :ivar subscription_id: Fully-qualified identifier of the subscription.
    :vartype subscription_id: str
    :ivar resource_group_id: Fully-qualified identifier of the resource group.
    :vartype resource_group_id: str
    :ivar display_name: Display name.
    :vartype display_name: str
    """

    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    """Tenant ID where the benefit is applied."""
    management_group_id: Optional[str] = rest_field(
        name="managementGroupId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Fully-qualified identifier of the management group where the benefit must be applied."""
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Fully-qualified identifier of the subscription."""
    resource_group_id: Optional[str] = rest_field(
        name="resourceGroupId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Fully-qualified identifier of the resource group."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        management_group_id: Optional[str] = None,
        subscription_id: Optional[str] = None,
        resource_group_id: Optional[str] = None,
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BillingPlanInformation(_Model):
    """Information describing the type of billing plan for this savings plan.

    :ivar pricing_currency_total: Amount of money to be paid for the Order. Tax is not included.
    :vartype pricing_currency_total: ~azure.mgmt.billingbenefits.models.Price
    :ivar start_date: Date when the billing plan has started.
    :vartype start_date: ~datetime.date
    :ivar next_payment_due_date: For recurring billing plans, indicates the date when next payment
     will be processed. Null when total is paid off.
    :vartype next_payment_due_date: ~datetime.date
    :ivar transactions:
    :vartype transactions: list[~azure.mgmt.billingbenefits.models.PaymentDetail]
    """

    pricing_currency_total: Optional["_models.Price"] = rest_field(
        name="pricingCurrencyTotal", visibility=["read", "create", "update", "delete", "query"]
    )
    """Amount of money to be paid for the Order. Tax is not included."""
    start_date: Optional[datetime.date] = rest_field(
        name="startDate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Date when the billing plan has started."""
    next_payment_due_date: Optional[datetime.date] = rest_field(
        name="nextPaymentDueDate", visibility=["read", "create", "update", "delete", "query"]
    )
    """For recurring billing plans, indicates the date when next payment will be processed. Null when
     total is paid off."""
    transactions: Optional[List["_models.PaymentDetail"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        pricing_currency_total: Optional["_models.Price"] = None,
        start_date: Optional[datetime.date] = None,
        next_payment_due_date: Optional[datetime.date] = None,
        transactions: Optional[List["_models.PaymentDetail"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Price(_Model):
    """Price.

    :ivar currency_code: The ISO 4217 3-letter currency code for the currency used by this purchase
     record.
    :vartype currency_code: str
    :ivar amount:
    :vartype amount: float
    """

    currency_code: Optional[str] = rest_field(
        name="currencyCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ISO 4217 3-letter currency code for the currency used by this purchase record."""
    amount: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        currency_code: Optional[str] = None,
        amount: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Commitment(Price):
    """Commitment towards the benefit.

    :ivar currency_code: The ISO 4217 3-letter currency code for the currency used by this purchase
     record.
    :vartype currency_code: str
    :ivar amount:
    :vartype amount: float
    :ivar grain: Commitment grain. Known values are: "Hourly", "FullTerm", and "Unknown".
    :vartype grain: str or ~azure.mgmt.billingbenefits.models.CommitmentGrain
    """

    grain: Optional[Union[str, "_models.CommitmentGrain"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Commitment grain. Known values are: \"Hourly\", \"FullTerm\", and \"Unknown\"."""

    @overload
    def __init__(
        self,
        *,
        currency_code: Optional[str] = None,
        amount: Optional[float] = None,
        grain: Optional[Union[str, "_models.CommitmentGrain"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConditionsItem(_Model):
    """Condition for a discount.

    :ivar condition_name:
    :vartype condition_name: str
    :ivar value: These items are open-ended strings.
    :vartype value: list[str]
    :ivar type:
    :vartype type: str
    """

    condition_name: Optional[str] = rest_field(
        name="conditionName", visibility=["read", "create", "update", "delete", "query"]
    )
    value: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """These items are open-ended strings."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        condition_name: Optional[str] = None,
        value: Optional[List[str]] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Discount(TrackedResource):
    """Resource definition for Discounts.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Discount properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.DiscountProperties
    """

    properties: Optional["_models.DiscountProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Discount properties."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DiscountProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscountPatchRequest(_Model):
    """Discounts patch request.

    :ivar properties: Discounts patch request properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.DiscountPatchRequestProperties
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.DiscountPatchRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Discounts patch request properties."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""

    __flattened_items = ["display_name"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DiscountPatchRequestProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiscountPatchRequestProperties(_Model):
    """Discounts patch request properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscountProperties(_Model):
    """Properties belonging to discounts.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    EntityTypeAffiliateDiscount, EntityTypePrimaryDiscount

    :ivar entity_type: This defines whether the entity being created is primary or affiliate.
     Supported values: primary, affiliate. Validation: Required, must match one of the 2 values.
     Required. Known values are: "Primary" and "Affiliate".
    :vartype entity_type: str or ~azure.mgmt.billingbenefits.models.DiscountEntityType
    :ivar product_code: This is the catalog UPN for the product. Required.
    :vartype product_code: str
    :ivar start_at: Start date of the discount. Value is the date the discount started or will
     start in the future. Required.
    :vartype start_at: ~datetime.datetime
    :ivar system_id: This is the globally unique identifier of the Discount which will not change
     for the lifetime of the Discount.
    :vartype system_id: str
    :ivar provisioning_state: The state of the resource. Supported values are Pending, Failed,
     Succeeded, Canceled. Known values are: "Unknown", "Pending", "Succeeded", "Canceled", and
     "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.billingbenefits.models.DiscountProvisioningState
    :ivar billing_account_resource_id: Billing account resource id where the discount metadata is
     present.
    :vartype billing_account_resource_id: str
    :ivar billing_profile_resource_id: Billing profile resource id where the discount is scoped to.
    :vartype billing_profile_resource_id: str
    :ivar customer_resource_id: Customer resource id where the discount is scoped to.
    :vartype customer_resource_id: str
    :ivar display_name: This defines a user friendly display name for the discount.
    :vartype display_name: str
    :ivar status: Represents the current status of the discount. Known values are: "Active",
     "Pending", "Failed", "Canceled", and "Expired".
    :vartype status: str or ~azure.mgmt.billingbenefits.models.DiscountStatus
    :ivar benefit_resource_id: Fully-qualified identifier of the benefit under applicable benefit
     list.
    :vartype benefit_resource_id: str
    :ivar applied_scope_type: List of applied scopes supported for discounts. Known values are:
     "BillingAccount", "BillingProfile", and "Customer".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.DiscountAppliedScopeType
    """

    __mapping__: Dict[str, _Model] = {}
    entity_type: str = rest_discriminator(name="entityType", visibility=["read", "create", "update", "delete", "query"])
    """This defines whether the entity being created is primary or affiliate. Supported values:
     primary, affiliate. Validation: Required, must match one of the 2 values. Required. Known
     values are: \"Primary\" and \"Affiliate\"."""
    product_code: str = rest_field(name="productCode", visibility=["read", "create", "update", "delete", "query"])
    """This is the catalog UPN for the product. Required."""
    start_at: datetime.datetime = rest_field(
        name="startAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Start date of the discount. Value is the date the discount started or will start in the future.
     Required."""
    system_id: Optional[str] = rest_field(name="systemId", visibility=["read", "create", "update", "delete", "query"])
    """This is the globally unique identifier of the Discount which will not change for the lifetime
     of the Discount."""
    provisioning_state: Optional[Union[str, "_models.DiscountProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The state of the resource. Supported values are Pending, Failed, Succeeded, Canceled. Known
     values are: \"Unknown\", \"Pending\", \"Succeeded\", \"Canceled\", and \"Failed\"."""
    billing_account_resource_id: Optional[str] = rest_field(name="billingAccountResourceId", visibility=["read"])
    """Billing account resource id where the discount metadata is present."""
    billing_profile_resource_id: Optional[str] = rest_field(name="billingProfileResourceId", visibility=["read"])
    """Billing profile resource id where the discount is scoped to."""
    customer_resource_id: Optional[str] = rest_field(name="customerResourceId", visibility=["read"])
    """Customer resource id where the discount is scoped to."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """This defines a user friendly display name for the discount."""
    status: Optional[Union[str, "_models.DiscountStatus"]] = rest_field(visibility=["read"])
    """Represents the current status of the discount. Known values are: \"Active\", \"Pending\",
     \"Failed\", \"Canceled\", and \"Expired\"."""
    benefit_resource_id: Optional[str] = rest_field(name="benefitResourceId", visibility=["read"])
    """Fully-qualified identifier of the benefit under applicable benefit list."""
    applied_scope_type: Optional[Union[str, "_models.DiscountAppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of applied scopes supported for discounts. Known values are: \"BillingAccount\",
     \"BillingProfile\", and \"Customer\"."""

    @overload
    def __init__(
        self,
        *,
        entity_type: str,
        product_code: str,
        start_at: datetime.datetime,
        system_id: Optional[str] = None,
        display_name: Optional[str] = None,
        applied_scope_type: Optional[Union[str, "_models.DiscountAppliedScopeType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscountTypeProperties(_Model):
    """This defines the conditions for a given discount type.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DiscountTypeProduct, DiscountTypeProductFamily, DiscountTypeProductSku

    :ivar discount_type: Defines the type of discount. Supported values are ProductFamily, Product,
     Sku, CustomPrice, and CustomPriceMultiCurrency. Required. Known values are: "ProductFamily",
     "Product", "Sku", "CustomPrice", and "CustomPriceMultiCurrency".
    :vartype discount_type: str or ~azure.mgmt.billingbenefits.models.DiscountType
    :ivar apply_discount_on: The customer action on which the discount is applied. Supported values
     are Purchase, Consume, and Renew. Validation: Required, one of supported values. Required.
     Known values are: "Purchase", "Consume", and "Renew".
    :vartype apply_discount_on: str or ~azure.mgmt.billingbenefits.models.ApplyDiscountOn
    :ivar discount_percentage: Discount percentage provided for the customer. Validation: Required
     unless this is a price rule.
    :vartype discount_percentage: float
    :ivar discount_combination_rule: The discount combination rule when there are multiple
     applicable custom prices. Validation: Required. Supported values are Stackable and BestOf.
     Known values are: "BestOf" and "Stackable".
    :vartype discount_combination_rule: str or
     ~azure.mgmt.billingbenefits.models.DiscountCombinationRule
    :ivar price_guarantee_properties: Set only in price guarantee scenario.
    :vartype price_guarantee_properties:
     ~azure.mgmt.billingbenefits.models.PriceGuaranteeProperties
    :ivar conditions: Array of conditions for the discount. Validation: Optional. Maximum length is
     1000.
    :vartype conditions: list[~azure.mgmt.billingbenefits.models.ConditionsItem]
    """

    __mapping__: Dict[str, _Model] = {}
    discount_type: str = rest_discriminator(
        name="discountType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice,
     and CustomPriceMultiCurrency. Required. Known values are: \"ProductFamily\", \"Product\",
     \"Sku\", \"CustomPrice\", and \"CustomPriceMultiCurrency\"."""
    apply_discount_on: Union[str, "_models.ApplyDiscountOn"] = rest_field(
        name="applyDiscountOn", visibility=["read", "create", "update", "delete", "query"]
    )
    """The customer action on which the discount is applied. Supported values are Purchase, Consume,
     and Renew. Validation: Required, one of supported values. Required. Known values are:
     \"Purchase\", \"Consume\", and \"Renew\"."""
    discount_percentage: Optional[float] = rest_field(
        name="discountPercentage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Discount percentage provided for the customer. Validation: Required unless this is a price
     rule."""
    discount_combination_rule: Optional[Union[str, "_models.DiscountCombinationRule"]] = rest_field(
        name="discountCombinationRule", visibility=["read", "create", "update", "delete", "query"]
    )
    """The discount combination rule when there are multiple applicable custom prices. Validation:
     Required. Supported values are Stackable and BestOf. Known values are: \"BestOf\" and
     \"Stackable\"."""
    price_guarantee_properties: Optional["_models.PriceGuaranteeProperties"] = rest_field(
        name="priceGuaranteeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set only in price guarantee scenario."""
    conditions: Optional[List["_models.ConditionsItem"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of conditions for the discount. Validation: Optional. Maximum length is 1000."""

    @overload
    def __init__(
        self,
        *,
        discount_type: str,
        apply_discount_on: Union[str, "_models.ApplyDiscountOn"],
        discount_percentage: Optional[float] = None,
        discount_combination_rule: Optional[Union[str, "_models.DiscountCombinationRule"]] = None,
        price_guarantee_properties: Optional["_models.PriceGuaranteeProperties"] = None,
        conditions: Optional[List["_models.ConditionsItem"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscountTypeProduct(DiscountTypeProperties, discriminator="Product"):
    """Discount type properties including product family name and product id.

    :ivar apply_discount_on: The customer action on which the discount is applied. Supported values
     are Purchase, Consume, and Renew. Validation: Required, one of supported values. Required.
     Known values are: "Purchase", "Consume", and "Renew".
    :vartype apply_discount_on: str or ~azure.mgmt.billingbenefits.models.ApplyDiscountOn
    :ivar discount_percentage: Discount percentage provided for the customer. Validation: Required
     unless this is a price rule.
    :vartype discount_percentage: float
    :ivar discount_combination_rule: The discount combination rule when there are multiple
     applicable custom prices. Validation: Required. Supported values are Stackable and BestOf.
     Known values are: "BestOf" and "Stackable".
    :vartype discount_combination_rule: str or
     ~azure.mgmt.billingbenefits.models.DiscountCombinationRule
    :ivar price_guarantee_properties: Set only in price guarantee scenario.
    :vartype price_guarantee_properties:
     ~azure.mgmt.billingbenefits.models.PriceGuaranteeProperties
    :ivar conditions: Array of conditions for the discount. Validation: Optional. Maximum length is
     1000.
    :vartype conditions: list[~azure.mgmt.billingbenefits.models.ConditionsItem]
    :ivar product_family_name: Product family for which the discount is given. Validation:
     Optional.
    :vartype product_family_name: str
    :ivar product_id: Product ID for which the discount is given. Validation: Optional. No specific
     format, example: DZH318Z09V6F.
    :vartype product_id: str
    :ivar discount_type: Defines the type of discount. Supported values are ProductFamily, Product,
     Sku, CustomPrice, and CustomPriceMultiCurrency. Required.
    :vartype discount_type: str or ~azure.mgmt.billingbenefits.models.PRODUCT
    """

    product_family_name: Optional[str] = rest_field(
        name="productFamilyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product family for which the discount is given. Validation: Optional."""
    product_id: Optional[str] = rest_field(name="productId", visibility=["read", "create", "update", "delete", "query"])
    """Product ID for which the discount is given. Validation: Optional. No specific format, example:
     DZH318Z09V6F."""
    discount_type: Literal[DiscountType.PRODUCT] = rest_discriminator(name="discountType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice,
     and CustomPriceMultiCurrency. Required."""

    @overload
    def __init__(
        self,
        *,
        apply_discount_on: Union[str, "_models.ApplyDiscountOn"],
        discount_percentage: Optional[float] = None,
        discount_combination_rule: Optional[Union[str, "_models.DiscountCombinationRule"]] = None,
        price_guarantee_properties: Optional["_models.PriceGuaranteeProperties"] = None,
        conditions: Optional[List["_models.ConditionsItem"]] = None,
        product_family_name: Optional[str] = None,
        product_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, discount_type=DiscountType.PRODUCT, **kwargs)


class DiscountTypeProductFamily(DiscountTypeProperties, discriminator="ProductFamily"):
    """Discount type properties including product family name.

    :ivar apply_discount_on: The customer action on which the discount is applied. Supported values
     are Purchase, Consume, and Renew. Validation: Required, one of supported values. Required.
     Known values are: "Purchase", "Consume", and "Renew".
    :vartype apply_discount_on: str or ~azure.mgmt.billingbenefits.models.ApplyDiscountOn
    :ivar discount_percentage: Discount percentage provided for the customer. Validation: Required
     unless this is a price rule.
    :vartype discount_percentage: float
    :ivar discount_combination_rule: The discount combination rule when there are multiple
     applicable custom prices. Validation: Required. Supported values are Stackable and BestOf.
     Known values are: "BestOf" and "Stackable".
    :vartype discount_combination_rule: str or
     ~azure.mgmt.billingbenefits.models.DiscountCombinationRule
    :ivar price_guarantee_properties: Set only in price guarantee scenario.
    :vartype price_guarantee_properties:
     ~azure.mgmt.billingbenefits.models.PriceGuaranteeProperties
    :ivar conditions: Array of conditions for the discount. Validation: Optional. Maximum length is
     1000.
    :vartype conditions: list[~azure.mgmt.billingbenefits.models.ConditionsItem]
    :ivar product_family_name: Product family for which the discount is given. Validation:
     Optional.
    :vartype product_family_name: str
    :ivar discount_type: Defines the type of discount. Supported values are ProductFamily, Product,
     Sku, CustomPrice, and CustomPriceMultiCurrency. Required.
    :vartype discount_type: str or ~azure.mgmt.billingbenefits.models.PRODUCT_FAMILY
    """

    product_family_name: Optional[str] = rest_field(
        name="productFamilyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product family for which the discount is given. Validation: Optional."""
    discount_type: Literal[DiscountType.PRODUCT_FAMILY] = rest_discriminator(name="discountType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice,
     and CustomPriceMultiCurrency. Required."""

    @overload
    def __init__(
        self,
        *,
        apply_discount_on: Union[str, "_models.ApplyDiscountOn"],
        discount_percentage: Optional[float] = None,
        discount_combination_rule: Optional[Union[str, "_models.DiscountCombinationRule"]] = None,
        price_guarantee_properties: Optional["_models.PriceGuaranteeProperties"] = None,
        conditions: Optional[List["_models.ConditionsItem"]] = None,
        product_family_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, discount_type=DiscountType.PRODUCT_FAMILY, **kwargs)


class DiscountTypeProductSku(DiscountTypeProperties, discriminator="Sku"):
    """Discount type properties including product family name, product id, and sku id.

    :ivar apply_discount_on: The customer action on which the discount is applied. Supported values
     are Purchase, Consume, and Renew. Validation: Required, one of supported values. Required.
     Known values are: "Purchase", "Consume", and "Renew".
    :vartype apply_discount_on: str or ~azure.mgmt.billingbenefits.models.ApplyDiscountOn
    :ivar discount_percentage: Discount percentage provided for the customer. Validation: Required
     unless this is a price rule.
    :vartype discount_percentage: float
    :ivar discount_combination_rule: The discount combination rule when there are multiple
     applicable custom prices. Validation: Required. Supported values are Stackable and BestOf.
     Known values are: "BestOf" and "Stackable".
    :vartype discount_combination_rule: str or
     ~azure.mgmt.billingbenefits.models.DiscountCombinationRule
    :ivar price_guarantee_properties: Set only in price guarantee scenario.
    :vartype price_guarantee_properties:
     ~azure.mgmt.billingbenefits.models.PriceGuaranteeProperties
    :ivar conditions: Array of conditions for the discount. Validation: Optional. Maximum length is
     1000.
    :vartype conditions: list[~azure.mgmt.billingbenefits.models.ConditionsItem]
    :ivar product_family_name: Product family for which the discount is given. Validation:
     Optional.
    :vartype product_family_name: str
    :ivar product_id: Product ID for which the discount is given. Validation: Optional. No specific
     format, example: DZH318Z09V6F.
    :vartype product_id: str
    :ivar sku_id: ResourceSku for the given discount. Validation: Optional.
    :vartype sku_id: str
    :ivar discount_type: Defines the type of discount. Supported values are ProductFamily, Product,
     Sku, CustomPrice, and CustomPriceMultiCurrency. Required.
    :vartype discount_type: str or ~azure.mgmt.billingbenefits.models.SKU
    """

    product_family_name: Optional[str] = rest_field(
        name="productFamilyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product family for which the discount is given. Validation: Optional."""
    product_id: Optional[str] = rest_field(name="productId", visibility=["read", "create", "update", "delete", "query"])
    """Product ID for which the discount is given. Validation: Optional. No specific format, example:
     DZH318Z09V6F."""
    sku_id: Optional[str] = rest_field(name="skuId", visibility=["read", "create", "update", "delete", "query"])
    """ResourceSku for the given discount. Validation: Optional."""
    discount_type: Literal[DiscountType.SKU] = rest_discriminator(name="discountType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Defines the type of discount. Supported values are ProductFamily, Product, Sku, CustomPrice,
     and CustomPriceMultiCurrency. Required."""

    @overload
    def __init__(
        self,
        *,
        apply_discount_on: Union[str, "_models.ApplyDiscountOn"],
        discount_percentage: Optional[float] = None,
        discount_combination_rule: Optional[Union[str, "_models.DiscountCombinationRule"]] = None,
        price_guarantee_properties: Optional["_models.PriceGuaranteeProperties"] = None,
        conditions: Optional[List["_models.ConditionsItem"]] = None,
        product_family_name: Optional[str] = None,
        product_id: Optional[str] = None,
        sku_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, discount_type=DiscountType.SKU, **kwargs)


class EntityTypeAffiliateDiscount(DiscountProperties, discriminator="Affiliate"):
    """Entity type for affiliate discounts.

    :ivar product_code: This is the catalog UPN for the product. Required.
    :vartype product_code: str
    :ivar start_at: Start date of the discount. Value is the date the discount started or will
     start in the future. Required.
    :vartype start_at: ~datetime.datetime
    :ivar system_id: This is the globally unique identifier of the Discount which will not change
     for the lifetime of the Discount.
    :vartype system_id: str
    :ivar provisioning_state: The state of the resource. Supported values are Pending, Failed,
     Succeeded, Canceled. Known values are: "Unknown", "Pending", "Succeeded", "Canceled", and
     "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.billingbenefits.models.DiscountProvisioningState
    :ivar billing_account_resource_id: Billing account resource id where the discount metadata is
     present.
    :vartype billing_account_resource_id: str
    :ivar billing_profile_resource_id: Billing profile resource id where the discount is scoped to.
    :vartype billing_profile_resource_id: str
    :ivar customer_resource_id: Customer resource id where the discount is scoped to.
    :vartype customer_resource_id: str
    :ivar display_name: This defines a user friendly display name for the discount.
    :vartype display_name: str
    :ivar status: Represents the current status of the discount. Known values are: "Active",
     "Pending", "Failed", "Canceled", and "Expired".
    :vartype status: str or ~azure.mgmt.billingbenefits.models.DiscountStatus
    :ivar benefit_resource_id: Fully-qualified identifier of the benefit under applicable benefit
     list.
    :vartype benefit_resource_id: str
    :ivar applied_scope_type: List of applied scopes supported for discounts. Known values are:
     "BillingAccount", "BillingProfile", and "Customer".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.DiscountAppliedScopeType
    :ivar primary_resource_id: This will be present in the response if the primary has a resource
     ID.
    :vartype primary_resource_id: str
    :ivar end_at: End date of the discount. No duration will be supported. Allowed value is any
     date greater than or equal to startDate.
    :vartype end_at: ~datetime.datetime
    :ivar entity_type: This defines whether the entity being created is primary or affiliate.
     Supported values: primary, affiliate. Validation: Required, must match one of the 2 values.
     Required.
    :vartype entity_type: str or ~azure.mgmt.billingbenefits.models.AFFILIATE
    """

    primary_resource_id: Optional[str] = rest_field(name="primaryResourceId", visibility=["read"])
    """This will be present in the response if the primary has a resource ID."""
    end_at: Optional[datetime.datetime] = rest_field(name="endAt", visibility=["read"], format="rfc3339")
    """End date of the discount. No duration will be supported. Allowed value is any date greater than
     or equal to startDate."""
    entity_type: Literal[DiscountEntityType.AFFILIATE] = rest_discriminator(name="entityType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """This defines whether the entity being created is primary or affiliate. Supported values:
     primary, affiliate. Validation: Required, must match one of the 2 values. Required."""

    @overload
    def __init__(
        self,
        *,
        product_code: str,
        start_at: datetime.datetime,
        system_id: Optional[str] = None,
        display_name: Optional[str] = None,
        applied_scope_type: Optional[Union[str, "_models.DiscountAppliedScopeType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, entity_type=DiscountEntityType.AFFILIATE, **kwargs)


class EntityTypePrimaryDiscount(DiscountProperties, discriminator="Primary"):
    """Entity type for primary discounts.

    :ivar product_code: This is the catalog UPN for the product. Required.
    :vartype product_code: str
    :ivar start_at: Start date of the discount. Value is the date the discount started or will
     start in the future. Required.
    :vartype start_at: ~datetime.datetime
    :ivar system_id: This is the globally unique identifier of the Discount which will not change
     for the lifetime of the Discount.
    :vartype system_id: str
    :ivar provisioning_state: The state of the resource. Supported values are Pending, Failed,
     Succeeded, Canceled. Known values are: "Unknown", "Pending", "Succeeded", "Canceled", and
     "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.billingbenefits.models.DiscountProvisioningState
    :ivar billing_account_resource_id: Billing account resource id where the discount metadata is
     present.
    :vartype billing_account_resource_id: str
    :ivar billing_profile_resource_id: Billing profile resource id where the discount is scoped to.
    :vartype billing_profile_resource_id: str
    :ivar customer_resource_id: Customer resource id where the discount is scoped to.
    :vartype customer_resource_id: str
    :ivar display_name: This defines a user friendly display name for the discount.
    :vartype display_name: str
    :ivar status: Represents the current status of the discount. Known values are: "Active",
     "Pending", "Failed", "Canceled", and "Expired".
    :vartype status: str or ~azure.mgmt.billingbenefits.models.DiscountStatus
    :ivar benefit_resource_id: Fully-qualified identifier of the benefit under applicable benefit
     list.
    :vartype benefit_resource_id: str
    :ivar applied_scope_type: List of applied scopes supported for discounts. Known values are:
     "BillingAccount", "BillingProfile", and "Customer".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.DiscountAppliedScopeType
    :ivar discount_type_properties: This defines the conditions for a given discount type.
    :vartype discount_type_properties: ~azure.mgmt.billingbenefits.models.DiscountTypeProperties
    :ivar end_at: End date of the discount. No duration will be supported. Allowed value is any
     date greater than or equal to startDate. Required.
    :vartype end_at: ~datetime.datetime
    :ivar entity_type: This defines whether the entity being created is primary or affiliate.
     Supported values: primary, affiliate. Validation: Required, must match one of the 2 values.
     Required.
    :vartype entity_type: str or ~azure.mgmt.billingbenefits.models.PRIMARY
    """

    discount_type_properties: Optional["_models.DiscountTypeProperties"] = rest_field(
        name="discountTypeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """This defines the conditions for a given discount type."""
    end_at: datetime.datetime = rest_field(
        name="endAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """End date of the discount. No duration will be supported. Allowed value is any date greater than
     or equal to startDate. Required."""
    entity_type: Literal[DiscountEntityType.PRIMARY] = rest_discriminator(name="entityType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """This defines whether the entity being created is primary or affiliate. Supported values:
     primary, affiliate. Validation: Required, must match one of the 2 values. Required."""

    @overload
    def __init__(
        self,
        *,
        product_code: str,
        start_at: datetime.datetime,
        end_at: datetime.datetime,
        system_id: Optional[str] = None,
        display_name: Optional[str] = None,
        applied_scope_type: Optional[Union[str, "_models.DiscountAppliedScopeType"]] = None,
        discount_type_properties: Optional["_models.DiscountTypeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, entity_type=DiscountEntityType.PRIMARY, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.billingbenefits.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.billingbenefits.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.billingbenefits.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtendedStatusInfo(_Model):
    """ExtendedStatusInfo.

    :ivar status_code: Status code providing additional information.
    :vartype status_code: str
    :ivar message: The message giving detailed information about the status code.
    :vartype message: str
    """

    status_code: Optional[str] = rest_field(
        name="statusCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Status code providing additional information."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The message giving detailed information about the status code."""

    @overload
    def __init__(
        self,
        *,
        status_code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.billingbenefits.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.billingbenefits.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.billingbenefits.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class PaymentDetail(_Model):
    """Information about payment related to a savings plan order.

    :ivar due_date: Date when the payment needs to be done.
    :vartype due_date: ~datetime.date
    :ivar payment_date: Date when the transaction is completed. Is null when it is scheduled.
    :vartype payment_date: ~datetime.date
    :ivar pricing_currency_total: Amount in pricing currency. Tax not included.
    :vartype pricing_currency_total: ~azure.mgmt.billingbenefits.models.Price
    :ivar billing_currency_total: Amount charged in Billing currency. Tax not included. Is null for
     future payments.
    :vartype billing_currency_total: ~azure.mgmt.billingbenefits.models.Price
    :ivar status: Describes whether the payment is completed, failed, cancelled or scheduled in the
     future. Known values are: "Succeeded", "Failed", "Scheduled", and "Cancelled".
    :vartype status: str or ~azure.mgmt.billingbenefits.models.PaymentStatus
    :ivar extended_status_info:
    :vartype extended_status_info: ~azure.mgmt.billingbenefits.models.ExtendedStatusInfo
    :ivar billing_account: Billing account.
    :vartype billing_account: str
    """

    due_date: Optional[datetime.date] = rest_field(
        name="dueDate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Date when the payment needs to be done."""
    payment_date: Optional[datetime.date] = rest_field(
        name="paymentDate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Date when the transaction is completed. Is null when it is scheduled."""
    pricing_currency_total: Optional["_models.Price"] = rest_field(
        name="pricingCurrencyTotal", visibility=["read", "create", "update", "delete", "query"]
    )
    """Amount in pricing currency. Tax not included."""
    billing_currency_total: Optional["_models.Price"] = rest_field(
        name="billingCurrencyTotal", visibility=["read", "create", "update", "delete", "query"]
    )
    """Amount charged in Billing currency. Tax not included. Is null for future payments."""
    status: Optional[Union[str, "_models.PaymentStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Describes whether the payment is completed, failed, cancelled or scheduled in the future. Known
     values are: \"Succeeded\", \"Failed\", \"Scheduled\", and \"Cancelled\"."""
    extended_status_info: Optional["_models.ExtendedStatusInfo"] = rest_field(
        name="extendedStatusInfo", visibility=["read"]
    )
    billing_account: Optional[str] = rest_field(
        name="billingAccount", visibility=["read", "create", "update", "delete", "query"]
    )
    """Billing account."""

    @overload
    def __init__(
        self,
        *,
        due_date: Optional[datetime.date] = None,
        payment_date: Optional[datetime.date] = None,
        pricing_currency_total: Optional["_models.Price"] = None,
        billing_currency_total: Optional["_models.Price"] = None,
        status: Optional[Union[str, "_models.PaymentStatus"]] = None,
        billing_account: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PriceGuaranteeProperties(_Model):
    """Set only in price guarantee scenario.

    :ivar pricing_policy: Supported values: Protected, Locked. Known values are: "Protected" and
     "Locked".
    :vartype pricing_policy: str or ~azure.mgmt.billingbenefits.models.PricingPolicy
    :ivar price_guarantee_date: The date on which prices are to be used for guarantee calculation.
     Validation: expected to be 00 hours, Format: 2024-09-30T00:00:00Z. Must be in UTC.
    :vartype price_guarantee_date: ~datetime.datetime
    """

    pricing_policy: Optional[Union[str, "_models.PricingPolicy"]] = rest_field(
        name="pricingPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Supported values: Protected, Locked. Known values are: \"Protected\" and \"Locked\"."""
    price_guarantee_date: Optional[datetime.datetime] = rest_field(
        name="priceGuaranteeDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The date on which prices are to be used for guarantee calculation. Validation: expected to be
     00 hours, Format: 2024-09-30T00:00:00Z. Must be in UTC."""

    @overload
    def __init__(
        self,
        *,
        pricing_policy: Optional[Union[str, "_models.PricingPolicy"]] = None,
        price_guarantee_date: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    """


class PurchaseRequest(_Model):
    """PurchaseRequest.

    :ivar sku: The SKU to be applied for this resource.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar properties:
    :vartype properties: ~azure.mgmt.billingbenefits.models.PurchaseRequestProperties
    """

    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The SKU to be applied for this resource."""
    properties: Optional["_models.PurchaseRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    __flattened_items = [
        "display_name",
        "billing_scope_id",
        "term",
        "billing_plan",
        "applied_scope_type",
        "commitment",
        "effective_date_time",
        "renew",
        "applied_scope_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: Optional["_models.ResourceSku"] = None,
        properties: Optional["_models.PurchaseRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PurchaseRequestProperties(_Model):
    """PurchaseRequestProperties.

    :ivar display_name: Friendly name of the savings plan.
    :vartype display_name: str
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar commitment: Commitment towards the benefit.
    :vartype commitment: ~azure.mgmt.billingbenefits.models.Commitment
    :ivar effective_date_time: DateTime of the savings plan starts providing benefit from.
    :vartype effective_date_time: ~datetime.datetime
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Friendly name of the savings plan."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    commitment: Optional["_models.Commitment"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Commitment towards the benefit."""
    effective_date_time: Optional[datetime.datetime] = rest_field(
        name="effectiveDateTime", visibility=["read"], format="rfc3339"
    )
    """DateTime of the savings plan starts providing benefit from."""
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        commitment: Optional["_models.Commitment"] = None,
        renew: Optional[bool] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RenewProperties(_Model):
    """RenewProperties.

    :ivar purchase_properties:
    :vartype purchase_properties: ~azure.mgmt.billingbenefits.models.PurchaseRequest
    """

    purchase_properties: Optional["_models.PurchaseRequest"] = rest_field(
        name="purchaseProperties", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        purchase_properties: Optional["_models.PurchaseRequest"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReservationOrderAliasRequest(Resource):
    """Reservation order alias.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar sku: Reservation order SKU. Required.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar location: The Azure Region where the reservation benefits are applied to.
    :vartype location: str
    :ivar properties: Reservation order alias request properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.ReservationOrderAliasRequestProperties
    """

    sku: "_models.ResourceSku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reservation order SKU. Required."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Azure Region where the reservation benefits are applied to."""
    properties: Optional["_models.ReservationOrderAliasRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Reservation order alias request properties."""

    __flattened_items = [
        "display_name",
        "billing_scope_id",
        "term",
        "billing_plan",
        "applied_scope_type",
        "applied_scope_properties",
        "quantity",
        "renew",
        "reserved_resource_type",
        "review_date_time",
        "reserved_resource_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: "_models.ResourceSku",
        location: Optional[str] = None,
        properties: Optional["_models.ReservationOrderAliasRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ReservationOrderAliasRequestProperties(_Model):
    """Reservation properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    :ivar quantity: Total Quantity of the SKUs purchased in the Reservation.
    :vartype quantity: int
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    :ivar reserved_resource_type: The type of the resource that is being reserved. Known values
     are: "VirtualMachines", "SqlDatabases", "SuseLinux", "CosmosDb", "RedHat", "SqlDataWarehouse",
     "VMwareCloudSimple", "RedHatOsa", "Databricks", "AppService", "ManagedDisk", "BlockBlob",
     "RedisCache", "AzureDataExplorer", "MySql", "MariaDb", "PostgreSql", "DedicatedHost",
     "SapHana", "SqlAzureHybridBenefit", "AVS", "DataFactory", "NetAppStorage", "AzureFiles",
     "SqlEdge", and "VirtualMachineSoftware".
    :vartype reserved_resource_type: str or ~azure.mgmt.billingbenefits.models.ReservedResourceType
    :ivar review_date_time: This is the date-time when the Azure Hybrid Benefit needs to be
     reviewed.
    :vartype review_date_time: ~datetime.datetime
    :ivar reserved_resource_properties: Properties specific to each reserved resource type. Not
     required if not applicable.
    :vartype reserved_resource_properties:
     ~azure.mgmt.billingbenefits.models.ReservationOrderAliasRequestPropertiesReservedResourceProperties
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""
    quantity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Total Quantity of the SKUs purchased in the Reservation."""
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""
    reserved_resource_type: Optional[Union[str, "_models.ReservedResourceType"]] = rest_field(
        name="reservedResourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the resource that is being reserved. Known values are: \"VirtualMachines\",
     \"SqlDatabases\", \"SuseLinux\", \"CosmosDb\", \"RedHat\", \"SqlDataWarehouse\",
     \"VMwareCloudSimple\", \"RedHatOsa\", \"Databricks\", \"AppService\", \"ManagedDisk\",
     \"BlockBlob\", \"RedisCache\", \"AzureDataExplorer\", \"MySql\", \"MariaDb\", \"PostgreSql\",
     \"DedicatedHost\", \"SapHana\", \"SqlAzureHybridBenefit\", \"AVS\", \"DataFactory\",
     \"NetAppStorage\", \"AzureFiles\", \"SqlEdge\", and \"VirtualMachineSoftware\"."""
    review_date_time: Optional[datetime.datetime] = rest_field(
        name="reviewDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """This is the date-time when the Azure Hybrid Benefit needs to be reviewed."""
    reserved_resource_properties: Optional[
        "_models.ReservationOrderAliasRequestPropertiesReservedResourceProperties"
    ] = rest_field(name="reservedResourceProperties", visibility=["read", "create", "update", "delete", "query"])
    """Properties specific to each reserved resource type. Not required if not applicable."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
        quantity: Optional[int] = None,
        renew: Optional[bool] = None,
        reserved_resource_type: Optional[Union[str, "_models.ReservedResourceType"]] = None,
        review_date_time: Optional[datetime.datetime] = None,
        reserved_resource_properties: Optional[
            "_models.ReservationOrderAliasRequestPropertiesReservedResourceProperties"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReservationOrderAliasRequestPropertiesReservedResourceProperties(_Model):  # pylint: disable=name-too-long
    """Properties specific to each reserved resource type. Not required if not applicable.

    :ivar instance_flexibility: Turning this on will apply the reservation discount to other VMs in
     the same VM size group. Known values are: "On" and "Off".
    :vartype instance_flexibility: str or ~azure.mgmt.billingbenefits.models.InstanceFlexibility
    """

    instance_flexibility: Optional[Union[str, "_models.InstanceFlexibility"]] = rest_field(
        name="instanceFlexibility", visibility=["read", "create", "update", "delete", "query"]
    )
    """Turning this on will apply the reservation discount to other VMs in the same VM size group.
     Known values are: \"On\" and \"Off\"."""

    @overload
    def __init__(
        self,
        *,
        instance_flexibility: Optional[Union[str, "_models.InstanceFlexibility"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReservationOrderAliasResponse(ProxyResource):
    """Reservation order alias.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar sku: Reservation order SKU. Required.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar location: The Azure Region where the reserved resource lives.
    :vartype location: str
    :ivar properties: Reservation order alias response properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.ReservationOrderAliasResponseProperties
    """

    sku: "_models.ResourceSku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reservation order SKU. Required."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Azure Region where the reserved resource lives."""
    properties: Optional["_models.ReservationOrderAliasResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Reservation order alias response properties."""

    __flattened_items = [
        "display_name",
        "reservation_order_id",
        "provisioning_state",
        "billing_scope_id",
        "term",
        "billing_plan",
        "applied_scope_type",
        "applied_scope_properties",
        "quantity",
        "renew",
        "reserved_resource_type",
        "review_date_time",
        "reserved_resource_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: "_models.ResourceSku",
        location: Optional[str] = None,
        properties: Optional["_models.ReservationOrderAliasResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ReservationOrderAliasResponseProperties(_Model):
    """Reservation properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar reservation_order_id: Identifier of the reservation order created.
    :vartype reservation_order_id: str
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "PendingBilling",
     "ConfirmedBilling", "Created", "Succeeded", "Cancelled", "Expired", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.billingbenefits.models.ProvisioningState
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    :ivar quantity: Total Quantity of the SKUs purchased in the Reservation.
    :vartype quantity: int
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    :ivar reserved_resource_type: The type of the resource that is being reserved. Known values
     are: "VirtualMachines", "SqlDatabases", "SuseLinux", "CosmosDb", "RedHat", "SqlDataWarehouse",
     "VMwareCloudSimple", "RedHatOsa", "Databricks", "AppService", "ManagedDisk", "BlockBlob",
     "RedisCache", "AzureDataExplorer", "MySql", "MariaDb", "PostgreSql", "DedicatedHost",
     "SapHana", "SqlAzureHybridBenefit", "AVS", "DataFactory", "NetAppStorage", "AzureFiles",
     "SqlEdge", and "VirtualMachineSoftware".
    :vartype reserved_resource_type: str or ~azure.mgmt.billingbenefits.models.ReservedResourceType
    :ivar review_date_time: This is the date-time when the Reservation needs to be reviewed.
    :vartype review_date_time: ~datetime.datetime
    :ivar reserved_resource_properties: Properties specific to each reserved resource type. Not
     required if not applicable.
    :vartype reserved_resource_properties:
     ~azure.mgmt.billingbenefits.models.ReservationOrderAliasResponsePropertiesReservedResourceProperties
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    reservation_order_id: Optional[str] = rest_field(name="reservationOrderId", visibility=["read"])
    """Identifier of the reservation order created."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"PendingBilling\", \"ConfirmedBilling\",
     \"Created\", \"Succeeded\", \"Cancelled\", \"Expired\", and \"Failed\"."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""
    quantity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Total Quantity of the SKUs purchased in the Reservation."""
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""
    reserved_resource_type: Optional[Union[str, "_models.ReservedResourceType"]] = rest_field(
        name="reservedResourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the resource that is being reserved. Known values are: \"VirtualMachines\",
     \"SqlDatabases\", \"SuseLinux\", \"CosmosDb\", \"RedHat\", \"SqlDataWarehouse\",
     \"VMwareCloudSimple\", \"RedHatOsa\", \"Databricks\", \"AppService\", \"ManagedDisk\",
     \"BlockBlob\", \"RedisCache\", \"AzureDataExplorer\", \"MySql\", \"MariaDb\", \"PostgreSql\",
     \"DedicatedHost\", \"SapHana\", \"SqlAzureHybridBenefit\", \"AVS\", \"DataFactory\",
     \"NetAppStorage\", \"AzureFiles\", \"SqlEdge\", and \"VirtualMachineSoftware\"."""
    review_date_time: Optional[datetime.datetime] = rest_field(
        name="reviewDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """This is the date-time when the Reservation needs to be reviewed."""
    reserved_resource_properties: Optional[
        "_models.ReservationOrderAliasResponsePropertiesReservedResourceProperties"
    ] = rest_field(name="reservedResourceProperties", visibility=["read", "create", "update", "delete", "query"])
    """Properties specific to each reserved resource type. Not required if not applicable."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
        quantity: Optional[int] = None,
        renew: Optional[bool] = None,
        reserved_resource_type: Optional[Union[str, "_models.ReservedResourceType"]] = None,
        review_date_time: Optional[datetime.datetime] = None,
        reserved_resource_properties: Optional[
            "_models.ReservationOrderAliasResponsePropertiesReservedResourceProperties"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReservationOrderAliasResponsePropertiesReservedResourceProperties(_Model):  # pylint: disable=name-too-long
    """Properties specific to each reserved resource type. Not required if not applicable.

    :ivar instance_flexibility: Turning this on will apply the reservation discount to other VMs in
     the same VM size group. Known values are: "On" and "Off".
    :vartype instance_flexibility: str or ~azure.mgmt.billingbenefits.models.InstanceFlexibility
    """

    instance_flexibility: Optional[Union[str, "_models.InstanceFlexibility"]] = rest_field(
        name="instanceFlexibility", visibility=["read", "create", "update", "delete", "query"]
    )
    """Turning this on will apply the reservation discount to other VMs in the same VM size group.
     Known values are: \"On\" and \"Off\"."""

    @overload
    def __init__(
        self,
        *,
        instance_flexibility: Optional[Union[str, "_models.InstanceFlexibility"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceSku(_Model):
    """ResourceSku.

    :ivar name:
    :vartype name: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RoleAssignmentEntity(_Model):
    """Role assignment entity.

    :ivar id: Role assignment entity id.
    :vartype id: str
    :ivar name: Role assignment entity name.
    :vartype name: str
    :ivar properties: Role assignment entity properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.RoleAssignmentEntityProperties
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Role assignment entity id."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Role assignment entity name."""
    properties: Optional["_models.RoleAssignmentEntityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Role assignment entity properties."""

    __flattened_items = ["principal_id", "role_definition_id", "scope"]

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        properties: Optional["_models.RoleAssignmentEntityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RoleAssignmentEntityProperties(_Model):
    """Role assignment entity properties.

    :ivar principal_id: Principal Id.
    :vartype principal_id: str
    :ivar role_definition_id: Role definition id.
    :vartype role_definition_id: str
    :ivar scope: Scope of the role assignment entity.
    :vartype scope: str
    """

    principal_id: Optional[str] = rest_field(
        name="principalId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Principal Id."""
    role_definition_id: Optional[str] = rest_field(
        name="roleDefinitionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role definition id."""
    scope: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Scope of the role assignment entity."""

    @overload
    def __init__(
        self,
        *,
        principal_id: Optional[str] = None,
        role_definition_id: Optional[str] = None,
        scope: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanModel(ProxyResource):
    """Savings plan.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar sku: Savings plan SKU. Required.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar properties: Savings plan properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.SavingsPlanModelProperties
    """

    sku: "_models.ResourceSku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Savings plan SKU. Required."""
    properties: Optional["_models.SavingsPlanModelProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Savings plan properties."""

    __flattened_items = [
        "display_name",
        "provisioning_state",
        "display_provisioning_state",
        "billing_scope_id",
        "billing_profile_id",
        "customer_id",
        "billing_account_id",
        "term",
        "billing_plan",
        "applied_scope_type",
        "user_friendly_applied_scope_type",
        "applied_scope_properties",
        "commitment",
        "effective_date_time",
        "expiry_date_time",
        "purchase_date_time",
        "benefit_start_time",
        "extended_status_info",
        "renew",
        "utilization",
        "renew_source",
        "renew_destination",
        "renew_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: "_models.ResourceSku",
        properties: Optional["_models.SavingsPlanModelProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SavingsPlanModelProperties(_Model):
    """Savings plan properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "PendingBilling",
     "ConfirmedBilling", "Created", "Succeeded", "Cancelled", "Expired", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.billingbenefits.models.ProvisioningState
    :ivar display_provisioning_state: The provisioning state of the savings plan for display, e.g.
     Succeeded.
    :vartype display_provisioning_state: str
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar billing_profile_id: Fully-qualified identifier of the billing profile where the savings
     plan is applied. Present only for Field-led or Customer-led customers.
    :vartype billing_profile_id: str
    :ivar customer_id: Fully-qualified identifier of the customer where the savings plan is
     applied. Present only for Partner-led customers.
    :vartype customer_id: str
    :ivar billing_account_id: Fully-qualified identifier of the billing account where the savings
     plan is applied. Present only for Enterprise Agreement customers.
    :vartype billing_account_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar user_friendly_applied_scope_type: The applied scope type of the savings plan for display,
     e.g. Shared.
    :vartype user_friendly_applied_scope_type: str
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    :ivar commitment: Commitment towards the benefit.
    :vartype commitment: ~azure.mgmt.billingbenefits.models.Commitment
    :ivar effective_date_time: DateTime of the savings plan starts providing benefit from.
    :vartype effective_date_time: ~datetime.datetime
    :ivar expiry_date_time: Expiry date time.
    :vartype expiry_date_time: ~datetime.datetime
    :ivar purchase_date_time: Date time when the savings plan was purchased.
    :vartype purchase_date_time: ~datetime.datetime
    :ivar benefit_start_time: This is the DateTime when the savings plan benefit started.
    :vartype benefit_start_time: ~datetime.datetime
    :ivar extended_status_info:
    :vartype extended_status_info: ~azure.mgmt.billingbenefits.models.ExtendedStatusInfo
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    :ivar utilization: Savings plan utilization.
    :vartype utilization: ~azure.mgmt.billingbenefits.models.Utilization
    :ivar renew_source: SavingsPlan Id of the SavingsPlan from which this SavingsPlan is renewed.
    :vartype renew_source: str
    :ivar renew_destination: SavingsPlan Id of the SavingsPlan which is purchased because of renew.
    :vartype renew_destination: str
    :ivar renew_properties:
    :vartype renew_properties: ~azure.mgmt.billingbenefits.models.RenewProperties
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"PendingBilling\", \"ConfirmedBilling\",
     \"Created\", \"Succeeded\", \"Cancelled\", \"Expired\", and \"Failed\"."""
    display_provisioning_state: Optional[str] = rest_field(name="displayProvisioningState", visibility=["read"])
    """The provisioning state of the savings plan for display, e.g. Succeeded."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    billing_profile_id: Optional[str] = rest_field(name="billingProfileId", visibility=["read"])
    """Fully-qualified identifier of the billing profile where the savings plan is applied. Present
     only for Field-led or Customer-led customers."""
    customer_id: Optional[str] = rest_field(name="customerId", visibility=["read"])
    """Fully-qualified identifier of the customer where the savings plan is applied. Present only for
     Partner-led customers."""
    billing_account_id: Optional[str] = rest_field(name="billingAccountId", visibility=["read"])
    """Fully-qualified identifier of the billing account where the savings plan is applied. Present
     only for Enterprise Agreement customers."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    user_friendly_applied_scope_type: Optional[str] = rest_field(
        name="userFriendlyAppliedScopeType", visibility=["read"]
    )
    """The applied scope type of the savings plan for display, e.g. Shared."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""
    commitment: Optional["_models.Commitment"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Commitment towards the benefit."""
    effective_date_time: Optional[datetime.datetime] = rest_field(
        name="effectiveDateTime", visibility=["read"], format="rfc3339"
    )
    """DateTime of the savings plan starts providing benefit from."""
    expiry_date_time: Optional[datetime.datetime] = rest_field(
        name="expiryDateTime", visibility=["read"], format="rfc3339"
    )
    """Expiry date time."""
    purchase_date_time: Optional[datetime.datetime] = rest_field(
        name="purchaseDateTime", visibility=["read"], format="rfc3339"
    )
    """Date time when the savings plan was purchased."""
    benefit_start_time: Optional[datetime.datetime] = rest_field(
        name="benefitStartTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """This is the DateTime when the savings plan benefit started."""
    extended_status_info: Optional["_models.ExtendedStatusInfo"] = rest_field(
        name="extendedStatusInfo", visibility=["read"]
    )
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""
    utilization: Optional["_models.Utilization"] = rest_field(visibility=["read"])
    """Savings plan utilization."""
    renew_source: Optional[str] = rest_field(
        name="renewSource", visibility=["read", "create", "update", "delete", "query"]
    )
    """SavingsPlan Id of the SavingsPlan from which this SavingsPlan is renewed."""
    renew_destination: Optional[str] = rest_field(
        name="renewDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """SavingsPlan Id of the SavingsPlan which is purchased because of renew."""
    renew_properties: Optional["_models.RenewProperties"] = rest_field(
        name="renewProperties", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
        commitment: Optional["_models.Commitment"] = None,
        benefit_start_time: Optional[datetime.datetime] = None,
        renew: Optional[bool] = None,
        renew_source: Optional[str] = None,
        renew_destination: Optional[str] = None,
        renew_properties: Optional["_models.RenewProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanOrderAliasModel(ProxyResource):
    """Savings plan order alias.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar sku: Savings plan SKU. Required.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar kind: Resource provider kind.
    :vartype kind: str
    :ivar properties: Savings plan order alias properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.SavingsPlanOrderAliasProperties
    """

    sku: "_models.ResourceSku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Savings plan SKU. Required."""
    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource provider kind."""
    properties: Optional["_models.SavingsPlanOrderAliasProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Savings plan order alias properties."""

    __flattened_items = [
        "display_name",
        "savings_plan_order_id",
        "provisioning_state",
        "billing_scope_id",
        "term",
        "billing_plan",
        "applied_scope_type",
        "applied_scope_properties",
        "commitment",
        "renew",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: "_models.ResourceSku",
        kind: Optional[str] = None,
        properties: Optional["_models.SavingsPlanOrderAliasProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SavingsPlanOrderAliasProperties(_Model):
    """Savings plan properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar savings_plan_order_id: Identifier of the savings plan created.
    :vartype savings_plan_order_id: str
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "PendingBilling",
     "ConfirmedBilling", "Created", "Succeeded", "Cancelled", "Expired", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.billingbenefits.models.ProvisioningState
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    :ivar commitment: Commitment towards the benefit.
    :vartype commitment: ~azure.mgmt.billingbenefits.models.Commitment
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    savings_plan_order_id: Optional[str] = rest_field(name="savingsPlanOrderId", visibility=["read"])
    """Identifier of the savings plan created."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"PendingBilling\", \"ConfirmedBilling\",
     \"Created\", \"Succeeded\", \"Cancelled\", \"Expired\", and \"Failed\"."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""
    commitment: Optional["_models.Commitment"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Commitment towards the benefit."""
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
        commitment: Optional["_models.Commitment"] = None,
        renew: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanOrderModel(ProxyResource):
    """Savings plan order.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.billingbenefits.models.SystemData
    :ivar sku: Savings plan SKU. Required.
    :vartype sku: ~azure.mgmt.billingbenefits.models.ResourceSku
    :ivar properties: Savings plan order properties.
    :vartype properties: ~azure.mgmt.billingbenefits.models.SavingsPlanOrderModelProperties
    """

    sku: "_models.ResourceSku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Savings plan SKU. Required."""
    properties: Optional["_models.SavingsPlanOrderModelProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Savings plan order properties."""

    __flattened_items = [
        "display_name",
        "provisioning_state",
        "billing_scope_id",
        "billing_profile_id",
        "customer_id",
        "billing_account_id",
        "term",
        "billing_plan",
        "expiry_date_time",
        "benefit_start_time",
        "plan_information",
        "savings_plans",
        "extended_status_info",
    ]

    @overload
    def __init__(
        self,
        *,
        sku: "_models.ResourceSku",
        properties: Optional["_models.SavingsPlanOrderModelProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SavingsPlanOrderModelProperties(_Model):
    """Savings plan order properties.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "PendingBilling",
     "ConfirmedBilling", "Created", "Succeeded", "Cancelled", "Expired", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.billingbenefits.models.ProvisioningState
    :ivar billing_scope_id: Subscription that will be charged for purchasing the benefit.
    :vartype billing_scope_id: str
    :ivar billing_profile_id: Fully-qualified identifier of the billing profile where the savings
     plan is applied. Present only for Field-led or Customer-led customers.
    :vartype billing_profile_id: str
    :ivar customer_id: Fully-qualified identifier of the customer where the savings plan is
     applied. Present only for Partner-led customers.
    :vartype customer_id: str
    :ivar billing_account_id: Fully-qualified identifier of the billing account where the savings
     plan is applied. Present only for Enterprise Agreement customers.
    :vartype billing_account_id: str
    :ivar term: Represent benefit term in ISO 8601 format. Known values are: "P1Y", "P3Y", and
     "P5Y".
    :vartype term: str or ~azure.mgmt.billingbenefits.models.Term
    :ivar billing_plan: Represents the billing plan in ISO 8601 format. Required only for monthly
     billing plans. "P1M"
    :vartype billing_plan: str or ~azure.mgmt.billingbenefits.models.BillingPlan
    :ivar expiry_date_time: Expiry date time.
    :vartype expiry_date_time: ~datetime.datetime
    :ivar benefit_start_time: This is the DateTime when the savings plan benefit started.
    :vartype benefit_start_time: ~datetime.datetime
    :ivar plan_information: Information describing the type of billing plan for this savings plan.
    :vartype plan_information: ~azure.mgmt.billingbenefits.models.BillingPlanInformation
    :ivar savings_plans:
    :vartype savings_plans: list[str]
    :ivar extended_status_info:
    :vartype extended_status_info: ~azure.mgmt.billingbenefits.models.ExtendedStatusInfo
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"PendingBilling\", \"ConfirmedBilling\",
     \"Created\", \"Succeeded\", \"Cancelled\", \"Expired\", and \"Failed\"."""
    billing_scope_id: Optional[str] = rest_field(
        name="billingScopeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription that will be charged for purchasing the benefit."""
    billing_profile_id: Optional[str] = rest_field(name="billingProfileId", visibility=["read"])
    """Fully-qualified identifier of the billing profile where the savings plan is applied. Present
     only for Field-led or Customer-led customers."""
    customer_id: Optional[str] = rest_field(name="customerId", visibility=["read"])
    """Fully-qualified identifier of the customer where the savings plan is applied. Present only for
     Partner-led customers."""
    billing_account_id: Optional[str] = rest_field(name="billingAccountId", visibility=["read"])
    """Fully-qualified identifier of the billing account where the savings plan is applied. Present
     only for Enterprise Agreement customers."""
    term: Optional[Union[str, "_models.Term"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represent benefit term in ISO 8601 format. Known values are: \"P1Y\", \"P3Y\", and \"P5Y\"."""
    billing_plan: Optional[Union[str, "_models.BillingPlan"]] = rest_field(
        name="billingPlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.
     \"P1M\""""
    expiry_date_time: Optional[datetime.datetime] = rest_field(
        name="expiryDateTime", visibility=["read"], format="rfc3339"
    )
    """Expiry date time."""
    benefit_start_time: Optional[datetime.datetime] = rest_field(
        name="benefitStartTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """This is the DateTime when the savings plan benefit started."""
    plan_information: Optional["_models.BillingPlanInformation"] = rest_field(
        name="planInformation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Information describing the type of billing plan for this savings plan."""
    savings_plans: Optional[List[str]] = rest_field(
        name="savingsPlans", visibility=["read", "create", "update", "delete", "query"]
    )
    extended_status_info: Optional["_models.ExtendedStatusInfo"] = rest_field(
        name="extendedStatusInfo", visibility=["read"]
    )

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        billing_scope_id: Optional[str] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        billing_plan: Optional[Union[str, "_models.BillingPlan"]] = None,
        benefit_start_time: Optional[datetime.datetime] = None,
        plan_information: Optional["_models.BillingPlanInformation"] = None,
        savings_plans: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanPurchaseValidateRequest(_Model):
    """SavingsPlanPurchaseValidateRequest.

    :ivar benefits:
    :vartype benefits: list[~azure.mgmt.billingbenefits.models.SavingsPlanOrderAliasModel]
    """

    benefits: Optional[List["_models.SavingsPlanOrderAliasModel"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        benefits: Optional[List["_models.SavingsPlanOrderAliasModel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanSummary(_Model):
    """Savings plans list summary.

    :ivar name: This property has value 'summary'.
    :vartype name: str
    :ivar value: The roll up count summary of savings plans in each state.
    :vartype value: ~azure.mgmt.billingbenefits.models.SavingsPlanSummaryCount
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """This property has value 'summary'."""
    value: Optional["_models.SavingsPlanSummaryCount"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The roll up count summary of savings plans in each state."""

    @overload
    def __init__(
        self,
        *,
        value: Optional["_models.SavingsPlanSummaryCount"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanSummaryCount(_Model):
    """The roll up count summary of savings plans in each state.

    :ivar succeeded_count: The number of savings plans in Succeeded state.
    :vartype succeeded_count: float
    :ivar failed_count: The number of savings plans in Failed state.
    :vartype failed_count: float
    :ivar expiring_count: The number of savings plans in Expiring state.
    :vartype expiring_count: float
    :ivar expired_count: The number of savings plans in Expired state.
    :vartype expired_count: float
    :ivar pending_count: The number of savings plans in Pending state.
    :vartype pending_count: float
    :ivar cancelled_count: The number of savings plans in Cancelled state.
    :vartype cancelled_count: float
    :ivar processing_count: The number of savings plans in Processing state.
    :vartype processing_count: float
    :ivar no_benefit_count: The number of savings plans in No Benefit state.
    :vartype no_benefit_count: float
    :ivar warning_count: The number of savings plans in Warning state.
    :vartype warning_count: float
    """

    succeeded_count: Optional[float] = rest_field(name="succeededCount", visibility=["read"])
    """The number of savings plans in Succeeded state."""
    failed_count: Optional[float] = rest_field(name="failedCount", visibility=["read"])
    """The number of savings plans in Failed state."""
    expiring_count: Optional[float] = rest_field(name="expiringCount", visibility=["read"])
    """The number of savings plans in Expiring state."""
    expired_count: Optional[float] = rest_field(name="expiredCount", visibility=["read"])
    """The number of savings plans in Expired state."""
    pending_count: Optional[float] = rest_field(name="pendingCount", visibility=["read"])
    """The number of savings plans in Pending state."""
    cancelled_count: Optional[float] = rest_field(name="cancelledCount", visibility=["read"])
    """The number of savings plans in Cancelled state."""
    processing_count: Optional[float] = rest_field(name="processingCount", visibility=["read"])
    """The number of savings plans in Processing state."""
    no_benefit_count: Optional[float] = rest_field(name="noBenefitCount", visibility=["read"])
    """The number of savings plans in No Benefit state."""
    warning_count: Optional[float] = rest_field(name="warningCount", visibility=["read"])
    """The number of savings plans in Warning state."""


class SavingsPlanUpdateRequest(_Model):
    """Savings plan patch request.

    :ivar properties: Savings plan patch request.
    :vartype properties: ~azure.mgmt.billingbenefits.models.SavingsPlanUpdateRequestProperties
    """

    properties: Optional["_models.SavingsPlanUpdateRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Savings plan patch request."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SavingsPlanUpdateRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanUpdateRequestProperties(_Model):
    """Savings plan patch request.

    :ivar display_name: Display name.
    :vartype display_name: str
    :ivar applied_scope_type: Type of the Applied Scope. Known values are: "Single", "Shared", and
     "ManagementGroup".
    :vartype applied_scope_type: str or ~azure.mgmt.billingbenefits.models.AppliedScopeType
    :ivar applied_scope_properties: Properties specific to applied scope type. Not required if not
     applicable.
    :vartype applied_scope_properties: ~azure.mgmt.billingbenefits.models.AppliedScopeProperties
    :ivar renew: Setting this to true will automatically purchase a new benefit on the expiration
     date time.
    :vartype renew: bool
    :ivar renew_properties:
    :vartype renew_properties: ~azure.mgmt.billingbenefits.models.RenewProperties
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name."""
    applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = rest_field(
        name="appliedScopeType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Applied Scope. Known values are: \"Single\", \"Shared\", and \"ManagementGroup\"."""
    applied_scope_properties: Optional["_models.AppliedScopeProperties"] = rest_field(
        name="appliedScopeProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to applied scope type. Not required if not applicable."""
    renew: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting this to true will automatically purchase a new benefit on the expiration date time."""
    renew_properties: Optional["_models.RenewProperties"] = rest_field(
        name="renewProperties", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        applied_scope_type: Optional[Union[str, "_models.AppliedScopeType"]] = None,
        applied_scope_properties: Optional["_models.AppliedScopeProperties"] = None,
        renew: Optional[bool] = None,
        renew_properties: Optional["_models.RenewProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanUpdateValidateRequest(_Model):
    """SavingsPlanUpdateValidateRequest.

    :ivar benefits:
    :vartype benefits: list[~azure.mgmt.billingbenefits.models.SavingsPlanUpdateRequestProperties]
    """

    benefits: Optional[List["_models.SavingsPlanUpdateRequestProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        benefits: Optional[List["_models.SavingsPlanUpdateRequestProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanValidateResponse(_Model):
    """SavingsPlanValidateResponse.

    :ivar benefits:
    :vartype benefits: list[~azure.mgmt.billingbenefits.models.SavingsPlanValidResponseProperty]
    :ivar next_link: Url to get the next page.
    :vartype next_link: str
    """

    benefits: Optional[List["_models.SavingsPlanValidResponseProperty"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """Url to get the next page."""

    @overload
    def __init__(
        self,
        *,
        benefits: Optional[List["_models.SavingsPlanValidResponseProperty"]] = None,
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SavingsPlanValidResponseProperty(_Model):
    """Benefit scope response property.

    :ivar valid: Indicates if the provided input was valid.
    :vartype valid: bool
    :ivar reason_code: Failure reason code if the provided input was invalid.
    :vartype reason_code: str
    :ivar reason: Failure reason if the provided input was invalid.
    :vartype reason: str
    """

    valid: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates if the provided input was valid."""
    reason_code: Optional[str] = rest_field(
        name="reasonCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Failure reason code if the provided input was invalid."""
    reason: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Failure reason if the provided input was invalid."""

    @overload
    def __init__(
        self,
        *,
        valid: Optional[bool] = None,
        reason_code: Optional[str] = None,
        reason: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.billingbenefits.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.billingbenefits.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Utilization(_Model):
    """Savings plan utilization.

    :ivar trend: The number of days trend for a savings plan.
    :vartype trend: str
    :ivar aggregates: The array of aggregates of a savings plan's utilization.
    :vartype aggregates: list[~azure.mgmt.billingbenefits.models.UtilizationAggregates]
    """

    trend: Optional[str] = rest_field(visibility=["read"])
    """The number of days trend for a savings plan."""
    aggregates: Optional[List["_models.UtilizationAggregates"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The array of aggregates of a savings plan's utilization."""

    @overload
    def __init__(
        self,
        *,
        aggregates: Optional[List["_models.UtilizationAggregates"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UtilizationAggregates(_Model):
    """The aggregate values of savings plan utilization.

    :ivar grain: The grain of the aggregate.
    :vartype grain: float
    :ivar grain_unit: The grain unit of the aggregate.
    :vartype grain_unit: str
    :ivar value: The aggregate value.
    :vartype value: float
    :ivar value_unit: The aggregate value unit.
    :vartype value_unit: str
    """

    grain: Optional[float] = rest_field(visibility=["read"])
    """The grain of the aggregate."""
    grain_unit: Optional[str] = rest_field(name="grainUnit", visibility=["read"])
    """The grain unit of the aggregate."""
    value: Optional[float] = rest_field(visibility=["read"])
    """The aggregate value."""
    value_unit: Optional[str] = rest_field(name="valueUnit", visibility=["read"])
    """The aggregate value unit."""
