# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AdapterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The adapter type."""

    STANDARD = "Standard"
    CUSTOM = "Custom"


class BoundDataDescriptorParameterValueType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Bound data descriptor parameter value type."""

    DATA_ASSET = "DataAsset"


class BoundDataDescriptorType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of bound data descriptor."""

    DATA_ASSET = "DataAsset"
    COMPUTATION_OUTPUT = "ComputationOutput"
    PARAMETER = "Parameter"


class ComputationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of computation."""

    SYNAPSE_SPARK = "SynapseSpark"
    CONTAINER_INSTANCE_CONTAINER_GROUP = "ContainerInstanceContainerGroup"


class ConstrainedResourceFamilyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Family of constrained resource."""

    COMPUTE = "Compute"
    STORAGE = "Storage"


class ConstrainedResourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of constrained resource."""

    SYNAPSE_SPARK_POOL = "SynapseSparkPool"
    CONTAINER_INSTANCE = "ContainerInstance"


class ConstraintType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of constraint."""

    COMPUTATION = "Computation"
    LOCATION = "Location"
    COMPUTATION_PARAMETER = "ComputationParameter"


class ContractStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicate if the contract is an editable Draft or a readonly Active contract."""

    DRAFT = "Draft"
    ACTIVE = "Active"


class CreatedModifiedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class DataAssetReferenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The data asset reference type. Represents the data access allowed using this data in pipeline."""

    READ_ONLY = "ReadOnly"
    WRITE_ONLY = "WriteOnly"


class DataMovementExecutionStage(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The stage of data movement."""

    INPUT = "Input"
    OUTPUT = "Output"


class DataProcessingStrategy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Data processing strategy to use for the the child DataSets."""

    COPY_BASED = "CopyBased"
    IN_PLACE = "InPlace"


class DataSetCategoryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DataSetCategoryType."""

    PRODUCTION = "Production"
    SAMPLE = "Sample"


class DataSetType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of Data Set."""

    BLOB = "Blob"
    CONTAINER = "Container"
    BLOB_FOLDER = "BlobFolder"
    ADLS_GEN2_FILE_SYSTEM = "AdlsGen2FileSystem"
    ADLS_GEN2_FOLDER = "AdlsGen2Folder"
    ADLS_GEN2_FILE = "AdlsGen2File"


class DiagnosticsLogType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of diagnostics log."""

    CONSOLE_LOG = "ConsoleLog"
    EVENT_LOG = "EventLog"


class EntitlementResourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of resourced used by the entitlement."""

    DATA_ASSET_REFERENCE = "DataAssetReference"
    COMPUTATION_REFERENCE = "ComputationReference"
    VIRTUAL_OUTPUT_REFERENCE = "VirtualOutputReference"


class ExecutionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pipeline run status."""

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    IN_PROGRESS = "InProgress"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    UNKNOWN = "Unknown"
    CANCELLED = "Cancelled"
    CANCELING = "Canceling"
    WAITING = "Waiting"
    INCOMPLETE = "Incomplete"


class InvitationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the invitation."""

    PENDING = "Pending"
    REJECTED = "Rejected"
    ACCEPTED = "Accepted"


class LogLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The policy log level."""

    VERBOSE = "Verbose"
    INFORMATION = "Information"
    WARNING = "Warning"
    ERROR = "Error"
    CRITICAL = "Critical"


class ManagedIdentityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Identity Type."""

    SYSTEM_ASSIGNED = "SystemAssigned"


class OperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Operation state of the long running operation."""

    ACCEPTED = "Accepted"
    IN_PROGRESS = "InProgress"
    TRANSIENT_FAILURE = "TransientFailure"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"


class PipelineRunMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Mode of pipeline run used."""

    PRODUCTION = "Production"
    TEST = "Test"


class PipelineStepParameterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pipeline step parameter type."""

    BOUND_DATA_DESCRIPTOR = "BoundDataDescriptor"


class PipelineStepType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of pipeline step."""

    SYNAPSE_SPARK = "SynapseSpark"
    CONTAINER_INSTANCE_CONTAINER_GROUP = "ContainerInstanceContainerGroup"


class PipelineSubstepType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of pipeline substep."""

    DATA_MOVEMENT = "DataMovement"
    SCRIPT_EXECUTION = "ScriptExecution"
    CONTAINER_GROUP_EXECUTION = "ContainerGroupExecution"
    DIAGNOSTICS_LOG = "DiagnosticsLog"


class PlaceholderState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The placeholder state."""

    NONE = "None"
    UNASSIGNED = "Unassigned"
    ASSIGNED = "Assigned"


class PolicyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of policy."""

    DIAGNOSTIC_LEVEL = "DiagnosticLevel"
    OUTPUT = "Output"


class PortProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The protocol associated with the port. Possible values
    include: 'TCP', 'UDP'.
    """

    TCP = "TCP"
    UDP = "UDP"


class PrivateEndpointGroupId(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of endpoint on the linked resource."""

    BLOB = "blob"
    BLOB_SECONDARY = "blob_secondary"
    DFS = "dfs"
    DFS_SECONDARY = "dfs_secondary"


class PrivateEndpointStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The approval status."""

    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"
    DISCONNECTED = "Disconnected"


class ProposalApprovalStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Current approval status."""

    PENDING = "Pending"
    APPROVED = "Approved"
    EXPIRED = "Expired"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of the computation."""

    SUCCEEDED = "Succeeded"
    CREATING = "Creating"
    UPDATING = "Updating"
    DELETING = "Deleting"
    MOVING = "Moving"
    FAILED = "Failed"
    CANCELED = "Canceled"


class ResourceReferenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of resource reference."""

    DATA_ASSET = "DataAsset"
    DATA_ASSET_REFERENCE = "DataAssetReference"
    SYNAPSE_SPARK_SCRIPT = "SynapseSparkScript"
    SYNAPSE_SPARK_SCRIPT_REFERENCE = "SynapseSparkScriptReference"
    CONTAINER_INSTANCE_CONTAINER_GROUP = "ContainerInstanceContainerGroup"
    CONTAINER_INSTANCE_CONTAINER_GROUP_REFERENCE = "ContainerInstanceContainerGroupReference"


class ScriptLanguage(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The script language."""

    PYTHON = "Python"


class ScriptParameterResolvedBy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Parameter resolution by."""

    DEFAULT = "Default"
    CONSTANT = "Constant"
    PIPELINE_RUN = "PipelineRun"


class ScriptParameterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Parameter type."""

    BOOLEAN = "Boolean"
    INTEGER = "Integer"
    FLOAT = "Float"
    STRING = "String"
    DATE_TIME = "DateTime"


class ScriptParameterValidationRuleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Computation parameter validation rule type."""

    INTEGER_RANGE = "IntegerRange"
    FLOAT_RANGE = "FloatRange"
    DATE_TIME_RANGE = "DateTimeRange"
    STRING_LENGTH_RANGE = "StringLengthRange"
    REGULAR_EXPRESSION = "RegularExpression"
    INTEGER_OPTIONS_SET = "IntegerOptionsSet"
    FLOAT_OPTIONS_SET = "FloatOptionsSet"
    STRING_OPTIONS_SET = "StringOptionsSet"
    DATE_TIME_OPTIONS_SET = "DateTimeOptionsSet"


class ScriptPurpose(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Script purpose."""

    BODY = "Body"
    INPUT_ADAPTER = "InputAdapter"
    OUTPUT_ADAPTER = "OutputAdapter"


class ScriptVisibility(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Script visibility mode."""

    SHOW_ALL = "ShowAll"
    HIDDEN_CONTENT = "HiddenContent"


class SubstepReferenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of substep reference."""

    DATA_MOVEMENT = "DataMovement"
    SCRIPT_EXECUTION = "ScriptExecution"
    CONTAINER_GROUP_EXECUTION = "ContainerGroupExecution"
    DIAGNOSTICS_LOG = "DiagnosticsLog"


class SynapseSparkPoolNodeSize(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The node size to use per executor."""

    NONE = "None"
    SMALL = "Small"
    MEDIUM = "Medium"
    LARGE = "Large"
    X_LARGE = "XLarge"
    XX_LARGE = "XXLarge"
    XXX_LARGE = "XXXLarge"


class SynapseSparkPoolNodeSizeFamily(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Gets or sets the kind of nodes that the Big Data pool provides."""

    NONE = "None"
    MEMORY_OPTIMIZED = "MemoryOptimized"
