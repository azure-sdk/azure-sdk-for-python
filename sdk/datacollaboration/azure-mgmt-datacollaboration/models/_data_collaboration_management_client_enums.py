# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AdapterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The adapter type
    """

    STANDARD = "Standard"
    CUSTOM = "Custom"

class BoundDataDescriptorKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of bound data descriptor.
    """

    DATA_ASSET = "DataAsset"
    SCRIPT_OUTPUT = "ScriptOutput"

class ConstrainedResourceKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of constrained resource.
    """

    SYNAPSE_SPARK_POOL = "SynapseSparkPool"

class ConstraintKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of constraint.
    """

    SCRIPT = "Script"
    LOCATION = "Location"
    SCRIPT_PARAMETER = "ScriptParameter"

class ContractStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicate if the contract is an editable Draft or a readonly Active contract
    """

    DRAFT = "Draft"
    ACTIVE = "Active"

class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class DataAccessType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The data asset reference type. Represents the data access allowed using this data in pipeline
    """

    READ_ONLY = "ReadOnly"
    WRITE_ONLY = "WriteOnly"

class DataMovementExecutionStage(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The stage of data movement
    """

    INPUT = "Input"
    OUTPUT = "Output"

class DataProcessingStrategy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Data processing strategy to use for the the child DataSets
    """

    COPY_BASED = "CopyBased"
    IN_PLACE = "InPlace"

class DataSetCategoryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    PRODUCTION = "Production"
    SAMPLE = "Sample"

class DiagnosticsLogKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of diagnostics log.
    """

    CONSOLE_LOG = "ConsoleLog"
    EVENT_LOG = "EventLog"

class ExecutionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Execution status e.g. Success, Failed, InProgress
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    IN_PROGRESS = "InProgress"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    UNKNOWN = "Unknown"
    CANCELLED = "Cancelled"
    CANCELING = "Canceling"
    WAITING = "Waiting"
    INCOMPLETE = "Incomplete"

class ExecutorNodeSize(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The node size to use per executor.
    """

    NONE = "None"
    SMALL = "Small"
    MEDIUM = "Medium"
    LARGE = "Large"
    X_LARGE = "XLarge"
    XX_LARGE = "XXLarge"
    XXX_LARGE = "XXXLarge"

class Family(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Family of constrained resource.
    """

    COMPUTE = "Compute"
    STORAGE = "Storage"

class GroupId(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of endpoint on the linked resource
    """

    BLOB = "blob"
    BLOB_SECONDARY = "blob_secondary"
    DFS = "dfs"
    DFS_SECONDARY = "dfs_secondary"

class InvitationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the invitation.
    """

    PENDING = "Pending"
    REJECTED = "Rejected"
    ACCEPTED = "Accepted"

class Kind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of Data Set.
    """

    BLOB = "Blob"
    CONTAINER = "Container"
    BLOB_FOLDER = "BlobFolder"
    ADLS_GEN2_FILE_SYSTEM = "AdlsGen2FileSystem"
    ADLS_GEN2_FOLDER = "AdlsGen2Folder"
    ADLS_GEN2_FILE = "AdlsGen2File"

class Language(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The script language
    """

    PYTHON = "Python"

class LastModifiedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that last modified the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class LogLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The policy log level.
    """

    VERBOSE = "Verbose"
    INFORMATION = "Information"
    WARNING = "Warning"
    ERROR = "Error"
    CRITICAL = "Critical"

class NodeSize(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Gets or sets the level of compute power that each node in the Synapse Spark pool has.
    """

    NONE = "None"
    SMALL = "Small"
    MEDIUM = "Medium"
    LARGE = "Large"
    X_LARGE = "XLarge"
    XX_LARGE = "XXLarge"
    XXX_LARGE = "XXXLarge"

class NodeSizeFamily(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Gets or sets the kind of nodes that the Big Data pool provides.
    """

    NONE = "None"
    MEMORY_OPTIMIZED = "MemoryOptimized"

class ParameterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Parameter type.
    """

    BOOLEAN = "Boolean"
    INTEGER = "Integer"
    FLOAT = "Float"
    STRING = "String"
    DATE_TIME = "DateTime"

class PipelineRunMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Mode of pipeline run used.
    """

    PRODUCTION = "Production"
    TEST = "Test"

class PipelineRunStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pipeline run status
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    IN_PROGRESS = "InProgress"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    UNKNOWN = "Unknown"
    CANCELLED = "Cancelled"
    CANCELING = "Canceling"
    WAITING = "Waiting"
    INCOMPLETE = "Incomplete"

class PipelineStepKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of pipeline step.
    """

    SYNAPSE_SPARK = "SynapseSpark"

class PipelineStepRunStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pipeline step run status
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    IN_PROGRESS = "InProgress"
    PREPARING = "Preparing"
    QUEUED = "Queued"
    UNKNOWN = "Unknown"
    CANCELLED = "Cancelled"
    CANCELING = "Canceling"
    WAITING = "Waiting"
    INCOMPLETE = "Incomplete"

class PipelineSubStepKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of pipeline substep.
    """

    DATA_MOVEMENT = "DataMovement"
    SCRIPT_EXECUTION = "ScriptExecution"
    DIAGNOSTICS_LOG = "DiagnosticsLog"

class PlaceholderState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The placeholder state
    """

    NONE = "None"
    UNASSIGNED = "Unassigned"
    ASSIGNED = "Assigned"

class PolicyKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of policy.
    """

    DIAGNOSTIC_LEVEL = "DiagnosticLevel"
    OUTPUT = "Output"

class PrivateEndpointStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The approval status
    """

    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"
    DISCONNECTED = "Disconnected"

class ProposalApprovalStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Current approval status
    """

    PENDING = "Pending"
    APPROVED = "Approved"
    EXPIRED = "Expired"

class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of the DataAsset
    """

    SUCCEEDED = "Succeeded"
    CREATING = "Creating"
    UPDATING = "Updating"
    DELETING = "Deleting"
    MOVING = "Moving"
    FAILED = "Failed"

class Purpose(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Script purpose
    """

    BODY = "Body"
    INPUT_ADAPTER = "InputAdapter"
    OUTPUT_ADAPTER = "OutputAdapter"

class ResolvedBy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Parameter resolution by
    """

    DEFAULT = "Default"
    CONSTANT = "Constant"
    PIPELINE_RUN = "PipelineRun"

class ResourceReferenceKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of resource reference.
    """

    DATA_ASSET = "DataAsset"
    DATA_ASSET_REFERENCE = "DataAssetReference"
    SCRIPT = "Script"
    SCRIPT_REFERENCE = "ScriptReference"

class ResourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of resourced used by the entitlement.
    """

    DATA_ASSET_REFERENCE = "DataAssetReference"
    SCRIPT_REFERENCE = "ScriptReference"
    VIRTUAL_OUTPUT_REFERENCE = "VirtualOutputReference"

class ScriptKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of script.
    """

    SYNAPSE_SPARK = "SynapseSpark"

class ScriptParameterValidationRuleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Script parameter validation rule type.
    """

    INTEGER_RANGE = "IntegerRange"
    FLOAT_RANGE = "FloatRange"
    DATE_TIME_RANGE = "DateTimeRange"
    STRING_LENGTH_RANGE = "StringLengthRange"
    REGULAR_EXPRESSION = "RegularExpression"
    INTEGER_OPTIONS_SET = "IntegerOptionsSet"
    FLOAT_OPTIONS_SET = "FloatOptionsSet"
    STRING_OPTIONS_SET = "StringOptionsSet"
    DATE_TIME_OPTIONS_SET = "DateTimeOptionsSet"

class ScriptVisibility(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The referenced script visibility modifier.
    """

    SHOW_ALL = "ShowAll"
    HIDDEN_CONTENT = "HiddenContent"

class Status(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Operation state of the long running operation.
    """

    ACCEPTED = "Accepted"
    IN_PROGRESS = "InProgress"
    TRANSIENT_FAILURE = "TransientFailure"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"

class SubStepReferenceKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Kind of substep reference.
    """

    DATA_MOVEMENT = "DataMovement"
    SCRIPT_EXECUTION = "ScriptExecution"
    DIAGNOSTICS_LOG = "DiagnosticsLog"

class Type(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Identity Type
    """

    SYSTEM_ASSIGNED = "SystemAssigned"

class Visibility(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Script visibility mode
    """

    SHOW_ALL = "ShowAll"
    HIDDEN_CONTENT = "HiddenContent"
