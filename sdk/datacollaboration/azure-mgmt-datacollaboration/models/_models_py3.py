# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AdapterBindingConstraint(_serialization.Model):
    """Properties for adapter binding constraint.

    All required parameters must be populated in order to send to Azure.

    :ivar binding_key: The key of script's source or sink.
    :vartype binding_key: str
    :ivar script_reference_id: The unique identifier of the adapter script reference. Required.
    :vartype script_reference_id: str
    """

    _validation = {
        "script_reference_id": {"required": True},
    }

    _attribute_map = {
        "binding_key": {"key": "bindingKey", "type": "str"},
        "script_reference_id": {"key": "scriptReferenceId", "type": "str"},
    }

    def __init__(self, *, script_reference_id: str, binding_key: Optional[str] = None, **kwargs):
        """
        :keyword binding_key: The key of script's source or sink.
        :paramtype binding_key: str
        :keyword script_reference_id: The unique identifier of the adapter script reference. Required.
        :paramtype script_reference_id: str
        """
        super().__init__(**kwargs)
        self.binding_key = binding_key
        self.script_reference_id = script_reference_id


class ProxyDto(_serialization.Model):
    """Base data transfer object implementation for proxy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.system_data = None
        self.type = None


class DataSet(ProxyDto):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ADLSGen2FileDataSet, ADLSGen2FileSystemDataSet, ADLSGen2FolderDataSet, BlobDataSet,
    BlobFolderDataSet, BlobContainerDataSet

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {
            "AdlsGen2File": "ADLSGen2FileDataSet",
            "AdlsGen2FileSystem": "ADLSGen2FileSystemDataSet",
            "AdlsGen2Folder": "ADLSGen2FolderDataSet",
            "Blob": "BlobDataSet",
            "BlobFolder": "BlobFolderDataSet",
            "Container": "BlobContainerDataSet",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ADLSGen2FileDataSet(DataSet):
    """An ADLS Gen 2 file data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar file_path: File path within the file system. Required.
    :vartype file_path: str
    :ivar file_system: File system to which the file belongs. Required.
    :vartype file_system: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "data_set_id": {"readonly": True},
        "file_path": {"required": True},
        "file_system": {"required": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "file_path": {"key": "properties.filePath", "type": "str"},
        "file_system": {"key": "properties.fileSystem", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, file_path: str, file_system: str, storage_account_id: str, **kwargs):
        """
        :keyword file_path: File path within the file system. Required.
        :paramtype file_path: str
        :keyword file_system: File system to which the file belongs. Required.
        :paramtype file_system: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "AdlsGen2File"  # type: str
        self.data_set_id = None
        self.file_path = file_path
        self.file_system = file_system
        self.storage_account_id = storage_account_id


class ADLSGen2FileSystemDataSet(DataSet):
    """An ADLS Gen 2 file system data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar file_system: The file system name. Required.
    :vartype file_system: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "data_set_id": {"readonly": True},
        "file_system": {"required": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "file_system": {"key": "properties.fileSystem", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, file_system: str, storage_account_id: str, **kwargs):
        """
        :keyword file_system: The file system name. Required.
        :paramtype file_system: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "AdlsGen2FileSystem"  # type: str
        self.data_set_id = None
        self.file_system = file_system
        self.storage_account_id = storage_account_id


class ADLSGen2FolderDataSet(DataSet):
    """An ADLS Gen 2 folder data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar file_system: File system to which the folder belongs. Required.
    :vartype file_system: str
    :ivar folder_path: Folder path within the file system. Required.
    :vartype folder_path: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "data_set_id": {"readonly": True},
        "file_system": {"required": True},
        "folder_path": {"required": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "file_system": {"key": "properties.fileSystem", "type": "str"},
        "folder_path": {"key": "properties.folderPath", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, file_system: str, folder_path: str, storage_account_id: str, **kwargs):
        """
        :keyword file_system: File system to which the folder belongs. Required.
        :paramtype file_system: str
        :keyword folder_path: Folder path within the file system. Required.
        :paramtype folder_path: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "AdlsGen2Folder"  # type: str
        self.data_set_id = None
        self.file_system = file_system
        self.folder_path = folder_path
        self.storage_account_id = storage_account_id


class BlobContainerDataSet(DataSet):
    """An Azure storage blob container data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar container_name: BLOB Container name. Required.
    :vartype container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "container_name": {"required": True},
        "data_set_id": {"readonly": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "container_name": {"key": "properties.containerName", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, container_name: str, storage_account_id: str, **kwargs):
        """
        :keyword container_name: BLOB Container name. Required.
        :paramtype container_name: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "Container"  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.storage_account_id = storage_account_id


class BlobDataSet(DataSet):
    """An Azure storage blob data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar container_name: Container that has the file path. Required.
    :vartype container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar file_path: File path within the source data source. Required.
    :vartype file_path: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "container_name": {"required": True},
        "data_set_id": {"readonly": True},
        "file_path": {"required": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "container_name": {"key": "properties.containerName", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "file_path": {"key": "properties.filePath", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, container_name: str, file_path: str, storage_account_id: str, **kwargs):
        """
        :keyword container_name: Container that has the file path. Required.
        :paramtype container_name: str
        :keyword file_path: File path within the source data source. Required.
        :paramtype file_path: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "Blob"  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.file_path = file_path
        self.storage_account_id = storage_account_id


class BlobFolderDataSet(DataSet):
    """An Azure storage blob folder data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of Data Set. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar container_name: Container that has the file path. Required.
    :vartype container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :ivar prefix: Prefix for blob folder. Required.
    :vartype prefix: str
    :ivar storage_account_id: Resource id of the storage account. Required.
    :vartype storage_account_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "container_name": {"required": True},
        "data_set_id": {"readonly": True},
        "prefix": {"required": True},
        "storage_account_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "container_name": {"key": "properties.containerName", "type": "str"},
        "data_set_id": {"key": "properties.dataSetId", "type": "str"},
        "prefix": {"key": "properties.prefix", "type": "str"},
        "storage_account_id": {"key": "properties.storageAccountId", "type": "str"},
    }

    def __init__(self, *, container_name: str, prefix: str, storage_account_id: str, **kwargs):
        """
        :keyword container_name: Container that has the file path. Required.
        :paramtype container_name: str
        :keyword prefix: Prefix for blob folder. Required.
        :paramtype prefix: str
        :keyword storage_account_id: Resource id of the storage account. Required.
        :paramtype storage_account_id: str
        """
        super().__init__(**kwargs)
        self.kind = "BlobFolder"  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.prefix = prefix
        self.storage_account_id = storage_account_id


class PipelineRunParameterAssignment(_serialization.Model):
    """Pipeline run parameter assignment.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BooleanPipelineRunParameterAssignment, DateTimePipelineRunParameterAssignment,
    FloatPipelineRunParameterAssignment, IntegerPipelineRunParameterAssignment,
    StringPipelineRunParameterAssignment

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
    }

    _subtype_map = {
        "parameter_type": {
            "Boolean": "BooleanPipelineRunParameterAssignment",
            "DateTime": "DateTimePipelineRunParameterAssignment",
            "Float": "FloatPipelineRunParameterAssignment",
            "Integer": "IntegerPipelineRunParameterAssignment",
            "String": "StringPipelineRunParameterAssignment",
        }
    }

    def __init__(self, *, pipeline_parameter_id: str, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        """
        super().__init__(**kwargs)
        self.parameter_type = None  # type: Optional[str]
        self.pipeline_parameter_id = pipeline_parameter_id


class BooleanPipelineRunParameterAssignment(PipelineRunParameterAssignment):
    """Pipeline run boolean parameter assignment.

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    :ivar value: Parameter value. Required.
    :vartype value: bool
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "value": {"key": "value", "type": "bool"},
    }

    def __init__(self, *, pipeline_parameter_id: str, value: bool, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        :keyword value: Parameter value. Required.
        :paramtype value: bool
        """
        super().__init__(pipeline_parameter_id=pipeline_parameter_id, **kwargs)
        self.parameter_type = "Boolean"  # type: str
        self.value = value


class ScriptParameter(_serialization.Model):
    """Script parameter definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BooleanScriptParameter, DateTimeScriptParameter, FloatScriptParameter, IntegerScriptParameter,
    StringScriptParameter

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
    }

    _subtype_map = {
        "parameter_type": {
            "Boolean": "BooleanScriptParameter",
            "DateTime": "DateTimeScriptParameter",
            "Float": "FloatScriptParameter",
            "Integer": "IntegerScriptParameter",
            "String": "StringScriptParameter",
        }
    }

    def __init__(self, *, name: str, description: Optional[str] = None, parameter_id: Optional[str] = None, **kwargs):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.parameter_id = parameter_id
        self.parameter_type = None  # type: Optional[str]


class BooleanScriptParameter(ScriptParameter):
    """Script parameter of type boolean.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar default_value: Default parameter value.
    :vartype default_value: bool
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "bool"},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameter_id: Optional[str] = None,
        default_value: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: bool
        """
        super().__init__(description=description, name=name, parameter_id=parameter_id, **kwargs)
        self.parameter_type = "Boolean"  # type: str
        self.default_value = default_value


class BoundAdapter(_serialization.Model):
    """Bound adapter.

    All required parameters must be populated in order to send to Azure.

    :ivar adapter_type: The adapter type. Required. Known values are: "Standard" and "Custom".
    :vartype adapter_type: str or ~azure.mgmt.datacollaboration.models.AdapterType
    :ivar script_id: The adapter script id. Required.
    :vartype script_id: str
    :ivar script_revision: The adapter script revision. Required.
    :vartype script_revision: int
    """

    _validation = {
        "adapter_type": {"required": True},
        "script_id": {"required": True},
        "script_revision": {"required": True},
    }

    _attribute_map = {
        "adapter_type": {"key": "adapterType", "type": "str"},
        "script_id": {"key": "scriptId", "type": "str"},
        "script_revision": {"key": "scriptRevision", "type": "int"},
    }

    def __init__(
        self, *, adapter_type: Union[str, "_models.AdapterType"], script_id: str, script_revision: int, **kwargs
    ):
        """
        :keyword adapter_type: The adapter type. Required. Known values are: "Standard" and "Custom".
        :paramtype adapter_type: str or ~azure.mgmt.datacollaboration.models.AdapterType
        :keyword script_id: The adapter script id. Required.
        :paramtype script_id: str
        :keyword script_revision: The adapter script revision. Required.
        :paramtype script_revision: int
        """
        super().__init__(**kwargs)
        self.adapter_type = adapter_type
        self.script_id = script_id
        self.script_revision = script_revision


class BoundDataDescriptor(_serialization.Model):
    """Base class for bound data descriptor.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataAssetBoundDataDescriptor, ScriptOutputBoundDataDescriptor

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of bound data descriptor. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {"DataAsset": "DataAssetBoundDataDescriptor", "ScriptOutput": "ScriptOutputBoundDataDescriptor"}
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ConstrainedResource(ProxyDto):
    """A constrained resource data transfer object.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SynapseSparkPool

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constrained resource. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"SynapseSparkPool": "SynapseSparkPool"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ConstrainedResourceList(_serialization.Model):
    """List response for list ConstrainedResources.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.ConstrainedResource]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ConstrainedResource]"},
    }

    def __init__(self, *, value: List["_models.ConstrainedResource"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.ConstrainedResource]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Constraint(ProxyDto):
    """Constraint for entitlement, restricts the access granted by it.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    LocationConstraint, ScriptConstraint, ScriptParameterConstraint

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constraint. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {
            "Location": "LocationConstraint",
            "Script": "ScriptConstraint",
            "ScriptParameter": "ScriptParameterConstraint",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ConstraintList(_serialization.Model):
    """List response for get Constraints.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Constraint]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Constraint]"},
    }

    def __init__(self, *, value: List["_models.Constraint"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Constraint]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ConsumerInvitation(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """A consumer Invitation data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar location: Invitation location.
    :vartype location: str
    :ivar description: Description shared when the invitation was created.
    :vartype description: str
    :ivar invitation_id: Unique id of the invitation. Required.
    :vartype invitation_id: str
    :ivar invitation_status: The status of the invitation. Known values are: "Pending", "Rejected",
     and "Accepted".
    :vartype invitation_status: str or ~azure.mgmt.datacollaboration.models.InvitationStatus
    :ivar proposal_name: Gets the source proposal Name.
    :vartype proposal_name: str
    :ivar provider_email: Email of the provider who created the resource.
    :vartype provider_email: str
    :ivar provider_name: Name of the provider who created the resource.
    :vartype provider_name: str
    :ivar provider_tenant_name: Tenant name of the provider who created the resource.
    :vartype provider_tenant_name: str
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: ~datetime.datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: ~datetime.datetime
    :ivar terms_of_use: Terms of use proposal when the invitation was created.
    :vartype terms_of_use: str
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "location": {"readonly": True},
        "description": {"readonly": True},
        "invitation_id": {"required": True},
        "invitation_status": {"readonly": True},
        "proposal_name": {"readonly": True},
        "provider_email": {"readonly": True},
        "provider_name": {"readonly": True},
        "provider_tenant_name": {"readonly": True},
        "responded_at": {"readonly": True},
        "sent_at": {"readonly": True},
        "terms_of_use": {"readonly": True},
        "user_email": {"readonly": True},
        "user_name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "invitation_id": {"key": "properties.invitationId", "type": "str"},
        "invitation_status": {"key": "properties.invitationStatus", "type": "str"},
        "proposal_name": {"key": "properties.proposalName", "type": "str"},
        "provider_email": {"key": "properties.providerEmail", "type": "str"},
        "provider_name": {"key": "properties.providerName", "type": "str"},
        "provider_tenant_name": {"key": "properties.providerTenantName", "type": "str"},
        "responded_at": {"key": "properties.respondedAt", "type": "iso-8601"},
        "sent_at": {"key": "properties.sentAt", "type": "iso-8601"},
        "terms_of_use": {"key": "properties.termsOfUse", "type": "str"},
        "user_email": {"key": "properties.userEmail", "type": "str"},
        "user_name": {"key": "properties.userName", "type": "str"},
    }

    def __init__(self, *, invitation_id: str, **kwargs):
        """
        :keyword invitation_id: Unique id of the invitation. Required.
        :paramtype invitation_id: str
        """
        super().__init__(**kwargs)
        self.location = None
        self.description = None
        self.invitation_id = invitation_id
        self.invitation_status = None
        self.proposal_name = None
        self.provider_email = None
        self.provider_name = None
        self.provider_tenant_name = None
        self.responded_at = None
        self.sent_at = None
        self.terms_of_use = None
        self.user_email = None
        self.user_name = None


class ConsumerInvitationList(_serialization.Model):
    """List response for get InvitationList.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.ConsumerInvitation]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ConsumerInvitation]"},
    }

    def __init__(self, *, value: List["_models.ConsumerInvitation"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.ConsumerInvitation]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataAsset(ProxyDto):
    """Data asset that can be referenced from a proposal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar data_asset_id: Unique id for identifying a data asset resource.
    :vartype data_asset_id: str
    :ivar data_processing_strategy: Data processing strategy to use for the the child DataSets.
     Known values are: "CopyBased" and "InPlace".
    :vartype data_processing_strategy: str or
     ~azure.mgmt.datacollaboration.models.DataProcessingStrategy
    :ivar description: General Description of the DataSet content.
    :vartype description: str
    :ivar provisioning_state: Provisioning state of the DataAsset. Known values are: "Succeeded",
     "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "data_asset_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "data_asset_id": {"key": "properties.dataAssetId", "type": "str"},
        "data_processing_strategy": {"key": "properties.dataProcessingStrategy", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_processing_strategy: Optional[Union[str, "_models.DataProcessingStrategy"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword data_processing_strategy: Data processing strategy to use for the the child DataSets.
         Known values are: "CopyBased" and "InPlace".
        :paramtype data_processing_strategy: str or
         ~azure.mgmt.datacollaboration.models.DataProcessingStrategy
        :keyword description: General Description of the DataSet content.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.data_asset_id = None
        self.data_processing_strategy = data_processing_strategy
        self.description = description
        self.provisioning_state = None


class DataAssetBoundDataDescriptor(BoundDataDescriptor):
    """Data asset bound data descriptor.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of bound data descriptor. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar data_asset_id: The bounded data asset Id.
    :vartype data_asset_id: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "data_asset_id": {"key": "dataAssetId", "type": "str"},
    }

    def __init__(self, *, data_asset_id: Optional[str] = None, **kwargs):
        """
        :keyword data_asset_id: The bounded data asset Id.
        :paramtype data_asset_id: str
        """
        super().__init__(**kwargs)
        self.kind = "DataAsset"  # type: str
        self.data_asset_id = data_asset_id


class DataAssetList(_serialization.Model):
    """List response for get data assets.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.DataAsset]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[DataAsset]"},
    }

    def __init__(self, *, value: List["_models.DataAsset"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.DataAsset]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataAssetReference(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """Reference to a data asset.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar data_access_type: The data asset reference type. Represents the data access allowed using
     this data in pipeline. Known values are: "ReadOnly" and "WriteOnly".
    :vartype data_access_type: str or ~azure.mgmt.datacollaboration.models.DataAccessType
    :ivar data_asset_id: The unique identifier of the referenced data asset.
    :vartype data_asset_id: str
    :ivar data_asset_reference_id: Unique id for identifying a dataset reference resource.
    :vartype data_asset_reference_id: str
    :ivar description: General Description of the data asset reference.
    :vartype description: str
    :ivar display_name: Reference display name.
    :vartype display_name: str
    :ivar owner_id: The participant id of the data asset owner.
    :vartype owner_id: str
    :ivar placeholder_info: The placeholder information.
    :vartype placeholder_info:
     ~azure.mgmt.datacollaboration.models.DataAssetReferencePlaceholderInfo
    :ivar placeholder_state: The placeholder state. Known values are: "None", "Unassigned", and
     "Assigned".
    :vartype placeholder_state: str or ~azure.mgmt.datacollaboration.models.PlaceholderState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "data_asset_reference_id": {"readonly": True},
        "owner_id": {"readonly": True},
        "placeholder_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "data_access_type": {"key": "properties.dataAccessType", "type": "str"},
        "data_asset_id": {"key": "properties.dataAssetId", "type": "str"},
        "data_asset_reference_id": {"key": "properties.dataAssetReferenceId", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "owner_id": {"key": "properties.ownerId", "type": "str"},
        "placeholder_info": {"key": "properties.placeholderInfo", "type": "DataAssetReferencePlaceholderInfo"},
        "placeholder_state": {"key": "properties.placeholderState", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_access_type: Optional[Union[str, "_models.DataAccessType"]] = None,
        data_asset_id: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        placeholder_info: Optional["_models.DataAssetReferencePlaceholderInfo"] = None,
        **kwargs
    ):
        """
        :keyword data_access_type: The data asset reference type. Represents the data access allowed
         using this data in pipeline. Known values are: "ReadOnly" and "WriteOnly".
        :paramtype data_access_type: str or ~azure.mgmt.datacollaboration.models.DataAccessType
        :keyword data_asset_id: The unique identifier of the referenced data asset.
        :paramtype data_asset_id: str
        :keyword description: General Description of the data asset reference.
        :paramtype description: str
        :keyword display_name: Reference display name.
        :paramtype display_name: str
        :keyword placeholder_info: The placeholder information.
        :paramtype placeholder_info:
         ~azure.mgmt.datacollaboration.models.DataAssetReferencePlaceholderInfo
        """
        super().__init__(**kwargs)
        self.data_access_type = data_access_type
        self.data_asset_id = data_asset_id
        self.data_asset_reference_id = None
        self.description = description
        self.display_name = display_name
        self.owner_id = None
        self.placeholder_info = placeholder_info
        self.placeholder_state = None


class DataAssetReferenceList(_serialization.Model):
    """List response for get dataSet references.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.DataAssetReference]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[DataAssetReference]"},
    }

    def __init__(self, *, value: List["_models.DataAssetReference"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.DataAssetReference]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataAssetReferencePlaceholderInfo(_serialization.Model):
    """Placeholder information for a data asset reference.

    All required parameters must be populated in order to send to Azure.

    :ivar assigner_id: Participant id who is allowed to assign the placeholder. Required.
    :vartype assigner_id: str
    :ivar description: Description of the placeholder.
    :vartype description: str
    :ivar display_name: Display name of the placeholder. Required.
    :vartype display_name: str
    """

    _validation = {
        "assigner_id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "assigner_id": {"key": "assignerId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, assigner_id: str, display_name: str, description: Optional[str] = None, **kwargs):
        """
        :keyword assigner_id: Participant id who is allowed to assign the placeholder. Required.
        :paramtype assigner_id: str
        :keyword description: Description of the placeholder.
        :paramtype description: str
        :keyword display_name: Display name of the placeholder. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.assigner_id = assigner_id
        self.description = description
        self.display_name = display_name


class ResourceReference(_serialization.Model):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataAssetResourceReference, DataAssetReferenceResourceReference, ScriptResourceReference,
    ScriptReferenceResourceReference

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of resource reference. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar participant_details: Participant Details of the resource.
    :vartype participant_details:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceParticipantDetails
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    """

    _validation = {
        "kind": {"required": True},
        "participant_details": {"readonly": True},
        "resource_id": {"readonly": True},
        "resource_name": {"readonly": True},
        "resource_type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "participant_details": {"key": "participantDetails", "type": "ResourceReferenceParticipantDetails"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "system_data": {"key": "systemData", "type": "ResourceReferenceSystemData"},
    }

    _subtype_map = {
        "kind": {
            "DataAsset": "DataAssetResourceReference",
            "DataAssetReference": "DataAssetReferenceResourceReference",
            "Script": "ScriptResourceReference",
            "ScriptReference": "ScriptReferenceResourceReference",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.participant_details = None
        self.resource_id = None
        self.resource_name = None
        self.resource_type = None
        self.system_data = None


class DataAssetReferenceResourceReference(ResourceReference):  # pylint: disable=too-many-instance-attributes
    """ResourceReference used to only allow access if the resource is used within the specified Azure dataAssetReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of resource reference. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar participant_details: Participant Details of the resource.
    :vartype participant_details:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceParticipantDetails
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :ivar data_access_type: The data asset reference type. Represents the data access allowed using
     this data in pipeline. Known values are: "ReadOnly" and "WriteOnly".
    :vartype data_access_type: str or ~azure.mgmt.datacollaboration.models.DataAccessType
    :ivar data_asset_id: The unique identifier of the referenced data asset.
    :vartype data_asset_id: str
    :ivar data_asset_reference_id: The unique identifier of the data asset reference.
    :vartype data_asset_reference_id: str
    :ivar description: General Description of the data asset reference.
    :vartype description: str
    :ivar display_name: Reference display name.
    :vartype display_name: str
    """

    _validation = {
        "kind": {"required": True},
        "participant_details": {"readonly": True},
        "resource_id": {"readonly": True},
        "resource_name": {"readonly": True},
        "resource_type": {"readonly": True},
        "system_data": {"readonly": True},
        "data_access_type": {"readonly": True},
        "data_asset_id": {"readonly": True},
        "data_asset_reference_id": {"readonly": True},
        "description": {"readonly": True},
        "display_name": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "participant_details": {"key": "participantDetails", "type": "ResourceReferenceParticipantDetails"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "system_data": {"key": "systemData", "type": "ResourceReferenceSystemData"},
        "data_access_type": {"key": "properties.dataAccessType", "type": "str"},
        "data_asset_id": {"key": "properties.dataAssetId", "type": "str"},
        "data_asset_reference_id": {"key": "properties.dataAssetReferenceId", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "DataAssetReference"  # type: str
        self.data_access_type = None
        self.data_asset_id = None
        self.data_asset_reference_id = None
        self.description = None
        self.display_name = None


class DataAssetResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within the specified Azure dataAsset.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of resource reference. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar participant_details: Participant Details of the resource.
    :vartype participant_details:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceParticipantDetails
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :ivar data_asset_id: The unique identifier of the referenced data asset.
    :vartype data_asset_id: str
    :ivar description: General Description of the data asset reference.
    :vartype description: str
    """

    _validation = {
        "kind": {"required": True},
        "participant_details": {"readonly": True},
        "resource_id": {"readonly": True},
        "resource_name": {"readonly": True},
        "resource_type": {"readonly": True},
        "system_data": {"readonly": True},
        "data_asset_id": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "participant_details": {"key": "participantDetails", "type": "ResourceReferenceParticipantDetails"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "system_data": {"key": "systemData", "type": "ResourceReferenceSystemData"},
        "data_asset_id": {"key": "properties.dataAssetId", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "DataAsset"  # type: str
        self.data_asset_id = None
        self.description = None


class DataCollaborationError(_serialization.Model):
    """The data collaboration error model.

    All required parameters must be populated in order to send to Azure.

    :ivar error: The data share error body. Required.
    :vartype error: ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
    """

    _validation = {
        "error": {"required": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "DataCollaborationErrorInfo"},
    }

    def __init__(self, *, error: "_models.DataCollaborationErrorInfo", **kwargs):
        """
        :keyword error: The data share error body. Required.
        :paramtype error: ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
        """
        super().__init__(**kwargs)
        self.error = error


class DataCollaborationErrorInfo(_serialization.Model):
    """The data collaboration error body model.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Code of the error. Required.
    :vartype code: str
    :ivar details: Nested details of the error model.
    :vartype details: list[~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo]
    :ivar message: Message of the error. Required.
    :vartype message: str
    :ivar target: Target of the error.
    :vartype target: str
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "details": {"key": "details", "type": "[DataCollaborationErrorInfo]"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: Optional[List["_models.DataCollaborationErrorInfo"]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code: Code of the error. Required.
        :paramtype code: str
        :keyword details: Nested details of the error model.
        :paramtype details: list[~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo]
        :keyword message: Message of the error. Required.
        :paramtype message: str
        :keyword target: Target of the error.
        :paramtype target: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.details = details
        self.message = message
        self.target = target


class PipelineSubstep(_serialization.Model):
    """Substep of a pipeline step run.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataMovementPipelineSubstep, DiagnosticsLogPipelineSubstep, ScriptExecutionPipelineSubstep

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Known values are:
     "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling", "Waiting", and "Incomplete".
    :vartype execution_status: str or ~azure.mgmt.datacollaboration.models.ExecutionStatus
    :ivar kind: Kind of pipeline substep. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_substep_id: Id of pipeline substep.
    :vartype pipeline_substep_id: str
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "execution_status": {"readonly": True},
        "kind": {"required": True},
        "pipeline_substep_id": {"readonly": True},
        "start_time": {"readonly": True},
    }

    _attribute_map = {
        "duration_ms": {"key": "durationMs", "type": "int"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "execution_status": {"key": "executionStatus", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
    }

    _subtype_map = {
        "kind": {
            "DataMovement": "DataMovementPipelineSubstep",
            "DiagnosticsLog": "DiagnosticsLogPipelineSubstep",
            "ScriptExecution": "ScriptExecutionPipelineSubstep",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.execution_status = None
        self.kind = None  # type: Optional[str]
        self.pipeline_substep_id = None
        self.start_time = None


class DataMovementPipelineSubstep(PipelineSubstep):  # pylint: disable=too-many-instance-attributes
    """A substep representing copy data activity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Known values are:
     "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling", "Waiting", and "Incomplete".
    :vartype execution_status: str or ~azure.mgmt.datacollaboration.models.ExecutionStatus
    :ivar kind: Kind of pipeline substep. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_substep_id: Id of pipeline substep.
    :vartype pipeline_substep_id: str
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    :ivar data_movement_execution_stage: The stage of data movement. Known values are: "Input" and
     "Output".
    :vartype data_movement_execution_stage: str or
     ~azure.mgmt.datacollaboration.models.DataMovementExecutionStage
    :ivar data_set_category: The category of the source dataset.
    :vartype data_set_category: str
    :ivar data_set_name: The name of the source dataset.
    :vartype data_set_name: str
    :ivar data_set_type: The type of the source dataset.
    :vartype data_set_type: str
    :ivar number_of_files: Number of files written to sink.
    :vartype number_of_files: int
    :ivar resource_id: The resource id of the dataset.
    :vartype resource_id: str
    :ivar source: The sub-step that is the source of data.
    :vartype source: ~azure.mgmt.datacollaboration.models.SubstepReference
    :ivar total_bytes: Total size (in bytes) read from the source.
    :vartype total_bytes: int
    """

    _validation = {
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "execution_status": {"readonly": True},
        "kind": {"required": True},
        "pipeline_substep_id": {"readonly": True},
        "start_time": {"readonly": True},
        "data_movement_execution_stage": {"readonly": True},
        "data_set_category": {"readonly": True},
        "data_set_name": {"readonly": True},
        "data_set_type": {"readonly": True},
        "number_of_files": {"readonly": True},
        "resource_id": {"readonly": True},
        "total_bytes": {"readonly": True},
    }

    _attribute_map = {
        "duration_ms": {"key": "durationMs", "type": "int"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "execution_status": {"key": "executionStatus", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "data_movement_execution_stage": {"key": "dataMovementExecutionStage", "type": "str"},
        "data_set_category": {"key": "dataSetCategory", "type": "str"},
        "data_set_name": {"key": "dataSetName", "type": "str"},
        "data_set_type": {"key": "dataSetType", "type": "str"},
        "number_of_files": {"key": "numberOfFiles", "type": "int"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "source": {"key": "source", "type": "SubstepReference"},
        "total_bytes": {"key": "totalBytes", "type": "int"},
    }

    def __init__(self, *, source: Optional["_models.SubstepReference"] = None, **kwargs):
        """
        :keyword source: The sub-step that is the source of data.
        :paramtype source: ~azure.mgmt.datacollaboration.models.SubstepReference
        """
        super().__init__(**kwargs)
        self.kind = "DataMovement"  # type: str
        self.data_movement_execution_stage = None
        self.data_set_category = None
        self.data_set_name = None
        self.data_set_type = None
        self.number_of_files = None
        self.resource_id = None
        self.source = source
        self.total_bytes = None


class SubstepReference(_serialization.Model):
    """A reference to a sub-step.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataMovementSubstepReference, ScriptExecutionSubstepReference

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of substep reference. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_step_name: The name of the Pipeline Step Run which contains the referred
     sub-step.
    :vartype pipeline_step_name: str
    :ivar pipeline_substep_id: The Id of the Sub-step.
    :vartype pipeline_substep_id: str
    """

    _validation = {
        "kind": {"required": True},
        "pipeline_step_name": {"readonly": True},
        "pipeline_substep_id": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "pipeline_step_name": {"key": "pipelineStepName", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
    }

    _subtype_map = {
        "kind": {"DataMovement": "DataMovementSubstepReference", "ScriptExecution": "ScriptExecutionSubstepReference"}
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.pipeline_step_name = None
        self.pipeline_substep_id = None


class DataMovementSubstepReference(SubstepReference):
    """A reference to a data movement sub-step.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of substep reference. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_step_name: The name of the Pipeline Step Run which contains the referred
     sub-step.
    :vartype pipeline_step_name: str
    :ivar pipeline_substep_id: The Id of the Sub-step.
    :vartype pipeline_substep_id: str
    """

    _validation = {
        "kind": {"required": True},
        "pipeline_step_name": {"readonly": True},
        "pipeline_substep_id": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "pipeline_step_name": {"key": "pipelineStepName", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "DataMovement"  # type: str


class DataSetList(_serialization.Model):
    """List response for get data assets.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.DataSet]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[DataSet]"},
    }

    def __init__(self, *, value: List["_models.DataSet"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.DataSet]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScriptParameterValidationRule(_serialization.Model):
    """Script Parameter validation rule definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DateTimeOptionsSetScriptParameterRule, DateTimeRangeScriptParameterRule,
    FloatOptionsSetScriptParameterRule, FloatRangeScriptParameterRule,
    IntegerOptionsSetScriptParameterRule, IntegerRangeScriptParameterRule,
    RegularExpressionScriptParameterRule, StringLengthRangeScriptParameterRule,
    StringOptionsSetScriptParameterRule

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
    }

    _subtype_map = {
        "script_parameter_validation_rule_type": {
            "DateTimeOptionsSet": "DateTimeOptionsSetScriptParameterRule",
            "DateTimeRange": "DateTimeRangeScriptParameterRule",
            "FloatOptionsSet": "FloatOptionsSetScriptParameterRule",
            "FloatRange": "FloatRangeScriptParameterRule",
            "IntegerOptionsSet": "IntegerOptionsSetScriptParameterRule",
            "IntegerRange": "IntegerRangeScriptParameterRule",
            "RegularExpression": "RegularExpressionScriptParameterRule",
            "StringLengthRange": "StringLengthRangeScriptParameterRule",
            "StringOptionsSet": "StringOptionsSetScriptParameterRule",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = None  # type: Optional[str]


class DateTimeOptionsSetScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter DateTime Options Set validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar options: Defines a set of value options for the parameter. Required.
    :vartype options: list[~datetime.datetime]
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
        "options": {"required": True, "unique": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "options": {"key": "options", "type": "[iso-8601]"},
    }

    def __init__(self, *, options: List[datetime.datetime], **kwargs):
        """
        :keyword options: Defines a set of value options for the parameter. Required.
        :paramtype options: list[~datetime.datetime]
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "DateTimeOptionsSet"  # type: str
        self.options = options


class DateTimePipelineRunParameterAssignment(PipelineRunParameterAssignment):
    """Pipeline run DateTime parameter assignment.

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    :ivar value: Parameter value. Required.
    :vartype value: ~datetime.datetime
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "value": {"key": "value", "type": "iso-8601"},
    }

    def __init__(self, *, pipeline_parameter_id: str, value: datetime.datetime, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        :keyword value: Parameter value. Required.
        :paramtype value: ~datetime.datetime
        """
        super().__init__(pipeline_parameter_id=pipeline_parameter_id, **kwargs)
        self.parameter_type = "DateTime"  # type: str
        self.value = value


class DateTimeRangeScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter DateTime range validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar maximum_value: Defines maximum value for the parameter.
    :vartype maximum_value: ~datetime.datetime
    :ivar minimum_value: Defines minimum value for the parameter.
    :vartype minimum_value: ~datetime.datetime
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "maximum_value": {"key": "maximumValue", "type": "iso-8601"},
        "minimum_value": {"key": "minimumValue", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        maximum_value: Optional[datetime.datetime] = None,
        minimum_value: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword maximum_value: Defines maximum value for the parameter.
        :paramtype maximum_value: ~datetime.datetime
        :keyword minimum_value: Defines minimum value for the parameter.
        :paramtype minimum_value: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "DateTimeRange"  # type: str
        self.maximum_value = maximum_value
        self.minimum_value = minimum_value


class DateTimeScriptParameter(ScriptParameter):
    """Script parameter of type datetime.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar default_value: Default parameter value.
    :vartype default_value: ~datetime.datetime
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameter_id: Optional[str] = None,
        default_value: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: ~datetime.datetime
        """
        super().__init__(description=description, name=name, parameter_id=parameter_id, **kwargs)
        self.parameter_type = "DateTime"  # type: str
        self.default_value = default_value


class DefaultDto(ProxyDto):
    """Base data transfer object implementation for default resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar location: Location of the azure resource.
    :vartype location: str
    :ivar tags: Tags on the azure resource.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, location: Optional[str] = None, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword location: Location of the azure resource.
        :paramtype location: str
        :keyword tags: Tags on the azure resource.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.location = location
        self.tags = tags


class Policy(ProxyDto):
    """Policy for entitlement.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DiagnosticPolicy, OutputPolicy

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of policy. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"DiagnosticLevel": "DiagnosticPolicy", "Output": "OutputPolicy"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class DiagnosticPolicy(Policy):
    """A diagnostic policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of policy. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar description: Description of the policy.
    :vartype description: str
    :ivar log_level: The policy log level. Required. Known values are: "Verbose", "Information",
     "Warning", "Error", and "Critical".
    :vartype log_level: str or ~azure.mgmt.datacollaboration.models.LogLevel
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "log_level": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "log_level": {"key": "properties.logLevel", "type": "str"},
    }

    def __init__(self, *, log_level: Union[str, "_models.LogLevel"], description: Optional[str] = None, **kwargs):
        """
        :keyword description: Description of the policy.
        :paramtype description: str
        :keyword log_level: The policy log level. Required. Known values are: "Verbose", "Information",
         "Warning", "Error", and "Critical".
        :paramtype log_level: str or ~azure.mgmt.datacollaboration.models.LogLevel
        """
        super().__init__(**kwargs)
        self.kind = "DiagnosticLevel"  # type: str
        self.description = description
        self.log_level = log_level


class DiagnosticsLog(_serialization.Model):
    """Base class for diagnostics log.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DiagnosticsConsoleLog, DiagnosticsEventLog

    All required parameters must be populated in order to send to Azure.

    :ivar data_asset_id: The data asset Id. Required.
    :vartype data_asset_id: str
    :ivar kind: Kind of diagnostics log. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "data_asset_id": {"required": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "data_asset_id": {"key": "dataAssetId", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"ConsoleLog": "DiagnosticsConsoleLog", "EventLog": "DiagnosticsEventLog"}}

    def __init__(self, *, data_asset_id: str, **kwargs):
        """
        :keyword data_asset_id: The data asset Id. Required.
        :paramtype data_asset_id: str
        """
        super().__init__(**kwargs)
        self.data_asset_id = data_asset_id
        self.kind = None  # type: Optional[str]


class DiagnosticsConsoleLog(DiagnosticsLog):
    """Diagnostics console log.

    All required parameters must be populated in order to send to Azure.

    :ivar data_asset_id: The data asset Id. Required.
    :vartype data_asset_id: str
    :ivar kind: Kind of diagnostics log. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "data_asset_id": {"required": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "data_asset_id": {"key": "dataAssetId", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, data_asset_id: str, **kwargs):
        """
        :keyword data_asset_id: The data asset Id. Required.
        :paramtype data_asset_id: str
        """
        super().__init__(data_asset_id=data_asset_id, **kwargs)
        self.kind = "ConsoleLog"  # type: str


class DiagnosticsEventLog(DiagnosticsLog):
    """Diagnostics event log.

    All required parameters must be populated in order to send to Azure.

    :ivar data_asset_id: The data asset Id. Required.
    :vartype data_asset_id: str
    :ivar kind: Kind of diagnostics log. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "data_asset_id": {"required": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "data_asset_id": {"key": "dataAssetId", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, data_asset_id: str, **kwargs):
        """
        :keyword data_asset_id: The data asset Id. Required.
        :paramtype data_asset_id: str
        """
        super().__init__(data_asset_id=data_asset_id, **kwargs)
        self.kind = "EventLog"  # type: str


class DiagnosticsLogPipelineSubstep(PipelineSubstep):  # pylint: disable=too-many-instance-attributes
    """A substep representing copy data activity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Known values are:
     "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling", "Waiting", and "Incomplete".
    :vartype execution_status: str or ~azure.mgmt.datacollaboration.models.ExecutionStatus
    :ivar kind: Kind of pipeline substep. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_substep_id: Id of pipeline substep.
    :vartype pipeline_substep_id: str
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    :ivar data_set_category: The category of the dataset.
    :vartype data_set_category: str
    :ivar data_set_name: The name of the dataset.
    :vartype data_set_name: str
    :ivar data_set_type: The type of the dataset.
    :vartype data_set_type: str
    :ivar diagnostics_log_type: The type of the diagnostics log.
    :vartype diagnostics_log_type: str
    :ivar number_of_files: Number of files written to dataset.
    :vartype number_of_files: int
    :ivar resource_id: The resource id of the dataset.
    :vartype resource_id: str
    :ivar total_bytes: Total size (in bytes) read from the logs.
    :vartype total_bytes: int
    """

    _validation = {
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "execution_status": {"readonly": True},
        "kind": {"required": True},
        "pipeline_substep_id": {"readonly": True},
        "start_time": {"readonly": True},
        "data_set_category": {"readonly": True},
        "data_set_name": {"readonly": True},
        "data_set_type": {"readonly": True},
        "diagnostics_log_type": {"readonly": True},
        "number_of_files": {"readonly": True},
        "resource_id": {"readonly": True},
        "total_bytes": {"readonly": True},
    }

    _attribute_map = {
        "duration_ms": {"key": "durationMs", "type": "int"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "execution_status": {"key": "executionStatus", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "data_set_category": {"key": "dataSetCategory", "type": "str"},
        "data_set_name": {"key": "dataSetName", "type": "str"},
        "data_set_type": {"key": "dataSetType", "type": "str"},
        "diagnostics_log_type": {"key": "diagnosticsLogType", "type": "str"},
        "number_of_files": {"key": "numberOfFiles", "type": "int"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "total_bytes": {"key": "totalBytes", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "DiagnosticsLog"  # type: str
        self.data_set_category = None
        self.data_set_name = None
        self.data_set_type = None
        self.diagnostics_log_type = None
        self.number_of_files = None
        self.resource_id = None
        self.total_bytes = None


class DimensionProperties(_serialization.Model):
    """properties for dimension.

    :ivar display_name: localized display name of the dimension to customer.
    :vartype display_name: str
    :ivar name: dimension name.
    :vartype name: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, name: Optional[str] = None, **kwargs):
        """
        :keyword display_name: localized display name of the dimension to customer.
        :paramtype display_name: str
        :keyword name: dimension name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.name = name


class Entitlement(ProxyDto):
    """Grants access to another shared resource in the same proposal, with optional constraints and policies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar description: Textual description of the entitlement.
    :vartype description: str
    :ivar resource_id: The unique identifier of the resource of the entitlement.
     Must be a reference resource from the same proposal. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of resourced used by the entitlement. Required. Known values are:
     "DataAssetReference", "ScriptReference", and "VirtualOutputReference".
    :vartype resource_type: str or ~azure.mgmt.datacollaboration.models.ResourceType
    :ivar subject_id: The unique identifier of the subject of the entitlement.
     The subject must be a participant in the same proposal. Required.
    :vartype subject_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "resource_id": {"required": True},
        "resource_type": {"required": True},
        "subject_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "resource_id": {"key": "properties.resourceId", "type": "str"},
        "resource_type": {"key": "properties.resourceType", "type": "str"},
        "subject_id": {"key": "properties.subjectId", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        resource_type: Union[str, "_models.ResourceType"],
        subject_id: str,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Textual description of the entitlement.
        :paramtype description: str
        :keyword resource_id: The unique identifier of the resource of the entitlement.
         Must be a reference resource from the same proposal. Required.
        :paramtype resource_id: str
        :keyword resource_type: The type of resourced used by the entitlement. Required. Known values
         are: "DataAssetReference", "ScriptReference", and "VirtualOutputReference".
        :paramtype resource_type: str or ~azure.mgmt.datacollaboration.models.ResourceType
        :keyword subject_id: The unique identifier of the subject of the entitlement.
         The subject must be a participant in the same proposal. Required.
        :paramtype subject_id: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.subject_id = subject_id


class EntitlementList(_serialization.Model):
    """List response for get Entitlements.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Entitlement]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Entitlement]"},
    }

    def __init__(self, *, value: List["_models.Entitlement"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Entitlement]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class FloatOptionsSetScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter Float Options Set validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar options: Defines a set of value options for the parameter. Required.
    :vartype options: list[float]
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
        "options": {"required": True, "unique": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "options": {"key": "options", "type": "[float]"},
    }

    def __init__(self, *, options: List[float], **kwargs):
        """
        :keyword options: Defines a set of value options for the parameter. Required.
        :paramtype options: list[float]
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "FloatOptionsSet"  # type: str
        self.options = options


class FloatPipelineRunParameterAssignment(PipelineRunParameterAssignment):
    """Pipeline run float parameter assignment.

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    :ivar value: Parameter value. Required.
    :vartype value: float
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "value": {"key": "value", "type": "float"},
    }

    def __init__(self, *, pipeline_parameter_id: str, value: float, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        :keyword value: Parameter value. Required.
        :paramtype value: float
        """
        super().__init__(pipeline_parameter_id=pipeline_parameter_id, **kwargs)
        self.parameter_type = "Float"  # type: str
        self.value = value


class FloatRangeScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter float range validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar maximum_value: Defines maximum value for the parameter.
    :vartype maximum_value: float
    :ivar minimum_value: Defines minimum value for the parameter.
    :vartype minimum_value: float
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "maximum_value": {"key": "maximumValue", "type": "float"},
        "minimum_value": {"key": "minimumValue", "type": "float"},
    }

    def __init__(self, *, maximum_value: Optional[float] = None, minimum_value: Optional[float] = None, **kwargs):
        """
        :keyword maximum_value: Defines maximum value for the parameter.
        :paramtype maximum_value: float
        :keyword minimum_value: Defines minimum value for the parameter.
        :paramtype minimum_value: float
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "FloatRange"  # type: str
        self.maximum_value = maximum_value
        self.minimum_value = minimum_value


class FloatScriptParameter(ScriptParameter):
    """Script parameter of type float.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar default_value: Default parameter value.
    :vartype default_value: float
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "float"},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameter_id: Optional[str] = None,
        default_value: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: float
        """
        super().__init__(description=description, name=name, parameter_id=parameter_id, **kwargs)
        self.parameter_type = "Float"  # type: str
        self.default_value = default_value


class Identity(_serialization.Model):
    """Identity of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: service principal Id.
    :vartype principal_id: str
    :ivar tenant_id: Tenant Id.
    :vartype tenant_id: str
    :ivar type: Identity Type. "SystemAssigned"
    :vartype type: str or ~azure.mgmt.datacollaboration.models.Type
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Optional[Union[str, "_models.Type"]] = None, **kwargs):
        """
        :keyword type: Identity Type. "SystemAssigned"
        :paramtype type: str or ~azure.mgmt.datacollaboration.models.Type
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type


class IntegerOptionsSetScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter Integer Options Set validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar options: Defines a set of value options for the parameter. Required.
    :vartype options: list[int]
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
        "options": {"required": True, "unique": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "options": {"key": "options", "type": "[int]"},
    }

    def __init__(self, *, options: List[int], **kwargs):
        """
        :keyword options: Defines a set of value options for the parameter. Required.
        :paramtype options: list[int]
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "IntegerOptionsSet"  # type: str
        self.options = options


class IntegerPipelineRunParameterAssignment(PipelineRunParameterAssignment):
    """Pipeline run integer parameter assignment.

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    :ivar value: Parameter value. Required.
    :vartype value: int
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "value": {"key": "value", "type": "int"},
    }

    def __init__(self, *, pipeline_parameter_id: str, value: int, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        :keyword value: Parameter value. Required.
        :paramtype value: int
        """
        super().__init__(pipeline_parameter_id=pipeline_parameter_id, **kwargs)
        self.parameter_type = "Integer"  # type: str
        self.value = value


class IntegerRangeScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter integer range validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar maximum_value: Defines maximum value for the parameter.
    :vartype maximum_value: int
    :ivar minimum_value: Defines minimum value for the parameter.
    :vartype minimum_value: int
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "maximum_value": {"key": "maximumValue", "type": "int"},
        "minimum_value": {"key": "minimumValue", "type": "int"},
    }

    def __init__(self, *, maximum_value: Optional[int] = None, minimum_value: Optional[int] = None, **kwargs):
        """
        :keyword maximum_value: Defines maximum value for the parameter.
        :paramtype maximum_value: int
        :keyword minimum_value: Defines minimum value for the parameter.
        :paramtype minimum_value: int
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "IntegerRange"  # type: str
        self.maximum_value = maximum_value
        self.minimum_value = minimum_value


class IntegerScriptParameter(ScriptParameter):
    """Script parameter of type integer.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar default_value: Default parameter value.
    :vartype default_value: int
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameter_id: Optional[str] = None,
        default_value: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: int
        """
        super().__init__(description=description, name=name, parameter_id=parameter_id, **kwargs)
        self.parameter_type = "Integer"  # type: str
        self.default_value = default_value


class Invitation(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """Invitation to participate in a shared proposal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar invitation_id: unique invitation id.
    :vartype invitation_id: str
    :ivar invitation_status: The status of the invitation. Known values are: "Pending", "Rejected",
     and "Accepted".
    :vartype invitation_status: str or ~azure.mgmt.datacollaboration.models.InvitationStatus
    :ivar participant_placeholder_id: The participant placeholder Id which this invitation is meant
     to assign.
    :vartype participant_placeholder_id: str
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: ~datetime.datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: ~datetime.datetime
    :ivar target_active_directory_id: The target Azure AD Id. Can't be combined with email.
    :vartype target_active_directory_id: str
    :ivar target_email: The email the invitation is directed to.
    :vartype target_email: str
    :ivar target_object_id: The target user or application Id that invitation is being sent to.
     Must be specified along TargetActiveDirectoryId. This enables sending
     invitations to specific users or applications in an AD tenant.
    :vartype target_object_id: str
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "invitation_id": {"readonly": True},
        "invitation_status": {"readonly": True},
        "responded_at": {"readonly": True},
        "sent_at": {"readonly": True},
        "user_email": {"readonly": True},
        "user_name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "invitation_id": {"key": "properties.invitationId", "type": "str"},
        "invitation_status": {"key": "properties.invitationStatus", "type": "str"},
        "participant_placeholder_id": {"key": "properties.participantPlaceholderId", "type": "str"},
        "responded_at": {"key": "properties.respondedAt", "type": "iso-8601"},
        "sent_at": {"key": "properties.sentAt", "type": "iso-8601"},
        "target_active_directory_id": {"key": "properties.targetActiveDirectoryId", "type": "str"},
        "target_email": {"key": "properties.targetEmail", "type": "str"},
        "target_object_id": {"key": "properties.targetObjectId", "type": "str"},
        "user_email": {"key": "properties.userEmail", "type": "str"},
        "user_name": {"key": "properties.userName", "type": "str"},
    }

    def __init__(
        self,
        *,
        participant_placeholder_id: Optional[str] = None,
        target_active_directory_id: Optional[str] = None,
        target_email: Optional[str] = None,
        target_object_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword participant_placeholder_id: The participant placeholder Id which this invitation is
         meant to assign.
        :paramtype participant_placeholder_id: str
        :keyword target_active_directory_id: The target Azure AD Id. Can't be combined with email.
        :paramtype target_active_directory_id: str
        :keyword target_email: The email the invitation is directed to.
        :paramtype target_email: str
        :keyword target_object_id: The target user or application Id that invitation is being sent to.
         Must be specified along TargetActiveDirectoryId. This enables sending
         invitations to specific users or applications in an AD tenant.
        :paramtype target_object_id: str
        """
        super().__init__(**kwargs)
        self.invitation_id = None
        self.invitation_status = None
        self.participant_placeholder_id = participant_placeholder_id
        self.responded_at = None
        self.sent_at = None
        self.target_active_directory_id = target_active_directory_id
        self.target_email = target_email
        self.target_object_id = target_object_id
        self.user_email = None
        self.user_name = None


class InvitationList(_serialization.Model):
    """List response for get InvitationList.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Invitation]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Invitation]"},
    }

    def __init__(self, *, value: List["_models.Invitation"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Invitation]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class LocationConstraint(Constraint):
    """Constraint used to only allow access if the resource is used within the specified Azure location.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constraint. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar description: Description of the constraint.
    :vartype description: str
    :ivar location: Location of the Azure resource (e.g. West US 2). Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "location": {"key": "properties.location", "type": "str"},
    }

    def __init__(self, *, location: str, description: Optional[str] = None, **kwargs):
        """
        :keyword description: Description of the constraint.
        :paramtype description: str
        :keyword location: Location of the Azure resource (e.g. West US 2). Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.kind = "Location"  # type: str
        self.description = description
        self.location = location


class ManagedPrivateEndpoint(ProxyDto):
    """Private endpoint on the service managed virtual network.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar additional_properties: Additional endpoint properties.
    :vartype additional_properties: dict[str, JSON]
    :ivar connection_state: Connection state of the Managed Private Endpoint.
    :vartype connection_state:
     ~azure.mgmt.datacollaboration.models.ManagedPrivateEndpointPropertiesConnectionState
    :ivar group_id: The type of endpoint on the linked resource. Required. Known values are:
     "blob", "blob_secondary", "dfs", and "dfs_secondary".
    :vartype group_id: str or ~azure.mgmt.datacollaboration.models.GroupId
    :ivar private_link_resource_id: The Azure id of the linked resource. Required.
    :vartype private_link_resource_id: str
    :ivar provisioning_state: Provisioning state of the Managed Private Endpoint. Known values are:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "additional_properties": {"readonly": True},
        "connection_state": {"readonly": True},
        "group_id": {"required": True},
        "private_link_resource_id": {"required": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "additional_properties": {"key": "properties.additionalProperties", "type": "{object}"},
        "connection_state": {
            "key": "properties.connectionState",
            "type": "ManagedPrivateEndpointPropertiesConnectionState",
        },
        "group_id": {"key": "properties.groupId", "type": "str"},
        "private_link_resource_id": {"key": "properties.privateLinkResourceId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(self, *, group_id: Union[str, "_models.GroupId"], private_link_resource_id: str, **kwargs):
        """
        :keyword group_id: The type of endpoint on the linked resource. Required. Known values are:
         "blob", "blob_secondary", "dfs", and "dfs_secondary".
        :paramtype group_id: str or ~azure.mgmt.datacollaboration.models.GroupId
        :keyword private_link_resource_id: The Azure id of the linked resource. Required.
        :paramtype private_link_resource_id: str
        """
        super().__init__(**kwargs)
        self.additional_properties = None
        self.connection_state = None
        self.group_id = group_id
        self.private_link_resource_id = private_link_resource_id
        self.provisioning_state = None


class ManagedPrivateEndpointList(_serialization.Model):
    """List response for get ManagedPrivateEndpointList.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.ManagedPrivateEndpoint]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ManagedPrivateEndpoint]"},
    }

    def __init__(self, *, value: List["_models.ManagedPrivateEndpoint"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.ManagedPrivateEndpoint]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PrivateEndpointConnectionState(_serialization.Model):
    """The connection state of a managed private endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar actions_required: The actions required on the managed private endpoint.
    :vartype actions_required: str
    :ivar description: The managed private endpoint description.
    :vartype description: str
    :ivar private_endpoint_status: The approval status. Known values are: "Pending", "Approved",
     "Rejected", and "Disconnected".
    :vartype private_endpoint_status: str or
     ~azure.mgmt.datacollaboration.models.PrivateEndpointStatus
    """

    _validation = {
        "actions_required": {"readonly": True},
        "description": {"readonly": True},
        "private_endpoint_status": {"readonly": True},
    }

    _attribute_map = {
        "actions_required": {"key": "actionsRequired", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "private_endpoint_status": {"key": "privateEndpointStatus", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.actions_required = None
        self.description = None
        self.private_endpoint_status = None


class ManagedPrivateEndpointPropertiesConnectionState(PrivateEndpointConnectionState):
    """Connection state of the Managed Private Endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar actions_required: The actions required on the managed private endpoint.
    :vartype actions_required: str
    :ivar description: The managed private endpoint description.
    :vartype description: str
    :ivar private_endpoint_status: The approval status. Known values are: "Pending", "Approved",
     "Rejected", and "Disconnected".
    :vartype private_endpoint_status: str or
     ~azure.mgmt.datacollaboration.models.PrivateEndpointStatus
    """

    _validation = {
        "actions_required": {"readonly": True},
        "description": {"readonly": True},
        "private_endpoint_status": {"readonly": True},
    }

    _attribute_map = {
        "actions_required": {"key": "actionsRequired", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "private_endpoint_status": {"key": "privateEndpointStatus", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)


class OperationList(_serialization.Model):
    """List response for get operations.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.OperationModel]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[OperationModel]"},
    }

    def __init__(self, *, value: List["_models.OperationModel"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.OperationModel]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class OperationMetaLogSpecification(_serialization.Model):
    """log specifications for operation api.

    :ivar blob_duration: blob duration of the log.
    :vartype blob_duration: str
    :ivar display_name: localized name of the log category.
    :vartype display_name: str
    :ivar name: name of the log category.
    :vartype name: str
    """

    _attribute_map = {
        "blob_duration": {"key": "blobDuration", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        blob_duration: Optional[str] = None,
        display_name: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword blob_duration: blob duration of the log.
        :paramtype blob_duration: str
        :keyword display_name: localized name of the log category.
        :paramtype display_name: str
        :keyword name: name of the log category.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.blob_duration = blob_duration
        self.display_name = display_name
        self.name = name


class OperationMetaMetricSpecification(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """metric specifications for the operation.

    :ivar aggregation_type: aggregation type of metric.
    :vartype aggregation_type: str
    :ivar dimensions: properties for dimension.
    :vartype dimensions: list[~azure.mgmt.datacollaboration.models.DimensionProperties]
    :ivar display_description: description of the metric.
    :vartype display_description: str
    :ivar display_name: localized name of the metric.
    :vartype display_name: str
    :ivar enable_regional_mdm_account: enable regional mdm account.
    :vartype enable_regional_mdm_account: str
    :ivar fill_gap_with_zero: fill gap with zero.
    :vartype fill_gap_with_zero: str
    :ivar internal_metric_name: internal metric name.
    :vartype internal_metric_name: str
    :ivar name: name of the metric.
    :vartype name: str
    :ivar resource_id_dimension_name_override: dimension name use to replace resource id if
     specified.
    :vartype resource_id_dimension_name_override: str
    :ivar supported_aggregation_types: supported aggregation types.
    :vartype supported_aggregation_types: list[str]
    :ivar supported_time_grain_types: supported time grain types.
    :vartype supported_time_grain_types: list[str]
    :ivar unit: units for the metric.
    :vartype unit: str
    """

    _attribute_map = {
        "aggregation_type": {"key": "aggregationType", "type": "str"},
        "dimensions": {"key": "dimensions", "type": "[DimensionProperties]"},
        "display_description": {"key": "displayDescription", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "enable_regional_mdm_account": {"key": "enableRegionalMdmAccount", "type": "str"},
        "fill_gap_with_zero": {"key": "fillGapWithZero", "type": "str"},
        "internal_metric_name": {"key": "internalMetricName", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "resource_id_dimension_name_override": {"key": "resourceIdDimensionNameOverride", "type": "str"},
        "supported_aggregation_types": {"key": "supportedAggregationTypes", "type": "[str]"},
        "supported_time_grain_types": {"key": "supportedTimeGrainTypes", "type": "[str]"},
        "unit": {"key": "unit", "type": "str"},
    }

    def __init__(
        self,
        *,
        aggregation_type: Optional[str] = None,
        dimensions: Optional[List["_models.DimensionProperties"]] = None,
        display_description: Optional[str] = None,
        display_name: Optional[str] = None,
        enable_regional_mdm_account: Optional[str] = None,
        fill_gap_with_zero: Optional[str] = None,
        internal_metric_name: Optional[str] = None,
        name: Optional[str] = None,
        resource_id_dimension_name_override: Optional[str] = None,
        supported_aggregation_types: Optional[List[str]] = None,
        supported_time_grain_types: Optional[List[str]] = None,
        unit: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword aggregation_type: aggregation type of metric.
        :paramtype aggregation_type: str
        :keyword dimensions: properties for dimension.
        :paramtype dimensions: list[~azure.mgmt.datacollaboration.models.DimensionProperties]
        :keyword display_description: description of the metric.
        :paramtype display_description: str
        :keyword display_name: localized name of the metric.
        :paramtype display_name: str
        :keyword enable_regional_mdm_account: enable regional mdm account.
        :paramtype enable_regional_mdm_account: str
        :keyword fill_gap_with_zero: fill gap with zero.
        :paramtype fill_gap_with_zero: str
        :keyword internal_metric_name: internal metric name.
        :paramtype internal_metric_name: str
        :keyword name: name of the metric.
        :paramtype name: str
        :keyword resource_id_dimension_name_override: dimension name use to replace resource id if
         specified.
        :paramtype resource_id_dimension_name_override: str
        :keyword supported_aggregation_types: supported aggregation types.
        :paramtype supported_aggregation_types: list[str]
        :keyword supported_time_grain_types: supported time grain types.
        :paramtype supported_time_grain_types: list[str]
        :keyword unit: units for the metric.
        :paramtype unit: str
        """
        super().__init__(**kwargs)
        self.aggregation_type = aggregation_type
        self.dimensions = dimensions
        self.display_description = display_description
        self.display_name = display_name
        self.enable_regional_mdm_account = enable_regional_mdm_account
        self.fill_gap_with_zero = fill_gap_with_zero
        self.internal_metric_name = internal_metric_name
        self.name = name
        self.resource_id_dimension_name_override = resource_id_dimension_name_override
        self.supported_aggregation_types = supported_aggregation_types
        self.supported_time_grain_types = supported_time_grain_types
        self.unit = unit


class OperationMetaServiceSpecification(_serialization.Model):
    """The operation meta service specification.

    :ivar log_specifications: log specifications for the operation.
    :vartype log_specifications:
     list[~azure.mgmt.datacollaboration.models.OperationMetaLogSpecification]
    :ivar metric_specifications: metric specifications for the operation.
    :vartype metric_specifications:
     list[~azure.mgmt.datacollaboration.models.OperationMetaMetricSpecification]
    """

    _attribute_map = {
        "log_specifications": {"key": "logSpecifications", "type": "[OperationMetaLogSpecification]"},
        "metric_specifications": {"key": "metricSpecifications", "type": "[OperationMetaMetricSpecification]"},
    }

    def __init__(
        self,
        *,
        log_specifications: Optional[List["_models.OperationMetaLogSpecification"]] = None,
        metric_specifications: Optional[List["_models.OperationMetaMetricSpecification"]] = None,
        **kwargs
    ):
        """
        :keyword log_specifications: log specifications for the operation.
        :paramtype log_specifications:
         list[~azure.mgmt.datacollaboration.models.OperationMetaLogSpecification]
        :keyword metric_specifications: metric specifications for the operation.
        :paramtype metric_specifications:
         list[~azure.mgmt.datacollaboration.models.OperationMetaMetricSpecification]
        """
        super().__init__(**kwargs)
        self.log_specifications = log_specifications
        self.metric_specifications = metric_specifications


class OperationModel(_serialization.Model):
    """The response model for get operations.

    :ivar display: Properties on the operation.
    :vartype display: ~azure.mgmt.datacollaboration.models.OperationModelProperties
    :ivar is_data_action: Determines whether an operation is done on the data-layer or not.
    :vartype is_data_action: bool
    :ivar name: Operation name for display purposes.
    :vartype name: str
    :ivar origin: origin of the operation.
    :vartype origin: str
    :ivar service_specification: meta service specification.
    :vartype service_specification:
     ~azure.mgmt.datacollaboration.models.OperationMetaServiceSpecification
    """

    _attribute_map = {
        "display": {"key": "display", "type": "OperationModelProperties"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "name": {"key": "name", "type": "str"},
        "origin": {"key": "origin", "type": "str"},
        "service_specification": {
            "key": "properties.serviceSpecification",
            "type": "OperationMetaServiceSpecification",
        },
    }

    def __init__(
        self,
        *,
        display: Optional["_models.OperationModelProperties"] = None,
        is_data_action: Optional[bool] = None,
        name: Optional[str] = None,
        origin: Optional[str] = None,
        service_specification: Optional["_models.OperationMetaServiceSpecification"] = None,
        **kwargs
    ):
        """
        :keyword display: Properties on the operation.
        :paramtype display: ~azure.mgmt.datacollaboration.models.OperationModelProperties
        :keyword is_data_action: Determines whether an operation is done on the data-layer or not.
        :paramtype is_data_action: bool
        :keyword name: Operation name for display purposes.
        :paramtype name: str
        :keyword origin: origin of the operation.
        :paramtype origin: str
        :keyword service_specification: meta service specification.
        :paramtype service_specification:
         ~azure.mgmt.datacollaboration.models.OperationMetaServiceSpecification
        """
        super().__init__(**kwargs)
        self.display = display
        self.is_data_action = is_data_action
        self.name = name
        self.origin = origin
        self.service_specification = service_specification


class OperationModelProperties(_serialization.Model):
    """Properties on operations.

    :ivar description: Description of the operation for display purposes.
    :vartype description: str
    :ivar operation: Name of the operation for display purposes.
    :vartype operation: str
    :ivar provider: Name of the provider for display purposes.
    :vartype provider: str
    :ivar resource: Name of the resource type for display purposes.
    :vartype resource: str
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        operation: Optional[str] = None,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the operation for display purposes.
        :paramtype description: str
        :keyword operation: Name of the operation for display purposes.
        :paramtype operation: str
        :keyword provider: Name of the provider for display purposes.
        :paramtype provider: str
        :keyword resource: Name of the resource type for display purposes.
        :paramtype resource: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationResponse(_serialization.Model):
    """Response for long running operation.

    All required parameters must be populated in order to send to Azure.

    :ivar end_time: start time.
    :vartype end_time: ~datetime.datetime
    :ivar error: The error property when status is failed.
    :vartype error: ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
    :ivar start_time: start time.
    :vartype start_time: ~datetime.datetime
    :ivar status: Operation state of the long running operation. Required. Known values are:
     "Accepted", "InProgress", "TransientFailure", "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.mgmt.datacollaboration.models.Status
    """

    _validation = {
        "status": {"required": True},
    }

    _attribute_map = {
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "error": {"key": "error", "type": "DataCollaborationErrorInfo"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.Status"],
        end_time: Optional[datetime.datetime] = None,
        error: Optional["_models.DataCollaborationErrorInfo"] = None,
        start_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword end_time: start time.
        :paramtype end_time: ~datetime.datetime
        :keyword error: The error property when status is failed.
        :paramtype error: ~azure.mgmt.datacollaboration.models.DataCollaborationErrorInfo
        :keyword start_time: start time.
        :paramtype start_time: ~datetime.datetime
        :keyword status: Operation state of the long running operation. Required. Known values are:
         "Accepted", "InProgress", "TransientFailure", "Succeeded", "Failed", and "Canceled".
        :paramtype status: str or ~azure.mgmt.datacollaboration.models.Status
        """
        super().__init__(**kwargs)
        self.end_time = end_time
        self.error = error
        self.start_time = start_time
        self.status = status


class OutputPolicy(Policy):
    """A Output policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of policy. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar applies_to: The name of the sink this policy applies to. If not present the policy
     applies to all sinks.
    :vartype applies_to: str
    :ivar description: Description of the policy.
    :vartype description: str
    :ivar output_name: The name of the virtual reference representing this policy. Required.
    :vartype output_name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "output_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "applies_to": {"key": "properties.appliesTo", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "output_name": {"key": "properties.outputName", "type": "str"},
    }

    def __init__(
        self, *, output_name: str, applies_to: Optional[str] = None, description: Optional[str] = None, **kwargs
    ):
        """
        :keyword applies_to: The name of the sink this policy applies to. If not present the policy
         applies to all sinks.
        :paramtype applies_to: str
        :keyword description: Description of the policy.
        :paramtype description: str
        :keyword output_name: The name of the virtual reference representing this policy. Required.
        :paramtype output_name: str
        """
        super().__init__(**kwargs)
        self.kind = "Output"  # type: str
        self.applies_to = applies_to
        self.description = description
        self.output_name = output_name


class Participant(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """Participant information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar created_at: Time at which the account was created.
    :vartype created_at: ~datetime.datetime
    :ivar display_name: Participant display name.
    :vartype display_name: str
    :ivar participant_id: Unique id for identifying a participant.
    :vartype participant_id: str
    :ivar placeholder_info: The placeholder information.
    :vartype placeholder_info: ~azure.mgmt.datacollaboration.models.ParticipantPlaceholderInfo
    :ivar placeholder_state: The placeholder state. Known values are: "None", "Unassigned", and
     "Assigned".
    :vartype placeholder_state: str or ~azure.mgmt.datacollaboration.models.PlaceholderState
    :ivar proposal_approval_status: Current approval status. Known values are: "Pending",
     "Approved", and "Expired".
    :vartype proposal_approval_status: str or
     ~azure.mgmt.datacollaboration.models.ProposalApprovalStatus
    :ivar tenant_name: Tenant name of the participant.
    :vartype tenant_name: str
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    :ivar workspace_display_name: Display name of the workspace.
    :vartype workspace_display_name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "created_at": {"readonly": True},
        "display_name": {"readonly": True},
        "participant_id": {"readonly": True},
        "placeholder_state": {"readonly": True},
        "proposal_approval_status": {"readonly": True},
        "tenant_name": {"readonly": True},
        "user_email": {"readonly": True},
        "user_name": {"readonly": True},
        "workspace_display_name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "created_at": {"key": "properties.createdAt", "type": "iso-8601"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "participant_id": {"key": "properties.participantId", "type": "str"},
        "placeholder_info": {"key": "properties.placeholderInfo", "type": "ParticipantPlaceholderInfo"},
        "placeholder_state": {"key": "properties.placeholderState", "type": "str"},
        "proposal_approval_status": {"key": "properties.proposalApprovalStatus", "type": "str"},
        "tenant_name": {"key": "properties.tenantName", "type": "str"},
        "user_email": {"key": "properties.userEmail", "type": "str"},
        "user_name": {"key": "properties.userName", "type": "str"},
        "workspace_display_name": {"key": "properties.workspaceDisplayName", "type": "str"},
    }

    def __init__(self, *, placeholder_info: Optional["_models.ParticipantPlaceholderInfo"] = None, **kwargs):
        """
        :keyword placeholder_info: The placeholder information.
        :paramtype placeholder_info: ~azure.mgmt.datacollaboration.models.ParticipantPlaceholderInfo
        """
        super().__init__(**kwargs)
        self.created_at = None
        self.display_name = None
        self.participant_id = None
        self.placeholder_info = placeholder_info
        self.placeholder_state = None
        self.proposal_approval_status = None
        self.tenant_name = None
        self.user_email = None
        self.user_name = None
        self.workspace_display_name = None


class ParticipantDetails(_serialization.Model):
    """A participant details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tenant_name: Tenant name of the participant.
    :vartype tenant_name: str
    :ivar workspace_display_name: Display name of the workspace.
    :vartype workspace_display_name: str
    """

    _validation = {
        "tenant_name": {"readonly": True},
        "workspace_display_name": {"readonly": True},
    }

    _attribute_map = {
        "tenant_name": {"key": "tenantName", "type": "str"},
        "workspace_display_name": {"key": "workspaceDisplayName", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.tenant_name = None
        self.workspace_display_name = None


class ParticipantList(_serialization.Model):
    """List response for get participants.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Participant]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Participant]"},
    }

    def __init__(self, *, value: List["_models.Participant"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Participant]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ParticipantPlaceholderInfo(_serialization.Model):
    """Placeholder information for participant.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of the placeholder.
    :vartype description: str
    :ivar display_name: Display name of the placeholder. Required.
    :vartype display_name: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: str, description: Optional[str] = None, **kwargs):
        """
        :keyword description: Description of the placeholder.
        :paramtype description: str
        :keyword display_name: Display name of the placeholder. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.display_name = display_name


class Pipeline(ProxyDto):
    """A pipeline data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar description: General Description of the pipeline content.
    :vartype description: str
    :ivar pipeline_id: Unique id for identifying a pipeline resource.
    :vartype pipeline_id: str
    :ivar provisioning_state: Provisioning state of the pipeline. Known values are: "Succeeded",
     "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar script_parameters: List of pipeline level script parameters.
    :vartype script_parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "pipeline_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "pipeline_id": {"key": "properties.pipelineId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "script_parameters": {"key": "properties.scriptParameters", "type": "[ScriptParameter]"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        script_parameters: Optional[List["_models.ScriptParameter"]] = None,
        **kwargs
    ):
        """
        :keyword description: General Description of the pipeline content.
        :paramtype description: str
        :keyword script_parameters: List of pipeline level script parameters.
        :paramtype script_parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
        """
        super().__init__(**kwargs)
        self.description = description
        self.pipeline_id = None
        self.provisioning_state = None
        self.script_parameters = script_parameters


class PipelineList(_serialization.Model):
    """List response for get Pipelines.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Pipeline]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Pipeline]"},
    }

    def __init__(self, *, value: List["_models.Pipeline"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Pipeline]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineRun(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """A pipeline run data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar duration_ms: Pipeline run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline run.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar pipeline_id: Object id of the pipeline used to create this run.
    :vartype pipeline_id: str
    :ivar pipeline_name: Name of the pipeline used to create this run.
    :vartype pipeline_name: str
    :ivar pipeline_run_mode: Indicate the pipeline execution mode. Production or Test. Known values
     are: "Production" and "Test".
    :vartype pipeline_run_mode: str or ~azure.mgmt.datacollaboration.models.PipelineRunMode
    :ivar pipeline_run_status: Pipeline run status. Known values are: "Succeeded", "Failed",
     "InProgress", "Preparing", "Queued", "Unknown", "Cancelled", "Canceling", "Waiting", and
     "Incomplete".
    :vartype pipeline_run_status: str or ~azure.mgmt.datacollaboration.models.PipelineRunStatus
    :ivar start_time: Start time of pipeline run.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "pipeline_id": {"readonly": True},
        "pipeline_name": {"readonly": True},
        "pipeline_run_mode": {"readonly": True},
        "pipeline_run_status": {"readonly": True},
        "start_time": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "duration_ms": {"key": "properties.durationMs", "type": "int"},
        "end_time": {"key": "properties.endTime", "type": "iso-8601"},
        "error_message": {"key": "properties.errorMessage", "type": "str"},
        "pipeline_id": {"key": "properties.pipelineId", "type": "str"},
        "pipeline_name": {"key": "properties.pipelineName", "type": "str"},
        "pipeline_run_mode": {"key": "properties.pipelineRunMode", "type": "str"},
        "pipeline_run_status": {"key": "properties.pipelineRunStatus", "type": "str"},
        "start_time": {"key": "properties.startTime", "type": "iso-8601"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_id = None
        self.pipeline_name = None
        self.pipeline_run_mode = None
        self.pipeline_run_status = None
        self.start_time = None


class PipelineRunList(_serialization.Model):
    """List response for get pipeline run.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.PipelineRun]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[PipelineRun]"},
    }

    def __init__(self, *, value: List["_models.PipelineRun"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.PipelineRun]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineRunParameters(_serialization.Model):
    """The parameters for a pipeline run.

    :ivar pipeline_run_mode: Mode of pipeline run used. Known values are: "Production" and "Test".
    :vartype pipeline_run_mode: str or ~azure.mgmt.datacollaboration.models.PipelineRunMode
    :ivar pipeline_run_parameter_assignments: Pipeline run parameters assignments.
    :vartype pipeline_run_parameter_assignments:
     list[~azure.mgmt.datacollaboration.models.PipelineRunParameterAssignment]
    """

    _attribute_map = {
        "pipeline_run_mode": {"key": "pipelineRunMode", "type": "str"},
        "pipeline_run_parameter_assignments": {
            "key": "pipelineRunParameterAssignments",
            "type": "[PipelineRunParameterAssignment]",
        },
    }

    def __init__(
        self,
        *,
        pipeline_run_mode: Optional[Union[str, "_models.PipelineRunMode"]] = None,
        pipeline_run_parameter_assignments: Optional[List["_models.PipelineRunParameterAssignment"]] = None,
        **kwargs
    ):
        """
        :keyword pipeline_run_mode: Mode of pipeline run used. Known values are: "Production" and
         "Test".
        :paramtype pipeline_run_mode: str or ~azure.mgmt.datacollaboration.models.PipelineRunMode
        :keyword pipeline_run_parameter_assignments: Pipeline run parameters assignments.
        :paramtype pipeline_run_parameter_assignments:
         list[~azure.mgmt.datacollaboration.models.PipelineRunParameterAssignment]
        """
        super().__init__(**kwargs)
        self.pipeline_run_mode = pipeline_run_mode
        self.pipeline_run_parameter_assignments = pipeline_run_parameter_assignments


class PipelineStep(ProxyDto):
    """A single step of a pipeline.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SynapseSparkPipelineStep

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of pipeline step. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"SynapseSpark": "SynapseSparkPipelineStep"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class PipelineStepList(_serialization.Model):
    """List response for get Pipeline steps.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.PipelineStep]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[PipelineStep]"},
    }

    def __init__(self, *, value: List["_models.PipelineStep"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.PipelineStep]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineStepRun(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """pipeline step run at data set level.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar duration_ms: Duration of pipeline step run.
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline step run.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar pipeline_step_name: The name of the step used for this step run.
    :vartype pipeline_step_name: str
    :ivar pipeline_step_run_status: Pipeline step run status. Known values are: "Succeeded",
     "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled", "Canceling", "Waiting",
     and "Incomplete".
    :vartype pipeline_step_run_status: str or
     ~azure.mgmt.datacollaboration.models.PipelineStepRunStatus
    :ivar pipeline_substeps: List of substeps.
    :vartype pipeline_substeps: list[~azure.mgmt.datacollaboration.models.PipelineSubstep]
    :ivar start_time: Start time of pipeline step run.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "pipeline_step_name": {"readonly": True},
        "pipeline_step_run_status": {"readonly": True},
        "pipeline_substeps": {"readonly": True},
        "start_time": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "duration_ms": {"key": "properties.durationMs", "type": "int"},
        "end_time": {"key": "properties.endTime", "type": "iso-8601"},
        "error_message": {"key": "properties.errorMessage", "type": "str"},
        "pipeline_step_name": {"key": "properties.pipelineStepName", "type": "str"},
        "pipeline_step_run_status": {"key": "properties.pipelineStepRunStatus", "type": "str"},
        "pipeline_substeps": {"key": "properties.pipelineSubsteps", "type": "[PipelineSubstep]"},
        "start_time": {"key": "properties.startTime", "type": "iso-8601"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_step_name = None
        self.pipeline_step_run_status = None
        self.pipeline_substeps = None
        self.start_time = None


class PipelineStepRunList(_serialization.Model):
    """Details of pipeline run.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.PipelineStepRun]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[PipelineStepRun]"},
    }

    def __init__(self, *, value: List["_models.PipelineStepRun"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.PipelineStepRun]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PolicyList(_serialization.Model):
    """List response for get Policies.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Policy]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Policy]"},
    }

    def __init__(self, *, value: List["_models.Policy"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Policy]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Proposal(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """A proposal for data collaboration contract, can be shared and edited by multiple participants before signing.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar contract_status: Indicate if the contract is an editable Draft or a readonly Active
     contract. Known values are: "Draft" and "Active".
    :vartype contract_status: str or ~azure.mgmt.datacollaboration.models.ContractStatus
    :ivar current_version: The proposal version, any change to the proposal or any of its
     underlying resources will result in a different value.
    :vartype current_version: str
    :ivar current_version_timestamp: Timestamp of the last time the proposal or any of its
     underlying resources were updated.
    :vartype current_version_timestamp: ~datetime.datetime
    :ivar description: Textual description of the proposal.
    :vartype description: str
    :ivar display_name: Display name of the proposal.
    :vartype display_name: str
    :ivar invitation_id: The invitation id for joining a proposal.
    :vartype invitation_id: str
    :ivar invitation_location: The invitation id for joining a proposal.
    :vartype invitation_location: str
    :ivar participant_id: Id of the participant that authorized access to this proposal.
    :vartype participant_id: str
    :ivar provisioning_state: Provisioning state of the proposal. Known values are: "Succeeded",
     "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar terms: Terms of the proposal.
    :vartype terms: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "contract_status": {"readonly": True},
        "current_version": {"readonly": True},
        "current_version_timestamp": {"readonly": True},
        "participant_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "contract_status": {"key": "properties.contractStatus", "type": "str"},
        "current_version": {"key": "properties.currentVersion", "type": "str"},
        "current_version_timestamp": {"key": "properties.currentVersionTimestamp", "type": "iso-8601"},
        "description": {"key": "properties.description", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "invitation_id": {"key": "properties.invitationId", "type": "str"},
        "invitation_location": {"key": "properties.invitationLocation", "type": "str"},
        "participant_id": {"key": "properties.participantId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "terms": {"key": "properties.terms", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        invitation_id: Optional[str] = None,
        invitation_location: Optional[str] = None,
        terms: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Textual description of the proposal.
        :paramtype description: str
        :keyword display_name: Display name of the proposal.
        :paramtype display_name: str
        :keyword invitation_id: The invitation id for joining a proposal.
        :paramtype invitation_id: str
        :keyword invitation_location: The invitation id for joining a proposal.
        :paramtype invitation_location: str
        :keyword terms: Terms of the proposal.
        :paramtype terms: str
        """
        super().__init__(**kwargs)
        self.contract_status = None
        self.current_version = None
        self.current_version_timestamp = None
        self.description = description
        self.display_name = display_name
        self.invitation_id = invitation_id
        self.invitation_location = invitation_location
        self.participant_id = None
        self.provisioning_state = None
        self.terms = terms


class ProposalList(_serialization.Model):
    """List response for get proposals.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Proposal]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Proposal]"},
    }

    def __init__(self, *, value: List["_models.Proposal"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Proposal]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ProposalSignature(_serialization.Model):
    """Dto for Proposal Signing request.

    All required parameters must be populated in order to send to Azure.

    :ivar proposal_version: Proposal version to be signed. Required.
    :vartype proposal_version: str
    """

    _validation = {
        "proposal_version": {"required": True},
    }

    _attribute_map = {
        "proposal_version": {"key": "proposalVersion", "type": "str"},
    }

    def __init__(self, *, proposal_version: str, **kwargs):
        """
        :keyword proposal_version: Proposal version to be signed. Required.
        :paramtype proposal_version: str
        """
        super().__init__(**kwargs)
        self.proposal_version = proposal_version


class RegularExpressionScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter float range validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar regular_expression: Defines a regular expression parameter value must supply. Required.
    :vartype regular_expression: str
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
        "regular_expression": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "regular_expression": {"key": "regularExpression", "type": "str"},
    }

    def __init__(self, *, regular_expression: str, **kwargs):
        """
        :keyword regular_expression: Defines a regular expression parameter value must supply.
         Required.
        :paramtype regular_expression: str
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "RegularExpression"  # type: str
        self.regular_expression = regular_expression


class ResourceReferenceList(_serialization.Model):
    """List response for get resource references.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.ResourceReference]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ResourceReference]"},
    }

    def __init__(self, *, value: List["_models.ResourceReference"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.ResourceReference]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ResourceReferenceParticipantDetails(ParticipantDetails):
    """Participant Details of the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tenant_name: Tenant name of the participant.
    :vartype tenant_name: str
    :ivar workspace_display_name: Display name of the workspace.
    :vartype workspace_display_name: str
    """

    _validation = {
        "tenant_name": {"readonly": True},
        "workspace_display_name": {"readonly": True},
    }

    _attribute_map = {
        "tenant_name": {"key": "tenantName", "type": "str"},
        "workspace_display_name": {"key": "workspaceDisplayName", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.datacollaboration.models.CreatedByType
    :ivar last_modified_at: The type of identity that last modified the resource.
    :vartype last_modified_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.datacollaboration.models.LastModifiedByType
    """

    _validation = {
        "created_at": {"readonly": True},
        "created_by": {"readonly": True},
        "created_by_type": {"readonly": True},
        "last_modified_at": {"readonly": True},
        "last_modified_by": {"readonly": True},
        "last_modified_by_type": {"readonly": True},
    }

    _attribute_map = {
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.created_at = None
        self.created_by = None
        self.created_by_type = None
        self.last_modified_at = None
        self.last_modified_by = None
        self.last_modified_by_type = None


class ResourceReferenceSystemData(SystemData):
    """SystemData Info of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.datacollaboration.models.CreatedByType
    :ivar last_modified_at: The type of identity that last modified the resource.
    :vartype last_modified_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.datacollaboration.models.LastModifiedByType
    """

    _validation = {
        "created_at": {"readonly": True},
        "created_by": {"readonly": True},
        "created_by_type": {"readonly": True},
        "last_modified_at": {"readonly": True},
        "last_modified_by": {"readonly": True},
        "last_modified_by_type": {"readonly": True},
    }

    _attribute_map = {
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)


class Script(ProxyDto):
    """A script data transfer object.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SynapseSparkScript

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of script. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"SynapseSpark": "SynapseSparkScript"}}

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ScriptConstraint(Constraint):
    """Constraint used to only allow access if the resource is used with a specific script.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constraint. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar adapter_binding_constraints: The identifier of the adapter binding constraints.
    :vartype adapter_binding_constraints:
     list[~azure.mgmt.datacollaboration.models.AdapterBindingConstraint]
    :ivar description: Description of the constraint.
    :vartype description: str
    :ivar script_reference_id: The unique identifier of the script reference. Required.
    :vartype script_reference_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "script_reference_id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "adapter_binding_constraints": {
            "key": "properties.adapterBindingConstraints",
            "type": "[AdapterBindingConstraint]",
        },
        "description": {"key": "properties.description", "type": "str"},
        "script_reference_id": {"key": "properties.scriptReferenceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        script_reference_id: str,
        adapter_binding_constraints: Optional[List["_models.AdapterBindingConstraint"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword adapter_binding_constraints: The identifier of the adapter binding constraints.
        :paramtype adapter_binding_constraints:
         list[~azure.mgmt.datacollaboration.models.AdapterBindingConstraint]
        :keyword description: Description of the constraint.
        :paramtype description: str
        :keyword script_reference_id: The unique identifier of the script reference. Required.
        :paramtype script_reference_id: str
        """
        super().__init__(**kwargs)
        self.kind = "Script"  # type: str
        self.adapter_binding_constraints = adapter_binding_constraints
        self.description = description
        self.script_reference_id = script_reference_id


class ScriptDataAssetBinding(_serialization.Model):
    """Binds a data asset reference to a script source or sink by key.

    :ivar adapter: Adapter used to access the data asset.
    :vartype adapter: ~azure.mgmt.datacollaboration.models.BoundAdapter
    :ivar bound_data_descriptor: The bounded data descriptor.
    :vartype bound_data_descriptor: ~azure.mgmt.datacollaboration.models.BoundDataDescriptor
    :ivar key: The key of script's source or sink.
    :vartype key: str
    """

    _attribute_map = {
        "adapter": {"key": "adapter", "type": "BoundAdapter"},
        "bound_data_descriptor": {"key": "boundDataDescriptor", "type": "BoundDataDescriptor"},
        "key": {"key": "key", "type": "str"},
    }

    def __init__(
        self,
        *,
        adapter: Optional["_models.BoundAdapter"] = None,
        bound_data_descriptor: Optional["_models.BoundDataDescriptor"] = None,
        key: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword adapter: Adapter used to access the data asset.
        :paramtype adapter: ~azure.mgmt.datacollaboration.models.BoundAdapter
        :keyword bound_data_descriptor: The bounded data descriptor.
        :paramtype bound_data_descriptor: ~azure.mgmt.datacollaboration.models.BoundDataDescriptor
        :keyword key: The key of script's source or sink.
        :paramtype key: str
        """
        super().__init__(**kwargs)
        self.adapter = adapter
        self.bound_data_descriptor = bound_data_descriptor
        self.key = key


class ScriptExecutionInformation(_serialization.Model):
    """The information about an executed script.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar execution_parameters: The parameter values used during execution.
    :vartype execution_parameters:
     list[~azure.mgmt.datacollaboration.models.ScriptExecutionParameter]
    :ivar name: The name of the script.
    :vartype name: str
    :ivar purpose: The kind of the script.
    :vartype purpose: str
    :ivar resource_id: The resource id of the script.
    :vartype resource_id: str
    :ivar revision: The revision of the script.
    :vartype revision: int
    """

    _validation = {
        "execution_parameters": {"readonly": True},
        "name": {"readonly": True},
        "purpose": {"readonly": True},
        "resource_id": {"readonly": True},
        "revision": {"readonly": True},
    }

    _attribute_map = {
        "execution_parameters": {"key": "executionParameters", "type": "[ScriptExecutionParameter]"},
        "name": {"key": "name", "type": "str"},
        "purpose": {"key": "purpose", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "revision": {"key": "revision", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.execution_parameters = None
        self.name = None
        self.purpose = None
        self.resource_id = None
        self.revision = None


class ScriptExecutionParameter(_serialization.Model):
    """Script parameter execution values.

    :ivar name: Parameter name.
    :vartype name: str
    :ivar parameter_type: Parameter type. Known values are: "Boolean", "Integer", "Float",
     "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar resolved_by: Parameter resolution by. Known values are: "Default", "Constant", and
     "PipelineRun".
    :vartype resolved_by: str or ~azure.mgmt.datacollaboration.models.ResolvedBy
    :ivar value: Parameter value.
    :vartype value: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "resolved_by": {"key": "resolvedBy", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        parameter_type: Optional[Union[str, "_models.ParameterType"]] = None,
        resolved_by: Optional[Union[str, "_models.ResolvedBy"]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Parameter name.
        :paramtype name: str
        :keyword parameter_type: Parameter type. Known values are: "Boolean", "Integer", "Float",
         "String", and "DateTime".
        :paramtype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
        :keyword resolved_by: Parameter resolution by. Known values are: "Default", "Constant", and
         "PipelineRun".
        :paramtype resolved_by: str or ~azure.mgmt.datacollaboration.models.ResolvedBy
        :keyword value: Parameter value.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.parameter_type = parameter_type
        self.resolved_by = resolved_by
        self.value = value


class ScriptExecutionPipelineSubstep(PipelineSubstep):  # pylint: disable=too-many-instance-attributes
    """A substep representing scrip execution.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Known values are:
     "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling", "Waiting", and "Incomplete".
    :vartype execution_status: str or ~azure.mgmt.datacollaboration.models.ExecutionStatus
    :ivar kind: Kind of pipeline substep. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_substep_id: Id of pipeline substep.
    :vartype pipeline_substep_id: str
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    :ivar execution_timeout: The upper boundary of script execution time.
    :vartype execution_timeout: str
    :ivar script_execution_information: Script information.
    :vartype script_execution_information:
     ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
    :ivar sink_bindings: Sink Binding.
    :vartype sink_bindings:
     list[~azure.mgmt.datacollaboration.models.SinkBindingExecutionInformation]
    :ivar source_bindings: Source Binding.
    :vartype source_bindings:
     list[~azure.mgmt.datacollaboration.models.SourceBindingExecutionInformation]
    :ivar synapse_spark_information: Information about the Synapse Spark.
    :vartype synapse_spark_information:
     ~azure.mgmt.datacollaboration.models.SynapseSparkInformation
    """

    _validation = {
        "duration_ms": {"readonly": True},
        "end_time": {"readonly": True},
        "error_message": {"readonly": True},
        "execution_status": {"readonly": True},
        "kind": {"required": True},
        "pipeline_substep_id": {"readonly": True},
        "start_time": {"readonly": True},
        "execution_timeout": {"readonly": True},
    }

    _attribute_map = {
        "duration_ms": {"key": "durationMs", "type": "int"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "execution_status": {"key": "executionStatus", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "execution_timeout": {"key": "executionTimeout", "type": "str"},
        "script_execution_information": {"key": "scriptExecutionInformation", "type": "ScriptExecutionInformation"},
        "sink_bindings": {"key": "sinkBindings", "type": "[SinkBindingExecutionInformation]"},
        "source_bindings": {"key": "sourceBindings", "type": "[SourceBindingExecutionInformation]"},
        "synapse_spark_information": {"key": "synapseSparkInformation", "type": "SynapseSparkInformation"},
    }

    def __init__(
        self,
        *,
        script_execution_information: Optional["_models.ScriptExecutionInformation"] = None,
        sink_bindings: Optional[List["_models.SinkBindingExecutionInformation"]] = None,
        source_bindings: Optional[List["_models.SourceBindingExecutionInformation"]] = None,
        synapse_spark_information: Optional["_models.SynapseSparkInformation"] = None,
        **kwargs
    ):
        """
        :keyword script_execution_information: Script information.
        :paramtype script_execution_information:
         ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
        :keyword sink_bindings: Sink Binding.
        :paramtype sink_bindings:
         list[~azure.mgmt.datacollaboration.models.SinkBindingExecutionInformation]
        :keyword source_bindings: Source Binding.
        :paramtype source_bindings:
         list[~azure.mgmt.datacollaboration.models.SourceBindingExecutionInformation]
        :keyword synapse_spark_information: Information about the Synapse Spark.
        :paramtype synapse_spark_information:
         ~azure.mgmt.datacollaboration.models.SynapseSparkInformation
        """
        super().__init__(**kwargs)
        self.kind = "ScriptExecution"  # type: str
        self.execution_timeout = None
        self.script_execution_information = script_execution_information
        self.sink_bindings = sink_bindings
        self.source_bindings = source_bindings
        self.synapse_spark_information = synapse_spark_information


class ScriptExecutionSubstepReference(SubstepReference):
    """A reference to a script execution sub-step.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of substep reference. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar pipeline_step_name: The name of the Pipeline Step Run which contains the referred
     sub-step.
    :vartype pipeline_step_name: str
    :ivar pipeline_substep_id: The Id of the Sub-step.
    :vartype pipeline_substep_id: str
    :ivar output_binding_key: The output binding key.
    :vartype output_binding_key: str
    """

    _validation = {
        "kind": {"required": True},
        "pipeline_step_name": {"readonly": True},
        "pipeline_substep_id": {"readonly": True},
        "output_binding_key": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "pipeline_step_name": {"key": "pipelineStepName", "type": "str"},
        "pipeline_substep_id": {"key": "pipelineSubstepId", "type": "str"},
        "output_binding_key": {"key": "outputBindingKey", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "ScriptExecution"  # type: str
        self.output_binding_key = None


class ScriptList(_serialization.Model):
    """List response for get Scripts.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Script]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Script]"},
    }

    def __init__(self, *, value: List["_models.Script"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Script]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScriptOutputBoundDataDescriptor(BoundDataDescriptor):
    """Script output bound data descriptor.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of bound data descriptor. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar output_name: The key of the output binding in the source step.
    :vartype output_name: str
    :ivar step_name: The name of the source step.
    :vartype step_name: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "output_name": {"key": "outputName", "type": "str"},
        "step_name": {"key": "stepName", "type": "str"},
    }

    def __init__(self, *, output_name: Optional[str] = None, step_name: Optional[str] = None, **kwargs):
        """
        :keyword output_name: The key of the output binding in the source step.
        :paramtype output_name: str
        :keyword step_name: The name of the source step.
        :paramtype step_name: str
        """
        super().__init__(**kwargs)
        self.kind = "ScriptOutput"  # type: str
        self.output_name = output_name
        self.step_name = step_name


class ScriptParameterBinding(_serialization.Model):
    """Pipeline script parameter binding.

    All required parameters must be populated in order to send to Azure.

    :ivar pipeline_parameter_id: Pipeline Parameter identifier. Required.
    :vartype pipeline_parameter_id: str
    :ivar script_parameter_id: Script parameter identifier. Required.
    :vartype script_parameter_id: str
    """

    _validation = {
        "pipeline_parameter_id": {"required": True},
        "script_parameter_id": {"required": True},
    }

    _attribute_map = {
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "script_parameter_id": {"key": "scriptParameterId", "type": "str"},
    }

    def __init__(self, *, pipeline_parameter_id: str, script_parameter_id: str, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline Parameter identifier. Required.
        :paramtype pipeline_parameter_id: str
        :keyword script_parameter_id: Script parameter identifier. Required.
        :paramtype script_parameter_id: str
        """
        super().__init__(**kwargs)
        self.pipeline_parameter_id = pipeline_parameter_id
        self.script_parameter_id = script_parameter_id


class ScriptParameterConstraint(Constraint):
    """Constraint used to only allow access if the resource is using a specific script parameter.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constraint. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar description: Description of the constraint.
    :vartype description: str
    :ivar is_parameter_required: Parameter must exist.
    :vartype is_parameter_required: bool
    :ivar parameter_name: The parameter name which this constraint will apply to. Required.
    :vartype parameter_name: str
    :ivar parameter_type: Parameter should be of type. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar validation_rule: Rule in which parameter have to follow.
    :vartype validation_rule: ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRule
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "parameter_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "is_parameter_required": {"key": "properties.isParameterRequired", "type": "bool"},
        "parameter_name": {"key": "properties.parameterName", "type": "str"},
        "parameter_type": {"key": "properties.parameterType", "type": "str"},
        "validation_rule": {"key": "properties.validationRule", "type": "ScriptParameterValidationRule"},
    }

    def __init__(
        self,
        *,
        parameter_name: str,
        description: Optional[str] = None,
        is_parameter_required: Optional[bool] = None,
        parameter_type: Optional[Union[str, "_models.ParameterType"]] = None,
        validation_rule: Optional["_models.ScriptParameterValidationRule"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the constraint.
        :paramtype description: str
        :keyword is_parameter_required: Parameter must exist.
        :paramtype is_parameter_required: bool
        :keyword parameter_name: The parameter name which this constraint will apply to. Required.
        :paramtype parameter_name: str
        :keyword parameter_type: Parameter should be of type. Known values are: "Boolean", "Integer",
         "Float", "String", and "DateTime".
        :paramtype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
        :keyword validation_rule: Rule in which parameter have to follow.
        :paramtype validation_rule: ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRule
        """
        super().__init__(**kwargs)
        self.kind = "ScriptParameter"  # type: str
        self.description = description
        self.is_parameter_required = is_parameter_required
        self.parameter_name = parameter_name
        self.parameter_type = parameter_type
        self.validation_rule = validation_rule


class ScriptReference(ProxyDto):  # pylint: disable=too-many-instance-attributes
    """Script reference dto.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar display_name: Reference display name.
    :vartype display_name: str
    :ivar owner_id: The participant id of the script owner.
    :vartype owner_id: str
    :ivar parameters: The list of script parameters.
    :vartype parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    :ivar placeholder_info: The placeholder information.
    :vartype placeholder_info: ~azure.mgmt.datacollaboration.models.ScriptReferencePlaceholderInfo
    :ivar placeholder_state: The placeholder state. Known values are: "None", "Unassigned", and
     "Assigned".
    :vartype placeholder_state: str or ~azure.mgmt.datacollaboration.models.PlaceholderState
    :ivar purpose: Script purpose. Known values are: "Body", "InputAdapter", and "OutputAdapter".
    :vartype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
    :ivar revision: The revision number of the script being referenced.
     If omitted, the script latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script.
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. "SynapseSpark"
    :vartype script_kind: str or ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar script_reference_id: Unique id for identifying a script reference resource.
    :vartype script_reference_id: str
    :ivar script_visibility: The referenced script visibility modifier. Known values are: "ShowAll"
     and "HiddenContent".
    :vartype script_visibility: str or ~azure.mgmt.datacollaboration.models.ScriptVisibility
    :ivar sinks: The list of parameters the script can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "owner_id": {"readonly": True},
        "parameters": {"readonly": True},
        "placeholder_state": {"readonly": True},
        "purpose": {"readonly": True},
        "script_kind": {"readonly": True},
        "script_reference_id": {"readonly": True},
        "script_visibility": {"readonly": True},
        "sinks": {"readonly": True},
        "sources": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "owner_id": {"key": "properties.ownerId", "type": "str"},
        "parameters": {"key": "properties.parameters", "type": "[ScriptParameter]"},
        "placeholder_info": {"key": "properties.placeholderInfo", "type": "ScriptReferencePlaceholderInfo"},
        "placeholder_state": {"key": "properties.placeholderState", "type": "str"},
        "purpose": {"key": "properties.purpose", "type": "str"},
        "revision": {"key": "properties.revision", "type": "int"},
        "script_id": {"key": "properties.scriptId", "type": "str"},
        "script_kind": {"key": "properties.scriptKind", "type": "str"},
        "script_reference_id": {"key": "properties.scriptReferenceId", "type": "str"},
        "script_visibility": {"key": "properties.scriptVisibility", "type": "str"},
        "sinks": {"key": "properties.sinks", "type": "[str]"},
        "sources": {"key": "properties.sources", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        placeholder_info: Optional["_models.ScriptReferencePlaceholderInfo"] = None,
        revision: Optional[int] = None,
        script_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Reference display name.
        :paramtype display_name: str
        :keyword placeholder_info: The placeholder information.
        :paramtype placeholder_info:
         ~azure.mgmt.datacollaboration.models.ScriptReferencePlaceholderInfo
        :keyword revision: The revision number of the script being referenced.
         If omitted, the script latest version will be referenced.
        :paramtype revision: int
        :keyword script_id: The unique identifier of the referenced script.
        :paramtype script_id: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.owner_id = None
        self.parameters = None
        self.placeholder_info = placeholder_info
        self.placeholder_state = None
        self.purpose = None
        self.revision = revision
        self.script_id = script_id
        self.script_kind = None
        self.script_reference_id = None
        self.script_visibility = None
        self.sinks = None
        self.sources = None


class ScriptReferenceList(_serialization.Model):
    """List response for get script references.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.ScriptReference]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ScriptReference]"},
    }

    def __init__(self, *, value: List["_models.ScriptReference"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.ScriptReference]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScriptReferencePlaceholderInfo(_serialization.Model):
    """Placeholder information for a script reference.

    All required parameters must be populated in order to send to Azure.

    :ivar assigner_id: Participant id who is allowed to assign the placeholder. Required.
    :vartype assigner_id: str
    :ivar description: Description of the placeholder.
    :vartype description: str
    :ivar display_name: Display name of the placeholder. Required.
    :vartype display_name: str
    :ivar purpose: Script purpose. Required. Known values are: "Body", "InputAdapter", and
     "OutputAdapter".
    :vartype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
    """

    _validation = {
        "assigner_id": {"required": True},
        "display_name": {"required": True},
        "purpose": {"required": True},
    }

    _attribute_map = {
        "assigner_id": {"key": "assignerId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "purpose": {"key": "purpose", "type": "str"},
    }

    def __init__(
        self,
        *,
        assigner_id: str,
        display_name: str,
        purpose: Union[str, "_models.Purpose"],
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword assigner_id: Participant id who is allowed to assign the placeholder. Required.
        :paramtype assigner_id: str
        :keyword description: Description of the placeholder.
        :paramtype description: str
        :keyword display_name: Display name of the placeholder. Required.
        :paramtype display_name: str
        :keyword purpose: Script purpose. Required. Known values are: "Body", "InputAdapter", and
         "OutputAdapter".
        :paramtype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
        """
        super().__init__(**kwargs)
        self.assigner_id = assigner_id
        self.description = description
        self.display_name = display_name
        self.purpose = purpose


class ScriptReferenceResourceReference(ResourceReference):  # pylint: disable=too-many-instance-attributes
    """ResourceReference used to only allow access if the resource is used within the specified Azure scriptReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of resource reference. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar participant_details: Participant Details of the resource.
    :vartype participant_details:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceParticipantDetails
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :ivar display_name: Reference display name.
    :vartype display_name: str
    :ivar parameters: The list of script parameters.
    :vartype parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    :ivar purpose: Script purpose. Known values are: "Body", "InputAdapter", and "OutputAdapter".
    :vartype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
    :ivar revision: The revision number of the scriptReference being referenced.
     If omitted, the scriptReference latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script.
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. "SynapseSpark"
    :vartype script_kind: str or ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar script_reference_id: The unique identifier of the scriptReference.
    :vartype script_reference_id: str
    :ivar sinks: The list of parameters the scriptReference can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the scriptReference can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        "kind": {"required": True},
        "participant_details": {"readonly": True},
        "resource_id": {"readonly": True},
        "resource_name": {"readonly": True},
        "resource_type": {"readonly": True},
        "system_data": {"readonly": True},
        "display_name": {"readonly": True},
        "parameters": {"readonly": True},
        "purpose": {"readonly": True},
        "revision": {"readonly": True},
        "script_id": {"readonly": True},
        "script_kind": {"readonly": True},
        "script_reference_id": {"readonly": True},
        "sinks": {"readonly": True},
        "sources": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "participant_details": {"key": "participantDetails", "type": "ResourceReferenceParticipantDetails"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "system_data": {"key": "systemData", "type": "ResourceReferenceSystemData"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "parameters": {"key": "properties.parameters", "type": "[ScriptParameter]"},
        "purpose": {"key": "properties.purpose", "type": "str"},
        "revision": {"key": "properties.revision", "type": "int"},
        "script_id": {"key": "properties.scriptId", "type": "str"},
        "script_kind": {"key": "properties.scriptKind", "type": "str"},
        "script_reference_id": {"key": "properties.scriptReferenceId", "type": "str"},
        "sinks": {"key": "properties.sinks", "type": "[str]"},
        "sources": {"key": "properties.sources", "type": "[str]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "ScriptReference"  # type: str
        self.display_name = None
        self.parameters = None
        self.purpose = None
        self.revision = None
        self.script_id = None
        self.script_kind = None
        self.script_reference_id = None
        self.sinks = None
        self.sources = None


class ScriptResourceReference(ResourceReference):  # pylint: disable=too-many-instance-attributes
    """ResourceReference used to only allow access if the resource is used within the specified Azure script.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Kind of resource reference. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar participant_details: Participant Details of the resource.
    :vartype participant_details:
     ~azure.mgmt.datacollaboration.models.ResourceReferenceParticipantDetails
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.ResourceReferenceSystemData
    :ivar parameters: The list of script parameters.
    :vartype parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    :ivar purpose: Script purpose. Known values are: "Body", "InputAdapter", and "OutputAdapter".
    :vartype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
    :ivar revision: The revision number of the script being referenced.
     If omitted, the script latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script.
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. "SynapseSpark"
    :vartype script_kind: str or ~azure.mgmt.datacollaboration.models.ScriptKind
    :ivar sinks: The list of parameters the script can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        "kind": {"required": True},
        "participant_details": {"readonly": True},
        "resource_id": {"readonly": True},
        "resource_name": {"readonly": True},
        "resource_type": {"readonly": True},
        "system_data": {"readonly": True},
        "parameters": {"readonly": True},
        "purpose": {"readonly": True},
        "revision": {"readonly": True},
        "script_id": {"readonly": True},
        "script_kind": {"readonly": True},
        "sinks": {"readonly": True},
        "sources": {"readonly": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "participant_details": {"key": "participantDetails", "type": "ResourceReferenceParticipantDetails"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "system_data": {"key": "systemData", "type": "ResourceReferenceSystemData"},
        "parameters": {"key": "properties.parameters", "type": "[ScriptParameter]"},
        "purpose": {"key": "properties.purpose", "type": "str"},
        "revision": {"key": "properties.revision", "type": "int"},
        "script_id": {"key": "properties.scriptId", "type": "str"},
        "script_kind": {"key": "properties.scriptKind", "type": "str"},
        "sinks": {"key": "properties.sinks", "type": "[str]"},
        "sources": {"key": "properties.sources", "type": "[str]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = "Script"  # type: str
        self.parameters = None
        self.purpose = None
        self.revision = None
        self.script_id = None
        self.script_kind = None
        self.sinks = None
        self.sources = None


class SinkBindingExecutionInformation(_serialization.Model):
    """Information about the bounded sink.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar adapter: The bounded adapter.
    :vartype adapter: ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
    :ivar binding_key: The binding key.
    :vartype binding_key: str
    """

    _validation = {
        "binding_key": {"readonly": True},
    }

    _attribute_map = {
        "adapter": {"key": "adapter", "type": "ScriptExecutionInformation"},
        "binding_key": {"key": "bindingKey", "type": "str"},
    }

    def __init__(self, *, adapter: Optional["_models.ScriptExecutionInformation"] = None, **kwargs):
        """
        :keyword adapter: The bounded adapter.
        :paramtype adapter: ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
        """
        super().__init__(**kwargs)
        self.adapter = adapter
        self.binding_key = None


class SourceBindingExecutionInformation(_serialization.Model):
    """Information about the bounded source.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar adapter: The bounded adapter.
    :vartype adapter: ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
    :ivar binding_key: The binding key.
    :vartype binding_key: str
    :ivar source_substep_reference: The bounded sub-step.
    :vartype source_substep_reference: ~azure.mgmt.datacollaboration.models.SubstepReference
    """

    _validation = {
        "binding_key": {"readonly": True},
    }

    _attribute_map = {
        "adapter": {"key": "adapter", "type": "ScriptExecutionInformation"},
        "binding_key": {"key": "bindingKey", "type": "str"},
        "source_substep_reference": {"key": "sourceSubstepReference", "type": "SubstepReference"},
    }

    def __init__(
        self,
        *,
        adapter: Optional["_models.ScriptExecutionInformation"] = None,
        source_substep_reference: Optional["_models.SubstepReference"] = None,
        **kwargs
    ):
        """
        :keyword adapter: The bounded adapter.
        :paramtype adapter: ~azure.mgmt.datacollaboration.models.ScriptExecutionInformation
        :keyword source_substep_reference: The bounded sub-step.
        :paramtype source_substep_reference: ~azure.mgmt.datacollaboration.models.SubstepReference
        """
        super().__init__(**kwargs)
        self.adapter = adapter
        self.binding_key = None
        self.source_substep_reference = source_substep_reference


class SparkPoolExecutionInformation(_serialization.Model):
    """Information about the Spark pool execution.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar executor_node_size: The executers node size.
    :vartype executor_node_size: str
    :ivar executors_count: The executers count.
    :vartype executors_count: int
    """

    _validation = {
        "executor_node_size": {"readonly": True},
        "executors_count": {"readonly": True},
    }

    _attribute_map = {
        "executor_node_size": {"key": "executorNodeSize", "type": "str"},
        "executors_count": {"key": "executorsCount", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.executor_node_size = None
        self.executors_count = None


class SparkPoolInformation(_serialization.Model):
    """Information about the Spark pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar max_node_count: The Spark pool max node count (If auto-scale is enabled).
    :vartype max_node_count: int
    :ivar min_node_count: The Spark pool min node count (If auto-scale is enabled).
    :vartype min_node_count: int
    :ivar node_count: The Spark pool node count.
    :vartype node_count: int
    :ivar node_size: The Spark pool node size.
    :vartype node_size: str
    :ivar resource_id: The resource Id of the Spark pool.
    :vartype resource_id: str
    """

    _validation = {
        "max_node_count": {"readonly": True},
        "min_node_count": {"readonly": True},
        "node_count": {"readonly": True},
        "node_size": {"readonly": True},
        "resource_id": {"readonly": True},
    }

    _attribute_map = {
        "max_node_count": {"key": "maxNodeCount", "type": "int"},
        "min_node_count": {"key": "minNodeCount", "type": "int"},
        "node_count": {"key": "nodeCount", "type": "int"},
        "node_size": {"key": "nodeSize", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.max_node_count = None
        self.min_node_count = None
        self.node_count = None
        self.node_size = None
        self.resource_id = None


class StringLengthRangeScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter float range validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar maximum_length: Defines maximum length for the string parameter.
    :vartype maximum_length: int
    :ivar minimum_length: Defines minimum length for the string parameter.
    :vartype minimum_length: int
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "maximum_length": {"key": "maximumLength", "type": "int"},
        "minimum_length": {"key": "minimumLength", "type": "int"},
    }

    def __init__(self, *, maximum_length: Optional[int] = None, minimum_length: Optional[int] = None, **kwargs):
        """
        :keyword maximum_length: Defines maximum length for the string parameter.
        :paramtype maximum_length: int
        :keyword minimum_length: Defines minimum length for the string parameter.
        :paramtype minimum_length: int
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "StringLengthRange"  # type: str
        self.maximum_length = maximum_length
        self.minimum_length = minimum_length


class StringOptionsSetScriptParameterRule(ScriptParameterValidationRule):
    """Script Parameter String Options Set validation rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar script_parameter_validation_rule_type: Script parameter validation rule type. Required.
     Known values are: "IntegerRange", "FloatRange", "DateTimeRange", "StringLengthRange",
     "RegularExpression", "IntegerOptionsSet", "FloatOptionsSet", "StringOptionsSet", and
     "DateTimeOptionsSet".
    :vartype script_parameter_validation_rule_type: str or
     ~azure.mgmt.datacollaboration.models.ScriptParameterValidationRuleType
    :ivar options: Defines a set of value options for the parameter. Required.
    :vartype options: list[str]
    """

    _validation = {
        "script_parameter_validation_rule_type": {"required": True},
        "options": {"required": True, "unique": True},
    }

    _attribute_map = {
        "script_parameter_validation_rule_type": {"key": "scriptParameterValidationRuleType", "type": "str"},
        "options": {"key": "options", "type": "[str]"},
    }

    def __init__(self, *, options: List[str], **kwargs):
        """
        :keyword options: Defines a set of value options for the parameter. Required.
        :paramtype options: list[str]
        """
        super().__init__(**kwargs)
        self.script_parameter_validation_rule_type = "StringOptionsSet"  # type: str
        self.options = options


class StringPipelineRunParameterAssignment(PipelineRunParameterAssignment):
    """Pipeline run string parameter assignment.

    All required parameters must be populated in order to send to Azure.

    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar pipeline_parameter_id: Pipeline parameter id. Required.
    :vartype pipeline_parameter_id: str
    :ivar value: Parameter value. Required.
    :vartype value: str
    """

    _validation = {
        "parameter_type": {"required": True},
        "pipeline_parameter_id": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_type": {"key": "parameterType", "type": "str"},
        "pipeline_parameter_id": {"key": "pipelineParameterId", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, pipeline_parameter_id: str, value: str, **kwargs):
        """
        :keyword pipeline_parameter_id: Pipeline parameter id. Required.
        :paramtype pipeline_parameter_id: str
        :keyword value: Parameter value. Required.
        :paramtype value: str
        """
        super().__init__(pipeline_parameter_id=pipeline_parameter_id, **kwargs)
        self.parameter_type = "String"  # type: str
        self.value = value


class StringScriptParameter(ScriptParameter):
    """Script parameter of type string.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Parameter usage description.
    :vartype description: str
    :ivar name: Parameter name as it appears in the script. Required.
    :vartype name: str
    :ivar parameter_id: Parameter identifier.
    :vartype parameter_id: str
    :ivar parameter_type: Parameter type. Required. Known values are: "Boolean", "Integer",
     "Float", "String", and "DateTime".
    :vartype parameter_type: str or ~azure.mgmt.datacollaboration.models.ParameterType
    :ivar default_value: Default parameter value.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "parameter_type": {"required": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "parameter_id": {"key": "parameterId", "type": "str"},
        "parameter_type": {"key": "parameterType", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameter_id: Optional[str] = None,
        default_value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Parameter usage description.
        :paramtype description: str
        :keyword name: Parameter name as it appears in the script. Required.
        :paramtype name: str
        :keyword parameter_id: Parameter identifier.
        :paramtype parameter_id: str
        :keyword default_value: Default parameter value.
        :paramtype default_value: str
        """
        super().__init__(description=description, name=name, parameter_id=parameter_id, **kwargs)
        self.parameter_type = "String"  # type: str
        self.default_value = default_value


class SynapseSparkInformation(_serialization.Model):
    """Information about the Synapse Spark.

    :ivar spark_pool_execution_information: The Spark pool execution information.
    :vartype spark_pool_execution_information:
     ~azure.mgmt.datacollaboration.models.SparkPoolExecutionInformation
    :ivar spark_pool_information: The Spark pool information.
    :vartype spark_pool_information: ~azure.mgmt.datacollaboration.models.SparkPoolInformation
    """

    _attribute_map = {
        "spark_pool_execution_information": {
            "key": "sparkPoolExecutionInformation",
            "type": "SparkPoolExecutionInformation",
        },
        "spark_pool_information": {"key": "sparkPoolInformation", "type": "SparkPoolInformation"},
    }

    def __init__(
        self,
        *,
        spark_pool_execution_information: Optional["_models.SparkPoolExecutionInformation"] = None,
        spark_pool_information: Optional["_models.SparkPoolInformation"] = None,
        **kwargs
    ):
        """
        :keyword spark_pool_execution_information: The Spark pool execution information.
        :paramtype spark_pool_execution_information:
         ~azure.mgmt.datacollaboration.models.SparkPoolExecutionInformation
        :keyword spark_pool_information: The Spark pool information.
        :paramtype spark_pool_information: ~azure.mgmt.datacollaboration.models.SparkPoolInformation
        """
        super().__init__(**kwargs)
        self.spark_pool_execution_information = spark_pool_execution_information
        self.spark_pool_information = spark_pool_information


class SynapseSparkPipelineStep(PipelineStep):  # pylint: disable=too-many-instance-attributes
    """A Synapse Spark based pipeline step.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of pipeline step. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar dependencies: List of other steps names, in the same pipeline, which this step is
     depended on
     and should run only when they finish.
    :vartype dependencies: list[str]
    :ivar diagnostics_log_bindings: Bindings between the diagnostics logs and data assets.
    :vartype diagnostics_log_bindings: list[~azure.mgmt.datacollaboration.models.DiagnosticsLog]
    :ivar executor_node_size: The node size to use per executor. Known values are: "None", "Small",
     "Medium", "Large", "XLarge", "XXLarge", and "XXXLarge".
    :vartype executor_node_size: str or ~azure.mgmt.datacollaboration.models.ExecutorNodeSize
    :ivar executors_count: Number of executors to execute this step.
    :vartype executors_count: int
    :ivar script_execution_timeout: The upper boundary of script execution time. Pattern:
     ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :vartype script_execution_timeout: str
    :ivar script_id: The script Id that the pipeline step should execute. Required.
    :vartype script_id: str
    :ivar script_parameter_bindings: Binding between the script parameter and pipeline parameters.
    :vartype script_parameter_bindings:
     list[~azure.mgmt.datacollaboration.models.ScriptParameterBinding]
    :ivar script_parameters: List of pipeline step level script parameters.
    :vartype script_parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    :ivar script_revision: The script's revision that the pipeline step should execute. Required.
    :vartype script_revision: int
    :ivar script_sink_bindings: Bindings between the script's sink keys and data assets. Required.
    :vartype script_sink_bindings:
     list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
    :ivar script_source_bindings: Bindings between the script's source keys and data assets.
     Required.
    :vartype script_source_bindings:
     list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
    :ivar synapse_spark_pool_id: The Synapse Spark pool that will execute this step.
    :vartype synapse_spark_pool_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "script_id": {"required": True},
        "script_revision": {"required": True},
        "script_sink_bindings": {"required": True},
        "script_source_bindings": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "dependencies": {"key": "properties.dependencies", "type": "[str]"},
        "diagnostics_log_bindings": {"key": "properties.diagnosticsLogBindings", "type": "[DiagnosticsLog]"},
        "executor_node_size": {"key": "properties.executorNodeSize", "type": "str"},
        "executors_count": {"key": "properties.executorsCount", "type": "int"},
        "script_execution_timeout": {"key": "properties.scriptExecutionTimeout", "type": "str"},
        "script_id": {"key": "properties.scriptId", "type": "str"},
        "script_parameter_bindings": {"key": "properties.scriptParameterBindings", "type": "[ScriptParameterBinding]"},
        "script_parameters": {"key": "properties.scriptParameters", "type": "[ScriptParameter]"},
        "script_revision": {"key": "properties.scriptRevision", "type": "int"},
        "script_sink_bindings": {"key": "properties.scriptSinkBindings", "type": "[ScriptDataAssetBinding]"},
        "script_source_bindings": {"key": "properties.scriptSourceBindings", "type": "[ScriptDataAssetBinding]"},
        "synapse_spark_pool_id": {"key": "properties.synapseSparkPoolId", "type": "str"},
    }

    def __init__(
        self,
        *,
        script_id: str,
        script_revision: int,
        script_sink_bindings: List["_models.ScriptDataAssetBinding"],
        script_source_bindings: List["_models.ScriptDataAssetBinding"],
        dependencies: Optional[List[str]] = None,
        diagnostics_log_bindings: Optional[List["_models.DiagnosticsLog"]] = None,
        executor_node_size: Optional[Union[str, "_models.ExecutorNodeSize"]] = None,
        executors_count: Optional[int] = None,
        script_execution_timeout: Optional[str] = None,
        script_parameter_bindings: Optional[List["_models.ScriptParameterBinding"]] = None,
        script_parameters: Optional[List["_models.ScriptParameter"]] = None,
        synapse_spark_pool_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword dependencies: List of other steps names, in the same pipeline, which this step is
         depended on
         and should run only when they finish.
        :paramtype dependencies: list[str]
        :keyword diagnostics_log_bindings: Bindings between the diagnostics logs and data assets.
        :paramtype diagnostics_log_bindings: list[~azure.mgmt.datacollaboration.models.DiagnosticsLog]
        :keyword executor_node_size: The node size to use per executor. Known values are: "None",
         "Small", "Medium", "Large", "XLarge", "XXLarge", and "XXXLarge".
        :paramtype executor_node_size: str or ~azure.mgmt.datacollaboration.models.ExecutorNodeSize
        :keyword executors_count: Number of executors to execute this step.
        :paramtype executors_count: int
        :keyword script_execution_timeout: The upper boundary of script execution time. Pattern:
         ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        :paramtype script_execution_timeout: str
        :keyword script_id: The script Id that the pipeline step should execute. Required.
        :paramtype script_id: str
        :keyword script_parameter_bindings: Binding between the script parameter and pipeline
         parameters.
        :paramtype script_parameter_bindings:
         list[~azure.mgmt.datacollaboration.models.ScriptParameterBinding]
        :keyword script_parameters: List of pipeline step level script parameters.
        :paramtype script_parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
        :keyword script_revision: The script's revision that the pipeline step should execute.
         Required.
        :paramtype script_revision: int
        :keyword script_sink_bindings: Bindings between the script's sink keys and data assets.
         Required.
        :paramtype script_sink_bindings:
         list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
        :keyword script_source_bindings: Bindings between the script's source keys and data assets.
         Required.
        :paramtype script_source_bindings:
         list[~azure.mgmt.datacollaboration.models.ScriptDataAssetBinding]
        :keyword synapse_spark_pool_id: The Synapse Spark pool that will execute this step.
        :paramtype synapse_spark_pool_id: str
        """
        super().__init__(**kwargs)
        self.kind = "SynapseSpark"  # type: str
        self.dependencies = dependencies
        self.diagnostics_log_bindings = diagnostics_log_bindings
        self.executor_node_size = executor_node_size
        self.executors_count = executors_count
        self.script_execution_timeout = script_execution_timeout
        self.script_id = script_id
        self.script_parameter_bindings = script_parameter_bindings
        self.script_parameters = script_parameters
        self.script_revision = script_revision
        self.script_sink_bindings = script_sink_bindings
        self.script_source_bindings = script_source_bindings
        self.synapse_spark_pool_id = synapse_spark_pool_id


class SynapseSparkPool(ConstrainedResource):  # pylint: disable=too-many-instance-attributes
    """Synapse Spark Pool constrained resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of constrained resource. Required. Known values are: "DataAsset",
     "ScriptOutput", "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob",
     "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File",
     "ConsoleLog", "EventLog", "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog",
     "DiagnosticLevel", "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar auto_pause: Gets or sets auto-pausing properties.
    :vartype auto_pause: ~azure.mgmt.datacollaboration.models.SynapseSparkPoolAutoPauseProperties
    :ivar auto_scale: Gets or sets auto-scaling properties.
    :vartype auto_scale: ~azure.mgmt.datacollaboration.models.SynapseSparkPoolAutoScaleProperties
    :ivar constrained_resource_id: Unique id for identifying a constrained resource.
    :vartype constrained_resource_id: str
    :ivar family: Family of constrained resource. Known values are: "Compute" and "Storage".
    :vartype family: str or ~azure.mgmt.datacollaboration.models.Family
    :ivar library_requirements: Gets or sets library requirements properties.
    :vartype library_requirements:
     ~azure.mgmt.datacollaboration.models.SynapseSparkPoolLibraryRequirementsProperties
    :ivar node_count: Gets or sets the number of nodes in the Big Data pool.
    :vartype node_count: int
    :ivar node_size: Gets or sets the level of compute power that each node in the Synapse Spark
     pool has. Known values are: "None", "Small", "Medium", "Large", "XLarge", "XXLarge", and
     "XXXLarge".
    :vartype node_size: str or ~azure.mgmt.datacollaboration.models.NodeSize
    :ivar node_size_family: Gets or sets the kind of nodes that the Big Data pool provides. Known
     values are: "None" and "MemoryOptimized".
    :vartype node_size_family: str or ~azure.mgmt.datacollaboration.models.NodeSizeFamily
    :ivar provisioning_state: Provisioning state of the constrained resource. Known values are:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar spark_version: Gets or sets the Apache Spark version.
    :vartype spark_version: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "constrained_resource_id": {"readonly": True},
        "family": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "auto_pause": {"key": "properties.autoPause", "type": "SynapseSparkPoolAutoPauseProperties"},
        "auto_scale": {"key": "properties.autoScale", "type": "SynapseSparkPoolAutoScaleProperties"},
        "constrained_resource_id": {"key": "properties.constrainedResourceId", "type": "str"},
        "family": {"key": "properties.family", "type": "str"},
        "library_requirements": {
            "key": "properties.libraryRequirements",
            "type": "SynapseSparkPoolLibraryRequirementsProperties",
        },
        "node_count": {"key": "properties.nodeCount", "type": "int"},
        "node_size": {"key": "properties.nodeSize", "type": "str"},
        "node_size_family": {"key": "properties.nodeSizeFamily", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "spark_version": {"key": "properties.sparkVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        auto_pause: Optional["_models.SynapseSparkPoolAutoPauseProperties"] = None,
        auto_scale: Optional["_models.SynapseSparkPoolAutoScaleProperties"] = None,
        library_requirements: Optional["_models.SynapseSparkPoolLibraryRequirementsProperties"] = None,
        node_count: Optional[int] = None,
        node_size: Optional[Union[str, "_models.NodeSize"]] = None,
        node_size_family: Optional[Union[str, "_models.NodeSizeFamily"]] = None,
        spark_version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword auto_pause: Gets or sets auto-pausing properties.
        :paramtype auto_pause: ~azure.mgmt.datacollaboration.models.SynapseSparkPoolAutoPauseProperties
        :keyword auto_scale: Gets or sets auto-scaling properties.
        :paramtype auto_scale: ~azure.mgmt.datacollaboration.models.SynapseSparkPoolAutoScaleProperties
        :keyword library_requirements: Gets or sets library requirements properties.
        :paramtype library_requirements:
         ~azure.mgmt.datacollaboration.models.SynapseSparkPoolLibraryRequirementsProperties
        :keyword node_count: Gets or sets the number of nodes in the Big Data pool.
        :paramtype node_count: int
        :keyword node_size: Gets or sets the level of compute power that each node in the Synapse Spark
         pool has. Known values are: "None", "Small", "Medium", "Large", "XLarge", "XXLarge", and
         "XXXLarge".
        :paramtype node_size: str or ~azure.mgmt.datacollaboration.models.NodeSize
        :keyword node_size_family: Gets or sets the kind of nodes that the Big Data pool provides.
         Known values are: "None" and "MemoryOptimized".
        :paramtype node_size_family: str or ~azure.mgmt.datacollaboration.models.NodeSizeFamily
        :keyword spark_version: Gets or sets the Apache Spark version.
        :paramtype spark_version: str
        """
        super().__init__(**kwargs)
        self.kind = "SynapseSparkPool"  # type: str
        self.auto_pause = auto_pause
        self.auto_scale = auto_scale
        self.constrained_resource_id = None
        self.family = None
        self.library_requirements = library_requirements
        self.node_count = node_count
        self.node_size = node_size
        self.node_size_family = node_size_family
        self.provisioning_state = None
        self.spark_version = spark_version


class SynapseSparkPoolAutoPauseProperties(_serialization.Model):
    """Spark pool auto-pausing properties.

    All required parameters must be populated in order to send to Azure.

    :ivar delay_in_minutes: Gets or sets number of minutes of idle time before the Big Data
     pool is automatically paused. Required.
    :vartype delay_in_minutes: int
    :ivar enabled: Gets or sets whether auto-pausing is enabled for the Big Data pool. Required.
    :vartype enabled: bool
    """

    _validation = {
        "delay_in_minutes": {"required": True},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "delay_in_minutes": {"key": "delayInMinutes", "type": "int"},
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(self, *, delay_in_minutes: int, enabled: bool, **kwargs):
        """
        :keyword delay_in_minutes: Gets or sets number of minutes of idle time before the Big Data
         pool is automatically paused. Required.
        :paramtype delay_in_minutes: int
        :keyword enabled: Gets or sets whether auto-pausing is enabled for the Big Data pool. Required.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.delay_in_minutes = delay_in_minutes
        self.enabled = enabled


class SynapseSparkPoolAutoScaleProperties(_serialization.Model):
    """Spark pool auto-scaling properties.

    :ivar enabled: Gets or sets whether automatic scaling is enabled for the Big Data
     pool.
    :vartype enabled: bool
    :ivar max_node_count: Gets or sets the maximum number of nodes the Big Data pool can
     support.
    :vartype max_node_count: int
    :ivar min_node_count: Gets or sets the minimum number of nodes the Big Data pool can
     support.
    :vartype min_node_count: int
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "max_node_count": {"key": "maxNodeCount", "type": "int"},
        "min_node_count": {"key": "minNodeCount", "type": "int"},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        max_node_count: Optional[int] = None,
        min_node_count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword enabled: Gets or sets whether automatic scaling is enabled for the Big Data
         pool.
        :paramtype enabled: bool
        :keyword max_node_count: Gets or sets the maximum number of nodes the Big Data pool can
         support.
        :paramtype max_node_count: int
        :keyword min_node_count: Gets or sets the minimum number of nodes the Big Data pool can
         support.
        :paramtype min_node_count: int
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.max_node_count = max_node_count
        self.min_node_count = min_node_count


class SynapseSparkPoolLibraryRequirementsProperties(_serialization.Model):
    """Spark pool library requirements properties.

    :ivar content: Gets or sets the library requirements.
    :vartype content: str
    """

    _attribute_map = {
        "content": {"key": "content", "type": "str"},
    }

    def __init__(self, *, content: Optional[str] = None, **kwargs):
        """
        :keyword content: Gets or sets the library requirements.
        :paramtype content: str
        """
        super().__init__(**kwargs)
        self.content = content


class SynapseSparkScript(Script):  # pylint: disable=too-many-instance-attributes
    """A type of script based on the compute engine.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar kind: Kind of script. Required. Known values are: "DataAsset", "ScriptOutput",
     "SynapseSparkPool", "Script", "Location", "ScriptParameter", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "ConsoleLog", "EventLog",
     "SynapseSpark", "DataMovement", "ScriptExecution", "DiagnosticsLog", "DiagnosticLevel",
     "Output", "DataAssetReference", and "ScriptReference".
    :vartype kind: str or ~azure.mgmt.datacollaboration.models.Kind
    :ivar content: The script content. Required.
    :vartype content: str
    :ivar language: The script language. Required. "Python"
    :vartype language: str or ~azure.mgmt.datacollaboration.models.Language
    :ivar parameters: The list of overridable script parameters.
    :vartype parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
    :ivar provisioning_state: Provisioning state of the script. Known values are: "Succeeded",
     "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar purpose: Script purpose. Required. Known values are: "Body", "InputAdapter", and
     "OutputAdapter".
    :vartype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
    :ivar revision: Latest script revision.
    :vartype revision: int
    :ivar script_id: Unique id for identifying a script resource.
    :vartype script_id: str
    :ivar sinks: The list of parameters the script can use as it's data sinks. Required.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data sources. Required.
    :vartype sources: list[str]
    :ivar visibility: Script visibility mode. Required. Known values are: "ShowAll" and
     "HiddenContent".
    :vartype visibility: str or ~azure.mgmt.datacollaboration.models.Visibility
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "content": {"required": True},
        "language": {"required": True},
        "provisioning_state": {"readonly": True},
        "purpose": {"required": True},
        "revision": {"readonly": True},
        "script_id": {"readonly": True},
        "sinks": {"required": True},
        "sources": {"required": True},
        "visibility": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "content": {"key": "properties.content", "type": "str"},
        "language": {"key": "properties.language", "type": "str"},
        "parameters": {"key": "properties.parameters", "type": "[ScriptParameter]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "purpose": {"key": "properties.purpose", "type": "str"},
        "revision": {"key": "properties.revision", "type": "int"},
        "script_id": {"key": "properties.scriptId", "type": "str"},
        "sinks": {"key": "properties.sinks", "type": "[str]"},
        "sources": {"key": "properties.sources", "type": "[str]"},
        "visibility": {"key": "properties.visibility", "type": "str"},
    }

    def __init__(
        self,
        *,
        content: str,
        language: Union[str, "_models.Language"],
        purpose: Union[str, "_models.Purpose"],
        sinks: List[str],
        sources: List[str],
        visibility: Union[str, "_models.Visibility"],
        parameters: Optional[List["_models.ScriptParameter"]] = None,
        **kwargs
    ):
        """
        :keyword content: The script content. Required.
        :paramtype content: str
        :keyword language: The script language. Required. "Python"
        :paramtype language: str or ~azure.mgmt.datacollaboration.models.Language
        :keyword parameters: The list of overridable script parameters.
        :paramtype parameters: list[~azure.mgmt.datacollaboration.models.ScriptParameter]
        :keyword purpose: Script purpose. Required. Known values are: "Body", "InputAdapter", and
         "OutputAdapter".
        :paramtype purpose: str or ~azure.mgmt.datacollaboration.models.Purpose
        :keyword sinks: The list of parameters the script can use as it's data sinks. Required.
        :paramtype sinks: list[str]
        :keyword sources: The list of parameters the script can use as it's data sources. Required.
        :paramtype sources: list[str]
        :keyword visibility: Script visibility mode. Required. Known values are: "ShowAll" and
         "HiddenContent".
        :paramtype visibility: str or ~azure.mgmt.datacollaboration.models.Visibility
        """
        super().__init__(**kwargs)
        self.kind = "SynapseSpark"  # type: str
        self.content = content
        self.language = language
        self.parameters = parameters
        self.provisioning_state = None
        self.purpose = purpose
        self.revision = None
        self.script_id = None
        self.sinks = sinks
        self.sources = sources
        self.visibility = visibility


class VirtualOutputReference(ProxyDto):
    """Reference to a virtual output.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar output_policy_resource_id: Azure resource id of the referenced output policy.
    :vartype output_policy_resource_id: str
    :ivar virtual_output_reference_id: Unique id for identifying a virtual output reference
     resource.
    :vartype virtual_output_reference_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "output_policy_resource_id": {"readonly": True},
        "virtual_output_reference_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "output_policy_resource_id": {"key": "properties.outputPolicyResourceId", "type": "str"},
        "virtual_output_reference_id": {"key": "properties.virtualOutputReferenceId", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.output_policy_resource_id = None
        self.virtual_output_reference_id = None


class VirtualOutputReferenceList(_serialization.Model):
    """List response for get output references.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.VirtualOutputReference]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[VirtualOutputReference]"},
    }

    def __init__(self, *, value: List["_models.VirtualOutputReference"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.VirtualOutputReference]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Workspace(DefaultDto):  # pylint: disable=too-many-instance-attributes
    """Workspace to hold data collaboration workloads.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar system_data: System Data of the Azure resource.
    :vartype system_data: ~azure.mgmt.datacollaboration.models.SystemData
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar location: Location of the azure resource.
    :vartype location: str
    :ivar tags: Tags on the azure resource.
    :vartype tags: dict[str, str]
    :ivar identity: Identity Info on the Workspace. Required.
    :vartype identity: ~azure.mgmt.datacollaboration.models.Identity
    :ivar display_name: Display name of the workspace.
    :vartype display_name: str
    :ivar provisioning_state: Provisioning state of the Workspace. Known values are: "Succeeded",
     "Creating", "Updating", "Deleting", "Moving", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.datacollaboration.models.ProvisioningState
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "type": {"readonly": True},
        "identity": {"required": True},
        "provisioning_state": {"readonly": True},
        "user_email": {"readonly": True},
        "user_name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "identity": {"key": "identity", "type": "Identity"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "user_email": {"key": "properties.userEmail", "type": "str"},
        "user_name": {"key": "properties.userName", "type": "str"},
    }

    def __init__(
        self,
        *,
        identity: "_models.Identity",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword location: Location of the azure resource.
        :paramtype location: str
        :keyword tags: Tags on the azure resource.
        :paramtype tags: dict[str, str]
        :keyword identity: Identity Info on the Workspace. Required.
        :paramtype identity: ~azure.mgmt.datacollaboration.models.Identity
        :keyword display_name: Display name of the workspace.
        :paramtype display_name: str
        """
        super().__init__(location=location, tags=tags, **kwargs)
        self.identity = identity
        self.display_name = display_name
        self.provisioning_state = None
        self.user_email = None
        self.user_name = None


class WorkspaceList(_serialization.Model):
    """List response for get Workspaces.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The Url of next result page.
    :vartype next_link: str
    :ivar value: Collection of items of type DataTransferObjects. Required.
    :vartype value: list[~azure.mgmt.datacollaboration.models.Workspace]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[Workspace]"},
    }

    def __init__(self, *, value: List["_models.Workspace"], next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The Url of next result page.
        :paramtype next_link: str
        :keyword value: Collection of items of type DataTransferObjects. Required.
        :paramtype value: list[~azure.mgmt.datacollaboration.models.Workspace]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class WorkspaceUpdateParameters(_serialization.Model):
    """Update parameters for workspaces.

    :ivar tags: Tags on the azure resource.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Tags on the azure resource.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags
