# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.datalake.analytics import DataLakeAnalyticsAccountManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDataLakeAnalyticsAccountManagementAccountsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DataLakeAnalyticsAccountManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_list(self, resource_group):
        response = self.client.accounts.list(
            api_version="2019-11-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_list_by_resource_group(self, resource_group):
        response = self.client.accounts.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2019-11-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_begin_create(self, resource_group):
        response = self.client.accounts.begin_create(
            resource_group_name=resource_group.name,
            account_name="str",
            parameters={
                "dataLakeStoreAccounts": [{"name": "str", "suffix": "str"}],
                "defaultDataLakeStoreAccount": "str",
                "location": "str",
                "computePolicies": [
                    {
                        "name": "str",
                        "objectId": "str",
                        "objectType": "str",
                        "maxDegreeOfParallelismPerJob": 0,
                        "minPriorityPerJob": 0,
                    }
                ],
                "firewallAllowAzureIps": "str",
                "firewallRules": [{"endIpAddress": "str", "name": "str", "startIpAddress": "str"}],
                "firewallState": "str",
                "maxDegreeOfParallelism": 30,
                "maxDegreeOfParallelismPerJob": 32,
                "maxJobCount": 3,
                "minPriorityPerJob": 0,
                "mixedTokensMode": "str",
                "newTier": "str",
                "queryStoreRetention": 30,
                "storageAccounts": [{"accessKey": "str", "name": "str", "suffix": "azuredatalakestore.net"}],
                "tags": {"str": "str"},
            },
            api_version="2019-11-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_get(self, resource_group):
        response = self.client.accounts.get(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2019-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_begin_update(self, resource_group):
        response = self.client.accounts.begin_update(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2019-11-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_begin_delete(self, resource_group):
        response = self.client.accounts.begin_delete(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2019-11-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_check_name_availability(self, resource_group):
        response = self.client.accounts.check_name_availability(
            location="str",
            parameters={"name": "str", "type": "str"},
            api_version="2019-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_transfer_analytics_units(self, resource_group):
        response = self.client.accounts.transfer_analytics_units(
            resource_group_name=resource_group.name,
            account_name="str",
            parameters={
                "newSystemMax": 0,
                "participants": [{"id": "str", "newSystemMax": 0}],
                "recipients": [{"id": "str", "newSystemMax": 0}],
            },
            api_version="2019-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_accounts_transfer_eco_analytics_units(self, resource_group):
        response = self.client.accounts.transfer_eco_analytics_units(
            resource_group_name=resource_group.name,
            account_name="str",
            parameters={
                "newSystemMax": 0,
                "participants": [{"id": "str", "newSystemMax": 0}],
                "recipients": [{"id": "str", "newSystemMax": 0}],
            },
            api_version="2019-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...
