# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._storage_accounts_operations import (
    build_add_request,
    build_delete_request,
    build_get_request,
    build_get_storage_container_request,
    build_list_by_account_request,
    build_list_sas_tokens_request,
    build_list_storage_containers_request,
    build_update_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class StorageAccountsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.datalake.analytics.account.aio.DataLakeAnalyticsAccountManagementClient`'s
        :attr:`storage_accounts` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_account(
        self,
        resource_group_name: str,
        account_name: str,
        filter: Optional[str] = None,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[str] = None,
        orderby: Optional[str] = None,
        count: Optional[bool] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.StorageAccountInformation"]:
        # pylint: disable=line-too-long
        """Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake
        Analytics account. The response includes a link to the next page, if any.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param filter: The OData filter. Optional. Default value is None.
        :type filter: str
        :param top: The number of items to return. Optional. Default value is None.
        :type top: int
        :param skip: The number of items to skip over before returning elements. Optional. Default
         value is None.
        :type skip: int
        :param select: OData Select statement. Limits the properties on each entry to just those
         requested, e.g. Categories?$select=CategoryName,Description. Optional. Default value is None.
        :type select: str
        :param orderby: OrderBy clause. One or more comma-separated expressions with an optional "asc"
         (the default) or "desc" depending on the order you'd like the values sorted, e.g.
         Categories?$orderby=CategoryName desc. Optional. Default value is None.
        :type orderby: str
        :param count: The Boolean value of true or false to request a count of the matching resources
         included with the resources in the response, e.g. Categories?$count=true. Optional. Default
         value is None.
        :type count: bool
        :return: An iterator like instance of either StorageAccountInformation or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.datalake.analytics.account.models.StorageAccountInformation]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.StorageAccountInformationListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_by_account_request(
                    resource_group_name=resource_group_name,
                    account_name=account_name,
                    subscription_id=self._config.subscription_id,
                    filter=filter,
                    top=top,
                    skip=skip,
                    select=select,
                    orderby=orderby,
                    count=count,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("StorageAccountInformationListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def add(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: _models.AddStorageAccountParameters,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Updates the specified Data Lake Analytics account to add an Azure Storage account.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure Storage account to add. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and optional suffix for the Azure
         Storage Account. Required.
        :type parameters: ~azure.mgmt.datalake.analytics.account.models.AddStorageAccountParameters
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Updates the specified Data Lake Analytics account to add an Azure Storage account.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure Storage account to add. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and optional suffix for the Azure
         Storage Account. Required.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: Union[_models.AddStorageAccountParameters, IO[bytes]],
        **kwargs: Any
    ) -> None:
        """Updates the specified Data Lake Analytics account to add an Azure Storage account.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure Storage account to add. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and optional suffix for the Azure
         Storage Account. Is either a AddStorageAccountParameters type or a IO[bytes] type. Required.
        :type parameters: ~azure.mgmt.datalake.analytics.account.models.AddStorageAccountParameters or
         IO[bytes]
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "AddStorageAccountParameters")

        _request = build_add_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            storage_account_name=storage_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get(
        self, resource_group_name: str, account_name: str, storage_account_name: str, **kwargs: Any
    ) -> _models.StorageAccountInformation:
        """Gets the specified Azure Storage account linked to the given Data Lake Analytics account.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure Storage account for which to retrieve the
         details. Required.
        :type storage_account_name: str
        :return: StorageAccountInformation or the result of cls(response)
        :rtype: ~azure.mgmt.datalake.analytics.account.models.StorageAccountInformation
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.StorageAccountInformation] = kwargs.pop("cls", None)

        _request = build_get_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            storage_account_name=storage_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("StorageAccountInformation", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: Optional[_models.UpdateStorageAccountParameters] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as
        the access key and/or suffix.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The Azure Storage account to modify. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and suffix to update the storage
         account with, if any. Passing nothing results in no change. Default value is None.
        :type parameters: ~azure.mgmt.datalake.analytics.account.models.UpdateStorageAccountParameters
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as
        the access key and/or suffix.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The Azure Storage account to modify. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and suffix to update the storage
         account with, if any. Passing nothing results in no change. Default value is None.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        resource_group_name: str,
        account_name: str,
        storage_account_name: str,
        parameters: Optional[Union[_models.UpdateStorageAccountParameters, IO[bytes]]] = None,
        **kwargs: Any
    ) -> None:
        """Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as
        the access key and/or suffix.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The Azure Storage account to modify. Required.
        :type storage_account_name: str
        :param parameters: The parameters containing the access key and suffix to update the storage
         account with, if any. Passing nothing results in no change. Is either a
         UpdateStorageAccountParameters type or a IO[bytes] type. Default value is None.
        :type parameters: ~azure.mgmt.datalake.analytics.account.models.UpdateStorageAccountParameters
         or IO[bytes]
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            if parameters is not None:
                _json = self._serialize.body(parameters, "UpdateStorageAccountParameters")
            else:
                _json = None

        _request = build_update_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            storage_account_name=storage_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def delete(
        self, resource_group_name: str, account_name: str, storage_account_name: str, **kwargs: Any
    ) -> None:
        """Updates the specified Data Lake Analytics account to remove an Azure Storage account.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure Storage account to remove. Required.
        :type storage_account_name: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            storage_account_name=storage_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_storage_containers(
        self, resource_group_name: str, account_name: str, storage_account_name: str, **kwargs: Any
    ) -> AsyncIterable["_models.StorageContainer"]:
        """Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics
        and Azure Storage account combination. The response includes a link to the next page of
        results, if any.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure storage account from which to list blob
         containers. Required.
        :type storage_account_name: str
        :return: An iterator like instance of either StorageContainer or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.datalake.analytics.account.models.StorageContainer]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.StorageContainerListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_storage_containers_request(
                    resource_group_name=resource_group_name,
                    account_name=account_name,
                    storage_account_name=storage_account_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("StorageContainerListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_storage_container(
        self, resource_group_name: str, account_name: str, storage_account_name: str, container_name: str, **kwargs: Any
    ) -> _models.StorageContainer:
        """Gets the specified Azure Storage container associated with the given Data Lake Analytics and
        Azure Storage accounts.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure storage account from which to retrieve the
         blob container. Required.
        :type storage_account_name: str
        :param container_name: The name of the Azure storage container to retrieve. Required.
        :type container_name: str
        :return: StorageContainer or the result of cls(response)
        :rtype: ~azure.mgmt.datalake.analytics.account.models.StorageContainer
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.StorageContainer] = kwargs.pop("cls", None)

        _request = build_get_storage_container_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            storage_account_name=storage_account_name,
            container_name=container_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("StorageContainer", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_sas_tokens(
        self, resource_group_name: str, account_name: str, storage_account_name: str, container_name: str, **kwargs: Any
    ) -> AsyncIterable["_models.SasTokenInformation"]:
        """Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account
        and container combination.

        :param resource_group_name: The name of the Azure resource group. Required.
        :type resource_group_name: str
        :param account_name: The name of the Data Lake Analytics account. Required.
        :type account_name: str
        :param storage_account_name: The name of the Azure storage account for which the SAS token is
         being requested. Required.
        :type storage_account_name: str
        :param container_name: The name of the Azure storage container for which the SAS token is being
         requested. Required.
        :type container_name: str
        :return: An iterator like instance of either SasTokenInformation or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.datalake.analytics.account.models.SasTokenInformation]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.SasTokenInformationListResult] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_sas_tokens_request(
                    resource_group_name=resource_group_name,
                    account_name=account_name,
                    storage_account_name=storage_account_name,
                    container_name=container_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("SasTokenInformationListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)
