# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.type: Optional[str] = None
        self.system_data: Optional["_models.SystemData"] = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    """


class Alert(ProxyResource):
    """A alert associated with SAP monitor.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar errors: Defines the alert instance errors.
    :vartype errors: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
    :ivar alert_rule_resource_id: ID of the alert rule resource created.
    :vartype alert_rule_resource_id: str
    :ivar template_name: Name of the alert template from which it was created.
    :vartype template_name: str
    :ivar provider_type: The provider type for alert. For example, the value can be SapHana.
    :vartype provider_type: str
    :ivar provider_names: Name of provider instances associated with the alert.
    :vartype provider_names: list[str]
    :ivar alert_rule_properties: Describes the properties of an alert.
    :vartype alert_rule_properties: ~azure.mgmt.workloads.sapmonitors.models.AlertRuleProperties
    :ivar provisioning_state: State of provisioning of the alert instance. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.WorkloadMonitorProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "errors": {"readonly": True},
        "alert_rule_resource_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "errors": {"key": "properties.errors", "type": "ErrorDetail"},
        "alert_rule_resource_id": {"key": "properties.alertRuleResourceId", "type": "str"},
        "template_name": {"key": "properties.templateName", "type": "str"},
        "provider_type": {"key": "properties.providerType", "type": "str"},
        "provider_names": {"key": "properties.providerNames", "type": "[str]"},
        "alert_rule_properties": {"key": "properties.alertRuleProperties", "type": "AlertRuleProperties"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        template_name: Optional[str] = None,
        provider_type: Optional[str] = None,
        provider_names: Optional[List[str]] = None,
        alert_rule_properties: Optional["_models.AlertRuleProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword template_name: Name of the alert template from which it was created.
        :paramtype template_name: str
        :keyword provider_type: The provider type for alert. For example, the value can be SapHana.
        :paramtype provider_type: str
        :keyword provider_names: Name of provider instances associated with the alert.
        :paramtype provider_names: list[str]
        :keyword alert_rule_properties: Describes the properties of an alert.
        :paramtype alert_rule_properties: ~azure.mgmt.workloads.sapmonitors.models.AlertRuleProperties
        """
        super().__init__(**kwargs)
        self.errors: Optional["_models.ErrorDetail"] = None
        self.alert_rule_resource_id: Optional[str] = None
        self.template_name = template_name
        self.provider_type = provider_type
        self.provider_names = provider_names
        self.alert_rule_properties = alert_rule_properties
        self.provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = None


class AlertListResult(_serialization.Model):
    """The response of a Alert list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Alert items on this page. Required.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.Alert]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Alert]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Alert"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Alert items on this page. Required.
        :paramtype value: list[~azure.mgmt.workloads.sapmonitors.models.Alert]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AlertQueryParameter(_serialization.Model):
    """Defines the Alert Query Parameter.

    :ivar name: The name of the alert query parameter.
    :vartype name: str
    :ivar value: The value of the alert query parameter.
    :vartype value: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name of the alert query parameter.
        :paramtype name: str
        :keyword value: The value of the alert query parameter.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.value = value


class AlertRuleProperties(_serialization.Model):
    """Describes the properties of an alert.

    :ivar status: Indicates whether the alert is in an enabled state. Known values are: "Enabled"
     and "Disabled".
    :vartype status: str or ~azure.mgmt.workloads.sapmonitors.models.AlertRuleStatus
    :ivar severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is
     severest.
    :vartype severity: int
    :ivar action_groups: Action Group resource Ids to invoke when the alert fires.
    :vartype action_groups: list[str]
    :ivar threshold: The threshold of the alert.
    :vartype threshold: int
    :ivar threshold_operator: The threshold operator of the alert. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or
     ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
    :ivar window_size: The period of time on which the Alert query will be executed.
    :vartype window_size: int
    :ivar evaluation_frequency: How often the scheduled query rule is evaluated.
    :vartype evaluation_frequency: int
    :ivar failing_periods_to_alert: The number of failing periods to trigger an alert.
    :vartype failing_periods_to_alert: int
    :ivar failing_periods_operator: The operator for failing periods. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype failing_periods_operator: str or
     ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
    :ivar mute_actions_duration: Mute actions for the chosen period of time after the alert is
     fired.
    :vartype mute_actions_duration: int
    :ivar auto_mitigate: The value that indicates whether the alert should be automatically
     resolved or not. The default is Disable. Known values are: "Enable" and "Disable".
    :vartype auto_mitigate: str or ~azure.mgmt.workloads.sapmonitors.models.AlertAutoMitigate
    :ivar dimension: Evaluation of metric on a particular column.
    :vartype dimension: str
    :ivar alert_query_parameters: The alert query parameters.
    :vartype alert_query_parameters:
     list[~azure.mgmt.workloads.sapmonitors.models.AlertQueryParameter]
    """

    _validation = {
        "severity": {"maximum": 4, "minimum": 0},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "severity": {"key": "severity", "type": "int"},
        "action_groups": {"key": "actionGroups", "type": "[str]"},
        "threshold": {"key": "threshold", "type": "int"},
        "threshold_operator": {"key": "thresholdOperator", "type": "str"},
        "window_size": {"key": "windowSize", "type": "int"},
        "evaluation_frequency": {"key": "evaluationFrequency", "type": "int"},
        "failing_periods_to_alert": {"key": "failingPeriodsToAlert", "type": "int"},
        "failing_periods_operator": {"key": "failingPeriodsOperator", "type": "str"},
        "mute_actions_duration": {"key": "muteActionsDuration", "type": "int"},
        "auto_mitigate": {"key": "autoMitigate", "type": "str"},
        "dimension": {"key": "dimension", "type": "str"},
        "alert_query_parameters": {"key": "alertQueryParameters", "type": "[AlertQueryParameter]"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.AlertRuleStatus"]] = None,
        severity: Optional[int] = None,
        action_groups: Optional[List[str]] = None,
        threshold: Optional[int] = None,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        window_size: Optional[int] = None,
        evaluation_frequency: Optional[int] = None,
        failing_periods_to_alert: Optional[int] = None,
        failing_periods_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        mute_actions_duration: Optional[int] = None,
        auto_mitigate: Optional[Union[str, "_models.AlertAutoMitigate"]] = None,
        dimension: Optional[str] = None,
        alert_query_parameters: Optional[List["_models.AlertQueryParameter"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Indicates whether the alert is in an enabled state. Known values are:
         "Enabled" and "Disabled".
        :paramtype status: str or ~azure.mgmt.workloads.sapmonitors.models.AlertRuleStatus
        :keyword severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is
         severest.
        :paramtype severity: int
        :keyword action_groups: Action Group resource Ids to invoke when the alert fires.
        :paramtype action_groups: list[str]
        :keyword threshold: The threshold of the alert.
        :paramtype threshold: int
        :keyword threshold_operator: The threshold operator of the alert. Known values are: "LessThan",
         "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
        :paramtype threshold_operator: str or
         ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
        :keyword window_size: The period of time on which the Alert query will be executed.
        :paramtype window_size: int
        :keyword evaluation_frequency: How often the scheduled query rule is evaluated.
        :paramtype evaluation_frequency: int
        :keyword failing_periods_to_alert: The number of failing periods to trigger an alert.
        :paramtype failing_periods_to_alert: int
        :keyword failing_periods_operator: The operator for failing periods. Known values are:
         "LessThan", "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
        :paramtype failing_periods_operator: str or
         ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
        :keyword mute_actions_duration: Mute actions for the chosen period of time after the alert is
         fired.
        :paramtype mute_actions_duration: int
        :keyword auto_mitigate: The value that indicates whether the alert should be automatically
         resolved or not. The default is Disable. Known values are: "Enable" and "Disable".
        :paramtype auto_mitigate: str or ~azure.mgmt.workloads.sapmonitors.models.AlertAutoMitigate
        :keyword dimension: Evaluation of metric on a particular column.
        :paramtype dimension: str
        :keyword alert_query_parameters: The alert query parameters.
        :paramtype alert_query_parameters:
         list[~azure.mgmt.workloads.sapmonitors.models.AlertQueryParameter]
        """
        super().__init__(**kwargs)
        self.status = status
        self.severity = severity
        self.action_groups = action_groups
        self.threshold = threshold
        self.threshold_operator = threshold_operator
        self.window_size = window_size
        self.evaluation_frequency = evaluation_frequency
        self.failing_periods_to_alert = failing_periods_to_alert
        self.failing_periods_operator = failing_periods_operator
        self.mute_actions_duration = mute_actions_duration
        self.auto_mitigate = auto_mitigate
        self.dimension = dimension
        self.alert_query_parameters = alert_query_parameters


class AlertTemplate(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar errors: Defines the SAP monitor Alert Template errors.
    :vartype errors: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
    :ivar provisioning_state: State of provisioning of the Alert Template. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar template_display_name: Display name of the alert template.
    :vartype template_display_name: str
    :ivar provider_type: The provider type for alert template. For example, the value can be
     SapHana.
    :vartype provider_type: str
    :ivar description: Description of the template.
    :vartype description: str
    :ivar severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most
     severe and value of 4 is least severe.
    :vartype severity: int
    :ivar query: Query associated with the alert template.
    :vartype query: str
    :ivar threshold_operator: Operator used for threshold comparison. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or
     ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
    :ivar default_threshold: Default threshold value.
    :vartype default_threshold: int
    :ivar lower_bound: Minimum possible Default Threshold Value Associated with the Alert Template.
    :vartype lower_bound: int
    :ivar upper_bound: Maximum possible Default Threshold Value Associated with the Alert Template.
    :vartype upper_bound: int
    :ivar default_threshold_input_option: Input option for the default threshold. Known values are:
     "Required", "NotRequired", and "Optional".
    :vartype default_threshold_input_option: str or
     ~azure.mgmt.workloads.sapmonitors.models.DefaultThresholdInputOption
    :ivar alert_unit: Unit of the alert.
    :vartype alert_unit: str
    :ivar metric_measurement: Describes the properties for metric measurement in alerts template.
    :vartype metric_measurement:
     ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateMetricMeasurement
    :ivar query_input_parameters: Describes the Query Input Parameter properties in alerts
     template.
    :vartype query_input_parameters:
     list[~azure.mgmt.workloads.sapmonitors.models.AlertTemplateQueryInputParameter]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "errors": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "severity": {"maximum": 4, "minimum": 0},
        "query_input_parameters": {"max_items": 50, "min_items": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "errors": {"key": "properties.errors", "type": "ErrorDetail"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "template_display_name": {"key": "properties.templateDisplayName", "type": "str"},
        "provider_type": {"key": "properties.providerType", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "severity": {"key": "properties.severity", "type": "int"},
        "query": {"key": "properties.query", "type": "str"},
        "threshold_operator": {"key": "properties.thresholdOperator", "type": "str"},
        "default_threshold": {"key": "properties.defaultThreshold", "type": "int"},
        "lower_bound": {"key": "properties.lowerBound", "type": "int"},
        "upper_bound": {"key": "properties.upperBound", "type": "int"},
        "default_threshold_input_option": {"key": "properties.defaultThresholdInputOption", "type": "str"},
        "alert_unit": {"key": "properties.alertUnit", "type": "str"},
        "metric_measurement": {"key": "properties.metricMeasurement", "type": "AlertTemplateMetricMeasurement"},
        "query_input_parameters": {
            "key": "properties.queryInputParameters",
            "type": "[AlertTemplateQueryInputParameter]",
        },
    }

    def __init__(
        self,
        *,
        template_display_name: Optional[str] = None,
        provider_type: Optional[str] = None,
        description: Optional[str] = None,
        severity: Optional[int] = None,
        query: Optional[str] = None,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        default_threshold: Optional[int] = None,
        lower_bound: Optional[int] = None,
        upper_bound: Optional[int] = None,
        default_threshold_input_option: Optional[Union[str, "_models.DefaultThresholdInputOption"]] = None,
        alert_unit: Optional[str] = None,
        metric_measurement: Optional["_models.AlertTemplateMetricMeasurement"] = None,
        query_input_parameters: Optional[List["_models.AlertTemplateQueryInputParameter"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword template_display_name: Display name of the alert template.
        :paramtype template_display_name: str
        :keyword provider_type: The provider type for alert template. For example, the value can be
         SapHana.
        :paramtype provider_type: str
        :keyword description: Description of the template.
        :paramtype description: str
        :keyword severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is
         most severe and value of 4 is least severe.
        :paramtype severity: int
        :keyword query: Query associated with the alert template.
        :paramtype query: str
        :keyword threshold_operator: Operator used for threshold comparison. Known values are:
         "LessThan", "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
        :paramtype threshold_operator: str or
         ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
        :keyword default_threshold: Default threshold value.
        :paramtype default_threshold: int
        :keyword lower_bound: Minimum possible Default Threshold Value Associated with the Alert
         Template.
        :paramtype lower_bound: int
        :keyword upper_bound: Maximum possible Default Threshold Value Associated with the Alert
         Template.
        :paramtype upper_bound: int
        :keyword default_threshold_input_option: Input option for the default threshold. Known values
         are: "Required", "NotRequired", and "Optional".
        :paramtype default_threshold_input_option: str or
         ~azure.mgmt.workloads.sapmonitors.models.DefaultThresholdInputOption
        :keyword alert_unit: Unit of the alert.
        :paramtype alert_unit: str
        :keyword metric_measurement: Describes the properties for metric measurement in alerts
         template.
        :paramtype metric_measurement:
         ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateMetricMeasurement
        :keyword query_input_parameters: Describes the Query Input Parameter properties in alerts
         template.
        :paramtype query_input_parameters:
         list[~azure.mgmt.workloads.sapmonitors.models.AlertTemplateQueryInputParameter]
        """
        super().__init__(**kwargs)
        self.errors: Optional["_models.ErrorDetail"] = None
        self.provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = None
        self.template_display_name = template_display_name
        self.provider_type = provider_type
        self.description = description
        self.severity = severity
        self.query = query
        self.threshold_operator = threshold_operator
        self.default_threshold = default_threshold
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
        self.default_threshold_input_option = default_threshold_input_option
        self.alert_unit = alert_unit
        self.metric_measurement = metric_measurement
        self.query_input_parameters = query_input_parameters


class AlertTemplateListResult(_serialization.Model):
    """The response of a AlertTemplate list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The AlertTemplate items on this page. Required.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.AlertTemplate]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AlertTemplate]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.AlertTemplate"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The AlertTemplate items on this page. Required.
        :paramtype value: list[~azure.mgmt.workloads.sapmonitors.models.AlertTemplate]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AlertTemplateMetricMeasurement(_serialization.Model):
    """Defines the Alert Template MetricMeasurement Properties.

    :ivar threshold_operator: Operator used for threshold comparison. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or
     ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
    :ivar threshold: The Threshold Value Associated with the Alert Template for Metric Measurement.
    :vartype threshold: int
    :ivar metric_trigger_type: Metric Trigger Type Associated with the Alert Template for Metric
     Measurement. Known values are: "Consecutive" and "Total".
    :vartype metric_trigger_type: str or
     ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateMetricTriggerType
    :ivar metric_column: Metric Column Associated with the Alert Template for Metric Measurement.
    :vartype metric_column: str
    :ivar frequency_in_minutes: Frequency (mins) value Associated with the Alert Template for
     Metric Measurement.
    :vartype frequency_in_minutes: int
    :ivar time_window_in_minutes: Time Window (mins) Value Associated with the Alert Template for
     Metric Measurement.
    :vartype time_window_in_minutes: int
    """

    _attribute_map = {
        "threshold_operator": {"key": "thresholdOperator", "type": "str"},
        "threshold": {"key": "threshold", "type": "int"},
        "metric_trigger_type": {"key": "metricTriggerType", "type": "str"},
        "metric_column": {"key": "metricColumn", "type": "str"},
        "frequency_in_minutes": {"key": "frequencyInMinutes", "type": "int"},
        "time_window_in_minutes": {"key": "timeWindowInMinutes", "type": "int"},
    }

    def __init__(
        self,
        *,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        threshold: Optional[int] = None,
        metric_trigger_type: Optional[Union[str, "_models.AlertTemplateMetricTriggerType"]] = None,
        metric_column: Optional[str] = None,
        frequency_in_minutes: Optional[int] = None,
        time_window_in_minutes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword threshold_operator: Operator used for threshold comparison. Known values are:
         "LessThan", "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
        :paramtype threshold_operator: str or
         ~azure.mgmt.workloads.sapmonitors.models.ConditionalOperator
        :keyword threshold: The Threshold Value Associated with the Alert Template for Metric
         Measurement.
        :paramtype threshold: int
        :keyword metric_trigger_type: Metric Trigger Type Associated with the Alert Template for Metric
         Measurement. Known values are: "Consecutive" and "Total".
        :paramtype metric_trigger_type: str or
         ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateMetricTriggerType
        :keyword metric_column: Metric Column Associated with the Alert Template for Metric
         Measurement.
        :paramtype metric_column: str
        :keyword frequency_in_minutes: Frequency (mins) value Associated with the Alert Template for
         Metric Measurement.
        :paramtype frequency_in_minutes: int
        :keyword time_window_in_minutes: Time Window (mins) Value Associated with the Alert Template
         for Metric Measurement.
        :paramtype time_window_in_minutes: int
        """
        super().__init__(**kwargs)
        self.threshold_operator = threshold_operator
        self.threshold = threshold
        self.metric_trigger_type = metric_trigger_type
        self.metric_column = metric_column
        self.frequency_in_minutes = frequency_in_minutes
        self.time_window_in_minutes = time_window_in_minutes


class AlertTemplateQueryInputParameter(_serialization.Model):
    """Describes the Query Input Parameter properties in alerts template.

    :ivar name: Name of the Query Input Parameter.
    :vartype name: str
    :ivar type: Type of the Query Input Parameter. Known values are: "LogAnalyticsQuery",
     "ProviderProperty", and "CustomInput".
    :vartype type: str or ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateParameterType
    :ivar description: Description of the Query Input Parameter.
    :vartype description: str
    :ivar default_value: Default Value of the Query Input Parameter.
    :vartype default_value: str
    :ivar la_query: Log Analytics query associated with the parameter.
    :vartype la_query: str
    :ivar selection_mode: Selection mode for the parameter. Known values are: "Single" and
     "Multiple".
    :vartype selection_mode: str or
     ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateSelectionMode
    :ivar display_name: Display Name of the Query Input Parameter.
    :vartype display_name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
        "la_query": {"key": "laQuery", "type": "str"},
        "selection_mode": {"key": "selectionMode", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.AlertTemplateParameterType"]] = None,
        description: Optional[str] = None,
        default_value: Optional[str] = None,
        la_query: Optional[str] = None,
        selection_mode: Optional[Union[str, "_models.AlertTemplateSelectionMode"]] = None,
        display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the Query Input Parameter.
        :paramtype name: str
        :keyword type: Type of the Query Input Parameter. Known values are: "LogAnalyticsQuery",
         "ProviderProperty", and "CustomInput".
        :paramtype type: str or ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateParameterType
        :keyword description: Description of the Query Input Parameter.
        :paramtype description: str
        :keyword default_value: Default Value of the Query Input Parameter.
        :paramtype default_value: str
        :keyword la_query: Log Analytics query associated with the parameter.
        :paramtype la_query: str
        :keyword selection_mode: Selection mode for the parameter. Known values are: "Single" and
         "Multiple".
        :paramtype selection_mode: str or
         ~azure.mgmt.workloads.sapmonitors.models.AlertTemplateSelectionMode
        :keyword display_name: Display Name of the Query Input Parameter.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type
        self.description = description
        self.default_value = default_value
        self.la_query = la_query
        self.selection_mode = selection_mode
        self.display_name = display_name


class AppServicePlanConfiguration(_serialization.Model):
    """Configuration details of app service plan.

    :ivar tier: The App Service plan tier. Known values are: "ElasticPremium" and "PremiumV3".
    :vartype tier: str or ~azure.mgmt.workloads.sapmonitors.models.AppServicePlanTier
    :ivar capacity: The number of workers in app service plan. If this is not set or set to 0, auto
     scale will be configured for the app service plan, otherwise, instance count is set to this
     number.
    :vartype capacity: int
    """

    _validation = {
        "capacity": {"minimum": 0},
    }

    _attribute_map = {
        "tier": {"key": "tier", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(
        self,
        *,
        tier: Optional[Union[str, "_models.AppServicePlanTier"]] = None,
        capacity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tier: The App Service plan tier. Known values are: "ElasticPremium" and "PremiumV3".
        :paramtype tier: str or ~azure.mgmt.workloads.sapmonitors.models.AppServicePlanTier
        :keyword capacity: The number of workers in app service plan. If this is not set or set to 0,
         auto scale will be configured for the app service plan, otherwise, instance count is set to
         this number.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.tier = tier
        self.capacity = capacity


class ProviderSpecificProperties(_serialization.Model):
    """Gets or sets the provider specific properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Db2ProviderInstanceProperties, MsSqlServerProviderInstanceProperties,
    OracleProviderInstanceProperties, PrometheusHaClusterProviderInstanceProperties,
    PrometheusOsProviderInstanceProperties, HanaDbProviderInstanceProperties,
    SapNetWeaverProviderInstanceProperties

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
    }

    _subtype_map = {
        "provider_type": {
            "Db2": "Db2ProviderInstanceProperties",
            "MsSqlServer": "MsSqlServerProviderInstanceProperties",
            "Oracle": "OracleProviderInstanceProperties",
            "PrometheusHaCluster": "PrometheusHaClusterProviderInstanceProperties",
            "PrometheusOS": "PrometheusOsProviderInstanceProperties",
            "SapHana": "HanaDbProviderInstanceProperties",
            "SapNetWeaver": "SapNetWeaverProviderInstanceProperties",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider_type: Optional[str] = None


class Db2ProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the DB2 provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar hostname: Gets or sets the target virtual machine name.
    :vartype hostname: str
    :ivar db_name: Gets or sets the db2 database name.
    :vartype db_name: str
    :ivar db_port: Gets or sets the db2 database sql port.
    :vartype db_port: str
    :ivar db_username: Gets or sets the db2 database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the db2 database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB2 Database.
    :vartype ssl_certificate_uri: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "hostname": {"key": "hostname", "type": "str"},
        "db_name": {"key": "dbName", "type": "str"},
        "db_port": {"key": "dbPort", "type": "str"},
        "db_username": {"key": "dbUsername", "type": "str"},
        "db_password": {"key": "dbPassword", "type": "str"},
        "db_password_uri": {"key": "dbPasswordUri", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
    }

    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_name: Optional[str] = None,
        db_port: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hostname: Gets or sets the target virtual machine name.
        :paramtype hostname: str
        :keyword db_name: Gets or sets the db2 database name.
        :paramtype db_name: str
        :keyword db_port: Gets or sets the db2 database sql port.
        :paramtype db_port: str
        :keyword db_username: Gets or sets the db2 database user name.
        :paramtype db_username: str
        :keyword db_password: Gets or sets the db2 database password.
        :paramtype db_password: str
        :keyword db_password_uri: Gets or sets the key vault URI to secret with the database password.
        :paramtype db_password_uri: str
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB2
         Database.
        :paramtype ssl_certificate_uri: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "Db2"
        self.hostname = hostname
        self.db_name = db_name
        self.db_port = db_port
        self.db_username = db_username
        self.db_password = db_password
        self.db_password_uri = db_password_uri
        self.sap_sid = sap_sid
        self.ssl_preference = ssl_preference
        self.ssl_certificate_uri = ssl_certificate_uri


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.info: Optional[JSON] = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.workloads.sapmonitors.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.workloads.sapmonitors.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code: Optional[str] = None
        self.message: Optional[str] = None
        self.target: Optional[str] = None
        self.details: Optional[List["_models.ErrorDetail"]] = None
        self.additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class HanaDbProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar hostname: Gets or sets the target virtual machine size.
    :vartype hostname: str
    :ivar db_name: Gets or sets the hana database name.
    :vartype db_name: str
    :ivar sql_port: Gets or sets the database sql port.
    :vartype sql_port: str
    :ivar instance_number: Gets or sets the database instance number.
    :vartype instance_number: str
    :ivar db_username: Gets or sets the database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB.
    :vartype ssl_certificate_uri: str
    :ivar ssl_host_name_in_certificate: Gets or sets the hostname(s) in the SSL certificate.
    :vartype ssl_host_name_in_certificate: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "hostname": {"key": "hostname", "type": "str"},
        "db_name": {"key": "dbName", "type": "str"},
        "sql_port": {"key": "sqlPort", "type": "str"},
        "instance_number": {"key": "instanceNumber", "type": "str"},
        "db_username": {"key": "dbUsername", "type": "str"},
        "db_password": {"key": "dbPassword", "type": "str"},
        "db_password_uri": {"key": "dbPasswordUri", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
        "ssl_host_name_in_certificate": {"key": "sslHostNameInCertificate", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
    }

    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_name: Optional[str] = None,
        sql_port: Optional[str] = None,
        instance_number: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        ssl_certificate_uri: Optional[str] = None,
        ssl_host_name_in_certificate: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        sap_sid: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hostname: Gets or sets the target virtual machine size.
        :paramtype hostname: str
        :keyword db_name: Gets or sets the hana database name.
        :paramtype db_name: str
        :keyword sql_port: Gets or sets the database sql port.
        :paramtype sql_port: str
        :keyword instance_number: Gets or sets the database instance number.
        :paramtype instance_number: str
        :keyword db_username: Gets or sets the database user name.
        :paramtype db_username: str
        :keyword db_password: Gets or sets the database password.
        :paramtype db_password: str
        :keyword db_password_uri: Gets or sets the key vault URI to secret with the database password.
        :paramtype db_password_uri: str
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB.
        :paramtype ssl_certificate_uri: str
        :keyword ssl_host_name_in_certificate: Gets or sets the hostname(s) in the SSL certificate.
        :paramtype ssl_host_name_in_certificate: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "SapHana"
        self.hostname = hostname
        self.db_name = db_name
        self.sql_port = sql_port
        self.instance_number = instance_number
        self.db_username = db_username
        self.db_password = db_password
        self.db_password_uri = db_password_uri
        self.ssl_certificate_uri = ssl_certificate_uri
        self.ssl_host_name_in_certificate = ssl_host_name_in_certificate
        self.ssl_preference = ssl_preference
        self.sap_sid = sap_sid


class Health(_serialization.Model):
    """Resource health details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar health_state: Health state of the resource. Known values are: "Healthy", "Degraded",
     "Unavailable", and "Unknown".
    :vartype health_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.WorkloadProviderInstanceHealthState
    :ivar impacting_reasons: Reasons impacting health state.
    :vartype impacting_reasons: str
    """

    _validation = {
        "health_state": {"readonly": True},
        "impacting_reasons": {"readonly": True},
    }

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "impacting_reasons": {"key": "impactingReasons", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.health_state: Optional[Union[str, "_models.WorkloadProviderInstanceHealthState"]] = None
        self.impacting_reasons: Optional[str] = None


class ManagedResourceGroupConfiguration(_serialization.Model):
    """Managed resource group configuration.

    :ivar name: Managed resource group name.
    :vartype name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Managed resource group name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.workloads.sapmonitors.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.workloads.sapmonitors.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.tenant_id: Optional[str] = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Monitor(TrackedResource):
    """SAP monitor info on Azure (ARM properties and SAP monitor properties).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentity
    :ivar provisioning_state: State of provisioning of the SAP monitor. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar errors: Defines the SAP monitor errors.
    :vartype errors: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
    :ivar app_location: The SAP monitor resources will be deployed in the SAP monitoring region.
     The subnet region should be same as the SAP monitoring region.
    :vartype app_location: str
    :ivar routing_preference: Sets the routing preference of the SAP monitor. By default only
     RFC1918 traffic is routed to the customer VNET. Known values are: "Default" and "RouteAll".
    :vartype routing_preference: str or ~azure.mgmt.workloads.sapmonitors.models.RoutingPreference
    :ivar zone_redundancy_preference: Sets the preference for zone redundancy on resources created
     for the SAP monitor. By default resources will be created which do not support zone redundancy.
    :vartype zone_redundancy_preference: str
    :ivar managed_resource_group_configuration: Managed resource group configuration.
    :vartype managed_resource_group_configuration:
     ~azure.mgmt.workloads.sapmonitors.models.ManagedResourceGroupConfiguration
    :ivar log_analytics_workspace_arm_id: The ARM ID of the Log Analytics Workspace that is used
     for SAP monitoring.
    :vartype log_analytics_workspace_arm_id: str
    :ivar monitor_subnet: The subnet which the SAP monitor will be deployed in.
    :vartype monitor_subnet: str
    :ivar app_service_plan_configuration: App service plan configuration.
    :vartype app_service_plan_configuration:
     ~azure.mgmt.workloads.sapmonitors.models.AppServicePlanConfiguration
    :ivar msi_arm_id: The ARM ID of the MSI used for SAP monitoring.
    :vartype msi_arm_id: str
    :ivar storage_account_arm_id: The ARM ID of the Storage account used for SAP monitoring.
    :vartype storage_account_arm_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
        "errors": {"readonly": True},
        "msi_arm_id": {"readonly": True},
        "storage_account_arm_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "errors": {"key": "properties.errors", "type": "ErrorDetail"},
        "app_location": {"key": "properties.appLocation", "type": "str"},
        "routing_preference": {"key": "properties.routingPreference", "type": "str"},
        "zone_redundancy_preference": {"key": "properties.zoneRedundancyPreference", "type": "str"},
        "managed_resource_group_configuration": {
            "key": "properties.managedResourceGroupConfiguration",
            "type": "ManagedResourceGroupConfiguration",
        },
        "log_analytics_workspace_arm_id": {"key": "properties.logAnalyticsWorkspaceArmId", "type": "str"},
        "monitor_subnet": {"key": "properties.monitorSubnet", "type": "str"},
        "app_service_plan_configuration": {
            "key": "properties.appServicePlanConfiguration",
            "type": "AppServicePlanConfiguration",
        },
        "msi_arm_id": {"key": "properties.msiArmId", "type": "str"},
        "storage_account_arm_id": {"key": "properties.storageAccountArmId", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        app_location: Optional[str] = None,
        routing_preference: Optional[Union[str, "_models.RoutingPreference"]] = None,
        zone_redundancy_preference: Optional[str] = None,
        managed_resource_group_configuration: Optional["_models.ManagedResourceGroupConfiguration"] = None,
        log_analytics_workspace_arm_id: Optional[str] = None,
        monitor_subnet: Optional[str] = None,
        app_service_plan_configuration: Optional["_models.AppServicePlanConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentity
        :keyword app_location: The SAP monitor resources will be deployed in the SAP monitoring region.
         The subnet region should be same as the SAP monitoring region.
        :paramtype app_location: str
        :keyword routing_preference: Sets the routing preference of the SAP monitor. By default only
         RFC1918 traffic is routed to the customer VNET. Known values are: "Default" and "RouteAll".
        :paramtype routing_preference: str or
         ~azure.mgmt.workloads.sapmonitors.models.RoutingPreference
        :keyword zone_redundancy_preference: Sets the preference for zone redundancy on resources
         created for the SAP monitor. By default resources will be created which do not support zone
         redundancy.
        :paramtype zone_redundancy_preference: str
        :keyword managed_resource_group_configuration: Managed resource group configuration.
        :paramtype managed_resource_group_configuration:
         ~azure.mgmt.workloads.sapmonitors.models.ManagedResourceGroupConfiguration
        :keyword log_analytics_workspace_arm_id: The ARM ID of the Log Analytics Workspace that is used
         for SAP monitoring.
        :paramtype log_analytics_workspace_arm_id: str
        :keyword monitor_subnet: The subnet which the SAP monitor will be deployed in.
        :paramtype monitor_subnet: str
        :keyword app_service_plan_configuration: App service plan configuration.
        :paramtype app_service_plan_configuration:
         ~azure.mgmt.workloads.sapmonitors.models.AppServicePlanConfiguration
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = None
        self.errors: Optional["_models.ErrorDetail"] = None
        self.app_location = app_location
        self.routing_preference = routing_preference
        self.zone_redundancy_preference = zone_redundancy_preference
        self.managed_resource_group_configuration = managed_resource_group_configuration
        self.log_analytics_workspace_arm_id = log_analytics_workspace_arm_id
        self.monitor_subnet = monitor_subnet
        self.app_service_plan_configuration = app_service_plan_configuration
        self.msi_arm_id: Optional[str] = None
        self.storage_account_arm_id: Optional[str] = None


class MonitorListResult(_serialization.Model):
    """The response of a Monitor list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Monitor items on this page. Required.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.Monitor]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Monitor]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Monitor"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Monitor items on this page. Required.
        :paramtype value: list[~azure.mgmt.workloads.sapmonitors.models.Monitor]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class MsSqlServerProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the SQL server provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar hostname: Gets or sets the SQL server host name.
    :vartype hostname: str
    :ivar db_port: Gets or sets the database sql port.
    :vartype db_port: str
    :ivar db_username: Gets or sets the database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SQL Database.
    :vartype ssl_certificate_uri: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "hostname": {"key": "hostname", "type": "str"},
        "db_port": {"key": "dbPort", "type": "str"},
        "db_username": {"key": "dbUsername", "type": "str"},
        "db_password": {"key": "dbPassword", "type": "str"},
        "db_password_uri": {"key": "dbPasswordUri", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
    }

    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_port: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hostname: Gets or sets the SQL server host name.
        :paramtype hostname: str
        :keyword db_port: Gets or sets the database sql port.
        :paramtype db_port: str
        :keyword db_username: Gets or sets the database user name.
        :paramtype db_username: str
        :keyword db_password: Gets or sets the database password.
        :paramtype db_password: str
        :keyword db_password_uri: Gets or sets the key vault URI to secret with the database password.
        :paramtype db_password_uri: str
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SQL
         Database.
        :paramtype ssl_certificate_uri: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "MsSqlServer"
        self.hostname = hostname
        self.db_port = db_port
        self.db_username = db_username
        self.db_password = db_password
        self.db_password_uri = db_password_uri
        self.sap_sid = sap_sid
        self.ssl_preference = ssl_preference
        self.ssl_certificate_uri = ssl_certificate_uri


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.workloads.sapmonitors.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.workloads.sapmonitors.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.workloads.sapmonitors.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.workloads.sapmonitors.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.is_data_action: Optional[bool] = None
        self.display = display
        self.origin: Optional[Union[str, "_models.Origin"]] = None
        self.action_type: Optional[Union[str, "_models.ActionType"]] = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider: Optional[str] = None
        self.resource: Optional[str] = None
        self.operation: Optional[str] = None
        self.description: Optional[str] = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value: Optional[List["_models.Operation"]] = None
        self.next_link: Optional[str] = None


class OracleProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the Oracle provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar hostname: Gets or sets the target virtual machine name.
    :vartype hostname: str
    :ivar db_port: Gets or sets the oracle database sql port.
    :vartype db_port: str
    :ivar db_name: Gets or sets the oracle database name.
    :vartype db_name: str
    :ivar db_username: Gets or sets the oracle database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the oracle database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the Oracle
     Database.
    :vartype ssl_certificate_uri: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "hostname": {"key": "hostname", "type": "str"},
        "db_port": {"key": "dbPort", "type": "str"},
        "db_name": {"key": "dbName", "type": "str"},
        "db_username": {"key": "dbUsername", "type": "str"},
        "db_password": {"key": "dbPassword", "type": "str"},
        "db_password_uri": {"key": "dbPasswordUri", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
    }

    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_port: Optional[str] = None,
        db_name: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hostname: Gets or sets the target virtual machine name.
        :paramtype hostname: str
        :keyword db_port: Gets or sets the oracle database sql port.
        :paramtype db_port: str
        :keyword db_name: Gets or sets the oracle database name.
        :paramtype db_name: str
        :keyword db_username: Gets or sets the oracle database user name.
        :paramtype db_username: str
        :keyword db_password: Gets or sets the oracle database password.
        :paramtype db_password: str
        :keyword db_password_uri: Gets or sets the key vault URI to secret with the database password.
        :paramtype db_password_uri: str
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the Oracle
         Database.
        :paramtype ssl_certificate_uri: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "Oracle"
        self.hostname = hostname
        self.db_port = db_port
        self.db_name = db_name
        self.db_username = db_username
        self.db_password = db_password
        self.db_password_uri = db_password_uri
        self.sap_sid = sap_sid
        self.ssl_preference = ssl_preference
        self.ssl_certificate_uri = ssl_certificate_uri


class PrometheusHaClusterProviderInstanceProperties(ProviderSpecificProperties):  # pylint: disable=name-too-long
    """Gets or sets the PrometheusHaCluster provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar prometheus_url: URL of the Node Exporter endpoint.
    :vartype prometheus_url: str
    :ivar hostname: Gets or sets the target machine name.
    :vartype hostname: str
    :ivar sid: Gets or sets the cluster sid.
    :vartype sid: str
    :ivar cluster_name: Gets or sets the clusterName.
    :vartype cluster_name: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the HA cluster
     exporter.
    :vartype ssl_certificate_uri: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "prometheus_url": {"key": "prometheusUrl", "type": "str"},
        "hostname": {"key": "hostname", "type": "str"},
        "sid": {"key": "sid", "type": "str"},
        "cluster_name": {"key": "clusterName", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
    }

    def __init__(
        self,
        *,
        prometheus_url: Optional[str] = None,
        hostname: Optional[str] = None,
        sid: Optional[str] = None,
        cluster_name: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword prometheus_url: URL of the Node Exporter endpoint.
        :paramtype prometheus_url: str
        :keyword hostname: Gets or sets the target machine name.
        :paramtype hostname: str
        :keyword sid: Gets or sets the cluster sid.
        :paramtype sid: str
        :keyword cluster_name: Gets or sets the clusterName.
        :paramtype cluster_name: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the HA cluster
         exporter.
        :paramtype ssl_certificate_uri: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "PrometheusHaCluster"
        self.prometheus_url = prometheus_url
        self.hostname = hostname
        self.sid = sid
        self.cluster_name = cluster_name
        self.ssl_preference = ssl_preference
        self.ssl_certificate_uri = ssl_certificate_uri


class PrometheusOsProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the PrometheusOS provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar prometheus_url: URL of the Node Exporter endpoint.
    :vartype prometheus_url: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the prometheus node
     exporter.
    :vartype ssl_certificate_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "prometheus_url": {"key": "prometheusUrl", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
    }

    def __init__(
        self,
        *,
        prometheus_url: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword prometheus_url: URL of the Node Exporter endpoint.
        :paramtype prometheus_url: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the prometheus
         node exporter.
        :paramtype ssl_certificate_uri: str
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        """
        super().__init__(**kwargs)
        self.provider_type: str = "PrometheusOS"
        self.prometheus_url = prometheus_url
        self.ssl_preference = ssl_preference
        self.ssl_certificate_uri = ssl_certificate_uri
        self.sap_sid = sap_sid


class ProviderInstance(ProxyResource):
    """A provider instance associated with SAP monitor.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar provisioning_state: State of provisioning of the provider instance. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar health: Resource health details.
    :vartype health: ~azure.mgmt.workloads.sapmonitors.models.Health
    :ivar errors: Defines the provider instance errors.
    :vartype errors: ~azure.mgmt.workloads.sapmonitors.models.ErrorDetail
    :ivar provider_settings: Defines the provider specific properties.
    :vartype provider_settings: ~azure.mgmt.workloads.sapmonitors.models.ProviderSpecificProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "health": {"readonly": True},
        "errors": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "health": {"key": "properties.health", "type": "Health"},
        "errors": {"key": "properties.errors", "type": "ErrorDetail"},
        "provider_settings": {"key": "properties.providerSettings", "type": "ProviderSpecificProperties"},
    }

    def __init__(
        self, *, provider_settings: Optional["_models.ProviderSpecificProperties"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword provider_settings: Defines the provider specific properties.
        :paramtype provider_settings:
         ~azure.mgmt.workloads.sapmonitors.models.ProviderSpecificProperties
        """
        super().__init__(**kwargs)
        self.provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = None
        self.health: Optional["_models.Health"] = None
        self.errors: Optional["_models.ErrorDetail"] = None
        self.provider_settings = provider_settings


class ProviderInstanceListResult(_serialization.Model):
    """The response of a ProviderInstance list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The ProviderInstance items on this page. Required.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.ProviderInstance]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ProviderInstance]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.ProviderInstance"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The ProviderInstance items on this page. Required.
        :paramtype value: list[~azure.mgmt.workloads.sapmonitors.models.ProviderInstance]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SapLandscapeMonitorMetricThresholds(_serialization.Model):
    """Gets or sets the Threshold Values for Top Metrics Health.

    :ivar name: Gets or sets the name of the threshold.
    :vartype name: str
    :ivar green: Gets or sets the threshold value for Green.
    :vartype green: float
    :ivar yellow: Gets or sets the threshold value for Yellow.
    :vartype yellow: float
    :ivar red: Gets or sets the threshold value for Red.
    :vartype red: float
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "green": {"key": "green", "type": "float"},
        "yellow": {"key": "yellow", "type": "float"},
        "red": {"key": "red", "type": "float"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        green: Optional[float] = None,
        yellow: Optional[float] = None,
        red: Optional[float] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Gets or sets the name of the threshold.
        :paramtype name: str
        :keyword green: Gets or sets the threshold value for Green.
        :paramtype green: float
        :keyword yellow: Gets or sets the threshold value for Yellow.
        :paramtype yellow: float
        :keyword red: Gets or sets the threshold value for Red.
        :paramtype red: float
        """
        super().__init__(**kwargs)
        self.name = name
        self.green = green
        self.yellow = yellow
        self.red = red


class SapLandscapeMonitorPropertiesGrouping(_serialization.Model):
    """Gets or sets the SID groupings by landscape and Environment.

    :ivar landscape: Gets or sets the list of landscape to SID mappings.
    :vartype landscape:
     list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorSidMapping]
    :ivar sap_application: Gets or sets the list of Sap Applications to SID mappings.
    :vartype sap_application:
     list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorSidMapping]
    """

    _validation = {
        "landscape": {"max_items": 50, "min_items": 0},
        "sap_application": {"max_items": 50, "min_items": 0},
    }

    _attribute_map = {
        "landscape": {"key": "landscape", "type": "[SapLandscapeMonitorSidMapping]"},
        "sap_application": {"key": "sapApplication", "type": "[SapLandscapeMonitorSidMapping]"},
    }

    def __init__(
        self,
        *,
        landscape: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = None,
        sap_application: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword landscape: Gets or sets the list of landscape to SID mappings.
        :paramtype landscape:
         list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorSidMapping]
        :keyword sap_application: Gets or sets the list of Sap Applications to SID mappings.
        :paramtype sap_application:
         list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorSidMapping]
        """
        super().__init__(**kwargs)
        self.landscape = landscape
        self.sap_application = sap_application


class SapLandscapeMonitorResource(ProxyResource):
    """configuration associated with SAP Landscape Monitor Dashboard.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.sapmonitors.models.SystemData
    :ivar provisioning_state: State of provisioning of the SAP monitor. Known values are:
     "Accepted", "Created", "Failed", "Succeeded", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorProvisioningState
    :ivar grouping: Gets or sets the SID groupings by landscape and Environment.
    :vartype grouping:
     ~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorPropertiesGrouping
    :ivar top_metrics_thresholds: Gets or sets the list Top Metric Thresholds for SAP Landscape
     Monitor Dashboard.
    :vartype top_metrics_thresholds:
     list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorMetricThresholds]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "top_metrics_thresholds": {"max_items": 50, "min_items": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "grouping": {"key": "properties.grouping", "type": "SapLandscapeMonitorPropertiesGrouping"},
        "top_metrics_thresholds": {
            "key": "properties.topMetricsThresholds",
            "type": "[SapLandscapeMonitorMetricThresholds]",
        },
    }

    def __init__(
        self,
        *,
        grouping: Optional["_models.SapLandscapeMonitorPropertiesGrouping"] = None,
        top_metrics_thresholds: Optional[List["_models.SapLandscapeMonitorMetricThresholds"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword grouping: Gets or sets the SID groupings by landscape and Environment.
        :paramtype grouping:
         ~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorPropertiesGrouping
        :keyword top_metrics_thresholds: Gets or sets the list Top Metric Thresholds for SAP Landscape
         Monitor Dashboard.
        :paramtype top_metrics_thresholds:
         list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorMetricThresholds]
        """
        super().__init__(**kwargs)
        self.provisioning_state: Optional[Union[str, "_models.SapLandscapeMonitorProvisioningState"]] = None
        self.grouping = grouping
        self.top_metrics_thresholds = top_metrics_thresholds


class SapLandscapeMonitorResourceListResult(_serialization.Model):
    """The response of a SapLandscapeMonitorResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The SapLandscapeMonitorResource items on this page. Required.
    :vartype value: list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SapLandscapeMonitorResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.SapLandscapeMonitorResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The SapLandscapeMonitorResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.workloads.sapmonitors.models.SapLandscapeMonitorResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SapLandscapeMonitorSidMapping(_serialization.Model):
    """Gets or sets the mapping for SID to Environment/Applications.

    :ivar name: Gets or sets the name of the grouping.
    :vartype name: str
    :ivar top_sid: Gets or sets the list of SID's.
    :vartype top_sid: list[str]
    """

    _validation = {
        "top_sid": {"max_items": 50, "min_items": 0},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "top_sid": {"key": "topSid", "type": "[str]"},
    }

    def __init__(self, *, name: Optional[str] = None, top_sid: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword name: Gets or sets the name of the grouping.
        :paramtype name: str
        :keyword top_sid: Gets or sets the list of SID's.
        :paramtype top_sid: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.top_sid = top_sid


class SapNetWeaverProviderInstanceProperties(ProviderSpecificProperties):
    """Gets or sets the provider properties.

    All required parameters must be populated in order to send to server.

    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
    :vartype provider_type: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar sap_hostname: Gets or sets the target virtual machine IP Address/FQDN.
    :vartype sap_hostname: str
    :ivar sap_instance_nr: Gets or sets the instance number of SAP NetWeaver.
    :vartype sap_instance_nr: str
    :ivar sap_host_file_entries: Gets or sets the list of HostFile Entries.
    :vartype sap_host_file_entries: list[str]
    :ivar sap_username: Gets or sets the SAP user name.
    :vartype sap_username: str
    :ivar sap_password: Sets the SAP password.
    :vartype sap_password: str
    :ivar sap_password_uri: Gets or sets the key vault URI to secret with the SAP password.
    :vartype sap_password_uri: str
    :ivar sap_client_id: Gets or sets the SAP Client ID.
    :vartype sap_client_id: str
    :ivar sap_port_number: Gets or sets the SAP HTTP port number.
    :vartype sap_port_number: str
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SAP system.
    :vartype ssl_certificate_uri: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
    """

    _validation = {
        "provider_type": {"required": True},
    }

    _attribute_map = {
        "provider_type": {"key": "providerType", "type": "str"},
        "sap_sid": {"key": "sapSid", "type": "str"},
        "sap_hostname": {"key": "sapHostname", "type": "str"},
        "sap_instance_nr": {"key": "sapInstanceNr", "type": "str"},
        "sap_host_file_entries": {"key": "sapHostFileEntries", "type": "[str]"},
        "sap_username": {"key": "sapUsername", "type": "str"},
        "sap_password": {"key": "sapPassword", "type": "str"},
        "sap_password_uri": {"key": "sapPasswordUri", "type": "str"},
        "sap_client_id": {"key": "sapClientId", "type": "str"},
        "sap_port_number": {"key": "sapPortNumber", "type": "str"},
        "ssl_certificate_uri": {"key": "sslCertificateUri", "type": "str"},
        "ssl_preference": {"key": "sslPreference", "type": "str"},
    }

    def __init__(
        self,
        *,
        sap_sid: Optional[str] = None,
        sap_hostname: Optional[str] = None,
        sap_instance_nr: Optional[str] = None,
        sap_host_file_entries: Optional[List[str]] = None,
        sap_username: Optional[str] = None,
        sap_password: Optional[str] = None,
        sap_password_uri: Optional[str] = None,
        sap_client_id: Optional[str] = None,
        sap_port_number: Optional[str] = None,
        ssl_certificate_uri: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sap_sid: Gets or sets the SAP System Identifier.
        :paramtype sap_sid: str
        :keyword sap_hostname: Gets or sets the target virtual machine IP Address/FQDN.
        :paramtype sap_hostname: str
        :keyword sap_instance_nr: Gets or sets the instance number of SAP NetWeaver.
        :paramtype sap_instance_nr: str
        :keyword sap_host_file_entries: Gets or sets the list of HostFile Entries.
        :paramtype sap_host_file_entries: list[str]
        :keyword sap_username: Gets or sets the SAP user name.
        :paramtype sap_username: str
        :keyword sap_password: Sets the SAP password.
        :paramtype sap_password: str
        :keyword sap_password_uri: Gets or sets the key vault URI to secret with the SAP password.
        :paramtype sap_password_uri: str
        :keyword sap_client_id: Gets or sets the SAP Client ID.
        :paramtype sap_client_id: str
        :keyword sap_port_number: Gets or sets the SAP HTTP port number.
        :paramtype sap_port_number: str
        :keyword ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SAP system.
        :paramtype ssl_certificate_uri: str
        :keyword ssl_preference: Gets or sets certificate preference if secure communication is
         enabled. Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
        :paramtype ssl_preference: str or ~azure.mgmt.workloads.sapmonitors.models.SslPreference
        """
        super().__init__(**kwargs)
        self.provider_type: str = "SapNetWeaver"
        self.sap_sid = sap_sid
        self.sap_hostname = sap_hostname
        self.sap_instance_nr = sap_instance_nr
        self.sap_host_file_entries = sap_host_file_entries
        self.sap_username = sap_username
        self.sap_password = sap_password
        self.sap_password_uri = sap_password_uri
        self.sap_client_id = sap_client_id
        self.sap_port_number = sap_port_number
        self.ssl_certificate_uri = ssl_certificate_uri
        self.ssl_preference = ssl_preference


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.workloads.sapmonitors.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.workloads.sapmonitors.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.workloads.sapmonitors.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.workloads.sapmonitors.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UpdateMonitorRequest(_serialization.Model):
    """Defines the request body for updating SAP monitor resource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentity
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.workloads.sapmonitors.models.ManagedServiceIdentity
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.identity = identity


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.client_id: Optional[str] = None
