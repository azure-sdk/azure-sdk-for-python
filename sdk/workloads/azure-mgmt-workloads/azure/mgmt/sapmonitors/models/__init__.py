# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import ErrorAdditionalInfo
from ._models_py3 import ErrorDetail
from ._models_py3 import ErrorResponse
from ._models_py3 import ManagedServiceIdentity
from ._models_py3 import Monitor
from ._models_py3 import MonitorAppServicePlanConfiguration
from ._models_py3 import MonitorListResult
from ._models_py3 import MonitorManagedResourceGroupConfiguration
from ._models_py3 import MonitorUpdateMonitorRequest
from ._models_py3 import Operation
from ._models_py3 import OperationDisplay
from ._models_py3 import OperationListResult
from ._models_py3 import ProviderHealth
from ._models_py3 import ProviderInstance
from ._models_py3 import ProviderInstanceListResult
from ._models_py3 import ProviderProvidersDb2Properties
from ._models_py3 import ProviderProvidersHanaDbProperties
from ._models_py3 import ProviderProvidersMsSqlServerProperties
from ._models_py3 import ProviderProvidersPrometheusHaClusterProperties
from ._models_py3 import ProviderProvidersPrometheusOsProperties
from ._models_py3 import ProviderProvidersSapNetWeaverProperties
from ._models_py3 import ProviderSpecificProperties
from ._models_py3 import ProxyResource
from ._models_py3 import Resource
from ._models_py3 import SapLandscapeMonitorMetricThresholds
from ._models_py3 import SapLandscapeMonitorPropertyGrouping
from ._models_py3 import SapLandscapeMonitorResourceListResult
from ._models_py3 import SapLandscapeMonitorSapLandscapeMonitorResource
from ._models_py3 import SapLandscapeMonitorSidMapping
from ._models_py3 import SystemData
from ._models_py3 import TrackedResource
from ._models_py3 import UserAssignedIdentity

from ._workloads_client_enums import ActionType
from ._workloads_client_enums import AppServicePlanTier
from ._workloads_client_enums import CreatedByType
from ._workloads_client_enums import ManagedServiceIdentityType
from ._workloads_client_enums import Origin
from ._workloads_client_enums import ProviderType
from ._workloads_client_enums import ProvisioningState
from ._workloads_client_enums import RoutingPreference
from ._workloads_client_enums import SapLandscapeMonitorProvisioningState
from ._workloads_client_enums import SslPreference
from ._workloads_client_enums import WorkloadProviderInstanceHealthState
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "ManagedServiceIdentity",
    "Monitor",
    "MonitorAppServicePlanConfiguration",
    "MonitorListResult",
    "MonitorManagedResourceGroupConfiguration",
    "MonitorUpdateMonitorRequest",
    "Operation",
    "OperationDisplay",
    "OperationListResult",
    "ProviderHealth",
    "ProviderInstance",
    "ProviderInstanceListResult",
    "ProviderProvidersDb2Properties",
    "ProviderProvidersHanaDbProperties",
    "ProviderProvidersMsSqlServerProperties",
    "ProviderProvidersPrometheusHaClusterProperties",
    "ProviderProvidersPrometheusOsProperties",
    "ProviderProvidersSapNetWeaverProperties",
    "ProviderSpecificProperties",
    "ProxyResource",
    "Resource",
    "SapLandscapeMonitorMetricThresholds",
    "SapLandscapeMonitorPropertyGrouping",
    "SapLandscapeMonitorResourceListResult",
    "SapLandscapeMonitorSapLandscapeMonitorResource",
    "SapLandscapeMonitorSidMapping",
    "SystemData",
    "TrackedResource",
    "UserAssignedIdentity",
    "ActionType",
    "AppServicePlanTier",
    "CreatedByType",
    "ManagedServiceIdentityType",
    "Origin",
    "ProviderType",
    "ProvisioningState",
    "RoutingPreference",
    "SapLandscapeMonitorProvisioningState",
    "SslPreference",
    "WorkloadProviderInstanceHealthState",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
