# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import AppServicePlanConfiguration
from ._models_py3 import Db2ProviderInstanceProperties
from ._models_py3 import ErrorAdditionalInfo
from ._models_py3 import ErrorDetail
from ._models_py3 import ErrorResponse
from ._models_py3 import HanaDbProviderInstanceProperties
from ._models_py3 import Health
from ._models_py3 import ManagedResourceGroupConfiguration
from ._models_py3 import ManagedServiceIdentity
from ._models_py3 import Monitor
from ._models_py3 import MonitorListResult
from ._models_py3 import MsSqlServerProviderInstanceProperties
from ._models_py3 import Operation
from ._models_py3 import OperationDisplay
from ._models_py3 import OperationListResult
from ._models_py3 import PrometheusHaClusterProviderInstanceProperties
from ._models_py3 import PrometheusOsProviderInstanceProperties
from ._models_py3 import ProviderInstance
from ._models_py3 import ProviderInstanceListResult
from ._models_py3 import ProviderSpecificProperties
from ._models_py3 import ProxyResource
from ._models_py3 import Resource
from ._models_py3 import SapLandscapeMonitorMetricThresholds
from ._models_py3 import SapLandscapeMonitorPropertiesGrouping
from ._models_py3 import SapLandscapeMonitorResource
from ._models_py3 import SapLandscapeMonitorResourceListResult
from ._models_py3 import SapLandscapeMonitorSidMapping
from ._models_py3 import SapNetWeaverProviderInstanceProperties
from ._models_py3 import SystemData
from ._models_py3 import TrackedResource
from ._models_py3 import UpdateMonitorRequest
from ._models_py3 import UserAssignedIdentity

from ._workloads_client_for_testing_enums import ActionType
from ._workloads_client_for_testing_enums import AppServicePlanTier
from ._workloads_client_for_testing_enums import CreatedByType
from ._workloads_client_for_testing_enums import ManagedServiceIdentityType
from ._workloads_client_for_testing_enums import Origin
from ._workloads_client_for_testing_enums import RoutingPreference
from ._workloads_client_for_testing_enums import SapLandscapeMonitorProvisioningState
from ._workloads_client_for_testing_enums import SslPreference
from ._workloads_client_for_testing_enums import WorkloadMonitorProvisioningState
from ._workloads_client_for_testing_enums import WorkloadProviderInstanceHealthState
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AppServicePlanConfiguration",
    "Db2ProviderInstanceProperties",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "HanaDbProviderInstanceProperties",
    "Health",
    "ManagedResourceGroupConfiguration",
    "ManagedServiceIdentity",
    "Monitor",
    "MonitorListResult",
    "MsSqlServerProviderInstanceProperties",
    "Operation",
    "OperationDisplay",
    "OperationListResult",
    "PrometheusHaClusterProviderInstanceProperties",
    "PrometheusOsProviderInstanceProperties",
    "ProviderInstance",
    "ProviderInstanceListResult",
    "ProviderSpecificProperties",
    "ProxyResource",
    "Resource",
    "SapLandscapeMonitorMetricThresholds",
    "SapLandscapeMonitorPropertiesGrouping",
    "SapLandscapeMonitorResource",
    "SapLandscapeMonitorResourceListResult",
    "SapLandscapeMonitorSidMapping",
    "SapNetWeaverProviderInstanceProperties",
    "SystemData",
    "TrackedResource",
    "UpdateMonitorRequest",
    "UserAssignedIdentity",
    "ActionType",
    "AppServicePlanTier",
    "CreatedByType",
    "ManagedServiceIdentityType",
    "Origin",
    "RoutingPreference",
    "SapLandscapeMonitorProvisioningState",
    "SslPreference",
    "WorkloadMonitorProvisioningState",
    "WorkloadProviderInstanceHealthState",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
