# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.connector.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.connector.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class ACSSBackupConnection(TrackedResource):
    """Define the backup connection resource of virtual instance for SAP..

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.connector.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar backup_data: Information about the recovery services vault and backup policy used for
     backup.
    :vartype backup_data: ~azure.mgmt.workloads.connector.models.BackupData
    :ivar provisioning_state: Defines the provisioning states. Known values are: "Succeeded",
     "Updating", "Creating", "Failed", "Deleting", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.connector.models.ConnectorProvisioningState
    :ivar errors: Defines the errors related to backup connection resource of virtual instance for
     SAP.
    :vartype errors: ~azure.mgmt.workloads.connector.models.ConnectorErrorDefinition
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
        "errors": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "backup_data": {"key": "properties.backupData", "type": "BackupData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "errors": {"key": "properties.errors", "type": "ConnectorErrorDefinition"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        backup_data: Optional["_models.BackupData"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword backup_data: Information about the recovery services vault and backup policy used for
         backup.
        :paramtype backup_data: ~azure.mgmt.workloads.connector.models.BackupData
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.backup_data = backup_data
        self.provisioning_state = None
        self.errors = None


class ACSSBackupConnectionList(_serialization.Model):
    """Defines the collection of backup connection resources of virtual instances for SAP.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Gets the list of backup connection resources of virtual instances for SAP.
     Required.
    :vartype value: list[~azure.mgmt.workloads.connector.models.ACSSBackupConnection]
    :ivar next_link: Gets the value of next link.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ACSSBackupConnection]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.ACSSBackupConnection"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: Gets the list of backup connection resources of virtual instances for SAP.
         Required.
        :paramtype value: list[~azure.mgmt.workloads.connector.models.ACSSBackupConnection]
        :keyword next_link: Gets the value of next link.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProtectionPolicy(_serialization.Model):
    """Base class for backup policy. Workload-specific backup policies are derived from this class.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureIaaSVMProtectionPolicy, AzureVmWorkloadProtectionPolicy

    All required parameters must be populated in order to send to Azure.

    :ivar protected_items_count: Number of items associated with this policy.
    :vartype protected_items_count: int
    :ivar backup_management_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype backup_management_type: str
    :ivar resource_guard_operation_requests: ResourceGuard Operation Requests.
    :vartype resource_guard_operation_requests: list[str]
    """

    _validation = {
        "backup_management_type": {"required": True},
    }

    _attribute_map = {
        "protected_items_count": {"key": "protectedItemsCount", "type": "int"},
        "backup_management_type": {"key": "backupManagementType", "type": "str"},
        "resource_guard_operation_requests": {"key": "resourceGuardOperationRequests", "type": "[str]"},
    }

    _subtype_map = {
        "backup_management_type": {
            "AzureIaasVM": "AzureIaaSVMProtectionPolicy",
            "AzureWorkload": "AzureVmWorkloadProtectionPolicy",
        }
    }

    def __init__(
        self,
        *,
        protected_items_count: Optional[int] = None,
        resource_guard_operation_requests: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword protected_items_count: Number of items associated with this policy.
        :paramtype protected_items_count: int
        :keyword resource_guard_operation_requests: ResourceGuard Operation Requests.
        :paramtype resource_guard_operation_requests: list[str]
        """
        super().__init__(**kwargs)
        self.protected_items_count = protected_items_count
        self.backup_management_type: Optional[str] = None
        self.resource_guard_operation_requests = resource_guard_operation_requests


class AzureIaaSVMProtectionPolicy(ProtectionPolicy):
    """IaaS VM workload-specific backup policy.

    All required parameters must be populated in order to send to Azure.

    :ivar protected_items_count: Number of items associated with this policy.
    :vartype protected_items_count: int
    :ivar backup_management_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype backup_management_type: str
    :ivar resource_guard_operation_requests: ResourceGuard Operation Requests.
    :vartype resource_guard_operation_requests: list[str]
    :ivar instant_rp_details: Instant recovery point additional details.
    :vartype instant_rp_details: ~azure.mgmt.workloads.connector.models.InstantRPAdditionalDetails
    :ivar schedule_policy: Backup schedule specified as part of backup policy.
    :vartype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
    :ivar retention_policy: Retention policy with the details on backup copy retention ranges.
    :vartype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
    :ivar tiering_policy: Tiering policy to automatically move RPs to another tier
     Key is Target Tier, defined in RecoveryPointTierType enum.
     Tiering policy specifies the criteria to move RP to the target tier.
    :vartype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
    :ivar instant_rp_retention_range_in_days: Instant RP retention policy range in days.
    :vartype instant_rp_retention_range_in_days: int
    :ivar time_zone: Time zone optional input as string. For example: "Pacific Standard Time".
    :vartype time_zone: str
    :ivar policy_type: The policy type. Known values are: "Invalid", "V1", and "V2".
    :vartype policy_type: str or ~azure.mgmt.workloads.connector.models.IAASVMPolicyType
    """

    _validation = {
        "backup_management_type": {"required": True},
    }

    _attribute_map = {
        "protected_items_count": {"key": "protectedItemsCount", "type": "int"},
        "backup_management_type": {"key": "backupManagementType", "type": "str"},
        "resource_guard_operation_requests": {"key": "resourceGuardOperationRequests", "type": "[str]"},
        "instant_rp_details": {"key": "instantRPDetails", "type": "InstantRPAdditionalDetails"},
        "schedule_policy": {"key": "schedulePolicy", "type": "SchedulePolicy"},
        "retention_policy": {"key": "retentionPolicy", "type": "RetentionPolicy"},
        "tiering_policy": {"key": "tieringPolicy", "type": "{TieringPolicy}"},
        "instant_rp_retention_range_in_days": {"key": "instantRpRetentionRangeInDays", "type": "int"},
        "time_zone": {"key": "timeZone", "type": "str"},
        "policy_type": {"key": "policyType", "type": "str"},
    }

    def __init__(
        self,
        *,
        protected_items_count: Optional[int] = None,
        resource_guard_operation_requests: Optional[List[str]] = None,
        instant_rp_details: Optional["_models.InstantRPAdditionalDetails"] = None,
        schedule_policy: Optional["_models.SchedulePolicy"] = None,
        retention_policy: Optional["_models.RetentionPolicy"] = None,
        tiering_policy: Optional[Dict[str, "_models.TieringPolicy"]] = None,
        instant_rp_retention_range_in_days: Optional[int] = None,
        time_zone: Optional[str] = None,
        policy_type: Optional[Union[str, "_models.IAASVMPolicyType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword protected_items_count: Number of items associated with this policy.
        :paramtype protected_items_count: int
        :keyword resource_guard_operation_requests: ResourceGuard Operation Requests.
        :paramtype resource_guard_operation_requests: list[str]
        :keyword instant_rp_details: Instant recovery point additional details.
        :paramtype instant_rp_details:
         ~azure.mgmt.workloads.connector.models.InstantRPAdditionalDetails
        :keyword schedule_policy: Backup schedule specified as part of backup policy.
        :paramtype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
        :keyword retention_policy: Retention policy with the details on backup copy retention ranges.
        :paramtype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
        :keyword tiering_policy: Tiering policy to automatically move RPs to another tier
         Key is Target Tier, defined in RecoveryPointTierType enum.
         Tiering policy specifies the criteria to move RP to the target tier.
        :paramtype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
        :keyword instant_rp_retention_range_in_days: Instant RP retention policy range in days.
        :paramtype instant_rp_retention_range_in_days: int
        :keyword time_zone: Time zone optional input as string. For example: "Pacific Standard Time".
        :paramtype time_zone: str
        :keyword policy_type: The policy type. Known values are: "Invalid", "V1", and "V2".
        :paramtype policy_type: str or ~azure.mgmt.workloads.connector.models.IAASVMPolicyType
        """
        super().__init__(
            protected_items_count=protected_items_count,
            resource_guard_operation_requests=resource_guard_operation_requests,
            **kwargs
        )
        self.backup_management_type: str = "AzureIaasVM"
        self.instant_rp_details = instant_rp_details
        self.schedule_policy = schedule_policy
        self.retention_policy = retention_policy
        self.tiering_policy = tiering_policy
        self.instant_rp_retention_range_in_days = instant_rp_retention_range_in_days
        self.time_zone = time_zone
        self.policy_type = policy_type


class AzureVmWorkloadProtectionPolicy(ProtectionPolicy):
    """Azure VM (Mercury) workload-specific backup policy.

    All required parameters must be populated in order to send to Azure.

    :ivar protected_items_count: Number of items associated with this policy.
    :vartype protected_items_count: int
    :ivar backup_management_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype backup_management_type: str
    :ivar resource_guard_operation_requests: ResourceGuard Operation Requests.
    :vartype resource_guard_operation_requests: list[str]
    :ivar work_load_type: Type of workload for the backup management. Known values are: "Invalid",
     "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState",
     "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase",
     "SAPAseDatabase", and "SAPHanaDBInstance".
    :vartype work_load_type: str or ~azure.mgmt.workloads.connector.models.WorkloadType
    :ivar settings: Common settings for the backup management.
    :vartype settings: ~azure.mgmt.workloads.connector.models.Settings
    :ivar sub_protection_policy: List of sub-protection policies which includes schedule and
     retention.
    :vartype sub_protection_policy:
     list[~azure.mgmt.workloads.connector.models.SubProtectionPolicy]
    :ivar make_policy_consistent: Fix the policy inconsistency.
    :vartype make_policy_consistent: bool
    """

    _validation = {
        "backup_management_type": {"required": True},
    }

    _attribute_map = {
        "protected_items_count": {"key": "protectedItemsCount", "type": "int"},
        "backup_management_type": {"key": "backupManagementType", "type": "str"},
        "resource_guard_operation_requests": {"key": "resourceGuardOperationRequests", "type": "[str]"},
        "work_load_type": {"key": "workLoadType", "type": "str"},
        "settings": {"key": "settings", "type": "Settings"},
        "sub_protection_policy": {"key": "subProtectionPolicy", "type": "[SubProtectionPolicy]"},
        "make_policy_consistent": {"key": "makePolicyConsistent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        protected_items_count: Optional[int] = None,
        resource_guard_operation_requests: Optional[List[str]] = None,
        work_load_type: Optional[Union[str, "_models.WorkloadType"]] = None,
        settings: Optional["_models.Settings"] = None,
        sub_protection_policy: Optional[List["_models.SubProtectionPolicy"]] = None,
        make_policy_consistent: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword protected_items_count: Number of items associated with this policy.
        :paramtype protected_items_count: int
        :keyword resource_guard_operation_requests: ResourceGuard Operation Requests.
        :paramtype resource_guard_operation_requests: list[str]
        :keyword work_load_type: Type of workload for the backup management. Known values are:
         "Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM",
         "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare",
         "SAPHanaDatabase", "SAPAseDatabase", and "SAPHanaDBInstance".
        :paramtype work_load_type: str or ~azure.mgmt.workloads.connector.models.WorkloadType
        :keyword settings: Common settings for the backup management.
        :paramtype settings: ~azure.mgmt.workloads.connector.models.Settings
        :keyword sub_protection_policy: List of sub-protection policies which includes schedule and
         retention.
        :paramtype sub_protection_policy:
         list[~azure.mgmt.workloads.connector.models.SubProtectionPolicy]
        :keyword make_policy_consistent: Fix the policy inconsistency.
        :paramtype make_policy_consistent: bool
        """
        super().__init__(
            protected_items_count=protected_items_count,
            resource_guard_operation_requests=resource_guard_operation_requests,
            **kwargs
        )
        self.backup_management_type: str = "AzureWorkload"
        self.work_load_type = work_load_type
        self.settings = settings
        self.sub_protection_policy = sub_protection_policy
        self.make_policy_consistent = make_policy_consistent


class BackupData(_serialization.Model):
    """Information about the recovery services vault and backup policy used for backup.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    HanaBackupData, SqlBackupData, VMBackupData

    All required parameters must be populated in order to send to Azure.

    :ivar backup_type: The type of backup, VM, SQL or HANA. Required. Known values are: "VM",
     "SQL", and "HANA".
    :vartype backup_type: str or ~azure.mgmt.workloads.connector.models.BackupType
    :ivar recovery_services_vault: The properties of the recovery services vault used for backup.
     Required.
    :vartype recovery_services_vault:
     ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
    """

    _validation = {
        "backup_type": {"required": True},
        "recovery_services_vault": {"required": True},
    }

    _attribute_map = {
        "backup_type": {"key": "backupType", "type": "str"},
        "recovery_services_vault": {"key": "recoveryServicesVault", "type": "RecoveryServicesVaultProperties"},
    }

    _subtype_map = {"backup_type": {"HANA": "HanaBackupData", "SQL": "SqlBackupData", "VM": "VMBackupData"}}

    def __init__(self, *, recovery_services_vault: "_models.RecoveryServicesVaultProperties", **kwargs: Any) -> None:
        """
        :keyword recovery_services_vault: The properties of the recovery services vault used for
         backup. Required.
        :paramtype recovery_services_vault:
         ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
        """
        super().__init__(**kwargs)
        self.backup_type: Optional[str] = None
        self.recovery_services_vault = recovery_services_vault


class Connector(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Define the connector resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.workloads.connector.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: Managed service identity (user assigned identities).
    :vartype identity: ~azure.mgmt.workloads.connector.models.UserAssignedServiceIdentity
    :ivar source_resource_id: Defines the ID of the connector's source resource. Required.
    :vartype source_resource_id: str
    :ivar provisioning_state: Defines the provisioning states. Known values are: "Succeeded",
     "Updating", "Creating", "Failed", "Deleting", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.workloads.connector.models.ConnectorProvisioningState
    :ivar errors: Indicates any errors on the connector resource.
    :vartype errors: ~azure.mgmt.workloads.connector.models.ConnectorErrorDefinition
    :ivar managed_resource_group_configuration: Managed resource group configuration.
    :vartype managed_resource_group_configuration:
     ~azure.mgmt.workloads.connector.models.ManagedRGConfiguration
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "source_resource_id": {"required": True},
        "provisioning_state": {"readonly": True},
        "errors": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "identity": {"key": "identity", "type": "UserAssignedServiceIdentity"},
        "source_resource_id": {"key": "properties.sourceResourceId", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "errors": {"key": "properties.errors", "type": "ConnectorErrorDefinition"},
        "managed_resource_group_configuration": {
            "key": "properties.managedResourceGroupConfiguration",
            "type": "ManagedRGConfiguration",
        },
    }

    def __init__(
        self,
        *,
        location: str,
        source_resource_id: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.UserAssignedServiceIdentity"] = None,
        managed_resource_group_configuration: Optional["_models.ManagedRGConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: Managed service identity (user assigned identities).
        :paramtype identity: ~azure.mgmt.workloads.connector.models.UserAssignedServiceIdentity
        :keyword source_resource_id: Defines the ID of the connector's source resource. Required.
        :paramtype source_resource_id: str
        :keyword managed_resource_group_configuration: Managed resource group configuration.
        :paramtype managed_resource_group_configuration:
         ~azure.mgmt.workloads.connector.models.ManagedRGConfiguration
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.source_resource_id = source_resource_id
        self.provisioning_state = None
        self.errors = None
        self.managed_resource_group_configuration = managed_resource_group_configuration


class ConnectorErrorDefinition(_serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.workloads.connector.models.ConnectorErrorDefinition]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "details": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "details": {"key": "details", "type": "[ConnectorErrorDefinition]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ConnectorList(_serialization.Model):
    """Defines the collection of connector resources.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Gets the list of connector resources. Required.
    :vartype value: list[~azure.mgmt.workloads.connector.models.Connector]
    :ivar next_link: Gets the value of next link.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Connector]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Connector"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: Gets the list of connector resources. Required.
        :paramtype value: list[~azure.mgmt.workloads.connector.models.Connector]
        :keyword next_link: Gets the value of next link.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DailyRetentionFormat(_serialization.Model):
    """Daily retention format.

    :ivar days_of_the_month: List of days of the month.
    :vartype days_of_the_month: list[~azure.mgmt.workloads.connector.models.Day]
    """

    _attribute_map = {
        "days_of_the_month": {"key": "daysOfTheMonth", "type": "[Day]"},
    }

    def __init__(self, *, days_of_the_month: Optional[List["_models.Day"]] = None, **kwargs: Any) -> None:
        """
        :keyword days_of_the_month: List of days of the month.
        :paramtype days_of_the_month: list[~azure.mgmt.workloads.connector.models.Day]
        """
        super().__init__(**kwargs)
        self.days_of_the_month = days_of_the_month


class DailyRetentionSchedule(_serialization.Model):
    """Daily retention schedule.

    :ivar retention_times: Retention times of retention policy.
    :vartype retention_times: list[~datetime.datetime]
    :ivar retention_duration: Retention duration of retention Policy.
    :vartype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
    """

    _attribute_map = {
        "retention_times": {"key": "retentionTimes", "type": "[iso-8601]"},
        "retention_duration": {"key": "retentionDuration", "type": "RetentionDuration"},
    }

    def __init__(
        self,
        *,
        retention_times: Optional[List[datetime.datetime]] = None,
        retention_duration: Optional["_models.RetentionDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword retention_times: Retention times of retention policy.
        :paramtype retention_times: list[~datetime.datetime]
        :keyword retention_duration: Retention duration of retention Policy.
        :paramtype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
        """
        super().__init__(**kwargs)
        self.retention_times = retention_times
        self.retention_duration = retention_duration


class DailySchedule(_serialization.Model):
    """Daily schedule.

    :ivar schedule_run_times: List of times of day this schedule has to be run.
    :vartype schedule_run_times: list[~datetime.datetime]
    """

    _attribute_map = {
        "schedule_run_times": {"key": "scheduleRunTimes", "type": "[iso-8601]"},
    }

    def __init__(self, *, schedule_run_times: Optional[List[datetime.datetime]] = None, **kwargs: Any) -> None:
        """
        :keyword schedule_run_times: List of times of day this schedule has to be run.
        :paramtype schedule_run_times: list[~datetime.datetime]
        """
        super().__init__(**kwargs)
        self.schedule_run_times = schedule_run_times


class Day(_serialization.Model):
    """Day of the week.

    :ivar date: Date of the month.
    :vartype date: int
    :ivar is_last: Whether Date is last date of month.
    :vartype is_last: bool
    """

    _attribute_map = {
        "date": {"key": "date", "type": "int"},
        "is_last": {"key": "isLast", "type": "bool"},
    }

    def __init__(self, *, date: Optional[int] = None, is_last: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword date: Date of the month.
        :paramtype date: int
        :keyword is_last: Whether Date is last date of month.
        :paramtype is_last: bool
        """
        super().__init__(**kwargs)
        self.date = date
        self.is_last = is_last


class DBBackupPolicyProperties(_serialization.Model):
    """Defines the policy properties for database backup.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the DB backup policy. Required.
    :vartype name: str
    :ivar protected_items_count: Number of items associated with this policy.
    :vartype protected_items_count: int
    :ivar backup_management_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types.
    :vartype backup_management_type: str
    :ivar resource_guard_operation_requests: ResourceGuard Operation Requests.
    :vartype resource_guard_operation_requests: list[str]
    :ivar work_load_type: Type of workload for the backup management. Known values are: "Invalid",
     "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState",
     "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase",
     "SAPAseDatabase", and "SAPHanaDBInstance".
    :vartype work_load_type: str or ~azure.mgmt.workloads.connector.models.WorkloadType
    :ivar settings: Common settings for the backup management.
    :vartype settings: ~azure.mgmt.workloads.connector.models.Settings
    :ivar sub_protection_policy: List of sub-protection policies which includes schedule and
     retention.
    :vartype sub_protection_policy:
     list[~azure.mgmt.workloads.connector.models.SubProtectionPolicy]
    :ivar make_policy_consistent: Fix the policy inconsistency.
    :vartype make_policy_consistent: bool
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "protected_items_count": {"key": "properties.protectedItemsCount", "type": "int"},
        "backup_management_type": {"key": "properties.backupManagementType", "type": "str"},
        "resource_guard_operation_requests": {"key": "properties.resourceGuardOperationRequests", "type": "[str]"},
        "work_load_type": {"key": "properties.workLoadType", "type": "str"},
        "settings": {"key": "properties.settings", "type": "Settings"},
        "sub_protection_policy": {"key": "properties.subProtectionPolicy", "type": "[SubProtectionPolicy]"},
        "make_policy_consistent": {"key": "properties.makePolicyConsistent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        name: str,
        protected_items_count: Optional[int] = None,
        resource_guard_operation_requests: Optional[List[str]] = None,
        work_load_type: Optional[Union[str, "_models.WorkloadType"]] = None,
        settings: Optional["_models.Settings"] = None,
        sub_protection_policy: Optional[List["_models.SubProtectionPolicy"]] = None,
        make_policy_consistent: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the DB backup policy. Required.
        :paramtype name: str
        :keyword protected_items_count: Number of items associated with this policy.
        :paramtype protected_items_count: int
        :keyword resource_guard_operation_requests: ResourceGuard Operation Requests.
        :paramtype resource_guard_operation_requests: list[str]
        :keyword work_load_type: Type of workload for the backup management. Known values are:
         "Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM",
         "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare",
         "SAPHanaDatabase", "SAPAseDatabase", and "SAPHanaDBInstance".
        :paramtype work_load_type: str or ~azure.mgmt.workloads.connector.models.WorkloadType
        :keyword settings: Common settings for the backup management.
        :paramtype settings: ~azure.mgmt.workloads.connector.models.Settings
        :keyword sub_protection_policy: List of sub-protection policies which includes schedule and
         retention.
        :paramtype sub_protection_policy:
         list[~azure.mgmt.workloads.connector.models.SubProtectionPolicy]
        :keyword make_policy_consistent: Fix the policy inconsistency.
        :paramtype make_policy_consistent: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.protected_items_count = protected_items_count
        self.backup_management_type: Optional[str] = None
        self.resource_guard_operation_requests = resource_guard_operation_requests
        self.work_load_type = work_load_type
        self.settings = settings
        self.sub_protection_policy = sub_protection_policy
        self.make_policy_consistent = make_policy_consistent


class DiskExclusionProperties(_serialization.Model):
    """Defines the disk exclusion properties for virtual machine backup.

    All required parameters must be populated in order to send to Azure.

    :ivar disk_lun_list: List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
     Required.
    :vartype disk_lun_list: list[int]
    :ivar is_inclusion_list: Flag to indicate whether DiskLunList is to be included/ excluded from
     backup. Required.
    :vartype is_inclusion_list: bool
    """

    _validation = {
        "disk_lun_list": {"required": True},
        "is_inclusion_list": {"required": True},
    }

    _attribute_map = {
        "disk_lun_list": {"key": "diskLunList", "type": "[int]"},
        "is_inclusion_list": {"key": "isInclusionList", "type": "bool"},
    }

    def __init__(self, *, disk_lun_list: List[int], is_inclusion_list: bool, **kwargs: Any) -> None:
        """
        :keyword disk_lun_list: List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
         Required.
        :paramtype disk_lun_list: list[int]
        :keyword is_inclusion_list: Flag to indicate whether DiskLunList is to be included/ excluded
         from backup. Required.
        :paramtype is_inclusion_list: bool
        """
        super().__init__(**kwargs)
        self.disk_lun_list = disk_lun_list
        self.is_inclusion_list = is_inclusion_list


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.workloads.connector.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.workloads.connector.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.workloads.connector.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.workloads.connector.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class RecoveryServicesVaultProperties(_serialization.Model):
    """The properties of the recovery services vault used for backup.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ExistingRecoveryServicesVault, NewRecoveryServicesVault

    All required parameters must be populated in order to send to Azure.

    :ivar vault_type: The vault type, whether it is existing or has to be created. Required. Known
     values are: "Existing" and "New".
    :vartype vault_type: str or ~azure.mgmt.workloads.connector.models.VaultType
    """

    _validation = {
        "vault_type": {"required": True},
    }

    _attribute_map = {
        "vault_type": {"key": "vaultType", "type": "str"},
    }

    _subtype_map = {"vault_type": {"Existing": "ExistingRecoveryServicesVault", "New": "NewRecoveryServicesVault"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.vault_type: Optional[str] = None


class ExistingRecoveryServicesVault(RecoveryServicesVaultProperties):
    """Existing recovery services vault.

    All required parameters must be populated in order to send to Azure.

    :ivar vault_type: The vault type, whether it is existing or has to be created. Required. Known
     values are: "Existing" and "New".
    :vartype vault_type: str or ~azure.mgmt.workloads.connector.models.VaultType
    :ivar id: The resource ID of the recovery services vault that has been created. Required.
    :vartype id: str
    """

    _validation = {
        "vault_type": {"required": True},
        "id": {"required": True},
    }

    _attribute_map = {
        "vault_type": {"key": "vaultType", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The resource ID of the recovery services vault that has been created. Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.vault_type: str = "Existing"
        self.id = id


class HanaBackupData(BackupData):
    """Defines the HANA Backup data for a virtual instance for SAP.

    All required parameters must be populated in order to send to Azure.

    :ivar backup_type: The type of backup, VM, SQL or HANA. Required. Known values are: "VM",
     "SQL", and "HANA".
    :vartype backup_type: str or ~azure.mgmt.workloads.connector.models.BackupType
    :ivar recovery_services_vault: The properties of the recovery services vault used for backup.
     Required.
    :vartype recovery_services_vault:
     ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
    :ivar ssl_configuration: Path of the SSL key store.
    :vartype ssl_configuration: ~azure.mgmt.workloads.connector.models.SSLConfiguration
    :ivar backup_policy: Defines the policy properties for database backup. Required.
    :vartype backup_policy: ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
    :ivar hdbuserstore_key_name: Name of the HANA Database User Store Key. Required.
    :vartype hdbuserstore_key_name: str
    :ivar instance_number: Gets or sets the database instance number.
    :vartype instance_number: str
    :ivar db_instance_snapshot_backup_policy: Defines the policy properties for database backup.
    :vartype db_instance_snapshot_backup_policy:
     ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
    """

    _validation = {
        "backup_type": {"required": True},
        "recovery_services_vault": {"required": True},
        "backup_policy": {"required": True},
        "hdbuserstore_key_name": {"required": True},
    }

    _attribute_map = {
        "backup_type": {"key": "backupType", "type": "str"},
        "recovery_services_vault": {"key": "recoveryServicesVault", "type": "RecoveryServicesVaultProperties"},
        "ssl_configuration": {"key": "sslConfiguration", "type": "SSLConfiguration"},
        "backup_policy": {"key": "backupPolicy", "type": "DBBackupPolicyProperties"},
        "hdbuserstore_key_name": {"key": "hdbuserstoreKeyName", "type": "str"},
        "instance_number": {"key": "instanceNumber", "type": "str"},
        "db_instance_snapshot_backup_policy": {
            "key": "dbInstanceSnapshotBackupPolicy",
            "type": "DBBackupPolicyProperties",
        },
    }

    def __init__(
        self,
        *,
        recovery_services_vault: "_models.RecoveryServicesVaultProperties",
        backup_policy: "_models.DBBackupPolicyProperties",
        hdbuserstore_key_name: str,
        ssl_configuration: Optional["_models.SSLConfiguration"] = None,
        instance_number: Optional[str] = None,
        db_instance_snapshot_backup_policy: Optional["_models.DBBackupPolicyProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword recovery_services_vault: The properties of the recovery services vault used for
         backup. Required.
        :paramtype recovery_services_vault:
         ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
        :keyword ssl_configuration: Path of the SSL key store.
        :paramtype ssl_configuration: ~azure.mgmt.workloads.connector.models.SSLConfiguration
        :keyword backup_policy: Defines the policy properties for database backup. Required.
        :paramtype backup_policy: ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
        :keyword hdbuserstore_key_name: Name of the HANA Database User Store Key. Required.
        :paramtype hdbuserstore_key_name: str
        :keyword instance_number: Gets or sets the database instance number.
        :paramtype instance_number: str
        :keyword db_instance_snapshot_backup_policy: Defines the policy properties for database backup.
        :paramtype db_instance_snapshot_backup_policy:
         ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
        """
        super().__init__(recovery_services_vault=recovery_services_vault, **kwargs)
        self.backup_type: str = "HANA"
        self.ssl_configuration = ssl_configuration
        self.backup_policy = backup_policy
        self.hdbuserstore_key_name = hdbuserstore_key_name
        self.instance_number = instance_number
        self.db_instance_snapshot_backup_policy = db_instance_snapshot_backup_policy


class HourlySchedule(_serialization.Model):
    """Hourly schedule.

    :ivar interval: Interval at which backup needs to be triggered. For hourly the value
      can be 4/6/8/12.
    :vartype interval: int
    :ivar schedule_window_start_time: To specify start time of the backup window.
    :vartype schedule_window_start_time: ~datetime.datetime
    :ivar schedule_window_duration: To specify duration of the backup window.
    :vartype schedule_window_duration: int
    """

    _attribute_map = {
        "interval": {"key": "interval", "type": "int"},
        "schedule_window_start_time": {"key": "scheduleWindowStartTime", "type": "iso-8601"},
        "schedule_window_duration": {"key": "scheduleWindowDuration", "type": "int"},
    }

    def __init__(
        self,
        *,
        interval: Optional[int] = None,
        schedule_window_start_time: Optional[datetime.datetime] = None,
        schedule_window_duration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword interval: Interval at which backup needs to be triggered. For hourly the value
          can be 4/6/8/12.
        :paramtype interval: int
        :keyword schedule_window_start_time: To specify start time of the backup window.
        :paramtype schedule_window_start_time: ~datetime.datetime
        :keyword schedule_window_duration: To specify duration of the backup window.
        :paramtype schedule_window_duration: int
        """
        super().__init__(**kwargs)
        self.interval = interval
        self.schedule_window_start_time = schedule_window_start_time
        self.schedule_window_duration = schedule_window_duration


class InstantRPAdditionalDetails(_serialization.Model):
    """Instant recovery point additional details.

    :ivar azure_backup_rg_name_prefix: Azure backup resource group name prefix.
    :vartype azure_backup_rg_name_prefix: str
    :ivar azure_backup_rg_name_suffix: Azure backup resource group name suffix.
    :vartype azure_backup_rg_name_suffix: str
    """

    _attribute_map = {
        "azure_backup_rg_name_prefix": {"key": "azureBackupRGNamePrefix", "type": "str"},
        "azure_backup_rg_name_suffix": {"key": "azureBackupRGNameSuffix", "type": "str"},
    }

    def __init__(
        self,
        *,
        azure_backup_rg_name_prefix: Optional[str] = None,
        azure_backup_rg_name_suffix: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword azure_backup_rg_name_prefix: Azure backup resource group name prefix.
        :paramtype azure_backup_rg_name_prefix: str
        :keyword azure_backup_rg_name_suffix: Azure backup resource group name suffix.
        :paramtype azure_backup_rg_name_suffix: str
        """
        super().__init__(**kwargs)
        self.azure_backup_rg_name_prefix = azure_backup_rg_name_prefix
        self.azure_backup_rg_name_suffix = azure_backup_rg_name_suffix


class SchedulePolicy(_serialization.Model):
    """Base class for backup schedule.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    LogSchedulePolicy, LongTermSchedulePolicy, SimpleSchedulePolicy, SimpleSchedulePolicyV2

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype schedule_policy_type: str
    """

    _validation = {
        "schedule_policy_type": {"required": True},
    }

    _attribute_map = {
        "schedule_policy_type": {"key": "schedulePolicyType", "type": "str"},
    }

    _subtype_map = {
        "schedule_policy_type": {
            "LogSchedulePolicy": "LogSchedulePolicy",
            "LongTermSchedulePolicy": "LongTermSchedulePolicy",
            "SimpleSchedulePolicy": "SimpleSchedulePolicy",
            "SimpleSchedulePolicyV2": "SimpleSchedulePolicyV2",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.schedule_policy_type: Optional[str] = None


class LogSchedulePolicy(SchedulePolicy):
    """Log policy schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype schedule_policy_type: str
    :ivar schedule_frequency_in_mins: Frequency of the log schedule operation of this policy in
     minutes.
    :vartype schedule_frequency_in_mins: int
    """

    _validation = {
        "schedule_policy_type": {"required": True},
    }

    _attribute_map = {
        "schedule_policy_type": {"key": "schedulePolicyType", "type": "str"},
        "schedule_frequency_in_mins": {"key": "scheduleFrequencyInMins", "type": "int"},
    }

    def __init__(self, *, schedule_frequency_in_mins: Optional[int] = None, **kwargs: Any) -> None:
        """
        :keyword schedule_frequency_in_mins: Frequency of the log schedule operation of this policy in
         minutes.
        :paramtype schedule_frequency_in_mins: int
        """
        super().__init__(**kwargs)
        self.schedule_policy_type: str = "LogSchedulePolicy"
        self.schedule_frequency_in_mins = schedule_frequency_in_mins


class RetentionPolicy(_serialization.Model):
    """Base class for retention policy.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    LongTermRetentionPolicy, SimpleRetentionPolicy

    All required parameters must be populated in order to send to Azure.

    :ivar retention_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype retention_policy_type: str
    """

    _validation = {
        "retention_policy_type": {"required": True},
    }

    _attribute_map = {
        "retention_policy_type": {"key": "retentionPolicyType", "type": "str"},
    }

    _subtype_map = {
        "retention_policy_type": {
            "LongTermRetentionPolicy": "LongTermRetentionPolicy",
            "SimpleRetentionPolicy": "SimpleRetentionPolicy",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.retention_policy_type: Optional[str] = None


class LongTermRetentionPolicy(RetentionPolicy):
    """Long term retention policy.

    All required parameters must be populated in order to send to Azure.

    :ivar retention_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype retention_policy_type: str
    :ivar daily_schedule: Daily retention schedule of the protection policy.
    :vartype daily_schedule: ~azure.mgmt.workloads.connector.models.DailyRetentionSchedule
    :ivar weekly_schedule: Weekly retention schedule of the protection policy.
    :vartype weekly_schedule: ~azure.mgmt.workloads.connector.models.WeeklyRetentionSchedule
    :ivar monthly_schedule: Monthly retention schedule of the protection policy.
    :vartype monthly_schedule: ~azure.mgmt.workloads.connector.models.MonthlyRetentionSchedule
    :ivar yearly_schedule: Yearly retention schedule of the protection policy.
    :vartype yearly_schedule: ~azure.mgmt.workloads.connector.models.YearlyRetentionSchedule
    """

    _validation = {
        "retention_policy_type": {"required": True},
    }

    _attribute_map = {
        "retention_policy_type": {"key": "retentionPolicyType", "type": "str"},
        "daily_schedule": {"key": "dailySchedule", "type": "DailyRetentionSchedule"},
        "weekly_schedule": {"key": "weeklySchedule", "type": "WeeklyRetentionSchedule"},
        "monthly_schedule": {"key": "monthlySchedule", "type": "MonthlyRetentionSchedule"},
        "yearly_schedule": {"key": "yearlySchedule", "type": "YearlyRetentionSchedule"},
    }

    def __init__(
        self,
        *,
        daily_schedule: Optional["_models.DailyRetentionSchedule"] = None,
        weekly_schedule: Optional["_models.WeeklyRetentionSchedule"] = None,
        monthly_schedule: Optional["_models.MonthlyRetentionSchedule"] = None,
        yearly_schedule: Optional["_models.YearlyRetentionSchedule"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword daily_schedule: Daily retention schedule of the protection policy.
        :paramtype daily_schedule: ~azure.mgmt.workloads.connector.models.DailyRetentionSchedule
        :keyword weekly_schedule: Weekly retention schedule of the protection policy.
        :paramtype weekly_schedule: ~azure.mgmt.workloads.connector.models.WeeklyRetentionSchedule
        :keyword monthly_schedule: Monthly retention schedule of the protection policy.
        :paramtype monthly_schedule: ~azure.mgmt.workloads.connector.models.MonthlyRetentionSchedule
        :keyword yearly_schedule: Yearly retention schedule of the protection policy.
        :paramtype yearly_schedule: ~azure.mgmt.workloads.connector.models.YearlyRetentionSchedule
        """
        super().__init__(**kwargs)
        self.retention_policy_type: str = "LongTermRetentionPolicy"
        self.daily_schedule = daily_schedule
        self.weekly_schedule = weekly_schedule
        self.monthly_schedule = monthly_schedule
        self.yearly_schedule = yearly_schedule


class LongTermSchedulePolicy(SchedulePolicy):
    """Long term policy schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype schedule_policy_type: str
    """

    _validation = {
        "schedule_policy_type": {"required": True},
    }

    _attribute_map = {
        "schedule_policy_type": {"key": "schedulePolicyType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.schedule_policy_type: str = "LongTermSchedulePolicy"


class ManagedRGConfiguration(_serialization.Model):
    """Managed resource group configuration.

    :ivar name: Managed resource group name.
    :vartype name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Managed resource group name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class MonthlyRetentionSchedule(_serialization.Model):
    """Monthly retention schedule.

    :ivar retention_schedule_format_type: Retention schedule format type for monthly retention
     policy. Known values are: "Invalid", "Daily", and "Weekly".
    :vartype retention_schedule_format_type: str or
     ~azure.mgmt.workloads.connector.models.RetentionScheduleFormat
    :ivar retention_schedule_daily: Daily retention format for monthly retention policy.
    :vartype retention_schedule_daily: ~azure.mgmt.workloads.connector.models.DailyRetentionFormat
    :ivar retention_schedule_weekly: Weekly retention format for monthly retention policy.
    :vartype retention_schedule_weekly:
     ~azure.mgmt.workloads.connector.models.WeeklyRetentionFormat
    :ivar retention_times: Retention times of retention policy.
    :vartype retention_times: list[~datetime.datetime]
    :ivar retention_duration: Retention duration of retention Policy.
    :vartype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
    """

    _attribute_map = {
        "retention_schedule_format_type": {"key": "retentionScheduleFormatType", "type": "str"},
        "retention_schedule_daily": {"key": "retentionScheduleDaily", "type": "DailyRetentionFormat"},
        "retention_schedule_weekly": {"key": "retentionScheduleWeekly", "type": "WeeklyRetentionFormat"},
        "retention_times": {"key": "retentionTimes", "type": "[iso-8601]"},
        "retention_duration": {"key": "retentionDuration", "type": "RetentionDuration"},
    }

    def __init__(
        self,
        *,
        retention_schedule_format_type: Optional[Union[str, "_models.RetentionScheduleFormat"]] = None,
        retention_schedule_daily: Optional["_models.DailyRetentionFormat"] = None,
        retention_schedule_weekly: Optional["_models.WeeklyRetentionFormat"] = None,
        retention_times: Optional[List[datetime.datetime]] = None,
        retention_duration: Optional["_models.RetentionDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword retention_schedule_format_type: Retention schedule format type for monthly retention
         policy. Known values are: "Invalid", "Daily", and "Weekly".
        :paramtype retention_schedule_format_type: str or
         ~azure.mgmt.workloads.connector.models.RetentionScheduleFormat
        :keyword retention_schedule_daily: Daily retention format for monthly retention policy.
        :paramtype retention_schedule_daily:
         ~azure.mgmt.workloads.connector.models.DailyRetentionFormat
        :keyword retention_schedule_weekly: Weekly retention format for monthly retention policy.
        :paramtype retention_schedule_weekly:
         ~azure.mgmt.workloads.connector.models.WeeklyRetentionFormat
        :keyword retention_times: Retention times of retention policy.
        :paramtype retention_times: list[~datetime.datetime]
        :keyword retention_duration: Retention duration of retention Policy.
        :paramtype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
        """
        super().__init__(**kwargs)
        self.retention_schedule_format_type = retention_schedule_format_type
        self.retention_schedule_daily = retention_schedule_daily
        self.retention_schedule_weekly = retention_schedule_weekly
        self.retention_times = retention_times
        self.retention_duration = retention_duration


class NewRecoveryServicesVault(RecoveryServicesVaultProperties):
    """New recovery services vault.

    All required parameters must be populated in order to send to Azure.

    :ivar vault_type: The vault type, whether it is existing or has to be created. Required. Known
     values are: "Existing" and "New".
    :vartype vault_type: str or ~azure.mgmt.workloads.connector.models.VaultType
    :ivar name: The name of the recovery services vault has to be created. Required.
    :vartype name: str
    :ivar resource_group: The name of the resource group where the recovery services vault has to
     be created. Required.
    :vartype resource_group: str
    """

    _validation = {
        "vault_type": {"required": True},
        "name": {"required": True},
        "resource_group": {"required": True},
    }

    _attribute_map = {
        "vault_type": {"key": "vaultType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "resource_group": {"key": "resourceGroup", "type": "str"},
    }

    def __init__(self, *, name: str, resource_group: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the recovery services vault has to be created. Required.
        :paramtype name: str
        :keyword resource_group: The name of the resource group where the recovery services vault has
         to be created. Required.
        :paramtype resource_group: str
        """
        super().__init__(**kwargs)
        self.vault_type: str = "New"
        self.name = name
        self.resource_group = resource_group


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.workloads.connector.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.workloads.connector.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.workloads.connector.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.workloads.connector.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.workloads.connector.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class RetentionDuration(_serialization.Model):
    """Retention duration.

    :ivar count: Count of duration types. Retention duration is obtained by the counting the
     duration type Count times.
     For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
    :vartype count: int
    :ivar duration_type: Retention duration type of retention policy. Known values are: "Invalid",
     "Days", "Weeks", "Months", and "Years".
    :vartype duration_type: str or ~azure.mgmt.workloads.connector.models.RetentionDurationType
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "duration_type": {"key": "durationType", "type": "str"},
    }

    def __init__(
        self,
        *,
        count: Optional[int] = None,
        duration_type: Optional[Union[str, "_models.RetentionDurationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword count: Count of duration types. Retention duration is obtained by the counting the
         duration type Count times.
         For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        :paramtype count: int
        :keyword duration_type: Retention duration type of retention policy. Known values are:
         "Invalid", "Days", "Weeks", "Months", and "Years".
        :paramtype duration_type: str or ~azure.mgmt.workloads.connector.models.RetentionDurationType
        """
        super().__init__(**kwargs)
        self.count = count
        self.duration_type = duration_type


class Settings(_serialization.Model):
    """Common settings field for backup management.

    :ivar time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific Standard
     Time".
    :vartype time_zone: str
    :ivar issqlcompression: SQL compression flag.
    :vartype issqlcompression: bool
    :ivar is_compression: Workload compression flag. This has been added so that 'isSqlCompression'
     will be deprecated once clients upgrade to consider this flag.
    :vartype is_compression: bool
    """

    _attribute_map = {
        "time_zone": {"key": "timeZone", "type": "str"},
        "issqlcompression": {"key": "issqlcompression", "type": "bool"},
        "is_compression": {"key": "isCompression", "type": "bool"},
    }

    def __init__(
        self,
        *,
        time_zone: Optional[str] = None,
        issqlcompression: Optional[bool] = None,
        is_compression: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword time_zone: TimeZone optional input as string. For example: TimeZone = "Pacific
         Standard Time".
        :paramtype time_zone: str
        :keyword issqlcompression: SQL compression flag.
        :paramtype issqlcompression: bool
        :keyword is_compression: Workload compression flag. This has been added so that
         'isSqlCompression'
         will be deprecated once clients upgrade to consider this flag.
        :paramtype is_compression: bool
        """
        super().__init__(**kwargs)
        self.time_zone = time_zone
        self.issqlcompression = issqlcompression
        self.is_compression = is_compression


class SimpleRetentionPolicy(RetentionPolicy):
    """Simple policy retention.

    All required parameters must be populated in order to send to Azure.

    :ivar retention_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype retention_policy_type: str
    :ivar retention_duration: Retention duration of the protection policy.
    :vartype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
    """

    _validation = {
        "retention_policy_type": {"required": True},
    }

    _attribute_map = {
        "retention_policy_type": {"key": "retentionPolicyType", "type": "str"},
        "retention_duration": {"key": "retentionDuration", "type": "RetentionDuration"},
    }

    def __init__(self, *, retention_duration: Optional["_models.RetentionDuration"] = None, **kwargs: Any) -> None:
        """
        :keyword retention_duration: Retention duration of the protection policy.
        :paramtype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
        """
        super().__init__(**kwargs)
        self.retention_policy_type: str = "SimpleRetentionPolicy"
        self.retention_duration = retention_duration


class SimpleSchedulePolicy(SchedulePolicy):
    """Simple policy schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype schedule_policy_type: str
    :ivar schedule_run_frequency: Frequency of the schedule operation of this policy. Known values
     are: "Invalid", "Daily", "Weekly", and "Hourly".
    :vartype schedule_run_frequency: str or ~azure.mgmt.workloads.connector.models.ScheduleRunType
    :ivar schedule_run_days: List of days of week this schedule has to be run.
    :vartype schedule_run_days: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
    :ivar schedule_run_times: List of times of day this schedule has to be run.
    :vartype schedule_run_times: list[~datetime.datetime]
    :ivar hourly_schedule: Hourly Schedule of this Policy.
    :vartype hourly_schedule: ~azure.mgmt.workloads.connector.models.HourlySchedule
    :ivar schedule_weekly_frequency: At every number weeks this schedule has to be run.
    :vartype schedule_weekly_frequency: int
    """

    _validation = {
        "schedule_policy_type": {"required": True},
    }

    _attribute_map = {
        "schedule_policy_type": {"key": "schedulePolicyType", "type": "str"},
        "schedule_run_frequency": {"key": "scheduleRunFrequency", "type": "str"},
        "schedule_run_days": {"key": "scheduleRunDays", "type": "[str]"},
        "schedule_run_times": {"key": "scheduleRunTimes", "type": "[iso-8601]"},
        "hourly_schedule": {"key": "hourlySchedule", "type": "HourlySchedule"},
        "schedule_weekly_frequency": {"key": "scheduleWeeklyFrequency", "type": "int"},
    }

    def __init__(
        self,
        *,
        schedule_run_frequency: Optional[Union[str, "_models.ScheduleRunType"]] = None,
        schedule_run_days: Optional[List[Union[str, "_models.DayOfWeek"]]] = None,
        schedule_run_times: Optional[List[datetime.datetime]] = None,
        hourly_schedule: Optional["_models.HourlySchedule"] = None,
        schedule_weekly_frequency: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schedule_run_frequency: Frequency of the schedule operation of this policy. Known
         values are: "Invalid", "Daily", "Weekly", and "Hourly".
        :paramtype schedule_run_frequency: str or
         ~azure.mgmt.workloads.connector.models.ScheduleRunType
        :keyword schedule_run_days: List of days of week this schedule has to be run.
        :paramtype schedule_run_days: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
        :keyword schedule_run_times: List of times of day this schedule has to be run.
        :paramtype schedule_run_times: list[~datetime.datetime]
        :keyword hourly_schedule: Hourly Schedule of this Policy.
        :paramtype hourly_schedule: ~azure.mgmt.workloads.connector.models.HourlySchedule
        :keyword schedule_weekly_frequency: At every number weeks this schedule has to be run.
        :paramtype schedule_weekly_frequency: int
        """
        super().__init__(**kwargs)
        self.schedule_policy_type: str = "SimpleSchedulePolicy"
        self.schedule_run_frequency = schedule_run_frequency
        self.schedule_run_days = schedule_run_days
        self.schedule_run_times = schedule_run_times
        self.hourly_schedule = hourly_schedule
        self.schedule_weekly_frequency = schedule_weekly_frequency


class SimpleSchedulePolicyV2(SchedulePolicy):
    """The V2 policy schedule for IaaS that supports hourly backups.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_policy_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types. Required.
    :vartype schedule_policy_type: str
    :ivar schedule_run_frequency: Frequency of the schedule operation of this policy. Known values
     are: "Invalid", "Daily", "Weekly", and "Hourly".
    :vartype schedule_run_frequency: str or ~azure.mgmt.workloads.connector.models.ScheduleRunType
    :ivar hourly_schedule: hourly schedule of this policy.
    :vartype hourly_schedule: ~azure.mgmt.workloads.connector.models.HourlySchedule
    :ivar daily_schedule: Daily schedule of this policy.
    :vartype daily_schedule: ~azure.mgmt.workloads.connector.models.DailySchedule
    :ivar weekly_schedule: Weekly schedule of this policy.
    :vartype weekly_schedule: ~azure.mgmt.workloads.connector.models.WeeklySchedule
    """

    _validation = {
        "schedule_policy_type": {"required": True},
    }

    _attribute_map = {
        "schedule_policy_type": {"key": "schedulePolicyType", "type": "str"},
        "schedule_run_frequency": {"key": "scheduleRunFrequency", "type": "str"},
        "hourly_schedule": {"key": "hourlySchedule", "type": "HourlySchedule"},
        "daily_schedule": {"key": "dailySchedule", "type": "DailySchedule"},
        "weekly_schedule": {"key": "weeklySchedule", "type": "WeeklySchedule"},
    }

    def __init__(
        self,
        *,
        schedule_run_frequency: Optional[Union[str, "_models.ScheduleRunType"]] = None,
        hourly_schedule: Optional["_models.HourlySchedule"] = None,
        daily_schedule: Optional["_models.DailySchedule"] = None,
        weekly_schedule: Optional["_models.WeeklySchedule"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schedule_run_frequency: Frequency of the schedule operation of this policy. Known
         values are: "Invalid", "Daily", "Weekly", and "Hourly".
        :paramtype schedule_run_frequency: str or
         ~azure.mgmt.workloads.connector.models.ScheduleRunType
        :keyword hourly_schedule: hourly schedule of this policy.
        :paramtype hourly_schedule: ~azure.mgmt.workloads.connector.models.HourlySchedule
        :keyword daily_schedule: Daily schedule of this policy.
        :paramtype daily_schedule: ~azure.mgmt.workloads.connector.models.DailySchedule
        :keyword weekly_schedule: Weekly schedule of this policy.
        :paramtype weekly_schedule: ~azure.mgmt.workloads.connector.models.WeeklySchedule
        """
        super().__init__(**kwargs)
        self.schedule_policy_type: str = "SimpleSchedulePolicyV2"
        self.schedule_run_frequency = schedule_run_frequency
        self.hourly_schedule = hourly_schedule
        self.daily_schedule = daily_schedule
        self.weekly_schedule = weekly_schedule


class SnapshotBackupAdditionalDetails(_serialization.Model):
    """Snapshot Backup related fields for WorkloadType SAP Hana system.

    :ivar instant_rp_retention_range_in_days: Retention range for instant Rp in days.
    :vartype instant_rp_retention_range_in_days: int
    :ivar instant_rp_details: Instant RP details for the snapshot.
    :vartype instant_rp_details: str
    :ivar user_assigned_managed_identity_details: User Assigned managed identity details used for
     snapshot policy.
    :vartype user_assigned_managed_identity_details:
     ~azure.mgmt.workloads.connector.models.UserAssignedManagedIdentityDetails
    """

    _attribute_map = {
        "instant_rp_retention_range_in_days": {"key": "instantRpRetentionRangeInDays", "type": "int"},
        "instant_rp_details": {"key": "instantRPDetails", "type": "str"},
        "user_assigned_managed_identity_details": {
            "key": "userAssignedManagedIdentityDetails",
            "type": "UserAssignedManagedIdentityDetails",
        },
    }

    def __init__(
        self,
        *,
        instant_rp_retention_range_in_days: Optional[int] = None,
        instant_rp_details: Optional[str] = None,
        user_assigned_managed_identity_details: Optional["_models.UserAssignedManagedIdentityDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword instant_rp_retention_range_in_days: Retention range for instant Rp in days.
        :paramtype instant_rp_retention_range_in_days: int
        :keyword instant_rp_details: Instant RP details for the snapshot.
        :paramtype instant_rp_details: str
        :keyword user_assigned_managed_identity_details: User Assigned managed identity details used
         for snapshot policy.
        :paramtype user_assigned_managed_identity_details:
         ~azure.mgmt.workloads.connector.models.UserAssignedManagedIdentityDetails
        """
        super().__init__(**kwargs)
        self.instant_rp_retention_range_in_days = instant_rp_retention_range_in_days
        self.instant_rp_details = instant_rp_details
        self.user_assigned_managed_identity_details = user_assigned_managed_identity_details


class SqlBackupData(BackupData):
    """Defines the SQL Backup data for a virtual instance for SAP.

    All required parameters must be populated in order to send to Azure.

    :ivar backup_type: The type of backup, VM, SQL or HANA. Required. Known values are: "VM",
     "SQL", and "HANA".
    :vartype backup_type: str or ~azure.mgmt.workloads.connector.models.BackupType
    :ivar recovery_services_vault: The properties of the recovery services vault used for backup.
     Required.
    :vartype recovery_services_vault:
     ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
    :ivar backup_policy: Defines the policy properties for database backup. Required.
    :vartype backup_policy: ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
    """

    _validation = {
        "backup_type": {"required": True},
        "recovery_services_vault": {"required": True},
        "backup_policy": {"required": True},
    }

    _attribute_map = {
        "backup_type": {"key": "backupType", "type": "str"},
        "recovery_services_vault": {"key": "recoveryServicesVault", "type": "RecoveryServicesVaultProperties"},
        "backup_policy": {"key": "backupPolicy", "type": "DBBackupPolicyProperties"},
    }

    def __init__(
        self,
        *,
        recovery_services_vault: "_models.RecoveryServicesVaultProperties",
        backup_policy: "_models.DBBackupPolicyProperties",
        **kwargs: Any
    ) -> None:
        """
        :keyword recovery_services_vault: The properties of the recovery services vault used for
         backup. Required.
        :paramtype recovery_services_vault:
         ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
        :keyword backup_policy: Defines the policy properties for database backup. Required.
        :paramtype backup_policy: ~azure.mgmt.workloads.connector.models.DBBackupPolicyProperties
        """
        super().__init__(recovery_services_vault=recovery_services_vault, **kwargs)
        self.backup_type: str = "SQL"
        self.backup_policy = backup_policy


class SSLConfiguration(_serialization.Model):
    """Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for
    this database. You need to specify these details if you have enabled secure communication for
    your HANA database.

    :ivar ssl_key_store: Specify the name of the keystore file that contains the client's identity
     (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on
     the crypto provider mentioned. If this argument is not provided, it is automatically determined
     by searching in the configuration files.
    :vartype ssl_key_store: str
    :ivar ssl_trust_store: Specify the name of the trust store file that contains the server’s
     public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate
     directory depending on the crypto provider mentioned. If this argument is not provided, it is
     automatically determined by searching in the configuration files.
    :vartype ssl_trust_store: str
    :ivar ssl_host_name_in_certificate: Specify the hostname as mentioned in the SSL certificate.
     If this argument is not provided, it is automatically determined by searching in the SSL
     certificate.
    :vartype ssl_host_name_in_certificate: str
    :ivar ssl_crypto_provider: Specify the crypto provider being used (commoncrypto/openssl). If
     this argument is not provided, it is automatically determined by searching in the configuration
     files. Known values are: "commoncrypto" and "openssl".
    :vartype ssl_crypto_provider: str or ~azure.mgmt.workloads.connector.models.SslCryptoProvider
    """

    _attribute_map = {
        "ssl_key_store": {"key": "sslKeyStore", "type": "str"},
        "ssl_trust_store": {"key": "sslTrustStore", "type": "str"},
        "ssl_host_name_in_certificate": {"key": "sslHostNameInCertificate", "type": "str"},
        "ssl_crypto_provider": {"key": "sslCryptoProvider", "type": "str"},
    }

    def __init__(
        self,
        *,
        ssl_key_store: Optional[str] = None,
        ssl_trust_store: Optional[str] = None,
        ssl_host_name_in_certificate: Optional[str] = None,
        ssl_crypto_provider: Optional[Union[str, "_models.SslCryptoProvider"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword ssl_key_store: Specify the name of the keystore file that contains the client's
         identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory
         depending on the crypto provider mentioned. If this argument is not provided, it is
         automatically determined by searching in the configuration files.
        :paramtype ssl_key_store: str
        :keyword ssl_trust_store: Specify the name of the trust store file that contains the server’s
         public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate
         directory depending on the crypto provider mentioned. If this argument is not provided, it is
         automatically determined by searching in the configuration files.
        :paramtype ssl_trust_store: str
        :keyword ssl_host_name_in_certificate: Specify the hostname as mentioned in the SSL
         certificate. If this argument is not provided, it is automatically determined by searching in
         the SSL certificate.
        :paramtype ssl_host_name_in_certificate: str
        :keyword ssl_crypto_provider: Specify the crypto provider being used (commoncrypto/openssl). If
         this argument is not provided, it is automatically determined by searching in the configuration
         files. Known values are: "commoncrypto" and "openssl".
        :paramtype ssl_crypto_provider: str or ~azure.mgmt.workloads.connector.models.SslCryptoProvider
        """
        super().__init__(**kwargs)
        self.ssl_key_store = ssl_key_store
        self.ssl_trust_store = ssl_trust_store
        self.ssl_host_name_in_certificate = ssl_host_name_in_certificate
        self.ssl_crypto_provider = ssl_crypto_provider


class SubProtectionPolicy(_serialization.Model):
    """Sub-protection policy which includes schedule and retention.

    :ivar policy_type: Type of backup policy type. Known values are: "Invalid", "Full",
     "Differential", "Log", "CopyOnlyFull", "Incremental", "SnapshotFull", and
     "SnapshotCopyOnlyFull".
    :vartype policy_type: str or ~azure.mgmt.workloads.connector.models.PolicyType
    :ivar schedule_policy: Backup schedule specified as part of backup policy.
    :vartype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
    :ivar retention_policy: Retention policy with the details on backup copy retention ranges.
    :vartype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
    :ivar tiering_policy: Tiering policy to automatically move RPs to another tier.
     Key is Target Tier, defined in RecoveryPointTierType enum.
     Tiering policy specifies the criteria to move RP to the target tier.
    :vartype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
    :ivar snapshot_backup_additional_details: Hana DB instance snapshot backup additional details.
    :vartype snapshot_backup_additional_details:
     ~azure.mgmt.workloads.connector.models.SnapshotBackupAdditionalDetails
    """

    _attribute_map = {
        "policy_type": {"key": "policyType", "type": "str"},
        "schedule_policy": {"key": "schedulePolicy", "type": "SchedulePolicy"},
        "retention_policy": {"key": "retentionPolicy", "type": "RetentionPolicy"},
        "tiering_policy": {"key": "tieringPolicy", "type": "{TieringPolicy}"},
        "snapshot_backup_additional_details": {
            "key": "snapshotBackupAdditionalDetails",
            "type": "SnapshotBackupAdditionalDetails",
        },
    }

    def __init__(
        self,
        *,
        policy_type: Optional[Union[str, "_models.PolicyType"]] = None,
        schedule_policy: Optional["_models.SchedulePolicy"] = None,
        retention_policy: Optional["_models.RetentionPolicy"] = None,
        tiering_policy: Optional[Dict[str, "_models.TieringPolicy"]] = None,
        snapshot_backup_additional_details: Optional["_models.SnapshotBackupAdditionalDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword policy_type: Type of backup policy type. Known values are: "Invalid", "Full",
         "Differential", "Log", "CopyOnlyFull", "Incremental", "SnapshotFull", and
         "SnapshotCopyOnlyFull".
        :paramtype policy_type: str or ~azure.mgmt.workloads.connector.models.PolicyType
        :keyword schedule_policy: Backup schedule specified as part of backup policy.
        :paramtype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
        :keyword retention_policy: Retention policy with the details on backup copy retention ranges.
        :paramtype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
        :keyword tiering_policy: Tiering policy to automatically move RPs to another tier.
         Key is Target Tier, defined in RecoveryPointTierType enum.
         Tiering policy specifies the criteria to move RP to the target tier.
        :paramtype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
        :keyword snapshot_backup_additional_details: Hana DB instance snapshot backup additional
         details.
        :paramtype snapshot_backup_additional_details:
         ~azure.mgmt.workloads.connector.models.SnapshotBackupAdditionalDetails
        """
        super().__init__(**kwargs)
        self.policy_type = policy_type
        self.schedule_policy = schedule_policy
        self.retention_policy = retention_policy
        self.tiering_policy = tiering_policy
        self.snapshot_backup_additional_details = snapshot_backup_additional_details


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.workloads.connector.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.workloads.connector.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.workloads.connector.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.workloads.connector.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TieringPolicy(_serialization.Model):
    """Tiering Policy for a target tier.
    If the policy is not specified for a given target tier, service retains the existing configured
    tiering policy for that tier.

    :ivar tiering_mode: Tiering Mode to control automatic tiering of recovery points. Supported
     values are:


     #. TierRecommended: Tier all recovery points recommended to be tiered
     #. TierAfter: Tier all recovery points after a fixed period, as specified in duration +
     durationType below.
     #. DoNotTier: Do not tier any recovery points. Known values are: "Invalid", "TierRecommended",
     "TierAfter", and "DoNotTier".
    :vartype tiering_mode: str or ~azure.mgmt.workloads.connector.models.TieringMode
    :ivar duration: Number of days/weeks/months/years to retain backups in current tier before
     tiering.
     Used only if TieringMode is set to TierAfter.
    :vartype duration: int
    :ivar duration_type: Retention duration type: days/weeks/months/years
     Used only if TieringMode is set to TierAfter. Known values are: "Invalid", "Days", "Weeks",
     "Months", and "Years".
    :vartype duration_type: str or ~azure.mgmt.workloads.connector.models.RetentionDurationType
    """

    _attribute_map = {
        "tiering_mode": {"key": "tieringMode", "type": "str"},
        "duration": {"key": "duration", "type": "int"},
        "duration_type": {"key": "durationType", "type": "str"},
    }

    def __init__(
        self,
        *,
        tiering_mode: Optional[Union[str, "_models.TieringMode"]] = None,
        duration: Optional[int] = None,
        duration_type: Optional[Union[str, "_models.RetentionDurationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tiering_mode: Tiering Mode to control automatic tiering of recovery points. Supported
         values are:


         #. TierRecommended: Tier all recovery points recommended to be tiered
         #. TierAfter: Tier all recovery points after a fixed period, as specified in duration +
         durationType below.
         #. DoNotTier: Do not tier any recovery points. Known values are: "Invalid", "TierRecommended",
         "TierAfter", and "DoNotTier".
        :paramtype tiering_mode: str or ~azure.mgmt.workloads.connector.models.TieringMode
        :keyword duration: Number of days/weeks/months/years to retain backups in current tier before
         tiering.
         Used only if TieringMode is set to TierAfter.
        :paramtype duration: int
        :keyword duration_type: Retention duration type: days/weeks/months/years
         Used only if TieringMode is set to TierAfter. Known values are: "Invalid", "Days", "Weeks",
         "Months", and "Years".
        :paramtype duration_type: str or ~azure.mgmt.workloads.connector.models.RetentionDurationType
        """
        super().__init__(**kwargs)
        self.tiering_mode = tiering_mode
        self.duration = duration
        self.duration_type = duration_type


class UpdateACSSBackupConnectionRequest(_serialization.Model):
    """Defines the request body for updating backup connection resource of virtual instance for SAP.

    :ivar tags: Gets or sets the Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Gets or sets the Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class UpdateConnectorRequest(_serialization.Model):
    """Defines the request body for updating a connector.

    :ivar tags: Gets or sets the resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: Managed service identity (user assigned identities).
    :vartype identity: ~azure.mgmt.workloads.connector.models.UserAssignedServiceIdentity
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "identity": {"key": "identity", "type": "UserAssignedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.UserAssignedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Gets or sets the resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (user assigned identities).
        :paramtype identity: ~azure.mgmt.workloads.connector.models.UserAssignedServiceIdentity
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.identity = identity


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class UserAssignedIdentityProperties(_serialization.Model):
    """User assigned managed identity properties.

    :ivar client_id:
    :vartype client_id: str
    :ivar principal_id:
    :vartype principal_id: str
    """

    _attribute_map = {
        "client_id": {"key": "clientId", "type": "str"},
        "principal_id": {"key": "principalId", "type": "str"},
    }

    def __init__(self, *, client_id: Optional[str] = None, principal_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword client_id:
        :paramtype client_id: str
        :keyword principal_id:
        :paramtype principal_id: str
        """
        super().__init__(**kwargs)
        self.client_id = client_id
        self.principal_id = principal_id


class UserAssignedManagedIdentityDetails(_serialization.Model):
    """User assigned managed identity details.

    :ivar identity_arm_id:
    :vartype identity_arm_id: str
    :ivar identity_name:
    :vartype identity_name: str
    :ivar user_assigned_identity_properties: User assigned managed identity properties.
    :vartype user_assigned_identity_properties:
     ~azure.mgmt.workloads.connector.models.UserAssignedIdentityProperties
    """

    _attribute_map = {
        "identity_arm_id": {"key": "identityArmId", "type": "str"},
        "identity_name": {"key": "identityName", "type": "str"},
        "user_assigned_identity_properties": {
            "key": "userAssignedIdentityProperties",
            "type": "UserAssignedIdentityProperties",
        },
    }

    def __init__(
        self,
        *,
        identity_arm_id: Optional[str] = None,
        identity_name: Optional[str] = None,
        user_assigned_identity_properties: Optional["_models.UserAssignedIdentityProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity_arm_id:
        :paramtype identity_arm_id: str
        :keyword identity_name:
        :paramtype identity_name: str
        :keyword user_assigned_identity_properties: User assigned managed identity properties.
        :paramtype user_assigned_identity_properties:
         ~azure.mgmt.workloads.connector.models.UserAssignedIdentityProperties
        """
        super().__init__(**kwargs)
        self.identity_arm_id = identity_arm_id
        self.identity_name = identity_name
        self.user_assigned_identity_properties = user_assigned_identity_properties


class UserAssignedServiceIdentity(_serialization.Model):
    """Managed service identity (user assigned identities).

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of manage identity. Required. Known values are: "None" and "UserAssigned".
    :vartype type: str or ~azure.mgmt.workloads.connector.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: User assigned identities dictionary.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.workloads.connector.models.UserAssignedIdentity]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of manage identity. Required. Known values are: "None" and "UserAssigned".
        :paramtype type: str or ~azure.mgmt.workloads.connector.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: User assigned identities dictionary.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.workloads.connector.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class VMBackupData(BackupData):
    """Defines the VM Backup data for a virtual instance for SAP.

    All required parameters must be populated in order to send to Azure.

    :ivar backup_type: The type of backup, VM, SQL or HANA. Required. Known values are: "VM",
     "SQL", and "HANA".
    :vartype backup_type: str or ~azure.mgmt.workloads.connector.models.BackupType
    :ivar recovery_services_vault: The properties of the recovery services vault used for backup.
     Required.
    :vartype recovery_services_vault:
     ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
    :ivar backup_policy: Defines the policy properties for virtual machine backup. Required.
    :vartype backup_policy: ~azure.mgmt.workloads.connector.models.VMBackupPolicyProperties
    :ivar disk_exclusion_properties: Defines the disk exclusion properties for virtual machine
     backup.
    :vartype disk_exclusion_properties:
     ~azure.mgmt.workloads.connector.models.DiskExclusionProperties
    """

    _validation = {
        "backup_type": {"required": True},
        "recovery_services_vault": {"required": True},
        "backup_policy": {"required": True},
    }

    _attribute_map = {
        "backup_type": {"key": "backupType", "type": "str"},
        "recovery_services_vault": {"key": "recoveryServicesVault", "type": "RecoveryServicesVaultProperties"},
        "backup_policy": {"key": "backupPolicy", "type": "VMBackupPolicyProperties"},
        "disk_exclusion_properties": {"key": "diskExclusionProperties", "type": "DiskExclusionProperties"},
    }

    def __init__(
        self,
        *,
        recovery_services_vault: "_models.RecoveryServicesVaultProperties",
        backup_policy: "_models.VMBackupPolicyProperties",
        disk_exclusion_properties: Optional["_models.DiskExclusionProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword recovery_services_vault: The properties of the recovery services vault used for
         backup. Required.
        :paramtype recovery_services_vault:
         ~azure.mgmt.workloads.connector.models.RecoveryServicesVaultProperties
        :keyword backup_policy: Defines the policy properties for virtual machine backup. Required.
        :paramtype backup_policy: ~azure.mgmt.workloads.connector.models.VMBackupPolicyProperties
        :keyword disk_exclusion_properties: Defines the disk exclusion properties for virtual machine
         backup.
        :paramtype disk_exclusion_properties:
         ~azure.mgmt.workloads.connector.models.DiskExclusionProperties
        """
        super().__init__(recovery_services_vault=recovery_services_vault, **kwargs)
        self.backup_type: str = "VM"
        self.backup_policy = backup_policy
        self.disk_exclusion_properties = disk_exclusion_properties


class VMBackupPolicyProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Defines the policy properties for virtual machine backup.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the VM Backup policy. Required.
    :vartype name: str
    :ivar protected_items_count: Number of items associated with this policy.
    :vartype protected_items_count: int
    :ivar backup_management_type: This property will be used as the discriminator for deciding the
     specific types in the polymorphic chain of types.
    :vartype backup_management_type: str
    :ivar resource_guard_operation_requests: ResourceGuard Operation Requests.
    :vartype resource_guard_operation_requests: list[str]
    :ivar instant_rp_details: Instant recovery point additional details.
    :vartype instant_rp_details: ~azure.mgmt.workloads.connector.models.InstantRPAdditionalDetails
    :ivar schedule_policy: Backup schedule specified as part of backup policy.
    :vartype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
    :ivar retention_policy: Retention policy with the details on backup copy retention ranges.
    :vartype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
    :ivar tiering_policy: Tiering policy to automatically move RPs to another tier
     Key is Target Tier, defined in RecoveryPointTierType enum.
     Tiering policy specifies the criteria to move RP to the target tier.
    :vartype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
    :ivar instant_rp_retention_range_in_days: Instant RP retention policy range in days.
    :vartype instant_rp_retention_range_in_days: int
    :ivar time_zone: Time zone optional input as string. For example: "Pacific Standard Time".
    :vartype time_zone: str
    :ivar policy_type: The policy type. Known values are: "Invalid", "V1", and "V2".
    :vartype policy_type: str or ~azure.mgmt.workloads.connector.models.IAASVMPolicyType
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "protected_items_count": {"key": "properties.protectedItemsCount", "type": "int"},
        "backup_management_type": {"key": "properties.backupManagementType", "type": "str"},
        "resource_guard_operation_requests": {"key": "properties.resourceGuardOperationRequests", "type": "[str]"},
        "instant_rp_details": {"key": "properties.instantRPDetails", "type": "InstantRPAdditionalDetails"},
        "schedule_policy": {"key": "properties.schedulePolicy", "type": "SchedulePolicy"},
        "retention_policy": {"key": "properties.retentionPolicy", "type": "RetentionPolicy"},
        "tiering_policy": {"key": "properties.tieringPolicy", "type": "{TieringPolicy}"},
        "instant_rp_retention_range_in_days": {"key": "properties.instantRpRetentionRangeInDays", "type": "int"},
        "time_zone": {"key": "properties.timeZone", "type": "str"},
        "policy_type": {"key": "properties.policyType", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        protected_items_count: Optional[int] = None,
        resource_guard_operation_requests: Optional[List[str]] = None,
        instant_rp_details: Optional["_models.InstantRPAdditionalDetails"] = None,
        schedule_policy: Optional["_models.SchedulePolicy"] = None,
        retention_policy: Optional["_models.RetentionPolicy"] = None,
        tiering_policy: Optional[Dict[str, "_models.TieringPolicy"]] = None,
        instant_rp_retention_range_in_days: Optional[int] = None,
        time_zone: Optional[str] = None,
        policy_type: Optional[Union[str, "_models.IAASVMPolicyType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the VM Backup policy. Required.
        :paramtype name: str
        :keyword protected_items_count: Number of items associated with this policy.
        :paramtype protected_items_count: int
        :keyword resource_guard_operation_requests: ResourceGuard Operation Requests.
        :paramtype resource_guard_operation_requests: list[str]
        :keyword instant_rp_details: Instant recovery point additional details.
        :paramtype instant_rp_details:
         ~azure.mgmt.workloads.connector.models.InstantRPAdditionalDetails
        :keyword schedule_policy: Backup schedule specified as part of backup policy.
        :paramtype schedule_policy: ~azure.mgmt.workloads.connector.models.SchedulePolicy
        :keyword retention_policy: Retention policy with the details on backup copy retention ranges.
        :paramtype retention_policy: ~azure.mgmt.workloads.connector.models.RetentionPolicy
        :keyword tiering_policy: Tiering policy to automatically move RPs to another tier
         Key is Target Tier, defined in RecoveryPointTierType enum.
         Tiering policy specifies the criteria to move RP to the target tier.
        :paramtype tiering_policy: dict[str, ~azure.mgmt.workloads.connector.models.TieringPolicy]
        :keyword instant_rp_retention_range_in_days: Instant RP retention policy range in days.
        :paramtype instant_rp_retention_range_in_days: int
        :keyword time_zone: Time zone optional input as string. For example: "Pacific Standard Time".
        :paramtype time_zone: str
        :keyword policy_type: The policy type. Known values are: "Invalid", "V1", and "V2".
        :paramtype policy_type: str or ~azure.mgmt.workloads.connector.models.IAASVMPolicyType
        """
        super().__init__(**kwargs)
        self.name = name
        self.protected_items_count = protected_items_count
        self.backup_management_type: Optional[str] = None
        self.resource_guard_operation_requests = resource_guard_operation_requests
        self.instant_rp_details = instant_rp_details
        self.schedule_policy = schedule_policy
        self.retention_policy = retention_policy
        self.tiering_policy = tiering_policy
        self.instant_rp_retention_range_in_days = instant_rp_retention_range_in_days
        self.time_zone = time_zone
        self.policy_type = policy_type


class WeeklyRetentionFormat(_serialization.Model):
    """Weekly retention format.

    :ivar days_of_the_week: List of days of the week.
    :vartype days_of_the_week: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
    :ivar weeks_of_the_month: List of weeks of month.
    :vartype weeks_of_the_month: list[str or ~azure.mgmt.workloads.connector.models.WeekOfMonth]
    """

    _attribute_map = {
        "days_of_the_week": {"key": "daysOfTheWeek", "type": "[str]"},
        "weeks_of_the_month": {"key": "weeksOfTheMonth", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        days_of_the_week: Optional[List[Union[str, "_models.DayOfWeek"]]] = None,
        weeks_of_the_month: Optional[List[Union[str, "_models.WeekOfMonth"]]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword days_of_the_week: List of days of the week.
        :paramtype days_of_the_week: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
        :keyword weeks_of_the_month: List of weeks of month.
        :paramtype weeks_of_the_month: list[str or ~azure.mgmt.workloads.connector.models.WeekOfMonth]
        """
        super().__init__(**kwargs)
        self.days_of_the_week = days_of_the_week
        self.weeks_of_the_month = weeks_of_the_month


class WeeklyRetentionSchedule(_serialization.Model):
    """Weekly retention schedule.

    :ivar days_of_the_week: List of days of week for weekly retention policy.
    :vartype days_of_the_week: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
    :ivar retention_times: Retention times of retention policy.
    :vartype retention_times: list[~datetime.datetime]
    :ivar retention_duration: Retention duration of retention Policy.
    :vartype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
    """

    _attribute_map = {
        "days_of_the_week": {"key": "daysOfTheWeek", "type": "[str]"},
        "retention_times": {"key": "retentionTimes", "type": "[iso-8601]"},
        "retention_duration": {"key": "retentionDuration", "type": "RetentionDuration"},
    }

    def __init__(
        self,
        *,
        days_of_the_week: Optional[List[Union[str, "_models.DayOfWeek"]]] = None,
        retention_times: Optional[List[datetime.datetime]] = None,
        retention_duration: Optional["_models.RetentionDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword days_of_the_week: List of days of week for weekly retention policy.
        :paramtype days_of_the_week: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
        :keyword retention_times: Retention times of retention policy.
        :paramtype retention_times: list[~datetime.datetime]
        :keyword retention_duration: Retention duration of retention Policy.
        :paramtype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
        """
        super().__init__(**kwargs)
        self.days_of_the_week = days_of_the_week
        self.retention_times = retention_times
        self.retention_duration = retention_duration


class WeeklySchedule(_serialization.Model):
    """Weekly schedule.

    :ivar schedule_run_days: Schedule run days.
    :vartype schedule_run_days: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
    :ivar schedule_run_times: List of times of day this schedule has to be run.
    :vartype schedule_run_times: list[~datetime.datetime]
    """

    _attribute_map = {
        "schedule_run_days": {"key": "scheduleRunDays", "type": "[str]"},
        "schedule_run_times": {"key": "scheduleRunTimes", "type": "[iso-8601]"},
    }

    def __init__(
        self,
        *,
        schedule_run_days: Optional[List[Union[str, "_models.DayOfWeek"]]] = None,
        schedule_run_times: Optional[List[datetime.datetime]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword schedule_run_days: Schedule run days.
        :paramtype schedule_run_days: list[str or ~azure.mgmt.workloads.connector.models.DayOfWeek]
        :keyword schedule_run_times: List of times of day this schedule has to be run.
        :paramtype schedule_run_times: list[~datetime.datetime]
        """
        super().__init__(**kwargs)
        self.schedule_run_days = schedule_run_days
        self.schedule_run_times = schedule_run_times


class YearlyRetentionSchedule(_serialization.Model):
    """Yearly retention schedule.

    :ivar retention_schedule_format_type: Retention schedule format for yearly retention policy.
     Known values are: "Invalid", "Daily", and "Weekly".
    :vartype retention_schedule_format_type: str or
     ~azure.mgmt.workloads.connector.models.RetentionScheduleFormat
    :ivar months_of_year: List of months of year of yearly retention policy.
    :vartype months_of_year: list[str or ~azure.mgmt.workloads.connector.models.MonthOfYear]
    :ivar retention_schedule_daily: Daily retention format for yearly retention policy.
    :vartype retention_schedule_daily: ~azure.mgmt.workloads.connector.models.DailyRetentionFormat
    :ivar retention_schedule_weekly: Weekly retention format for yearly retention policy.
    :vartype retention_schedule_weekly:
     ~azure.mgmt.workloads.connector.models.WeeklyRetentionFormat
    :ivar retention_times: Retention times of retention policy.
    :vartype retention_times: list[~datetime.datetime]
    :ivar retention_duration: Retention duration of retention Policy.
    :vartype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
    """

    _attribute_map = {
        "retention_schedule_format_type": {"key": "retentionScheduleFormatType", "type": "str"},
        "months_of_year": {"key": "monthsOfYear", "type": "[str]"},
        "retention_schedule_daily": {"key": "retentionScheduleDaily", "type": "DailyRetentionFormat"},
        "retention_schedule_weekly": {"key": "retentionScheduleWeekly", "type": "WeeklyRetentionFormat"},
        "retention_times": {"key": "retentionTimes", "type": "[iso-8601]"},
        "retention_duration": {"key": "retentionDuration", "type": "RetentionDuration"},
    }

    def __init__(
        self,
        *,
        retention_schedule_format_type: Optional[Union[str, "_models.RetentionScheduleFormat"]] = None,
        months_of_year: Optional[List[Union[str, "_models.MonthOfYear"]]] = None,
        retention_schedule_daily: Optional["_models.DailyRetentionFormat"] = None,
        retention_schedule_weekly: Optional["_models.WeeklyRetentionFormat"] = None,
        retention_times: Optional[List[datetime.datetime]] = None,
        retention_duration: Optional["_models.RetentionDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword retention_schedule_format_type: Retention schedule format for yearly retention policy.
         Known values are: "Invalid", "Daily", and "Weekly".
        :paramtype retention_schedule_format_type: str or
         ~azure.mgmt.workloads.connector.models.RetentionScheduleFormat
        :keyword months_of_year: List of months of year of yearly retention policy.
        :paramtype months_of_year: list[str or ~azure.mgmt.workloads.connector.models.MonthOfYear]
        :keyword retention_schedule_daily: Daily retention format for yearly retention policy.
        :paramtype retention_schedule_daily:
         ~azure.mgmt.workloads.connector.models.DailyRetentionFormat
        :keyword retention_schedule_weekly: Weekly retention format for yearly retention policy.
        :paramtype retention_schedule_weekly:
         ~azure.mgmt.workloads.connector.models.WeeklyRetentionFormat
        :keyword retention_times: Retention times of retention policy.
        :paramtype retention_times: list[~datetime.datetime]
        :keyword retention_duration: Retention duration of retention Policy.
        :paramtype retention_duration: ~azure.mgmt.workloads.connector.models.RetentionDuration
        """
        super().__init__(**kwargs)
        self.retention_schedule_format_type = retention_schedule_format_type
        self.months_of_year = months_of_year
        self.retention_schedule_daily = retention_schedule_daily
        self.retention_schedule_weekly = retention_schedule_weekly
        self.retention_times = retention_times
        self.retention_duration = retention_duration
