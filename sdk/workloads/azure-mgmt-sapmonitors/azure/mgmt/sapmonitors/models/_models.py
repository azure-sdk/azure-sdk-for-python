# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    """


class Alert(ProxyResource):
    """A alert associated with SAP monitor.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar properties: Alert Instance properties.
    :vartype properties: ~azure.mgmt.sapmonitors.models.AlertProperties
    """

    properties: Optional["_models.AlertProperties"] = rest_field()
    """Alert Instance properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AlertProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertProperties(_model_base.Model):
    """Describes the properties of an Alert for SAP monitor.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar errors: Defines the alert instance errors.
    :vartype errors: ~azure.mgmt.sapmonitors.models.ErrorDetail
    :ivar alert_rule_resource_id: ID of the alert rule resource created.
    :vartype alert_rule_resource_id: str
    :ivar template_name: Name of the alert template from which it was created.
    :vartype template_name: str
    :ivar provider_type: The provider type for alert. For example, the value can be SapHana.
    :vartype provider_type: str
    :ivar provider_names: Name of provider instances associated with the alert.
    :vartype provider_names: list[str]
    :ivar alert_rule_properties: Describes the properties of an alert.
    :vartype alert_rule_properties: ~azure.mgmt.sapmonitors.models.AlertRuleProperties
    :ivar provisioning_state: State of provisioning of the alert instance. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.sapmonitors.models.WorkloadMonitorProvisioningState
    """

    errors: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Defines the alert instance errors."""
    alert_rule_resource_id: Optional[str] = rest_field(name="alertRuleResourceId", visibility=["read"])
    """ID of the alert rule resource created."""
    template_name: Optional[str] = rest_field(name="templateName")
    """Name of the alert template from which it was created."""
    provider_type: Optional[str] = rest_field(name="providerType")
    """The provider type for alert. For example, the value can be SapHana."""
    provider_names: Optional[List[str]] = rest_field(name="providerNames")
    """Name of provider instances associated with the alert."""
    alert_rule_properties: Optional["_models.AlertRuleProperties"] = rest_field(name="alertRuleProperties")
    """Describes the properties of an alert."""
    provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of provisioning of the alert instance. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", \"Migrating\", and \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        template_name: Optional[str] = None,
        provider_type: Optional[str] = None,
        provider_names: Optional[List[str]] = None,
        alert_rule_properties: Optional["_models.AlertRuleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertQueryParameter(_model_base.Model):
    """Defines the Alert Query Parameter.

    :ivar name: The name of the alert query parameter.
    :vartype name: str
    :ivar value: The value of the alert query parameter.
    :vartype value: str
    """

    name: Optional[str] = rest_field()
    """The name of the alert query parameter."""
    value: Optional[str] = rest_field()
    """The value of the alert query parameter."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertRuleProperties(_model_base.Model):
    """Describes the properties of an alert.

    :ivar status: Indicates whether the alert is in an enabled state. Known values are: "Enabled"
     and "Disabled".
    :vartype status: str or ~azure.mgmt.sapmonitors.models.AlertRuleStatus
    :ivar severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is
     severest.
    :vartype severity: int
    :ivar action_groups: Action Group resource Ids to invoke when the alert fires.
    :vartype action_groups: list[str]
    :ivar threshold: The threshold of the alert.
    :vartype threshold: int
    :ivar threshold_operator: The threshold operator of the alert. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or ~azure.mgmt.sapmonitors.models.ConditionalOperator
    :ivar window_size: The period of time on which the Alert query will be executed.
    :vartype window_size: int
    :ivar evaluation_frequency: How often the scheduled query rule is evaluated.
    :vartype evaluation_frequency: int
    :ivar failing_periods_to_alert: The number of failing periods to trigger an alert.
    :vartype failing_periods_to_alert: int
    :ivar failing_periods_operator: The operator for failing periods. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype failing_periods_operator: str or ~azure.mgmt.sapmonitors.models.ConditionalOperator
    :ivar mute_actions_duration: Mute actions for the chosen period of time after the alert is
     fired.
    :vartype mute_actions_duration: int
    :ivar auto_mitigate: The value that indicates whether the alert should be automatically
     resolved or not. The default is Disable. Known values are: "Enable" and "Disable".
    :vartype auto_mitigate: str or ~azure.mgmt.sapmonitors.models.AlertAutoMitigate
    :ivar dimension: Evaluation of metric on a particular column.
    :vartype dimension: str
    :ivar alert_query_parameters: The alert query parameters.
    :vartype alert_query_parameters: list[~azure.mgmt.sapmonitors.models.AlertQueryParameter]
    """

    status: Optional[Union[str, "_models.AlertRuleStatus"]] = rest_field()
    """Indicates whether the alert is in an enabled state. Known values are: \"Enabled\" and
     \"Disabled\"."""
    severity: Optional[int] = rest_field()
    """Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest."""
    action_groups: Optional[List[str]] = rest_field(name="actionGroups")
    """Action Group resource Ids to invoke when the alert fires."""
    threshold: Optional[int] = rest_field()
    """The threshold of the alert."""
    threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = rest_field(name="thresholdOperator")
    """The threshold operator of the alert. Known values are: \"LessThan\", \"GreaterThan\",
     \"Equal\", \"GreaterThanOrEqual\", and \"LessThanOrEqual\"."""
    window_size: Optional[int] = rest_field(name="windowSize")
    """The period of time on which the Alert query will be executed."""
    evaluation_frequency: Optional[int] = rest_field(name="evaluationFrequency")
    """How often the scheduled query rule is evaluated."""
    failing_periods_to_alert: Optional[int] = rest_field(name="failingPeriodsToAlert")
    """The number of failing periods to trigger an alert."""
    failing_periods_operator: Optional[Union[str, "_models.ConditionalOperator"]] = rest_field(
        name="failingPeriodsOperator"
    )
    """The operator for failing periods. Known values are: \"LessThan\", \"GreaterThan\", \"Equal\",
     \"GreaterThanOrEqual\", and \"LessThanOrEqual\"."""
    mute_actions_duration: Optional[int] = rest_field(name="muteActionsDuration")
    """Mute actions for the chosen period of time after the alert is fired."""
    auto_mitigate: Optional[Union[str, "_models.AlertAutoMitigate"]] = rest_field(name="autoMitigate")
    """The value that indicates whether the alert should be automatically resolved or not. The default
     is Disable. Known values are: \"Enable\" and \"Disable\"."""
    dimension: Optional[str] = rest_field()
    """Evaluation of metric on a particular column."""
    alert_query_parameters: Optional[List["_models.AlertQueryParameter"]] = rest_field(name="alertQueryParameters")
    """The alert query parameters."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.AlertRuleStatus"]] = None,
        severity: Optional[int] = None,
        action_groups: Optional[List[str]] = None,
        threshold: Optional[int] = None,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        window_size: Optional[int] = None,
        evaluation_frequency: Optional[int] = None,
        failing_periods_to_alert: Optional[int] = None,
        failing_periods_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        mute_actions_duration: Optional[int] = None,
        auto_mitigate: Optional[Union[str, "_models.AlertAutoMitigate"]] = None,
        dimension: Optional[str] = None,
        alert_query_parameters: Optional[List["_models.AlertQueryParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertTemplate(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar properties: Alert Template properties.
    :vartype properties: ~azure.mgmt.sapmonitors.models.AlertTemplateProperties
    """

    properties: Optional["_models.AlertTemplateProperties"] = rest_field()
    """Alert Template properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AlertTemplateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertTemplateMetricMeasurement(_model_base.Model):
    """Defines the Alert Template MetricMeasurement Properties.

    :ivar threshold_operator: Operator used for threshold comparison. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or ~azure.mgmt.sapmonitors.models.ConditionalOperator
    :ivar threshold: The Threshold Value Associated with the Alert Template for Metric Measurement.
    :vartype threshold: int
    :ivar metric_trigger_type: Metric Trigger Type Associated with the Alert Template for Metric
     Measurement. Known values are: "Consecutive" and "Total".
    :vartype metric_trigger_type: str or
     ~azure.mgmt.sapmonitors.models.AlertTemplateMetricTriggerType
    :ivar metric_column: Metric Column Associated with the Alert Template for Metric Measurement.
    :vartype metric_column: str
    :ivar frequency_in_minutes: Frequency (mins) value Associated with the Alert Template for
     Metric Measurement.
    :vartype frequency_in_minutes: int
    :ivar time_window_in_minutes: Time Window (mins) Value Associated with the Alert Template for
     Metric Measurement.
    :vartype time_window_in_minutes: int
    """

    threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = rest_field(name="thresholdOperator")
    """Operator used for threshold comparison. Known values are: \"LessThan\", \"GreaterThan\",
     \"Equal\", \"GreaterThanOrEqual\", and \"LessThanOrEqual\"."""
    threshold: Optional[int] = rest_field()
    """The Threshold Value Associated with the Alert Template for Metric Measurement."""
    metric_trigger_type: Optional[Union[str, "_models.AlertTemplateMetricTriggerType"]] = rest_field(
        name="metricTriggerType"
    )
    """Metric Trigger Type Associated with the Alert Template for Metric Measurement. Known values
     are: \"Consecutive\" and \"Total\"."""
    metric_column: Optional[str] = rest_field(name="metricColumn")
    """Metric Column Associated with the Alert Template for Metric Measurement."""
    frequency_in_minutes: Optional[int] = rest_field(name="frequencyInMinutes")
    """Frequency (mins) value Associated with the Alert Template for Metric Measurement."""
    time_window_in_minutes: Optional[int] = rest_field(name="timeWindowInMinutes")
    """Time Window (mins) Value Associated with the Alert Template for Metric Measurement."""

    @overload
    def __init__(
        self,
        *,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        threshold: Optional[int] = None,
        metric_trigger_type: Optional[Union[str, "_models.AlertTemplateMetricTriggerType"]] = None,
        metric_column: Optional[str] = None,
        frequency_in_minutes: Optional[int] = None,
        time_window_in_minutes: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertTemplateProperties(_model_base.Model):
    """Describes the properties of an Alert Template for SAP monitor.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar errors: Defines the SAP monitor Alert Template errors.
    :vartype errors: ~azure.mgmt.sapmonitors.models.ErrorDetail
    :ivar provisioning_state: State of provisioning of the Alert Template. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar template_display_name: Display name of the alert template.
    :vartype template_display_name: str
    :ivar provider_type: The provider type for alert template. For example, the value can be
     SapHana.
    :vartype provider_type: str
    :ivar description: Description of the template.
    :vartype description: str
    :ivar severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is most
     severe and value of 4 is least severe.
    :vartype severity: int
    :ivar query: Query associated with the alert template.
    :vartype query: str
    :ivar threshold_operator: Operator used for threshold comparison. Known values are: "LessThan",
     "GreaterThan", "Equal", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype threshold_operator: str or ~azure.mgmt.sapmonitors.models.ConditionalOperator
    :ivar default_threshold: Default threshold value.
    :vartype default_threshold: int
    :ivar lower_bound: Minimum possible Default Threshold Value Associated with the Alert Template.
    :vartype lower_bound: int
    :ivar upper_bound: Maximum possible Default Threshold Value Associated with the Alert Template.
    :vartype upper_bound: int
    :ivar default_threshold_input_option: Input option for the default threshold. Known values are:
     "Required", "NotRequired", and "Optional".
    :vartype default_threshold_input_option: str or
     ~azure.mgmt.sapmonitors.models.DefaultThresholdInputOption
    :ivar alert_unit: Unit of the alert.
    :vartype alert_unit: str
    :ivar metric_measurement: Describes the properties for metric measurement in alerts template.
    :vartype metric_measurement: ~azure.mgmt.sapmonitors.models.AlertTemplateMetricMeasurement
    :ivar query_input_parameters: Describes the Query Input Parameter properties in alerts
     template.
    :vartype query_input_parameters:
     list[~azure.mgmt.sapmonitors.models.AlertTemplateQueryInputParameter]
    """

    errors: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Defines the SAP monitor Alert Template errors."""
    provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of provisioning of the Alert Template. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", \"Migrating\", and \"Canceled\"."""
    template_display_name: Optional[str] = rest_field(name="templateDisplayName")
    """Display name of the alert template."""
    provider_type: Optional[str] = rest_field(name="providerType")
    """The provider type for alert template. For example, the value can be SapHana."""
    description: Optional[str] = rest_field()
    """Description of the template."""
    severity: Optional[int] = rest_field()
    """Severity of the alert. Should be an integer between [0-4]. Value of 0 is most severe and value
     of 4 is least severe."""
    query: Optional[str] = rest_field()
    """Query associated with the alert template."""
    threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = rest_field(name="thresholdOperator")
    """Operator used for threshold comparison. Known values are: \"LessThan\", \"GreaterThan\",
     \"Equal\", \"GreaterThanOrEqual\", and \"LessThanOrEqual\"."""
    default_threshold: Optional[int] = rest_field(name="defaultThreshold")
    """Default threshold value."""
    lower_bound: Optional[int] = rest_field(name="lowerBound")
    """Minimum possible Default Threshold Value Associated with the Alert Template."""
    upper_bound: Optional[int] = rest_field(name="upperBound")
    """Maximum possible Default Threshold Value Associated with the Alert Template."""
    default_threshold_input_option: Optional[Union[str, "_models.DefaultThresholdInputOption"]] = rest_field(
        name="defaultThresholdInputOption"
    )
    """Input option for the default threshold. Known values are: \"Required\", \"NotRequired\", and
     \"Optional\"."""
    alert_unit: Optional[str] = rest_field(name="alertUnit")
    """Unit of the alert."""
    metric_measurement: Optional["_models.AlertTemplateMetricMeasurement"] = rest_field(name="metricMeasurement")
    """Describes the properties for metric measurement in alerts template."""
    query_input_parameters: Optional[List["_models.AlertTemplateQueryInputParameter"]] = rest_field(
        name="queryInputParameters"
    )
    """Describes the Query Input Parameter properties in alerts template."""

    @overload
    def __init__(
        self,
        *,
        template_display_name: Optional[str] = None,
        provider_type: Optional[str] = None,
        description: Optional[str] = None,
        severity: Optional[int] = None,
        query: Optional[str] = None,
        threshold_operator: Optional[Union[str, "_models.ConditionalOperator"]] = None,
        default_threshold: Optional[int] = None,
        lower_bound: Optional[int] = None,
        upper_bound: Optional[int] = None,
        default_threshold_input_option: Optional[Union[str, "_models.DefaultThresholdInputOption"]] = None,
        alert_unit: Optional[str] = None,
        metric_measurement: Optional["_models.AlertTemplateMetricMeasurement"] = None,
        query_input_parameters: Optional[List["_models.AlertTemplateQueryInputParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlertTemplateQueryInputParameter(_model_base.Model):
    """Describes the Query Input Parameter properties in alerts template.

    :ivar name: Name of the Query Input Parameter.
    :vartype name: str
    :ivar type: Type of the Query Input Parameter. Known values are: "LogAnalyticsQuery",
     "ProviderProperty", and "CustomInput".
    :vartype type: str or ~azure.mgmt.sapmonitors.models.AlertTemplateParameterType
    :ivar description: Description of the Query Input Parameter.
    :vartype description: str
    :ivar default_value: Default Value of the Query Input Parameter.
    :vartype default_value: str
    :ivar la_query: Log Analytics query associated with the parameter.
    :vartype la_query: str
    :ivar selection_mode: Selection mode for the parameter. Known values are: "Single" and
     "Multiple".
    :vartype selection_mode: str or ~azure.mgmt.sapmonitors.models.AlertTemplateSelectionMode
    :ivar display_name: Display Name of the Query Input Parameter.
    :vartype display_name: str
    """

    name: Optional[str] = rest_field()
    """Name of the Query Input Parameter."""
    type: Optional[Union[str, "_models.AlertTemplateParameterType"]] = rest_field()
    """Type of the Query Input Parameter. Known values are: \"LogAnalyticsQuery\",
     \"ProviderProperty\", and \"CustomInput\"."""
    description: Optional[str] = rest_field()
    """Description of the Query Input Parameter."""
    default_value: Optional[str] = rest_field(name="defaultValue")
    """Default Value of the Query Input Parameter."""
    la_query: Optional[str] = rest_field(name="laQuery")
    """Log Analytics query associated with the parameter."""
    selection_mode: Optional[Union[str, "_models.AlertTemplateSelectionMode"]] = rest_field(name="selectionMode")
    """Selection mode for the parameter. Known values are: \"Single\" and \"Multiple\"."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Display Name of the Query Input Parameter."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.AlertTemplateParameterType"]] = None,
        description: Optional[str] = None,
        default_value: Optional[str] = None,
        la_query: Optional[str] = None,
        selection_mode: Optional[Union[str, "_models.AlertTemplateSelectionMode"]] = None,
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AppServicePlanConfiguration(_model_base.Model):
    """Configuration details of app service plan.

    :ivar tier: The App Service plan tier. Known values are: "ElasticPremium" and "PremiumV3".
    :vartype tier: str or ~azure.mgmt.sapmonitors.models.AppServicePlanTier
    :ivar capacity: The number of workers in app service plan. If this is not set or set to 0, auto
     scale will be configured for the app service plan, otherwise, instance count is set to this
     number.
    :vartype capacity: int
    """

    tier: Optional[Union[str, "_models.AppServicePlanTier"]] = rest_field()
    """The App Service plan tier. Known values are: \"ElasticPremium\" and \"PremiumV3\"."""
    capacity: Optional[int] = rest_field()
    """The number of workers in app service plan. If this is not set or set to 0, auto scale will be
     configured for the app service plan, otherwise, instance count is set to this number."""

    @overload
    def __init__(
        self,
        *,
        tier: Optional[Union[str, "_models.AppServicePlanTier"]] = None,
        capacity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProviderSpecificProperties(_model_base.Model):
    """Gets or sets the provider specific properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Db2ProviderInstanceProperties, MsSqlServerProviderInstanceProperties,
    OracleProviderInstanceProperties, PrometheusHaClusterProviderInstanceProperties,
    PrometheusOsProviderInstanceProperties, HanaDbProviderInstanceProperties,
    SapNetWeaverProviderInstanceProperties


    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is None.
    :vartype provider_type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    provider_type: str = rest_discriminator(name="providerType", visibility=["read", "create"])
    """The provider type. For example, the value can be SapHana. Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        provider_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Db2ProviderInstanceProperties(ProviderSpecificProperties, discriminator="Db2"):
    """Gets or sets the DB2 provider properties.


    :ivar hostname: Gets or sets the target virtual machine name.
    :vartype hostname: str
    :ivar db_name: Gets or sets the db2 database name.
    :vartype db_name: str
    :ivar db_port: Gets or sets the db2 database sql port.
    :vartype db_port: str
    :ivar db_username: Gets or sets the db2 database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the db2 database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB2 Database.
    :vartype ssl_certificate_uri: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "Db2".
    :vartype provider_type: str
    """

    hostname: Optional[str] = rest_field()
    """Gets or sets the target virtual machine name."""
    db_name: Optional[str] = rest_field(name="dbName")
    """Gets or sets the db2 database name."""
    db_port: Optional[str] = rest_field(name="dbPort")
    """Gets or sets the db2 database sql port."""
    db_username: Optional[str] = rest_field(name="dbUsername")
    """Gets or sets the db2 database user name."""
    db_password: Optional[str] = rest_field(name="dbPassword")
    """Gets or sets the db2 database password."""
    db_password_uri: Optional[str] = rest_field(name="dbPasswordUri")
    """Gets or sets the key vault URI to secret with the database password."""
    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the DB2 Database."""
    provider_type: Literal["Db2"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is \"Db2\"."""

    @overload
    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_name: Optional[str] = None,
        db_port: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="Db2", **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.sapmonitors.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.sapmonitors.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.sapmonitors.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HanaDbProviderInstanceProperties(ProviderSpecificProperties, discriminator="SapHana"):
    """Gets or sets the provider properties.


    :ivar hostname: Gets or sets the target virtual machine size.
    :vartype hostname: str
    :ivar db_name: Gets or sets the hana database name.
    :vartype db_name: str
    :ivar sql_port: Gets or sets the database sql port.
    :vartype sql_port: str
    :ivar instance_number: Gets or sets the database instance number.
    :vartype instance_number: str
    :ivar db_username: Gets or sets the database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the DB.
    :vartype ssl_certificate_uri: str
    :ivar ssl_host_name_in_certificate: Gets or sets the hostname(s) in the SSL certificate.
    :vartype ssl_host_name_in_certificate: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "SapHana".
    :vartype provider_type: str
    """

    hostname: Optional[str] = rest_field()
    """Gets or sets the target virtual machine size."""
    db_name: Optional[str] = rest_field(name="dbName")
    """Gets or sets the hana database name."""
    sql_port: Optional[str] = rest_field(name="sqlPort")
    """Gets or sets the database sql port."""
    instance_number: Optional[str] = rest_field(name="instanceNumber")
    """Gets or sets the database instance number."""
    db_username: Optional[str] = rest_field(name="dbUsername")
    """Gets or sets the database user name."""
    db_password: Optional[str] = rest_field(name="dbPassword")
    """Gets or sets the database password."""
    db_password_uri: Optional[str] = rest_field(name="dbPasswordUri")
    """Gets or sets the key vault URI to secret with the database password."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the DB."""
    ssl_host_name_in_certificate: Optional[str] = rest_field(name="sslHostNameInCertificate")
    """Gets or sets the hostname(s) in the SSL certificate."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    provider_type: Literal["SapHana"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"SapHana\"."""

    @overload
    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_name: Optional[str] = None,
        sql_port: Optional[str] = None,
        instance_number: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        ssl_certificate_uri: Optional[str] = None,
        ssl_host_name_in_certificate: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        sap_sid: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="SapHana", **kwargs)


class Health(_model_base.Model):
    """Resource health details.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar health_state: Health state of the resource. Known values are: "Healthy", "Degraded",
     "Unavailable", and "Unknown".
    :vartype health_state: str or
     ~azure.mgmt.sapmonitors.models.WorkloadProviderInstanceHealthState
    :ivar impacting_reasons: Reasons impacting health state.
    :vartype impacting_reasons: str
    """

    health_state: Optional[Union[str, "_models.WorkloadProviderInstanceHealthState"]] = rest_field(
        name="healthState", visibility=["read"]
    )
    """Health state of the resource. Known values are: \"Healthy\", \"Degraded\", \"Unavailable\", and
     \"Unknown\"."""
    impacting_reasons: Optional[str] = rest_field(name="impactingReasons", visibility=["read"])
    """Reasons impacting health state."""


class ManagedResourceGroupConfiguration(_model_base.Model):
    """Managed resource group configuration.

    :ivar name: Managed resource group name.
    :vartype name: str
    """

    name: Optional[str] = rest_field()
    """Managed resource group name."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_model_base.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.sapmonitors.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.sapmonitors.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field()
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Monitor(TrackedResource):
    """SAP monitor info on Azure (ARM properties and SAP monitor properties).

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.sapmonitors.models.MonitorProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.sapmonitors.models.ManagedServiceIdentity
    """

    properties: Optional["_models.MonitorProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field()
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.MonitorProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitorProperties(_model_base.Model):
    """Describes the properties of a SAP monitor.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: State of provisioning of the SAP monitor. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar errors: Defines the SAP monitor errors.
    :vartype errors: ~azure.mgmt.sapmonitors.models.ErrorDetail
    :ivar app_location: The SAP monitor resources will be deployed in the SAP monitoring region.
     The subnet region should be same as the SAP monitoring region.
    :vartype app_location: str
    :ivar routing_preference: Sets the routing preference of the SAP monitor. By default only
     RFC1918 traffic is routed to the customer VNET. Known values are: "Default" and "RouteAll".
    :vartype routing_preference: str or ~azure.mgmt.sapmonitors.models.RoutingPreference
    :ivar zone_redundancy_preference: Sets the preference for zone redundancy on resources created
     for the SAP monitor. By default resources will be created which do not support zone redundancy.
    :vartype zone_redundancy_preference: str
    :ivar managed_resource_group_configuration: Managed resource group configuration.
    :vartype managed_resource_group_configuration:
     ~azure.mgmt.sapmonitors.models.ManagedResourceGroupConfiguration
    :ivar log_analytics_workspace_arm_id: The ARM ID of the Log Analytics Workspace that is used
     for SAP monitoring.
    :vartype log_analytics_workspace_arm_id: str
    :ivar monitor_subnet: The subnet which the SAP monitor will be deployed in.
    :vartype monitor_subnet: str
    :ivar app_service_plan_configuration: App service plan configuration.
    :vartype app_service_plan_configuration:
     ~azure.mgmt.sapmonitors.models.AppServicePlanConfiguration
    :ivar msi_arm_id: The ARM ID of the MSI used for SAP monitoring.
    :vartype msi_arm_id: str
    :ivar storage_account_arm_id: The ARM ID of the Storage account used for SAP monitoring.
    :vartype storage_account_arm_id: str
    """

    provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of provisioning of the SAP monitor. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", \"Migrating\", and \"Canceled\"."""
    errors: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Defines the SAP monitor errors."""
    app_location: Optional[str] = rest_field(name="appLocation")
    """The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region
     should be same as the SAP monitoring region."""
    routing_preference: Optional[Union[str, "_models.RoutingPreference"]] = rest_field(name="routingPreference")
    """Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to
     the customer VNET. Known values are: \"Default\" and \"RouteAll\"."""
    zone_redundancy_preference: Optional[str] = rest_field(name="zoneRedundancyPreference")
    """Sets the preference for zone redundancy on resources created for the SAP monitor. By default
     resources will be created which do not support zone redundancy."""
    managed_resource_group_configuration: Optional["_models.ManagedResourceGroupConfiguration"] = rest_field(
        name="managedResourceGroupConfiguration"
    )
    """Managed resource group configuration."""
    log_analytics_workspace_arm_id: Optional[str] = rest_field(name="logAnalyticsWorkspaceArmId")
    """The ARM ID of the Log Analytics Workspace that is used for SAP monitoring."""
    monitor_subnet: Optional[str] = rest_field(name="monitorSubnet")
    """The subnet which the SAP monitor will be deployed in."""
    app_service_plan_configuration: Optional["_models.AppServicePlanConfiguration"] = rest_field(
        name="appServicePlanConfiguration"
    )
    """App service plan configuration."""
    msi_arm_id: Optional[str] = rest_field(name="msiArmId", visibility=["read"])
    """The ARM ID of the MSI used for SAP monitoring."""
    storage_account_arm_id: Optional[str] = rest_field(name="storageAccountArmId", visibility=["read"])
    """The ARM ID of the Storage account used for SAP monitoring."""

    @overload
    def __init__(
        self,
        *,
        app_location: Optional[str] = None,
        routing_preference: Optional[Union[str, "_models.RoutingPreference"]] = None,
        zone_redundancy_preference: Optional[str] = None,
        managed_resource_group_configuration: Optional["_models.ManagedResourceGroupConfiguration"] = None,
        log_analytics_workspace_arm_id: Optional[str] = None,
        monitor_subnet: Optional[str] = None,
        app_service_plan_configuration: Optional["_models.AppServicePlanConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MsSqlServerProviderInstanceProperties(ProviderSpecificProperties, discriminator="MsSqlServer"):
    """Gets or sets the SQL server provider properties.


    :ivar hostname: Gets or sets the SQL server host name.
    :vartype hostname: str
    :ivar db_port: Gets or sets the database sql port.
    :vartype db_port: str
    :ivar db_username: Gets or sets the database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SQL Database.
    :vartype ssl_certificate_uri: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "MsSqlServer".
    :vartype provider_type: str
    """

    hostname: Optional[str] = rest_field()
    """Gets or sets the SQL server host name."""
    db_port: Optional[str] = rest_field(name="dbPort")
    """Gets or sets the database sql port."""
    db_username: Optional[str] = rest_field(name="dbUsername")
    """Gets or sets the database user name."""
    db_password: Optional[str] = rest_field(name="dbPassword")
    """Gets or sets the database password."""
    db_password_uri: Optional[str] = rest_field(name="dbPasswordUri")
    """Gets or sets the key vault URI to secret with the database password."""
    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the SQL Database."""
    provider_type: Literal["MsSqlServer"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"MsSqlServer\"."""

    @overload
    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_port: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="MsSqlServer", **kwargs)


class OracleProviderInstanceProperties(ProviderSpecificProperties, discriminator="Oracle"):
    """Gets or sets the Oracle provider properties.


    :ivar hostname: Gets or sets the target virtual machine name.
    :vartype hostname: str
    :ivar db_port: Gets or sets the oracle database sql port.
    :vartype db_port: str
    :ivar db_name: Gets or sets the oracle database name.
    :vartype db_name: str
    :ivar db_username: Gets or sets the oracle database user name.
    :vartype db_username: str
    :ivar db_password: Gets or sets the oracle database password.
    :vartype db_password: str
    :ivar db_password_uri: Gets or sets the key vault URI to secret with the database password.
    :vartype db_password_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the Oracle
     Database.
    :vartype ssl_certificate_uri: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "Oracle".
    :vartype provider_type: str
    """

    hostname: Optional[str] = rest_field()
    """Gets or sets the target virtual machine name."""
    db_port: Optional[str] = rest_field(name="dbPort")
    """Gets or sets the oracle database sql port."""
    db_name: Optional[str] = rest_field(name="dbName")
    """Gets or sets the oracle database name."""
    db_username: Optional[str] = rest_field(name="dbUsername")
    """Gets or sets the oracle database user name."""
    db_password: Optional[str] = rest_field(name="dbPassword")
    """Gets or sets the oracle database password."""
    db_password_uri: Optional[str] = rest_field(name="dbPasswordUri")
    """Gets or sets the key vault URI to secret with the database password."""
    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the Oracle Database."""
    provider_type: Literal["Oracle"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"Oracle\"."""

    @overload
    def __init__(
        self,
        *,
        hostname: Optional[str] = None,
        db_port: Optional[str] = None,
        db_name: Optional[str] = None,
        db_username: Optional[str] = None,
        db_password: Optional[str] = None,
        db_password_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="Oracle", **kwargs)


class PrometheusHaClusterProviderInstanceProperties(
    ProviderSpecificProperties, discriminator="PrometheusHaCluster"
):  # pylint: disable=name-too-long
    """Gets or sets the PrometheusHaCluster provider properties.


    :ivar prometheus_url: URL of the Node Exporter endpoint.
    :vartype prometheus_url: str
    :ivar hostname: Gets or sets the target machine name.
    :vartype hostname: str
    :ivar sid: Gets or sets the cluster sid.
    :vartype sid: str
    :ivar cluster_name: Gets or sets the clusterName.
    :vartype cluster_name: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the HA cluster
     exporter.
    :vartype ssl_certificate_uri: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "PrometheusHaCluster".
    :vartype provider_type: str
    """

    prometheus_url: Optional[str] = rest_field(name="prometheusUrl")
    """URL of the Node Exporter endpoint."""
    hostname: Optional[str] = rest_field()
    """Gets or sets the target machine name."""
    sid: Optional[str] = rest_field()
    """Gets or sets the cluster sid."""
    cluster_name: Optional[str] = rest_field(name="clusterName")
    """Gets or sets the clusterName."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the HA cluster exporter."""
    provider_type: Literal["PrometheusHaCluster"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"PrometheusHaCluster\"."""

    @overload
    def __init__(
        self,
        *,
        prometheus_url: Optional[str] = None,
        hostname: Optional[str] = None,
        sid: Optional[str] = None,
        cluster_name: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="PrometheusHaCluster", **kwargs)


class PrometheusOsProviderInstanceProperties(ProviderSpecificProperties, discriminator="PrometheusOS"):
    """Gets or sets the PrometheusOS provider properties.


    :ivar prometheus_url: URL of the Node Exporter endpoint.
    :vartype prometheus_url: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the prometheus node
     exporter.
    :vartype ssl_certificate_uri: str
    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "PrometheusOS".
    :vartype provider_type: str
    """

    prometheus_url: Optional[str] = rest_field(name="prometheusUrl")
    """URL of the Node Exporter endpoint."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the prometheus node exporter."""
    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    provider_type: Literal["PrometheusOS"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"PrometheusOS\"."""

    @overload
    def __init__(
        self,
        *,
        prometheus_url: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
        ssl_certificate_uri: Optional[str] = None,
        sap_sid: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="PrometheusOS", **kwargs)


class ProviderInstance(ProxyResource):
    """A provider instance associated with SAP monitor.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.sapmonitors.models.ProviderInstanceProperties
    """

    properties: Optional["_models.ProviderInstanceProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ProviderInstanceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProviderInstanceProperties(_model_base.Model):
    """Describes the properties of a provider instance.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: State of provisioning of the provider instance. Known values are:
     "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.sapmonitors.models.WorkloadMonitorProvisioningState
    :ivar health: Resource health details.
    :vartype health: ~azure.mgmt.sapmonitors.models.Health
    :ivar errors: Defines the provider instance errors.
    :vartype errors: ~azure.mgmt.sapmonitors.models.ErrorDetail
    :ivar provider_settings: Defines the provider specific properties.
    :vartype provider_settings: ~azure.mgmt.sapmonitors.models.ProviderSpecificProperties
    """

    provisioning_state: Optional[Union[str, "_models.WorkloadMonitorProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of provisioning of the provider instance. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", \"Migrating\", and \"Canceled\"."""
    health: Optional["_models.Health"] = rest_field(visibility=["read"])
    """Resource health details."""
    errors: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Defines the provider instance errors."""
    provider_settings: Optional["_models.ProviderSpecificProperties"] = rest_field(name="providerSettings")
    """Defines the provider specific properties."""

    @overload
    def __init__(
        self,
        *,
        provider_settings: Optional["_models.ProviderSpecificProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapLandscapeMonitorMetricThresholds(_model_base.Model):
    """Gets or sets the Threshold Values for Top Metrics Health.

    :ivar name: Gets or sets the name of the threshold.
    :vartype name: str
    :ivar green: Gets or sets the threshold value for Green.
    :vartype green: float
    :ivar yellow: Gets or sets the threshold value for Yellow.
    :vartype yellow: float
    :ivar red: Gets or sets the threshold value for Red.
    :vartype red: float
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the threshold."""
    green: Optional[float] = rest_field()
    """Gets or sets the threshold value for Green."""
    yellow: Optional[float] = rest_field()
    """Gets or sets the threshold value for Yellow."""
    red: Optional[float] = rest_field()
    """Gets or sets the threshold value for Red."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        green: Optional[float] = None,
        yellow: Optional[float] = None,
        red: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapLandscapeMonitorProperties(_model_base.Model):
    """Gets or sets the properties for Sap Landscape Monitor Dashboard.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: State of provisioning of the SAP monitor. Known values are:
     "Accepted", "Created", "Failed", "Succeeded", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.sapmonitors.models.SapLandscapeMonitorProvisioningState
    :ivar grouping: Gets or sets the SID groupings by landscape and Environment.
    :vartype grouping: ~azure.mgmt.sapmonitors.models.SapLandscapeMonitorPropertiesGrouping
    :ivar top_metrics_thresholds: Gets or sets the list Top Metric Thresholds for SAP Landscape
     Monitor Dashboard.
    :vartype top_metrics_thresholds:
     list[~azure.mgmt.sapmonitors.models.SapLandscapeMonitorMetricThresholds]
    """

    provisioning_state: Optional[Union[str, "_models.SapLandscapeMonitorProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of provisioning of the SAP monitor. Known values are: \"Accepted\", \"Created\",
     \"Failed\", \"Succeeded\", and \"Canceled\"."""
    grouping: Optional["_models.SapLandscapeMonitorPropertiesGrouping"] = rest_field()
    """Gets or sets the SID groupings by landscape and Environment."""
    top_metrics_thresholds: Optional[List["_models.SapLandscapeMonitorMetricThresholds"]] = rest_field(
        name="topMetricsThresholds"
    )
    """Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard."""

    @overload
    def __init__(
        self,
        *,
        grouping: Optional["_models.SapLandscapeMonitorPropertiesGrouping"] = None,
        top_metrics_thresholds: Optional[List["_models.SapLandscapeMonitorMetricThresholds"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapLandscapeMonitorPropertiesGrouping(_model_base.Model):
    """Gets or sets the SID groupings by landscape and Environment.

    :ivar landscape: Gets or sets the list of landscape to SID mappings.
    :vartype landscape: list[~azure.mgmt.sapmonitors.models.SapLandscapeMonitorSidMapping]
    :ivar sap_application: Gets or sets the list of Sap Applications to SID mappings.
    :vartype sap_application: list[~azure.mgmt.sapmonitors.models.SapLandscapeMonitorSidMapping]
    """

    landscape: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = rest_field()
    """Gets or sets the list of landscape to SID mappings."""
    sap_application: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = rest_field(name="sapApplication")
    """Gets or sets the list of Sap Applications to SID mappings."""

    @overload
    def __init__(
        self,
        *,
        landscape: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = None,
        sap_application: Optional[List["_models.SapLandscapeMonitorSidMapping"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapLandscapeMonitorResource(ProxyResource):
    """configuration associated with SAP Landscape Monitor Dashboard.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.sapmonitors.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.sapmonitors.models.SapLandscapeMonitorProperties
    """

    properties: Optional["_models.SapLandscapeMonitorProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SapLandscapeMonitorProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapLandscapeMonitorSidMapping(_model_base.Model):
    """Gets or sets the mapping for SID to Environment/Applications.

    :ivar name: Gets or sets the name of the grouping.
    :vartype name: str
    :ivar top_sid: Gets or sets the list of SID's.
    :vartype top_sid: list[str]
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the grouping."""
    top_sid: Optional[List[str]] = rest_field(name="topSid")
    """Gets or sets the list of SID's."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        top_sid: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SapNetWeaverProviderInstanceProperties(ProviderSpecificProperties, discriminator="SapNetWeaver"):
    """Gets or sets the provider properties.


    :ivar sap_sid: Gets or sets the SAP System Identifier.
    :vartype sap_sid: str
    :ivar sap_hostname: Gets or sets the target virtual machine IP Address/FQDN.
    :vartype sap_hostname: str
    :ivar sap_instance_nr: Gets or sets the instance number of SAP NetWeaver.
    :vartype sap_instance_nr: str
    :ivar sap_host_file_entries: Gets or sets the list of HostFile Entries.
    :vartype sap_host_file_entries: list[str]
    :ivar sap_username: Gets or sets the SAP user name.
    :vartype sap_username: str
    :ivar sap_password: Sets the SAP password.
    :vartype sap_password: str
    :ivar sap_password_uri: Gets or sets the key vault URI to secret with the SAP password.
    :vartype sap_password_uri: str
    :ivar sap_client_id: Gets or sets the SAP Client ID.
    :vartype sap_client_id: str
    :ivar sap_port_number: Gets or sets the SAP HTTP port number.
    :vartype sap_port_number: str
    :ivar ssl_certificate_uri: Gets or sets the blob URI to SSL certificate for the SAP system.
    :vartype ssl_certificate_uri: str
    :ivar ssl_preference: Gets or sets certificate preference if secure communication is enabled.
     Known values are: "Disabled", "RootCertificate", and "ServerCertificate".
    :vartype ssl_preference: str or ~azure.mgmt.sapmonitors.models.SslPreference
    :ivar provider_type: The provider type. For example, the value can be SapHana. Required.
     Default value is "SapNetWeaver".
    :vartype provider_type: str
    """

    sap_sid: Optional[str] = rest_field(name="sapSid")
    """Gets or sets the SAP System Identifier."""
    sap_hostname: Optional[str] = rest_field(name="sapHostname")
    """Gets or sets the target virtual machine IP Address/FQDN."""
    sap_instance_nr: Optional[str] = rest_field(name="sapInstanceNr")
    """Gets or sets the instance number of SAP NetWeaver."""
    sap_host_file_entries: Optional[List[str]] = rest_field(name="sapHostFileEntries")
    """Gets or sets the list of HostFile Entries."""
    sap_username: Optional[str] = rest_field(name="sapUsername")
    """Gets or sets the SAP user name."""
    sap_password: Optional[str] = rest_field(name="sapPassword")
    """Sets the SAP password."""
    sap_password_uri: Optional[str] = rest_field(name="sapPasswordUri")
    """Gets or sets the key vault URI to secret with the SAP password."""
    sap_client_id: Optional[str] = rest_field(name="sapClientId")
    """Gets or sets the SAP Client ID."""
    sap_port_number: Optional[str] = rest_field(name="sapPortNumber")
    """Gets or sets the SAP HTTP port number."""
    ssl_certificate_uri: Optional[str] = rest_field(name="sslCertificateUri")
    """Gets or sets the blob URI to SSL certificate for the SAP system."""
    ssl_preference: Optional[Union[str, "_models.SslPreference"]] = rest_field(name="sslPreference")
    """Gets or sets certificate preference if secure communication is enabled. Known values are:
     \"Disabled\", \"RootCertificate\", and \"ServerCertificate\"."""
    provider_type: Literal["SapNetWeaver"] = rest_discriminator(name="providerType")  # type: ignore
    """The provider type. For example, the value can be SapHana. Required. Default value is
     \"SapNetWeaver\"."""

    @overload
    def __init__(
        self,
        *,
        sap_sid: Optional[str] = None,
        sap_hostname: Optional[str] = None,
        sap_instance_nr: Optional[str] = None,
        sap_host_file_entries: Optional[List[str]] = None,
        sap_username: Optional[str] = None,
        sap_password: Optional[str] = None,
        sap_password_uri: Optional[str] = None,
        sap_client_id: Optional[str] = None,
        sap_port_number: Optional[str] = None,
        ssl_certificate_uri: Optional[str] = None,
        ssl_preference: Optional[Union[str, "_models.SslPreference"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider_type="SapNetWeaver", **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.sapmonitors.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.sapmonitors.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateMonitorRequest(_model_base.Model):
    """Defines the request body for updating SAP monitor resource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.sapmonitors.models.ManagedServiceIdentity
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field()
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_model_base.Model):
    """User assigned identity properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""
