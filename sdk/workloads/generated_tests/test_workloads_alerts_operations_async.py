# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.workloads.sapmonitors.aio import WorkloadsClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestWorkloadsAlertsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(WorkloadsClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_alerts_list(self, resource_group):
        response = self.client.alerts.list(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2024-02-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_alerts_get(self, resource_group):
        response = await self.client.alerts.get(
            resource_group_name=resource_group.name,
            monitor_name="str",
            alert_name="str",
            api_version="2024-02-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_alerts_begin_create(self, resource_group):
        response = await (
            await self.client.alerts.begin_create(
                resource_group_name=resource_group.name,
                monitor_name="str",
                alert_name="str",
                resource={
                    "alertRuleProperties": {
                        "actionGroups": ["str"],
                        "alertQueryParameters": [{"name": "str", "value": "str"}],
                        "autoMitigate": "str",
                        "dimension": "str",
                        "evaluationFrequency": 0,
                        "failingPeriodsOperator": "str",
                        "failingPeriodsToAlert": 0,
                        "muteActionsDuration": 0,
                        "severity": 0,
                        "status": "str",
                        "threshold": 0,
                        "thresholdOperator": "str",
                        "windowSize": 0,
                    },
                    "alertRuleResourceId": "str",
                    "errors": {
                        "additionalInfo": [{"info": {}, "type": "str"}],
                        "code": "str",
                        "details": [...],
                        "message": "str",
                        "target": "str",
                    },
                    "id": "str",
                    "name": "str",
                    "providerNames": ["str"],
                    "providerType": "str",
                    "provisioningState": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "templateName": "str",
                    "type": "str",
                },
                api_version="2024-02-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_alerts_begin_delete(self, resource_group):
        response = await (
            await self.client.alerts.begin_delete(
                resource_group_name=resource_group.name,
                monitor_name="str",
                alert_name="str",
                api_version="2024-02-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
