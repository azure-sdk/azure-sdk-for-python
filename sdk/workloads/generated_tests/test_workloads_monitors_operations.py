# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.workloads.sapmonitors import WorkloadsClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"

@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestWorkloadsMonitorsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(WorkloadsClient)
    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.monitors.list(
            api_version="2023-12-01-preview"
,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.monitors.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-12-01-preview"
,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.monitors.get(
            resource_group_name=resource_group.name,
            monitor_name="str"
,
            api_version="2023-12-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.monitors.begin_create(
            resource_group_name=resource_group.name,
            monitor_name="str"
,
            resource={
                "location": "str",
                "appLocation": "str",
                "appServicePlanConfiguration": {
                    "capacity": 0,
                    "tier": "str"
                },
                "errors": {
                    "additionalInfo": [
                        {
                            "info": {},
                            "type": "str"
                        }
                    ],
                    "code": "str",
                    "details": [
                        ...
                    ],
                    "message": "str",
                    "target": "str"
                },
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {
                        "str": {
                            "clientId": "str",
                            "principalId": "str"
                        }
                    }
                },
                "logAnalyticsWorkspaceArmId": "str",
                "managedResourceGroupConfiguration": {
                    "name": "str"
                },
                "monitorSubnet": "str",
                "msiArmId": "str",
                "name": "str",
                "provisioningState": "str",
                "routingPreference": "str",
                "storageAccountArmId": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str"
                },
                "tags": {
                    "str": "str"
                },
                "type": "str",
                "zoneRedundancyPreference": "str"
            }
,
            api_version="2023-12-01-preview"
,
        ).result() # call '.result()' to poll until service return final result
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.monitors.begin_update(
            resource_group_name=resource_group.name,
            monitor_name="str"
,
            properties={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {
                        "str": {
                            "clientId": "str",
                            "principalId": "str"
                        }
                    }
                },
                "tags": {
                    "str": "str"
                }
            }
,
            api_version="2023-12-01-preview"
,
        ).result() # call '.result()' to poll until service return final result
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.monitors.begin_delete(
            resource_group_name=resource_group.name,
            monitor_name="str"
,
            api_version="2023-12-01-preview"
,
        ).result() # call '.result()' to poll until service return final result
        
        # please add some check logic here by yourself
        # ...

