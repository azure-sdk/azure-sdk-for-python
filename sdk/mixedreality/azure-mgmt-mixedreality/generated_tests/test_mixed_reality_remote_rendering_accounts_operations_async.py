# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.mixedreality.aio import MixedRealityClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMixedRealityRemoteRenderingAccountsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MixedRealityClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_list_by_subscription(self, resource_group):
        response = self.client.remote_rendering_accounts.list_by_subscription(
            api_version="2021-03-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_list_by_resource_group(self, resource_group):
        response = self.client.remote_rendering_accounts.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2021-03-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_delete(self, resource_group):
        response = await self.client.remote_rendering_accounts.delete(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_get(self, resource_group):
        response = await self.client.remote_rendering_accounts.get(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_update(self, resource_group):
        response = await self.client.remote_rendering_accounts.update(
            resource_group_name=resource_group.name,
            account_name="str",
            remote_rendering_account={
                "location": "str",
                "accountDomain": "str",
                "accountId": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "SystemAssigned"},
                "kind": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "name": "str",
                "plan": {"principalId": "str", "tenantId": "str", "type": "SystemAssigned"},
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "storageAccountName": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_create(self, resource_group):
        response = await self.client.remote_rendering_accounts.create(
            resource_group_name=resource_group.name,
            account_name="str",
            remote_rendering_account={
                "location": "str",
                "accountDomain": "str",
                "accountId": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "SystemAssigned"},
                "kind": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "name": "str",
                "plan": {"principalId": "str", "tenantId": "str", "type": "SystemAssigned"},
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "storageAccountName": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_list_keys(self, resource_group):
        response = await self.client.remote_rendering_accounts.list_keys(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_remote_rendering_accounts_regenerate_keys(self, resource_group):
        response = await self.client.remote_rendering_accounts.regenerate_keys(
            resource_group_name=resource_group.name,
            account_name="str",
            regenerate={"serial": 1},
            api_version="2021-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...
