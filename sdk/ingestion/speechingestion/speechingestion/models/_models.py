# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AnalyticsModel(_model_base.Model):
    """Analytics model.

    All required parameters must be populated in order to send to server.

    :ivar endpoint: The analytics endpoint to call. Required.
    :vartype endpoint: str
    """

    endpoint: str = rest_field()
    """The analytics endpoint to call. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BatchTranscriptionPropertiesModel(_model_base.Model):
    """Batch Transcription Properties model.

    All required parameters must be populated in order to send to server.

    :ivar locale: The expected locale of the audio data to transcribe. For example, 'en-US',
     'fr-FR', 'zh-CN', etc. For a full list of supported locales, see `Supported languages and
     regions
     <https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=stt>`_.
    :vartype locale: str
    :ivar model_x: The model property to use a specific base model or Custom Speech model. If you
     don't specify the model, the default base model for the locale is used.
    :vartype model_x: ~speechingestion.models.EntityReferenceModel
    :ivar custom_domain: Custom domain name for batch transcription. Required.
    :vartype custom_domain: str
    :ivar transcription_properties: The transcription batch API properties that allow you to
     customize the transcription process. For more information, see `Request configuration options
     <https://learn.microsoft.com/en-us/azure/ai-services/speech-service/batch-transcription-create?pivots=rest-api#request-configuration-options>`_.  # pylint: disable=line-too-long
    :vartype transcription_properties: ~speechingestion.models.TranscriptionPropertiesModel
    """

    locale: Optional[str] = rest_field()
    """The expected locale of the audio data to transcribe. For example, 'en-US', 'fr-FR', 'zh-CN',
     etc. For a full list of supported locales, see `Supported languages and regions
     <https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=stt>`_."""
    model_x: Optional["_models.EntityReferenceModel"] = rest_field(name="modelX")
    """The model property to use a specific base model or Custom Speech model. If you don't specify
     the model, the default base model for the locale is used."""
    custom_domain: str = rest_field(name="customDomain")
    """Custom domain name for batch transcription. Required."""
    transcription_properties: Optional["_models.TranscriptionPropertiesModel"] = rest_field(
        name="transcriptionProperties"
    )
    """The transcription batch API properties that allow you to customize the transcription process.
     For more information, see `Request configuration options
     <https://learn.microsoft.com/en-us/azure/ai-services/speech-service/batch-transcription-create?pivots=rest-api#request-configuration-options>`_.  # pylint: disable=line-too-long"""

    @overload
    def __init__(
        self,
        *,
        custom_domain: str,
        locale: Optional[str] = None,
        model_x: Optional["_models.EntityReferenceModel"] = None,
        transcription_properties: Optional["_models.TranscriptionPropertiesModel"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiarizationPropertiesModel(_model_base.Model):
    """DiarizationProperties model.

    All required parameters must be populated in order to send to server.

    :ivar speakers: speakers properties. Required.
    :vartype speakers: ~speechingestion.models.DiarizationSpeakersPropertiesModel
    """

    speakers: "_models.DiarizationSpeakersPropertiesModel" = rest_field()
    """speakers properties. Required."""

    @overload
    def __init__(
        self,
        *,
        speakers: "_models.DiarizationSpeakersPropertiesModel",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiarizationSpeakersPropertiesModel(_model_base.Model):
    """DiarizationSpeakersProperties model.

    :ivar min_count: Minimum count of speakers.
    :vartype min_count: int
    :ivar max_count: Maximum count of speakers.
    :vartype max_count: int
    """

    min_count: Optional[int] = rest_field(name="minCount")
    """Minimum count of speakers."""
    max_count: Optional[int] = rest_field(name="maxCount")
    """Maximum count of speakers."""

    @overload
    def __init__(
        self,
        *,
        min_count: Optional[int] = None,
        max_count: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EntityReferenceModel(_model_base.Model):
    """Entity ReferenceModel model.

    All required parameters must be populated in order to send to server.

    :ivar self_property: self. Required.
    :vartype self_property: str
    """

    self_property: str = rest_field(name="self")
    """self. Required."""

    @overload
    def __init__(
        self,
        *,
        self_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LanguageIdentificationPropertiesModel(_model_base.Model):
    """LanguageIdentificationProperties model.

    All required parameters must be populated in order to send to server.

    :ivar mode: mode. Required.
    :vartype mode: str
    :ivar candidate_locales: candidateLocales. Required.
    :vartype candidate_locales: list[str]
    :ivar speech_model_mapping: speechModelMapping.
    :vartype speech_model_mapping: dict[str, ~speechingestion.models.EntityReferenceModel]
    """

    mode: str = rest_field()
    """mode. Required."""
    candidate_locales: List[str] = rest_field(name="candidateLocales")
    """candidateLocales. Required."""
    speech_model_mapping: Optional[Dict[str, "_models.EntityReferenceModel"]] = rest_field(name="speechModelMapping")
    """speechModelMapping."""

    @overload
    def __init__(
        self,
        *,
        mode: str,
        candidate_locales: List[str],
        speech_model_mapping: Optional[Dict[str, "_models.EntityReferenceModel"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProcessingModel(_model_base.Model):
    """Processing model.

    All required parameters must be populated in order to send to server.

    :ivar delivery_mode: deliveryMode. Required.
    :vartype delivery_mode: str
    :ivar subject_ends_with: Extensions of input files.
    :vartype subject_ends_with: str
    :ivar system_topic_resource_id: ResourceId for System Topic.
    :vartype system_topic_resource_id: str
    """

    delivery_mode: str = rest_field(name="deliveryMode")
    """deliveryMode. Required."""
    subject_ends_with: Optional[str] = rest_field(name="subjectEndsWith")
    """Extensions of input files."""
    system_topic_resource_id: Optional[str] = rest_field(name="systemTopicResourceId")
    """ResourceId for System Topic."""

    @overload
    def __init__(
        self,
        *,
        delivery_mode: str,
        subject_ends_with: Optional[str] = None,
        system_topic_resource_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Registration(_model_base.Model):
    """A registration.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The unique name of the registration resource. Required.
    :vartype name: str
    :ivar storage_model: Storage configuration. Required.
    :vartype storage_model: ~speechingestion.models.StorageModel
    :ivar processing_model: Processing configuration. Required.
    :vartype processing_model: ~speechingestion.models.ProcessingModel
    :ivar batch_transcription_model: Batch transcription configuration. Required.
    :vartype batch_transcription_model: ~speechingestion.models.BatchTranscriptionPropertiesModel
    :ivar analytics_model: Analytics configuration.
    :vartype analytics_model: ~speechingestion.models.AnalyticsModel
    :ivar status_model: Status of the registration. Required.
    :vartype status_model: ~speechingestion.models.StatusModel
    """

    name: str = rest_field(visibility=["read"])
    """The unique name of the registration resource. Required."""
    storage_model: "_models.StorageModel" = rest_field(name="storageModel")
    """Storage configuration. Required."""
    processing_model: "_models.ProcessingModel" = rest_field(name="processingModel")
    """Processing configuration. Required."""
    batch_transcription_model: "_models.BatchTranscriptionPropertiesModel" = rest_field(name="batchTranscriptionModel")
    """Batch transcription configuration. Required."""
    analytics_model: Optional["_models.AnalyticsModel"] = rest_field(name="analyticsModel")
    """Analytics configuration."""
    status_model: "_models.StatusModel" = rest_field(name="statusModel", visibility=["read"])
    """Status of the registration. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_model: "_models.StorageModel",
        processing_model: "_models.ProcessingModel",
        batch_transcription_model: "_models.BatchTranscriptionPropertiesModel",
        analytics_model: Optional["_models.AnalyticsModel"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StatusModel(_model_base.Model):
    """Status model.

    All required parameters must be populated in order to send to server.

    :ivar code: Status code. Required.
    :vartype code: str
    :ivar message: Message.
    :vartype message: str
    """

    code: str = rest_field()
    """Status code. Required."""
    message: Optional[str] = rest_field()
    """Message."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageModel(_model_base.Model):
    """Storage model.

    All required parameters must be populated in order to send to server.

    :ivar blob_storage_endpoint: The Uri of the blob storage account in the form of
     'https://:code:`<accountname>`.blob.core.windows.net'. Required.
    :vartype blob_storage_endpoint: str
    :ivar input_container_name: The name of the container that holds the audio files to be
     processed. Required.
    :vartype input_container_name: str
    :ivar output_container_name: The name of the container that stores the transcription and
     analytics results. Required.
    :vartype output_container_name: str
    :ivar processed_container_name: The name of the container that archives the audio files that
     have been transcribed. Required.
    :vartype processed_container_name: str
    :ivar error_output_container_name: The name of the container that saves the error messages
     during processing. Required.
    :vartype error_output_container_name: str
    """

    blob_storage_endpoint: str = rest_field(name="blobStorageEndpoint")
    """The Uri of the blob storage account in the form of
     'https://:code:`<accountname>`.blob.core.windows.net'. Required."""
    input_container_name: str = rest_field(name="inputContainerName")
    """The name of the container that holds the audio files to be processed. Required."""
    output_container_name: str = rest_field(name="outputContainerName")
    """The name of the container that stores the transcription and analytics results. Required."""
    processed_container_name: str = rest_field(name="processedContainerName")
    """The name of the container that archives the audio files that have been transcribed. Required."""
    error_output_container_name: str = rest_field(name="errorOutputContainerName")
    """The name of the container that saves the error messages during processing. Required."""

    @overload
    def __init__(
        self,
        *,
        blob_storage_endpoint: str,
        input_container_name: str,
        output_container_name: str,
        processed_container_name: str,
        error_output_container_name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TranscriptionPropertiesModel(_model_base.Model):
    """Batch Transcription Properties model.

    :ivar word_level_timestamps_enabled: Specifies if word level timestamps should be included in
     the output. The default value is false.
    :vartype word_level_timestamps_enabled: bool
    :ivar display_form_word_level_timestamps_enabled: Specifies whether to include word-level
     timestamps on the display form of the transcription results. The results are returned in the
     displayWords property of the transcription file. The default value is false.
    :vartype display_form_word_level_timestamps_enabled: bool
    :ivar channels: An array of channel numbers to process. Channels 0 and 1 are transcribed by
     default.
    :vartype channels: list[int]
    :ivar punctuation_mode: Specifies how to handle punctuation in recognition results. Accepted
     values are None to disable punctuation, Dictated to imply explicit (spoken) punctuation,
     Automatic to let the decoder deal with punctuation, or DictatedAndAutomatic to use dictated and
     automatic punctuation. The default value is DictatedAndAutomatic.
    :vartype punctuation_mode: str
    :ivar profanity_filter_mode: Specifies how to handle profanity in recognition results. Accepted
     values are None to disable profanity filtering, Masked to replace profanity with asterisks,
     Removed to remove all profanity from the result, or Tags to add profanity tags. The default
     value is Masked.
    :vartype profanity_filter_mode: str
    :ivar diarization_enabled: Specifies that the Speech service should attempt diarization
     analysis on the input, which is expected to be a mono channel that contains two voices. The
     default value is false.
    :vartype diarization_enabled: bool
    :ivar diarization: Indicates that the Speech service should attempt diarization analysis on the
     input, which is expected to be a mono channel that contains multiple voices. The feature isn't
     available with stereo recordings.
    :vartype diarization: ~speechingestion.models.DiarizationPropertiesModel
    :ivar language_identification: Language identification is used to identify languages spoken in
     audio when compared against a list of supported languages.
     https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=language-identification.
    :vartype language_identification: ~speechingestion.models.LanguageIdentificationPropertiesModel
    """

    word_level_timestamps_enabled: Optional[bool] = rest_field(name="wordLevelTimestampsEnabled")
    """Specifies if word level timestamps should be included in the output. The default value is
     false."""
    display_form_word_level_timestamps_enabled: Optional[bool] = rest_field(
        name="displayFormWordLevelTimestampsEnabled"
    )
    """Specifies whether to include word-level timestamps on the display form of the transcription
     results. The results are returned in the displayWords property of the transcription file. The
     default value is false."""
    channels: Optional[List[int]] = rest_field()
    """An array of channel numbers to process. Channels 0 and 1 are transcribed by default."""
    punctuation_mode: Optional[str] = rest_field(name="punctuationMode")
    """Specifies how to handle punctuation in recognition results. Accepted values are None to disable
     punctuation, Dictated to imply explicit (spoken) punctuation, Automatic to let the decoder deal
     with punctuation, or DictatedAndAutomatic to use dictated and automatic punctuation. The
     default value is DictatedAndAutomatic."""
    profanity_filter_mode: Optional[str] = rest_field(name="profanityFilterMode")
    """Specifies how to handle profanity in recognition results. Accepted values are None to disable
     profanity filtering, Masked to replace profanity with asterisks, Removed to remove all
     profanity from the result, or Tags to add profanity tags. The default value is Masked."""
    diarization_enabled: Optional[bool] = rest_field(name="diarizationEnabled")
    """Specifies that the Speech service should attempt diarization analysis on the input, which is
     expected to be a mono channel that contains two voices. The default value is false."""
    diarization: Optional["_models.DiarizationPropertiesModel"] = rest_field()
    """Indicates that the Speech service should attempt diarization analysis on the input, which is
     expected to be a mono channel that contains multiple voices. The feature isn't available with
     stereo recordings."""
    language_identification: Optional["_models.LanguageIdentificationPropertiesModel"] = rest_field(
        name="languageIdentification"
    )
    """Language identification is used to identify languages spoken in audio when compared against a
     list of supported languages.
     https://learn.microsoft.com/azure/ai-services/speech-service/language-support?tabs=language-identification."""

    @overload
    def __init__(
        self,
        *,
        word_level_timestamps_enabled: Optional[bool] = None,
        display_form_word_level_timestamps_enabled: Optional[bool] = None,
        channels: Optional[List[int]] = None,
        punctuation_mode: Optional[str] = None,
        profanity_filter_mode: Optional[str] = None,
        diarization_enabled: Optional[bool] = None,
        diarization: Optional["_models.DiarizationPropertiesModel"] = None,
        language_identification: Optional["_models.LanguageIdentificationPropertiesModel"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
