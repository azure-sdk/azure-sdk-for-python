# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs."""

    INTERNAL = "Internal"


class ConnectionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A connection type for access labs and VMs (Public, Private or None)."""

    PUBLIC = "Public"
    PRIVATE = "Private"
    NONE = "None"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class CreateOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates what lab virtual machines are created from."""

    IMAGE = "Image"
    """An image is used to create all lab user virtual machines. When this option is set, no template
    #: VM will be created."""
    TEMPLATE_VM = "TemplateVM"
    """A template VM will be used to create all lab user virtual machines."""


class EnableState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Property enabled state."""

    ENABLED = "Enabled"
    DISABLED = "Disabled"


class InvitationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The lab user invitation state."""

    NOT_SENT = "NotSent"
    """The invitation has not been sent."""
    SENDING = "Sending"
    """Currently sending the invitation."""
    SENT = "Sent"
    """The invitation has been successfully sent."""
    FAILED = "Failed"
    """There was an error while sending the invitation."""


class LabServicesSkuTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The tier of the SKU."""

    STANDARD = "Standard"
    PREMIUM = "Premium"


class LabState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of a virtual machine."""

    DRAFT = "Draft"
    """The lab is currently in draft (has not been published)."""
    PUBLISHING = "Publishing"
    """The lab is publishing."""
    SCALING = "Scaling"
    """The lab is scaling."""
    SYNCING = "Syncing"
    """The lab is syncing users."""
    PUBLISHED = "Published"
    """The lab has been published."""


class OperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operation status."""

    NOT_STARTED = "NotStarted"
    """The operation has been accepted but hasn't started."""
    IN_PROGRESS = "InProgress"
    """The operation is running"""
    SUCCEEDED = "Succeeded"
    """The operation Succeeded"""
    FAILED = "Failed"
    """The operation failed"""
    CANCELED = "Canceled"
    """Not supported yet"""


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system".
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"


class OsState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operating system state."""

    GENERALIZED = "Generalized"
    """Image does not contain any machine and user specific information."""
    SPECIALIZED = "Specialized"
    """Image contains machine and user specific information."""


class OsType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operating system type."""

    WINDOWS = "Windows"
    LINUX = "Linux"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Resource provisioning state."""

    CREATING = "Creating"
    """Resource is in the process of being created."""
    UPDATING = "Updating"
    """New property values are being applied to the resource."""
    DELETING = "Deleting"
    """Resource is in the process of being deleted."""
    SUCCEEDED = "Succeeded"
    """Resource is in healthy state after creation or update operation."""
    FAILED = "Failed"
    """Previous operation on the resource has failed leaving resource in unhealthy state."""
    LOCKED = "Locked"
    """The resource is locked and changes are currently blocked. This could be due to maintenance or a
    #: scheduled operation. The state will go back to succeeded once the locking operation has
    #: finished."""


class RecurrenceFrequency(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Schedule recurrence frequencies."""

    DAILY = "Daily"
    """Schedule will run every days."""
    WEEKLY = "Weekly"
    """Schedule will run every week on days specified in weekDays."""


class RegistrationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The user lab registration state."""

    REGISTERED = "Registered"
    """User has not yet registered with the lab."""
    NOT_REGISTERED = "NotRegistered"
    """User has registered with the lab."""


class RestrictionReasonCode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The reason for the restriction."""

    QUOTA_ID = "QuotaId"
    NOT_AVAILABLE_FOR_SUBSCRIPTION = "NotAvailableForSubscription"


class RestrictionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of restriction."""

    LOCATION = "Location"


class ScaleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The localized name of the resource."""

    NONE = "None"
    """The capacity is not adjustable in any way."""
    MANUAL = "Manual"
    """The user must manually scale this SKU in and out."""
    AUTOMATIC = "Automatic"
    """The user is permitted to scale this SKU in and out."""


class ShutdownOnIdleMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines whether to shut down VM on idle and the criteria for idle detection."""

    NONE = "None"
    """The VM won't be shut down when it is idle."""
    USER_ABSENCE = "UserAbsence"
    """The VM will be considered as idle when there is no keyboard or mouse input."""
    LOW_USAGE = "LowUsage"
    """The VM will be considered as idle when user is absent and the resource (CPU and disk)
    #: consumption is low."""


class SkuTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """This field is required to be implemented by the Resource Provider if the service has more than
    one tier, but is not required on a PUT.
    """

    FREE = "Free"
    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"


class UsageUnit(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The unit details."""

    COUNT = "Count"


class VirtualMachineState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of a virtual machine."""

    STOPPED = "Stopped"
    """The VM is currently stopped."""
    STARTING = "Starting"
    """The VM is starting."""
    RUNNING = "Running"
    """The VM is running."""
    STOPPING = "Stopping"
    """The VM is stopping."""
    RESETTING_PASSWORD = "ResettingPassword"
    """The VM password is being reset."""
    REIMAGING = "Reimaging"
    """The VM is being reimaged."""
    REDEPLOYING = "Redeploying"
    """The VM is being redeployed."""


class VirtualMachineType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the lab virtual machine."""

    USER = "User"
    """A user VM"""
    TEMPLATE = "Template"
    """A template VM"""


class WeekDay(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Days of the week."""

    SUNDAY = "Sunday"
    """Schedule will run on Sunday"""
    MONDAY = "Monday"
    """Schedule will run on Monday"""
    TUESDAY = "Tuesday"
    """Schedule will run on Tuesday"""
    WEDNESDAY = "Wednesday"
    """Schedule will run on Wednesday"""
    THURSDAY = "Thursday"
    """Schedule will run on Thursday"""
    FRIDAY = "Friday"
    """Schedule will run on Friday"""
    SATURDAY = "Saturday"
    """Schedule will run on Saturday"""
