# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.subscription.aio import SubscriptionClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSubscriptionSubscriptionOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SubscriptionClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cancel(self, resource_group):
        response = await self.client.subscription.cancel(
            subscription_id="str",
            api_version="2021-10-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_rename(self, resource_group):
        response = await self.client.subscription.rename(
            subscription_id="str",
            body={"subscriptionName": "str"},
            api_version="2021-10-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_enable(self, resource_group):
        response = await self.client.subscription.enable(
            subscription_id="str",
            api_version="2021-10-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_accept_ownership(self, resource_group):
        response = await (
            await self.client.subscription.begin_accept_ownership(
                subscription_id="str",
                body={"properties": {"displayName": "str", "managementGroupId": "str", "tags": {"str": "str"}}},
                api_version="2021-10-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_accept_ownership_status(self, resource_group):
        response = await self.client.subscription.accept_ownership_status(
            subscription_id="str",
            api_version="2021-10-01",
        )

        # please add some check logic here by yourself
        # ...
