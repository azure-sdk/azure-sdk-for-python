# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AuthorizationScopeFilter(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines what level of authorization resources should be returned based on the which
    subscriptions and management groups are passed as scopes.
    """

    AT_SCOPE_AND_BELOW = "AtScopeAndBelow"
    AT_SCOPE_AND_ABOVE = "AtScopeAndAbove"
    AT_SCOPE_EXACT = "AtScopeExact"
    AT_SCOPE_ABOVE_AND_BELOW = "AtScopeAboveAndBelow"


class ChangeCategory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The change category."""

    USER = "User"
    SYSTEM = "System"


class ChangeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The change type for snapshot. PropertyChanges will be provided in case of Update change type."""

    CREATE = "Create"
    UPDATE = "Update"
    DELETE = "Delete"


class ColumnDataType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Data type of a column in a table."""

    STRING = "string"
    INTEGER = "integer"
    NUMBER = "number"
    BOOLEAN = "boolean"
    OBJECT = "object"
    DATETIME = "datetime"


class FacetSortOrder(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The sorting order by the selected column (count by default)."""

    ASC = "asc"
    DESC = "desc"


class PropertyChangeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The property change Type."""

    INSERT = "Insert"
    UPDATE = "Update"
    REMOVE = "Remove"


class ResultFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines in which format query result returned."""

    TABLE = "table"
    OBJECT_ARRAY = "objectArray"


class ResultTruncated(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates whether the query results are truncated."""

    TRUE = "true"
    FALSE = "false"


class Role(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The role which generates a specific message. Restricted to the user or assistant role."""

    USER = "user"
    """If a message was generated by a human, the role should be assigned user"""
    ASSISTANT = "assistant"
    """If a message was generated by ARG Query Generation service, then the role should be assistant"""
    SYSTEM = "system"
    """If a message provides high level instructions for the query generation, then the role should be
    system"""


class StatusCategory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Status Category."""

    SUCCEEDED = "Succeeded"
    """Succeeded when query was generated successfully"""
    FAILED = "Failed"
    """Failed when query was not generated"""


class Versions(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Versions Info."""

    V2023_09_01_PREVIEW = "2023-09-01-preview"
    """The 2023-09-01-preview version."""
