# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.resource.aio import PolicyClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPolicyPolicySetDefinitionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(PolicyClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.policy_set_definitions.create_or_update(
            policy_set_definition_name="str",
            parameters={
                "description": "str",
                "displayName": "str",
                "id": "str",
                "metadata": {},
                "name": "str",
                "parameters": {},
                "policyDefinitions": [{"parameters": {}, "policyDefinitionId": "str"}],
                "policyType": "str",
                "type": "str",
            },
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.policy_set_definitions.delete(
            policy_set_definition_name="str",
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.policy_set_definitions.get(
            policy_set_definition_name="str",
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_built_in(self, resource_group):
        response = await self.client.policy_set_definitions.get_built_in(
            policy_set_definition_name="str",
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.policy_set_definitions.list(
            api_version="2017-06-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_built_in(self, resource_group):
        response = self.client.policy_set_definitions.list_built_in(
            api_version="2017-06-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update_at_management_group(self, resource_group):
        response = await self.client.policy_set_definitions.create_or_update_at_management_group(
            policy_set_definition_name="str",
            management_group_id="str",
            parameters={
                "description": "str",
                "displayName": "str",
                "id": "str",
                "metadata": {},
                "name": "str",
                "parameters": {},
                "policyDefinitions": [{"parameters": {}, "policyDefinitionId": "str"}],
                "policyType": "str",
                "type": "str",
            },
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete_at_management_group(self, resource_group):
        response = await self.client.policy_set_definitions.delete_at_management_group(
            policy_set_definition_name="str",
            management_group_id="str",
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_at_management_group(self, resource_group):
        response = await self.client.policy_set_definitions.get_at_management_group(
            policy_set_definition_name="str",
            management_group_id="str",
            api_version="2017-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_management_group(self, resource_group):
        response = self.client.policy_set_definitions.list_by_management_group(
            management_group_id="str",
            api_version="2017-06-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
