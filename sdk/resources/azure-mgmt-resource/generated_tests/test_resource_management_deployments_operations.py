# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.resource import ResourceManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestResourceManagementDeploymentsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ResourceManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.deployments.begin_delete(
            resource_group_name=resource_group.name,
            deployment_name="str",
            api_version="2016-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_check_existence(self, resource_group):
        response = self.client.deployments.check_existence(
            resource_group_name=resource_group.name,
            deployment_name="str",
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.deployments.begin_create_or_update(
            resource_group_name=resource_group.name,
            deployment_name="str",
            parameters={
                "properties": {
                    "mode": "str",
                    "debugSetting": {"detailLevel": "str"},
                    "parameters": {},
                    "parametersLink": {"uri": "str", "contentVersion": "str"},
                    "template": {},
                    "templateLink": {"uri": "str", "contentVersion": "str"},
                }
            },
            api_version="2016-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.deployments.get(
            resource_group_name=resource_group.name,
            deployment_name="str",
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_cancel(self, resource_group):
        response = self.client.deployments.cancel(
            resource_group_name=resource_group.name,
            deployment_name="str",
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_validate(self, resource_group):
        response = self.client.deployments.validate(
            resource_group_name=resource_group.name,
            deployment_name="str",
            parameters={
                "properties": {
                    "mode": "str",
                    "debugSetting": {"detailLevel": "str"},
                    "parameters": {},
                    "parametersLink": {"uri": "str", "contentVersion": "str"},
                    "template": {},
                    "templateLink": {"uri": "str", "contentVersion": "str"},
                }
            },
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_export_template(self, resource_group):
        response = self.client.deployments.export_template(
            resource_group_name=resource_group.name,
            deployment_name="str",
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.deployments.list(
            resource_group_name=resource_group.name,
            api_version="2016-02-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_calculate_template_hash(self, resource_group):
        response = self.client.deployments.calculate_template_hash(
            template={},
            api_version="2016-02-01",
        )

        # please add some check logic here by yourself
        # ...
