# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Optional, TYPE_CHECKING

from ... import _serialization

if TYPE_CHECKING:
    from .. import models as _models


class DecompileOperationRequest(_serialization.Model):
    """The body of the request for the decompileBicep operation.

    All required parameters must be populated in order to send to server.

    :ivar template: The ARM json template to be decompiled into a Bicep file. Required.
    :vartype template: str
    """

    _validation = {
        "template": {"required": True},
    }

    _attribute_map = {
        "template": {"key": "template", "type": "str"},
    }

    def __init__(self, *, template: str, **kwargs: Any) -> None:
        """
        :keyword template: The ARM json template to be decompiled into a Bicep file. Required.
        :paramtype template: str
        """
        super().__init__(**kwargs)
        self.template = template


class DecompileOperationSuccessResponse(_serialization.Model):
    """The response of the decompileBicep operation.

    All required parameters must be populated in order to send to server.

    :ivar files: An array of key-value pairs containing the entryPoint string as the key for the
     Bicep file decompiled from the ARM json template. Required.
    :vartype files: list[~azure.mgmt.resource.bicep.v2023_11_01.models.FileDefinition]
    :ivar entry_point: The file path to the main Bicep file generated from the decompiled ARM json
     template. Required.
    :vartype entry_point: str
    """

    _validation = {
        "files": {"required": True},
        "entry_point": {"required": True},
    }

    _attribute_map = {
        "files": {"key": "files", "type": "[FileDefinition]"},
        "entry_point": {"key": "entryPoint", "type": "str"},
    }

    def __init__(self, *, files: List["_models.FileDefinition"], entry_point: str, **kwargs: Any) -> None:
        """
        :keyword files: An array of key-value pairs containing the entryPoint string as the key for the
         Bicep file decompiled from the ARM json template. Required.
        :paramtype files: list[~azure.mgmt.resource.bicep.v2023_11_01.models.FileDefinition]
        :keyword entry_point: The file path to the main Bicep file generated from the decompiled ARM
         json template. Required.
        :paramtype entry_point: str
        """
        super().__init__(**kwargs)
        self.files = files
        self.entry_point = entry_point


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.resource.bicep.v2023_11_01.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.resource.bicep.v2023_11_01.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.resource.bicep.v2023_11_01.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.resource.bicep.v2023_11_01.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class FileDefinition(_serialization.Model):
    """The definition of a file along with its contents.

    :ivar path:
    :vartype path: str
    :ivar contents:
    :vartype contents: str
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "contents": {"key": "contents", "type": "str"},
    }

    def __init__(self, *, path: Optional[str] = None, contents: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword path:
        :paramtype path: str
        :keyword contents:
        :paramtype contents: str
        """
        super().__init__(**kwargs)
        self.path = path
        self.contents = contents
