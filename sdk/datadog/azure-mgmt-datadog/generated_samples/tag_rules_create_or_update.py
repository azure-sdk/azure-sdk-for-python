# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.datadog import DatadogClient

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-datadog
# USAGE
    python tag_rules_create_or_update.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = DatadogClient(
        credential=DefaultAzureCredential(),
        subscription_id="SUBSCRIPTION_ID",
    )

    response = client.tag_rules.create_or_update(
        resource_group_name="myResourceGroup",
        monitor_name="myMonitor",
        rule_set_name="default",
        body={
            "properties": {
                "automuting": True,
                "logRules": {
                    "filteringTags": [
                        {"action": "Include", "name": "Environment", "value": "Prod"},
                        {"action": "Exclude", "name": "Environment", "value": "Dev"},
                    ],
                    "sendAadLogs": False,
                    "sendResourceLogs": True,
                    "sendSubscriptionLogs": True,
                },
                "metricRules": {"filteringTags": []},
            }
        },
    )
    print(response)


# x-ms-original-file: 2023-10-20/TagRules_CreateOrUpdate.json
if __name__ == "__main__":
    main()
