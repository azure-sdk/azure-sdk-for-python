# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.datadog import MicrosoftDatadogClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftDatadogMonitorsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MicrosoftDatadogClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_api_keys(self, resource_group):
        response = self.client.monitors.list_api_keys(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_default_key(self, resource_group):
        response = self.client.monitors.get_default_key(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_set_default_key(self, resource_group):
        response = self.client.monitors.set_default_key(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_hosts(self, resource_group):
        response = self.client.monitors.list_hosts(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_linked_resources(self, resource_group):
        response = self.client.monitors.list_linked_resources(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_monitored_resources(self, resource_group):
        response = self.client.monitors.list_monitored_resources(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.monitors.list(
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.monitors.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-01-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.monitors.get(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.monitors.begin_create(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.monitors.begin_update(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.monitors.begin_delete(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_refresh_set_password_link(self, resource_group):
        response = self.client.monitors.refresh_set_password_link(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...
