# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.datadog import DatadogClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDatadogDatadogMonitorResourcesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DatadogClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_get(self, resource_group):
        response = self.client.datadog_monitor_resources.get(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_begin_create(self, resource_group):
        response = self.client.datadog_monitor_resources.begin_create(
            resource_group_name=resource_group.name,
            monitor_name="str",
            body={
                "location": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "name": "str",
                "properties": {
                    "datadogOrganizationProperties": {
                        "apiKey": "str",
                        "applicationKey": "str",
                        "cspm": bool,
                        "enterpriseAppId": "str",
                        "id": "str",
                        "linkingAuthCode": "str",
                        "linkingClientId": "str",
                        "name": "str",
                        "redirectUri": "str",
                    },
                    "liftrResourceCategory": "str",
                    "liftrResourcePreference": 0,
                    "marketplaceSubscriptionStatus": "str",
                    "monitoringStatus": "str",
                    "provisioningState": "str",
                    "userInfo": {"emailAddress": "str", "name": "str", "phoneNumber": "str"},
                },
                "sku": {"name": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_begin_update(self, resource_group):
        response = self.client.datadog_monitor_resources.begin_update(
            resource_group_name=resource_group.name,
            monitor_name="str",
            body={
                "properties": {"cspm": bool, "monitoringStatus": "str"},
                "sku": {"name": "str"},
                "tags": {"str": "str"},
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_begin_delete(self, resource_group):
        response = self.client.datadog_monitor_resources.begin_delete(
            resource_group_name=resource_group.name,
            monitor_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list_by_resource_group(self, resource_group):
        response = self.client.datadog_monitor_resources.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list(self, resource_group):
        response = self.client.datadog_monitor_resources.list()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list_api_keys(self, resource_group):
        response = self.client.datadog_monitor_resources.list_api_keys(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_get_default_key(self, resource_group):
        response = self.client.datadog_monitor_resources.get_default_key(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_set_default_key(self, resource_group):
        response = self.client.datadog_monitor_resources.set_default_key(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list_hosts(self, resource_group):
        response = self.client.datadog_monitor_resources.list_hosts(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list_linked_resources(self, resource_group):
        response = self.client.datadog_monitor_resources.list_linked_resources(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_list_monitored_resources(self, resource_group):
        response = self.client.datadog_monitor_resources.list_monitored_resources(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_refresh_set_password_link(self, resource_group):
        response = self.client.datadog_monitor_resources.refresh_set_password_link(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_datadog_monitor_resources_billing_info_get(self, resource_group):
        response = self.client.datadog_monitor_resources.billing_info_get(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...
