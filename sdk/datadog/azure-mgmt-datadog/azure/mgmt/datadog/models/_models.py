# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class BillingInfoResponse(_Model):
    """Marketplace Subscription and Organization details to which resource gets billed into.

    :ivar marketplace_saas_info: Marketplace Subscription details.
    :vartype marketplace_saas_info: ~azure.mgmt.datadog.models.MarketplaceSaaSInfo
    :ivar partner_billing_entity: Partner Billing Entity details: Organization Info.
    :vartype partner_billing_entity: ~azure.mgmt.datadog.models.PartnerBillingEntity
    """

    marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = rest_field(
        name="marketplaceSaasInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription details."""
    partner_billing_entity: Optional["_models.PartnerBillingEntity"] = rest_field(
        name="partnerBillingEntity", visibility=["read", "create", "update", "delete", "query"]
    )
    """Partner Billing Entity details: Organization Info."""

    @overload
    def __init__(
        self,
        *,
        marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = None,
        partner_billing_entity: Optional["_models.PartnerBillingEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateResourceSupportedProperties(_Model):
    """Datadog resource can be created or not properties.

    :ivar name: The ARM id of the subscription.
    :vartype name: str
    :ivar creation_supported: Indicates if selected subscription supports Datadog resource
     creation, if not it is already being monitored for the selected organization via multi
     subscription feature.
    :vartype creation_supported: bool
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The ARM id of the subscription."""
    creation_supported: Optional[bool] = rest_field(name="creationSupported", visibility=["read"])
    """Indicates if selected subscription supports Datadog resource creation, if not it is already
     being monitored for the selected organization via multi subscription feature."""


class CreateResourceSupportedResponse(_Model):
    """Datadog resource can be created or not.

    :ivar properties: Represents the properties of the resource.
    :vartype properties: ~azure.mgmt.datadog.models.CreateResourceSupportedProperties
    """

    properties: Optional["_models.CreateResourceSupportedProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the properties of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CreateResourceSupportedProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogAgreementProperties(_Model):
    """Terms properties.

    :ivar publisher: Publisher identifier string.
    :vartype publisher: str
    :ivar product: Product identifier string.
    :vartype product: str
    :ivar plan: Plan identifier string.
    :vartype plan: str
    :ivar license_text_link: Link to HTML with Microsoft and Publisher terms.
    :vartype license_text_link: str
    :ivar privacy_policy_link: Link to the privacy policy of the publisher.
    :vartype privacy_policy_link: str
    :ivar retrieve_datetime: Date and time in UTC of when the terms were accepted. This is empty if
     Accepted is false.
    :vartype retrieve_datetime: ~datetime.datetime
    :ivar signature: Terms signature.
    :vartype signature: str
    :ivar accepted: If any version of the terms have been accepted, otherwise false.
    :vartype accepted: bool
    """

    publisher: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Publisher identifier string."""
    product: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Product identifier string."""
    plan: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Plan identifier string."""
    license_text_link: Optional[str] = rest_field(
        name="licenseTextLink", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to HTML with Microsoft and Publisher terms."""
    privacy_policy_link: Optional[str] = rest_field(
        name="privacyPolicyLink", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to the privacy policy of the publisher."""
    retrieve_datetime: Optional[datetime.datetime] = rest_field(
        name="retrieveDatetime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Date and time in UTC of when the terms were accepted. This is empty if Accepted is false."""
    signature: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Terms signature."""
    accepted: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """If any version of the terms have been accepted, otherwise false."""

    @overload
    def __init__(
        self,
        *,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
        plan: Optional[str] = None,
        license_text_link: Optional[str] = None,
        privacy_policy_link: Optional[str] = None,
        retrieve_datetime: Optional[datetime.datetime] = None,
        signature: Optional[str] = None,
        accepted: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogAgreementResource(_Model):
    """DatadogAgreementResource.

    :ivar id: ARM id of the resource.
    :vartype id: str
    :ivar name: Name of the agreement.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar properties: Represents the properties of the resource.
    :vartype properties: ~azure.mgmt.datadog.models.DatadogAgreementProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """ARM id of the resource."""
    name: Optional[str] = rest_field(visibility=["read"])
    """Name of the agreement."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource."""
    properties: Optional["_models.DatadogAgreementProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the properties of the resource."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DatadogAgreementProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogApiKey(_Model):
    """DatadogApiKey.

    :ivar created_by: The user that created the API key.
    :vartype created_by: str
    :ivar name: The name of the API key.
    :vartype name: str
    :ivar key: The value of the API key. Required.
    :vartype key: str
    :ivar created: The time of creation of the API key.
    :vartype created: str
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The user that created the API key."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the API key."""
    key: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the API key. Required."""
    created: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The time of creation of the API key."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        created_by: Optional[str] = None,
        name: Optional[str] = None,
        created: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogHost(_Model):
    """DatadogHost.

    :ivar name: The name of the host.
    :vartype name: str
    :ivar aliases: The aliases for the host installed via the Datadog agent.
    :vartype aliases: list[str]
    :ivar apps: The Datadog integrations reporting metrics for the host.
    :vartype apps: list[str]
    :ivar meta:
    :vartype meta: ~azure.mgmt.datadog.models.DatadogHostMetadata
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the host."""
    aliases: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The aliases for the host installed via the Datadog agent."""
    apps: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Datadog integrations reporting metrics for the host."""
    meta: Optional["_models.DatadogHostMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        aliases: Optional[List[str]] = None,
        apps: Optional[List[str]] = None,
        meta: Optional["_models.DatadogHostMetadata"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogHostMetadata(_Model):
    """DatadogHostMetadata.

    :ivar agent_version: The agent version.
    :vartype agent_version: str
    :ivar install_method:
    :vartype install_method: ~azure.mgmt.datadog.models.DatadogInstallMethod
    :ivar logs_agent:
    :vartype logs_agent: ~azure.mgmt.datadog.models.DatadogLogsAgent
    """

    agent_version: Optional[str] = rest_field(
        name="agentVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The agent version."""
    install_method: Optional["_models.DatadogInstallMethod"] = rest_field(
        name="installMethod", visibility=["read", "create", "update", "delete", "query"]
    )
    logs_agent: Optional["_models.DatadogLogsAgent"] = rest_field(
        name="logsAgent", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        agent_version: Optional[str] = None,
        install_method: Optional["_models.DatadogInstallMethod"] = None,
        logs_agent: Optional["_models.DatadogLogsAgent"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogInstallMethod(_Model):
    """DatadogInstallMethod.

    :ivar tool: The tool.
    :vartype tool: str
    :ivar tool_version: The tool version.
    :vartype tool_version: str
    :ivar installer_version: The installer version.
    :vartype installer_version: str
    """

    tool: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tool."""
    tool_version: Optional[str] = rest_field(
        name="toolVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The tool version."""
    installer_version: Optional[str] = rest_field(
        name="installerVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The installer version."""

    @overload
    def __init__(
        self,
        *,
        tool: Optional[str] = None,
        tool_version: Optional[str] = None,
        installer_version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogLogsAgent(_Model):
    """DatadogLogsAgent.

    :ivar transport: The transport.
    :vartype transport: str
    """

    transport: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The transport."""

    @overload
    def __init__(
        self,
        *,
        transport: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogMonitorResource(TrackedResource):
    """DatadogMonitorResource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar sku:
    :vartype sku: ~azure.mgmt.datadog.models.ResourceSku
    :ivar properties: Properties specific to the monitor resource.
    :vartype properties: ~azure.mgmt.datadog.models.MonitorProperties
    :ivar identity:
    :vartype identity: ~azure.mgmt.datadog.models.IdentityProperties
    """

    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    properties: Optional["_models.MonitorProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to the monitor resource."""
    identity: Optional["_models.IdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["_models.ResourceSku"] = None,
        properties: Optional["_models.MonitorProperties"] = None,
        identity: Optional["_models.IdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogMonitorResourceUpdateParameters(_Model):
    """The parameters for a PATCH request to a monitor resource.

    :ivar properties: The set of properties that can be update in a PATCH request to a monitor
     resource.
    :vartype properties: ~azure.mgmt.datadog.models.MonitorUpdateProperties
    :ivar tags: The new tags of the monitor resource.
    :vartype tags: dict[str, str]
    :ivar sku:
    :vartype sku: ~azure.mgmt.datadog.models.ResourceSku
    """

    properties: Optional["_models.MonitorUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The set of properties that can be update in a PATCH request to a monitor resource."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The new tags of the monitor resource."""
    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.MonitorUpdateProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["_models.ResourceSku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogOrganizationProperties(_Model):
    """Specify the Datadog organization name. In the case of linking to existing organizations, Id,
    ApiKey, and Applicationkey is required as well.

    :ivar name: Name of the Datadog organization.
    :vartype name: str
    :ivar id: Id of the Datadog organization.
    :vartype id: str
    :ivar linking_auth_code: The auth code used to linking to an existing Datadog organization.
    :vartype linking_auth_code: str
    :ivar linking_client_id: The client_id from an existing in exchange for an auth token to link
     organization.
    :vartype linking_client_id: str
    :ivar redirect_uri: The redirect URI for linking.
    :vartype redirect_uri: str
    :ivar api_key: Api key associated to the Datadog organization.
    :vartype api_key: str
    :ivar application_key: Application key associated to the Datadog organization.
    :vartype application_key: str
    :ivar enterprise_app_id: The Id of the Enterprise App used for Single sign on.
    :vartype enterprise_app_id: str
    :ivar cspm: The configuration which describes the state of cloud security posture management.
     This collects configuration information for all resources in a subscription and track
     conformance to industry benchmarks.
    :vartype cspm: bool
    """

    name: Optional[str] = rest_field(visibility=["read", "create"])
    """Name of the Datadog organization."""
    id: Optional[str] = rest_field(visibility=["read", "create"])
    """Id of the Datadog organization."""
    linking_auth_code: Optional[str] = rest_field(name="linkingAuthCode", visibility=["create"])
    """The auth code used to linking to an existing Datadog organization."""
    linking_client_id: Optional[str] = rest_field(name="linkingClientId", visibility=["create"])
    """The client_id from an existing in exchange for an auth token to link organization."""
    redirect_uri: Optional[str] = rest_field(name="redirectUri", visibility=["create"])
    """The redirect URI for linking."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["create"])
    """Api key associated to the Datadog organization."""
    application_key: Optional[str] = rest_field(name="applicationKey", visibility=["create"])
    """Application key associated to the Datadog organization."""
    enterprise_app_id: Optional[str] = rest_field(name="enterpriseAppId", visibility=["create"])
    """The Id of the Enterprise App used for Single sign on."""
    cspm: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The configuration which describes the state of cloud security posture management. This collects
     configuration information for all resources in a subscription and track conformance to industry
     benchmarks."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        linking_auth_code: Optional[str] = None,
        linking_client_id: Optional[str] = None,
        redirect_uri: Optional[str] = None,
        api_key: Optional[str] = None,
        application_key: Optional[str] = None,
        enterprise_app_id: Optional[str] = None,
        cspm: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogSetPasswordLink(_Model):
    """DatadogSetPasswordLink.

    :ivar set_password_link:
    :vartype set_password_link: str
    """

    set_password_link: Optional[str] = rest_field(
        name="setPasswordLink", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        set_password_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatadogSingleSignOnProperties(_Model):
    """DatadogSingleSignOnProperties.

    :ivar provisioning_state: Known values are: "Accepted", "Creating", "Updating", "Deleting",
     "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.datadog.models.ProvisioningState
    :ivar single_sign_on_state: Various states of the SSO resource. Known values are: "Initial",
     "Enable", "Disable", and "Existing".
    :vartype single_sign_on_state: str or ~azure.mgmt.datadog.models.SingleSignOnStates
    :ivar enterprise_app_id: The Id of the Enterprise App used for Single sign-on.
    :vartype enterprise_app_id: str
    :ivar single_sign_on_url: The login URL specific to this Datadog Organization.
    :vartype single_sign_on_url: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\", \"Succeeded\",
     \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    single_sign_on_state: Optional[Union[str, "_models.SingleSignOnStates"]] = rest_field(
        name="singleSignOnState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Various states of the SSO resource. Known values are: \"Initial\", \"Enable\", \"Disable\", and
     \"Existing\"."""
    enterprise_app_id: Optional[str] = rest_field(
        name="enterpriseAppId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Id of the Enterprise App used for Single sign-on."""
    single_sign_on_url: Optional[str] = rest_field(name="singleSignOnUrl", visibility=["read"])
    """The login URL specific to this Datadog Organization."""

    @overload
    def __init__(
        self,
        *,
        single_sign_on_state: Optional[Union[str, "_models.SingleSignOnStates"]] = None,
        enterprise_app_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    """


class DatadogSingleSignOnResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    :ivar properties:
    :vartype properties: ~azure.mgmt.datadog.models.DatadogSingleSignOnProperties
    """

    properties: Optional["_models.DatadogSingleSignOnProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DatadogSingleSignOnProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.datadog.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.datadog.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.datadog.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilteringTag(_Model):
    """The definition of a filtering tag. Filtering tags are used for capturing resources and
    include/exclude them from being monitored.

    :ivar name: The name (also known as the key) of the tag.
    :vartype name: str
    :ivar value: The value of the tag.
    :vartype value: str
    :ivar action: Valid actions for a filtering tag. Exclusion takes priority over inclusion. Known
     values are: "Include" and "Exclude".
    :vartype action: str or ~azure.mgmt.datadog.models.TagAction
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name (also known as the key) of the tag."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the tag."""
    action: Optional[Union[str, "_models.TagAction"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Valid actions for a filtering tag. Exclusion takes priority over inclusion. Known values are:
     \"Include\" and \"Exclude\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        action: Optional[Union[str, "_models.TagAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IdentityProperties(_Model):
    """IdentityProperties.

    :ivar principal_id: The identity ID.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of resource.
    :vartype tenant_id: str
    :ivar type: Specifies the identity type of the Datadog Monitor. At this time the only allowed
     value is 'SystemAssigned'. Known values are: "SystemAssigned" and "UserAssigned".
    :vartype type: str or ~azure.mgmt.datadog.models.ManagedIdentityTypes
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The identity ID."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of resource."""
    type: Optional[Union[str, "_models.ManagedIdentityTypes"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies the identity type of the Datadog Monitor. At this time the only allowed value is
     'SystemAssigned'. Known values are: \"SystemAssigned\" and \"UserAssigned\"."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedIdentityTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LinkedResource(_Model):
    """The definition of a linked resource.

    :ivar id: The ARM id of the linked resource.
    :vartype id: str
    :ivar location: The location of the linked resource.
    :vartype location: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ARM id of the linked resource."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The location of the linked resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogRules(_Model):
    """Set of rules for sending logs for the Monitor resource.

    :ivar send_aad_logs: Flag specifying if AAD logs should be sent for the Monitor resource.
    :vartype send_aad_logs: bool
    :ivar send_subscription_logs: Flag specifying if Azure subscription logs should be sent for the
     Monitor resource.
    :vartype send_subscription_logs: bool
    :ivar send_resource_logs: Flag specifying if Azure resource logs should be sent for the Monitor
     resource.
    :vartype send_resource_logs: bool
    :ivar filtering_tags: List of filtering tags to be used for capturing logs. This only takes
     effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only
     Exclude action is specified, the rules will apply to the list of all available resources. If
     Include actions are specified, the rules will only include resources with the associated tags.
    :vartype filtering_tags: list[~azure.mgmt.datadog.models.FilteringTag]
    """

    send_aad_logs: Optional[bool] = rest_field(
        name="sendAadLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if AAD logs should be sent for the Monitor resource."""
    send_subscription_logs: Optional[bool] = rest_field(
        name="sendSubscriptionLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if Azure subscription logs should be sent for the Monitor resource."""
    send_resource_logs: Optional[bool] = rest_field(
        name="sendResourceLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if Azure resource logs should be sent for the Monitor resource."""
    filtering_tags: Optional[List["_models.FilteringTag"]] = rest_field(
        name="filteringTags", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of filtering tags to be used for capturing logs. This only takes effect if
     SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude
     action is specified, the rules will apply to the list of all available resources. If Include
     actions are specified, the rules will only include resources with the associated tags."""

    @overload
    def __init__(
        self,
        *,
        send_aad_logs: Optional[bool] = None,
        send_subscription_logs: Optional[bool] = None,
        send_resource_logs: Optional[bool] = None,
        filtering_tags: Optional[List["_models.FilteringTag"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MarketplaceSaaSInfo(_Model):
    """Marketplace SAAS Info of the resource.

    :ivar marketplace_subscription_id: Marketplace Subscription Id. This is a GUID-formatted
     string.
    :vartype marketplace_subscription_id: str
    :ivar marketplace_name: Marketplace Subscription Details: SAAS Name.
    :vartype marketplace_name: str
    :ivar marketplace_status: Marketplace Subscription Details: SaaS Subscription Status.
    :vartype marketplace_status: str
    :ivar billed_azure_subscription_id: The Azure Subscription ID to which the Marketplace
     Subscription belongs and gets billed into.
    :vartype billed_azure_subscription_id: str
    :ivar subscribed: Flag specifying if the Marketplace status is subscribed or not.
    :vartype subscribed: bool
    """

    marketplace_subscription_id: Optional[str] = rest_field(
        name="marketplaceSubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Id. This is a GUID-formatted string."""
    marketplace_name: Optional[str] = rest_field(
        name="marketplaceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Details: SAAS Name."""
    marketplace_status: Optional[str] = rest_field(
        name="marketplaceStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Details: SaaS Subscription Status."""
    billed_azure_subscription_id: Optional[str] = rest_field(
        name="billedAzureSubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into."""
    subscribed: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Flag specifying if the Marketplace status is subscribed or not."""

    @overload
    def __init__(
        self,
        *,
        marketplace_subscription_id: Optional[str] = None,
        marketplace_name: Optional[str] = None,
        marketplace_status: Optional[str] = None,
        billed_azure_subscription_id: Optional[str] = None,
        subscribed: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricRules(_Model):
    """Set of rules for sending metrics for the Monitor resource.

    :ivar filtering_tags: List of filtering tags to be used for capturing metrics. If empty, all
     resources will be captured. If only Exclude action is specified, the rules will apply to the
     list of all available resources. If Include actions are specified, the rules will only include
     resources with the associated tags.
    :vartype filtering_tags: list[~azure.mgmt.datadog.models.FilteringTag]
    """

    filtering_tags: Optional[List["_models.FilteringTag"]] = rest_field(
        name="filteringTags", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of filtering tags to be used for capturing metrics. If empty, all resources will be
     captured. If only Exclude action is specified, the rules will apply to the list of all
     available resources. If Include actions are specified, the rules will only include resources
     with the associated tags."""

    @overload
    def __init__(
        self,
        *,
        filtering_tags: Optional[List["_models.FilteringTag"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoredResource(_Model):
    """The properties of a resource currently being monitored by the Datadog monitor resource.

    :ivar id: The ARM id of the resource.
    :vartype id: str
    :ivar sending_metrics: Flag indicating if resource is sending metrics to Datadog.
    :vartype sending_metrics: bool
    :ivar reason_for_metrics_status: Reason for why the resource is sending metrics (or why it is
     not sending).
    :vartype reason_for_metrics_status: str
    :ivar sending_logs: Flag indicating if resource is sending logs to Datadog.
    :vartype sending_logs: bool
    :ivar reason_for_logs_status: Reason for why the resource is sending logs (or why it is not
     sending).
    :vartype reason_for_logs_status: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ARM id of the resource."""
    sending_metrics: Optional[bool] = rest_field(
        name="sendingMetrics", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag indicating if resource is sending metrics to Datadog."""
    reason_for_metrics_status: Optional[str] = rest_field(
        name="reasonForMetricsStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reason for why the resource is sending metrics (or why it is not sending)."""
    sending_logs: Optional[bool] = rest_field(
        name="sendingLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag indicating if resource is sending logs to Datadog."""
    reason_for_logs_status: Optional[str] = rest_field(
        name="reasonForLogsStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reason for why the resource is sending logs (or why it is not sending)."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        sending_metrics: Optional[bool] = None,
        reason_for_metrics_status: Optional[str] = None,
        sending_logs: Optional[bool] = None,
        reason_for_logs_status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoredSubscription(_Model):
    """The list of subscriptions and it's monitoring status by current Datadog monitor.

    :ivar subscription_id: The subscriptionId to be monitored. Required.
    :vartype subscription_id: str
    :ivar status: The state of monitoring. Known values are: "InProgress", "Active", "Failed", and
     "Deleting".
    :vartype status: str or ~azure.mgmt.datadog.models.Status
    :ivar error: The reason of not monitoring the subscription.
    :vartype error: str
    :ivar tag_rules: Definition of the properties for a TagRules resource.
    :vartype tag_rules: ~azure.mgmt.datadog.models.MonitoringTagRulesProperties
    """

    subscription_id: str = rest_field(name="subscriptionId", visibility=["read", "create", "update", "delete", "query"])
    """The subscriptionId to be monitored. Required."""
    status: Optional[Union[str, "_models.Status"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The state of monitoring. Known values are: \"InProgress\", \"Active\", \"Failed\", and
     \"Deleting\"."""
    error: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The reason of not monitoring the subscription."""
    tag_rules: Optional["_models.MonitoringTagRulesProperties"] = rest_field(
        name="tagRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """Definition of the properties for a TagRules resource."""

    @overload
    def __init__(
        self,
        *,
        subscription_id: str,
        status: Optional[Union[str, "_models.Status"]] = None,
        error: Optional[str] = None,
        tag_rules: Optional["_models.MonitoringTagRulesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoredSubscriptionProperties(ProxyResource):
    """The request to update subscriptions needed to be monitored by the Datadog monitor resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    :ivar properties: The request to update subscriptions needed to be monitored by the Datadog
     monitor resource.
    :vartype properties: ~azure.mgmt.datadog.models.SubscriptionList
    """

    properties: Optional["_models.SubscriptionList"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The request to update subscriptions needed to be monitored by the Datadog monitor resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SubscriptionList"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoringTagRules(ProxyResource):
    """Capture logs and metrics of Azure resources based on ARM tags.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.datadog.models.SystemData
    :ivar properties: Definition of the properties for a TagRules resource.
    :vartype properties: ~azure.mgmt.datadog.models.MonitoringTagRulesProperties
    """

    properties: Optional["_models.MonitoringTagRulesProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Definition of the properties for a TagRules resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.MonitoringTagRulesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoringTagRulesProperties(_Model):
    """Definition of the properties for a TagRules resource.

    :ivar provisioning_state: Known values are: "Accepted", "Creating", "Updating", "Deleting",
     "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.datadog.models.ProvisioningState
    :ivar log_rules: Set of rules for sending logs for the Monitor resource.
    :vartype log_rules: ~azure.mgmt.datadog.models.LogRules
    :ivar metric_rules: Set of rules for sending metrics for the Monitor resource.
    :vartype metric_rules: ~azure.mgmt.datadog.models.MetricRules
    :ivar automuting: Configuration to enable/disable auto-muting flag.
    :vartype automuting: bool
    :ivar custom_metrics: Configuration to enable/disable custom metrics. If enabled, custom
     metrics from app insights will be sent.
    :vartype custom_metrics: bool
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\", \"Succeeded\",
     \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    log_rules: Optional["_models.LogRules"] = rest_field(
        name="logRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set of rules for sending logs for the Monitor resource."""
    metric_rules: Optional["_models.MetricRules"] = rest_field(
        name="metricRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set of rules for sending metrics for the Monitor resource."""
    automuting: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Configuration to enable/disable auto-muting flag."""
    custom_metrics: Optional[bool] = rest_field(
        name="customMetrics", visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration to enable/disable custom metrics. If enabled, custom metrics from app insights
     will be sent."""

    @overload
    def __init__(
        self,
        *,
        log_rules: Optional["_models.LogRules"] = None,
        metric_rules: Optional["_models.MetricRules"] = None,
        automuting: Optional[bool] = None,
        custom_metrics: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitorProperties(_Model):
    """Properties specific to the monitor resource.

    :ivar provisioning_state: Known values are: "Accepted", "Creating", "Updating", "Deleting",
     "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.datadog.models.ProvisioningState
    :ivar monitoring_status: Flag specifying if the resource monitoring is enabled or disabled.
     Known values are: "Enabled" and "Disabled".
    :vartype monitoring_status: str or ~azure.mgmt.datadog.models.MonitoringStatus
    :ivar marketplace_subscription_status: Flag specifying the Marketplace Subscription Status of
     the resource. If payment is not made in time, the resource will go in Suspended state. Known
     values are: "Provisioning", "Active", "Suspended", and "Unsubscribed".
    :vartype marketplace_subscription_status: str or
     ~azure.mgmt.datadog.models.MarketplaceSubscriptionStatus
    :ivar datadog_organization_properties: Specify the Datadog organization name. In the case of
     linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
    :vartype datadog_organization_properties:
     ~azure.mgmt.datadog.models.DatadogOrganizationProperties
    :ivar user_info: Includes name, email and optionally, phone number. User Information can't be
     null.
    :vartype user_info: ~azure.mgmt.datadog.models.UserInfo
    :ivar liftr_resource_category: Known values are: "Unknown" and "MonitorLogs".
    :vartype liftr_resource_category: str or ~azure.mgmt.datadog.models.LiftrResourceCategories
    :ivar liftr_resource_preference: The priority of the resource.
    :vartype liftr_resource_preference: int
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\", \"Succeeded\",
     \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = rest_field(
        name="monitoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if the resource monitoring is enabled or disabled. Known values are:
     \"Enabled\" and \"Disabled\"."""
    marketplace_subscription_status: Optional[Union[str, "_models.MarketplaceSubscriptionStatus"]] = rest_field(
        name="marketplaceSubscriptionStatus", visibility=["read"]
    )
    """Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in
     time, the resource will go in Suspended state. Known values are: \"Provisioning\", \"Active\",
     \"Suspended\", and \"Unsubscribed\"."""
    datadog_organization_properties: Optional["_models.DatadogOrganizationProperties"] = rest_field(
        name="datadogOrganizationProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specify the Datadog organization name. In the case of linking to existing organizations, Id,
     ApiKey, and Applicationkey is required as well."""
    user_info: Optional["_models.UserInfo"] = rest_field(
        name="userInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Includes name, email and optionally, phone number. User Information can't be null."""
    liftr_resource_category: Optional[Union[str, "_models.LiftrResourceCategories"]] = rest_field(
        name="liftrResourceCategory", visibility=["read"]
    )
    """Known values are: \"Unknown\" and \"MonitorLogs\"."""
    liftr_resource_preference: Optional[int] = rest_field(name="liftrResourcePreference", visibility=["read"])
    """The priority of the resource."""

    @overload
    def __init__(
        self,
        *,
        monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = None,
        datadog_organization_properties: Optional["_models.DatadogOrganizationProperties"] = None,
        user_info: Optional["_models.UserInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitorUpdateProperties(_Model):
    """The set of properties that can be update in a PATCH request to a monitor resource.

    :ivar monitoring_status: Flag specifying if the resource monitoring is enabled or disabled.
     Known values are: "Enabled" and "Disabled".
    :vartype monitoring_status: str or ~azure.mgmt.datadog.models.MonitoringStatus
    :ivar cspm: The new cloud security posture management value of the monitor resource. This
     collects configuration information for all resources in a subscription and track conformance to
     industry benchmarks.
    :vartype cspm: bool
    """

    monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = rest_field(
        name="monitoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if the resource monitoring is enabled or disabled. Known values are:
     \"Enabled\" and \"Disabled\"."""
    cspm: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The new cloud security posture management value of the monitor resource. This collects
     configuration information for all resources in a subscription and track conformance to industry
     benchmarks."""

    @overload
    def __init__(
        self,
        *,
        monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = None,
        cspm: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Represents the display information for an operation.

    :ivar provider: The service provider: Microsoft.Datadog.
    :vartype provider: str
    :ivar resource: The resource on which the operation is performed.
    :vartype resource: str
    :ivar operation: The type of operation: create, update, delete, etc.
    :vartype operation: str
    :ivar description: A localized description of the operation.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The service provider: Microsoft.Datadog."""
    resource: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource on which the operation is performed."""
    operation: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of operation: create, update, delete, etc."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A localized description of the operation."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationResult(_Model):
    """A Microsoft.Datadog REST API operation.

    :ivar name: Operation name, i.e., {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The object that represents the operation.
    :vartype display: ~azure.mgmt.datadog.models.OperationDisplay
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Operation name, i.e., {provider}/{resource}/{operation}."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The object that represents the operation."""
    is_data_action: Optional[bool] = rest_field(
        name="isDataAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the operation is a data action."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        is_data_action: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PartnerBillingEntity(_Model):
    """Partner Billing details associated with the resource.

    :ivar id: The Datadog Organization Id.
    :vartype id: str
    :ivar name: The Datadog Organization Name.
    :vartype name: str
    :ivar partner_entity_uri: Link to the datadog organization page.
    :vartype partner_entity_uri: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Datadog Organization Id."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Datadog Organization Name."""
    partner_entity_uri: Optional[str] = rest_field(
        name="partnerEntityUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to the datadog organization page."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        partner_entity_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceSku(_Model):
    """Represents the SKU of a resource.

    :ivar name: The name of the SKU. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the SKU. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SetDefaultKeyParameterBody(_Model):
    """SetDefaultKeyParameterBody.

    :ivar body:
    :vartype body: ~azure.mgmt.datadog.models.DatadogApiKey
    """

    body: Optional["_models.DatadogApiKey"] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        body: Optional["_models.DatadogApiKey"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubscriptionList(_Model):
    """The request to update subscriptions needed to be monitored by the Datadog monitor resource.

    :ivar operation: The operation for the patch on the resource. Known values are: "AddBegin",
     "AddComplete", "DeleteBegin", "DeleteComplete", and "Active".
    :vartype operation: str or ~azure.mgmt.datadog.models.Operation
    :ivar monitored_subscription_list: List of subscriptions and the state of the monitoring.
    :vartype monitored_subscription_list: list[~azure.mgmt.datadog.models.MonitoredSubscription]
    """

    operation: Optional[Union[str, "_models.Operation"]] = rest_field(visibility=["create", "update"])
    """The operation for the patch on the resource. Known values are: \"AddBegin\", \"AddComplete\",
     \"DeleteBegin\", \"DeleteComplete\", and \"Active\"."""
    monitored_subscription_list: Optional[List["_models.MonitoredSubscription"]] = rest_field(
        name="monitoredSubscriptionList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of subscriptions and the state of the monitoring."""

    @overload
    def __init__(
        self,
        *,
        operation: Optional[Union[str, "_models.Operation"]] = None,
        monitored_subscription_list: Optional[List["_models.MonitoredSubscription"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.datadog.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.datadog.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserInfo(_Model):
    """Includes name, email and optionally, phone number. User Information can't be null.

    :ivar name: Name of the user.
    :vartype name: str
    :ivar email_address: Email of the user used by Datadog for contacting them if needed.
    :vartype email_address: str
    :ivar phone_number: Phone number of the user used by Datadog for contacting them if needed.
    :vartype phone_number: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the user."""
    email_address: Optional[str] = rest_field(
        name="emailAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Email of the user used by Datadog for contacting them if needed."""
    phone_number: Optional[str] = rest_field(
        name="phoneNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Phone number of the user used by Datadog for contacting them if needed."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        email_address: Optional[str] = None,
        phone_number: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
