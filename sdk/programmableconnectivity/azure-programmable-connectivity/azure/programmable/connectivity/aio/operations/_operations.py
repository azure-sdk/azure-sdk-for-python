# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, List, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ...operations._operations import (
    build_location_interface_verify_request,
    build_networks_list_request,
    build_networks_retrieve_request,
    build_number_interface_retrieve_request,
    build_number_interface_verify_request,
    build_sim_swap_interface_retrieve_request,
    build_sim_swap_interface_verify_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class LocationInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmable.connectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`location_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: _models.LocationVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: ~azure.programmable.connectivity.models.LocationVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "ipv4Address": "str",  # Optional. IPv4 address and port of the device, in
                      the form address:port.
                    "ipv6Address": "str",  # Optional. IPv6 address of the device.
                    "networkAccessIdentifier": "str",  # Optional. External identifier or network
                      access identifier of the device.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: JSON,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: IO[bytes],
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: Union[_models.LocationVerifyRequest, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Is one of the following types: LocationVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmable.connectivity.models.LocationVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "ipv4Address": "str",  # Optional. IPv4 address and port of the device, in
                      the form address:port.
                    "ipv6Address": "str",  # Optional. IPv6 address of the device.
                    "networkAccessIdentifier": "str",  # Optional. External identifier or network
                      access identifier of the device.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.LocationVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_location_interface_verify_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.LocationVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class NetworksOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmable.connectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`networks` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, *, apc_gateway_id: str, **kwargs: Any) -> AsyncIterable["_models.Network"]:
        """Resource list operation template.

        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: An iterator like instance of Network
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.programmable.connectivity.models.Network]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkId": "str"  # The ID of the network. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Network]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_networks_list_request(
                    apc_gateway_id=apc_gateway_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Network], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: _models.NetworkDevice,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: ~azure.programmable.connectivity.models.NetworkDevice
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkId": "str"  # The ID of the network. Required.
                }
        """

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: JSON,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Network:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkId": "str"  # The ID of the network. Required.
                }
        """

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: IO[bytes],
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Network:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkId": "str"  # The ID of the network. Required.
                }
        """

    @distributed_trace_async
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: Union[_models.NetworkDevice, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Is one of the following types: NetworkDevice, JSON, IO[bytes] Required.
        :type body: ~azure.programmable.connectivity.models.NetworkDevice or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkId": "str"  # The ID of the network. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Network] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_networks_retrieve_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Network, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class NumberInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmable.connectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`number_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: _models.NumberVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: ~azure.programmable.connectivity.models.NumberVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: JSON,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: IO[bytes],
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: Union[_models.NumberVerifyRequest, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Is one of the following types: NumberVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmable.connectivity.models.NumberVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.NumberVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_number_interface_verify_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NumberVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def retrieve(
        self, action: Union[str, _models.CommonActionEnum], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.NumberRetrieveResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberRetrieveResponse. The NumberRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.NumberRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.NumberRetrieveResponse] = kwargs.pop("cls", None)

        _request = build_number_interface_retrieve_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NumberRetrieveResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class SimSwapInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmable.connectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`sim_swap_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: _models.SimSwapRetrieveRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: ~azure.programmable.connectivity.models.SimSwapRetrieveRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: JSON,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @overload
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: IO[bytes],
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @distributed_trace_async
    async def retrieve(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: Union[_models.SimSwapRetrieveRequest, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Is one of the following types: SimSwapRetrieveRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmable.connectivity.models.SimSwapRetrieveRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapRetrieveResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_interface_retrieve_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapRetrieveResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: _models.SimSwapVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: ~azure.programmable.connectivity.models.SimSwapVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "phoneNumber": "str",  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                    "maxAge": 0  # Optional. Maximum lookback for SimSwap verification.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: JSON,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: IO[bytes],
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self,
        action: Union[str, _models.CommonActionEnum],
        body: Union[_models.SimSwapVerifyRequest, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        # pylint: disable=line-too-long
        """Resource action operation template.

        :param action: Static endpoint. "action" Required.
        :type action: str or ~azure.programmable.connectivity.models.CommonActionEnum
        :param body: Is one of the following types: SimSwapVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmable.connectivity.models.SimSwapVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmable.connectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "network": {
                        "networkId": "str"  # The ID of the network. Required.
                    },
                    "phoneNumber": "str",  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                    "maxAge": 0  # Optional. Maximum lookback for SimSwap verification.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_interface_verify_request(
            action=action,
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
