# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class ApplicationOwnerProperties(_Model):
    """Details about the Application Owner (i.e. organization) that would use the Operator's Network
    APIs.

    :ivar name: Common name of the organization owning the application. Required.
    :vartype name: str
    :ivar legal_name: Legal name of the organization owning the application. Required.
    :vartype legal_name: str
    :ivar trading_name: Trading name of the organization owning the application. Required.
    :vartype trading_name: str
    :ivar organization_description: A description of the organization owning the application.
     Required.
    :vartype organization_description: str
    :ivar tax_number: Unique Tax Number for the user's organization in the country/region the APC
     Gateway is being purchased. Required.
    :vartype tax_number: str
    :ivar organization_type: The type of organization that the Application Owner is. Required.
     Known values are: "Academic scientific organization", "For profit organization", "Governmental
     organization", "Industry consortium", "International organization", "Non-governmental
     organization", "Non-profit organization", and "Organizational unit".
    :vartype organization_type: str or ~azure.mgmt.programmableconnectivity.models.OrganizationType
    :ivar organization_identification_id: ID number for official identification of the
     organization. Required.
    :vartype organization_identification_id: str
    :ivar organization_identification_issuer: Issuing organization of the ID for official
     identification of the organization. Required.
    :vartype organization_identification_issuer: str
    :ivar organization_identification_type: Type of official identification of the organization.
     Required.
    :vartype organization_identification_type: str
    :ivar contact_email_address: Email address for the person responsible for the use of Network
     APIs in this application. Required.
    :vartype contact_email_address: str
    :ivar legal_representative: Legal representative of the organization. Required.
    :vartype legal_representative: ~azure.mgmt.programmableconnectivity.models.Person
    :ivar privacy_manager: Privacy manager of the organization. Required.
    :vartype privacy_manager: ~azure.mgmt.programmableconnectivity.models.Person
    :ivar data_protection_officer: Data Protection Officer of the organization. Required.
    :vartype data_protection_officer: ~azure.mgmt.programmableconnectivity.models.Person
    :ivar registered_geographic_address: Registered Geographic address. Required.
    :vartype registered_geographic_address:
     ~azure.mgmt.programmableconnectivity.models.GeographicAddress
    :ivar privacy_policy_url: URL for the organization's privacy policy. Required.
    :vartype privacy_policy_url: str
    :ivar local_representatives: List of local representatives. Required.
    :vartype local_representatives:
     list[~azure.mgmt.programmableconnectivity.models.LocalRepresentative]
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Common name of the organization owning the application. Required."""
    legal_name: str = rest_field(name="legalName", visibility=["read", "create", "update", "delete", "query"])
    """Legal name of the organization owning the application. Required."""
    trading_name: str = rest_field(name="tradingName", visibility=["read", "create", "update", "delete", "query"])
    """Trading name of the organization owning the application. Required."""
    organization_description: str = rest_field(
        name="organizationDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """A description of the organization owning the application. Required."""
    tax_number: str = rest_field(name="taxNumber", visibility=["read", "create", "update", "delete", "query"])
    """Unique Tax Number for the user's organization in the country/region the APC Gateway is being
     purchased. Required."""
    organization_type: Union[str, "_models.OrganizationType"] = rest_field(
        name="organizationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of organization that the Application Owner is. Required. Known values are: \"Academic
     scientific organization\", \"For profit organization\", \"Governmental organization\",
     \"Industry consortium\", \"International organization\", \"Non-governmental organization\",
     \"Non-profit organization\", and \"Organizational unit\"."""
    organization_identification_id: str = rest_field(
        name="organizationIdentificationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ID number for official identification of the organization. Required."""
    organization_identification_issuer: str = rest_field(
        name="organizationIdentificationIssuer", visibility=["read", "create", "update", "delete", "query"]
    )
    """Issuing organization of the ID for official identification of the organization. Required."""
    organization_identification_type: str = rest_field(
        name="organizationIdentificationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of official identification of the organization. Required."""
    contact_email_address: str = rest_field(
        name="contactEmailAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Email address for the person responsible for the use of Network APIs in this application.
     Required."""
    legal_representative: "_models.Person" = rest_field(
        name="legalRepresentative", visibility=["read", "create", "update", "delete", "query"]
    )
    """Legal representative of the organization. Required."""
    privacy_manager: "_models.Person" = rest_field(
        name="privacyManager", visibility=["read", "create", "update", "delete", "query"]
    )
    """Privacy manager of the organization. Required."""
    data_protection_officer: "_models.Person" = rest_field(
        name="dataProtectionOfficer", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data Protection Officer of the organization. Required."""
    registered_geographic_address: "_models.GeographicAddress" = rest_field(
        name="registeredGeographicAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Registered Geographic address. Required."""
    privacy_policy_url: str = rest_field(
        name="privacyPolicyUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for the organization's privacy policy. Required."""
    local_representatives: List["_models.LocalRepresentative"] = rest_field(
        name="localRepresentatives", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of local representatives. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        legal_name: str,
        trading_name: str,
        organization_description: str,
        tax_number: str,
        organization_type: Union[str, "_models.OrganizationType"],
        organization_identification_id: str,
        organization_identification_issuer: str,
        organization_identification_type: str,
        contact_email_address: str,
        legal_representative: "_models.Person",
        privacy_manager: "_models.Person",
        data_protection_officer: "_models.Person",
        registered_geographic_address: "_models.GeographicAddress",
        privacy_policy_url: str,
        local_representatives: List["_models.LocalRepresentative"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApplicationProperties(_Model):
    """Details about the Application that would use the Operator's Network APIs.

    :ivar name: Name of the application. Required.
    :vartype name: str
    :ivar application_description: Description of the application. Required.
    :vartype application_description: str
    :ivar category: The category of the application. Required. Known values are: "Agriculture",
     "Art and design", "Auto and vehicle", "Beauty", "Books and reference", "Business",
     "Construction", "Defense", "Developer tools", "Education", "Engineering", "Events and
     entertainment", "Finance", "Food and drink", "Games", "Health and fitness", "Healthcare",
     "Information", "Kids", "Libraries and demo", "Lifestyle", "Manufacturing", "Maps and
     navigation", "Media", "Medical", "Mining", "Music and audio", "News and magazines",
     "Organizations", "Other", "Photo and video", "Productivity", "Public service", "Real estate",
     "Shopping", "Social networking and communications", "Sports", "Tourism", "Utilities",
     "Trading", "Transportation", "Travel and local", "Water", and "Weather".
    :vartype category: str or ~azure.mgmt.programmableconnectivity.models.Category
    :ivar commercial_name: Commercial name of the application. Required.
    :vartype commercial_name: str
    :ivar privacy_rights_request_email_address: Privacy rights request email address. Required.
    :vartype privacy_rights_request_email_address: str
    :ivar privacy_policy_url: URL for the organization's privacy policy. Required.
    :vartype privacy_policy_url: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the application. Required."""
    application_description: str = rest_field(
        name="applicationDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of the application. Required."""
    category: Union[str, "_models.Category"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The category of the application. Required. Known values are: \"Agriculture\", \"Art and
     design\", \"Auto and vehicle\", \"Beauty\", \"Books and reference\", \"Business\",
     \"Construction\", \"Defense\", \"Developer tools\", \"Education\", \"Engineering\", \"Events
     and entertainment\", \"Finance\", \"Food and drink\", \"Games\", \"Health and fitness\",
     \"Healthcare\", \"Information\", \"Kids\", \"Libraries and demo\", \"Lifestyle\",
     \"Manufacturing\", \"Maps and navigation\", \"Media\", \"Medical\", \"Mining\", \"Music and
     audio\", \"News and magazines\", \"Organizations\", \"Other\", \"Photo and video\",
     \"Productivity\", \"Public service\", \"Real estate\", \"Shopping\", \"Social networking and
     communications\", \"Sports\", \"Tourism\", \"Utilities\", \"Trading\", \"Transportation\",
     \"Travel and local\", \"Water\", and \"Weather\"."""
    commercial_name: str = rest_field(name="commercialName", visibility=["read", "create", "update", "delete", "query"])
    """Commercial name of the application. Required."""
    privacy_rights_request_email_address: str = rest_field(
        name="privacyRightsRequestEmailAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Privacy rights request email address. Required."""
    privacy_policy_url: str = rest_field(
        name="privacyPolicyUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for the organization's privacy policy. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        application_description: str,
        category: Union[str, "_models.Category"],
        commercial_name: str,
        privacy_rights_request_email_address: str,
        privacy_policy_url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataProcessing(_Model):
    """Model defining how received data is processed.

    :ivar processing_operation: The operation that is performed on the data received. Required.
     Known values are: "Access", "Acquire", "Adapt", "Aggregate", "Align", "Alter", "Analyze",
     "Anonymize", "Assess", "Collect", "Combine", "Consult", "Copy", "Cross border transfer",
     "Delete", "Derive", "Destruct", "Disclose", "Disclose by transmission", "Display",
     "Disseminate", "Download", "Erase", "Export", "Filter", "Format", "Generate", "Infer", "Make
     available", "Match", "Modify", "Monitor", "Move", "Observe", "Obtain", "Organize", "Profiling",
     "Pseudonymize", "Query", "Record", "Reformat", "Remove", "Restrict", "Retrieve", "Screen",
     "Share", "Store", "Structure", "Transfer", "Transform", "Transmit", and "Use".
    :vartype processing_operation: str or
     ~azure.mgmt.programmableconnectivity.models.ProcessingOperation
    :ivar contexts: The contexts in which the data is processed. Required.
    :vartype contexts: list[str or ~azure.mgmt.programmableconnectivity.models.Context]
    :ivar duration: The duration or temporal limitation of the data processing. Required. Known
     values are: "Endless", "Fixed occurrences", "Indeterminate", "Temporal", "Until event", and
     "Until time".
    :vartype duration: str or ~azure.mgmt.programmableconnectivity.models.Duration
    :ivar frequency: The frequency of the data processing. Required. Known values are:
     "Continuous", "Often", "Singular", and "Sporadic".
    :vartype frequency: str or ~azure.mgmt.programmableconnectivity.models.Frequency
    :ivar transit_regions: The countries/regions the data transits through. Required.
    :vartype transit_regions: list[~azure.mgmt.programmableconnectivity.models.DataRegions]
    :ivar storage_regions: The countries/regions the data is stored in. Required.
    :vartype storage_regions: list[~azure.mgmt.programmableconnectivity.models.DataRegions]
    """

    processing_operation: Union[str, "_models.ProcessingOperation"] = rest_field(
        name="processingOperation", visibility=["read", "create", "update", "delete", "query"]
    )
    """The operation that is performed on the data received. Required. Known values are: \"Access\",
     \"Acquire\", \"Adapt\", \"Aggregate\", \"Align\", \"Alter\", \"Analyze\", \"Anonymize\",
     \"Assess\", \"Collect\", \"Combine\", \"Consult\", \"Copy\", \"Cross border transfer\",
     \"Delete\", \"Derive\", \"Destruct\", \"Disclose\", \"Disclose by transmission\", \"Display\",
     \"Disseminate\", \"Download\", \"Erase\", \"Export\", \"Filter\", \"Format\", \"Generate\",
     \"Infer\", \"Make available\", \"Match\", \"Modify\", \"Monitor\", \"Move\", \"Observe\",
     \"Obtain\", \"Organize\", \"Profiling\", \"Pseudonymize\", \"Query\", \"Record\", \"Reformat\",
     \"Remove\", \"Restrict\", \"Retrieve\", \"Screen\", \"Share\", \"Store\", \"Structure\",
     \"Transfer\", \"Transform\", \"Transmit\", and \"Use\"."""
    contexts: List[Union[str, "_models.Context"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The contexts in which the data is processed. Required."""
    duration: Union[str, "_models.Duration"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The duration or temporal limitation of the data processing. Required. Known values are:
     \"Endless\", \"Fixed occurrences\", \"Indeterminate\", \"Temporal\", \"Until event\", and
     \"Until time\"."""
    frequency: Union[str, "_models.Frequency"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The frequency of the data processing. Required. Known values are: \"Continuous\", \"Often\",
     \"Singular\", and \"Sporadic\"."""
    transit_regions: List["_models.DataRegions"] = rest_field(
        name="transitRegions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The countries/regions the data transits through. Required."""
    storage_regions: List["_models.DataRegions"] = rest_field(
        name="storageRegions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The countries/regions the data is stored in. Required."""

    @overload
    def __init__(
        self,
        *,
        processing_operation: Union[str, "_models.ProcessingOperation"],
        contexts: List[Union[str, "_models.Context"]],
        duration: Union[str, "_models.Duration"],
        frequency: Union[str, "_models.Frequency"],
        transit_regions: List["_models.DataRegions"],
        storage_regions: List["_models.DataRegions"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataRegions(_Model):
    """Model defining the information required about the countries/regions the data transits through
    or is stored in.

    :ivar country_code: The country code of the country/region the data transits through or is
     stored in. Required.
    :vartype country_code: str
    :ivar commercial_organization: The commercial organization who is managing the data.
    :vartype commercial_organization: str
    :ivar commercial_activity: Flag to indicate if commercial activity applies to this data
     management. Required.
    :vartype commercial_activity: bool
    :ivar data_privacy_framework_url: URL of the organization or governmental data privacy
     framework. Required.
    :vartype data_privacy_framework_url: str
    """

    country_code: str = rest_field(name="countryCode", visibility=["read", "create", "update", "delete", "query"])
    """The country code of the country/region the data transits through or is stored in. Required."""
    commercial_organization: Optional[str] = rest_field(
        name="commercialOrganization", visibility=["read", "create", "update", "delete", "query"]
    )
    """The commercial organization who is managing the data."""
    commercial_activity: bool = rest_field(
        name="commercialActivity", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag to indicate if commercial activity applies to this data management. Required."""
    data_privacy_framework_url: str = rest_field(
        name="dataPrivacyFrameworkUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL of the organization or governmental data privacy framework. Required."""

    @overload
    def __init__(
        self,
        *,
        country_code: str,
        commercial_activity: bool,
        data_privacy_framework_url: str,
        commercial_organization: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.programmableconnectivity.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.programmableconnectivity.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.programmableconnectivity.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Gateway(TrackedResource):
    """A Programmable Connectivity Gateway resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.programmableconnectivity.models.GatewayProperties
    """

    properties: Optional["_models.GatewayProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GatewayProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GatewayProperties(_Model):
    """Gateway resource properties.

    :ivar operator_api_connections: List of Operator API Connections selected by the user.
    :vartype operator_api_connections: list[str]
    :ivar gateway_base_url: Base URL of the Gateway resource. This is the URL that the users would
     use to make Network API requests to the Operators via Azure.
    :vartype gateway_base_url: str
    :ivar provisioning_state: The status of the last operation on the Gateway resource. Known
     values are: "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and
     "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.programmableconnectivity.models.ProvisioningState
    :ivar configured_application: Details about the Application that would use the Operator's
     Network APIs. Required.
    :vartype configured_application:
     ~azure.mgmt.programmableconnectivity.models.ApplicationProperties
    :ivar configured_application_owner: Details about the Organization owning the Application that
     would use the Operator's Network APIs. Required.
    :vartype configured_application_owner:
     ~azure.mgmt.programmableconnectivity.models.ApplicationOwnerProperties
    """

    operator_api_connections: Optional[List[str]] = rest_field(name="operatorApiConnections", visibility=["read"])
    """List of Operator API Connections selected by the user."""
    gateway_base_url: Optional[str] = rest_field(name="gatewayBaseUrl", visibility=["read"])
    """Base URL of the Gateway resource. This is the URL that the users would use to make Network API
     requests to the Operators via Azure."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation on the Gateway resource. Known values are: \"Succeeded\",
     \"Failed\", \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    configured_application: "_models.ApplicationProperties" = rest_field(
        name="configuredApplication", visibility=["read", "create", "update"]
    )
    """Details about the Application that would use the Operator's Network APIs. Required."""
    configured_application_owner: "_models.ApplicationOwnerProperties" = rest_field(
        name="configuredApplicationOwner", visibility=["read", "create", "update"]
    )
    """Details about the Organization owning the Application that would use the Operator's Network
     APIs. Required."""

    @overload
    def __init__(
        self,
        *,
        configured_application: "_models.ApplicationProperties",
        configured_application_owner: "_models.ApplicationOwnerProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GatewayTagsUpdate(_Model):
    """The type used for updating tags in Gateway resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GeographicAddress(_Model):
    """Model defining a geographic address.

    :ivar street_number: Street Number of the address.
    :vartype street_number: str
    :ivar street_name: Street Name of the address.
    :vartype street_name: str
    :ivar locality: Locality of the address.
    :vartype locality: str
    :ivar city: City of the address.
    :vartype city: str
    :ivar state_or_province: State or province of the address.
    :vartype state_or_province: str
    :ivar postal_code: Postal code of the address.
    :vartype postal_code: str
    :ivar country_code: Country code of the address. Required.
    :vartype country_code: str
    """

    street_number: Optional[str] = rest_field(
        name="streetNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Street Number of the address."""
    street_name: Optional[str] = rest_field(
        name="streetName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Street Name of the address."""
    locality: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Locality of the address."""
    city: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """City of the address."""
    state_or_province: Optional[str] = rest_field(
        name="stateOrProvince", visibility=["read", "create", "update", "delete", "query"]
    )
    """State or province of the address."""
    postal_code: Optional[str] = rest_field(
        name="postalCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Postal code of the address."""
    country_code: str = rest_field(name="countryCode", visibility=["read", "create", "update", "delete", "query"])
    """Country code of the address. Required."""

    @overload
    def __init__(
        self,
        *,
        country_code: str,
        street_number: Optional[str] = None,
        street_name: Optional[str] = None,
        locality: Optional[str] = None,
        city: Optional[str] = None,
        state_or_province: Optional[str] = None,
        postal_code: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LocalRepresentative(_Model):
    """Model defining a local representative for a country/region.

    :ivar country_code: Country code for the country/region the local representative is
     representing. Required.
    :vartype country_code: str
    :ivar representative: Local representative for this country/region. Required.
    :vartype representative: ~azure.mgmt.programmableconnectivity.models.Person
    """

    country_code: str = rest_field(name="countryCode", visibility=["read", "create", "update", "delete", "query"])
    """Country code for the country/region the local representative is representing. Required."""
    representative: "_models.Person" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Local representative for this country/region. Required."""

    @overload
    def __init__(
        self,
        *,
        country_code: str,
        representative: "_models.Person",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MarketplaceProperties(_Model):
    """Azure marketplace properties for a plan.

    :ivar offer_id: Azure marketplace Offer ID for this plan.
    :vartype offer_id: str
    :ivar publisher_id: Azure marketplace Publisher ID for this plan.
    :vartype publisher_id: str
    :ivar plan_id: Azure marketplace Plan ID for this plan.
    :vartype plan_id: str
    :ivar plan_terms_and_conditions_links: Links to the Terms and Conditions of the Plan that must
     be accepted to create an
     associated Operator Api Connection. Required.
    :vartype plan_terms_and_conditions_links: list[str]
    """

    offer_id: Optional[str] = rest_field(name="offerId", visibility=["read", "create", "update", "delete", "query"])
    """Azure marketplace Offer ID for this plan."""
    publisher_id: Optional[str] = rest_field(
        name="publisherId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure marketplace Publisher ID for this plan."""
    plan_id: Optional[str] = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """Azure marketplace Plan ID for this plan."""
    plan_terms_and_conditions_links: List[str] = rest_field(name="planTermsAndConditionsLinks", visibility=["read"])
    """Links to the Terms and Conditions of the Plan that must be accepted to create an
     associated Operator Api Connection. Required."""

    @overload
    def __init__(
        self,
        *,
        offer_id: Optional[str] = None,
        publisher_id: Optional[str] = None,
        plan_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.programmableconnectivity.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.programmableconnectivity.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.programmableconnectivity.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OperatorApiConnection(TrackedResource):
    """A Programmable Connectivity Operator API Connection resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties:
     ~azure.mgmt.programmableconnectivity.models.OperatorApiConnectionProperties
    """

    properties: Optional["_models.OperatorApiConnectionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.OperatorApiConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperatorApiConnectionProperties(_Model):
    """Operator API Connection resource properties that cannot be updated once a resource has been
    created.

    :ivar operator_api_plan_id: Reference to the Operator API Plan Resource ID. Required.
    :vartype operator_api_plan_id: str
    :ivar gateway_id: Reference to the APC Gateway resource ID. Required.
    :vartype gateway_id: str
    :ivar operator_name: Name of the Operator in the linked Operator API Plan belongs to.
    :vartype operator_name: str
    :ivar camara_api_name: The Network API for the current operator in the country/region provided
     in the linked Operator API Plan.
    :vartype camara_api_name: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.programmableconnectivity.models.ProvisioningState
    :ivar status: The status of the OperatorApiConnection resource.
    :vartype status: ~azure.mgmt.programmableconnectivity.models.Status
    :ivar plan_terms_and_conditions_accepted: Whether the caller has accepted the Terms and
     Conditions of the associated Operator API Plan.
     After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     have been accepted.

     Must be set to True, as the Terms and Conditions must be accepted. Required.
    :vartype plan_terms_and_conditions_accepted: bool
    :ivar plan_terms_and_conditions_links: Links to the Terms and Conditions of the Operator API
     Plan that were accepted on creation.
    :vartype plan_terms_and_conditions_links: list[str]
    :ivar purposes: The purpose for which the Application will use the API. Max Items 1 currently
     as Operators do not support multiple. Required.
    :vartype purposes: list[str or ~azure.mgmt.programmableconnectivity.models.Purpose]
    :ivar purpose_reason: Explanation of the reason that justifies the purpose: specifically why is
     the API used for the application's use case. Required.
    :vartype purpose_reason: str
    :ivar data_processing_list: List of ways the data returned on this API is processed. Required.
    :vartype data_processing_list: list[~azure.mgmt.programmableconnectivity.models.DataProcessing]
    """

    operator_api_plan_id: str = rest_field(name="operatorApiPlanId", visibility=["read", "create", "update"])
    """Reference to the Operator API Plan Resource ID. Required."""
    gateway_id: str = rest_field(name="gatewayId", visibility=["read", "create"])
    """Reference to the APC Gateway resource ID. Required."""
    operator_name: Optional[str] = rest_field(name="operatorName", visibility=["read"])
    """Name of the Operator in the linked Operator API Plan belongs to."""
    camara_api_name: Optional[str] = rest_field(name="camaraApiName", visibility=["read"])
    """The Network API for the current operator in the country/region provided in the linked Operator
     API Plan."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    status: Optional["_models.Status"] = rest_field(visibility=["read"])
    """The status of the OperatorApiConnection resource."""
    plan_terms_and_conditions_accepted: bool = rest_field(
        name="planTermsAndConditionsAccepted", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
     After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     have been accepted.
     
     Must be set to True, as the Terms and Conditions must be accepted. Required."""
    plan_terms_and_conditions_links: Optional[List[str]] = rest_field(
        name="planTermsAndConditionsLinks", visibility=["read"]
    )
    """Links to the Terms and Conditions of the Operator API Plan that were accepted on creation."""
    purposes: List[Union[str, "_models.Purpose"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The purpose for which the Application will use the API. Max Items 1 currently as Operators do
     not support multiple. Required."""
    purpose_reason: str = rest_field(name="purposeReason", visibility=["read", "create", "update", "delete", "query"])
    """Explanation of the reason that justifies the purpose: specifically why is the API used for the
     application's use case. Required."""
    data_processing_list: List["_models.DataProcessing"] = rest_field(
        name="dataProcessingList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of ways the data returned on this API is processed. Required."""

    @overload
    def __init__(
        self,
        *,
        operator_api_plan_id: str,
        gateway_id: str,
        plan_terms_and_conditions_accepted: bool,
        purposes: List[Union[str, "_models.Purpose"]],
        purpose_reason: str,
        data_processing_list: List["_models.DataProcessing"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperatorApiConnectionUpdate(_Model):
    """The type used for update operations of the OperatorApiConnection.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties:
     ~azure.mgmt.programmableconnectivity.models.OperatorApiConnectionUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.OperatorApiConnectionUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.OperatorApiConnectionUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperatorApiConnectionUpdateProperties(_Model):
    """The updatable properties of the OperatorApiConnection.

    :ivar operator_api_plan_id: Reference to the Operator API Plan Resource ID.
    :vartype operator_api_plan_id: str
    :ivar plan_terms_and_conditions_accepted: Whether the caller has accepted the Terms and
     Conditions of the associated Operator API Plan.
     After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     have been accepted.

     Must be set to True, as the Terms and Conditions must be accepted.
    :vartype plan_terms_and_conditions_accepted: bool
    :ivar purposes: The purpose for which the Application will use the API. Max Items 1 currently
     as Operators do not support multiple.
    :vartype purposes: list[str or ~azure.mgmt.programmableconnectivity.models.Purpose]
    :ivar purpose_reason: Explanation of the reason that justifies the purpose: specifically why is
     the API used for the application's use case.
    :vartype purpose_reason: str
    :ivar data_processing_list: List of ways the data returned on this API is processed.
    :vartype data_processing_list: list[~azure.mgmt.programmableconnectivity.models.DataProcessing]
    """

    operator_api_plan_id: Optional[str] = rest_field(name="operatorApiPlanId", visibility=["read", "create", "update"])
    """Reference to the Operator API Plan Resource ID."""
    plan_terms_and_conditions_accepted: Optional[bool] = rest_field(
        name="planTermsAndConditionsAccepted", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
     After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     have been accepted.
     
     Must be set to True, as the Terms and Conditions must be accepted."""
    purposes: Optional[List[Union[str, "_models.Purpose"]]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The purpose for which the Application will use the API. Max Items 1 currently as Operators do
     not support multiple."""
    purpose_reason: Optional[str] = rest_field(
        name="purposeReason", visibility=["read", "create", "update", "delete", "query"]
    )
    """Explanation of the reason that justifies the purpose: specifically why is the API used for the
     application's use case."""
    data_processing_list: Optional[List["_models.DataProcessing"]] = rest_field(
        name="dataProcessingList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of ways the data returned on this API is processed."""

    @overload
    def __init__(
        self,
        *,
        operator_api_plan_id: Optional[str] = None,
        plan_terms_and_conditions_accepted: Optional[bool] = None,
        purposes: Optional[List[Union[str, "_models.Purpose"]]] = None,
        purpose_reason: Optional[str] = None,
        data_processing_list: Optional[List["_models.DataProcessing"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    """


class OperatorApiPlan(ProxyResource):
    """A Programmable Connectivity Operator API Plans resource. This is a readonly resource that
    indicates which Operator Network APIs are available in the user's subscription.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.programmableconnectivity.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.programmableconnectivity.models.OperatorApiPlanProperties
    """

    properties: Optional["_models.OperatorApiPlanProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.OperatorApiPlanProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperatorApiPlanProperties(_Model):
    """Operator API Plan properties.

    :ivar operator_name: Name of the Operator this plan belongs to.
    :vartype operator_name: str
    :ivar camara_api_name: Standardized Network API name defined by CAMARA specifications.
    :vartype camara_api_name: str
    :ivar supported_locations: List of Azure regions where this offer is supported.
    :vartype supported_locations: list[str]
    :ivar operator_regions: List of country/region names where this plan is being supported by the
     Operator.
    :vartype operator_regions: list[str]
    :ivar markets: List of country/region names where this plan is being supported by Azure
     Marketplace.
    :vartype markets: list[str]
    :ivar limits: The limits, if any, will be imposed by the operator.
    :vartype limits: str
    :ivar marketplace_properties: Azure marketplace properties for this plan.
    :vartype marketplace_properties:
     ~azure.mgmt.programmableconnectivity.models.MarketplaceProperties
    :ivar provisioning_state: The status of the last operation on the Gateway resource. Known
     values are: "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and
     "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.programmableconnectivity.models.ProvisioningState
    """

    operator_name: Optional[str] = rest_field(
        name="operatorName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the Operator this plan belongs to."""
    camara_api_name: Optional[str] = rest_field(
        name="camaraApiName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Standardized Network API name defined by CAMARA specifications."""
    supported_locations: Optional[List[str]] = rest_field(
        name="supportedLocations", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Azure regions where this offer is supported."""
    operator_regions: Optional[List[str]] = rest_field(
        name="operatorRegions", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of country/region names where this plan is being supported by the Operator."""
    markets: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of country/region names where this plan is being supported by Azure Marketplace."""
    limits: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The limits, if any, will be imposed by the operator."""
    marketplace_properties: Optional["_models.MarketplaceProperties"] = rest_field(
        name="marketplaceProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure marketplace properties for this plan."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation on the Gateway resource. Known values are: \"Succeeded\",
     \"Failed\", \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        operator_name: Optional[str] = None,
        camara_api_name: Optional[str] = None,
        supported_locations: Optional[List[str]] = None,
        operator_regions: Optional[List[str]] = None,
        markets: Optional[List[str]] = None,
        limits: Optional[str] = None,
        marketplace_properties: Optional["_models.MarketplaceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Person(_Model):
    """Model defining a contactable person.

    :ivar family_name: Family name of the contactable person. Required.
    :vartype family_name: str
    :ivar given_name: Given name of the contactable person. Required.
    :vartype given_name: str
    :ivar email_address: Email address of the contactable person. Required.
    :vartype email_address: str
    """

    family_name: str = rest_field(name="familyName", visibility=["read", "create", "update", "delete", "query"])
    """Family name of the contactable person. Required."""
    given_name: str = rest_field(name="givenName", visibility=["read", "create", "update", "delete", "query"])
    """Given name of the contactable person. Required."""
    email_address: str = rest_field(name="emailAddress", visibility=["read", "create", "update", "delete", "query"])
    """Email address of the contactable person. Required."""

    @overload
    def __init__(
        self,
        *,
        family_name: str,
        given_name: str,
        email_address: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Status(_Model):
    """Description of the current status of the OperatorApiConnection resource.

    :ivar state: Current state of the OperatorApiConnection resource.
    :vartype state: str
    :ivar reason: Explanation of the current state of the OperatorApiConnection resource.
    :vartype reason: str
    """

    state: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Current state of the OperatorApiConnection resource."""
    reason: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Explanation of the current state of the OperatorApiConnection resource."""

    @overload
    def __init__(
        self,
        *,
        state: Optional[str] = None,
        reason: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.programmableconnectivity.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or
     ~azure.mgmt.programmableconnectivity.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
