# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class ActivityEmissionOutput(_model_base.Model):
    """Output emission of the activity.

    :ivar id: Activity ID. Required.
    :vartype id: str
    :ivar emissions: Activity emissions for the activity. Required.
    :vartype emissions: list[~azure.sustainabilityservices.models.GhgEmissions]
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Activity ID. Required."""
    emissions: List["_models.GhgEmissions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Activity emissions for the activity. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        emissions: List["_models.GhgEmissions"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CalculationErrorDetails(_model_base.Model):
    """Details of the error in calculation.

    :ivar activity_id: Activity ID. Required.
    :vartype activity_id: str
    :ivar activity_name: Activity name. Required.
    :vartype activity_name: str
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar code: Error code. Required.
    :vartype code: str
    """

    activity_id: str = rest_field(name="activityId", visibility=["read", "create", "update", "delete", "query"])
    """Activity ID. Required."""
    activity_name: str = rest_field(name="activityName", visibility=["read", "create", "update", "delete", "query"])
    """Activity name. Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error message. Required."""
    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error code. Required."""

    @overload
    def __init__(
        self,
        *,
        activity_id: str,
        activity_name: str,
        message: str,
        code: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CalculationModel(_model_base.Model):
    """Logical representation of the emission calculation that runs the calculation methodology
    bringing activity data and emission factors together.

    :ivar entity_name: Entity name. Required.
    :vartype entity_name: str
    :ivar calculation_model_id: Calculation model ID. Required.
    :vartype calculation_model_id: str
    :ivar calculation_flow_json: Calculation flow json.
    :vartype calculation_flow_json: str
    :ivar calculation_method: Calculation method or model used to calculate emissions, as
     recommended by protocol.
    :vartype calculation_method: str
    :ivar data_definition_id: Data definition of source.
    :vartype data_definition_id: ~azure.sustainabilityservices.models.LookupField
    :ivar documentation_reference: Document reference.
    :vartype documentation_reference: str
    :ivar emission_calculation_id: Emission calculation ID. Required.
    :vartype emission_calculation_id: str
    :ivar emission_source: Emission source. Required.
    :vartype emission_source: ~azure.sustainabilityservices.models.LookupField
    :ivar model_json_version: Model JSON version.
    :vartype model_json_version: str
    :ivar name: Calculation model name. Required.
    :vartype name: str
    :ivar sustainabilitymodule: Sustainability module.
    :vartype sustainabilitymodule: ~azure.sustainabilityservices.models.LookupField
    :ivar type: Model type. Required.
    :vartype type: str
    """

    entity_name: str = rest_field(name="entityName", visibility=["read", "create", "update", "delete", "query"])
    """Entity name. Required."""
    calculation_model_id: str = rest_field(name="calculationModelId", visibility=["read"])
    """Calculation model ID. Required."""
    calculation_flow_json: Optional[str] = rest_field(
        name="calculationFlowJson", visibility=["read", "create", "update", "delete", "query"]
    )
    """Calculation flow json."""
    calculation_method: Optional[str] = rest_field(
        name="calculationMethod", visibility=["read", "create", "update", "delete", "query"]
    )
    """Calculation method or model used to calculate emissions, as recommended by protocol."""
    data_definition_id: Optional["_models.LookupField"] = rest_field(
        name="dataDefinitionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data definition of source."""
    documentation_reference: Optional[str] = rest_field(
        name="documentationReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """Document reference."""
    emission_calculation_id: str = rest_field(
        name="emissionCalculationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Emission calculation ID. Required."""
    emission_source: "_models.LookupField" = rest_field(
        name="emissionSource", visibility=["read", "create", "update", "delete", "query"]
    )
    """Emission source. Required."""
    model_json_version: Optional[str] = rest_field(
        name="modelJsonVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Model JSON version."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Calculation model name. Required."""
    sustainabilitymodule: Optional["_models.LookupField"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Sustainability module."""
    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Model type. Required."""

    @overload
    def __init__(
        self,
        *,
        entity_name: str,
        emission_calculation_id: str,
        emission_source: "_models.LookupField",
        name: str,
        type: str,
        calculation_flow_json: Optional[str] = None,
        calculation_method: Optional[str] = None,
        data_definition_id: Optional["_models.LookupField"] = None,
        documentation_reference: Optional[str] = None,
        model_json_version: Optional[str] = None,
        sustainabilitymodule: Optional["_models.LookupField"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CalculationSummary(_model_base.Model):
    """Describes the summary of the calculation.

    :ivar status: Calculation status. Required. Known values are: "Succeeded", "Failed", and
     "CompletedWithErrors".
    :vartype status: str or ~azure.sustainabilityservices.models.CalculationStatusEnum
    :ivar successful_activities: Total number of successful activities. Required.
    :vartype successful_activities: int
    :ivar failed_activities: Total number of failed activities. Required.
    :vartype failed_activities: int
    :ivar excluded_activities: Total number of excluded activities. Required.
    :vartype excluded_activities: int
    :ivar processed_activities: Total number of processed activities. Required.
    :vartype processed_activities: int
    """

    status: Union[str, "_models.CalculationStatusEnum"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Calculation status. Required. Known values are: \"Succeeded\", \"Failed\", and
     \"CompletedWithErrors\"."""
    successful_activities: int = rest_field(
        name="successfulActivities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Total number of successful activities. Required."""
    failed_activities: int = rest_field(
        name="failedActivities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Total number of failed activities. Required."""
    excluded_activities: int = rest_field(
        name="excludedActivities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Total number of excluded activities. Required."""
    processed_activities: int = rest_field(
        name="processedActivities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Total number of processed activities. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.CalculationStatusEnum"],
        successful_activities: int,
        failed_activities: int,
        excluded_activities: int,
        processed_activities: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EmissionActivity(_model_base.Model):
    """Activity.

    :ivar id: Activity ID. Required.
    :vartype id: str
    :ivar activity_data: Activity data. Required.
    :vartype activity_data: dict[str, any]
    """

    id: str = rest_field(visibility=["read", "create"])
    """Activity ID. Required."""
    activity_data: Dict[str, Any] = rest_field(
        name="activityData", visibility=["read", "create", "update", "delete", "query"]
    )
    """Activity data. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        activity_data: Dict[str, Any],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EmissionCalculationResult(_model_base.Model):
    """The output of a calculation.

    :ivar summary: Calculation summary. Required.
    :vartype summary: ~azure.sustainabilityservices.models.CalculationSummary
    :ivar error_details: Calculation error details. Required.
    :vartype error_details: list[~azure.sustainabilityservices.models.CalculationErrorDetails]
    :ivar activity_emission_output: Calculated emissions from the activities. Required.
    :vartype activity_emission_output:
     list[~azure.sustainabilityservices.models.ActivityEmissionOutput]
    """

    summary: "_models.CalculationSummary" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Calculation summary. Required."""
    error_details: List["_models.CalculationErrorDetails"] = rest_field(
        name="errorDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Calculation error details. Required."""
    activity_emission_output: List["_models.ActivityEmissionOutput"] = rest_field(
        name="activityEmissionOutput", visibility=["read", "create", "update", "delete", "query"]
    )
    """Calculated emissions from the activities. Required."""

    @overload
    def __init__(
        self,
        *,
        summary: "_models.CalculationSummary",
        error_details: List["_models.CalculationErrorDetails"],
        activity_emission_output: List["_models.ActivityEmissionOutput"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EmissionFactor(_model_base.Model):
    """Conversion factor to convert quantities in activity data into greenhouse gas emissions.

    :ivar entity_name: Entity name. Required.
    :vartype entity_name: str
    :ivar factor_library: Factor library to which the emission factor belongs to. Required.
    :vartype factor_library: ~azure.sustainabilityservices.models.LookupField
    :ivar ch4: CH4 factor value.
    :vartype ch4: float
    :ivar ch4_unit: Unit for CH4 factor value.
    :vartype ch4_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar co2: CO2 factor value.
    :vartype co2: float
    :ivar co2_unit: Unit for CO2 factor value.
    :vartype co2_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar co2_e: CO2e factor value.
    :vartype co2_e: float
    :ivar co2_e_unit: Unit for CO2e factor value.
    :vartype co2_e_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar documentation_reference: Documentation reference.
    :vartype documentation_reference: str
    :ivar emission_factor_id: Emission factor ID. Required.
    :vartype emission_factor_id: str
    :ivar id: ID. Required.
    :vartype id: str
    :ivar hfcs: HFCs factor value.
    :vartype hfcs: float
    :ivar hfcs_unit: Unit for HFCs factor value.
    :vartype hfcs_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar is_biofuel: Is biofuel.
    :vartype is_biofuel: bool
    :ivar name: Emission factor name. Required.
    :vartype name: str
    :ivar nf3: NF3 factor value.
    :vartype nf3: float
    :ivar nf3_unit: Unit for NF3 factor value.
    :vartype nf3_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar n2_o: NO2 factor value.
    :vartype n2_o: float
    :ivar n2_o_unit: Unit for N2O factor value.
    :vartype n2_o_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar other_ghgs: Other GHG factor value.
    :vartype other_ghgs: float
    :ivar other_ghgs_unit: Unit for other GHGs factor value.
    :vartype other_ghgs_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar pfcs: PFCs factor value.
    :vartype pfcs: float
    :ivar pfcs_unit: Unit for PFCs factor value.
    :vartype pfcs_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar sf6: SF6 factor value.
    :vartype sf6: float
    :ivar sf6_unit: Unit for SF6 factor value.
    :vartype sf6_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar subtype: Subtype.
    :vartype subtype: str
    :ivar type: Type.
    :vartype type: str
    :ivar unit: Unit.
    :vartype unit: ~azure.sustainabilityservices.models.LookupField
    """

    entity_name: str = rest_field(name="entityName", visibility=["read", "create", "update", "delete", "query"])
    """Entity name. Required."""
    factor_library: "_models.LookupField" = rest_field(
        name="factorLibrary", visibility=["read", "create", "update", "delete", "query"]
    )
    """Factor library to which the emission factor belongs to. Required."""
    ch4: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CH4 factor value."""
    ch4_unit: Optional["_models.LookupField"] = rest_field(
        name="ch4Unit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for CH4 factor value."""
    co2: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CO2 factor value."""
    co2_unit: Optional["_models.LookupField"] = rest_field(
        name="co2Unit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for CO2 factor value."""
    co2_e: Optional[float] = rest_field(name="co2e", visibility=["read", "create", "update", "delete", "query"])
    """CO2e factor value."""
    co2_e_unit: Optional["_models.LookupField"] = rest_field(
        name="co2eUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for CO2e factor value."""
    documentation_reference: Optional[str] = rest_field(
        name="documentationReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """Documentation reference."""
    emission_factor_id: str = rest_field(name="emissionFactorId", visibility=["read"])
    """Emission factor ID. Required."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID. Required."""
    hfcs: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """HFCs factor value."""
    hfcs_unit: Optional["_models.LookupField"] = rest_field(
        name="hfcsUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for HFCs factor value."""
    is_biofuel: Optional[bool] = rest_field(
        name="isBiofuel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Is biofuel."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Emission factor name. Required."""
    nf3: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """NF3 factor value."""
    nf3_unit: Optional["_models.LookupField"] = rest_field(
        name="nf3Unit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for NF3 factor value."""
    n2_o: Optional[float] = rest_field(name="n2o", visibility=["read", "create", "update", "delete", "query"])
    """NO2 factor value."""
    n2_o_unit: Optional["_models.LookupField"] = rest_field(
        name="n2oUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for N2O factor value."""
    other_ghgs: Optional[float] = rest_field(
        name="otherGhgs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Other GHG factor value."""
    other_ghgs_unit: Optional["_models.LookupField"] = rest_field(
        name="otherGhgsUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for other GHGs factor value."""
    pfcs: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """PFCs factor value."""
    pfcs_unit: Optional["_models.LookupField"] = rest_field(
        name="pfcsUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for PFCs factor value."""
    sf6: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """SF6 factor value."""
    sf6_unit: Optional["_models.LookupField"] = rest_field(
        name="sf6Unit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for SF6 factor value."""
    subtype: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Subtype."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type."""
    unit: Optional["_models.LookupField"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unit."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        entity_name: str,
        factor_library: "_models.LookupField",
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        ch4: Optional[float] = None,
        ch4_unit: Optional["_models.LookupField"] = None,
        co2: Optional[float] = None,
        co2_unit: Optional["_models.LookupField"] = None,
        co2_e: Optional[float] = None,
        co2_e_unit: Optional["_models.LookupField"] = None,
        documentation_reference: Optional[str] = None,
        hfcs: Optional[float] = None,
        hfcs_unit: Optional["_models.LookupField"] = None,
        is_biofuel: Optional[bool] = None,
        nf3: Optional[float] = None,
        nf3_unit: Optional["_models.LookupField"] = None,
        n2_o: Optional[float] = None,
        n2_o_unit: Optional["_models.LookupField"] = None,
        other_ghgs: Optional[float] = None,
        other_ghgs_unit: Optional["_models.LookupField"] = None,
        pfcs: Optional[float] = None,
        pfcs_unit: Optional["_models.LookupField"] = None,
        sf6: Optional[float] = None,
        sf6_unit: Optional["_models.LookupField"] = None,
        subtype: Optional[str] = None,
        type: Optional[str] = None,
        unit: Optional["_models.LookupField"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EntityRecord(_model_base.Model):
    """Entity record.

    :ivar id: Record ID. Required.
    :vartype id: str
    :ivar data: Entity data. Required.
    :vartype data: dict[str, any]
    """

    id: str = rest_field(visibility=["read"])
    """Record ID. Required."""
    data: Dict[str, Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Entity data. Required."""

    @overload
    def __init__(
        self,
        *,
        data: Dict[str, Any],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EstimationFactor(_model_base.Model):
    """Estimation factors are used to convert proxy data into activity data that can be used with an
    emission factor. Typical examples are square footage of real estate to convert to energy or
    refrigerants, and the number of nights of a hotel stay.

    :ivar entity_name: Entity name. Required.
    :vartype entity_name: str
    :ivar id: ID. Required.
    :vartype id: str
    :ivar documentation_reference: Document reference.
    :vartype documentation_reference: str
    :ivar estimation_factor_id: Estimation factor ID. Required.
    :vartype estimation_factor_id: str
    :ivar factor_library: Factor library which the estimation factor belongs to. Required.
    :vartype factor_library: ~azure.sustainabilityservices.models.LookupField
    :ivar factor_value: Estimation factor value. Required.
    :vartype factor_value: float
    :ivar factor_value_unit: Unit for factor value. Required.
    :vartype factor_value_unit: ~azure.sustainabilityservices.models.LookupField
    :ivar name: Estimation factor name. Required.
    :vartype name: str
    :ivar subtype: Subtype.
    :vartype subtype: str
    :ivar type: Type.
    :vartype type: str
    :ivar unit: Unit. Required.
    :vartype unit: ~azure.sustainabilityservices.models.LookupField
    """

    entity_name: str = rest_field(name="entityName", visibility=["read", "create", "update", "delete", "query"])
    """Entity name. Required."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID. Required."""
    documentation_reference: Optional[str] = rest_field(
        name="documentationReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """Document reference."""
    estimation_factor_id: str = rest_field(name="estimationFactorId", visibility=["read"])
    """Estimation factor ID. Required."""
    factor_library: "_models.LookupField" = rest_field(
        name="factorLibrary", visibility=["read", "create", "update", "delete", "query"]
    )
    """Factor library which the estimation factor belongs to. Required."""
    factor_value: float = rest_field(name="factorValue", visibility=["read", "create", "update", "delete", "query"])
    """Estimation factor value. Required."""
    factor_value_unit: "_models.LookupField" = rest_field(
        name="factorValueUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unit for factor value. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Estimation factor name. Required."""
    subtype: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Subtype."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type."""
    unit: "_models.LookupField" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unit. Required."""

    @overload
    def __init__(
        self,
        *,
        entity_name: str,
        id: str,  # pylint: disable=redefined-builtin
        factor_library: "_models.LookupField",
        factor_value: float,
        factor_value_unit: "_models.LookupField",
        name: str,
        unit: "_models.LookupField",
        documentation_reference: Optional[str] = None,
        subtype: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FactorLibrary(_model_base.Model):
    """Represents collection of emission and estimation factors.

    :ivar factor_library_id: Factor library id. Required.
    :vartype factor_library_id: str
    :ivar name: Factor library name. Required.
    :vartype name: str
    :ivar library_type: Type of factor library: estimation or emission. Required.
    :vartype library_type: str
    :ivar attribution: Appropriate acknowledgment to the original content creator when utilizing or
     distributing their work within the application.
    :vartype attribution: str
    :ivar version: Factor library version.
    :vartype version: str
    :ivar description: Description of the library.
    :vartype description: str
    :ivar date_published: Date published.
    :vartype date_published: str
    :ivar documentation_reference: Documentation reference.
    :vartype documentation_reference: str
    """

    factor_library_id: str = rest_field(name="factorLibraryId", visibility=["read"])
    """Factor library id. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Factor library name. Required."""
    library_type: str = rest_field(name="libraryType", visibility=["read", "create", "update", "delete", "query"])
    """Type of factor library: estimation or emission. Required."""
    attribution: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Appropriate acknowledgment to the original content creator when utilizing or distributing their
     work within the application."""
    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Factor library version."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the library."""
    date_published: Optional[str] = rest_field(
        name="datePublished", visibility=["read", "create", "update", "delete", "query"]
    )
    """Date published."""
    documentation_reference: Optional[str] = rest_field(
        name="documentationReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """Documentation reference."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        library_type: str,
        attribution: Optional[str] = None,
        version: Optional[str] = None,
        description: Optional[str] = None,
        date_published: Optional[str] = None,
        documentation_reference: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FactorMapping(_model_base.Model):
    """Factor mapping.

    :ivar factor_mapping_id: Factor mapping id. Required.
    :vartype factor_mapping_id: str
    :ivar factor_library: Factor library which this mapping belongs to. Required.
    :vartype factor_library: ~azure.sustainabilityservices.models.LookupField
    :ivar name: Name. Required.
    :vartype name: str
    :ivar factor: Factor associated with the factor mapping. Required.
    :vartype factor: ~azure.sustainabilityservices.models.LookupField
    :ivar reference_data1: Reference data 1. Required.
    :vartype reference_data1: ~azure.sustainabilityservices.models.LookupField
    :ivar reference_data2: Reference data 2.
    :vartype reference_data2: ~azure.sustainabilityservices.models.LookupField
    :ivar reference_data3: Reference data 3.
    :vartype reference_data3: ~azure.sustainabilityservices.models.LookupField
    :ivar reference_data4: Reference data 4.
    :vartype reference_data4: ~azure.sustainabilityservices.models.LookupField
    """

    factor_mapping_id: str = rest_field(name="factorMappingId", visibility=["read"])
    """Factor mapping id. Required."""
    factor_library: "_models.LookupField" = rest_field(
        name="factorLibrary", visibility=["read", "create", "update", "delete", "query"]
    )
    """Factor library which this mapping belongs to. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name. Required."""
    factor: "_models.LookupField" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Factor associated with the factor mapping. Required."""
    reference_data1: "_models.LookupField" = rest_field(
        name="referenceData1", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference data 1. Required."""
    reference_data2: Optional["_models.LookupField"] = rest_field(
        name="referenceData2", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference data 2."""
    reference_data3: Optional["_models.LookupField"] = rest_field(
        name="referenceData3", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference data 3."""
    reference_data4: Optional["_models.LookupField"] = rest_field(
        name="referenceData4", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference data 4."""

    @overload
    def __init__(
        self,
        *,
        factor_library: "_models.LookupField",
        name: str,
        factor: "_models.LookupField",
        reference_data1: "_models.LookupField",
        reference_data2: Optional["_models.LookupField"] = None,
        reference_data3: Optional["_models.LookupField"] = None,
        reference_data4: Optional["_models.LookupField"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GhgEmissions(_model_base.Model):
    """Emissions for the activity.

    :ivar ch4: CH4 emission.
    :vartype ch4: float
    :ivar ch4_unit: CH4 emissions unit.
    :vartype ch4_unit: str
    :ivar co2: CO2 emissions.
    :vartype co2: float
    :ivar co2_unit: CO2 emissions unit.
    :vartype co2_unit: str
    :ivar co2_e: CO2e emissions.
    :vartype co2_e: float
    :ivar co2_e_unit: CO2e emissions unit.
    :vartype co2_e_unit: str
    :ivar co2_emt: CO2emt emissions.
    :vartype co2_emt: float
    :ivar hfcs: HFCs emissions.
    :vartype hfcs: float
    :ivar hfcs_unit: HFCs emissions unit.
    :vartype hfcs_unit: str
    :ivar n2_o: N2O emissions.
    :vartype n2_o: float
    :ivar n2_o_unit: N2O emissions unit.
    :vartype n2_o_unit: str
    :ivar nf3: NF3 emissions.
    :vartype nf3: float
    :ivar nf3_unit: NF3 emissions unit.
    :vartype nf3_unit: str
    :ivar pfcs: PFCs emissions.
    :vartype pfcs: float
    :ivar pfcs_unit: PFCs emissions unit.
    :vartype pfcs_unit: str
    :ivar other_ghgs: Other GHG emissions.
    :vartype other_ghgs: float
    :ivar other_ghgs_unit: Other GHG emissions unit.
    :vartype other_ghgs_unit: str
    :ivar sf6: SF6 emissions.
    :vartype sf6: float
    :ivar sf6_unit: SF6 emissions unit.
    :vartype sf6_unit: str
    :ivar is_market_based: Is market based.
    :vartype is_market_based: bool
    :ivar is_biogenic: Is biogenic.
    :vartype is_biogenic: bool
    :ivar emission_calculation_model: Emission calculation model used for the calculation.
    :vartype emission_calculation_model: str
    :ivar calculation_library: Factor library used for the calculation.
    :vartype calculation_library: str
    :ivar emission_factor: Emission factor used for the calculation.
    :vartype emission_factor: str
    :ivar adjusted_actual_quantity: Actual quantity of the activity responsible for the emission.
     For example, the actual quantity for a business trip involving a hotel stay might be the number
     of nights stayed multiplied by the estimation factor.
    :vartype adjusted_actual_quantity: str
    :ivar adjusted_actual_quantity_unit: Actual quantity unit.
    :vartype adjusted_actual_quantity_unit: str
    """

    ch4: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CH4 emission."""
    ch4_unit: Optional[str] = rest_field(name="ch4Unit", visibility=["read", "create", "update", "delete", "query"])
    """CH4 emissions unit."""
    co2: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CO2 emissions."""
    co2_unit: Optional[str] = rest_field(name="co2Unit", visibility=["read", "create", "update", "delete", "query"])
    """CO2 emissions unit."""
    co2_e: Optional[float] = rest_field(name="co2e", visibility=["read", "create", "update", "delete", "query"])
    """CO2e emissions."""
    co2_e_unit: Optional[str] = rest_field(name="co2eUnit", visibility=["read", "create", "update", "delete", "query"])
    """CO2e emissions unit."""
    co2_emt: Optional[float] = rest_field(name="co2emt", visibility=["read", "create", "update", "delete", "query"])
    """CO2emt emissions."""
    hfcs: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """HFCs emissions."""
    hfcs_unit: Optional[str] = rest_field(name="hfcsUnit", visibility=["read", "create", "update", "delete", "query"])
    """HFCs emissions unit."""
    n2_o: Optional[float] = rest_field(name="n2o", visibility=["read", "create", "update", "delete", "query"])
    """N2O emissions."""
    n2_o_unit: Optional[str] = rest_field(name="n2oUnit", visibility=["read", "create", "update", "delete", "query"])
    """N2O emissions unit."""
    nf3: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """NF3 emissions."""
    nf3_unit: Optional[str] = rest_field(name="nf3Unit", visibility=["read", "create", "update", "delete", "query"])
    """NF3 emissions unit."""
    pfcs: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """PFCs emissions."""
    pfcs_unit: Optional[str] = rest_field(name="pfcsUnit", visibility=["read", "create", "update", "delete", "query"])
    """PFCs emissions unit."""
    other_ghgs: Optional[float] = rest_field(
        name="otherGhgs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Other GHG emissions."""
    other_ghgs_unit: Optional[str] = rest_field(
        name="otherGhgsUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Other GHG emissions unit."""
    sf6: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """SF6 emissions."""
    sf6_unit: Optional[str] = rest_field(name="sf6Unit", visibility=["read", "create", "update", "delete", "query"])
    """SF6 emissions unit."""
    is_market_based: Optional[bool] = rest_field(
        name="isMarketBased", visibility=["read", "create", "update", "delete", "query"]
    )
    """Is market based."""
    is_biogenic: Optional[bool] = rest_field(
        name="isBiogenic", visibility=["read", "create", "update", "delete", "query"]
    )
    """Is biogenic."""
    emission_calculation_model: Optional[str] = rest_field(
        name="emissionCalculationModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Emission calculation model used for the calculation."""
    calculation_library: Optional[str] = rest_field(
        name="calculationLibrary", visibility=["read", "create", "update", "delete", "query"]
    )
    """Factor library used for the calculation."""
    emission_factor: Optional[str] = rest_field(
        name="emissionFactor", visibility=["read", "create", "update", "delete", "query"]
    )
    """Emission factor used for the calculation."""
    adjusted_actual_quantity: Optional[str] = rest_field(
        name="adjustedActualQuantity", visibility=["read", "create", "update", "delete", "query"]
    )
    """Actual quantity of the activity responsible for the emission. For example, the actual quantity
     for a business trip involving a hotel stay might be the number of nights stayed multiplied by
     the estimation factor."""
    adjusted_actual_quantity_unit: Optional[str] = rest_field(
        name="adjustedActualQuantityUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Actual quantity unit."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        ch4: Optional[float] = None,
        ch4_unit: Optional[str] = None,
        co2: Optional[float] = None,
        co2_unit: Optional[str] = None,
        co2_e: Optional[float] = None,
        co2_e_unit: Optional[str] = None,
        co2_emt: Optional[float] = None,
        hfcs: Optional[float] = None,
        hfcs_unit: Optional[str] = None,
        n2_o: Optional[float] = None,
        n2_o_unit: Optional[str] = None,
        nf3: Optional[float] = None,
        nf3_unit: Optional[str] = None,
        pfcs: Optional[float] = None,
        pfcs_unit: Optional[str] = None,
        other_ghgs: Optional[float] = None,
        other_ghgs_unit: Optional[str] = None,
        sf6: Optional[float] = None,
        sf6_unit: Optional[str] = None,
        is_market_based: Optional[bool] = None,
        is_biogenic: Optional[bool] = None,
        emission_calculation_model: Optional[str] = None,
        calculation_library: Optional[str] = None,
        emission_factor: Optional[str] = None,
        adjusted_actual_quantity: Optional[str] = None,
        adjusted_actual_quantity_unit: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LookupField(_model_base.Model):
    """Lookup details.

    :ivar id: Unique ID of the referenced field value. Required.
    :vartype id: str
    :ivar logical_name: Schema name of the referenced table. Required.
    :vartype logical_name: str
    :ivar name: Display name of the referenced field value. Required.
    :vartype name: str
    :ivar key_attributes: Key attributes of the referenced field. Required.
    :vartype key_attributes: dict[str, any]
    :ivar row_version: Row version. Required.
    :vartype row_version: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique ID of the referenced field value. Required."""
    logical_name: str = rest_field(name="logicalName", visibility=["read", "create", "update", "delete", "query"])
    """Schema name of the referenced table. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Display name of the referenced field value. Required."""
    key_attributes: Dict[str, Any] = rest_field(
        name="keyAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Key attributes of the referenced field. Required."""
    row_version: str = rest_field(name="rowVersion", visibility=["read", "create", "update", "delete", "query"])
    """Row version. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        logical_name: str,
        name: str,
        key_attributes: Dict[str, Any],
        row_version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReferenceDataEntities(_model_base.Model):
    """Reference data.

    :ivar entity_name: Logical name of the entity. Example: fueltype. Required.
    :vartype entity_name: str
    :ivar display_name: Display name of the entity. Example: Fuel Type. Required.
    :vartype display_name: str
    :ivar schema_name: Schema name of the entity. Required.
    :vartype schema_name: str
    """

    entity_name: str = rest_field(name="entityName", visibility=["read"])
    """Logical name of the entity. Example: fueltype. Required."""
    display_name: str = rest_field(name="displayName", visibility=["read", "create", "update", "delete", "query"])
    """Display name of the entity. Example: Fuel Type. Required."""
    schema_name: str = rest_field(name="schemaName", visibility=["read", "create", "update", "delete", "query"])
    """Schema name of the entity. Required."""

    @overload
    def __init__(
        self,
        *,
        display_name: str,
        schema_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
