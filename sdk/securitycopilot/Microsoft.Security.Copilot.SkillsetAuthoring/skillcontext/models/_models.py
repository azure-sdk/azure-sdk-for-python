# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class InvokeSkillRequest(_model_base.Model):
    """Invoke skill request including necessary inputs for invoking a skill.

    All required parameters must be populated in order to send to Azure.

    :ivar skillset_name: Name of skillset in which desired skill to invoke resides.
    :vartype skillset_name: str
    :ivar skill_name: Name of skill to be invoked. Required.
    :vartype skill_name: str
    :ivar inputs: Skill inputs. Required.
    :vartype inputs: dict[str, ~skillcontext.models.SkillVariable]
    """

    skillset_name: Optional[str] = rest_field(name="skillsetName")
    """Name of skillset in which desired skill to invoke resides."""
    skill_name: str = rest_field(name="skillName")
    """Name of skill to be invoked. Required."""
    inputs: Dict[str, "_models.SkillVariable"] = rest_field()
    """Skill inputs. Required."""

    @overload
    def __init__(
        self,
        *,
        skill_name: str,
        inputs: Dict[str, "_models.SkillVariable"],
        skillset_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LogProgressRequest(_model_base.Model):
    """The progress message to log during a skill invocation.

    All required parameters must be populated in order to send to Azure.

    :ivar level: Log level. Known values are: "Error", "Warning", "Information", and "Verbose".
    :vartype level: str or ~skillcontext.models.ProgressLogLevel
    :ivar message: Log message. Required.
    :vartype message: str
    """

    level: Optional[Union[str, "_models.ProgressLogLevel"]] = rest_field()
    """Log level. Known values are: \"Error\", \"Warning\", \"Information\", and \"Verbose\"."""
    message: str = rest_field()
    """Log message. Required."""

    @overload
    def __init__(
        self,
        *,
        message: str,
        level: Optional[Union[str, "_models.ProgressLogLevel"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillVariable(_model_base.Model):
    """Skill Variable.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Skill variable type.
    :vartype type: str
    :ivar value: Skill variable value.
    :vartype value: str
    :ivar value_stored_as_json: Skill variable value is stored as json document. Required.
    :vartype value_stored_as_json: bool
    """

    type: Optional[str] = rest_field()
    """Skill variable type."""
    value: Optional[str] = rest_field()
    """Skill variable value."""
    value_stored_as_json: bool = rest_field(name="valueStoredAsJson")
    """Skill variable value is stored as json document. Required."""

    @overload
    def __init__(
        self,
        *,
        value_stored_as_json: bool,
        type: Optional[str] = None,
        value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OutputSkillVariable(SkillVariable):
    """Skill variable parent entity adding additional attribute 'skillsource' to provide visibility to
    users as to what data/information was used in generating the output of a skill.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Skill variable type.
    :vartype type: str
    :ivar value: Skill variable value.
    :vartype value: str
    :ivar value_stored_as_json: Skill variable value is stored as json document. Required.
    :vartype value_stored_as_json: bool
    :ivar sources: Array of cited sources that were fetched by a skill and that impacted the output
     of the skill evaluation. Required.
    :vartype sources: list[~skillcontext.models.SkillSource]
    """

    sources: List["_models.SkillSource"] = rest_field()
    """Array of cited sources that were fetched by a skill and that impacted the output of the skill
     evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        value_stored_as_json: bool,
        sources: List["_models.SkillSource"],
        type: Optional[str] = None,
        value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PromptHistoryResponse(_model_base.Model):
    """The prompt history of the current session.

    All required parameters must be populated in order to send to Azure.

    :ivar prompts: List of prompts that have been evaluated in the current session. Required.
    :vartype prompts: list[~skillcontext.models.SessionPrompt]
    """

    prompts: List["_models.SessionPrompt"] = rest_field()
    """List of prompts that have been evaluated in the current session. Required."""

    @overload
    def __init__(
        self,
        *,
        prompts: List["_models.SessionPrompt"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SessionPrompt(_model_base.Model):
    """A record for a prompt and response used in tracking session prompt history.

    All required parameters must be populated in order to send to Azure.

    :ivar prompt: The content of the prompt. Required.
    :vartype prompt: str
    :ivar response: Prompt response returned by the prompt evaluation. Required.
    :vartype response: str
    """

    prompt: str = rest_field()
    """The content of the prompt. Required."""
    response: str = rest_field()
    """Prompt response returned by the prompt evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        prompt: str,
        response: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillContextResponse(_model_base.Model):
    """SkillContext object containing properties of the current session relevant to the invoked skill.

    All required parameters must be populated in order to send to Azure.

    :ivar descriptor: Skill descriptor containing attributes that describe a skill (i.e. Inputs
     required to execute the skill). Required.
    :vartype descriptor: ~skillcontext.models.SkillDescriptor
    :ivar id: SkillContext Id. Required.
    :vartype id: str
    :ivar feature_flags: Array of feature flags. Required.
    :vartype feature_flags: list[str]
    :ivar inputs: Skill Variable Collection. Required.
    :vartype inputs: dict[str, ~skillcontext.models.SkillVariable]
    :ivar properties: Additional skill specific settings. Required.
    :vartype properties: dict[str, str]
    :ivar start_time: TODO. Required.
    :vartype start_time: ~datetime.datetime
    :ivar tenant_id: Tenant id of tenant in which skill invocation occured. Required.
    :vartype tenant_id: str
    :ivar user_id: User id of user that invoked the skill. Required.
    :vartype user_id: str
    """

    descriptor: "_models.SkillDescriptor" = rest_field()
    """Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute
     the skill). Required."""
    id: str = rest_field()
    """SkillContext Id. Required."""
    feature_flags: List[str] = rest_field(name="featureFlags")
    """Array of feature flags. Required."""
    inputs: Dict[str, "_models.SkillVariable"] = rest_field()
    """Skill Variable Collection. Required."""
    properties: Dict[str, str] = rest_field()
    """Additional skill specific settings. Required."""
    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """TODO. Required."""
    tenant_id: str = rest_field(name="TenantId")
    """Tenant id of tenant in which skill invocation occured. Required."""
    user_id: str = rest_field(name="userId")
    """User id of user that invoked the skill. Required."""

    @overload
    def __init__(
        self,
        *,
        descriptor: "_models.SkillDescriptor",
        id: str,  # pylint: disable=redefined-builtin
        feature_flags: List[str],
        inputs: Dict[str, "_models.SkillVariable"],
        properties: Dict[str, str],
        start_time: datetime.datetime,
        tenant_id: str,
        user_id: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillDependencyDescriptor(_model_base.Model):
    """The descriptor of a skill dependency.

    All required parameters must be populated in order to send to Azure.

    :ivar skillset_name: The skillset name. Required.
    :vartype skillset_name: str
    :ivar skill_name: The name of the skill. Required.
    :vartype skill_name: str
    """

    skillset_name: str = rest_field(name="skillsetName")
    """The skillset name. Required."""
    skill_name: str = rest_field(name="skillName")
    """The name of the skill. Required."""

    @overload
    def __init__(
        self,
        *,
        skillset_name: str,
        skill_name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillDescriptor(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The desciptor of a skill.

    All required parameters must be populated in order to send to Azure.

    :ivar skillset: The skillset descriptor. Required.
    :vartype skillset: ~skillcontext.models.SkillsetDescriptor
    :ivar name: The name of the skill. Required.
    :vartype name: str
    :ivar format: The format of the skill. Required.
    :vartype format: str
    :ivar display_name: The display name of the skill. Required.
    :vartype display_name: str
    :ivar alt_name: An alternative name for the skill as some planners follow different naming
     convensions. This is set by the planner to map the name back to the skill. Required.
    :vartype alt_name: str
    :ivar dependencies: The dependencies of the skill. Required.
    :vartype dependencies: list[~skillcontext.models.SkillDependencyDescriptor]
    :ivar description: The description of the skill. Required.
    :vartype description: str
    :ivar example_prompts: A list of example prompts for the skill. Required.
    :vartype example_prompts: list[str]
    :ivar hidden: Whether the skill is hidden TODO what does this mean. Required.
    :vartype hidden: bool
    :ivar inputs: The inputs required for the skill. Required.
    :vartype inputs: list[~skillcontext.models.SkillInputDescriptor]
    :ivar outputs: The outputs of the skill. Required.
    :vartype outputs: list[~skillcontext.models.SkillOutputDescriptor]
    :ivar prompt_aligned_name: The prompt aligned name of the skill TODO what does this mean.
     Required.
    :vartype prompt_aligned_name: str
    :ivar user_visibility_feature_flags: A list of feature flags. At least one of the feature flags
     is required to enabled in the prompt context in order for the skillset to be available.
     Required.
    :vartype user_visibility_feature_flags: list[str]
    :ivar user_visibility: Controls the conditions under which the users can see or use this
     skillset. Required. Known values are: "Always", "Never", and "IfFeatureFlagEnabled".
    :vartype user_visibility: str or ~skillcontext.models.SkillVisibility
    :ivar planner_visibility_feature_flags: Visibility flags required for the planner to user the
     skillset TODO confirm what this does. Required.
    :vartype planner_visibility_feature_flags: list[str]
    :ivar planner_visibility: Controls the conditions under a prompt can use this skillset.
     Required. Known values are: "Always", "Never", and "IfFeatureFlagEnabled".
    :vartype planner_visibility: str or ~skillcontext.models.SkillVisibility
    :ivar settings: The settings of the skill. Required.
    :vartype settings: dict[str, str]
    """

    skillset: "_models.SkillsetDescriptor" = rest_field()
    """The skillset descriptor. Required."""
    name: str = rest_field()
    """The name of the skill. Required."""
    format: str = rest_field()
    """The format of the skill. Required."""
    display_name: str = rest_field(name="displayName")
    """The display name of the skill. Required."""
    alt_name: str = rest_field(name="altName")
    """An alternative name for the skill as some planners follow different naming convensions. This is
     set by the planner to map the name back to the skill. Required."""
    dependencies: List["_models.SkillDependencyDescriptor"] = rest_field()
    """The dependencies of the skill. Required."""
    description: str = rest_field()
    """The description of the skill. Required."""
    example_prompts: List[str] = rest_field(name="examplePrompts")
    """A list of example prompts for the skill. Required."""
    hidden: bool = rest_field()
    """Whether the skill is hidden TODO what does this mean. Required."""
    inputs: List["_models.SkillInputDescriptor"] = rest_field()
    """The inputs required for the skill. Required."""
    outputs: List["_models.SkillOutputDescriptor"] = rest_field()
    """The outputs of the skill. Required."""
    prompt_aligned_name: str = rest_field(name="promptAlignedName")
    """The prompt aligned name of the skill TODO what does this mean. Required."""
    user_visibility_feature_flags: List[str] = rest_field(name="userVisibilityFeatureFlags")
    """A list of feature flags. At least one of the feature flags is required to enabled in the prompt
     context in order for the skillset to be available. Required."""
    user_visibility: Union[str, "_models.SkillVisibility"] = rest_field(name="userVisibility")
    """Controls the conditions under which the users can see or use this skillset. Required. Known
     values are: \"Always\", \"Never\", and \"IfFeatureFlagEnabled\"."""
    planner_visibility_feature_flags: List[str] = rest_field(name="plannerVisibilityFeatureFlags")
    """Visibility flags required for the planner to user the skillset TODO confirm what this does.
     Required."""
    planner_visibility: Union[str, "_models.SkillVisibility"] = rest_field(name="plannerVisibility")
    """Controls the conditions under a prompt can use this skillset. Required. Known values are:
     \"Always\", \"Never\", and \"IfFeatureFlagEnabled\"."""
    settings: Dict[str, str] = rest_field()
    """The settings of the skill. Required."""

    @overload
    def __init__(
        self,
        *,
        skillset: "_models.SkillsetDescriptor",
        name: str,
        format: str,
        display_name: str,
        alt_name: str,
        dependencies: List["_models.SkillDependencyDescriptor"],
        description: str,
        example_prompts: List[str],
        hidden: bool,
        inputs: List["_models.SkillInputDescriptor"],
        outputs: List["_models.SkillOutputDescriptor"],
        prompt_aligned_name: str,
        user_visibility_feature_flags: List[str],
        user_visibility: Union[str, "_models.SkillVisibility"],
        planner_visibility_feature_flags: List[str],
        planner_visibility: Union[str, "_models.SkillVisibility"],
        settings: Dict[str, str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillInputDescriptor(_model_base.Model):
    """The descriptor of a skill input.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the skill input.
    :vartype name: str
    :ivar type: The type of the skill input. Required.
    :vartype type: ~skillcontext.models.SkillTypeDescriptor
    :ivar description: The description of the skill.
    :vartype description: str
    :ivar required: Whether a skill input is required. Required.
    :vartype required: bool
    :ivar default_value: The default value of the skill input.
    :vartype default_value: str
    :ivar placeholder_value: The placeholder value of the skill input TODO how is this different
     than the default. Required.
    :vartype placeholder_value: str
    """

    name: Optional[str] = rest_field()
    """The name of the skill input."""
    type: "_models.SkillTypeDescriptor" = rest_field()
    """The type of the skill input. Required."""
    description: Optional[str] = rest_field()
    """The description of the skill."""
    required: bool = rest_field()
    """Whether a skill input is required. Required."""
    default_value: Optional[str] = rest_field(name="defaultValue")
    """The default value of the skill input."""
    placeholder_value: str = rest_field(name="placeholderValue")
    """The placeholder value of the skill input TODO how is this different than the default. Required."""

    @overload
    def __init__(
        self,
        *,
        type: "_models.SkillTypeDescriptor",
        required: bool,
        placeholder_value: str,
        name: Optional[str] = None,
        description: Optional[str] = None,
        default_value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillOutputDescriptor(_model_base.Model):
    """The descriptor of a skill output.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the skill input.
    :vartype name: str
    :ivar type: The type of the skill input. Required.
    :vartype type: ~skillcontext.models.SkillTypeDescriptor
    :ivar description: The description of the skill.
    :vartype description: str
    """

    name: Optional[str] = rest_field()
    """The name of the skill input."""
    type: "_models.SkillTypeDescriptor" = rest_field()
    """The type of the skill input. Required."""
    description: Optional[str] = rest_field()
    """The description of the skill."""

    @overload
    def __init__(
        self,
        *,
        type: "_models.SkillTypeDescriptor",
        name: Optional[str] = None,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillsetDescriptor(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Entity representing a Skillset.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the Skillset. Required.
    :vartype name: str
    :ivar description: The description of the Skillset. Required.
    :vartype description: str
    :ivar description_display: The description of the skillset that's displayed TODO postman/dev
     figure out where this is displayed. Required.
    :vartype description_display: str
    :ivar disaply_name: The Skillset name that's displayed in the portal. Required.
    :vartype disaply_name: str
    :ivar icon: The icon displayed for the skillset in the console. Required.
    :vartype icon: str
    :ivar category: The category of the Skillset. Required. Known values are: "Hidden",
     "Microsoft", "Other", "Web", "Testing", and "Plugin".
    :vartype category: str or ~skillcontext.models.SkillsetCategory
    :ivar enabled: Whether the skillset is enabled TODO how is this different than Hidden.
     Required.
    :vartype enabled: bool
    :ivar hidden: Whether the skillset is hidden TODO how is this different than enabled. Required.
    :vartype hidden: bool
    :ivar prerequisites: The prerequisites of a skillset TODO what does this mean. Required.
    :vartype prerequisites: list[str]
    :ivar settings: The settings of a skillset. Required.
    :vartype settings: list[~skillcontext.models.SkillsetSetting]
    :ivar supported_auth_types: The types of authentication supported by the skillset. Required.
    :vartype supported_auth_types: list[str or ~skillcontext.models.SkillsetAuthType]
    :ivar user_visibility_feature_flags: A list of feature flags. At least one of the feature flags
     is required to enabled in the prompt context in order for the skillset to be available.
     Required.
    :vartype user_visibility_feature_flags: list[str]
    :ivar user_visibility: Controls the conditions under which the users can see or use this
     skillset. Required. Known values are: "Always", "Never", and "IfFeatureFlagEnabled".
    :vartype user_visibility: str or ~skillcontext.models.SkillVisibility
    :ivar planner_visibility_feature_flags: Visibility flags required for the planner to user the
     skillset TODO confirm what this does. Required.
    :vartype planner_visibility_feature_flags: list[str]
    :ivar planner_visibility: Controls the conditions under a prompt can use this skillset.
     Required. Known values are: "Always", "Never", and "IfFeatureFlagEnabled".
    :vartype planner_visibility: str or ~skillcontext.models.SkillVisibility
    """

    name: str = rest_field()
    """The name of the Skillset. Required."""
    description: str = rest_field()
    """The description of the Skillset. Required."""
    description_display: str = rest_field(name="descriptionDisplay")
    """The description of the skillset that's displayed TODO postman/dev figure out where this is
     displayed. Required."""
    disaply_name: str = rest_field(name="disaplyName")
    """The Skillset name that's displayed in the portal. Required."""
    icon: str = rest_field()
    """The icon displayed for the skillset in the console. Required."""
    category: Union[str, "_models.SkillsetCategory"] = rest_field()
    """The category of the Skillset. Required. Known values are: \"Hidden\", \"Microsoft\", \"Other\",
     \"Web\", \"Testing\", and \"Plugin\"."""
    enabled: bool = rest_field()
    """Whether the skillset is enabled TODO how is this different than Hidden. Required."""
    hidden: bool = rest_field()
    """Whether the skillset is hidden TODO how is this different than enabled. Required."""
    prerequisites: List[str] = rest_field()
    """The prerequisites of a skillset TODO what does this mean. Required."""
    settings: List["_models.SkillsetSetting"] = rest_field()
    """The settings of a skillset. Required."""
    supported_auth_types: List[Union[str, "_models.SkillsetAuthType"]] = rest_field(name="supportedAuthTypes")
    """The types of authentication supported by the skillset. Required."""
    user_visibility_feature_flags: List[str] = rest_field(name="userVisibilityFeatureFlags")
    """A list of feature flags. At least one of the feature flags is required to enabled in the prompt
     context in order for the skillset to be available. Required."""
    user_visibility: Union[str, "_models.SkillVisibility"] = rest_field(name="userVisibility")
    """Controls the conditions under which the users can see or use this skillset. Required. Known
     values are: \"Always\", \"Never\", and \"IfFeatureFlagEnabled\"."""
    planner_visibility_feature_flags: List[str] = rest_field(name="plannerVisibilityFeatureFlags")
    """Visibility flags required for the planner to user the skillset TODO confirm what this does.
     Required."""
    planner_visibility: Union[str, "_models.SkillVisibility"] = rest_field(name="plannerVisibility")
    """Controls the conditions under a prompt can use this skillset. Required. Known values are:
     \"Always\", \"Never\", and \"IfFeatureFlagEnabled\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        description: str,
        description_display: str,
        disaply_name: str,
        icon: str,
        category: Union[str, "_models.SkillsetCategory"],
        enabled: bool,
        hidden: bool,
        prerequisites: List[str],
        settings: List["_models.SkillsetSetting"],
        supported_auth_types: List[Union[str, "_models.SkillsetAuthType"]],
        user_visibility_feature_flags: List[str],
        user_visibility: Union[str, "_models.SkillVisibility"],
        planner_visibility_feature_flags: List[str],
        planner_visibility: Union[str, "_models.SkillVisibility"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillsetSetting(_model_base.Model):
    """Defines the settings of a skillset.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the skillset setting. Required.
    :vartype name: str
    :ivar label: The label of the skillset setting. Required.
    :vartype label: str
    :ivar description: The description of the skillset setting used to describe the setting to the
     user in an info text box. Required.
    :vartype description: str
    :ivar hint_text: The hint text used to fill in the setting box. Required.
    :vartype hint_text: str
    :ivar setting_type: The type of the skillset setting. Required. Known values are:
     "SecretString" and "String".
    :vartype setting_type: str or ~skillcontext.models.SkillsetSettingType
    :ivar required: Whether the skillset setting is required. Required.
    :vartype required: bool
    :ivar default_value: The default value of the skillset setting. Required.
    :vartype default_value: str
    :ivar value: The value of the skillset setting. Required.
    :vartype value: str
    """

    name: str = rest_field()
    """The name of the skillset setting. Required."""
    label: str = rest_field()
    """The label of the skillset setting. Required."""
    description: str = rest_field()
    """The description of the skillset setting used to describe the setting to the user in an info
     text box. Required."""
    hint_text: str = rest_field(name="hintText")
    """The hint text used to fill in the setting box. Required."""
    setting_type: Union[str, "_models.SkillsetSettingType"] = rest_field(name="settingType")
    """The type of the skillset setting. Required. Known values are: \"SecretString\" and \"String\"."""
    required: bool = rest_field()
    """Whether the skillset setting is required. Required."""
    default_value: str = rest_field(name="defaultValue")
    """The default value of the skillset setting. Required."""
    value: str = rest_field()
    """The value of the skillset setting. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        label: str,
        description: str,
        hint_text: str,
        setting_type: Union[str, "_models.SkillsetSettingType"],
        required: bool,
        default_value: str,
        value: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillSource(_model_base.Model):
    """Source that is fetched during the evaluation of a skill. Provides visibility to users as to
    what data/information was used in generating the output of a skill.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: User friendly name for the information source. Required.
    :vartype display_name: str
    :ivar source_content: Information source content (i.e. URL to article). Required.
    :vartype source_content: str
    :ivar source_type: The source type (i.e. URI). Required. Known values are: "Uri" and
     "StringType".
    :vartype source_type: str or ~skillcontext.models.SkillSourceType
    """

    display_name: str = rest_field(name="displayName")
    """User friendly name for the information source. Required."""
    source_content: str = rest_field(name="sourceContent")
    """Information source content (i.e. URL to article). Required."""
    source_type: Union[str, "_models.SkillSourceType"] = rest_field(name="sourceType")
    """The source type (i.e. URI). Required. Known values are: \"Uri\" and \"StringType\"."""

    @overload
    def __init__(
        self,
        *,
        display_name: str,
        source_content: str,
        source_type: Union[str, "_models.SkillSourceType"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SkillTypeDescriptor(_model_base.Model):
    """The descriptor of a skill type.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the skill type. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the skill type. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
