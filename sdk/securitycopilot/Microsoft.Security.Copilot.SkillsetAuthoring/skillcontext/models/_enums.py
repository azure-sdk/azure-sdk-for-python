# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AuthLocationEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Auth Location."""

    HEADER = "Header"
    """Using Header"""
    QUERY_PARAMS = "QueryParams"
    """Using QueryParams"""


class ProgressLogLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Level for progress logs."""

    ERROR = "Error"
    """Error log"""
    WARNING = "Warning"
    """Warning log"""
    INFORMATION = "Information"
    """Information log"""
    VERBOSE = "Verbose"
    """Verbose log"""


class SkillsetAuthType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines the authentication types supported by a skillset."""

    NONE = "None"
    """The skillset supports no authentication"""
    BASIC = "Basic"
    """The skillset supports basic authentication TODO what does this mean"""
    API_KEY = "ApiKey"
    """The skillset supports API key authentication TO what does this mean"""
    O_AUTH_AUTHORIZATION_CODE_FLOW = "OAuthAuthorizationCodeFlow"
    """The skillset supports OAuth authorization code flow authentication TODO what does this mean"""
    O_AUTH_CLIENT_CREDENTIALS_FLOW = "OAuthClientCredentialsFlow"
    """The skillset supports OAuth client credentials flow TODO what does this mean"""
    AAD = "AAD"
    """The skillset supports AAD authentication"""
    SERVICE_HTTP = "ServiceHttp"
    """The skillset supports service HTTP authentication TODO what does this mean"""
    A_A_D_DELEGATED = "AADDelegated"
    """The skillset supports AAD delegated authentication TODO what does this mean"""


class SkillsetCatalogScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The scope of a skillset in the skillset catalog."""

    NONE = "None"
    """No scope specified"""
    USER = "User"
    """The skillset is scoped to the calling user"""
    WORKSPACE = "Workspace"
    """The skillset is scoped to the calling user's workspace TODO what does this mean"""
    TENANT = "Tenant"
    """The skillset is scoped to the calling user's tenant"""
    GLOBAL = "Global"
    """The skillset is available globally"""


class SkillsetCategory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines the category of the data source/API that the skillset interacts with."""

    HIDDEN = "Hidden"
    """Default value if a category is not specified. The skillset willnot appear in the UI"""
    MICROSOFT = "Microsoft"
    """The skillset interacts with Microsoft services only"""
    OTHER = "Other"
    """The skillset interacts with 3rd party service"""
    WEB = "Web"
    """The skillset interacts with public facing web services"""
    TESTING = "Testing"
    """The skillset is used for testing and debugging purposes"""
    PLUGIN = "Plugin"
    """THe skillset of of a plugin format, such as ChatGPT or LogicApp plugins"""


class SkillsetSettingType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines the type of a skillset setting."""

    SECRET_STRING = "SecretString"
    """The skillset setting is a secret string TODO what does this mean"""
    STRING = "String"
    """The skillset setting is a string"""


class SkillSourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type for a source that was used in generating the output of a skill."""

    URI = "Uri"
    """Uri"""
    STRING_TYPE = "StringType"
    """StringType"""


class SkillVisibility(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines the conditions under which the users can see or use a skillset."""

    ALWAYS = "Always"
    """Always visible"""
    NEVER = "Never"
    """Never visible"""
    IF_FEATURE_FLAG_ENABLED = "IfFeatureFlagEnabled"
    """Visible when any of an associated list of feature flags are enabled"""


class TokenCredentialEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Token Credential Types."""

    NONE = "None"
    """None"""
    USER_TOKEN_CREDENTIAL = "UserTokenCredential"
    """UserTokenCredential type"""
    SERVICE_TOKEN_CREDENTIAL = "ServiceTokenCredential"
    """ServiceTokenCredential type"""
