# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import SkillContextClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_skill_context_get_skill_context_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/skillContext"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_skill_context_invoke_skill_request(*, evaluation_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/skillContext/invokeSkill"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_skill_context_get_prompt_history_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/skillContext/promptHistory"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_skill_context_log_progress_request(*, evaluation_token: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/skillContext/logProgress"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_skill_context_set_skill_output_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/skillContext/setOutput"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_skill_context_get_skillset_settings_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/skillContext/skillsetSettings"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_skill_context_set_skill_invocation_started_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/skillContext/setSkillInvocationStarted"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_skill_context_set_skill_invocation_completed_request(  # pylint: disable=name-too-long
    *, evaluation_token: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/skillContext/setSkillInvocationCompleted"

    # Construct headers
    _headers["X-MS-SecurityCopilot-EvaluationToken"] = _SERIALIZER.header("evaluation_token", evaluation_token, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


class SkillContextClientOperationsMixin(SkillContextClientMixinABC):
    @distributed_trace
    def get_skill_context(self, *, evaluation_token: str, **kwargs: Any) -> Optional[_models.SkillContextResponse]:
        """Get the SkillContext for the current skill invocation.

        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SkillContextResponse or None. The SkillContextResponse is compatible with
         MutableMapping
        :rtype: ~skillcontext.models.SkillContextResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.SkillContextResponse]] = kwargs.pop("cls", None)

        request = build_skill_context_get_skill_context_request(
            evaluation_token=evaluation_token,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.SkillContextResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @overload
    def invoke_skill(
        self,
        invoke_skill: _models.InvokeSkillRequest,
        *,
        evaluation_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Optional[_models.OutputSkillVariable]:
        """Invokes a skill. Allows current skill to invoke dependency skills.

        :param invoke_skill: Required.
        :type invoke_skill: ~skillcontext.models.InvokeSkillRequest
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: OutputSkillVariable or None. The OutputSkillVariable is compatible with MutableMapping
        :rtype: ~skillcontext.models.OutputSkillVariable or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def invoke_skill(
        self, invoke_skill: JSON, *, evaluation_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> Optional[_models.OutputSkillVariable]:
        """Invokes a skill. Allows current skill to invoke dependency skills.

        :param invoke_skill: Required.
        :type invoke_skill: JSON
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: OutputSkillVariable or None. The OutputSkillVariable is compatible with MutableMapping
        :rtype: ~skillcontext.models.OutputSkillVariable or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def invoke_skill(
        self, invoke_skill: IO, *, evaluation_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> Optional[_models.OutputSkillVariable]:
        """Invokes a skill. Allows current skill to invoke dependency skills.

        :param invoke_skill: Required.
        :type invoke_skill: IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: OutputSkillVariable or None. The OutputSkillVariable is compatible with MutableMapping
        :rtype: ~skillcontext.models.OutputSkillVariable or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def invoke_skill(
        self, invoke_skill: Union[_models.InvokeSkillRequest, JSON, IO], *, evaluation_token: str, **kwargs: Any
    ) -> Optional[_models.OutputSkillVariable]:
        """Invokes a skill. Allows current skill to invoke dependency skills.

        :param invoke_skill: Is one of the following types: InvokeSkillRequest, JSON, IO Required.
        :type invoke_skill: ~skillcontext.models.InvokeSkillRequest or JSON or IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: OutputSkillVariable or None. The OutputSkillVariable is compatible with MutableMapping
        :rtype: ~skillcontext.models.OutputSkillVariable or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[_models.OutputSkillVariable]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(invoke_skill, (IOBase, bytes)):
            _content = invoke_skill
        else:
            _content = json.dumps(invoke_skill, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_skill_context_invoke_skill_request(
            evaluation_token=evaluation_token,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.OutputSkillVariable, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def get_prompt_history(self, *, evaluation_token: str, **kwargs: Any) -> Optional[_models.PromptHistoryResponse]:
        """Get prompt history.

        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: PromptHistoryResponse or None. The PromptHistoryResponse is compatible with
         MutableMapping
        :rtype: ~skillcontext.models.PromptHistoryResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.PromptHistoryResponse]] = kwargs.pop("cls", None)

        request = build_skill_context_get_prompt_history_request(
            evaluation_token=evaluation_token,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.PromptHistoryResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @overload
    def log_progress(  # pylint: disable=inconsistent-return-statements
        self,
        log_progress_request: _models.LogProgressRequest,
        *,
        evaluation_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Log a progress message for a skill invocation.

        :param log_progress_request: Required.
        :type log_progress_request: ~skillcontext.models.LogProgressRequest
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def log_progress(  # pylint: disable=inconsistent-return-statements
        self,
        log_progress_request: JSON,
        *,
        evaluation_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Log a progress message for a skill invocation.

        :param log_progress_request: Required.
        :type log_progress_request: JSON
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def log_progress(  # pylint: disable=inconsistent-return-statements
        self, log_progress_request: IO, *, evaluation_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Log a progress message for a skill invocation.

        :param log_progress_request: Required.
        :type log_progress_request: IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def log_progress(  # pylint: disable=inconsistent-return-statements
        self, log_progress_request: Union[_models.LogProgressRequest, JSON, IO], *, evaluation_token: str, **kwargs: Any
    ) -> None:
        """Log a progress message for a skill invocation.

        :param log_progress_request: Is one of the following types: LogProgressRequest, JSON, IO
         Required.
        :type log_progress_request: ~skillcontext.models.LogProgressRequest or JSON or IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(log_progress_request, (IOBase, bytes)):
            _content = log_progress_request
        else:
            _content = json.dumps(log_progress_request, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_skill_context_log_progress_request(
            evaluation_token=evaluation_token,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def set_skill_output(  # pylint: disable=inconsistent-return-statements
        self,
        output_skill_variable: _models.OutputSkillVariable,
        *,
        evaluation_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sets the skill output.

        :param output_skill_variable: Required.
        :type output_skill_variable: ~skillcontext.models.OutputSkillVariable
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_skill_output(  # pylint: disable=inconsistent-return-statements
        self,
        output_skill_variable: JSON,
        *,
        evaluation_token: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sets the skill output.

        :param output_skill_variable: Required.
        :type output_skill_variable: JSON
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_skill_output(  # pylint: disable=inconsistent-return-statements
        self, output_skill_variable: IO, *, evaluation_token: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Sets the skill output.

        :param output_skill_variable: Required.
        :type output_skill_variable: IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_skill_output(  # pylint: disable=inconsistent-return-statements
        self,
        output_skill_variable: Union[_models.OutputSkillVariable, JSON, IO],
        *,
        evaluation_token: str,
        **kwargs: Any
    ) -> None:
        """Sets the skill output.

        :param output_skill_variable: Is one of the following types: OutputSkillVariable, JSON, IO
         Required.
        :type output_skill_variable: ~skillcontext.models.OutputSkillVariable or JSON or IO
        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(output_skill_variable, (IOBase, bytes)):
            _content = output_skill_variable
        else:
            _content = json.dumps(output_skill_variable, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_skill_context_set_skill_output_request(
            evaluation_token=evaluation_token,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_skillset_settings(self, *, evaluation_token: str, **kwargs: Any) -> Optional[Dict[str, str]]:
        """Sets the skillset settings.

        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: dict mapping str to str or None
        :rtype: dict[str, str] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[Dict[str, str]]] = kwargs.pop("cls", None)

        request = build_skill_context_get_skillset_settings_request(
            evaluation_token=evaluation_token,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(Dict[str, str], response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def set_skill_invocation_started(  # pylint: disable=inconsistent-return-statements
        self, *, evaluation_token: str, **kwargs: Any
    ) -> None:
        """Notifies security copilot backend service that the skill has been invoked.

        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_skill_context_set_skill_invocation_started_request(
            evaluation_token=evaluation_token,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def set_skill_invocation_completed(  # pylint: disable=inconsistent-return-statements
        self, *, evaluation_token: str, **kwargs: Any
    ) -> None:
        """Notifies security copilot backend service that the skill invocation has completed.

        :keyword evaluation_token: Required.
        :paramtype evaluation_token: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_skill_context_set_skill_invocation_completed_request(
            evaluation_token=evaluation_token,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
