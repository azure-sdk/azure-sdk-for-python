# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Activation(TrackedResource):
    """The activation entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.ActivationProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.ActivationProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ActivationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ActivationProperties(_model_base.Model):
    """Defining the Activation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar provisioning_state: Provisioning state of the activation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar inputs: The inputs of the Activation. Inputs holds a key-value map of user-defined
     parameters for the initial stage.
    :vartype inputs: dict[str, any]
    :ivar stage: The stage of the campaign from where the Activation should trigger.
    :vartype stage: str
    :ivar campaign: The campaign name that the Activation should trigger. Required.
    :vartype campaign: str
    :ivar status: The status of the Activation.
    :vartype status: ~azure.mgmt.toolchainorchestrator.models.ActivationStatusProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the activation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    inputs: Optional[Dict[str, Any]] = rest_field()
    """The inputs of the Activation. Inputs holds a key-value map of user-defined parameters for the
     initial stage."""
    stage: Optional[str] = rest_field()
    """The stage of the campaign from where the Activation should trigger."""
    campaign: str = rest_field()
    """The campaign name that the Activation should trigger. Required."""
    status: Optional["_models.ActivationStatusProperties"] = rest_field(visibility=["read"])
    """The status of the Activation."""

    @overload
    def __init__(
        self,
        *,
        campaign: str,
        inputs: Optional[Dict[str, Any]] = None,
        stage: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ActivationStatusProperties(_model_base.Model):
    """Defines a ActivationStatus.

    :ivar stage_history: The execution history Activation.
    :vartype stage_history: list[~azure.mgmt.toolchainorchestrator.models.StageHistoryProperties]
    :ivar activation_generation: The activationGeneration of the ActivationStatus.
    :vartype activation_generation: str
    :ivar update_time: The updateTime of the ActivationStatus.
    :vartype update_time: str
    :ivar status: The status code of the ActivationStatus.
    :vartype status: int
    :ivar status_message: The status message of the ActivationStatus.
    :vartype status_message: str
    """

    stage_history: Optional[List["_models.StageHistoryProperties"]] = rest_field(name="stageHistory")
    """The execution history Activation."""
    activation_generation: Optional[str] = rest_field(name="activationGeneration")
    """The activationGeneration of the ActivationStatus."""
    update_time: Optional[str] = rest_field(name="updateTime")
    """The updateTime of the ActivationStatus."""
    status: Optional[int] = rest_field()
    """The status code of the ActivationStatus."""
    status_message: Optional[str] = rest_field(name="statusMessage")
    """The status message of the ActivationStatus."""

    @overload
    def __init__(
        self,
        *,
        stage_history: Optional[List["_models.StageHistoryProperties"]] = None,
        activation_generation: Optional[str] = None,
        update_time: Optional[str] = None,
        status: Optional[int] = None,
        status_message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ActivationTagsUpdate(_model_base.Model):
    """The type used for updating tags in Activation resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BindingProperties(_model_base.Model):
    """Defines a binding for a provider.


    :ivar provider: Name of the provider. Required.
    :vartype provider: str
    :ivar config: Configuration values for the binding.
    :vartype config: dict[str, str]
    :ivar role: Role that the provider binds to with the component. Required.
    :vartype role: str
    """

    provider: str = rest_field()
    """Name of the provider. Required."""
    config: Optional[Dict[str, str]] = rest_field()
    """Configuration values for the binding."""
    role: str = rest_field()
    """Role that the provider binds to with the component. Required."""

    @overload
    def __init__(
        self,
        *,
        provider: str,
        role: str,
        config: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Campaign(TrackedResource):
    """The campaign entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.CampaignProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.CampaignProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CampaignProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CampaignProperties(_model_base.Model):
    """The properties of the campaign.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the campaign. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the campaign. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""


class CampaignTagsUpdate(_model_base.Model):
    """The type used for updating tags in Campaign resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CampaignVersion(TrackedResource):
    """The campaignVersion entity. A nested resource of Campaign entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.CampaignVersionProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.CampaignVersionProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CampaignVersionProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CampaignVersionProperties(_model_base.Model):
    """Defining the CampaignVersion.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the campaignVersion. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar first_stage: The initial stage of the CampaignVersion.
    :vartype first_stage: str
    :ivar self_driving: Whether campaign is self driving or not. That is whether a stage should
     trigger the next stage when it finishes.
    :vartype self_driving: bool
    :ivar stages: The stages of the CampaignVersion.
    :vartype stages: dict[str, ~azure.mgmt.toolchainorchestrator.models.StageProperties]
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the campaignVersion. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    first_stage: Optional[str] = rest_field(name="firstStage")
    """The initial stage of the CampaignVersion."""
    self_driving: Optional[bool] = rest_field(name="selfDriving")
    """Whether campaign is self driving or not. That is whether a stage should trigger the next stage
     when it finishes."""
    stages: Optional[Dict[str, "_models.StageProperties"]] = rest_field()
    """The stages of the CampaignVersion."""

    @overload
    def __init__(
        self,
        *,
        first_stage: Optional[str] = None,
        self_driving: Optional[bool] = None,
        stages: Optional[Dict[str, "_models.StageProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CampaignVersionTagsUpdate(_model_base.Model):
    """The type used for updating tags in CampaignVersion resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Catalog(TrackedResource):
    """The Catalog entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.CatalogProperties
    :ivar extended_location: Edge location of the Catalog. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.CatalogProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the Catalog. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CatalogProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogProperties(_model_base.Model):
    """The properties of the Catalog.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the Catalog. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the Catalog. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""


class CatalogStatusProperties(_model_base.Model):
    """Defines a CatalogStatus.


    :ivar properties: The properties of the CatalogStatus. Required.
    :vartype properties: dict[str, str]
    """

    properties: Dict[str, str] = rest_field()
    """The properties of the CatalogStatus. Required."""

    @overload
    def __init__(
        self,
        *,
        properties: Dict[str, str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogTagsUpdate(_model_base.Model):
    """The type used for updating tags in Catalog resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogVersion(TrackedResource):
    """The CatalogVersion entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.CatalogVersionProperties
    :ivar extended_location: Edge location of the CatalogVersion.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.CatalogVersionProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the CatalogVersion."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CatalogVersionProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogVersionProperties(_model_base.Model):
    """The properties of the CatalogVersion.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The provisioning state of the CatalogVersion. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar properties: The properties of the CatalogVersion.
    :vartype properties: dict[str, any]
    :ivar metadata: The metadata of the CatalogVersion.
    :vartype metadata: dict[str, str]
    :ivar parent_name: The name of parent CatalogVersion.
    :vartype parent_name: str
    :ivar catalog_type: The catalogType of the CatalogVersion.
    :vartype catalog_type: str
    :ivar status: The status of the CatalogVersion.
    :vartype status: ~azure.mgmt.toolchainorchestrator.models.CatalogStatusProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the CatalogVersion. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    properties: Optional[Dict[str, Any]] = rest_field()
    """The properties of the CatalogVersion."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """The metadata of the CatalogVersion."""
    parent_name: Optional[str] = rest_field(name="parentName")
    """The name of parent CatalogVersion."""
    catalog_type: Optional[str] = rest_field(name="catalogType")
    """The catalogType of the CatalogVersion."""
    status: Optional["_models.CatalogStatusProperties"] = rest_field(visibility=["read"])
    """The status of the CatalogVersion."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional[Dict[str, Any]] = None,
        metadata: Optional[Dict[str, str]] = None,
        parent_name: Optional[str] = None,
        catalog_type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogVersionTagsUpdate(_model_base.Model):
    """The type used for updating tags in CatalogVersion resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComponentProperties(_model_base.Model):
    """Defines a desired runtime component.


    :ivar name: Name of the component. Required.
    :vartype name: str
    :ivar metadata: Metadata information of the component.
    :vartype metadata: dict[str, str]
    :ivar properties: Properties of the component.
    :vartype properties: dict[str, any]
    :ivar constraints: Constraints of the component.
    :vartype constraints: str
    :ivar dependencies: Dependencies of the component.
    :vartype dependencies: list[str]
    :ivar type: Component type. Required.
    :vartype type: str
    """

    name: str = rest_field()
    """Name of the component. Required."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """Metadata information of the component."""
    properties: Optional[Dict[str, Any]] = rest_field()
    """Properties of the component."""
    constraints: Optional[str] = rest_field()
    """Constraints of the component."""
    dependencies: Optional[List[str]] = rest_field()
    """Dependencies of the component."""
    type: str = rest_field()
    """Component type. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
        metadata: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, Any]] = None,
        constraints: Optional[str] = None,
        dependencies: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Diagnostic(TrackedResource):
    """A Diagnostic resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.DiagnosticProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.DiagnosticProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DiagnosticProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticProperties(_model_base.Model):
    """The properties of a Diagnostic resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""


class DiagnosticTagsUpdate(_model_base.Model):
    """The type used for updating tags in Diagnostic resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.toolchainorchestrator.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.toolchainorchestrator.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.toolchainorchestrator.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvalExpressionResponse(_model_base.Model):
    """The expression evaluation result response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Operation Id.
    :vartype id: str
    :ivar name: Operation Name.
    :vartype name: str
    :ivar status: Provisioning state of the expression evaluation resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.mgmt.toolchainorchestrator.models.ResourceProvisioningState
    :ivar error: Error listing the expression evaluation response.
    :vartype error: ~azure.mgmt.toolchainorchestrator.models.EvalExpressionResponseError
    :ivar properties: Properties of the expression evaluation response.
    :vartype properties: dict[str, any]
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Operation Id."""
    name: Optional[str] = rest_field(visibility=["read"])
    """Operation Name."""
    status: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(visibility=["read"])
    """Provisioning state of the expression evaluation resource. Known values are: \"Succeeded\",
     \"Failed\", and \"Canceled\"."""
    error: Optional["_models.EvalExpressionResponseError"] = rest_field()
    """Error listing the expression evaluation response."""
    properties: Optional[Dict[str, Any]] = rest_field()
    """Properties of the expression evaluation response."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.EvalExpressionResponseError"] = None,
        properties: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvalExpressionResponseError(_model_base.Model):
    """The error evaluating the expression response.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """

    code: Optional[str] = rest_field()
    """The error code."""
    message: Optional[str] = rest_field()
    """The error message."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtendedLocation(_model_base.Model):
    """Extended location is an extension of Azure locations. They provide a way to use their Azure ARC
    enabled Kubernetes clusters as target locations for deploying Azure services instances.


    :ivar name: The name of the extended location. Required.
    :vartype name: str
    :ivar type: The type of the extended location. Required.
    :vartype type: str
    """

    name: str = rest_field()
    """The name of the extended location. Required."""
    type: str = rest_field()
    """The type of the extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Instance(TrackedResource):
    """An Instance resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.InstanceProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.InstanceProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.InstanceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceProperties(_model_base.Model):
    """The properties of an Instance resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar metadata: The metadata information of the InstanceVersion resource.
    :vartype metadata: dict[str, str]
    :ivar display_name: The display name of the InstanceVersion resource.
    :vartype display_name: str
    :ivar scope: The scope of the InstanceVersion resource.
    :vartype scope: str
    :ivar solution: The SolutionVersion resource of the InstanceVersion resource. Required.
    :vartype solution: str
    :ivar target: Defines the Target the InstanceVersion resource will deploy to.
    :vartype target: ~azure.mgmt.toolchainorchestrator.models.TargetSelectorProperties
    :ivar reconciliation_policy: The reconciliationPolicy of the InstanceVersion resource.
    :vartype reconciliation_policy:
     ~azure.mgmt.toolchainorchestrator.models.ReconciliationPolicyProperties
    :ivar is_dry_run: The running state for the InstanceVersion resource.
    :vartype is_dry_run: bool
    :ivar status: The status of the InstanceVersion.
    :vartype status: ~azure.mgmt.toolchainorchestrator.models.InstanceTargetStatusProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """The metadata information of the InstanceVersion resource."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The display name of the InstanceVersion resource."""
    scope: Optional[str] = rest_field()
    """The scope of the InstanceVersion resource."""
    solution: str = rest_field()
    """The SolutionVersion resource of the InstanceVersion resource. Required."""
    target: Optional["_models.TargetSelectorProperties"] = rest_field()
    """Defines the Target the InstanceVersion resource will deploy to."""
    reconciliation_policy: Optional["_models.ReconciliationPolicyProperties"] = rest_field(name="reconciliationPolicy")
    """The reconciliationPolicy of the InstanceVersion resource."""
    is_dry_run: Optional[bool] = rest_field(name="isDryRun")
    """The running state for the InstanceVersion resource."""
    status: Optional["_models.InstanceTargetStatusProperties"] = rest_field(visibility=["read"])
    """The status of the InstanceVersion."""

    @overload
    def __init__(
        self,
        *,
        solution: str,
        metadata: Optional[Dict[str, str]] = None,
        display_name: Optional[str] = None,
        scope: Optional[str] = None,
        target: Optional["_models.TargetSelectorProperties"] = None,
        reconciliation_policy: Optional["_models.ReconciliationPolicyProperties"] = None,
        is_dry_run: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceTagsUpdate(_model_base.Model):
    """The type used for updating tags in Instance resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceTargetStatusProperties(_model_base.Model):
    """Defines a status for Target and Instance deployment.


    :ivar last_modified: The lastModified of the Status. Required.
    :vartype last_modified: ~datetime.datetime
    :ivar properties: The state properties of the Status.
    :vartype properties: dict[str, str]
    """

    last_modified: datetime.datetime = rest_field(name="lastModified", format="rfc3339")
    """The lastModified of the Status. Required."""
    properties: Optional[Dict[str, str]] = rest_field()
    """The state properties of the Status."""

    @overload
    def __init__(
        self,
        *,
        last_modified: datetime.datetime,
        properties: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.toolchainorchestrator.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.toolchainorchestrator.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.toolchainorchestrator.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(visibility=["read"])
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class ReconciliationPolicyProperties(_model_base.Model):
    """Defines a ReconciliationPolicy.


    :ivar state: The state of the ReconciliationPolicy. Required. Known values are: "inactive" and
     "active".
    :vartype state: str or ~azure.mgmt.toolchainorchestrator.models.ReconciliationState
    :ivar interval: Policy interval. Required.
    :vartype interval: str
    """

    state: Union[str, "_models.ReconciliationState"] = rest_field()
    """The state of the ReconciliationPolicy. Required. Known values are: \"inactive\" and \"active\"."""
    interval: str = rest_field()
    """Policy interval. Required."""

    @overload
    def __init__(
        self,
        *,
        state: Union[str, "_models.ReconciliationState"],
        interval: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Solution(TrackedResource):
    """A Solution resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.SolutionProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.SolutionProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SolutionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionProperties(_model_base.Model):
    """The properties of a Solution resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""


class SolutionTagsUpdate(_model_base.Model):
    """The type used for updating tags in Solution resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionVersion(TrackedResource):
    """A SolutionVersion resource belonging to a Solution resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.SolutionVersionProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.SolutionVersionProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SolutionVersionProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionVersionProperties(_model_base.Model):
    """The properties of a SolutionVersion resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar components: A list of components.
    :vartype components: list[~azure.mgmt.toolchainorchestrator.models.ComponentProperties]
    :ivar display_name: The display name of the SolutionVersion resource.
    :vartype display_name: str
    :ivar metadata: The metadata information of the SolutionVersion resource.
    :vartype metadata: dict[str, str]
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    components: Optional[List["_models.ComponentProperties"]] = rest_field()
    """A list of components."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The display name of the SolutionVersion resource."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """The metadata information of the SolutionVersion resource."""

    @overload
    def __init__(
        self,
        *,
        components: Optional[List["_models.ComponentProperties"]] = None,
        display_name: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionVersionTagsUpdate(_model_base.Model):
    """The type used for updating tags in SolutionVersion resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StageHistoryProperties(_model_base.Model):
    """Defines a StageHistory.


    :ivar inputs: The inputs of the StageHistory, Inputs holds a key-value map of user-defined
     parameters for the initial stage.
    :vartype inputs: dict[str, any]
    :ivar outputs: The outputs of the StageHistory, it is different as the different input stages.
    :vartype outputs: dict[str, any]
    :ivar stage: The stage of the StageHistory. Required.
    :vartype stage: str
    :ivar is_active: The state of the StageHistory.
    :vartype is_active: bool
    :ivar next_stage: The nextStage of the StageHistory.
    :vartype next_stage: str
    :ivar error_message: The errorMessage of the StageHistory.
    :vartype error_message: str
    :ivar status: The status code of the StageHistory.
    :vartype status: int
    :ivar status_message: The status message of the StageHistory.
    :vartype status_message: str
    """

    inputs: Optional[Dict[str, Any]] = rest_field()
    """The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the
     initial stage."""
    outputs: Optional[Dict[str, Any]] = rest_field()
    """The outputs of the StageHistory, it is different as the different input stages."""
    stage: str = rest_field()
    """The stage of the StageHistory. Required."""
    is_active: Optional[bool] = rest_field(name="isActive")
    """The state of the StageHistory."""
    next_stage: Optional[str] = rest_field(name="nextStage")
    """The nextStage of the StageHistory."""
    error_message: Optional[str] = rest_field(name="errorMessage")
    """The errorMessage of the StageHistory."""
    status: Optional[int] = rest_field()
    """The status code of the StageHistory."""
    status_message: Optional[str] = rest_field(name="statusMessage")
    """The status message of the StageHistory."""

    @overload
    def __init__(
        self,
        *,
        stage: str,
        inputs: Optional[Dict[str, Any]] = None,
        outputs: Optional[Dict[str, Any]] = None,
        is_active: Optional[bool] = None,
        next_stage: Optional[str] = None,
        error_message: Optional[str] = None,
        status: Optional[int] = None,
        status_message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StageProperties(_model_base.Model):
    """Defines a Stage.

    :ivar contexts: The contexts of the Stage.
    :vartype contexts: str
    :ivar config: The config of the Stage.
    :vartype config: dict[str, any]
    :ivar inputs: The inputs of the Stage.
    :vartype inputs: dict[str, any]
    :ivar name: The name of the Stage.
    :vartype name: str
    :ivar provider: The provider of the Stage.
    :vartype provider: str
    :ivar stage_selector: The stageSelector of the Stage.
    :vartype stage_selector: str
    :ivar schedule: The schedule of the Stage.
    :vartype schedule: ~datetime.datetime
    """

    contexts: Optional[str] = rest_field()
    """The contexts of the Stage."""
    config: Optional[Dict[str, Any]] = rest_field()
    """The config of the Stage."""
    inputs: Optional[Dict[str, Any]] = rest_field()
    """The inputs of the Stage."""
    name: Optional[str] = rest_field()
    """The name of the Stage."""
    provider: Optional[str] = rest_field()
    """The provider of the Stage."""
    stage_selector: Optional[str] = rest_field(name="stageSelector")
    """The stageSelector of the Stage."""
    schedule: Optional[datetime.datetime] = rest_field(format="rfc3339")
    """The schedule of the Stage."""

    @overload
    def __init__(
        self,
        *,
        contexts: Optional[str] = None,
        config: Optional[Dict[str, Any]] = None,
        inputs: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        provider: Optional[str] = None,
        stage_selector: Optional[str] = None,
        schedule: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.toolchainorchestrator.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.toolchainorchestrator.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Target(TrackedResource):
    """A Target resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.toolchainorchestrator.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.toolchainorchestrator.models.TargetProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.toolchainorchestrator.models.ExtendedLocation
    """

    properties: Optional["_models.TargetProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.TargetProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetProperties(_model_base.Model):
    """The properties of a Target resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.toolchainorchestrator.models.ProvisioningState
    :ivar metadata: The metadata information of the TargetVersion.
    :vartype metadata: dict[str, str]
    :ivar properties: The properties of the TargetVersion.
    :vartype properties: dict[str, str]
    :ivar display_name: The display name of the TargetVersion.
    :vartype display_name: str
    :ivar constraints: The constraints of the TargetVersion.
    :vartype constraints: str
    :ivar scope: The scope of the TargetVersion.
    :vartype scope: str
    :ivar topologies: Defines the device topology for a target or instance.
    :vartype topologies: list[~azure.mgmt.toolchainorchestrator.models.TopologyProperties]
    :ivar components: A list of components.
    :vartype components: list[~azure.mgmt.toolchainorchestrator.models.ComponentProperties]
    :ivar reconciliation_policy: The reconciliationPolicy of the TargetVersion.
    :vartype reconciliation_policy:
     ~azure.mgmt.toolchainorchestrator.models.ReconciliationPolicyProperties
    :ivar is_dry_run: The running state for the TargetVersion resource.
    :vartype is_dry_run: bool
    :ivar status: The status of the TargetVersion.
    :vartype status: ~azure.mgmt.toolchainorchestrator.models.InstanceTargetStatusProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", and
     \"Canceled\"."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """The metadata information of the TargetVersion."""
    properties: Optional[Dict[str, str]] = rest_field()
    """The properties of the TargetVersion."""
    display_name: Optional[str] = rest_field(name="displayName")
    """The display name of the TargetVersion."""
    constraints: Optional[str] = rest_field()
    """The constraints of the TargetVersion."""
    scope: Optional[str] = rest_field()
    """The scope of the TargetVersion."""
    topologies: Optional[List["_models.TopologyProperties"]] = rest_field()
    """Defines the device topology for a target or instance."""
    components: Optional[List["_models.ComponentProperties"]] = rest_field()
    """A list of components."""
    reconciliation_policy: Optional["_models.ReconciliationPolicyProperties"] = rest_field(name="reconciliationPolicy")
    """The reconciliationPolicy of the TargetVersion."""
    is_dry_run: Optional[bool] = rest_field(name="isDryRun")
    """The running state for the TargetVersion resource."""
    status: Optional["_models.InstanceTargetStatusProperties"] = rest_field(visibility=["read"])
    """The status of the TargetVersion."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        display_name: Optional[str] = None,
        constraints: Optional[str] = None,
        scope: Optional[str] = None,
        topologies: Optional[List["_models.TopologyProperties"]] = None,
        components: Optional[List["_models.ComponentProperties"]] = None,
        reconciliation_policy: Optional["_models.ReconciliationPolicyProperties"] = None,
        is_dry_run: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetSelectorProperties(_model_base.Model):
    """Properties of the reference target.

    :ivar name: Name of the TargetVersion resource.
    :vartype name: str
    :ivar selector: The selector of the TargetVersion resource.
    :vartype selector: dict[str, str]
    """

    name: Optional[str] = rest_field()
    """Name of the TargetVersion resource."""
    selector: Optional[Dict[str, str]] = rest_field()
    """The selector of the TargetVersion resource."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        selector: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetTagsUpdate(_model_base.Model):
    """The type used for updating tags in Target resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TopologyProperties(_model_base.Model):
    """Defines a desired runtime topology.

    :ivar bindings: The bindings of the Topology.
    :vartype bindings: list[~azure.mgmt.toolchainorchestrator.models.BindingProperties]
    """

    bindings: Optional[List["_models.BindingProperties"]] = rest_field()
    """The bindings of the Topology."""

    @overload
    def __init__(
        self,
        *,
        bindings: Optional[List["_models.BindingProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
