# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import OnlineExperimentationClientTestBase, OnlineExperimentationPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestOnlineExperimentation(OnlineExperimentationClientTestBase):
    @OnlineExperimentationPreparer()
    @recorded_by_proxy
    def test_get_metric(self, onlineexperimentation_endpoint):
        client = self.create_client(endpoint=onlineexperimentation_endpoint)
        response = client.get_metric(
            experiment_metric_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @OnlineExperimentationPreparer()
    @recorded_by_proxy
    def test_create_or_update_metric(self, onlineexperimentation_endpoint):
        client = self.create_client(endpoint=onlineexperimentation_endpoint)
        response = client.create_or_update_metric(
            experiment_metric_id="str",
            resource={
                "categories": ["str"],
                "definition": "experiment_metric_definition",
                "description": "str",
                "desiredDirection": "str",
                "displayName": "str",
                "eTag": "str",
                "id": "str",
                "lastModifiedAt": "2020-02-20 00:00:00",
                "lifecycle": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @OnlineExperimentationPreparer()
    @recorded_by_proxy
    def test_validate_metric(self, onlineexperimentation_endpoint):
        client = self.create_client(endpoint=onlineexperimentation_endpoint)
        response = client.validate_metric(
            experiment_metric_id="str",
            body={
                "categories": ["str"],
                "definition": "experiment_metric_definition",
                "description": "str",
                "desiredDirection": "str",
                "displayName": "str",
                "eTag": "str",
                "id": "str",
                "lastModifiedAt": "2020-02-20 00:00:00",
                "lifecycle": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @OnlineExperimentationPreparer()
    @recorded_by_proxy
    def test_delete_metric(self, onlineexperimentation_endpoint):
        client = self.create_client(endpoint=onlineexperimentation_endpoint)
        response = client.delete_metric(
            experiment_metric_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @OnlineExperimentationPreparer()
    @recorded_by_proxy
    def test_list_metrics(self, onlineexperimentation_endpoint):
        client = self.create_client(endpoint=onlineexperimentation_endpoint)
        response = client.list_metrics()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
