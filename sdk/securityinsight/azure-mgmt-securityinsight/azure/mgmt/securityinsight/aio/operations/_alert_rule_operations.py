# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, AsyncIterator, Callable, Dict, IO, Optional, Type, TypeVar, Union, cast, overload

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, ResourceNotModifiedError, StreamClosedError, StreamConsumedError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ... import models as _models
from ...operations._alert_rule_operations import build_trigger_rule_run_request

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class AlertRuleOperations: 
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.securityinsight.aio.SecurityInsights`'s
        :attr:`alert_rule` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")




    async def _trigger_rule_run_initial(
        self,
        resource_group_name: str,
        workspace_name: str,
        rule_id: str,
        analytics_rule_run_trigger_parameter: Union[_models.AnalyticsRuleRunTrigger, IO[bytes]],
        **kwargs: Any
    ) -> AsyncIterator[bytes]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))
        content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))
        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop(
            'cls', None
        )

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(analytics_rule_run_trigger_parameter, (IOBase, bytes)):
            _content = analytics_rule_run_trigger_parameter
        else:
            _json = self._serialize.body(analytics_rule_run_trigger_parameter, 'AnalyticsRuleRunTrigger')

        _request = build_trigger_rule_run_request(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            rule_id=rule_id,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _decompress = kwargs.pop('decompress', True)
        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(   # pylint: disable=protected-access
            _request,
            stream=_stream,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            try:
                await response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        response_headers['Location']=self._deserialize('str', response.headers.get('Location'))

        deserialized = response.stream_download(self._client._pipeline, decompress=_decompress)

        if cls:
            return cls(pipeline_response, deserialized, response_headers) # type: ignore

        return deserialized  # type: ignore



    @overload
    async def begin_trigger_rule_run(
        self,
        resource_group_name: str,
        workspace_name: str,
        rule_id: str,
        analytics_rule_run_trigger_parameter: _models.AnalyticsRuleRunTrigger,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[None]:
        """triggers analytics rule run.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param rule_id: Alert rule ID. Required.
        :type rule_id: str
        :param analytics_rule_run_trigger_parameter: The Analytics Rule Run Trigger parameter.
         Required.
        :type analytics_rule_run_trigger_parameter:
         ~azure.mgmt.securityinsight.models.AnalyticsRuleRunTrigger
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_trigger_rule_run(
        self,
        resource_group_name: str,
        workspace_name: str,
        rule_id: str,
        analytics_rule_run_trigger_parameter: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[None]:
        """triggers analytics rule run.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param rule_id: Alert rule ID. Required.
        :type rule_id: str
        :param analytics_rule_run_trigger_parameter: The Analytics Rule Run Trigger parameter.
         Required.
        :type analytics_rule_run_trigger_parameter: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """


    @distributed_trace_async
    async def begin_trigger_rule_run(
        self,
        resource_group_name: str,
        workspace_name: str,
        rule_id: str,
        analytics_rule_run_trigger_parameter: Union[_models.AnalyticsRuleRunTrigger, IO[bytes]],
        **kwargs: Any
    ) -> AsyncLROPoller[None]:
        """triggers analytics rule run.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param rule_id: Alert rule ID. Required.
        :type rule_id: str
        :param analytics_rule_run_trigger_parameter: The Analytics Rule Run Trigger parameter. Is
         either a AnalyticsRuleRunTrigger type or a IO[bytes] type. Required.
        :type analytics_rule_run_trigger_parameter:
         ~azure.mgmt.securityinsight.models.AnalyticsRuleRunTrigger or IO[bytes]
        :return: An instance of AsyncLROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))
        content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))
        cls: ClsType[None] = kwargs.pop(
            'cls', None
        )
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop('polling', True)
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token: Optional[str] = kwargs.pop('continuation_token', None)
        if cont_token is None:
            raw_result = await self._trigger_rule_run_initial(
                resource_group_name=resource_group_name,
                workspace_name=workspace_name,
                rule_id=rule_id,
                analytics_rule_run_trigger_parameter=analytics_rule_run_trigger_parameter,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x,y,z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            await raw_result.http_response.read() # type: ignore
        kwargs.pop('error_map', None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {}) # type: ignore


        if polling is True:
            polling_method: AsyncPollingMethod = cast(AsyncPollingMethod, AsyncARMPolling(
                lro_delay,
                lro_options={'final-state-via': 'location'},
                
                **kwargs
        ))
        elif polling is False: polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        return AsyncLROPoller[None](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
            )


