# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight.aio import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"

@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsDataConnectorDefinitionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights, is_async=True)
    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.data_connector_definitions.list(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.data_connector_definitions.get(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_definition_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.data_connector_definitions.create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_definition_name="str"
,
            connector_definition_input={
                "kind": "Customizable",
                "connectionsConfig": {
                    "templateSpecName": "str",
                    "templateSpecVersion": "str"
                },
                "connectorUiConfig": {
                    "connectivityCriteria": [
                        {
                            "type": "str",
                            "value": [
                                "str"
                            ]
                        }
                    ],
                    "dataTypes": [
                        {
                            "lastDataReceivedQuery": "str",
                            "name": "str"
                        }
                    ],
                    "descriptionMarkdown": "str",
                    "graphQueries": [
                        {
                            "baseQuery": "str",
                            "legend": "str",
                            "metricName": "str"
                        }
                    ],
                    "instructionSteps": [
                        {
                            "description": "str",
                            "innerSteps": [
                                ...
                            ],
                            "instructions": [
                                {
                                    "parameters": {},
                                    "type": "str"
                                }
                            ],
                            "title": "str"
                        }
                    ],
                    "permissions": {
                        "customs": [
                            {
                                "description": "str",
                                "name": "str"
                            }
                        ],
                        "licenses": [
                            "str"
                        ],
                        "resourceProvider": [
                            {
                                "permissionsDisplayText": "str",
                                "provider": "str",
                                "providerDisplayName": "str",
                                "requiredPermissions": {
                                    "action": bool,
                                    "delete": bool,
                                    "read": bool,
                                    "write": bool
                                },
                                "scope": "str"
                            }
                        ],
                        "tenant": [
                            "str"
                        ]
                    },
                    "publisher": "str",
                    "title": "str",
                    "availability": {
                        "isPreview": bool,
                        "status": 0
                    },
                    "id": "str",
                    "isConnectivityCriteriasMatchSome": bool,
                    "logo": "str"
                },
                "createdTimeUtc": "2020-02-20 00:00:00",
                "etag": "str",
                "id": "str",
                "lastModifiedUtc": "2020-02-20 00:00:00",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str"
                },
                "type": "str"
            }
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.data_connector_definitions.delete(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_definition_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

