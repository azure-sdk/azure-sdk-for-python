# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight.aio import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsThreatIntelligenceIndicatorOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_indicator(self, resource_group):
        response = await self.client.threat_intelligence_indicator.create_indicator(
            resource_group_name=resource_group.name,
            workspace_name="str",
            threat_intelligence_properties={
                "kind": "indicator",
                "additionalData": {"str": {}},
                "confidence": 0,
                "created": "str",
                "createdByRef": "str",
                "defanged": bool,
                "description": "str",
                "displayName": "str",
                "etag": "str",
                "extensions": {"str": {}},
                "externalId": "str",
                "externalLastUpdatedTimeUtc": "str",
                "externalReferences": [
                    {
                        "description": "str",
                        "externalId": "str",
                        "hashes": {"str": "str"},
                        "sourceName": "str",
                        "url": "str",
                    }
                ],
                "friendlyName": "str",
                "granularMarkings": [{"language": "str", "markingRef": 0, "selectors": ["str"]}],
                "id": "str",
                "indicatorTypes": ["str"],
                "killChainPhases": [{"killChainName": "str", "phaseName": "str"}],
                "labels": ["str"],
                "language": "str",
                "lastUpdatedTimeUtc": "str",
                "modified": "str",
                "name": "str",
                "objectMarkingRefs": ["str"],
                "parsedPattern": [
                    {"patternTypeKey": "str", "patternTypeValues": [{"value": "str", "valueType": "str"}]}
                ],
                "pattern": "str",
                "patternType": "str",
                "patternVersion": "str",
                "revoked": bool,
                "source": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "threatIntelligenceTags": ["str"],
                "threatTypes": ["str"],
                "type": "str",
                "validFrom": "str",
                "validUntil": "str",
            },
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.threat_intelligence_indicator.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create(self, resource_group):
        response = await self.client.threat_intelligence_indicator.create(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            threat_intelligence_properties={
                "kind": "indicator",
                "additionalData": {"str": {}},
                "confidence": 0,
                "created": "str",
                "createdByRef": "str",
                "defanged": bool,
                "description": "str",
                "displayName": "str",
                "etag": "str",
                "extensions": {"str": {}},
                "externalId": "str",
                "externalLastUpdatedTimeUtc": "str",
                "externalReferences": [
                    {
                        "description": "str",
                        "externalId": "str",
                        "hashes": {"str": "str"},
                        "sourceName": "str",
                        "url": "str",
                    }
                ],
                "friendlyName": "str",
                "granularMarkings": [{"language": "str", "markingRef": 0, "selectors": ["str"]}],
                "id": "str",
                "indicatorTypes": ["str"],
                "killChainPhases": [{"killChainName": "str", "phaseName": "str"}],
                "labels": ["str"],
                "language": "str",
                "lastUpdatedTimeUtc": "str",
                "modified": "str",
                "name": "str",
                "objectMarkingRefs": ["str"],
                "parsedPattern": [
                    {"patternTypeKey": "str", "patternTypeValues": [{"value": "str", "valueType": "str"}]}
                ],
                "pattern": "str",
                "patternType": "str",
                "patternVersion": "str",
                "revoked": bool,
                "source": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "threatIntelligenceTags": ["str"],
                "threatTypes": ["str"],
                "type": "str",
                "validFrom": "str",
                "validUntil": "str",
            },
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.threat_intelligence_indicator.delete(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_query_indicators(self, resource_group):
        response = self.client.threat_intelligence_indicator.query_indicators(
            resource_group_name=resource_group.name,
            workspace_name="str",
            threat_intelligence_filtering_criteria={
                "ids": ["str"],
                "includeDisabled": bool,
                "keywords": ["str"],
                "maxConfidence": 0,
                "maxValidUntil": "str",
                "minConfidence": 0,
                "minValidUntil": "str",
                "pageSize": 0,
                "patternTypes": ["str"],
                "skipToken": "str",
                "sortBy": [{"itemKey": "str", "sortOrder": "str"}],
                "sources": ["str"],
                "threatTypes": ["str"],
            },
            api_version="2024-03-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_append_tags(self, resource_group):
        response = await self.client.threat_intelligence_indicator.append_tags(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            threat_intelligence_append_tags={"threatIntelligenceTags": ["str"]},
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_replace_tags(self, resource_group):
        response = await self.client.threat_intelligence_indicator.replace_tags(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            threat_intelligence_replace_tags={
                "kind": "indicator",
                "additionalData": {"str": {}},
                "confidence": 0,
                "created": "str",
                "createdByRef": "str",
                "defanged": bool,
                "description": "str",
                "displayName": "str",
                "etag": "str",
                "extensions": {"str": {}},
                "externalId": "str",
                "externalLastUpdatedTimeUtc": "str",
                "externalReferences": [
                    {
                        "description": "str",
                        "externalId": "str",
                        "hashes": {"str": "str"},
                        "sourceName": "str",
                        "url": "str",
                    }
                ],
                "friendlyName": "str",
                "granularMarkings": [{"language": "str", "markingRef": 0, "selectors": ["str"]}],
                "id": "str",
                "indicatorTypes": ["str"],
                "killChainPhases": [{"killChainName": "str", "phaseName": "str"}],
                "labels": ["str"],
                "language": "str",
                "lastUpdatedTimeUtc": "str",
                "modified": "str",
                "name": "str",
                "objectMarkingRefs": ["str"],
                "parsedPattern": [
                    {"patternTypeKey": "str", "patternTypeValues": [{"value": "str", "valueType": "str"}]}
                ],
                "pattern": "str",
                "patternType": "str",
                "patternVersion": "str",
                "revoked": bool,
                "source": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "threatIntelligenceTags": ["str"],
                "threatTypes": ["str"],
                "type": "str",
                "validFrom": "str",
                "validUntil": "str",
            },
            api_version="2024-03-01",
        )

        # please add some check logic here by yourself
        # ...
