# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"

@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsDataConnectorsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights)
    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.data_connectors.list(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.data_connectors.get(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.data_connectors.create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_id="str"
,
            data_connector={
                "kind": "APIPolling",
                "connectorUiConfig": {
                    "availability": {
                        "isPreview": bool,
                        "status": 1
                    },
                    "connectivityCriteria": [
                        {
                            "type": "str",
                            "value": [
                                "str"
                            ]
                        }
                    ],
                    "dataTypes": [
                        {
                            "lastDataReceivedQuery": "str",
                            "name": "str"
                        }
                    ],
                    "descriptionMarkdown": "str",
                    "graphQueries": [
                        {
                            "baseQuery": "str",
                            "legend": "str",
                            "metricName": "str"
                        }
                    ],
                    "graphQueriesTableName": "str",
                    "instructionSteps": [
                        {
                            "description": "str",
                            "instructions": [
                                {
                                    "type": "str",
                                    "parameters": {}
                                }
                            ],
                            "title": "str"
                        }
                    ],
                    "permissions": {
                        "customs": [
                            {
                                "description": "str",
                                "name": "str"
                            }
                        ],
                        "resourceProvider": [
                            {
                                "permissionsDisplayText": "str",
                                "provider": "str",
                                "providerDisplayName": "str",
                                "requiredPermissions": {
                                    "action": bool,
                                    "delete": bool,
                                    "read": bool,
                                    "write": bool
                                },
                                "scope": "str"
                            }
                        ]
                    },
                    "publisher": "str",
                    "sampleQueries": [
                        {
                            "description": "str",
                            "query": "str"
                        }
                    ],
                    "title": "str",
                    "customImage": "str"
                },
                "etag": "str",
                "id": "str",
                "name": "str",
                "pollingConfig": {
                    "auth": {
                        "authType": "str",
                        "apiKeyIdentifier": "str",
                        "apiKeyName": "str",
                        "authorizationEndpoint": "str",
                        "authorizationEndpointQueryParameters": {},
                        "flowName": "str",
                        "isApiKeyInPostPayload": "str",
                        "isClientSecretInHeader": bool,
                        "redirectionEndpoint": "str",
                        "scope": "str",
                        "tokenEndpoint": "str",
                        "tokenEndpointHeaders": {},
                        "tokenEndpointQueryParameters": {}
                    },
                    "request": {
                        "apiEndpoint": "str",
                        "httpMethod": "str",
                        "queryTimeFormat": "str",
                        "queryWindowInMin": 0,
                        "endTimeAttributeName": "str",
                        "headers": {},
                        "queryParameters": {},
                        "queryParametersTemplate": "str",
                        "rateLimitQps": 0,
                        "retryCount": 0,
                        "startTimeAttributeName": "str",
                        "timeoutInSeconds": 0
                    },
                    "isActive": bool,
                    "paging": {
                        "pagingType": "str",
                        "nextPageParaName": "str",
                        "nextPageTokenJsonPath": "str",
                        "pageCountAttributePath": "str",
                        "pageSize": 0,
                        "pageSizeParaName": "str",
                        "pageTimeStampAttributePath": "str",
                        "pageTotalCountAttributePath": "str",
                        "searchTheLatestTimeStampFromEventsList": "str"
                    },
                    "response": {
                        "eventsJsonPaths": [
                            "str"
                        ],
                        "isGzipCompressed": bool,
                        "successStatusJsonPath": "str",
                        "successStatusValue": "str"
                    }
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str"
                },
                "type": "str"
            }
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.data_connectors.delete(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connect(self, resource_group):
        response = self.client.data_connectors.connect(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_id="str"
,
            connect_body={
                "apiKey": "str",
                "authorizationCode": "str",
                "clientId": "str",
                "clientSecret": "str",
                "dataCollectionEndpoint": "str",
                "dataCollectionRuleImmutableId": "str",
                "kind": "str",
                "outputStream": "str",
                "password": "str",
                "requestConfigUserInputValues": [
                    {}
                ],
                "userName": "str"
            }
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_disconnect(self, resource_group):
        response = self.client.data_connectors.disconnect(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            data_connector_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

