# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"

@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsFileImportsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights)
    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.file_imports.list(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.file_imports.get(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            file_import_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create(self, resource_group):
        response = self.client.file_imports.create(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            file_import_id="str"
,
            file_import={
                "contentType": "str",
                "createdTimeUTC": "2020-02-20 00:00:00",
                "errorFile": {
                    "deleteStatus": "str",
                    "fileContentUri": "str",
                    "fileFormat": "str",
                    "fileName": "str",
                    "fileSize": 0
                },
                "errorsPreview": [
                    {
                        "errorMessages": [
                            "str"
                        ],
                        "recordIndex": 0
                    }
                ],
                "filesValidUntilTimeUTC": "2020-02-20 00:00:00",
                "id": "str",
                "importFile": {
                    "deleteStatus": "str",
                    "fileContentUri": "str",
                    "fileFormat": "str",
                    "fileName": "str",
                    "fileSize": 0
                },
                "importValidUntilTimeUTC": "2020-02-20 00:00:00",
                "ingestedRecordCount": 0,
                "ingestionMode": "str",
                "name": "str",
                "source": "str",
                "state": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str"
                },
                "totalRecordCount": 0,
                "type": "str",
                "validRecordCount": 0
            }
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.file_imports.begin_delete(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            file_import_id="str"
,
            api_version="2024-04-01-preview"
,
        ).result() # call '.result()' to poll until service return final result
        
        # please add some check logic here by yourself
        # ...

