# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight.aio import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsSourceControlsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_source_controls_list(self, resource_group):
        response = self.client.source_controls.list(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-04-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_source_controls_get(self, resource_group):
        response = await self.client.source_controls.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            source_control_id="str",
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_source_controls_create(self, resource_group):
        response = await self.client.source_controls.create(
            resource_group_name=resource_group.name,
            workspace_name="str",
            source_control_id="str",
            source_control={
                "contentTypes": ["str"],
                "displayName": "str",
                "repoType": "str",
                "repository": {"branch": "str", "url": "str", "deploymentLogsUrl": "str", "displayUrl": "str"},
                "description": "str",
                "etag": "str",
                "id": "str",
                "lastDeploymentInfo": {
                    "deployment": {
                        "deploymentId": "str",
                        "deploymentLogsUrl": "str",
                        "deploymentResult": "str",
                        "deploymentState": "str",
                        "deploymentTime": "2020-02-20 00:00:00",
                    },
                    "deploymentFetchStatus": "str",
                    "message": "str",
                },
                "name": "str",
                "pullRequest": {"state": "str", "url": "str"},
                "repositoryAccess": {
                    "kind": "str",
                    "clientId": "str",
                    "code": "str",
                    "installationId": "str",
                    "state": "str",
                    "token": "str",
                },
                "repositoryResourceInfo": {
                    "azureDevOpsResourceInfo": {"pipelineId": "str", "serviceConnectionId": "str"},
                    "gitHubResourceInfo": {"appInstallationId": "str"},
                    "webhook": {
                        "rotateWebhookSecret": bool,
                        "webhookId": "str",
                        "webhookSecretUpdateTime": "2020-02-20 00:00:00",
                        "webhookUrl": "str",
                    },
                },
                "servicePrincipal": {
                    "appId": "str",
                    "credentialsExpireOn": "2020-02-20 00:00:00",
                    "id": "str",
                    "tenantId": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
                "version": "str",
            },
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_source_controls_delete(self, resource_group):
        response = await self.client.source_controls.delete(
            resource_group_name=resource_group.name,
            workspace_name="str",
            source_control_id="str",
            repository_access={
                "kind": "str",
                "clientId": "str",
                "code": "str",
                "installationId": "str",
                "state": "str",
                "token": "str",
            },
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...
