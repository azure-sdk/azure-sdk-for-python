# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.securityinsight.aio import SecurityInsights

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"

@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityInsightsBookmarksOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityInsights, is_async=True)
    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.bookmarks.list(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            api_version="2024-04-01-preview"
,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.bookmarks.get(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            bookmark_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.bookmarks.create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            bookmark_id="str"
,
            bookmark={
                "created": "2020-02-20 00:00:00",
                "createdBy": {
                    "email": "str",
                    "name": "str",
                    "objectId": "str"
                },
                "displayName": "str",
                "entityMappings": [
                    {
                        "entityType": "str",
                        "fieldMappings": [
                            {
                                "identifier": "str",
                                "value": "str"
                            }
                        ]
                    }
                ],
                "etag": "str",
                "eventTime": "2020-02-20 00:00:00",
                "id": "str",
                "incidentInfo": {
                    "incidentId": "str",
                    "relationName": "str",
                    "severity": "str",
                    "title": "str"
                },
                "labels": [
                    "str"
                ],
                "name": "str",
                "notes": "str",
                "query": "str",
                "queryEndTime": "2020-02-20 00:00:00",
                "queryResult": "str",
                "queryStartTime": "2020-02-20 00:00:00",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str"
                },
                "tactics": [
                    "str"
                ],
                "techniques": [
                    "str"
                ],
                "type": "str",
                "updated": "2020-02-20 00:00:00",
                "updatedBy": {
                    "email": "str",
                    "name": "str",
                    "objectId": "str"
                }
            }
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.bookmarks.delete(
            resource_group_name=resource_group.name,
            workspace_name="str"
,
            bookmark_id="str"
,
            api_version="2024-04-01-preview"
,
        )
        
        # please add some check logic here by yourself
        # ...

