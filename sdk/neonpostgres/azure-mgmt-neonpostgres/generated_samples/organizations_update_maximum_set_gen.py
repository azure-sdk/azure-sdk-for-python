# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.neonpostgres import NeonPostgresMgmtClient

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-neonpostgres
# USAGE
    python organizations_update_maximum_set_gen.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = NeonPostgresMgmtClient(
        credential=DefaultAzureCredential(),
        subscription_id="SUBSCRIPTION_ID",
    )

    response = client.organizations.begin_update(
        resource_group_name="rgneon",
        organization_name="testOrg123",
        properties={
            "properties": {
                "companyDetails": {
                    "businessPhone": "nshcjawuxfzplbzeyjbd",
                    "companyName": "bdplqyy",
                    "country": "wdtegxupoepgebaudbdi",
                    "domain": "jxnqzzdhtguhtuouqhx",
                    "numberOfEmployees": 15,
                    "officeAddress": "aqxujkkctyhsefilbcvlo",
                },
                "partnerOrganizationProperties": {
                    "organizationId": "hzwspmh",
                    "organizationName": "test-entity",
                    "singleSignOnProperties": {
                        "aadDomains": ["xwcoekddrjlvwogssbfrv"],
                        "enterpriseAppId": "jstu",
                        "singleSignOnState": "Initial",
                        "singleSignOnUrl": "rduuuystfxtrjaxjbrslrsqxajtou",
                    },
                },
                "projectProperties": {
                    "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                    "branch": {
                        "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                        "databaseName": "xargveemydmqrdtjcdhf",
                        "databases": [
                            {
                                "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                                "branchId": "zoaopvqitcgjdmsllgzdbrb",
                                "entityName": "test-entity",
                                "ownerName": "cutdyjupbqghhxfkmsslzvmjwa",
                            }
                        ],
                        "endpoints": [
                            {
                                "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                                "branchId": "oejenjawxexhuotsxodbl",
                                "endpointType": "read_only",
                                "entityName": "test-entity",
                                "projectId": "fhfdyuiaaftqormerayks",
                            }
                        ],
                        "entityName": "test-entity",
                        "parentId": "test-id",
                        "projectId": "vtdzaxdiwnzvq",
                        "roleName": "imfhfgfpamibgcgibgxor",
                        "roles": [
                            {
                                "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                                "branchId": "iecxepxhnzhjzeiguki",
                                "entityName": "test-entity",
                                "isSuperUser": True,
                                "permissions": ["ddwmkyztotgspcbetfokelddpmq"],
                            }
                        ],
                    },
                    "databases": [
                        {
                            "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                            "branchId": "zoaopvqitcgjdmsllgzdbrb",
                            "entityName": "test-entity",
                            "ownerName": "cutdyjupbqghhxfkmsslzvmjwa",
                        }
                    ],
                    "endpoints": [
                        {
                            "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                            "branchId": "oejenjawxexhuotsxodbl",
                            "endpointType": "read_only",
                            "entityName": "test-entity",
                            "projectId": "fhfdyuiaaftqormerayks",
                        }
                    ],
                    "entityName": "test-entity",
                    "pgVersion": 1,
                    "regionId": "cpnssldzuftdqgjdaqzjayqujpb",
                    "roles": [
                        {
                            "attributes": [{"name": "ioyjfywmt", "value": "sfbpcr"}],
                            "branchId": "iecxepxhnzhjzeiguki",
                            "entityName": "test-entity",
                            "isSuperUser": True,
                            "permissions": ["ddwmkyztotgspcbetfokelddpmq"],
                        }
                    ],
                    "storage": 3,
                },
                "userDetails": {
                    "emailAddress": "test@microsoft.com",
                    "firstName": "zoqvvuxxyldsfswe",
                    "lastName": "rzvayulpqh",
                    "phoneNumber": "lxxghuhwknsivwcrkug",
                    "upn": "nbh",
                },
            },
            "tags": {"key4550": "utcoxzlakzwabrioeut"},
        },
    ).result()
    print(response)


# x-ms-original-file: 2025-03-01-preview/Organizations_Update_MaximumSet_Gen.json
if __name__ == "__main__":
    main()
