# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, Type, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._scheduled_actions_operations import (
    build_virtual_machines_cancel_operations_request,
    build_virtual_machines_execute_deallocate_request,
    build_virtual_machines_execute_hibernate_request,
    build_virtual_machines_execute_start_request,
    build_virtual_machines_get_operation_errors_request,
    build_virtual_machines_get_operation_status_request,
    build_virtual_machines_submit_deallocate_request,
    build_virtual_machines_submit_hibernate_request,
    build_virtual_machines_submit_start_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ScheduledActionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.computeschedule.aio.MicrosoftComputeSchedule`'s
        :attr:`scheduled_actions` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def virtual_machines_cancel_operations(
        self,
        locationparameter: str,
        request_body: _models.CancelOperationsRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CancelOperationsResponse:
        """virtualMachinesCancelOperations: cancelOperations for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.CancelOperationsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CancelOperationsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.CancelOperationsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_cancel_operations(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CancelOperationsResponse:
        """virtualMachinesCancelOperations: cancelOperations for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CancelOperationsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.CancelOperationsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_cancel_operations(
        self, locationparameter: str, request_body: Union[_models.CancelOperationsRequest, IO[bytes]], **kwargs: Any
    ) -> _models.CancelOperationsResponse:
        """virtualMachinesCancelOperations: cancelOperations for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a CancelOperationsRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.CancelOperationsRequest or IO[bytes]
        :return: CancelOperationsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.CancelOperationsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CancelOperationsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "CancelOperationsRequest")

        _request = build_virtual_machines_cancel_operations_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CancelOperationsResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_execute_deallocate(
        self,
        locationparameter: str,
        request_body: _models.ExecuteDeallocateRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesExecuteDeallocate: executeDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteDeallocateRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_execute_deallocate(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesExecuteDeallocate: executeDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_execute_deallocate(
        self, locationparameter: str, request_body: Union[_models.ExecuteDeallocateRequest, IO[bytes]], **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesExecuteDeallocate: executeDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a ExecuteDeallocateRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteDeallocateRequest or IO[bytes]
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeallocateResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "ExecuteDeallocateRequest")

        _request = build_virtual_machines_execute_deallocate_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("DeallocateResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_execute_hibernate(
        self,
        locationparameter: str,
        request_body: _models.ExecuteHibernateRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesExecuteHibernate: executeHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteHibernateRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_execute_hibernate(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesExecuteHibernate: executeHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_execute_hibernate(
        self, locationparameter: str, request_body: Union[_models.ExecuteHibernateRequest, IO[bytes]], **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesExecuteHibernate: executeHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a ExecuteHibernateRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteHibernateRequest or IO[bytes]
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.HibernateResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "ExecuteHibernateRequest")

        _request = build_virtual_machines_execute_hibernate_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("HibernateResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_execute_start(
        self,
        locationparameter: str,
        request_body: _models.ExecuteStartRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesExecuteStart: executeStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteStartRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_execute_start(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesExecuteStart: executeStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_execute_start(
        self, locationparameter: str, request_body: Union[_models.ExecuteStartRequest, IO[bytes]], **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesExecuteStart: executeStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a ExecuteStartRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.ExecuteStartRequest or IO[bytes]
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.StartResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "ExecuteStartRequest")

        _request = build_virtual_machines_execute_start_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("StartResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_get_operation_errors(
        self,
        locationparameter: str,
        request_body: _models.GetOperationErrorsRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetOperationErrorsResponse:
        """virtualMachinesGetOperationErrors: getOperationErrors associated with an operation on a virtual
        machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.GetOperationErrorsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOperationErrorsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationErrorsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_get_operation_errors(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetOperationErrorsResponse:
        """virtualMachinesGetOperationErrors: getOperationErrors associated with an operation on a virtual
        machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOperationErrorsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationErrorsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_get_operation_errors(
        self, locationparameter: str, request_body: Union[_models.GetOperationErrorsRequest, IO[bytes]], **kwargs: Any
    ) -> _models.GetOperationErrorsResponse:
        """virtualMachinesGetOperationErrors: getOperationErrors associated with an operation on a virtual
        machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a GetOperationErrorsRequest type or a
         IO[bytes] type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.GetOperationErrorsRequest or IO[bytes]
        :return: GetOperationErrorsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationErrorsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetOperationErrorsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "GetOperationErrorsRequest")

        _request = build_virtual_machines_get_operation_errors_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GetOperationErrorsResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_get_operation_status(
        self,
        locationparameter: str,
        request_body: _models.GetOperationStatusRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetOperationStatusResponse:
        """virtualMachinesGetOperationStatus: getOperationStatus for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.GetOperationStatusRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOperationStatusResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_get_operation_status(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetOperationStatusResponse:
        """virtualMachinesGetOperationStatus: getOperationStatus for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOperationStatusResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_get_operation_status(
        self, locationparameter: str, request_body: Union[_models.GetOperationStatusRequest, IO[bytes]], **kwargs: Any
    ) -> _models.GetOperationStatusResponse:
        """virtualMachinesGetOperationStatus: getOperationStatus for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a GetOperationStatusRequest type or a
         IO[bytes] type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.GetOperationStatusRequest or IO[bytes]
        :return: GetOperationStatusResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.GetOperationStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetOperationStatusResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "GetOperationStatusRequest")

        _request = build_virtual_machines_get_operation_status_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GetOperationStatusResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_submit_deallocate(
        self,
        locationparameter: str,
        request_body: _models.SubmitDeallocateRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesSubmitDeallocate: submitDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitDeallocateRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_submit_deallocate(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesSubmitDeallocate: submitDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_submit_deallocate(
        self, locationparameter: str, request_body: Union[_models.SubmitDeallocateRequest, IO[bytes]], **kwargs: Any
    ) -> _models.DeallocateResourceOperationResponse:
        """virtualMachinesSubmitDeallocate: submitDeallocate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a SubmitDeallocateRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitDeallocateRequest or IO[bytes]
        :return: DeallocateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.DeallocateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeallocateResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "SubmitDeallocateRequest")

        _request = build_virtual_machines_submit_deallocate_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("DeallocateResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_submit_hibernate(
        self,
        locationparameter: str,
        request_body: _models.SubmitHibernateRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesSubmitHibernate: submitHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitHibernateRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_submit_hibernate(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesSubmitHibernate: submitHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_submit_hibernate(
        self, locationparameter: str, request_body: Union[_models.SubmitHibernateRequest, IO[bytes]], **kwargs: Any
    ) -> _models.HibernateResourceOperationResponse:
        """virtualMachinesSubmitHibernate: submitHibernate for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a SubmitHibernateRequest type or a IO[bytes]
         type. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitHibernateRequest or IO[bytes]
        :return: HibernateResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.HibernateResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.HibernateResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "SubmitHibernateRequest")

        _request = build_virtual_machines_submit_hibernate_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("HibernateResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def virtual_machines_submit_start(
        self,
        locationparameter: str,
        request_body: _models.SubmitStartRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesSubmitStart: submitStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitStartRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def virtual_machines_submit_start(
        self, locationparameter: str, request_body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesSubmitStart: submitStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Required.
        :type request_body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def virtual_machines_submit_start(
        self, locationparameter: str, request_body: Union[_models.SubmitStartRequest, IO[bytes]], **kwargs: Any
    ) -> _models.StartResourceOperationResponse:
        """virtualMachinesSubmitStart: submitStart for a virtual machine.

        :param locationparameter: The location name. Required.
        :type locationparameter: str
        :param request_body: The request body. Is either a SubmitStartRequest type or a IO[bytes] type.
         Required.
        :type request_body: ~azure.mgmt.computeschedule.models.SubmitStartRequest or IO[bytes]
        :return: StartResourceOperationResponse or the result of cls(response)
        :rtype: ~azure.mgmt.computeschedule.models.StartResourceOperationResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.StartResourceOperationResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request_body, (IOBase, bytes)):
            _content = request_body
        else:
            _json = self._serialize.body(request_body, "SubmitStartRequest")

        _request = build_virtual_machines_submit_start_request(
            locationparameter=locationparameter,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("StartResourceOperationResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
