# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.reservations import AzureReservationAPI

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureReservationAPIReservationOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureReservationAPI)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_begin_available_scopes(self, resource_group):
        response = self.client.reservation.begin_available_scopes(
            reservation_order_id="str",
            reservation_id="str",
            body={"properties": {"scopes": ["str"]}},
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_begin_split(self, resource_group):
        response = self.client.reservation.begin_split(
            reservation_order_id="str",
            body={"quantities": [0], "reservationId": "str"},
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_begin_merge(self, resource_group):
        response = self.client.reservation.begin_merge(
            reservation_order_id="str",
            body={"sources": ["str"]},
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_list(self, resource_group):
        response = self.client.reservation.list(
            reservation_order_id="str",
            api_version="2022-11-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_get(self, resource_group):
        response = self.client.reservation.get(
            reservation_order_id="str",
            reservation_id="str",
            api_version="2022-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_begin_update(self, resource_group):
        response = self.client.reservation.begin_update(
            reservation_order_id="str",
            reservation_id="str",
            parameters={
                "appliedScopeProperties": {
                    "displayName": "str",
                    "managementGroupId": "str",
                    "resourceGroupId": "str",
                    "subscriptionId": "str",
                    "tenantId": "str",
                },
                "appliedScopeType": "str",
                "appliedScopes": ["str"],
                "instanceFlexibility": "str",
                "name": "str",
                "renew": False,
                "renewProperties": {
                    "purchaseProperties": {
                        "appliedScopeProperties": {
                            "displayName": "str",
                            "managementGroupId": "str",
                            "resourceGroupId": "str",
                            "subscriptionId": "str",
                            "tenantId": "str",
                        },
                        "appliedScopeType": "str",
                        "appliedScopes": ["str"],
                        "billingPlan": "str",
                        "billingScopeId": "str",
                        "displayName": "str",
                        "location": "str",
                        "quantity": 0,
                        "renew": False,
                        "reservedResourceProperties": {"instanceFlexibility": "str"},
                        "reservedResourceType": "str",
                        "reviewDateTime": "2020-02-20 00:00:00",
                        "sku": {"name": "str"},
                        "term": "str",
                    }
                },
                "reviewDateTime": "2020-02-20 00:00:00",
            },
            api_version="2022-11-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_archive(self, resource_group):
        response = self.client.reservation.archive(
            reservation_order_id="str",
            reservation_id="str",
            api_version="2022-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_unarchive(self, resource_group):
        response = self.client.reservation.unarchive(
            reservation_order_id="str",
            reservation_id="str",
            api_version="2022-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_list_revisions(self, resource_group):
        response = self.client.reservation.list_revisions(
            reservation_order_id="str",
            reservation_id="str",
            api_version="2022-11-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_reservation_list_all(self, resource_group):
        response = self.client.reservation.list_all(
            api_version="2022-11-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
