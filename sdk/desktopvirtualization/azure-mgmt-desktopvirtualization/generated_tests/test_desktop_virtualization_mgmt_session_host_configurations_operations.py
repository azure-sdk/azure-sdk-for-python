# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.desktopvirtualization import DesktopVirtualizationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDesktopVirtualizationMgmtSessionHostConfigurationsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DesktopVirtualizationMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_session_host_configurations_begin_create_or_update(self, resource_group):
        response = self.client.session_host_configurations.begin_create_or_update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            session_host_configuration={
                "diskInfo": {"diffDiskSettings": {"option": "str", "placement": "str"}, "managedDisk": {"type": "str"}},
                "domainInfo": {
                    "joinType": "str",
                    "activeDirectoryInfo": {
                        "domainCredentials": {"passwordKeyVaultSecretUri": "str", "usernameKeyVaultSecretUri": "str"},
                        "ouPath": "str",
                        "domainName": "str",
                    },
                    "azureActiveDirectoryInfo": {"mdmProviderGuid": "str"},
                },
                "imageInfo": {
                    "type": "str",
                    "customInfo": {"resourceId": "str"},
                    "marketplaceInfo": {"exactVersion": "str", "offer": "str", "publisher": "str", "sku": "str"},
                },
                "networkInfo": {"subnetId": "str", "securityGroupId": "str"},
                "vmAdminCredentials": {"passwordKeyVaultSecretUri": "str", "usernameKeyVaultSecretUri": "str"},
                "vmNamePrefix": "str",
                "vmSizeId": "str",
                "availabilityZones": [0],
                "bootDiagnosticsInfo": {"enabled": bool, "storageUri": "str"},
                "customConfigurationScriptUrl": "str",
                "friendlyName": "str",
                "id": "str",
                "name": "str",
                "provisioningState": "str",
                "securityInfo": {"secureBootEnabled": bool, "type": "str", "vTpmEnabled": bool},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
                "version": "2020-02-20 00:00:00",
                "vmLocation": "str",
                "vmResourceGroup": "str",
                "vmTags": {"str": "str"},
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_session_host_configurations_begin_update(self, resource_group):
        response = self.client.session_host_configurations.begin_update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_session_host_configurations_get(self, resource_group):
        response = self.client.session_host_configurations.get(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_session_host_configurations_list_by_host_pool(self, resource_group):
        response = self.client.session_host_configurations.list_by_host_pool(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
