# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AccessPolicy(_model_base.Model):
    """Represents an access policy.


    :ivar start: The date-time the policy is active. Required.
    :vartype start: ~datetime.datetime
    :ivar expiry: The date-time the policy expires. Required.
    :vartype expiry: ~datetime.datetime
    :ivar permission: The permissions for acl the policy. Required.
    :vartype permission: str
    """

    start: datetime.datetime = rest_field(format="rfc3339", xml={"name": "Start"})
    """The date-time the policy is active. Required."""
    expiry: datetime.datetime = rest_field(format="rfc3339", xml={"name": "Expiry"})
    """The date-time the policy expires. Required."""
    permission: str = rest_field(xml={"name": "Permission"})
    """The permissions for acl the policy. Required."""

    @overload
    def __init__(
        self,
        *,
        start: datetime.datetime,
        expiry: datetime.datetime,
        permission: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArrowConfiguration(_model_base.Model):
    """Represents the Apache Arrow configuration.

    All required parameters must be populated in order to send to server.

    :ivar schema: The Apache Arrow schema. Required.
    :vartype schema: ~azure.storage.blob.models.ArrowField
    """

    schema: List["_models.ArrowField"] = rest_field(xml={"name": "Schema"})
    """The Apache Arrow schema. Required."""

    @overload
    def __init__(
        self,
        *,
        schema: List["_models.ArrowField"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArrowField(_model_base.Model):
    """Represents an Apache Arrow field.

    All required parameters must be populated in order to send to server.

    :ivar type: The arrow field type. Required.
    :vartype type: str
    :ivar name: The arrow field name.
    :vartype name: str
    :ivar precision: The arrow field precision.
    :vartype precision: int
    :ivar scale: The arrow field scale.
    :vartype scale: int
    """

    type: str = rest_field(xml={"name": "Type"})
    """The arrow field type. Required."""
    name: Optional[str] = rest_field(xml={"name": "Name"})
    """The arrow field name."""
    precision: Optional[int] = rest_field(xml={"name": "Precision"})
    """The arrow field precision."""
    scale: Optional[int] = rest_field(xml={"name": "Scale"})
    """The arrow field scale."""

    _xml = {"name": "Field"}

    @overload
    def __init__(
        self,
        *,
        type: str,
        name: Optional[str] = None,
        precision: Optional[int] = None,
        scale: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobFlatListSegment(_model_base.Model):
    """The blob flat list segment.


    :ivar blob_items: The blob items. Required.
    :vartype blob_items: list[~azure.storage.blob.models.BlobItemInternal]
    """

    blob_items: List["_models.BlobItemInternal"] = rest_field(name="blobItems")
    """The blob items. Required."""

    @overload
    def __init__(
        self,
        *,
        blob_items: List["_models.BlobItemInternal"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobHierarchyListSegment(_model_base.Model):
    """Represents an array of blobs.


    :ivar blob_items: The blob items. Required.
    :vartype blob_items: list[~azure.storage.blob.models.BlobItemInternal]
    :ivar blob_prefixes: The blob prefixes.
    :vartype blob_prefixes: list[~azure.storage.blob.models.BlobPrefix]
    """

    blob_items: List["_models.BlobItemInternal"] = rest_field(name="blobItems")
    """The blob items. Required."""
    blob_prefixes: Optional[List["_models.BlobPrefix"]] = rest_field(name="blobPrefixes")
    """The blob prefixes."""

    @overload
    def __init__(
        self,
        *,
        blob_items: List["_models.BlobItemInternal"],
        blob_prefixes: Optional[List["_models.BlobPrefix"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobItemInternal(_model_base.Model):
    """An Azure Storage Blob.


    :ivar name: The name of the blob. Required.
    :vartype name: ~azure.storage.blob.models.BlobName
    :ivar deleted: Whether the blob is deleted. Required.
    :vartype deleted: bool
    :ivar snapshot: The snapshot of the blob. Required.
    :vartype snapshot: str
    :ivar version_id: The version id of the blob.
    :vartype version_id: str
    :ivar is_current_version: Whether the blob is the current version.
    :vartype is_current_version: bool
    :ivar properties: The properties of the blob. Required.
    :vartype properties: ~azure.storage.blob.models.BlobPropertiesInternal
    :ivar metadata: The metadata of the blob.
    :vartype metadata: ~azure.storage.blob.models.BlobMetadata
    :ivar blob_tags: The tags of the blob.
    :vartype blob_tags: ~azure.storage.blob.models.BlobTags
    :ivar object_replication_metadata: The object replication metadata of the blob.
    :vartype object_replication_metadata: ~azure.storage.blob.models.ObjectReplicationMetadata
    :ivar has_versions_only: Whether the blog has versions only.
    :vartype has_versions_only: bool
    """

    name: "_models.BlobName" = rest_field()
    """The name of the blob. Required."""
    deleted: bool = rest_field()
    """Whether the blob is deleted. Required."""
    snapshot: str = rest_field()
    """The snapshot of the blob. Required."""
    version_id: Optional[str] = rest_field(name="versionId")
    """The version id of the blob."""
    is_current_version: Optional[bool] = rest_field(name="isCurrentVersion")
    """Whether the blob is the current version."""
    properties: "_models.BlobPropertiesInternal" = rest_field()
    """The properties of the blob. Required."""
    metadata: Optional["_models.BlobMetadata"] = rest_field()
    """The metadata of the blob."""
    blob_tags: Optional["_models.BlobTags"] = rest_field(name="blobTags")
    """The tags of the blob."""
    object_replication_metadata: Optional["_models.ObjectReplicationMetadata"] = rest_field(
        name="objectReplicationMetadata"
    )
    """The object replication metadata of the blob."""
    has_versions_only: Optional[bool] = rest_field(name="hasVersionsOnly")
    """Whether the blog has versions only."""

    @overload
    def __init__(
        self,
        *,
        name: "_models.BlobName",
        deleted: bool,
        snapshot: str,
        properties: "_models.BlobPropertiesInternal",
        version_id: Optional[str] = None,
        is_current_version: Optional[bool] = None,
        metadata: Optional["_models.BlobMetadata"] = None,
        blob_tags: Optional["_models.BlobTags"] = None,
        object_replication_metadata: Optional["_models.ObjectReplicationMetadata"] = None,
        has_versions_only: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobMetadata(_model_base.Model):
    """The blob metadata.

    :ivar encrypted: Whether the blob metadata is encrypted.
    :vartype encrypted: str
    """

    encrypted: Optional[str] = rest_field()
    """Whether the blob metadata is encrypted."""

    @overload
    def __init__(
        self,
        *,
        encrypted: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobName(_model_base.Model):
    """Represents a blob name.


    :ivar encoded: Whether the blob name is encoded. Required.
    :vartype encoded: bool
    :ivar content: The blob name. Required.
    :vartype content: str
    """

    encoded: bool = rest_field()
    """Whether the blob name is encoded. Required."""
    content: str = rest_field()
    """The blob name. Required."""

    @overload
    def __init__(
        self,
        *,
        encoded: bool,
        content: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobPrefix(_model_base.Model):
    """Represents a blob prefix.


    :ivar name: The blob name. Required.
    :vartype name: ~azure.storage.blob.models.BlobName
    """

    name: "_models.BlobName" = rest_field()
    """The blob name. Required."""

    @overload
    def __init__(
        self,
        *,
        name: "_models.BlobName",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobPropertiesInternal(_model_base.Model):
    """The properties of a blob.


    :ivar creation_time: The date-time the blob was created in RFC1123 format.
    :vartype creation_time: str
    :ivar last_modified: The date-time the blob was last modified in RFC1123 format. Required.
    :vartype last_modified: str
    :ivar e_tag: The blog ETag. Required.
    :vartype e_tag: str
    :ivar content_length: The content length of the blob.
    :vartype content_length: int
    :ivar content_type: The content type of the blob.
    :vartype content_type: str
    :ivar content_encoding: The content encoding of the blob.
    :vartype content_encoding: str
    :ivar content_language: The content language of the blob.
    :vartype content_language: str
    :ivar content_md5: The content MD5 of the blob.
    :vartype content_md5: bytes
    :ivar content_disposition: The content disposition of the blob.
    :vartype content_disposition: str
    :ivar cache_control: The cache control of the blob.
    :vartype cache_control: str
    :ivar blob_sequence_number: The sequence number of the blob.
    :vartype blob_sequence_number: int
    :ivar blob_type: The blob type. Known values are: "BlockBlob", "PageBlob", and "AppendBlob".
    :vartype blob_type: str or ~azure.storage.blob.models.BlobType
    :ivar lease_status: The lease status of the blob. Known values are: "unlocked" and "locked".
    :vartype lease_status: str or ~azure.storage.blob.models.LeaseStatus
    :ivar lease_state: The lease state of the blob. Known values are: "available", "leased",
     "expired", "breaking", and "broken".
    :vartype lease_state: str or ~azure.storage.blob.models.LeaseState
    :ivar lease_duration: The lease duration of the blob. Known values are: "infinite" and "fixed".
    :vartype lease_duration: str or ~azure.storage.blob.models.LeaseDuration
    :ivar copy_id: The copy ID of the blob.
    :vartype copy_id: str
    :ivar copy_status: The copy status of the blob. Known values are: "pending", "success",
     "failed", and "aborted".
    :vartype copy_status: str or ~azure.storage.blob.models.CopyStatus
    :ivar copy_source: The copy source of the blob.
    :vartype copy_source: str
    :ivar copy_progress: The copy progress of the blob.
    :vartype copy_progress: str
    :ivar copy_completion_time: The copy completion time of the blob.
    :vartype copy_completion_time: str
    :ivar copy_status_description: The copy status description of the blob.
    :vartype copy_status_description: str
    :ivar server_encrypted: Whether the blog is encrypted on the server.
    :vartype server_encrypted: bool
    :ivar incremental_copy: Whether the blog is incremental copy.
    :vartype incremental_copy: bool
    :ivar destination_snapshot: The name of the destination snapshot.
    :vartype destination_snapshot: str
    :ivar deleted_time: The time the blob was deleted.
    :vartype deleted_time: str
    :ivar remaining_retention_days: The remaining retention days of the blob.
    :vartype remaining_retention_days: int
    :ivar access_tier: The access tier of the blob. Known values are: "P4", "P6", "P10", "P15",
     "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Premium", and
     "Cold".
    :vartype access_tier: str or ~azure.storage.blob.models.AccessTier
    :ivar access_tier_inferred: Whether the access tier is inferred.
    :vartype access_tier_inferred: bool
    :ivar archive_status: The archive status of the blob. Known values are:
     "rehydrate-pending-to-hot", "rehydrate-pending-to-cool", and "rehydrate-pending-to-cold".
    :vartype archive_status: str or ~azure.storage.blob.models.ArchiveStatus
    :ivar customer_provided_key_sha256: Customer provided key sha256.
    :vartype customer_provided_key_sha256: str
    :ivar encryption_scope: The encryption scope of the blob.
    :vartype encryption_scope: str
    :ivar access_tier_change_time: The access tier change time of the blob.
    :vartype access_tier_change_time: str
    :ivar tag_count: The number of tags for the blob.
    :vartype tag_count: int
    :ivar expires_on: The expire time of the blob.
    :vartype expires_on: str
    :ivar is_sealed: Whether the blob is sealed.
    :vartype is_sealed: bool
    :ivar rehydrate_priority: The rehydrate priority of the blob. Known values are: "High" and
     "Standard".
    :vartype rehydrate_priority: str or ~azure.storage.blob.models.RehydratePriority
    :ivar last_accessed_on: The last access time of the blob.
    :vartype last_accessed_on: str
    :ivar immutability_policy_expires_on: The immutability policy until time of the blob.
    :vartype immutability_policy_expires_on: str
    :ivar immutability_policy_mode: The immutability policy mode of the blob. Known values are:
     "Mutable", "Locked", and "Unlocked".
    :vartype immutability_policy_mode: str or ~azure.storage.blob.models.BlobImmutabilityPolicyMode
    :ivar legal_hold: Whether the blob is under legal hold.
    :vartype legal_hold: bool
    """

    creation_time: Optional[str] = rest_field(name="creationTime")
    """The date-time the blob was created in RFC1123 format."""
    last_modified: str = rest_field(name="lastModified")
    """The date-time the blob was last modified in RFC1123 format. Required."""
    e_tag: str = rest_field(name="eTag")
    """The blog ETag. Required."""
    content_length: Optional[int] = rest_field(name="contentLength")
    """The content length of the blob."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The content type of the blob."""
    content_encoding: Optional[str] = rest_field(name="contentEncoding")
    """The content encoding of the blob."""
    content_language: Optional[str] = rest_field(name="contentLanguage")
    """The content language of the blob."""
    content_md5: Optional[bytes] = rest_field(name="contentMd5", format="base64")
    """The content MD5 of the blob."""
    content_disposition: Optional[str] = rest_field(name="contentDisposition")
    """The content disposition of the blob."""
    cache_control: Optional[str] = rest_field(name="cacheControl")
    """The cache control of the blob."""
    blob_sequence_number: Optional[int] = rest_field(name="blobSequenceNumber")
    """The sequence number of the blob."""
    blob_type: Optional[Union[str, "_models.BlobType"]] = rest_field(name="blobType")
    """The blob type. Known values are: \"BlockBlob\", \"PageBlob\", and \"AppendBlob\"."""
    lease_status: Optional[Union[str, "_models.LeaseStatus"]] = rest_field(name="leaseStatus")
    """The lease status of the blob. Known values are: \"unlocked\" and \"locked\"."""
    lease_state: Optional[Union[str, "_models.LeaseState"]] = rest_field(name="leaseState")
    """The lease state of the blob. Known values are: \"available\", \"leased\", \"expired\",
     \"breaking\", and \"broken\"."""
    lease_duration: Optional[Union[str, "_models.LeaseDuration"]] = rest_field(name="leaseDuration")
    """The lease duration of the blob. Known values are: \"infinite\" and \"fixed\"."""
    copy_id: Optional[str] = rest_field(name="copyId")
    """The copy ID of the blob."""
    copy_status: Optional[Union[str, "_models.CopyStatus"]] = rest_field(name="copyStatus")
    """The copy status of the blob. Known values are: \"pending\", \"success\", \"failed\", and
     \"aborted\"."""
    copy_source: Optional[str] = rest_field(name="copySource")
    """The copy source of the blob."""
    copy_progress: Optional[str] = rest_field(name="copyProgress")
    """The copy progress of the blob."""
    copy_completion_time: Optional[str] = rest_field(name="copyCompletionTime")
    """The copy completion time of the blob."""
    copy_status_description: Optional[str] = rest_field(name="copyStatusDescription")
    """The copy status description of the blob."""
    server_encrypted: Optional[bool] = rest_field(name="serverEncrypted")
    """Whether the blog is encrypted on the server."""
    incremental_copy: Optional[bool] = rest_field(name="incrementalCopy")
    """Whether the blog is incremental copy."""
    destination_snapshot: Optional[str] = rest_field(name="destinationSnapshot")
    """The name of the destination snapshot."""
    deleted_time: Optional[str] = rest_field(name="deletedTime")
    """The time the blob was deleted."""
    remaining_retention_days: Optional[int] = rest_field(name="remainingRetentionDays")
    """The remaining retention days of the blob."""
    access_tier: Optional[Union[str, "_models.AccessTier"]] = rest_field(name="accessTier")
    """The access tier of the blob. Known values are: \"P4\", \"P6\", \"P10\", \"P15\", \"P20\",
     \"P30\", \"P40\", \"P50\", \"P60\", \"P70\", \"P80\", \"Hot\", \"Cool\", \"Archive\",
     \"Premium\", and \"Cold\"."""
    access_tier_inferred: Optional[bool] = rest_field(name="accessTierInferred")
    """Whether the access tier is inferred."""
    archive_status: Optional[Union[str, "_models.ArchiveStatus"]] = rest_field(name="archiveStatus")
    """The archive status of the blob. Known values are: \"rehydrate-pending-to-hot\",
     \"rehydrate-pending-to-cool\", and \"rehydrate-pending-to-cold\"."""
    customer_provided_key_sha256: Optional[str] = rest_field(name="customerProvidedKeySha256")
    """Customer provided key sha256."""
    encryption_scope: Optional[str] = rest_field(name="encryptionScope")
    """The encryption scope of the blob."""
    access_tier_change_time: Optional[str] = rest_field(name="accessTierChangeTime")
    """The access tier change time of the blob."""
    tag_count: Optional[int] = rest_field(name="tagCount")
    """The number of tags for the blob."""
    expires_on: Optional[str] = rest_field(name="expiryTime")
    """The expire time of the blob."""
    is_sealed: Optional[bool] = rest_field(name="sealed")
    """Whether the blob is sealed."""
    rehydrate_priority: Optional[Union[str, "_models.RehydratePriority"]] = rest_field(name="rehydratePriority")
    """The rehydrate priority of the blob. Known values are: \"High\" and \"Standard\"."""
    last_accessed_on: Optional[str] = rest_field(name="lastAccessTime")
    """The last access time of the blob."""
    immutability_policy_expires_on: Optional[str] = rest_field(name="immutabilityPolicyUntilDate")
    """The immutability policy until time of the blob."""
    immutability_policy_mode: Optional[Union[str, "_models.BlobImmutabilityPolicyMode"]] = rest_field(
        name="immutabilityPolicyMode"
    )
    """The immutability policy mode of the blob. Known values are: \"Mutable\", \"Locked\", and
     \"Unlocked\"."""
    legal_hold: Optional[bool] = rest_field(name="legalHold")
    """Whether the blob is under legal hold."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        last_modified: str,
        e_tag: str,
        creation_time: Optional[str] = None,
        content_length: Optional[int] = None,
        content_type: Optional[str] = None,
        content_encoding: Optional[str] = None,
        content_language: Optional[str] = None,
        content_md5: Optional[bytes] = None,
        content_disposition: Optional[str] = None,
        cache_control: Optional[str] = None,
        blob_sequence_number: Optional[int] = None,
        blob_type: Optional[Union[str, "_models.BlobType"]] = None,
        lease_status: Optional[Union[str, "_models.LeaseStatus"]] = None,
        lease_state: Optional[Union[str, "_models.LeaseState"]] = None,
        lease_duration: Optional[Union[str, "_models.LeaseDuration"]] = None,
        copy_id: Optional[str] = None,
        copy_status: Optional[Union[str, "_models.CopyStatus"]] = None,
        copy_source: Optional[str] = None,
        copy_progress: Optional[str] = None,
        copy_completion_time: Optional[str] = None,
        copy_status_description: Optional[str] = None,
        server_encrypted: Optional[bool] = None,
        incremental_copy: Optional[bool] = None,
        destination_snapshot: Optional[str] = None,
        deleted_time: Optional[str] = None,
        remaining_retention_days: Optional[int] = None,
        access_tier: Optional[Union[str, "_models.AccessTier"]] = None,
        access_tier_inferred: Optional[bool] = None,
        archive_status: Optional[Union[str, "_models.ArchiveStatus"]] = None,
        customer_provided_key_sha256: Optional[str] = None,
        encryption_scope: Optional[str] = None,
        access_tier_change_time: Optional[str] = None,
        tag_count: Optional[int] = None,
        expires_on: Optional[str] = None,
        is_sealed: Optional[bool] = None,
        rehydrate_priority: Optional[Union[str, "_models.RehydratePriority"]] = None,
        last_accessed_on: Optional[str] = None,
        immutability_policy_expires_on: Optional[str] = None,
        immutability_policy_mode: Optional[Union[str, "_models.BlobImmutabilityPolicyMode"]] = None,
        legal_hold: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobTag(_model_base.Model):
    """The blob tags.


    :ivar key: The key of the tag. Required.
    :vartype key: str
    :ivar value: The value of the tag. Required.
    :vartype value: str
    """

    key: str = rest_field(xml={"name": "Key"})
    """The key of the tag. Required."""
    value: str = rest_field(xml={"name": "Value"})
    """The value of the tag. Required."""

    _xml = {"name": "Tag"}

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobTags(_model_base.Model):
    """Represents blob tags.


    :ivar blob_tag_set: Represents the blob tags. Required.
    :vartype blob_tag_set: ~azure.storage.blob.models.BlobTag
    """

    blob_tag_set: List["_models.BlobTag"] = rest_field(name="blobTagSet", xml={"name": "TagSet"})
    """Represents the blob tags. Required."""

    _xml = {"name": "Tags"}

    @overload
    def __init__(
        self,
        *,
        blob_tag_set: List["_models.BlobTag"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlockLookupList(_model_base.Model):
    """The Block lookup list.

    :ivar committed: The committed blocks.
    :vartype committed: list[str]
    :ivar uncommitted: The uncommitted blocks.
    :vartype uncommitted: list[str]
    :ivar latest: The latest blocks.
    :vartype latest: list[str]
    """

    committed: Optional[List[str]] = rest_field(xml={"name": "Committed", "unwrapped": True})
    """The committed blocks."""
    uncommitted: Optional[List[str]] = rest_field(xml={"name": "Uncommitted", "unwrapped": True})
    """The uncommitted blocks."""
    latest: Optional[List[str]] = rest_field(xml={"name": "Latest", "unwrapped": True})
    """The latest blocks."""

    _xml = {"name": "BlockList"}

    @overload
    def __init__(
        self,
        *,
        committed: Optional[List[str]] = None,
        uncommitted: Optional[List[str]] = None,
        latest: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClearRange(_model_base.Model):
    """The clear range.


    :ivar start: The start of the byte range. Required.
    :vartype start: int
    :ivar end: The end of the byte range. Required.
    :vartype end: int
    """

    start: int = rest_field()
    """The start of the byte range. Required."""
    end: int = rest_field()
    """The end of the byte range. Required."""

    @overload
    def __init__(
        self,
        *,
        start: int,
        end: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContainerItem(_model_base.Model):
    """An Azure Storage container.


    :ivar name: The name of the container. Required.
    :vartype name: str
    :ivar delete: Whether the container is deleted.
    :vartype delete: bool
    :ivar version: The version of the container.
    :vartype version: str
    :ivar properties: The properties of the container. Required.
    :vartype properties: ~azure.storage.blob.models.ContainerProperties
    :ivar metadata: The metadata of the container.
    :vartype metadata: dict[str, str]
    """

    name: str = rest_field()
    """The name of the container. Required."""
    delete: Optional[bool] = rest_field()
    """Whether the container is deleted."""
    version: Optional[str] = rest_field()
    """The version of the container."""
    properties: "_models.ContainerProperties" = rest_field()
    """The properties of the container. Required."""
    metadata: Optional[Dict[str, str]] = rest_field()
    """The metadata of the container."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: "_models.ContainerProperties",
        delete: Optional[bool] = None,
        version: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContainerProperties(_model_base.Model):
    """The properties of a container.


    :ivar last_modified: The date-time the container was last modified in RFC1123 format. Required.
    :vartype last_modified: str
    :ivar e_tag: The ETag of the container. Required.
    :vartype e_tag: str
    :ivar lease_status: The lease status of the container. Known values are: "unlocked" and
     "locked".
    :vartype lease_status: str or ~azure.storage.blob.models.LeaseStatus
    :ivar lease_state: The lease state of the container. Known values are: "available", "leased",
     "expired", "breaking", and "broken".
    :vartype lease_state: str or ~azure.storage.blob.models.LeaseState
    :ivar lease_duration: The lease duration of the container. Known values are: "infinite" and
     "fixed".
    :vartype lease_duration: str or ~azure.storage.blob.models.LeaseDuration
    :ivar public_access: The public access type of the container. Known values are: "blob" and
     "container".
    :vartype public_access: str or ~azure.storage.blob.models.PublicAccessType
    :ivar has_immutability_policy: Whether it has an immutability policy.
    :vartype has_immutability_policy: bool
    :ivar has_legal_hold: The has legal hold status of the container.
    :vartype has_legal_hold: bool
    :ivar default_encryption_scope: The default encryption scope of the container.
    :vartype default_encryption_scope: str
    :ivar prevent_encryption_scope_override: Whether to prevent encryption scope override.
    :vartype prevent_encryption_scope_override: bool
    :ivar deleted_time: The deleted time of the container.
    :vartype deleted_time: str
    :ivar remaining_retention_days: The remaining retention days of the container.
    :vartype remaining_retention_days: int
    :ivar is_immutable_storage_with_versioning_enabled: Whether immutable storage with versioning
     is enabled.
    :vartype is_immutable_storage_with_versioning_enabled: bool
    """

    last_modified: str = rest_field(name="lastModified")
    """The date-time the container was last modified in RFC1123 format. Required."""
    e_tag: str = rest_field(name="eTag")
    """The ETag of the container. Required."""
    lease_status: Optional[Union[str, "_models.LeaseStatus"]] = rest_field(name="leaseStatus")
    """The lease status of the container. Known values are: \"unlocked\" and \"locked\"."""
    lease_state: Optional[Union[str, "_models.LeaseState"]] = rest_field(name="leaseState")
    """The lease state of the container. Known values are: \"available\", \"leased\", \"expired\",
     \"breaking\", and \"broken\"."""
    lease_duration: Optional[Union[str, "_models.LeaseDuration"]] = rest_field(name="leaseDuration")
    """The lease duration of the container. Known values are: \"infinite\" and \"fixed\"."""
    public_access: Optional[Union[str, "_models.PublicAccessType"]] = rest_field(name="publicAccess")
    """The public access type of the container. Known values are: \"blob\" and \"container\"."""
    has_immutability_policy: Optional[bool] = rest_field(name="hasImmutabilityPolicy")
    """Whether it has an immutability policy."""
    has_legal_hold: Optional[bool] = rest_field(name="hasLegalHold")
    """The has legal hold status of the container."""
    default_encryption_scope: Optional[str] = rest_field(name="defaultEncryptionScope")
    """The default encryption scope of the container."""
    prevent_encryption_scope_override: Optional[bool] = rest_field(name="denyEncryptionScopeOverride")
    """Whether to prevent encryption scope override."""
    deleted_time: Optional[str] = rest_field(name="deletedTime")
    """The deleted time of the container."""
    remaining_retention_days: Optional[int] = rest_field(name="remainingRetentionDays")
    """The remaining retention days of the container."""
    is_immutable_storage_with_versioning_enabled: Optional[bool] = rest_field(
        name="immutableStorageWithVersioningEnabled"
    )
    """Whether immutable storage with versioning is enabled."""

    @overload
    def __init__(
        self,
        *,
        last_modified: str,
        e_tag: str,
        lease_status: Optional[Union[str, "_models.LeaseStatus"]] = None,
        lease_state: Optional[Union[str, "_models.LeaseState"]] = None,
        lease_duration: Optional[Union[str, "_models.LeaseDuration"]] = None,
        public_access: Optional[Union[str, "_models.PublicAccessType"]] = None,
        has_immutability_policy: Optional[bool] = None,
        has_legal_hold: Optional[bool] = None,
        default_encryption_scope: Optional[str] = None,
        prevent_encryption_scope_override: Optional[bool] = None,
        deleted_time: Optional[str] = None,
        remaining_retention_days: Optional[int] = None,
        is_immutable_storage_with_versioning_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CorsRule(_model_base.Model):
    """CORS is an HTTP feature that enables a web application running under one domain to access
    resources in another domain. Web browsers implement a security restriction known as same-origin
    policy that prevents a web page from calling APIs in a different domain; CORS provides a secure
    way to allow one domain (the origin domain) to call APIs in another domain.


    :ivar allowed_origins: The allowed origins. Required.
    :vartype allowed_origins: str
    :ivar allowed_methods: The allowed methods. Required.
    :vartype allowed_methods: str
    :ivar allowed_headers: The allowed headers. Required.
    :vartype allowed_headers: str
    :ivar exposed_headers: The exposed headers. Required.
    :vartype exposed_headers: str
    :ivar max_age_in_seconds: The maximum age in seconds. Required.
    :vartype max_age_in_seconds: int
    """

    allowed_origins: str = rest_field(name="allowedOrigins", xml={"name": "AllowedOrigins"})
    """The allowed origins. Required."""
    allowed_methods: str = rest_field(name="allowedMethods", xml={"name": "AllowedMethods"})
    """The allowed methods. Required."""
    allowed_headers: str = rest_field(name="allowedHeaders", xml={"name": "AllowedHeaders"})
    """The allowed headers. Required."""
    exposed_headers: str = rest_field(name="exposedHeaders", xml={"name": "ExposedHeaders"})
    """The exposed headers. Required."""
    max_age_in_seconds: int = rest_field(name="maxAgeInSeconds", xml={"name": "MaxAgeInSeconds"})
    """The maximum age in seconds. Required."""

    @overload
    def __init__(
        self,
        *,
        allowed_origins: str,
        allowed_methods: str,
        allowed_headers: str,
        exposed_headers: str,
        max_age_in_seconds: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DelimitedTextConfiguration(_model_base.Model):
    """Represents the delimited text configuration.

    :ivar column_separator: The string used to separate columns.
    :vartype column_separator: str
    :ivar field_quote: The string used to quote a specific field.
    :vartype field_quote: str
    :ivar record_separator: The string used to separate records.
    :vartype record_separator: str
    :ivar escape_char: The string used to escape a quote character in a field.
    :vartype escape_char: str
    :ivar headers_present: Represents whether the data has headers.
    :vartype headers_present: bool
    """

    column_separator: Optional[str] = rest_field(name="columnSeparator", xml={"name": "ColumnSeparator"})
    """The string used to separate columns."""
    field_quote: Optional[str] = rest_field(name="fieldQuote", xml={"name": "FieldQuote"})
    """The string used to quote a specific field."""
    record_separator: Optional[str] = rest_field(name="recordSeparator", xml={"name": "RecordSeparator"})
    """The string used to separate records."""
    escape_char: Optional[str] = rest_field(name="escapeChar", xml={"name": "EscapeChar"})
    """The string used to escape a quote character in a field."""
    headers_present: Optional[bool] = rest_field(name="headersPresent", xml={"name": "HasHeaders"})
    """Represents whether the data has headers."""

    @overload
    def __init__(
        self,
        *,
        column_separator: Optional[str] = None,
        field_quote: Optional[str] = None,
        record_separator: Optional[str] = None,
        escape_char: Optional[str] = None,
        headers_present: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterBlobItem(_model_base.Model):
    """The filter blob item.


    :ivar name: The name of the blob. Required.
    :vartype name: str
    :ivar container_name: The properties of the blob. Required.
    :vartype container_name: str
    :ivar tags: The metadata of the blob.
    :vartype tags: ~azure.storage.blob.models.BlobTags
    :ivar version_id: The version ID of the blob.
    :vartype version_id: str
    :ivar is_current_version: Whether it is the current version of the blob.
    :vartype is_current_version: bool
    """

    name: str = rest_field()
    """The name of the blob. Required."""
    container_name: str = rest_field(name="containerName")
    """The properties of the blob. Required."""
    tags: Optional["_models.BlobTags"] = rest_field()
    """The metadata of the blob."""
    version_id: Optional[str] = rest_field(name="versionId")
    """The version ID of the blob."""
    is_current_version: Optional[bool] = rest_field(name="isCurrentVersion")
    """Whether it is the current version of the blob."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        container_name: str,
        tags: Optional["_models.BlobTags"] = None,
        version_id: Optional[str] = None,
        is_current_version: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterBlobSegment(_model_base.Model):
    """The result of a Filter Blobs API call.


    :ivar service_endpoint: The service endpoint. Required.
    :vartype service_endpoint: str
    :ivar where: The filter for the blobs. Required.
    :vartype where: str
    :ivar blobs: The blob segment. Required.
    :vartype blobs: list[~azure.storage.blob.models.FilterBlobItem]
    :ivar next_marker: The next marker of the blobs.
    :vartype next_marker: str
    """

    service_endpoint: str = rest_field(name="serviceEndpoint")
    """The service endpoint. Required."""
    where: str = rest_field()
    """The filter for the blobs. Required."""
    blobs: List["_models.FilterBlobItem"] = rest_field()
    """The blob segment. Required."""
    next_marker: Optional[str] = rest_field(name="nextMarker")
    """The next marker of the blobs."""

    @overload
    def __init__(
        self,
        *,
        service_endpoint: str,
        where: str,
        blobs: List["_models.FilterBlobItem"],
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GeoReplication(_model_base.Model):
    """Geo-Replication information for the Secondary Storage Service.


    :ivar status: The status of the secondary location. Required. Known values are: "live",
     "bootstrap", and "unavailable".
    :vartype status: str or ~azure.storage.blob.models.GeoReplicationStatusType
    :ivar last_sync_time: A GMT date/time value, to the second. All primary writes preceding this
     value are guaranteed to be available for read operations at the secondary. Primary writes after
     this point in time may or may not be available for reads. Required.
    :vartype last_sync_time: str
    """

    status: Union[str, "_models.GeoReplicationStatusType"] = rest_field()
    """The status of the secondary location. Required. Known values are: \"live\", \"bootstrap\", and
     \"unavailable\"."""
    last_sync_time: str = rest_field(name="lastSyncTime")
    """A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to
     be available for read operations at the secondary. Primary writes after this point in time may
     or may not be available for reads. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.GeoReplicationStatusType"],
        last_sync_time: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class JsonTextConfiguration(_model_base.Model):
    """Represents the JSON text configuration.

    :ivar record_separator: The string used to separate records.
    :vartype record_separator: str
    """

    record_separator: Optional[str] = rest_field(name="recordSeparator", xml={"name": "RecordSeparator"})
    """The string used to separate records."""

    @overload
    def __init__(
        self,
        *,
        record_separator: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListBlobsFlatSegmentResponse(_model_base.Model):
    """An enumeration of blobs.


    :ivar service_endpoint: The service endpoint. Required.
    :vartype service_endpoint: str
    :ivar container_name: The container name. Required.
    :vartype container_name: str
    :ivar prefix: The prefix of the blobs.
    :vartype prefix: str
    :ivar marker: The marker of the blobs.
    :vartype marker: str
    :ivar max_results: The max results of the blobs.
    :vartype max_results: int
    :ivar segment: The blob segment. Required.
    :vartype segment: ~azure.storage.blob.models.BlobFlatListSegment
    :ivar next_marker: The next marker of the blobs.
    :vartype next_marker: str
    """

    service_endpoint: str = rest_field(name="serviceEndpoint")
    """The service endpoint. Required."""
    container_name: str = rest_field(name="containerName")
    """The container name. Required."""
    prefix: Optional[str] = rest_field()
    """The prefix of the blobs."""
    marker: Optional[str] = rest_field()
    """The marker of the blobs."""
    max_results: Optional[int] = rest_field(name="maxResults")
    """The max results of the blobs."""
    segment: "_models.BlobFlatListSegment" = rest_field()
    """The blob segment. Required."""
    next_marker: Optional[str] = rest_field(name="nextMarker")
    """The next marker of the blobs."""

    @overload
    def __init__(
        self,
        *,
        service_endpoint: str,
        container_name: str,
        segment: "_models.BlobFlatListSegment",
        prefix: Optional[str] = None,
        marker: Optional[str] = None,
        max_results: Optional[int] = None,
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListBlobsHierarchySegmentResponse(_model_base.Model):
    """An enumeration of blobs.


    :ivar service_endpoint: The service endpoint. Required.
    :vartype service_endpoint: str
    :ivar container_name: The container name. Required.
    :vartype container_name: str
    :ivar delimiter: The delimiter of the blobs.
    :vartype delimiter: str
    :ivar prefix: The prefix of the blobs.
    :vartype prefix: str
    :ivar marker: The marker of the blobs.
    :vartype marker: str
    :ivar max_results: The max results of the blobs.
    :vartype max_results: int
    :ivar segment: The blob segment. Required.
    :vartype segment: ~azure.storage.blob.models.BlobHierarchyListSegment
    :ivar next_marker: The next marker of the blobs.
    :vartype next_marker: str
    """

    service_endpoint: str = rest_field(name="serviceEndpoint")
    """The service endpoint. Required."""
    container_name: str = rest_field(name="containerName")
    """The container name. Required."""
    delimiter: Optional[str] = rest_field()
    """The delimiter of the blobs."""
    prefix: Optional[str] = rest_field()
    """The prefix of the blobs."""
    marker: Optional[str] = rest_field()
    """The marker of the blobs."""
    max_results: Optional[int] = rest_field(name="maxResults")
    """The max results of the blobs."""
    segment: "_models.BlobHierarchyListSegment" = rest_field()
    """The blob segment. Required."""
    next_marker: Optional[str] = rest_field(name="nextMarker")
    """The next marker of the blobs."""

    @overload
    def __init__(
        self,
        *,
        service_endpoint: str,
        container_name: str,
        segment: "_models.BlobHierarchyListSegment",
        delimiter: Optional[str] = None,
        prefix: Optional[str] = None,
        marker: Optional[str] = None,
        max_results: Optional[int] = None,
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListContainersSegmentResponse(_model_base.Model):
    """The list container segment response.


    :ivar service_endpoint: The service endpoint. Required.
    :vartype service_endpoint: str
    :ivar prefix: The prefix of the containers.
    :vartype prefix: str
    :ivar marker: The marker of the containers.
    :vartype marker: str
    :ivar max_results: The max results of the containers.
    :vartype max_results: int
    :ivar container_items: The container segment. Required.
    :vartype container_items: list[~azure.storage.blob.models.ContainerItem]
    :ivar next_marker: The next marker of the containers.
    :vartype next_marker: str
    """

    service_endpoint: str = rest_field(name="serviceEndpoint")
    """The service endpoint. Required."""
    prefix: Optional[str] = rest_field()
    """The prefix of the containers."""
    marker: Optional[str] = rest_field()
    """The marker of the containers."""
    max_results: Optional[int] = rest_field(name="maxResults")
    """The max results of the containers."""
    container_items: List["_models.ContainerItem"] = rest_field(name="containerItems")
    """The container segment. Required."""
    next_marker: Optional[str] = rest_field(name="NextMarker")
    """The next marker of the containers."""

    @overload
    def __init__(
        self,
        *,
        service_endpoint: str,
        container_items: List["_models.ContainerItem"],
        prefix: Optional[str] = None,
        marker: Optional[str] = None,
        max_results: Optional[int] = None,
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Logging(_model_base.Model):
    """Azure Analytics Logging settings.


    :ivar version: The version of the logging properties. Required.
    :vartype version: str
    :ivar delete: Whether delete operation is logged. Required.
    :vartype delete: bool
    :ivar read: Whether read operation is logged. Required.
    :vartype read: bool
    :ivar write: Whether write operation is logged. Required.
    :vartype write: bool
    :ivar retention_policy: The retention policy of the logs. Required.
    :vartype retention_policy: ~azure.storage.blob.models.RetentionPolicy
    """

    version: str = rest_field(xml={"name": "Version"})
    """The version of the logging properties. Required."""
    delete: bool = rest_field(xml={"name": "Delete"})
    """Whether delete operation is logged. Required."""
    read: bool = rest_field(xml={"name": "Read"})
    """Whether read operation is logged. Required."""
    write: bool = rest_field(xml={"name": "Write"})
    """Whether write operation is logged. Required."""
    retention_policy: "_models.RetentionPolicy" = rest_field(name="retentionPolicy", xml={"name": "RetentionPolicy"})
    """The retention policy of the logs. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
        delete: bool,
        read: bool,
        write: bool,
        retention_policy: "_models.RetentionPolicy",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Metrics(_model_base.Model):
    """The metrics properties.


    :ivar version: The version of the metrics properties.
    :vartype version: str
    :ivar enabled: Whether it is enabled. Required.
    :vartype enabled: bool
    :ivar include_apis: Whether to include API in the metrics.
    :vartype include_apis: bool
    :ivar retention_policy: The retention policy of the metrics.
    :vartype retention_policy: ~azure.storage.blob.models.RetentionPolicy
    """

    version: Optional[str] = rest_field(xml={"name": "Version"})
    """The version of the metrics properties."""
    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Whether it is enabled. Required."""
    include_apis: Optional[bool] = rest_field(name="includeApis", xml={"name": "IncludeAPIs"})
    """Whether to include API in the metrics."""
    retention_policy: Optional["_models.RetentionPolicy"] = rest_field(
        name="retentionPolicy", xml={"name": "RetentionPolicy"}
    )
    """The retention policy of the metrics."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        version: Optional[str] = None,
        include_apis: Optional[bool] = None,
        retention_policy: Optional["_models.RetentionPolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ObjectReplicationMetadata(_model_base.Model):
    """The object replication metadata."""


class PageList(_model_base.Model):
    """Represents a page list.

    :ivar page_range: The page ranges.
    :vartype page_range: list[~azure.storage.blob.models.PageRange]
    :ivar clear_range: The clear ranges.
    :vartype clear_range: list[~azure.storage.blob.models.ClearRange]
    :ivar next_marker: The next marker.
    :vartype next_marker: str
    """

    page_range: Optional[List["_models.PageRange"]] = rest_field(name="pageRange")
    """The page ranges."""
    clear_range: Optional[List["_models.ClearRange"]] = rest_field(name="clearRange")
    """The clear ranges."""
    next_marker: Optional[str] = rest_field(name="nextMarker")
    """The next marker."""

    @overload
    def __init__(
        self,
        *,
        page_range: Optional[List["_models.PageRange"]] = None,
        clear_range: Optional[List["_models.ClearRange"]] = None,
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PageRange(_model_base.Model):
    """The page range.


    :ivar start: The start of the byte range. Required.
    :vartype start: int
    :ivar end: The end of the byte range. Required.
    :vartype end: int
    """

    start: int = rest_field()
    """The start of the byte range. Required."""
    end: int = rest_field()
    """The end of the byte range. Required."""

    @overload
    def __init__(
        self,
        *,
        start: int,
        end: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ParquetConfiguration(_model_base.Model):
    """Represents the Parquet configuration."""


class QueryFormat(_model_base.Model):
    """The query format settings.

    All required parameters must be populated in order to send to server.

    :ivar type: The query type. Required. Known values are: "delimited", "json", "arrow", and
     "parquet".
    :vartype type: str or ~azure.storage.blob.models.QueryType
    :ivar delimited_text_configuration: The delimited text configuration.
    :vartype delimited_text_configuration: ~azure.storage.blob.models.DelimitedTextConfiguration
    :ivar json_text_configuration: The JSON text configuration.
    :vartype json_text_configuration: ~azure.storage.blob.models.JsonTextConfiguration
    :ivar arrow_configuration: The Apache Arrow configuration.
    :vartype arrow_configuration: ~azure.storage.blob.models.ArrowConfiguration
    :ivar parquet_text_configuration: The Parquet configuration.
    :vartype parquet_text_configuration: ~azure.storage.blob.models.ParquetConfiguration
    """

    type: Union[str, "_models.QueryType"] = rest_field(xml={"name": "Type"})
    """The query type. Required. Known values are: \"delimited\", \"json\", \"arrow\", and
     \"parquet\"."""
    delimited_text_configuration: Optional["_models.DelimitedTextConfiguration"] = rest_field(
        name="delimitedTextConfiguration", xml={"name": "DelimitedTextConfiguration"}
    )
    """The delimited text configuration."""
    json_text_configuration: Optional["_models.JsonTextConfiguration"] = rest_field(
        name="jsonTextConfiguration", xml={"name": "JsonTextConfiguration"}
    )
    """The JSON text configuration."""
    arrow_configuration: Optional["_models.ArrowConfiguration"] = rest_field(
        name="arrowConfiguration", xml={"name": "ArrowConfiguration"}
    )
    """The Apache Arrow configuration."""
    parquet_text_configuration: Optional["_models.ParquetConfiguration"] = rest_field(
        name="parquetTextConfiguration", xml={"name": "ParquetConfiguration"}
    )
    """The Parquet configuration."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.QueryType"],
        delimited_text_configuration: Optional["_models.DelimitedTextConfiguration"] = None,
        json_text_configuration: Optional["_models.JsonTextConfiguration"] = None,
        arrow_configuration: Optional["_models.ArrowConfiguration"] = None,
        parquet_text_configuration: Optional["_models.ParquetConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QueryRequest(_model_base.Model):
    """Groups the set of query request settings.

    All required parameters must be populated in order to send to server.

    :ivar query_type: Required. The type of the provided query expression. Required. "SQL"
    :vartype query_type: str or ~azure.storage.blob.models.QueryRequestType
    :ivar expression: The query expression in SQL. The maximum size of the query expression is
     256KiB. Required.
    :vartype expression: str
    :ivar input_serialization: The input serialization settings.
    :vartype input_serialization: ~azure.storage.blob.models.QuerySerialization
    :ivar output_serialization: The output serialization settings.
    :vartype output_serialization: ~azure.storage.blob.models.QuerySerialization
    """

    query_type: Union[str, "_models.QueryRequestType"] = rest_field(name="queryType", xml={"name": "QueryType"})
    """Required. The type of the provided query expression. Required. \"SQL\""""
    expression: str = rest_field(xml={"name": "Expression"})
    """The query expression in SQL. The maximum size of the query expression is 256KiB. Required."""
    input_serialization: Optional["_models.QuerySerialization"] = rest_field(
        name="inputSerialization", xml={"name": "InputSerialization"}
    )
    """The input serialization settings."""
    output_serialization: Optional["_models.QuerySerialization"] = rest_field(
        name="outputSerialization", xml={"name": "OutputSerialization"}
    )
    """The output serialization settings."""

    @overload
    def __init__(
        self,
        *,
        query_type: Union[str, "_models.QueryRequestType"],
        expression: str,
        input_serialization: Optional["_models.QuerySerialization"] = None,
        output_serialization: Optional["_models.QuerySerialization"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QuerySerialization(_model_base.Model):
    """The query serialization settings.

    All required parameters must be populated in order to send to server.

    :ivar format: The query format. Required.
    :vartype format: ~azure.storage.blob.models.QueryFormat
    """

    format: "_models.QueryFormat" = rest_field(xml={"name": "Format"})
    """The query format. Required."""

    @overload
    def __init__(
        self,
        *,
        format: "_models.QueryFormat",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RetentionPolicy(_model_base.Model):
    """The retention policy.


    :ivar enabled: Whether to enable the retention policy. Required.
    :vartype enabled: bool
    :ivar days: The number of days to retain the logs.
    :vartype days: int
    :ivar allow_permanent_delete: Whether to allow permanent delete.
    :vartype allow_permanent_delete: bool
    """

    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Whether to enable the retention policy. Required."""
    days: Optional[int] = rest_field(xml={"name": "Days"})
    """The number of days to retain the logs."""
    allow_permanent_delete: Optional[bool] = rest_field(
        name="allowPermanentDelete", xml={"name": "AllowPermanentDelete"}
    )
    """Whether to allow permanent delete."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        days: Optional[int] = None,
        allow_permanent_delete: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SignedIdentifier(_model_base.Model):
    """The signed identifier.


    :ivar id: The unique ID for the signed identifier. Required.
    :vartype id: str
    :ivar access_policy: The access policy for the signed identifier. Required.
    :vartype access_policy: ~azure.storage.blob.models.AccessPolicy
    """

    id: str = rest_field(xml={"name": "Id"})
    """The unique ID for the signed identifier. Required."""
    access_policy: "_models.AccessPolicy" = rest_field(name="accessPolicy", xml={"name": "AccessPolicy"})
    """The access policy for the signed identifier. Required."""

    _xml = {"name": "SignedIdentifier"}

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        access_policy: "_models.AccessPolicy",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StaticWebsite(_model_base.Model):
    """The properties that enable an account to host a static website.


    :ivar enabled: Indicates whether this account is hosting a static website. Required.
    :vartype enabled: bool
    :ivar index_document: The index document.
    :vartype index_document: str
    :ivar error_document404_path: The error document.
    :vartype error_document404_path: str
    :ivar default_index_document_path: Absolute path of the default index page.
    :vartype default_index_document_path: str
    """

    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Indicates whether this account is hosting a static website. Required."""
    index_document: Optional[str] = rest_field(name="indexDocument", xml={"name": "IndexDocument"})
    """The index document."""
    error_document404_path: Optional[str] = rest_field(
        name="errorDocument404Path", xml={"name": "ErrorDocument404Path"}
    )
    """The error document."""
    default_index_document_path: Optional[str] = rest_field(
        name="defaultIndexDocumentPath", xml={"name": "DefaultIndexDocumentPath"}
    )
    """Absolute path of the default index page."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        index_document: Optional[str] = None,
        error_document404_path: Optional[str] = None,
        default_index_document_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageError(_model_base.Model):
    """The error response.

    :ivar message: The error message.
    :vartype message: str
    """

    message: Optional[str] = rest_field(name="Message")
    """The error message."""

    @overload
    def __init__(
        self,
        *,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageServiceProperties(_model_base.Model):
    """The service properties.

    :ivar logging: The logging properties.
    :vartype logging: ~azure.storage.blob.models.Logging
    :ivar hour_metrics: The hour metrics properties.
    :vartype hour_metrics: ~azure.storage.blob.models.Metrics
    :ivar minute_metrics: The minute metrics properties.
    :vartype minute_metrics: ~azure.storage.blob.models.Metrics
    :ivar cors: The CORS properties.
    :vartype cors: list[~azure.storage.blob.models.CorsRule]
    :ivar default_service_version: The default service version.
    :vartype default_service_version: str
    :ivar delete_retention_policy: The delete retention policy.
    :vartype delete_retention_policy: ~azure.storage.blob.models.RetentionPolicy
    :ivar static_website: The static website properties.
    :vartype static_website: ~azure.storage.blob.models.StaticWebsite
    """

    logging: Optional["_models.Logging"] = rest_field()
    """The logging properties."""
    hour_metrics: Optional["_models.Metrics"] = rest_field(name="hourMetrics")
    """The hour metrics properties."""
    minute_metrics: Optional["_models.Metrics"] = rest_field(name="minuteMetrics")
    """The minute metrics properties."""
    cors: Optional[List["_models.CorsRule"]] = rest_field()
    """The CORS properties."""
    default_service_version: Optional[str] = rest_field(name="defaultServiceVersion")
    """The default service version."""
    delete_retention_policy: Optional["_models.RetentionPolicy"] = rest_field(name="deleteRetentionPolicy")
    """The delete retention policy."""
    static_website: Optional["_models.StaticWebsite"] = rest_field(name="staticWebsite")
    """The static website properties."""

    @overload
    def __init__(
        self,
        *,
        logging: Optional["_models.Logging"] = None,
        hour_metrics: Optional["_models.Metrics"] = None,
        minute_metrics: Optional["_models.Metrics"] = None,
        cors: Optional[List["_models.CorsRule"]] = None,
        default_service_version: Optional[str] = None,
        delete_retention_policy: Optional["_models.RetentionPolicy"] = None,
        static_website: Optional["_models.StaticWebsite"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageServiceStats(_model_base.Model):
    """Stats for the storage service.

    :ivar geo_replication: The geo replication stats.
    :vartype geo_replication: ~azure.storage.blob.models.GeoReplication
    """

    geo_replication: Optional["_models.GeoReplication"] = rest_field(name="geoReplication")
    """The geo replication stats."""

    @overload
    def __init__(
        self,
        *,
        geo_replication: Optional["_models.GeoReplication"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserDelegationKey(_model_base.Model):
    """A user delegation key.


    :ivar signed_oid: The Azure Active Directory object ID in GUID format. Required.
    :vartype signed_oid: str
    :ivar signed_tid: The Azure Active Directory tenant ID in GUID format. Required.
    :vartype signed_tid: str
    :ivar signed_start: The date-time the key is active. Required.
    :vartype signed_start: str
    :ivar signed_expiry: The date-time the key expires. Required.
    :vartype signed_expiry: str
    :ivar signed_service: Abbreviation of the Azure Storage service that accepts the key. Required.
    :vartype signed_service: str
    :ivar signed_version: The service version that created the key. Required.
    :vartype signed_version: str
    :ivar value: The key as a base64 string. Required.
    :vartype value: str
    """

    signed_oid: str = rest_field(name="signedOid")
    """The Azure Active Directory object ID in GUID format. Required."""
    signed_tid: str = rest_field(name="signedTid")
    """The Azure Active Directory tenant ID in GUID format. Required."""
    signed_start: str = rest_field(name="signedStart")
    """The date-time the key is active. Required."""
    signed_expiry: str = rest_field(name="signedExpiry")
    """The date-time the key expires. Required."""
    signed_service: str = rest_field(name="signedService")
    """Abbreviation of the Azure Storage service that accepts the key. Required."""
    signed_version: str = rest_field(name="signedVersion")
    """The service version that created the key. Required."""
    value: str = rest_field()
    """The key as a base64 string. Required."""

    @overload
    def __init__(
        self,
        *,
        signed_oid: str,
        signed_tid: str,
        signed_start: str,
        signed_expiry: str,
        signed_service: str,
        signed_version: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
