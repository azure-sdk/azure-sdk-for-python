# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AccessPolicy(_model_base.Model):
    """Represents an access policy.


    :ivar start: The date-time the policy is active. Required.
    :vartype start: ~datetime.datetime
    :ivar expiry: The date-time the policy expires. Required.
    :vartype expiry: ~datetime.datetime
    :ivar permission: The permissions for acl the policy. Required.
    :vartype permission: str
    """

    start: datetime.datetime = rest_field(format="rfc3339", xml={"name": "Start"})
    """The date-time the policy is active. Required."""
    expiry: datetime.datetime = rest_field(format="rfc3339", xml={"name": "Expiry"})
    """The date-time the policy expires. Required."""
    permission: str = rest_field(xml={"name": "Permission"})
    """The permissions for acl the policy. Required."""

    @overload
    def __init__(
        self,
        *,
        start: datetime.datetime,
        expiry: datetime.datetime,
        permission: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArrowConfiguration(_model_base.Model):
    """Represents the Apache Arrow configuration.

    All required parameters must be populated in order to send to server.

    :ivar schema: The Apache Arrow schema. Required.
    :vartype schema: ~azure.storage.blob.models.ArrowField
    """

    schema: List["_models.ArrowField"] = rest_field(xml={"name": "Schema"})
    """The Apache Arrow schema. Required."""

    @overload
    def __init__(
        self,
        *,
        schema: List["_models.ArrowField"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArrowField(_model_base.Model):
    """Represents an Apache Arrow field.

    All required parameters must be populated in order to send to server.

    :ivar type: The arrow field type. Required.
    :vartype type: str
    :ivar name: The arrow field name.
    :vartype name: str
    :ivar precision: The arrow field precision.
    :vartype precision: int
    :ivar scale: The arrow field scale.
    :vartype scale: int
    """

    type: str = rest_field(xml={"name": "Type"})
    """The arrow field type. Required."""
    name: Optional[str] = rest_field(xml={"name": "Name"})
    """The arrow field name."""
    precision: Optional[int] = rest_field(xml={"name": "Precision"})
    """The arrow field precision."""
    scale: Optional[int] = rest_field(xml={"name": "Scale"})
    """The arrow field scale."""

    _xml = {"name": "Field"}

    @overload
    def __init__(
        self,
        *,
        type: str,
        name: Optional[str] = None,
        precision: Optional[int] = None,
        scale: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobTag(_model_base.Model):
    """The blob tags.


    :ivar key: The key of the tag. Required.
    :vartype key: str
    :ivar value: The value of the tag. Required.
    :vartype value: str
    """

    key: str = rest_field(xml={"name": "Key"})
    """The key of the tag. Required."""
    value: str = rest_field(xml={"name": "Value"})
    """The value of the tag. Required."""

    _xml = {"name": "Tag"}

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobTags(_model_base.Model):
    """Represents blob tags.


    :ivar blob_tag_set: Represents the blob tags. Required.
    :vartype blob_tag_set: ~azure.storage.blob.models.BlobTag
    """

    blob_tag_set: List["_models.BlobTag"] = rest_field(name="blobTagSet", xml={"name": "TagSet"})
    """Represents the blob tags. Required."""

    _xml = {"name": "Tags"}

    @overload
    def __init__(
        self,
        *,
        blob_tag_set: List["_models.BlobTag"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlockLookupList(_model_base.Model):
    """The Block lookup list.

    :ivar committed: The committed blocks.
    :vartype committed: list[str]
    :ivar uncommitted: The uncommitted blocks.
    :vartype uncommitted: list[str]
    :ivar latest: The latest blocks.
    :vartype latest: list[str]
    """

    committed: Optional[List[str]] = rest_field(xml={"name": "Committed", "unwrapped": True})
    """The committed blocks."""
    uncommitted: Optional[List[str]] = rest_field(xml={"name": "Uncommitted", "unwrapped": True})
    """The uncommitted blocks."""
    latest: Optional[List[str]] = rest_field(xml={"name": "Latest", "unwrapped": True})
    """The latest blocks."""

    _xml = {"name": "BlockList"}

    @overload
    def __init__(
        self,
        *,
        committed: Optional[List[str]] = None,
        uncommitted: Optional[List[str]] = None,
        latest: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CorsRule(_model_base.Model):
    """CORS is an HTTP feature that enables a web application running under one domain to access
    resources in another domain. Web browsers implement a security restriction known as same-origin
    policy that prevents a web page from calling APIs in a different domain; CORS provides a secure
    way to allow one domain (the origin domain) to call APIs in another domain.


    :ivar allowed_origins: The allowed origins. Required.
    :vartype allowed_origins: str
    :ivar allowed_methods: The allowed methods. Required.
    :vartype allowed_methods: str
    :ivar allowed_headers: The allowed headers. Required.
    :vartype allowed_headers: str
    :ivar exposed_headers: The exposed headers. Required.
    :vartype exposed_headers: str
    :ivar max_age_in_seconds: The maximum age in seconds. Required.
    :vartype max_age_in_seconds: int
    """

    allowed_origins: str = rest_field(name="allowedOrigins", xml={"name": "AllowedOrigins"})
    """The allowed origins. Required."""
    allowed_methods: str = rest_field(name="allowedMethods", xml={"name": "AllowedMethods"})
    """The allowed methods. Required."""
    allowed_headers: str = rest_field(name="allowedHeaders", xml={"name": "AllowedHeaders"})
    """The allowed headers. Required."""
    exposed_headers: str = rest_field(name="exposedHeaders", xml={"name": "ExposedHeaders"})
    """The exposed headers. Required."""
    max_age_in_seconds: int = rest_field(name="maxAgeInSeconds", xml={"name": "MaxAgeInSeconds"})
    """The maximum age in seconds. Required."""

    @overload
    def __init__(
        self,
        *,
        allowed_origins: str,
        allowed_methods: str,
        allowed_headers: str,
        exposed_headers: str,
        max_age_in_seconds: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DelimitedTextConfiguration(_model_base.Model):
    """Represents the delimited text configuration.

    :ivar column_separator: The string used to separate columns.
    :vartype column_separator: str
    :ivar field_quote: The string used to quote a specific field.
    :vartype field_quote: str
    :ivar record_separator: The string used to separate records.
    :vartype record_separator: str
    :ivar escape_char: The string used to escape a quote character in a field.
    :vartype escape_char: str
    :ivar headers_present: Represents whether the data has headers.
    :vartype headers_present: bool
    """

    column_separator: Optional[str] = rest_field(name="columnSeparator", xml={"name": "ColumnSeparator"})
    """The string used to separate columns."""
    field_quote: Optional[str] = rest_field(name="fieldQuote", xml={"name": "FieldQuote"})
    """The string used to quote a specific field."""
    record_separator: Optional[str] = rest_field(name="recordSeparator", xml={"name": "RecordSeparator"})
    """The string used to separate records."""
    escape_char: Optional[str] = rest_field(name="escapeChar", xml={"name": "EscapeChar"})
    """The string used to escape a quote character in a field."""
    headers_present: Optional[bool] = rest_field(name="headersPresent", xml={"name": "HasHeaders"})
    """Represents whether the data has headers."""

    @overload
    def __init__(
        self,
        *,
        column_separator: Optional[str] = None,
        field_quote: Optional[str] = None,
        record_separator: Optional[str] = None,
        escape_char: Optional[str] = None,
        headers_present: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterBlobItem(_model_base.Model):
    """The filter blob item.


    :ivar name: The name of the blob. Required.
    :vartype name: str
    :ivar container_name: The properties of the blob. Required.
    :vartype container_name: str
    :ivar tags: The metadata of the blob.
    :vartype tags: ~azure.storage.blob.models.BlobTags
    :ivar version_id: The version ID of the blob.
    :vartype version_id: str
    :ivar is_current_version: Whether it is the current version of the blob.
    :vartype is_current_version: bool
    """

    name: str = rest_field()
    """The name of the blob. Required."""
    container_name: str = rest_field(name="containerName")
    """The properties of the blob. Required."""
    tags: Optional["_models.BlobTags"] = rest_field()
    """The metadata of the blob."""
    version_id: Optional[str] = rest_field(name="versionId")
    """The version ID of the blob."""
    is_current_version: Optional[bool] = rest_field(name="isCurrentVersion")
    """Whether it is the current version of the blob."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        container_name: str,
        tags: Optional["_models.BlobTags"] = None,
        version_id: Optional[str] = None,
        is_current_version: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterBlobSegment(_model_base.Model):
    """The result of a Filter Blobs API call.


    :ivar service_endpoint: The service endpoint. Required.
    :vartype service_endpoint: str
    :ivar where: The filter for the blobs. Required.
    :vartype where: str
    :ivar blobs: The blob segment. Required.
    :vartype blobs: list[~azure.storage.blob.models.FilterBlobItem]
    :ivar next_marker: The next marker of the blobs.
    :vartype next_marker: str
    """

    service_endpoint: str = rest_field(name="serviceEndpoint")
    """The service endpoint. Required."""
    where: str = rest_field()
    """The filter for the blobs. Required."""
    blobs: List["_models.FilterBlobItem"] = rest_field()
    """The blob segment. Required."""
    next_marker: Optional[str] = rest_field(name="nextMarker")
    """The next marker of the blobs."""

    @overload
    def __init__(
        self,
        *,
        service_endpoint: str,
        where: str,
        blobs: List["_models.FilterBlobItem"],
        next_marker: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GeoReplication(_model_base.Model):
    """Geo-Replication information for the Secondary Storage Service.


    :ivar status: The status of the secondary location. Required. Known values are: "live",
     "bootstrap", and "unavailable".
    :vartype status: str or ~azure.storage.blob.models.GeoReplicationStatusType
    :ivar last_sync_time: A GMT date/time value, to the second. All primary writes preceding this
     value are guaranteed to be available for read operations at the secondary. Primary writes after
     this point in time may or may not be available for reads. Required.
    :vartype last_sync_time: str
    """

    status: Union[str, "_models.GeoReplicationStatusType"] = rest_field()
    """The status of the secondary location. Required. Known values are: \"live\", \"bootstrap\", and
     \"unavailable\"."""
    last_sync_time: str = rest_field(name="lastSyncTime")
    """A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to
     be available for read operations at the secondary. Primary writes after this point in time may
     or may not be available for reads. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.GeoReplicationStatusType"],
        last_sync_time: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class JsonTextConfiguration(_model_base.Model):
    """Represents the JSON text configuration.

    :ivar record_separator: The string used to separate records.
    :vartype record_separator: str
    """

    record_separator: Optional[str] = rest_field(name="recordSeparator", xml={"name": "RecordSeparator"})
    """The string used to separate records."""

    @overload
    def __init__(
        self,
        *,
        record_separator: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Logging(_model_base.Model):
    """Azure Analytics Logging settings.


    :ivar version: The version of the logging properties. Required.
    :vartype version: str
    :ivar delete: Whether delete operation is logged. Required.
    :vartype delete: bool
    :ivar read: Whether read operation is logged. Required.
    :vartype read: bool
    :ivar write: Whether write operation is logged. Required.
    :vartype write: bool
    :ivar retention_policy: The retention policy of the logs. Required.
    :vartype retention_policy: ~azure.storage.blob.models.RetentionPolicy
    """

    version: str = rest_field(xml={"name": "Version"})
    """The version of the logging properties. Required."""
    delete: bool = rest_field(xml={"name": "Delete"})
    """Whether delete operation is logged. Required."""
    read: bool = rest_field(xml={"name": "Read"})
    """Whether read operation is logged. Required."""
    write: bool = rest_field(xml={"name": "Write"})
    """Whether write operation is logged. Required."""
    retention_policy: "_models.RetentionPolicy" = rest_field(name="retentionPolicy", xml={"name": "RetentionPolicy"})
    """The retention policy of the logs. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
        delete: bool,
        read: bool,
        write: bool,
        retention_policy: "_models.RetentionPolicy",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Metrics(_model_base.Model):
    """The metrics properties.


    :ivar version: The version of the metrics properties.
    :vartype version: str
    :ivar enabled: Whether it is enabled. Required.
    :vartype enabled: bool
    :ivar include_apis: Whether to include API in the metrics.
    :vartype include_apis: bool
    :ivar retention_policy: The retention policy of the metrics.
    :vartype retention_policy: ~azure.storage.blob.models.RetentionPolicy
    """

    version: Optional[str] = rest_field(xml={"name": "Version"})
    """The version of the metrics properties."""
    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Whether it is enabled. Required."""
    include_apis: Optional[bool] = rest_field(name="includeApis", xml={"name": "IncludeAPIs"})
    """Whether to include API in the metrics."""
    retention_policy: Optional["_models.RetentionPolicy"] = rest_field(
        name="retentionPolicy", xml={"name": "RetentionPolicy"}
    )
    """The retention policy of the metrics."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        version: Optional[str] = None,
        include_apis: Optional[bool] = None,
        retention_policy: Optional["_models.RetentionPolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ParquetConfiguration(_model_base.Model):
    """Represents the Parquet configuration."""


class QueryFormat(_model_base.Model):
    """The query format settings.

    All required parameters must be populated in order to send to server.

    :ivar type: The query type. Required. Known values are: "delimited", "json", "arrow", and
     "parquet".
    :vartype type: str or ~azure.storage.blob.models.QueryType
    :ivar delimited_text_configuration: The delimited text configuration.
    :vartype delimited_text_configuration: ~azure.storage.blob.models.DelimitedTextConfiguration
    :ivar json_text_configuration: The JSON text configuration.
    :vartype json_text_configuration: ~azure.storage.blob.models.JsonTextConfiguration
    :ivar arrow_configuration: The Apache Arrow configuration.
    :vartype arrow_configuration: ~azure.storage.blob.models.ArrowConfiguration
    :ivar parquet_text_configuration: The Parquet configuration.
    :vartype parquet_text_configuration: ~azure.storage.blob.models.ParquetConfiguration
    """

    type: Union[str, "_models.QueryType"] = rest_field(xml={"name": "Type"})
    """The query type. Required. Known values are: \"delimited\", \"json\", \"arrow\", and
     \"parquet\"."""
    delimited_text_configuration: Optional["_models.DelimitedTextConfiguration"] = rest_field(
        name="delimitedTextConfiguration", xml={"name": "DelimitedTextConfiguration"}
    )
    """The delimited text configuration."""
    json_text_configuration: Optional["_models.JsonTextConfiguration"] = rest_field(
        name="jsonTextConfiguration", xml={"name": "JsonTextConfiguration"}
    )
    """The JSON text configuration."""
    arrow_configuration: Optional["_models.ArrowConfiguration"] = rest_field(
        name="arrowConfiguration", xml={"name": "ArrowConfiguration"}
    )
    """The Apache Arrow configuration."""
    parquet_text_configuration: Optional["_models.ParquetConfiguration"] = rest_field(
        name="parquetTextConfiguration", xml={"name": "ParquetConfiguration"}
    )
    """The Parquet configuration."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.QueryType"],
        delimited_text_configuration: Optional["_models.DelimitedTextConfiguration"] = None,
        json_text_configuration: Optional["_models.JsonTextConfiguration"] = None,
        arrow_configuration: Optional["_models.ArrowConfiguration"] = None,
        parquet_text_configuration: Optional["_models.ParquetConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QueryRequest(_model_base.Model):
    """Groups the set of query request settings.

    All required parameters must be populated in order to send to server.

    :ivar query_type: Required. The type of the provided query expression. Required. "SQL"
    :vartype query_type: str or ~azure.storage.blob.models.QueryRequestType
    :ivar expression: The query expression in SQL. The maximum size of the query expression is
     256KiB. Required.
    :vartype expression: str
    :ivar input_serialization: The input serialization settings.
    :vartype input_serialization: ~azure.storage.blob.models.QuerySerialization
    :ivar output_serialization: The output serialization settings.
    :vartype output_serialization: ~azure.storage.blob.models.QuerySerialization
    """

    query_type: Union[str, "_models.QueryRequestType"] = rest_field(name="queryType", xml={"name": "QueryType"})
    """Required. The type of the provided query expression. Required. \"SQL\""""
    expression: str = rest_field(xml={"name": "Expression"})
    """The query expression in SQL. The maximum size of the query expression is 256KiB. Required."""
    input_serialization: Optional["_models.QuerySerialization"] = rest_field(
        name="inputSerialization", xml={"name": "InputSerialization"}
    )
    """The input serialization settings."""
    output_serialization: Optional["_models.QuerySerialization"] = rest_field(
        name="outputSerialization", xml={"name": "OutputSerialization"}
    )
    """The output serialization settings."""

    @overload
    def __init__(
        self,
        *,
        query_type: Union[str, "_models.QueryRequestType"],
        expression: str,
        input_serialization: Optional["_models.QuerySerialization"] = None,
        output_serialization: Optional["_models.QuerySerialization"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QuerySerialization(_model_base.Model):
    """The query serialization settings.

    All required parameters must be populated in order to send to server.

    :ivar format: The query format. Required.
    :vartype format: ~azure.storage.blob.models.QueryFormat
    """

    format: "_models.QueryFormat" = rest_field(xml={"name": "Format"})
    """The query format. Required."""

    @overload
    def __init__(
        self,
        *,
        format: "_models.QueryFormat",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RetentionPolicy(_model_base.Model):
    """The retention policy.


    :ivar enabled: Whether to enable the retention policy. Required.
    :vartype enabled: bool
    :ivar days: The number of days to retain the logs.
    :vartype days: int
    :ivar allow_permanent_delete: Whether to allow permanent delete.
    :vartype allow_permanent_delete: bool
    """

    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Whether to enable the retention policy. Required."""
    days: Optional[int] = rest_field(xml={"name": "Days"})
    """The number of days to retain the logs."""
    allow_permanent_delete: Optional[bool] = rest_field(
        name="allowPermanentDelete", xml={"name": "AllowPermanentDelete"}
    )
    """Whether to allow permanent delete."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        days: Optional[int] = None,
        allow_permanent_delete: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SignedIdentifier(_model_base.Model):
    """The signed identifier.


    :ivar id: The unique ID for the signed identifier. Required.
    :vartype id: str
    :ivar access_policy: The access policy for the signed identifier. Required.
    :vartype access_policy: ~azure.storage.blob.models.AccessPolicy
    """

    id: str = rest_field(xml={"name": "Id"})
    """The unique ID for the signed identifier. Required."""
    access_policy: "_models.AccessPolicy" = rest_field(name="accessPolicy", xml={"name": "AccessPolicy"})
    """The access policy for the signed identifier. Required."""

    _xml = {"name": "SignedIdentifier"}

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        access_policy: "_models.AccessPolicy",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StaticWebsite(_model_base.Model):
    """The properties that enable an account to host a static website.


    :ivar enabled: Indicates whether this account is hosting a static website. Required.
    :vartype enabled: bool
    :ivar index_document: The index document.
    :vartype index_document: str
    :ivar error_document404_path: The error document.
    :vartype error_document404_path: str
    :ivar default_index_document_path: Absolute path of the default index page.
    :vartype default_index_document_path: str
    """

    enabled: bool = rest_field(xml={"name": "Enabled"})
    """Indicates whether this account is hosting a static website. Required."""
    index_document: Optional[str] = rest_field(name="indexDocument", xml={"name": "IndexDocument"})
    """The index document."""
    error_document404_path: Optional[str] = rest_field(
        name="errorDocument404Path", xml={"name": "ErrorDocument404Path"}
    )
    """The error document."""
    default_index_document_path: Optional[str] = rest_field(
        name="defaultIndexDocumentPath", xml={"name": "DefaultIndexDocumentPath"}
    )
    """Absolute path of the default index page."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        index_document: Optional[str] = None,
        error_document404_path: Optional[str] = None,
        default_index_document_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageError(_model_base.Model):
    """The error response.

    :ivar message: The error message.
    :vartype message: str
    """

    message: Optional[str] = rest_field(name="Message")
    """The error message."""

    @overload
    def __init__(
        self,
        *,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageServiceProperties(_model_base.Model):
    """The service properties.

    :ivar logging: The logging properties.
    :vartype logging: ~azure.storage.blob.models.Logging
    :ivar hour_metrics: The hour metrics properties.
    :vartype hour_metrics: ~azure.storage.blob.models.Metrics
    :ivar minute_metrics: The minute metrics properties.
    :vartype minute_metrics: ~azure.storage.blob.models.Metrics
    :ivar cors: The CORS properties.
    :vartype cors: list[~azure.storage.blob.models.CorsRule]
    :ivar default_service_version: The default service version.
    :vartype default_service_version: str
    :ivar delete_retention_policy: The delete retention policy.
    :vartype delete_retention_policy: ~azure.storage.blob.models.RetentionPolicy
    :ivar static_website: The static website properties.
    :vartype static_website: ~azure.storage.blob.models.StaticWebsite
    """

    logging: Optional["_models.Logging"] = rest_field()
    """The logging properties."""
    hour_metrics: Optional["_models.Metrics"] = rest_field(name="hourMetrics")
    """The hour metrics properties."""
    minute_metrics: Optional["_models.Metrics"] = rest_field(name="minuteMetrics")
    """The minute metrics properties."""
    cors: Optional[List["_models.CorsRule"]] = rest_field()
    """The CORS properties."""
    default_service_version: Optional[str] = rest_field(name="defaultServiceVersion")
    """The default service version."""
    delete_retention_policy: Optional["_models.RetentionPolicy"] = rest_field(name="deleteRetentionPolicy")
    """The delete retention policy."""
    static_website: Optional["_models.StaticWebsite"] = rest_field(name="staticWebsite")
    """The static website properties."""

    @overload
    def __init__(
        self,
        *,
        logging: Optional["_models.Logging"] = None,
        hour_metrics: Optional["_models.Metrics"] = None,
        minute_metrics: Optional["_models.Metrics"] = None,
        cors: Optional[List["_models.CorsRule"]] = None,
        default_service_version: Optional[str] = None,
        delete_retention_policy: Optional["_models.RetentionPolicy"] = None,
        static_website: Optional["_models.StaticWebsite"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageServiceStats(_model_base.Model):
    """Stats for the storage service.

    :ivar geo_replication: The geo replication stats.
    :vartype geo_replication: ~azure.storage.blob.models.GeoReplication
    """

    geo_replication: Optional["_models.GeoReplication"] = rest_field(name="geoReplication")
    """The geo replication stats."""

    @overload
    def __init__(
        self,
        *,
        geo_replication: Optional["_models.GeoReplication"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserDelegationKey(_model_base.Model):
    """A user delegation key.


    :ivar signed_oid: The Azure Active Directory object ID in GUID format. Required.
    :vartype signed_oid: str
    :ivar signed_tid: The Azure Active Directory tenant ID in GUID format. Required.
    :vartype signed_tid: str
    :ivar signed_start: The date-time the key is active. Required.
    :vartype signed_start: str
    :ivar signed_expiry: The date-time the key expires. Required.
    :vartype signed_expiry: str
    :ivar signed_service: Abbreviation of the Azure Storage service that accepts the key. Required.
    :vartype signed_service: str
    :ivar signed_version: The service version that created the key. Required.
    :vartype signed_version: str
    :ivar value: The key as a base64 string. Required.
    :vartype value: str
    """

    signed_oid: str = rest_field(name="signedOid")
    """The Azure Active Directory object ID in GUID format. Required."""
    signed_tid: str = rest_field(name="signedTid")
    """The Azure Active Directory tenant ID in GUID format. Required."""
    signed_start: str = rest_field(name="signedStart")
    """The date-time the key is active. Required."""
    signed_expiry: str = rest_field(name="signedExpiry")
    """The date-time the key expires. Required."""
    signed_service: str = rest_field(name="signedService")
    """Abbreviation of the Azure Storage service that accepts the key. Required."""
    signed_version: str = rest_field(name="signedVersion")
    """The service version that created the key. Required."""
    value: str = rest_field()
    """The key as a base64 string. Required."""

    @overload
    def __init__(
        self,
        *,
        signed_oid: str,
        signed_tid: str,
        signed_start: str,
        signed_expiry: str,
        signed_service: str,
        signed_version: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
