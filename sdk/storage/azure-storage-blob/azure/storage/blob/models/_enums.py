# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The access tiers."""

    P4 = "P4"
    """The hot P4 tier."""
    P6 = "P6"
    """The hot P6 tier."""
    P10 = "P10"
    """The hot P10 tier."""
    P15 = "P15"
    """The hot P15 tier."""
    P20 = "P20"
    """The hot P20 tier."""
    P30 = "P30"
    """The hot P30 tier."""
    P40 = "P40"
    """The hot P40 tier."""
    P50 = "P50"
    """The hot P50 tier."""
    P60 = "P60"
    """The hot P60 tier."""
    P70 = "P70"
    """The hot P70 tier."""
    P80 = "P80"
    """The hot P80 tier."""
    HOT = "Hot"
    """The hot access tier."""
    COOL = "Cool"
    """The cool access tier."""
    ARCHIVE = "Archive"
    """The archive access tier."""
    PREMIUM = "Premium"
    """The Premium access tier."""
    COLD = "Cold"
    """The Cold access tier."""


class AccountKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The account kind."""

    STORAGE = "Storage"
    """The storage account is a general-purpose account."""
    BLOB_STORAGE = "BlobStorage"
    """The storage account is a blob storage account."""
    STORAGE_V2 = "StorageV2"
    """The storage account is a storage V2 account."""
    FILE_STORAGE = "FileStorage"
    """The storage account is a file storage account."""
    BLOCK_BLOB_STORAGE = "BlockBlobStorage"
    """The storage account is a block blob storage account."""


class ArchiveStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The archive status."""

    REHYDRATE_PENDING_TO_HOT = "rehydrate-pending-to-hot"
    """The archive status is rehydrating pending to hot."""
    REHYDRATE_PENDING_TO_COOL = "rehydrate-pending-to-cool"
    """The archive status is rehydrating pending to cool."""
    REHYDRATE_PENDING_TO_COLD = "rehydrate-pending-to-cold"
    """The archive status is rehydrating pending to archive."""


class BlobDeleteType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of blob deletions."""

    PERMANENT = "Permanent"
    """Permanently delete the blob."""


class BlobExpiryOptions(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The blob expiration options."""

    NEVER_EXPIRE = "NeverExpire"
    """Never expire."""
    RELATIVE_TO_CREATION = "RelativeToCreation"
    """Relative to creation time."""
    RELATIVE_TO_NOW = "RelativeToNow"
    """Relative to now."""
    ABSOLUTE = "Absolute"
    """Absolute time."""


class BlobImmutabilityPolicyMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The immutability policy mode."""

    MUTABLE = "Mutable"
    """The immutability policy is mutable."""
    LOCKED = "Locked"
    """The immutability policy is locked."""
    UNLOCKED = "Unlocked"
    """The immutability policy is unlocked."""


class BlobType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The blob type."""

    BLOCK_BLOB = "BlockBlob"
    """The blob is a block blob."""
    PAGE_BLOB = "PageBlob"
    """The blob is a page blob."""
    APPEND_BLOB = "AppendBlob"
    """The blob is an append blob."""


class BlockListType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The block list types."""

    COMMITTED = "committed"
    """The list of committed blocks."""
    UNCOMMITTED = "uncommitted"
    """The list of uncommitted blocks."""
    ALL = "all"
    """Both lists together."""


class CopyStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The copy status."""

    PENDING = "pending"
    """The copy operation is pending."""
    SUCCESS = "success"
    """The copy operation succeeded."""
    FAILED = "failed"
    """The copy operation failed."""
    ABORTED = "aborted"
    """The copy operation is aborted."""


class DeleteSnapshotsOptionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The delete snapshots option type."""

    ONLY = "only"
    """The delete snapshots include option is only."""
    INCLUDE = "include"
    """The delete snapshots include option is include."""


class EncryptionAlgorithmType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The algorithm used to produce the encryption key hash. Currently, the only accepted value is
    \\"AES256\\". Must be provided if the x-ms-encryption-key header is provided.
    """

    AES256 = "AES256"
    """The AES256 encryption algorithm."""


class FilterBlobsIncludeItem(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The filter blobs includes."""

    NONE = "none"
    """The filter includes no versions."""
    VERSIONS = "versions"
    """The filter includes n versions."""


class GeoReplicationStatusType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The geo replication status."""

    LIVE = "live"
    """The geo replication is live."""
    BOOTSTRAP = "bootstrap"
    """The geo replication is bootstrap."""
    UNAVAILABLE = "unavailable"
    """The geo replication is unavailable."""


class LeaseDuration(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The lease duration."""

    INFINITE = "infinite"
    """The lease is of infinite duration."""
    FIXED = "fixed"
    """The lease is of fixed duration."""


class LeaseState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The lease state."""

    AVAILABLE = "available"
    """The lease is available."""
    LEASED = "leased"
    """The lease is currently leased."""
    EXPIRED = "expired"
    """The lease is expired."""
    BREAKING = "breaking"
    """The lease is breaking."""
    BROKEN = "broken"
    """The lease is broken."""


class LeaseStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The lease status."""

    UNLOCKED = "unlocked"
    """The lease is unlocked."""
    LOCKED = "locked"
    """The lease is locked."""


class ListBlobsIncludeItem(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The list blob includes parameter values."""

    COPY = "copy"
    """The include copies."""
    DELETED = "deleted"
    """The include deleted blobs."""
    METADATA = "metadata"
    """The include metadata."""
    SNAPSHOTS = "snapshots"
    """The include snapshots."""
    UNCOMMITTED_BLOBS = "uncommittedblobs"
    """The include uncommitted blobs."""
    VERSIONS = "versions"
    """The include versions."""
    TAGS = "tags"
    """The include tags."""
    IMMUTABILITY_POLICY = "immutabilitypolicy"
    """The include immutable policy."""
    LEGAL_HOLD = "legalhold"
    """The include legal hold."""
    DELETED_WITH_VERSIONS = "deletedwithversions"
    """The include deleted with versions."""


class ListContainersIncludeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Include this parameter to specify that the container's metadata be returned as part of the
    response body.
    """

    METADATA = "metadata"
    """Include metadata"""
    DELETED = "deleted"
    """Include deleted"""
    SYSTEM = "system"
    """Include system"""


class PremiumPageBlobAccessTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The premium page blob access tier types."""

    P4 = "P4"
    """The premium page blob access tier is P4."""
    P6 = "P6"
    """The premium page blob access tier is P6."""
    P10 = "P10"
    """The premium page blob access tier is P10."""
    P15 = "P15"
    """The premium page blob access tier is P15."""
    P20 = "P20"
    """The premium page blob access tier is P20."""
    P30 = "P30"
    """The premium page blob access tier is P30."""
    P40 = "P40"
    """The premium page blob access tier is P40."""
    P50 = "P50"
    """The premium page blob access tier is P50."""
    P60 = "P60"
    """The premium page blob access tier is P60."""
    P70 = "P70"
    """The premium page blob access tier is P70."""
    P80 = "P80"
    """The premium page blob access tier is P80."""


class PublicAccessType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The public access types."""

    BLOB = "blob"
    """Blob access."""
    CONTAINER = "container"
    """Container access."""


class QueryRequestType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The query request, note only SQL supported."""

    SQL = "SQL"
    """The SQL request query type."""


class QueryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The query format type."""

    DELIMITED = "delimited"
    """The query format type is delimited."""
    JSON = "json"
    """The query format type is JSON."""
    ARROW = "arrow"
    """The query format type is Apache Arrow."""
    PARQUET = "parquet"
    """The query format type is Parquet."""


class RehydratePriority(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """If an object is in rehydrate pending state then this header is returned with priority of
    rehydrate. Valid values are High and Standard.
    """

    HIGH = "High"
    """The rehydrate priority is high."""
    STANDARD = "Standard"
    """The rehydrate priority is standard."""


class SequenceNumberActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The sequence number actions."""

    INCREMENT = "increment"
    """Increment the sequence number."""
    MAX = "max"
    """Set the maximum for the sequence number."""
    UPDATE = "update"
    """Update the sequence number."""


class SkuName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The SKU types."""

    STANDARD_LRS = "Standard_LRS"
    """The standard LRS SKU."""
    STANDARD_GRS = "Standard_GRS"
    """The standard GRS SKU."""
    STANDARD_RAGRS = "Standard_RAGRS"
    """The standard RAGRS SKU."""
    STANDARD_ZRS = "Standard_ZRS"
    """The standard ZRS SKU."""
    PREMIUM_LRS = "Premium_LRS"
    """The premium LRS SKU."""
