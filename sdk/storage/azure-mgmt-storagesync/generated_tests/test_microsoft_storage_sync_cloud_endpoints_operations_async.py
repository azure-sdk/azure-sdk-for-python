# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.storagesync.aio import MicrosoftStorageSync

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftStorageSyncCloudEndpointsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MicrosoftStorageSync, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_create(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_create(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={
                    "azureFileShareName": "str",
                    "friendlyName": "str",
                    "id": "str",
                    "name": "str",
                    "storageAccountResourceId": "str",
                    "storageAccountTenantId": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_get(self, resource_group):
        response = await self.client.cloud_endpoints.get(
            resource_group_name=resource_group.name,
            storage_sync_service_name="str",
            sync_group_name="str",
            cloud_endpoint_name="str",
            api_version="2022-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_delete(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_delete(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_list_by_sync_group(self, resource_group):
        response = self.client.cloud_endpoints.list_by_sync_group(
            resource_group_name=resource_group.name,
            storage_sync_service_name="str",
            sync_group_name="str",
            api_version="2022-09-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_pre_backup(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_pre_backup(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={"azureFileShare": "str"},
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_post_backup(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_post_backup(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={"azureFileShare": "str"},
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_pre_restore(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_pre_restore(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={
                    "azureFileShareUri": "str",
                    "backupMetadataPropertyBag": "str",
                    "partition": "str",
                    "pauseWaitForSyncDrainTimePeriodInSeconds": 0,
                    "replicaGroup": "str",
                    "requestId": "str",
                    "restoreFileSpec": [{"isdir": bool, "path": "str"}],
                    "sourceAzureFileShareUri": "str",
                    "status": "str",
                },
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_restoreheartbeat(self, resource_group):
        response = await self.client.cloud_endpoints.restoreheartbeat(
            resource_group_name=resource_group.name,
            storage_sync_service_name="str",
            sync_group_name="str",
            cloud_endpoint_name="str",
            api_version="2022-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_post_restore(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_post_restore(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={
                    "azureFileShareUri": "str",
                    "failedFileList": "str",
                    "partition": "str",
                    "replicaGroup": "str",
                    "requestId": "str",
                    "restoreFileSpec": [{"isdir": bool, "path": "str"}],
                    "sourceAzureFileShareUri": "str",
                    "status": "str",
                },
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_begin_trigger_change_detection(self, resource_group):
        response = await (
            await self.client.cloud_endpoints.begin_trigger_change_detection(
                resource_group_name=resource_group.name,
                storage_sync_service_name="str",
                sync_group_name="str",
                cloud_endpoint_name="str",
                parameters={"changeDetectionMode": "str", "directoryPath": "str", "paths": ["str"]},
                api_version="2022-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cloud_endpoints_afs_share_metadata_certificate_public_keys(self, resource_group):
        response = await self.client.cloud_endpoints.afs_share_metadata_certificate_public_keys(
            resource_group_name=resource_group.name,
            storage_sync_service_name="str",
            sync_group_name="str",
            cloud_endpoint_name="str",
            api_version="2022-09-01",
        )

        # please add some check logic here by yourself
        # ...
