# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AdvSecurityObjectListResponse(_Model):
    """advanced security object.

    :ivar value: response value. Required.
    :vartype value: ~azure.mgmt.paloaltonetworksngfw.models.AdvSecurityObjectModel
    :ivar next_link: next link.
    :vartype next_link: str
    """

    value: "_models.AdvSecurityObjectModel" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """response value. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """next link."""

    @overload
    def __init__(
        self,
        *,
        value: "_models.AdvSecurityObjectModel",
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AdvSecurityObjectModel(_Model):
    """List of custom and predefined url category.

    :ivar type: type of object.
    :vartype type: str
    :ivar entry: URL entry. Required.
    :vartype entry: list[~azure.mgmt.paloaltonetworksngfw.models.NameDescriptionObject]
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """type of object."""
    entry: list["_models.NameDescriptionObject"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """URL entry. Required."""

    @overload
    def __init__(
        self,
        *,
        entry: list["_models.NameDescriptionObject"],
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApplicationInsights(_Model):
    """Application Insights key.

    :ivar id: Resource id for Application Insights.
    :vartype id: str
    :ivar key: Application Insights key.
    :vartype key: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource id for Application Insights."""
    key: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Application Insights key."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AppSeenData(_Model):
    """Data Type for App Seen.

    :ivar count: number of rows. Required.
    :vartype count: int
    :ivar app_seen_list: array of appSeen. Required.
    :vartype app_seen_list: list[~azure.mgmt.paloaltonetworksngfw.models.AppSeenInfo]
    """

    count: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """number of rows. Required."""
    app_seen_list: list["_models.AppSeenInfo"] = rest_field(
        name="appSeenList", visibility=["read", "create", "update", "delete", "query"]
    )
    """array of appSeen. Required."""

    @overload
    def __init__(
        self,
        *,
        count: int,
        app_seen_list: list["_models.AppSeenInfo"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AppSeenInfo(_Model):
    """Definition for App Seen.

    :ivar title: title. Required.
    :vartype title: str
    :ivar category: category. Required.
    :vartype category: str
    :ivar sub_category: subCategory. Required.
    :vartype sub_category: str
    :ivar risk: risk. Required.
    :vartype risk: str
    :ivar tag: tag. Required.
    :vartype tag: str
    :ivar technology: technology. Required.
    :vartype technology: str
    :ivar standard_ports: standardPorts. Required.
    :vartype standard_ports: str
    """

    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """title. Required."""
    category: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """category. Required."""
    sub_category: str = rest_field(name="subCategory", visibility=["read", "create", "update", "delete", "query"])
    """subCategory. Required."""
    risk: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """risk. Required."""
    tag: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """tag. Required."""
    technology: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """technology. Required."""
    standard_ports: str = rest_field(name="standardPorts", visibility=["read", "create", "update", "delete", "query"])
    """standardPorts. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        category: str,
        sub_category: str,
        risk: str,
        tag: str,
        technology: str,
        standard_ports: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureResourceManagerManagedIdentityProperties(_Model):  # pylint: disable=name-too-long
    """The properties of the managed service identities assigned to this resource.

    :ivar tenant_id: The Active Directory tenant id of the principal.
    :vartype tenant_id: str
    :ivar principal_id: The active directory identifier of this principal.
    :vartype principal_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.paloaltonetworksngfw.models.ManagedIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerUserAssignedIdentity]
    """

    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The Active Directory tenant id of the principal."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The active directory identifier of this principal."""
    type: Union[str, "_models.ManagedIdentityType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[dict[str, "_models.AzureResourceManagerUserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedIdentityType"],
        user_assigned_identities: Optional[dict[str, "_models.AzureResourceManagerUserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureResourceManagerUserAssignedIdentity(_Model):
    """A managed identity assigned by the user.

    :ivar client_id: The active directory client identifier for this principal.
    :vartype client_id: str
    :ivar principal_id: The active directory identifier for this principal.
    :vartype principal_id: str
    """

    client_id: Optional[str] = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """The active directory client identifier for this principal."""
    principal_id: Optional[str] = rest_field(
        name="principalId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The active directory identifier for this principal."""

    @overload
    def __init__(
        self,
        *,
        client_id: Optional[str] = None,
        principal_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Category(_Model):
    """URL/EDL to match.

    :ivar url_custom: custom URL. Required.
    :vartype url_custom: list[str]
    :ivar feeds: feed list. Required.
    :vartype feeds: list[str]
    """

    url_custom: list[str] = rest_field(name="urlCustom", visibility=["read", "create", "update", "delete", "query"])
    """custom URL. Required."""
    feeds: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """feed list. Required."""

    @overload
    def __init__(
        self,
        *,
        url_custom: list[str],
        feeds: list[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CertificateObject(_Model):
    """certificate used for inbound and outbound decryption.

    :ivar certificate_signer_resource_id: Resource Id of certificate signer, to be populated only
     when certificateSelfSigned is false.
    :vartype certificate_signer_resource_id: str
    :ivar certificate_self_signed: use certificate self signed. Required. Known values are: "TRUE"
     and "FALSE".
    :vartype certificate_self_signed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar audit_comment: comment for this object.
    :vartype audit_comment: str
    :ivar description: user description for this object.
    :vartype description: str
    :ivar etag: read only string representing last create or update.
    :vartype etag: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    """

    certificate_signer_resource_id: Optional[str] = rest_field(
        name="certificateSignerResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Id of certificate signer, to be populated only when certificateSelfSigned is false."""
    certificate_self_signed: Union[str, "_models.BooleanEnum"] = rest_field(
        name="certificateSelfSigned", visibility=["read", "create", "update", "delete", "query"]
    )
    """use certificate self signed. Required. Known values are: \"TRUE\" and \"FALSE\"."""
    audit_comment: Optional[str] = rest_field(
        name="auditComment", visibility=["read", "create", "update", "delete", "query"]
    )
    """comment for this object."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """user description for this object."""
    etag: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """read only string representing last create or update."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        certificate_self_signed: Union[str, "_models.BooleanEnum"],
        certificate_signer_resource_id: Optional[str] = None,
        audit_comment: Optional[str] = None,
        description: Optional[str] = None,
        etag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    """


class CertificateObjectGlobalRulestackResource(ProxyResource):
    """GlobalRulestack Certificate Object.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.CertificateObject
    """

    properties: "_models.CertificateObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "certificate_signer_resource_id",
        "certificate_self_signed",
        "audit_comment",
        "description",
        "etag",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.CertificateObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CertificateObjectLocalRulestackResource(ProxyResource):
    """LocalRulestack Certificate Object.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.CertificateObject
    """

    properties: "_models.CertificateObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "certificate_signer_resource_id",
        "certificate_self_signed",
        "audit_comment",
        "description",
        "etag",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.CertificateObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Changelog(_Model):
    """Changelog list.

    :ivar changes: list of changes. Required.
    :vartype changes: list[str]
    :ivar last_committed: lastCommitted timestamp.
    :vartype last_committed: ~datetime.datetime
    :ivar last_modified: lastModified timestamp.
    :vartype last_modified: ~datetime.datetime
    """

    changes: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """list of changes. Required."""
    last_committed: Optional[datetime.datetime] = rest_field(
        name="lastCommitted", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """lastCommitted timestamp."""
    last_modified: Optional[datetime.datetime] = rest_field(
        name="lastModified", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """lastModified timestamp."""

    @overload
    def __init__(
        self,
        *,
        changes: list[str],
        last_committed: Optional[datetime.datetime] = None,
        last_modified: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudManagerTenantList(_Model):
    """Cloud Manager Tenant.

    :ivar value: List of Cloud Manager Tenants. Required.
    :vartype value: list[str]
    """

    value: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of Cloud Manager Tenants. Required."""

    @overload
    def __init__(
        self,
        *,
        value: list[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CountriesResponse(_Model):
    """Countries Response Object.

    :ivar value: The Country items on this page. Required.
    :vartype value: list[~azure.mgmt.paloaltonetworksngfw.models.Country]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: list["_models.Country"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Country items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: list["_models.Country"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Country(_Model):
    """Country Description.

    :ivar code: country code. Required.
    :vartype code: str
    :ivar description: code description.
    :vartype description: str
    """

    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """country code. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """code description."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DestinationAddr(_Model):
    """destination address.

    :ivar cidrs: special value 'any'.
    :vartype cidrs: list[str]
    :ivar countries: list of countries.
    :vartype countries: list[str]
    :ivar feeds: list of feeds.
    :vartype feeds: list[str]
    :ivar prefix_lists: prefix list.
    :vartype prefix_lists: list[str]
    :ivar fqdn_lists: fqdn list.
    :vartype fqdn_lists: list[str]
    """

    cidrs: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """special value 'any'."""
    countries: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """list of countries."""
    feeds: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """list of feeds."""
    prefix_lists: Optional[list[str]] = rest_field(
        name="prefixLists", visibility=["read", "create", "update", "delete", "query"]
    )
    """prefix list."""
    fqdn_lists: Optional[list[str]] = rest_field(
        name="fqdnLists", visibility=["read", "create", "update", "delete", "query"]
    )
    """fqdn list."""

    @overload
    def __init__(
        self,
        *,
        cidrs: Optional[list[str]] = None,
        countries: Optional[list[str]] = None,
        feeds: Optional[list[str]] = None,
        prefix_lists: Optional[list[str]] = None,
        fqdn_lists: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DNSSettings(_Model):
    """DNS Proxy settings for Firewall.

    :ivar enable_dns_proxy: Enable DNS proxy, disabled by default. Known values are: "DISABLED" and
     "ENABLED".
    :vartype enable_dns_proxy: str or ~azure.mgmt.paloaltonetworksngfw.models.DNSProxy
    :ivar enabled_dns_type: Enabled DNS proxy type, disabled by default. Known values are: "CUSTOM"
     and "AZURE".
    :vartype enabled_dns_type: str or ~azure.mgmt.paloaltonetworksngfw.models.EnabledDNSType
    :ivar dns_servers: List of IPs associated with the Firewall.
    :vartype dns_servers: list[~azure.mgmt.paloaltonetworksngfw.models.IPAddress]
    """

    enable_dns_proxy: Optional[Union[str, "_models.DNSProxy"]] = rest_field(
        name="enableDnsProxy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable DNS proxy, disabled by default. Known values are: \"DISABLED\" and \"ENABLED\"."""
    enabled_dns_type: Optional[Union[str, "_models.EnabledDNSType"]] = rest_field(
        name="enabledDnsType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enabled DNS proxy type, disabled by default. Known values are: \"CUSTOM\" and \"AZURE\"."""
    dns_servers: Optional[list["_models.IPAddress"]] = rest_field(
        name="dnsServers", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of IPs associated with the Firewall."""

    @overload
    def __init__(
        self,
        *,
        enable_dns_proxy: Optional[Union[str, "_models.DNSProxy"]] = None,
        enabled_dns_type: Optional[Union[str, "_models.EnabledDNSType"]] = None,
        dns_servers: Optional[list["_models.IPAddress"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EndpointConfiguration(_Model):
    """Endpoint Configuration for frontend and backend.

    :ivar port: port ID. Required.
    :vartype port: str
    :ivar address: Address Space. Required.
    :vartype address: ~azure.mgmt.paloaltonetworksngfw.models.IPAddress
    """

    port: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """port ID. Required."""
    address: "_models.IPAddress" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Address Space. Required."""

    @overload
    def __init__(
        self,
        *,
        port: str,
        address: "_models.IPAddress",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.paloaltonetworksngfw.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.paloaltonetworksngfw.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[list["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[list["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.paloaltonetworksngfw.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EventHub(_Model):
    """EventHub configurations.

    :ivar id: Resource ID of EventHub.
    :vartype id: str
    :ivar subscription_id: Subscription Id.
    :vartype subscription_id: str
    :ivar name: EventHub name.
    :vartype name: str
    :ivar name_space: EventHub namespace.
    :vartype name_space: str
    :ivar policy_name: EventHub policy name.
    :vartype policy_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource ID of EventHub."""
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription Id."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """EventHub name."""
    name_space: Optional[str] = rest_field(name="nameSpace", visibility=["read", "create", "update", "delete", "query"])
    """EventHub namespace."""
    policy_name: Optional[str] = rest_field(
        name="policyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """EventHub policy name."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        subscription_id: Optional[str] = None,
        name: Optional[str] = None,
        name_space: Optional[str] = None,
        policy_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallDeploymentProperties(_Model):
    """Properties specific to the Firewall resource deployment.

    :ivar pan_etag: panEtag info.
    :vartype pan_etag: str
    :ivar network_profile: Network settings. Required.
    :vartype network_profile: ~azure.mgmt.paloaltonetworksngfw.models.NetworkProfile
    :ivar is_panorama_managed: Panorama Managed: Default is False. Default will be CloudSec
     managed. Known values are: "TRUE" and "FALSE".
    :vartype is_panorama_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar is_strata_cloud_managed: Strata Cloud Managed: Default is False. Default will be CloudSec
     managed. Known values are: "TRUE" and "FALSE".
    :vartype is_strata_cloud_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar panorama_config: Panorama Configuration.
    :vartype panorama_config: ~azure.mgmt.paloaltonetworksngfw.models.PanoramaConfig
    :ivar strata_cloud_manager_config: Strata Cloud Manager Configuration, only applicable if
     Strata Cloud Manager is selected.
    :vartype strata_cloud_manager_config:
     ~azure.mgmt.paloaltonetworksngfw.models.StrataCloudManagerConfig
    :ivar associated_rulestack: Associated Rulestack.
    :vartype associated_rulestack: ~azure.mgmt.paloaltonetworksngfw.models.RulestackDetails
    :ivar dns_settings: DNS settings for Firewall. Required.
    :vartype dns_settings: ~azure.mgmt.paloaltonetworksngfw.models.DNSSettings
    :ivar front_end_settings: Frontend settings for Firewall.
    :vartype front_end_settings: list[~azure.mgmt.paloaltonetworksngfw.models.FrontendSetting]
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    :ivar plan_data: Billing plan information. Required.
    :vartype plan_data: ~azure.mgmt.paloaltonetworksngfw.models.PlanData
    :ivar marketplace_details: Marketplace details. Required.
    :vartype marketplace_details: ~azure.mgmt.paloaltonetworksngfw.models.MarketplaceDetails
    """

    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """panEtag info."""
    network_profile: "_models.NetworkProfile" = rest_field(
        name="networkProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Network settings. Required."""
    is_panorama_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isPanoramaManaged", visibility=["read", "create", "update", "delete", "query"]
    )
    """Panorama Managed: Default is False. Default will be CloudSec managed. Known values are:
     \"TRUE\" and \"FALSE\"."""
    is_strata_cloud_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isStrataCloudManaged", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Managed: Default is False. Default will be CloudSec managed. Known values are:
     \"TRUE\" and \"FALSE\"."""
    panorama_config: Optional["_models.PanoramaConfig"] = rest_field(
        name="panoramaConfig", visibility=["read", "create", "update", "delete", "query"]
    )
    """Panorama Configuration."""
    strata_cloud_manager_config: Optional["_models.StrataCloudManagerConfig"] = rest_field(
        name="strataCloudManagerConfig", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Manager Configuration, only applicable if Strata Cloud Manager is selected."""
    associated_rulestack: Optional["_models.RulestackDetails"] = rest_field(
        name="associatedRulestack", visibility=["read", "create", "update", "delete", "query"]
    )
    """Associated Rulestack."""
    dns_settings: "_models.DNSSettings" = rest_field(
        name="dnsSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """DNS settings for Firewall. Required."""
    front_end_settings: Optional[list["_models.FrontendSetting"]] = rest_field(
        name="frontEndSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Frontend settings for Firewall."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    plan_data: "_models.PlanData" = rest_field(
        name="planData", visibility=["read", "create", "update", "delete", "query"]
    )
    """Billing plan information. Required."""
    marketplace_details: "_models.MarketplaceDetails" = rest_field(
        name="marketplaceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace details. Required."""

    @overload
    def __init__(
        self,
        *,
        network_profile: "_models.NetworkProfile",
        dns_settings: "_models.DNSSettings",
        plan_data: "_models.PlanData",
        marketplace_details: "_models.MarketplaceDetails",
        pan_etag: Optional[str] = None,
        is_panorama_managed: Optional[Union[str, "_models.BooleanEnum"]] = None,
        is_strata_cloud_managed: Optional[Union[str, "_models.BooleanEnum"]] = None,
        panorama_config: Optional["_models.PanoramaConfig"] = None,
        strata_cloud_manager_config: Optional["_models.StrataCloudManagerConfig"] = None,
        associated_rulestack: Optional["_models.RulestackDetails"] = None,
        front_end_settings: Optional[list["_models.FrontendSetting"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallResource(TrackedResource):
    """PaloAltoNetworks Firewall.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.FirewallDeploymentProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    """

    properties: "_models.FirewallDeploymentProperties" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""
    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    __flattened_items = [
        "pan_etag",
        "network_profile",
        "is_panorama_managed",
        "is_strata_cloud_managed",
        "panorama_config",
        "strata_cloud_manager_config",
        "associated_rulestack",
        "dns_settings",
        "front_end_settings",
        "provisioning_state",
        "plan_data",
        "marketplace_details",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.FirewallDeploymentProperties",
        tags: Optional[dict[str, str]] = None,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FirewallResourceUpdate(_Model):
    """The type used for update operations of the FirewallResource.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The updatable properties of the FirewallResource.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.FirewallResourceUpdateProperties
    """

    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.FirewallResourceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The updatable properties of the FirewallResource."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
        tags: Optional[dict[str, str]] = None,
        properties: Optional["_models.FirewallResourceUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallResourceUpdateProperties(_Model):
    """The updatable properties of the FirewallResource.

    :ivar pan_etag: panEtag info.
    :vartype pan_etag: str
    :ivar network_profile: Network settings.
    :vartype network_profile: ~azure.mgmt.paloaltonetworksngfw.models.NetworkProfile
    :ivar is_panorama_managed: Panorama Managed: Default is False. Default will be CloudSec
     managed. Known values are: "TRUE" and "FALSE".
    :vartype is_panorama_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar is_strata_cloud_managed: Strata Cloud Managed: Default is False. Default will be CloudSec
     managed. Known values are: "TRUE" and "FALSE".
    :vartype is_strata_cloud_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar panorama_config: Panorama Configuration.
    :vartype panorama_config: ~azure.mgmt.paloaltonetworksngfw.models.PanoramaConfig
    :ivar strata_cloud_manager_config: Strata Cloud Manager Configuration, only applicable if
     Strata Cloud Manager is selected.
    :vartype strata_cloud_manager_config:
     ~azure.mgmt.paloaltonetworksngfw.models.StrataCloudManagerConfig
    :ivar associated_rulestack: Associated Rulestack.
    :vartype associated_rulestack: ~azure.mgmt.paloaltonetworksngfw.models.RulestackDetails
    :ivar dns_settings: DNS settings for Firewall.
    :vartype dns_settings: ~azure.mgmt.paloaltonetworksngfw.models.DNSSettings
    :ivar front_end_settings: Frontend settings for Firewall.
    :vartype front_end_settings: list[~azure.mgmt.paloaltonetworksngfw.models.FrontendSetting]
    :ivar plan_data: Billing plan information.
    :vartype plan_data: ~azure.mgmt.paloaltonetworksngfw.models.PlanData
    :ivar marketplace_details: Marketplace details.
    :vartype marketplace_details: ~azure.mgmt.paloaltonetworksngfw.models.MarketplaceDetails
    """

    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """panEtag info."""
    network_profile: Optional["_models.NetworkProfile"] = rest_field(
        name="networkProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Network settings."""
    is_panorama_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isPanoramaManaged", visibility=["read", "create", "update", "delete", "query"]
    )
    """Panorama Managed: Default is False. Default will be CloudSec managed. Known values are:
     \"TRUE\" and \"FALSE\"."""
    is_strata_cloud_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isStrataCloudManaged", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Managed: Default is False. Default will be CloudSec managed. Known values are:
     \"TRUE\" and \"FALSE\"."""
    panorama_config: Optional["_models.PanoramaConfig"] = rest_field(
        name="panoramaConfig", visibility=["read", "create", "update", "delete", "query"]
    )
    """Panorama Configuration."""
    strata_cloud_manager_config: Optional["_models.StrataCloudManagerConfig"] = rest_field(
        name="strataCloudManagerConfig", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Manager Configuration, only applicable if Strata Cloud Manager is selected."""
    associated_rulestack: Optional["_models.RulestackDetails"] = rest_field(
        name="associatedRulestack", visibility=["read", "create", "update", "delete", "query"]
    )
    """Associated Rulestack."""
    dns_settings: Optional["_models.DNSSettings"] = rest_field(
        name="dnsSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """DNS settings for Firewall."""
    front_end_settings: Optional[list["_models.FrontendSetting"]] = rest_field(
        name="frontEndSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Frontend settings for Firewall."""
    plan_data: Optional["_models.PlanData"] = rest_field(
        name="planData", visibility=["read", "create", "update", "delete", "query"]
    )
    """Billing plan information."""
    marketplace_details: Optional["_models.MarketplaceDetails"] = rest_field(
        name="marketplaceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace details."""

    @overload
    def __init__(
        self,
        *,
        pan_etag: Optional[str] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        is_panorama_managed: Optional[Union[str, "_models.BooleanEnum"]] = None,
        is_strata_cloud_managed: Optional[Union[str, "_models.BooleanEnum"]] = None,
        panorama_config: Optional["_models.PanoramaConfig"] = None,
        strata_cloud_manager_config: Optional["_models.StrataCloudManagerConfig"] = None,
        associated_rulestack: Optional["_models.RulestackDetails"] = None,
        dns_settings: Optional["_models.DNSSettings"] = None,
        front_end_settings: Optional[list["_models.FrontendSetting"]] = None,
        plan_data: Optional["_models.PlanData"] = None,
        marketplace_details: Optional["_models.MarketplaceDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallStatusProperty(_Model):
    """Firewall Status.

    :ivar is_panorama_managed: Panorama Managed: Default is False. Default will be CloudSec
     managed. Known values are: "TRUE" and "FALSE".
    :vartype is_panorama_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar health_status: Current status of the Firewall. Known values are: "GREEN", "YELLOW",
     "RED", and "INITIALIZING".
    :vartype health_status: str or ~azure.mgmt.paloaltonetworksngfw.models.HealthStatus
    :ivar health_reason: Detail description of current health of the Firewall.
    :vartype health_reason: str
    :ivar panorama_status: Panorama Status.
    :vartype panorama_status: ~azure.mgmt.paloaltonetworksngfw.models.PanoramaStatus
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", and "Deleted".
    :vartype provisioning_state: str or
     ~azure.mgmt.paloaltonetworksngfw.models.ReadOnlyProvisioningState
    :ivar is_strata_cloud_managed: Strata Cloud Manager. Known values are: "TRUE" and "FALSE".
    :vartype is_strata_cloud_managed: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar strata_cloud_manager_info: This field is only present if Strata Cloud Manager is managing
     the policy for this firewall.
    :vartype strata_cloud_manager_info:
     ~azure.mgmt.paloaltonetworksngfw.models.StrataCloudManagerInfo
    """

    is_panorama_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isPanoramaManaged", visibility=["read"]
    )
    """Panorama Managed: Default is False. Default will be CloudSec managed. Known values are:
     \"TRUE\" and \"FALSE\"."""
    health_status: Optional[Union[str, "_models.HealthStatus"]] = rest_field(name="healthStatus", visibility=["read"])
    """Current status of the Firewall. Known values are: \"GREEN\", \"YELLOW\", \"RED\", and
     \"INITIALIZING\"."""
    health_reason: Optional[str] = rest_field(name="healthReason", visibility=["read"])
    """Detail description of current health of the Firewall."""
    panorama_status: Optional["_models.PanoramaStatus"] = rest_field(name="panoramaStatus", visibility=["read"])
    """Panorama Status."""
    provisioning_state: Optional[Union[str, "_models.ReadOnlyProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", and
     \"Deleted\"."""
    is_strata_cloud_managed: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="isStrataCloudManaged", visibility=["read"]
    )
    """Strata Cloud Manager. Known values are: \"TRUE\" and \"FALSE\"."""
    strata_cloud_manager_info: Optional["_models.StrataCloudManagerInfo"] = rest_field(
        name="strataCloudManagerInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """This field is only present if Strata Cloud Manager is managing the policy for this firewall."""

    @overload
    def __init__(
        self,
        *,
        strata_cloud_manager_info: Optional["_models.StrataCloudManagerInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallStatusResource(ProxyResource):
    """Firewall Status.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.FirewallStatusProperty
    """

    properties: "_models.FirewallStatusProperty" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "is_panorama_managed",
        "health_status",
        "health_reason",
        "panorama_status",
        "provisioning_state",
        "is_strata_cloud_managed",
        "strata_cloud_manager_info",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FirewallStatusProperty",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FqdnListGlobalRulestackResource(ProxyResource):
    """GlobalRulestack fqdnList.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.FqdnObject
    """

    properties: "_models.FqdnObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = ["description", "fqdn_list", "etag", "audit_comment", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FqdnObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FqdnListLocalRulestackResource(ProxyResource):
    """LocalRulestack fqdnList.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.FqdnObject
    """

    properties: "_models.FqdnObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = ["description", "fqdn_list", "etag", "audit_comment", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FqdnObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FqdnObject(_Model):
    """fqdn object.

    :ivar description: fqdn object description.
    :vartype description: str
    :ivar fqdn_list: fqdn list. Required.
    :vartype fqdn_list: list[str]
    :ivar etag: etag info.
    :vartype etag: str
    :ivar audit_comment: comment for this object.
    :vartype audit_comment: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """fqdn object description."""
    fqdn_list: list[str] = rest_field(name="fqdnList", visibility=["read", "create", "update", "delete", "query"])
    """fqdn list. Required."""
    etag: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """etag info."""
    audit_comment: Optional[str] = rest_field(
        name="auditComment", visibility=["read", "create", "update", "delete", "query"]
    )
    """comment for this object."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        fqdn_list: list[str],
        description: Optional[str] = None,
        etag: Optional[str] = None,
        audit_comment: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FrontendSetting(_Model):
    """Frontend setting for Firewall.

    :ivar name: Settings name. Required.
    :vartype name: str
    :ivar protocol: Protocol Type. Required. Known values are: "TCP" and "UDP".
    :vartype protocol: str or ~azure.mgmt.paloaltonetworksngfw.models.ProtocolType
    :ivar frontend_configuration: Frontend configurations. Required.
    :vartype frontend_configuration: ~azure.mgmt.paloaltonetworksngfw.models.EndpointConfiguration
    :ivar backend_configuration: Backend configurations. Required.
    :vartype backend_configuration: ~azure.mgmt.paloaltonetworksngfw.models.EndpointConfiguration
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Settings name. Required."""
    protocol: Union[str, "_models.ProtocolType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Protocol Type. Required. Known values are: \"TCP\" and \"UDP\"."""
    frontend_configuration: "_models.EndpointConfiguration" = rest_field(
        name="frontendConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Frontend configurations. Required."""
    backend_configuration: "_models.EndpointConfiguration" = rest_field(
        name="backendConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Backend configurations. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        protocol: Union[str, "_models.ProtocolType"],
        frontend_configuration: "_models.EndpointConfiguration",
        backend_configuration: "_models.EndpointConfiguration",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GlobalRulestackInfo(_Model):
    """PAN Rulestack Describe Object.

    :ivar azure_id: rulestack description. Required.
    :vartype azure_id: str
    """

    azure_id: str = rest_field(name="azureId", visibility=["read", "create", "update", "delete", "query"])
    """rulestack description. Required."""

    @overload
    def __init__(
        self,
        *,
        azure_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GlobalRulestackResource(ProxyResource):
    """PaloAltoNetworks GlobalRulestack.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.RulestackProperties
    :ivar location: Global Location. Required.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    """

    properties: "_models.RulestackProperties" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""
    location: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Global Location. Required."""
    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    __flattened_items = [
        "pan_etag",
        "pan_location",
        "scope",
        "associated_subscriptions",
        "description",
        "default_mode",
        "min_app_id_version",
        "provisioning_state",
        "security_services",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.RulestackProperties",
        location: str,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GlobalRulestackResourceUpdate(_Model):
    """The type used for update operations of the GlobalRulestackResource.

    :ivar location: Global Location.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    :ivar properties: The updatable properties of the GlobalRulestackResource.
    :vartype properties:
     ~azure.mgmt.paloaltonetworksngfw.models.GlobalRulestackResourceUpdateProperties
    """

    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Global Location."""
    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""
    properties: Optional["_models.GlobalRulestackResourceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The updatable properties of the GlobalRulestackResource."""

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
        properties: Optional["_models.GlobalRulestackResourceUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GlobalRulestackResourceUpdateProperties(_Model):
    """The updatable properties of the GlobalRulestackResource.

    :ivar pan_etag: PanEtag info.
    :vartype pan_etag: str
    :ivar pan_location: Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks.
    :vartype pan_location: str
    :ivar scope: Rulestack Type. Known values are: "LOCAL" and "GLOBAL".
    :vartype scope: str or ~azure.mgmt.paloaltonetworksngfw.models.ScopeType
    :ivar associated_subscriptions: subscription scope of global rulestack.
    :vartype associated_subscriptions: list[str]
    :ivar description: rulestack description.
    :vartype description: str
    :ivar default_mode: Mode for default rules creation. Known values are: "IPS", "FIREWALL", and
     "NONE".
    :vartype default_mode: str or ~azure.mgmt.paloaltonetworksngfw.models.DefaultMode
    :ivar min_app_id_version: minimum version.
    :vartype min_app_id_version: str
    :ivar security_services: Security Profile.
    :vartype security_services: ~azure.mgmt.paloaltonetworksngfw.models.SecurityServices
    """

    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """PanEtag info."""
    pan_location: Optional[str] = rest_field(
        name="panLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks."""
    scope: Optional[Union[str, "_models.ScopeType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Type. Known values are: \"LOCAL\" and \"GLOBAL\"."""
    associated_subscriptions: Optional[list[str]] = rest_field(
        name="associatedSubscriptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """subscription scope of global rulestack."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rulestack description."""
    default_mode: Optional[Union[str, "_models.DefaultMode"]] = rest_field(
        name="defaultMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for default rules creation. Known values are: \"IPS\", \"FIREWALL\", and \"NONE\"."""
    min_app_id_version: Optional[str] = rest_field(
        name="minAppIdVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """minimum version."""
    security_services: Optional["_models.SecurityServices"] = rest_field(
        name="securityServices", visibility=["read", "create", "update", "delete", "query"]
    )
    """Security Profile."""

    @overload
    def __init__(
        self,
        *,
        pan_etag: Optional[str] = None,
        pan_location: Optional[str] = None,
        scope: Optional[Union[str, "_models.ScopeType"]] = None,
        associated_subscriptions: Optional[list[str]] = None,
        description: Optional[str] = None,
        default_mode: Optional[Union[str, "_models.DefaultMode"]] = None,
        min_app_id_version: Optional[str] = None,
        security_services: Optional["_models.SecurityServices"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IPAddress(_Model):
    """IP Address.

    :ivar resource_id: Resource Id.
    :vartype resource_id: str
    :ivar address: Address value.
    :vartype address: str
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Id."""
    address: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Address value."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        address: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IPAddressSpace(_Model):
    """IP Address Space.

    :ivar resource_id: Resource Id.
    :vartype resource_id: str
    :ivar address_space: Address Space.
    :vartype address_space: str
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Id."""
    address_space: Optional[str] = rest_field(
        name="addressSpace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Address Space."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        address_space: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListAppIdResponse(_Model):
    """ListAppIdResponse.

    :ivar value: Required.
    :vartype value: list[str]
    :ivar next_link:
    :vartype next_link: str
    """

    value: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        value: list[str],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListFirewallsResponse(_Model):
    """List firewalls response.

    :ivar value: firewalls list. Required.
    :vartype value: list[str]
    :ivar next_link: next link.
    :vartype next_link: str
    """

    value: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """firewalls list. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """next link."""

    @overload
    def __init__(
        self,
        *,
        value: list[str],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LocalRulesResource(ProxyResource):
    """LocalRulestack rule list.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.RuleEntry
    """

    properties: "_models.RuleEntry" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "etag",
        "rule_name",
        "priority",
        "description",
        "rule_state",
        "source",
        "negate_source",
        "destination",
        "negate_destination",
        "applications",
        "category",
        "protocol",
        "protocol_port_list",
        "inbound_inspection_certificate",
        "audit_comment",
        "action_type",
        "enable_logging",
        "decryption_rule_type",
        "tags",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.RuleEntry",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LocalRulestackResource(TrackedResource):
    """PaloAltoNetworks LocalRulestack.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.RulestackProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    """

    properties: "_models.RulestackProperties" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""
    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    __flattened_items = [
        "pan_etag",
        "pan_location",
        "scope",
        "associated_subscriptions",
        "description",
        "default_mode",
        "min_app_id_version",
        "provisioning_state",
        "security_services",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.RulestackProperties",
        tags: Optional[dict[str, str]] = None,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LocalRulestackResourceUpdate(_Model):
    """The type used for update operations of the LocalRulestackResource.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.paloaltonetworksngfw.models.AzureResourceManagerManagedIdentityProperties
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The updatable properties of the LocalRulestackResource.
    :vartype properties:
     ~azure.mgmt.paloaltonetworksngfw.models.LocalRulestackResourceUpdateProperties
    """

    identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.LocalRulestackResourceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The updatable properties of the LocalRulestackResource."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.AzureResourceManagerManagedIdentityProperties"] = None,
        tags: Optional[dict[str, str]] = None,
        properties: Optional["_models.LocalRulestackResourceUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LocalRulestackResourceUpdateProperties(_Model):
    """The updatable properties of the LocalRulestackResource.

    :ivar pan_etag: PanEtag info.
    :vartype pan_etag: str
    :ivar pan_location: Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks.
    :vartype pan_location: str
    :ivar scope: Rulestack Type. Known values are: "LOCAL" and "GLOBAL".
    :vartype scope: str or ~azure.mgmt.paloaltonetworksngfw.models.ScopeType
    :ivar associated_subscriptions: subscription scope of global rulestack.
    :vartype associated_subscriptions: list[str]
    :ivar description: rulestack description.
    :vartype description: str
    :ivar default_mode: Mode for default rules creation. Known values are: "IPS", "FIREWALL", and
     "NONE".
    :vartype default_mode: str or ~azure.mgmt.paloaltonetworksngfw.models.DefaultMode
    :ivar min_app_id_version: minimum version.
    :vartype min_app_id_version: str
    :ivar security_services: Security Profile.
    :vartype security_services: ~azure.mgmt.paloaltonetworksngfw.models.SecurityServices
    """

    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """PanEtag info."""
    pan_location: Optional[str] = rest_field(
        name="panLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks."""
    scope: Optional[Union[str, "_models.ScopeType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Type. Known values are: \"LOCAL\" and \"GLOBAL\"."""
    associated_subscriptions: Optional[list[str]] = rest_field(
        name="associatedSubscriptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """subscription scope of global rulestack."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rulestack description."""
    default_mode: Optional[Union[str, "_models.DefaultMode"]] = rest_field(
        name="defaultMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for default rules creation. Known values are: \"IPS\", \"FIREWALL\", and \"NONE\"."""
    min_app_id_version: Optional[str] = rest_field(
        name="minAppIdVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """minimum version."""
    security_services: Optional["_models.SecurityServices"] = rest_field(
        name="securityServices", visibility=["read", "create", "update", "delete", "query"]
    )
    """Security Profile."""

    @overload
    def __init__(
        self,
        *,
        pan_etag: Optional[str] = None,
        pan_location: Optional[str] = None,
        scope: Optional[Union[str, "_models.ScopeType"]] = None,
        associated_subscriptions: Optional[list[str]] = None,
        description: Optional[str] = None,
        default_mode: Optional[Union[str, "_models.DefaultMode"]] = None,
        min_app_id_version: Optional[str] = None,
        security_services: Optional["_models.SecurityServices"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogDestination(_Model):
    """Log Destination.

    :ivar storage_configurations: Storage account configurations.
    :vartype storage_configurations: ~azure.mgmt.paloaltonetworksngfw.models.StorageAccount
    :ivar event_hub_configurations: Event Hub configurations.
    :vartype event_hub_configurations: ~azure.mgmt.paloaltonetworksngfw.models.EventHub
    :ivar monitor_configurations: Monitor Log configurations.
    :vartype monitor_configurations: ~azure.mgmt.paloaltonetworksngfw.models.MonitorLog
    """

    storage_configurations: Optional["_models.StorageAccount"] = rest_field(
        name="storageConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage account configurations."""
    event_hub_configurations: Optional["_models.EventHub"] = rest_field(
        name="eventHubConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Event Hub configurations."""
    monitor_configurations: Optional["_models.MonitorLog"] = rest_field(
        name="monitorConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Monitor Log configurations."""

    @overload
    def __init__(
        self,
        *,
        storage_configurations: Optional["_models.StorageAccount"] = None,
        event_hub_configurations: Optional["_models.EventHub"] = None,
        monitor_configurations: Optional["_models.MonitorLog"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogSettings(_Model):
    """Log Settings for Firewall.

    :ivar log_type: One of possible log type. Known values are: "TRAFFIC", "THREAT", "DECRYPTION",
     "WILDFIRE", "DLP", and "AUDIT".
    :vartype log_type: str or ~azure.mgmt.paloaltonetworksngfw.models.LogType
    :ivar log_option: Log option SAME/INDIVIDUAL. Known values are: "SAME_DESTINATION" and
     "INDIVIDUAL_DESTINATION".
    :vartype log_option: str or ~azure.mgmt.paloaltonetworksngfw.models.LogOption
    :ivar application_insights: Application Insight details.
    :vartype application_insights: ~azure.mgmt.paloaltonetworksngfw.models.ApplicationInsights
    :ivar common_destination: Common destination configurations.
    :vartype common_destination: ~azure.mgmt.paloaltonetworksngfw.models.LogDestination
    :ivar traffic_log_destination: Traffic destination configurations.
    :vartype traffic_log_destination: ~azure.mgmt.paloaltonetworksngfw.models.LogDestination
    :ivar threat_log_destination: Threat destination configurations.
    :vartype threat_log_destination: ~azure.mgmt.paloaltonetworksngfw.models.LogDestination
    :ivar decrypt_log_destination: Decrypt destination configurations.
    :vartype decrypt_log_destination: ~azure.mgmt.paloaltonetworksngfw.models.LogDestination
    """

    log_type: Optional[Union[str, "_models.LogType"]] = rest_field(
        name="logType", visibility=["read", "create", "update", "delete", "query"]
    )
    """One of possible log type. Known values are: \"TRAFFIC\", \"THREAT\", \"DECRYPTION\",
     \"WILDFIRE\", \"DLP\", and \"AUDIT\"."""
    log_option: Optional[Union[str, "_models.LogOption"]] = rest_field(
        name="logOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Log option SAME/INDIVIDUAL. Known values are: \"SAME_DESTINATION\" and
     \"INDIVIDUAL_DESTINATION\"."""
    application_insights: Optional["_models.ApplicationInsights"] = rest_field(
        name="applicationInsights", visibility=["read", "create", "update", "delete", "query"]
    )
    """Application Insight details."""
    common_destination: Optional["_models.LogDestination"] = rest_field(
        name="commonDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Common destination configurations."""
    traffic_log_destination: Optional["_models.LogDestination"] = rest_field(
        name="trafficLogDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Traffic destination configurations."""
    threat_log_destination: Optional["_models.LogDestination"] = rest_field(
        name="threatLogDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Threat destination configurations."""
    decrypt_log_destination: Optional["_models.LogDestination"] = rest_field(
        name="decryptLogDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Decrypt destination configurations."""

    @overload
    def __init__(
        self,
        *,
        log_type: Optional[Union[str, "_models.LogType"]] = None,
        log_option: Optional[Union[str, "_models.LogOption"]] = None,
        application_insights: Optional["_models.ApplicationInsights"] = None,
        common_destination: Optional["_models.LogDestination"] = None,
        traffic_log_destination: Optional["_models.LogDestination"] = None,
        threat_log_destination: Optional["_models.LogDestination"] = None,
        decrypt_log_destination: Optional["_models.LogDestination"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MarketplaceDetails(_Model):
    """MarketplaceDetails of PAN Firewall resource.

    :ivar marketplace_subscription_id: Marketplace Subscription Id.
    :vartype marketplace_subscription_id: str
    :ivar offer_id: Offer Id. Required.
    :vartype offer_id: str
    :ivar publisher_id: Publisher Id. Required.
    :vartype publisher_id: str
    :ivar marketplace_subscription_status: Marketplace Subscription Status. Known values are:
     "PendingFulfillmentStart", "Subscribed", "Suspended", "Unsubscribed", "NotStarted", and
     "FulfillmentRequested".
    :vartype marketplace_subscription_status: str or
     ~azure.mgmt.paloaltonetworksngfw.models.MarketplaceSubscriptionStatus
    """

    marketplace_subscription_id: Optional[str] = rest_field(name="marketplaceSubscriptionId", visibility=["read"])
    """Marketplace Subscription Id."""
    offer_id: str = rest_field(name="offerId", visibility=["read", "create", "update", "delete", "query"])
    """Offer Id. Required."""
    publisher_id: str = rest_field(name="publisherId", visibility=["read", "create", "update", "delete", "query"])
    """Publisher Id. Required."""
    marketplace_subscription_status: Optional[Union[str, "_models.MarketplaceSubscriptionStatus"]] = rest_field(
        name="marketplaceSubscriptionStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Status. Known values are: \"PendingFulfillmentStart\", \"Subscribed\",
     \"Suspended\", \"Unsubscribed\", \"NotStarted\", and \"FulfillmentRequested\"."""

    @overload
    def __init__(
        self,
        *,
        offer_id: str,
        publisher_id: str,
        marketplace_subscription_status: Optional[Union[str, "_models.MarketplaceSubscriptionStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricsObject(_Model):
    """Config for Metrics for firewall metrics.

    :ivar application_insights_resource_id: Resource Id of application insights resource. Required.
    :vartype application_insights_resource_id: str
    :ivar application_insights_connection_string: Connection string of application insights
     resource. Required.
    :vartype application_insights_connection_string: str
    :ivar pan_etag: read only string representing last create or update.
    :vartype pan_etag: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    """

    application_insights_resource_id: str = rest_field(
        name="applicationInsightsResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Id of application insights resource. Required."""
    application_insights_connection_string: str = rest_field(
        name="applicationInsightsConnectionString", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connection string of application insights resource. Required."""
    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """read only string representing last create or update."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        application_insights_resource_id: str,
        application_insights_connection_string: str,
        pan_etag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricsObjectFirewallResource(ProxyResource):
    """Firewall Metrics Object.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.MetricsObject
    """

    properties: "_models.MetricsObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "application_insights_resource_id",
        "application_insights_connection_string",
        "pan_etag",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.MetricsObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MonitorLog(_Model):
    """MonitorLog configurations.

    :ivar id: Resource ID of MonitorLog.
    :vartype id: str
    :ivar subscription_id: Subscription Id.
    :vartype subscription_id: str
    :ivar workspace: MonitorLog workspace.
    :vartype workspace: str
    :ivar primary_key: Primary Key value for Monitor.
    :vartype primary_key: str
    :ivar secondary_key: Secondary Key value for Monitor.
    :vartype secondary_key: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource ID of MonitorLog."""
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription Id."""
    workspace: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """MonitorLog workspace."""
    primary_key: Optional[str] = rest_field(
        name="primaryKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Primary Key value for Monitor."""
    secondary_key: Optional[str] = rest_field(
        name="secondaryKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Secondary Key value for Monitor."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        subscription_id: Optional[str] = None,
        workspace: Optional[str] = None,
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NameDescriptionObject(_Model):
    """object type info.

    :ivar name: name value. Required.
    :vartype name: str
    :ivar description: description value.
    :vartype description: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """name value. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """description value."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkProfile(_Model):
    """Network settings for Firewall.

    :ivar vnet_configuration: Vnet configurations.
    :vartype vnet_configuration: ~azure.mgmt.paloaltonetworksngfw.models.VnetConfiguration
    :ivar vwan_configuration: Vwan configurations.
    :vartype vwan_configuration: ~azure.mgmt.paloaltonetworksngfw.models.VwanConfiguration
    :ivar network_type: vnet or vwan, cannot be updated. Required. Known values are: "VNET" and
     "VWAN".
    :vartype network_type: str or ~azure.mgmt.paloaltonetworksngfw.models.NetworkType
    :ivar public_ips: List of IPs associated with the Firewall. Required.
    :vartype public_ips: list[~azure.mgmt.paloaltonetworksngfw.models.IPAddress]
    :ivar enable_egress_nat: Enable egress NAT, enabled by default. Required. Known values are:
     "DISABLED" and "ENABLED".
    :vartype enable_egress_nat: str or ~azure.mgmt.paloaltonetworksngfw.models.EgressNat
    :ivar egress_nat_ip: Egress nat IP to use.
    :vartype egress_nat_ip: list[~azure.mgmt.paloaltonetworksngfw.models.IPAddress]
    :ivar trusted_ranges: Non-RFC 1918 address.
    :vartype trusted_ranges: list[str]
    :ivar private_source_nat_rules_destination: Array of ipv4 destination address for which source
     NAT is to be performed.
    :vartype private_source_nat_rules_destination: list[str]
    """

    vnet_configuration: Optional["_models.VnetConfiguration"] = rest_field(
        name="vnetConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Vnet configurations."""
    vwan_configuration: Optional["_models.VwanConfiguration"] = rest_field(
        name="vwanConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Vwan configurations."""
    network_type: Union[str, "_models.NetworkType"] = rest_field(
        name="networkType", visibility=["read", "create", "update", "delete", "query"]
    )
    """vnet or vwan, cannot be updated. Required. Known values are: \"VNET\" and \"VWAN\"."""
    public_ips: list["_models.IPAddress"] = rest_field(
        name="publicIps", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of IPs associated with the Firewall. Required."""
    enable_egress_nat: Union[str, "_models.EgressNat"] = rest_field(
        name="enableEgressNat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable egress NAT, enabled by default. Required. Known values are: \"DISABLED\" and
     \"ENABLED\"."""
    egress_nat_ip: Optional[list["_models.IPAddress"]] = rest_field(
        name="egressNatIp", visibility=["read", "create", "update", "delete", "query"]
    )
    """Egress nat IP to use."""
    trusted_ranges: Optional[list[str]] = rest_field(
        name="trustedRanges", visibility=["read", "create", "update", "delete", "query"]
    )
    """Non-RFC 1918 address."""
    private_source_nat_rules_destination: Optional[list[str]] = rest_field(
        name="privateSourceNatRulesDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of ipv4 destination address for which source NAT is to be performed."""

    @overload
    def __init__(
        self,
        *,
        network_type: Union[str, "_models.NetworkType"],
        public_ips: list["_models.IPAddress"],
        enable_egress_nat: Union[str, "_models.EgressNat"],
        vnet_configuration: Optional["_models.VnetConfiguration"] = None,
        vwan_configuration: Optional["_models.VwanConfiguration"] = None,
        egress_nat_ip: Optional[list["_models.IPAddress"]] = None,
        trusted_ranges: Optional[list[str]] = None,
        private_source_nat_rules_destination: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.paloaltonetworksngfw.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.paloaltonetworksngfw.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.paloaltonetworksngfw.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class PanoramaConfig(_Model):
    """Panorama Config.

    :ivar config_string: Base64 encoded string representing Panorama parameters to be used by
     Firewall to connect to Panorama. This string is generated via azure plugin in Panorama.
     Required.
    :vartype config_string: str
    :ivar vm_auth_key: VM auth key for panorama connectivity.
    :vartype vm_auth_key: str
    :ivar panorama_server: Primary Panorama Server IP address value in dotted format for IPv4.
    :vartype panorama_server: str
    :ivar panorama_server2: Secondary Panorama Server IP address value in dotted format for IPv4.
    :vartype panorama_server2: str
    :ivar dg_name: Panorama Device Group to join.
    :vartype dg_name: str
    :ivar tpl_name: Panorama Template Stack to join - (Once configured we can not edit the value).
    :vartype tpl_name: str
    :ivar cg_name: Panorama Collector Group to join - (Once configured we can not edit the value).
    :vartype cg_name: str
    :ivar host_name: Resource name(may be unique) for PN admin.
    :vartype host_name: str
    """

    config_string: str = rest_field(name="configString", visibility=["read", "create", "update", "delete", "query"])
    """Base64 encoded string representing Panorama parameters to be used by Firewall to connect to
     Panorama. This string is generated via azure plugin in Panorama. Required."""
    vm_auth_key: Optional[str] = rest_field(name="vmAuthKey", visibility=["read"])
    """VM auth key for panorama connectivity."""
    panorama_server: Optional[str] = rest_field(name="panoramaServer", visibility=["read"])
    """Primary Panorama Server IP address value in dotted format for IPv4."""
    panorama_server2: Optional[str] = rest_field(name="panoramaServer2", visibility=["read"])
    """Secondary Panorama Server IP address value in dotted format for IPv4."""
    dg_name: Optional[str] = rest_field(name="dgName", visibility=["read"])
    """Panorama Device Group to join."""
    tpl_name: Optional[str] = rest_field(name="tplName", visibility=["read"])
    """Panorama Template Stack to join - (Once configured we can not edit the value)."""
    cg_name: Optional[str] = rest_field(name="cgName", visibility=["read"])
    """Panorama Collector Group to join - (Once configured we can not edit the value)."""
    host_name: Optional[str] = rest_field(name="hostName", visibility=["read"])
    """Resource name(may be unique) for PN admin."""

    @overload
    def __init__(
        self,
        *,
        config_string: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PanoramaStatus(_Model):
    """Panorama connectivity information.

    :ivar panorama_server_status: Primary Panorama connection status. Known values are: "UP" and
     "DOWN".
    :vartype panorama_server_status: str or ~azure.mgmt.paloaltonetworksngfw.models.ServerStatus
    :ivar panorama_server2_status: Secondary Panorama connection status. Known values are: "UP" and
     "DOWN".
    :vartype panorama_server2_status: str or ~azure.mgmt.paloaltonetworksngfw.models.ServerStatus
    """

    panorama_server_status: Optional[Union[str, "_models.ServerStatus"]] = rest_field(
        name="panoramaServerStatus", visibility=["read"]
    )
    """Primary Panorama connection status. Known values are: \"UP\" and \"DOWN\"."""
    panorama_server2_status: Optional[Union[str, "_models.ServerStatus"]] = rest_field(
        name="panoramaServer2Status", visibility=["read"]
    )
    """Secondary Panorama connection status. Known values are: \"UP\" and \"DOWN\"."""


class PlanData(_Model):
    """Billing plan information.

    :ivar usage_type: different usage type like PAYG/COMMITTED. Known values are: "PAYG" and
     "COMMITTED".
    :vartype usage_type: str or ~azure.mgmt.paloaltonetworksngfw.models.UsageType
    :ivar billing_cycle: different billing cycles like MONTHLY/WEEKLY. Required. Known values are:
     "WEEKLY" and "MONTHLY".
    :vartype billing_cycle: str or ~azure.mgmt.paloaltonetworksngfw.models.BillingCycle
    :ivar plan_id: plan id as published by Liftr.PAN. Required.
    :vartype plan_id: str
    :ivar effective_date: date when plan was applied.
    :vartype effective_date: ~datetime.datetime
    """

    usage_type: Optional[Union[str, "_models.UsageType"]] = rest_field(
        name="usageType", visibility=["read", "create", "update", "delete", "query"]
    )
    """different usage type like PAYG/COMMITTED. Known values are: \"PAYG\" and \"COMMITTED\"."""
    billing_cycle: Union[str, "_models.BillingCycle"] = rest_field(
        name="billingCycle", visibility=["read", "create", "update", "delete", "query"]
    )
    """different billing cycles like MONTHLY/WEEKLY. Required. Known values are: \"WEEKLY\" and
     \"MONTHLY\"."""
    plan_id: str = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """plan id as published by Liftr.PAN. Required."""
    effective_date: Optional[datetime.datetime] = rest_field(
        name="effectiveDate", visibility=["read"], format="rfc3339"
    )
    """date when plan was applied."""

    @overload
    def __init__(
        self,
        *,
        billing_cycle: Union[str, "_models.BillingCycle"],
        plan_id: str,
        usage_type: Optional[Union[str, "_models.UsageType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PostRulesResource(ProxyResource):
    """PostRulestack rule list.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.RuleEntry
    """

    properties: "_models.RuleEntry" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "etag",
        "rule_name",
        "priority",
        "description",
        "rule_state",
        "source",
        "negate_source",
        "destination",
        "negate_destination",
        "applications",
        "category",
        "protocol",
        "protocol_port_list",
        "inbound_inspection_certificate",
        "audit_comment",
        "action_type",
        "enable_logging",
        "decryption_rule_type",
        "tags",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.RuleEntry",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PredefinedUrlCategoriesResponse(_Model):
    """predefined url categories response.

    :ivar value: The PredefinedUrlCategory items on this page. Required.
    :vartype value: list[~azure.mgmt.paloaltonetworksngfw.models.PredefinedUrlCategory]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: list["_models.PredefinedUrlCategory"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The PredefinedUrlCategory items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: list["_models.PredefinedUrlCategory"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PredefinedUrlCategory(_Model):
    """Predefined URL category object.

    :ivar action: Required.
    :vartype action: str
    :ivar name: Required.
    :vartype name: str
    """

    action: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        action: str,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrefixListGlobalRulestackResource(ProxyResource):
    """GlobalRulestack prefixList.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.PrefixObject
    """

    properties: "_models.PrefixObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = ["description", "prefix_list", "etag", "audit_comment", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.PrefixObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PrefixListResource(ProxyResource):
    """LocalRulestack prefixList.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.PrefixObject
    """

    properties: "_models.PrefixObject" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = ["description", "prefix_list", "etag", "audit_comment", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.PrefixObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PrefixObject(_Model):
    """prefix entry.

    :ivar description: prefix description.
    :vartype description: str
    :ivar prefix_list: prefix list. Required.
    :vartype prefix_list: list[str]
    :ivar etag: etag info.
    :vartype etag: str
    :ivar audit_comment: comment for this object.
    :vartype audit_comment: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """prefix description."""
    prefix_list: list[str] = rest_field(name="prefixList", visibility=["read", "create", "update", "delete", "query"])
    """prefix list. Required."""
    etag: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """etag info."""
    audit_comment: Optional[str] = rest_field(
        name="auditComment", visibility=["read", "create", "update", "delete", "query"]
    )
    """comment for this object."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        prefix_list: list[str],
        description: Optional[str] = None,
        etag: Optional[str] = None,
        audit_comment: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PreRulesResource(ProxyResource):
    """PreRulestack rule list.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.paloaltonetworksngfw.models.SystemData
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.paloaltonetworksngfw.models.RuleEntry
    """

    properties: "_models.RuleEntry" = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource. Required."""

    __flattened_items = [
        "etag",
        "rule_name",
        "priority",
        "description",
        "rule_state",
        "source",
        "negate_source",
        "destination",
        "negate_destination",
        "applications",
        "category",
        "protocol",
        "protocol_port_list",
        "inbound_inspection_certificate",
        "audit_comment",
        "action_type",
        "enable_logging",
        "decryption_rule_type",
        "tags",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.RuleEntry",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ProductSerialNumberRequestStatus(_Model):
    """Create Product Serial Number Request status.

    :ivar status: allocation status of the product serial number. Required.
    :vartype status: str
    """

    status: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """allocation status of the product serial number. Required."""

    @overload
    def __init__(
        self,
        *,
        status: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProductSerialNumberStatus(_Model):
    """Product serial and status for the service.

    :ivar serial_number: product Serial associated with given resource.
    :vartype serial_number: str
    :ivar status: allocation status of the product serial number. Required. Known values are:
     "Allocated" and "InProgress".
    :vartype status: str or ~azure.mgmt.paloaltonetworksngfw.models.ProductSerialStatusValues
    """

    serial_number: Optional[str] = rest_field(
        name="serialNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """product Serial associated with given resource."""
    status: Union[str, "_models.ProductSerialStatusValues"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """allocation status of the product serial number. Required. Known values are: \"Allocated\" and
     \"InProgress\"."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.ProductSerialStatusValues"],
        serial_number: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RuleCounter(_Model):
    """Rule counter.

    :ivar priority: priority number. Required.
    :vartype priority: str
    :ivar rule_stack_name: rule Stack Name.
    :vartype rule_stack_name: str
    :ivar rule_list_name: rule list name.
    :vartype rule_list_name: str
    :ivar firewall_name: firewall name.
    :vartype firewall_name: str
    :ivar rule_name: rule name. Required.
    :vartype rule_name: str
    :ivar hit_count: hit count.
    :vartype hit_count: int
    :ivar app_seen: apps seen.
    :vartype app_seen: ~azure.mgmt.paloaltonetworksngfw.models.AppSeenData
    :ivar timestamp: timestamp of response.
    :vartype timestamp: ~datetime.datetime
    :ivar request_timestamp: timestamp of request.
    :vartype request_timestamp: ~datetime.datetime
    :ivar last_updated_timestamp: last updated timestamp.
    :vartype last_updated_timestamp: ~datetime.datetime
    """

    priority: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """priority number. Required."""
    rule_stack_name: Optional[str] = rest_field(
        name="ruleStackName", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule Stack Name."""
    rule_list_name: Optional[str] = rest_field(
        name="ruleListName", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule list name."""
    firewall_name: Optional[str] = rest_field(
        name="firewallName", visibility=["read", "create", "update", "delete", "query"]
    )
    """firewall name."""
    rule_name: str = rest_field(name="ruleName", visibility=["read", "create", "update", "delete", "query"])
    """rule name. Required."""
    hit_count: Optional[int] = rest_field(name="hitCount", visibility=["read", "create", "update", "delete", "query"])
    """hit count."""
    app_seen: Optional["_models.AppSeenData"] = rest_field(
        name="appSeen", visibility=["read", "create", "update", "delete", "query"]
    )
    """apps seen."""
    timestamp: Optional[datetime.datetime] = rest_field(
        visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """timestamp of response."""
    request_timestamp: Optional[datetime.datetime] = rest_field(
        name="requestTimestamp", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """timestamp of request."""
    last_updated_timestamp: Optional[datetime.datetime] = rest_field(
        name="lastUpdatedTimestamp", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """last updated timestamp."""

    @overload
    def __init__(
        self,
        *,
        priority: str,
        rule_name: str,
        rule_stack_name: Optional[str] = None,
        rule_list_name: Optional[str] = None,
        firewall_name: Optional[str] = None,
        hit_count: Optional[int] = None,
        app_seen: Optional["_models.AppSeenData"] = None,
        timestamp: Optional[datetime.datetime] = None,
        request_timestamp: Optional[datetime.datetime] = None,
        last_updated_timestamp: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RuleCounterReset(_Model):
    """Rule counter reset.

    :ivar priority: priority number.
    :vartype priority: str
    :ivar rule_stack_name: rule Stack Name.
    :vartype rule_stack_name: str
    :ivar rule_list_name: rule list name.
    :vartype rule_list_name: str
    :ivar firewall_name: firewall name.
    :vartype firewall_name: str
    :ivar rule_name: rule name.
    :vartype rule_name: str
    """

    priority: Optional[str] = rest_field(visibility=["read"])
    """priority number."""
    rule_stack_name: Optional[str] = rest_field(
        name="ruleStackName", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule Stack Name."""
    rule_list_name: Optional[str] = rest_field(
        name="ruleListName", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule list name."""
    firewall_name: Optional[str] = rest_field(
        name="firewallName", visibility=["read", "create", "update", "delete", "query"]
    )
    """firewall name."""
    rule_name: Optional[str] = rest_field(name="ruleName", visibility=["read", "create", "update", "delete", "query"])
    """rule name."""

    @overload
    def __init__(
        self,
        *,
        rule_stack_name: Optional[str] = None,
        rule_list_name: Optional[str] = None,
        firewall_name: Optional[str] = None,
        rule_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RuleEntry(_Model):
    """definition of rule.

    :ivar etag: etag info.
    :vartype etag: str
    :ivar rule_name: rule name. Required.
    :vartype rule_name: str
    :ivar priority:
    :vartype priority: int
    :ivar description: rule description.
    :vartype description: str
    :ivar rule_state: state of this rule. Known values are: "DISABLED" and "ENABLED".
    :vartype rule_state: str or ~azure.mgmt.paloaltonetworksngfw.models.StateEnum
    :ivar source: source address.
    :vartype source: ~azure.mgmt.paloaltonetworksngfw.models.SourceAddr
    :ivar negate_source: cidr should not be 'any'. Known values are: "TRUE" and "FALSE".
    :vartype negate_source: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar destination: destination address.
    :vartype destination: ~azure.mgmt.paloaltonetworksngfw.models.DestinationAddr
    :ivar negate_destination: cidr should not be 'any'. Known values are: "TRUE" and "FALSE".
    :vartype negate_destination: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar applications: array of rule applications.
    :vartype applications: list[str]
    :ivar category: rule category.
    :vartype category: ~azure.mgmt.paloaltonetworksngfw.models.Category
    :ivar protocol: any, application-default, TCP:number, UDP:number.
    :vartype protocol: str
    :ivar protocol_port_list: prot port list.
    :vartype protocol_port_list: list[str]
    :ivar inbound_inspection_certificate: inbound Inspection Certificate.
    :vartype inbound_inspection_certificate: str
    :ivar audit_comment: rule comment.
    :vartype audit_comment: str
    :ivar action_type: rule action. Known values are: "Allow", "DenySilent", "DenyResetServer", and
     "DenyResetBoth".
    :vartype action_type: str or ~azure.mgmt.paloaltonetworksngfw.models.ActionEnum
    :ivar enable_logging: enable or disable logging. Known values are: "DISABLED" and "ENABLED".
    :vartype enable_logging: str or ~azure.mgmt.paloaltonetworksngfw.models.StateEnum
    :ivar decryption_rule_type: enable or disable decryption. Known values are:
     "SSLOutboundInspection", "SSLInboundInspection", and "None".
    :vartype decryption_rule_type: str or
     ~azure.mgmt.paloaltonetworksngfw.models.DecryptionRuleTypeEnum
    :ivar tags: tag for rule.
    :vartype tags: list[~azure.mgmt.paloaltonetworksngfw.models.TagInfo]
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    """

    etag: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """etag info."""
    rule_name: str = rest_field(name="ruleName", visibility=["read", "create", "update", "delete", "query"])
    """rule name. Required."""
    priority: Optional[int] = rest_field(visibility=["read"])
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rule description."""
    rule_state: Optional[Union[str, "_models.StateEnum"]] = rest_field(
        name="ruleState", visibility=["read", "create", "update", "delete", "query"]
    )
    """state of this rule. Known values are: \"DISABLED\" and \"ENABLED\"."""
    source: Optional["_models.SourceAddr"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """source address."""
    negate_source: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="negateSource", visibility=["read", "create", "update", "delete", "query"]
    )
    """cidr should not be 'any'. Known values are: \"TRUE\" and \"FALSE\"."""
    destination: Optional["_models.DestinationAddr"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """destination address."""
    negate_destination: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="negateDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """cidr should not be 'any'. Known values are: \"TRUE\" and \"FALSE\"."""
    applications: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """array of rule applications."""
    category: Optional["_models.Category"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rule category."""
    protocol: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """any, application-default, TCP:number, UDP:number."""
    protocol_port_list: Optional[list[str]] = rest_field(
        name="protocolPortList", visibility=["read", "create", "update", "delete", "query"]
    )
    """prot port list."""
    inbound_inspection_certificate: Optional[str] = rest_field(
        name="inboundInspectionCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """inbound Inspection Certificate."""
    audit_comment: Optional[str] = rest_field(
        name="auditComment", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule comment."""
    action_type: Optional[Union[str, "_models.ActionEnum"]] = rest_field(
        name="actionType", visibility=["read", "create", "update", "delete", "query"]
    )
    """rule action. Known values are: \"Allow\", \"DenySilent\", \"DenyResetServer\", and
     \"DenyResetBoth\"."""
    enable_logging: Optional[Union[str, "_models.StateEnum"]] = rest_field(
        name="enableLogging", visibility=["read", "create", "update", "delete", "query"]
    )
    """enable or disable logging. Known values are: \"DISABLED\" and \"ENABLED\"."""
    decryption_rule_type: Optional[Union[str, "_models.DecryptionRuleTypeEnum"]] = rest_field(
        name="decryptionRuleType", visibility=["read", "create", "update", "delete", "query"]
    )
    """enable or disable decryption. Known values are: \"SSLOutboundInspection\",
     \"SSLInboundInspection\", and \"None\"."""
    tags: Optional[list["_models.TagInfo"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """tag for rule."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        rule_name: str,
        etag: Optional[str] = None,
        description: Optional[str] = None,
        rule_state: Optional[Union[str, "_models.StateEnum"]] = None,
        source: Optional["_models.SourceAddr"] = None,
        negate_source: Optional[Union[str, "_models.BooleanEnum"]] = None,
        destination: Optional["_models.DestinationAddr"] = None,
        negate_destination: Optional[Union[str, "_models.BooleanEnum"]] = None,
        applications: Optional[list[str]] = None,
        category: Optional["_models.Category"] = None,
        protocol: Optional[str] = None,
        protocol_port_list: Optional[list[str]] = None,
        inbound_inspection_certificate: Optional[str] = None,
        audit_comment: Optional[str] = None,
        action_type: Optional[Union[str, "_models.ActionEnum"]] = None,
        enable_logging: Optional[Union[str, "_models.StateEnum"]] = None,
        decryption_rule_type: Optional[Union[str, "_models.DecryptionRuleTypeEnum"]] = None,
        tags: Optional[list["_models.TagInfo"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RulestackDetails(_Model):
    """Associated rulestack details.

    :ivar resource_id: Resource Id.
    :vartype resource_id: str
    :ivar rulestack_id: Associated rulestack Id.
    :vartype rulestack_id: str
    :ivar location: Rulestack location.
    :vartype location: str
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Id."""
    rulestack_id: Optional[str] = rest_field(
        name="rulestackId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Associated rulestack Id."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Rulestack location."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        rulestack_id: Optional[str] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RulestackProperties(_Model):
    """PAN Rulestack Describe Object.

    :ivar pan_etag: PanEtag info.
    :vartype pan_etag: str
    :ivar pan_location: Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks.
    :vartype pan_location: str
    :ivar scope: Rulestack Type. Known values are: "LOCAL" and "GLOBAL".
    :vartype scope: str or ~azure.mgmt.paloaltonetworksngfw.models.ScopeType
    :ivar associated_subscriptions: subscription scope of global rulestack.
    :vartype associated_subscriptions: list[str]
    :ivar description: rulestack description.
    :vartype description: str
    :ivar default_mode: Mode for default rules creation. Known values are: "IPS", "FIREWALL", and
     "NONE".
    :vartype default_mode: str or ~azure.mgmt.paloaltonetworksngfw.models.DefaultMode
    :ivar min_app_id_version: minimum version.
    :vartype min_app_id_version: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.paloaltonetworksngfw.models.ProvisioningState
    :ivar security_services: Security Profile.
    :vartype security_services: ~azure.mgmt.paloaltonetworksngfw.models.SecurityServices
    """

    pan_etag: Optional[str] = rest_field(name="panEtag", visibility=["read", "create", "update", "delete", "query"])
    """PanEtag info."""
    pan_location: Optional[str] = rest_field(
        name="panLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks."""
    scope: Optional[Union[str, "_models.ScopeType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Rulestack Type. Known values are: \"LOCAL\" and \"GLOBAL\"."""
    associated_subscriptions: Optional[list[str]] = rest_field(
        name="associatedSubscriptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """subscription scope of global rulestack."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rulestack description."""
    default_mode: Optional[Union[str, "_models.DefaultMode"]] = rest_field(
        name="defaultMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for default rules creation. Known values are: \"IPS\", \"FIREWALL\", and \"NONE\"."""
    min_app_id_version: Optional[str] = rest_field(
        name="minAppIdVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """minimum version."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    security_services: Optional["_models.SecurityServices"] = rest_field(
        name="securityServices", visibility=["read", "create", "update", "delete", "query"]
    )
    """Security Profile."""

    @overload
    def __init__(
        self,
        *,
        pan_etag: Optional[str] = None,
        pan_location: Optional[str] = None,
        scope: Optional[Union[str, "_models.ScopeType"]] = None,
        associated_subscriptions: Optional[list[str]] = None,
        description: Optional[str] = None,
        default_mode: Optional[Union[str, "_models.DefaultMode"]] = None,
        min_app_id_version: Optional[str] = None,
        security_services: Optional["_models.SecurityServices"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityServices(_Model):
    """security services.

    :ivar vulnerability_profile: IPs Vulnerability Profile Data.
    :vartype vulnerability_profile: str
    :ivar anti_spyware_profile: Anti spyware Profile data.
    :vartype anti_spyware_profile: str
    :ivar anti_virus_profile: anti virus profile data.
    :vartype anti_virus_profile: str
    :ivar url_filtering_profile: URL filtering profile data.
    :vartype url_filtering_profile: str
    :ivar file_blocking_profile: File blocking profile data.
    :vartype file_blocking_profile: str
    :ivar dns_subscription: DNS Subscription profile data.
    :vartype dns_subscription: str
    :ivar outbound_un_trust_certificate: Untrusted Egress Decryption profile data.
    :vartype outbound_un_trust_certificate: str
    :ivar outbound_trust_certificate: Trusted Egress Decryption profile data.
    :vartype outbound_trust_certificate: str
    """

    vulnerability_profile: Optional[str] = rest_field(
        name="vulnerabilityProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """IPs Vulnerability Profile Data."""
    anti_spyware_profile: Optional[str] = rest_field(
        name="antiSpywareProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Anti spyware Profile data."""
    anti_virus_profile: Optional[str] = rest_field(
        name="antiVirusProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """anti virus profile data."""
    url_filtering_profile: Optional[str] = rest_field(
        name="urlFilteringProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL filtering profile data."""
    file_blocking_profile: Optional[str] = rest_field(
        name="fileBlockingProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """File blocking profile data."""
    dns_subscription: Optional[str] = rest_field(
        name="dnsSubscription", visibility=["read", "create", "update", "delete", "query"]
    )
    """DNS Subscription profile data."""
    outbound_un_trust_certificate: Optional[str] = rest_field(
        name="outboundUnTrustCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Untrusted Egress Decryption profile data."""
    outbound_trust_certificate: Optional[str] = rest_field(
        name="outboundTrustCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trusted Egress Decryption profile data."""

    @overload
    def __init__(
        self,
        *,
        vulnerability_profile: Optional[str] = None,
        anti_spyware_profile: Optional[str] = None,
        anti_virus_profile: Optional[str] = None,
        url_filtering_profile: Optional[str] = None,
        file_blocking_profile: Optional[str] = None,
        dns_subscription: Optional[str] = None,
        outbound_un_trust_certificate: Optional[str] = None,
        outbound_trust_certificate: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityServicesResponse(_Model):
    """Security services list response.

    :ivar value: response value. Required.
    :vartype value: ~azure.mgmt.paloaltonetworksngfw.models.SecurityServicesTypeList
    :ivar next_link: next link.
    :vartype next_link: str
    """

    value: "_models.SecurityServicesTypeList" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """response value. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """next link."""

    @overload
    def __init__(
        self,
        *,
        value: "_models.SecurityServicesTypeList",
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityServicesTypeList(_Model):
    """Security services type list.

    :ivar type: security services type.
    :vartype type: str
    :ivar entry: list. Required.
    :vartype entry: list[~azure.mgmt.paloaltonetworksngfw.models.NameDescriptionObject]
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """security services type."""
    entry: list["_models.NameDescriptionObject"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """list. Required."""

    @overload
    def __init__(
        self,
        *,
        entry: list["_models.NameDescriptionObject"],
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SourceAddr(_Model):
    """Address properties.

    :ivar cidrs: special value 'any'.
    :vartype cidrs: list[str]
    :ivar countries: list of countries.
    :vartype countries: list[str]
    :ivar feeds: list of feeds.
    :vartype feeds: list[str]
    :ivar prefix_lists: prefix list.
    :vartype prefix_lists: list[str]
    """

    cidrs: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """special value 'any'."""
    countries: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """list of countries."""
    feeds: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """list of feeds."""
    prefix_lists: Optional[list[str]] = rest_field(
        name="prefixLists", visibility=["read", "create", "update", "delete", "query"]
    )
    """prefix list."""

    @overload
    def __init__(
        self,
        *,
        cidrs: Optional[list[str]] = None,
        countries: Optional[list[str]] = None,
        feeds: Optional[list[str]] = None,
        prefix_lists: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageAccount(_Model):
    """Storage Account configurations.

    :ivar id: Resource ID of storage account.
    :vartype id: str
    :ivar subscription_id: Subscription Id.
    :vartype subscription_id: str
    :ivar account_name: Storage account name.
    :vartype account_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource ID of storage account."""
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscription Id."""
    account_name: Optional[str] = rest_field(
        name="accountName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage account name."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        subscription_id: Optional[str] = None,
        account_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StrataCloudManagerConfig(_Model):
    """This field is only present if Strata Cloud Manager is managing the policy for this firewall.

    :ivar cloud_manager_name: Strata Cloud Manager name which is intended to manage the policy for
     this firewall. Required.
    :vartype cloud_manager_name: str
    """

    cloud_manager_name: str = rest_field(
        name="cloudManagerName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Manager name which is intended to manage the policy for this firewall. Required."""

    @overload
    def __init__(
        self,
        *,
        cloud_manager_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StrataCloudManagerInfo(_Model):
    """Strata Cloud Manager Info.

    :ivar folder_name: Strata Cloud Manager folder in which this firewall has been placed.
    :vartype folder_name: str
    :ivar hub_url: URL for Strata Cloud Manager.
    :vartype hub_url: str
    """

    folder_name: Optional[str] = rest_field(
        name="folderName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strata Cloud Manager folder in which this firewall has been placed."""
    hub_url: Optional[str] = rest_field(name="hubUrl", visibility=["read", "create", "update", "delete", "query"])
    """URL for Strata Cloud Manager."""

    @overload
    def __init__(
        self,
        *,
        folder_name: Optional[str] = None,
        hub_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SupportInfo(_Model):
    """Support information for the resource.

    :ivar product_sku: product SKU associated with given resource.
    :vartype product_sku: str
    :ivar product_serial: product Serial associated with given resource.
    :vartype product_serial: str
    :ivar account_registered: account registered in Customer Support Portal. Known values are:
     "TRUE" and "FALSE".
    :vartype account_registered: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar account_id: Support account associated with given resource.
    :vartype account_id: str
    :ivar user_domain_supported: user domain is supported in Customer Support Portal. Known values
     are: "TRUE" and "FALSE".
    :vartype user_domain_supported: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar user_registered: user registered in Customer Support Portal. Known values are: "TRUE" and
     "FALSE".
    :vartype user_registered: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar free_trial: Product usage is in free trial period. Known values are: "TRUE" and "FALSE".
    :vartype free_trial: str or ~azure.mgmt.paloaltonetworksngfw.models.BooleanEnum
    :ivar free_trial_days_left: Free trial days remaining.
    :vartype free_trial_days_left: int
    :ivar free_trial_credit_left: Free trial credit remaining.
    :vartype free_trial_credit_left: int
    :ivar help_url: URL for paloaltonetworks live community.
    :vartype help_url: str
    :ivar support_url: URL for paloaltonetworks Customer Service Portal.
    :vartype support_url: str
    :ivar register_url: URL for registering product in paloaltonetworks Customer Service Portal.
    :vartype register_url: str
    """

    product_sku: Optional[str] = rest_field(
        name="productSku", visibility=["read", "create", "update", "delete", "query"]
    )
    """product SKU associated with given resource."""
    product_serial: Optional[str] = rest_field(
        name="productSerial", visibility=["read", "create", "update", "delete", "query"]
    )
    """product Serial associated with given resource."""
    account_registered: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="accountRegistered", visibility=["read", "create", "update", "delete", "query"]
    )
    """account registered in Customer Support Portal. Known values are: \"TRUE\" and \"FALSE\"."""
    account_id: Optional[str] = rest_field(name="accountId", visibility=["read", "create", "update", "delete", "query"])
    """Support account associated with given resource."""
    user_domain_supported: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="userDomainSupported", visibility=["read", "create", "update", "delete", "query"]
    )
    """user domain is supported in Customer Support Portal. Known values are: \"TRUE\" and \"FALSE\"."""
    user_registered: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="userRegistered", visibility=["read", "create", "update", "delete", "query"]
    )
    """user registered in Customer Support Portal. Known values are: \"TRUE\" and \"FALSE\"."""
    free_trial: Optional[Union[str, "_models.BooleanEnum"]] = rest_field(
        name="freeTrial", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product usage is in free trial period. Known values are: \"TRUE\" and \"FALSE\"."""
    free_trial_days_left: Optional[int] = rest_field(
        name="freeTrialDaysLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """Free trial days remaining."""
    free_trial_credit_left: Optional[int] = rest_field(
        name="freeTrialCreditLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """Free trial credit remaining."""
    help_url: Optional[str] = rest_field(name="helpURL", visibility=["read", "create", "update", "delete", "query"])
    """URL for paloaltonetworks live community."""
    support_url: Optional[str] = rest_field(
        name="supportURL", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for paloaltonetworks Customer Service Portal."""
    register_url: Optional[str] = rest_field(
        name="registerURL", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for registering product in paloaltonetworks Customer Service Portal."""

    @overload
    def __init__(
        self,
        *,
        product_sku: Optional[str] = None,
        product_serial: Optional[str] = None,
        account_registered: Optional[Union[str, "_models.BooleanEnum"]] = None,
        account_id: Optional[str] = None,
        user_domain_supported: Optional[Union[str, "_models.BooleanEnum"]] = None,
        user_registered: Optional[Union[str, "_models.BooleanEnum"]] = None,
        free_trial: Optional[Union[str, "_models.BooleanEnum"]] = None,
        free_trial_days_left: Optional[int] = None,
        free_trial_credit_left: Optional[int] = None,
        help_url: Optional[str] = None,
        support_url: Optional[str] = None,
        register_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SupportInfoModel(_Model):
    """Support information for the service.

    :ivar product_sku: product SKU associated with given resource.
    :vartype product_sku: str
    :ivar product_serial: product Serial associated with given resource.
    :vartype product_serial: str
    :ivar account_registration_status: account registered in Customer Support Portal. Known values
     are: "Registered" and "Not Registered".
    :vartype account_registration_status: str or
     ~azure.mgmt.paloaltonetworksngfw.models.RegistrationStatus
    :ivar account_id: Support account associated with given resource.
    :vartype account_id: str
    :ivar free_trial: Product usage is in free trial period. Known values are: "Enabled" and
     "Disabled".
    :vartype free_trial: str or ~azure.mgmt.paloaltonetworksngfw.models.EnableStatus
    :ivar free_trial_days_left: Free trial days remaining.
    :vartype free_trial_days_left: int
    :ivar free_trial_credit_left: Free trial credit remaining.
    :vartype free_trial_credit_left: int
    :ivar help_url: URL for paloaltonetworks live community.
    :vartype help_url: str
    :ivar support_url: URL for paloaltonetworks Customer Service Portal.
    :vartype support_url: str
    :ivar register_url: URL for registering product in paloaltonetworks Customer Service Portal.
    :vartype register_url: str
    :ivar hub_url: URL for Strata Cloud Manager.
    :vartype hub_url: str
    :ivar credits: credits purchased, unit per hour.
    :vartype credits: int
    :ivar monthly_credit_left: monthly credit is computed as credits * days in calendar month.
    :vartype monthly_credit_left: int
    :ivar start_date_for_credits: date in format yyyy-mm-dd.
    :vartype start_date_for_credits: str
    :ivar end_date_for_credits: date in format yyyy-mm-dd.
    :vartype end_date_for_credits: str
    """

    product_sku: Optional[str] = rest_field(
        name="productSku", visibility=["read", "create", "update", "delete", "query"]
    )
    """product SKU associated with given resource."""
    product_serial: Optional[str] = rest_field(
        name="productSerial", visibility=["read", "create", "update", "delete", "query"]
    )
    """product Serial associated with given resource."""
    account_registration_status: Optional[Union[str, "_models.RegistrationStatus"]] = rest_field(
        name="accountRegistrationStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """account registered in Customer Support Portal. Known values are: \"Registered\" and \"Not
     Registered\"."""
    account_id: Optional[str] = rest_field(name="accountId", visibility=["read", "create", "update", "delete", "query"])
    """Support account associated with given resource."""
    free_trial: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        name="freeTrial", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product usage is in free trial period. Known values are: \"Enabled\" and \"Disabled\"."""
    free_trial_days_left: Optional[int] = rest_field(
        name="freeTrialDaysLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """Free trial days remaining."""
    free_trial_credit_left: Optional[int] = rest_field(
        name="freeTrialCreditLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """Free trial credit remaining."""
    help_url: Optional[str] = rest_field(name="helpURL", visibility=["read", "create", "update", "delete", "query"])
    """URL for paloaltonetworks live community."""
    support_url: Optional[str] = rest_field(
        name="supportURL", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for paloaltonetworks Customer Service Portal."""
    register_url: Optional[str] = rest_field(
        name="registerURL", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL for registering product in paloaltonetworks Customer Service Portal."""
    hub_url: Optional[str] = rest_field(name="hubUrl", visibility=["read", "create", "update", "delete", "query"])
    """URL for Strata Cloud Manager."""
    credits: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """credits purchased, unit per hour."""
    monthly_credit_left: Optional[int] = rest_field(
        name="monthlyCreditLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """monthly credit is computed as credits * days in calendar month."""
    start_date_for_credits: Optional[str] = rest_field(
        name="startDateForCredits", visibility=["read", "create", "update", "delete", "query"]
    )
    """date in format yyyy-mm-dd."""
    end_date_for_credits: Optional[str] = rest_field(
        name="endDateForCredits", visibility=["read", "create", "update", "delete", "query"]
    )
    """date in format yyyy-mm-dd."""

    @overload
    def __init__(
        self,
        *,
        product_sku: Optional[str] = None,
        product_serial: Optional[str] = None,
        account_registration_status: Optional[Union[str, "_models.RegistrationStatus"]] = None,
        account_id: Optional[str] = None,
        free_trial: Optional[Union[str, "_models.EnableStatus"]] = None,
        free_trial_days_left: Optional[int] = None,
        free_trial_credit_left: Optional[int] = None,
        help_url: Optional[str] = None,
        support_url: Optional[str] = None,
        register_url: Optional[str] = None,
        hub_url: Optional[str] = None,
        credits: Optional[int] = None,
        monthly_credit_left: Optional[int] = None,
        start_date_for_credits: Optional[str] = None,
        end_date_for_credits: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.paloaltonetworksngfw.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.paloaltonetworksngfw.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TagInfo(_Model):
    """Tag.

    :ivar key: tag name. Required.
    :vartype key: str
    :ivar value: tag value. Required.
    :vartype value: str
    """

    key: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """tag name. Required."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """tag value. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VnetConfiguration(_Model):
    """VnetInfo for Firewall Networking.

    :ivar vnet: Azure Virtual Network. Required.
    :vartype vnet: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar trust_subnet: Trust Subnet. Required.
    :vartype trust_subnet: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar un_trust_subnet: Untrust Subnet. Required.
    :vartype un_trust_subnet: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar ip_of_trust_subnet_for_udr: IP of trust subnet for UDR.
    :vartype ip_of_trust_subnet_for_udr: ~azure.mgmt.paloaltonetworksngfw.models.IPAddress
    """

    vnet: "_models.IPAddressSpace" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Azure Virtual Network. Required."""
    trust_subnet: "_models.IPAddressSpace" = rest_field(
        name="trustSubnet", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trust Subnet. Required."""
    un_trust_subnet: "_models.IPAddressSpace" = rest_field(
        name="unTrustSubnet", visibility=["read", "create", "update", "delete", "query"]
    )
    """Untrust Subnet. Required."""
    ip_of_trust_subnet_for_udr: Optional["_models.IPAddress"] = rest_field(
        name="ipOfTrustSubnetForUdr", visibility=["read", "create", "update", "delete", "query"]
    )
    """IP of trust subnet for UDR."""

    @overload
    def __init__(
        self,
        *,
        vnet: "_models.IPAddressSpace",
        trust_subnet: "_models.IPAddressSpace",
        un_trust_subnet: "_models.IPAddressSpace",
        ip_of_trust_subnet_for_udr: Optional["_models.IPAddress"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VwanConfiguration(_Model):
    """VwanInfo for Firewall Networking.

    :ivar network_virtual_appliance_id: Network Virtual Appliance resource ID.
    :vartype network_virtual_appliance_id: str
    :ivar v_hub: vHub Address. Required.
    :vartype v_hub: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar trust_subnet: Trust Subnet.
    :vartype trust_subnet: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar un_trust_subnet: Untrust Subnet.
    :vartype un_trust_subnet: ~azure.mgmt.paloaltonetworksngfw.models.IPAddressSpace
    :ivar ip_of_trust_subnet_for_udr: IP of trust subnet for UDR.
    :vartype ip_of_trust_subnet_for_udr: ~azure.mgmt.paloaltonetworksngfw.models.IPAddress
    """

    network_virtual_appliance_id: Optional[str] = rest_field(
        name="networkVirtualApplianceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Network Virtual Appliance resource ID."""
    v_hub: "_models.IPAddressSpace" = rest_field(
        name="vHub", visibility=["read", "create", "update", "delete", "query"]
    )
    """vHub Address. Required."""
    trust_subnet: Optional["_models.IPAddressSpace"] = rest_field(
        name="trustSubnet", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trust Subnet."""
    un_trust_subnet: Optional["_models.IPAddressSpace"] = rest_field(
        name="unTrustSubnet", visibility=["read", "create", "update", "delete", "query"]
    )
    """Untrust Subnet."""
    ip_of_trust_subnet_for_udr: Optional["_models.IPAddress"] = rest_field(
        name="ipOfTrustSubnetForUdr", visibility=["read", "create", "update", "delete", "query"]
    )
    """IP of trust subnet for UDR."""

    @overload
    def __init__(
        self,
        *,
        v_hub: "_models.IPAddressSpace",
        network_virtual_appliance_id: Optional[str] = None,
        trust_subnet: Optional["_models.IPAddressSpace"] = None,
        un_trust_subnet: Optional["_models.IPAddressSpace"] = None,
        ip_of_trust_subnet_for_udr: Optional["_models.IPAddress"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
