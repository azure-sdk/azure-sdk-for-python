# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, List, Optional, TypeVar
import urllib.parse

from azure.core import MatchConditions
from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceModifiedError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import _deserialize
from ...operations._operations import (
    build_api_definitions_export_specification_request,
    build_api_definitions_get_definition_request,
    build_api_definitions_list_definitions_request,
    build_api_deployments_get_deployment_request,
    build_api_deployments_list_deployments_request,
    build_api_versions_get_version_request,
    build_api_versions_list_versions_request,
    build_apis_get_api_request,
    build_apis_list_apis_request,
    build_environments_get_environment_request,
    build_environments_list_environments_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ModelsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`models` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


class ApisOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`apis` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_apis(
        self,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ApiResource"]:
        # pylint: disable=line-too-long
        """List a collection of APIs.

        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :return: An iterator like instance of ApiResource
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~microsoft.apicenter.models.ApiResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiName": "str",  # API identifier. Required.
                    "kind": "str",  # Kind of API. For example, REST or GraphQL. Required.
                    "lastUpdated": "2020-02-20 00:00:00",  # Last updated date and time.
                      Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the API. Required.
                    "contacts": [
                        {
                            "email": "str",  # Email address for the contact. Required.
                            "name": "str",  # Name of the contact. Required.
                            "url": "str"  # URL for the contact. Required.
                        }
                    ],
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for API
                          entries.
                    },
                    "description": "str",  # Optional. The description of the API.
                    "externalDocumentation": [
                        {
                            "description": "str",  # Description of the documentation.
                              Required.
                            "title": "str",  # Title of the documentation. Required.
                            "url": "str"  # URL pointing to the documentation. Required.
                        }
                    ],
                    "license": {
                        "identifier": "str",  # SPDX license information for the API. The
                          identifier field is mutually exclusive of the URL field. Required.
                        "name": "str",  # Name of the license. Required.
                        "url": "str"  # URL pointing to the license details. The URL field is
                          mutually exclusive of the identifier field. Required.
                    },
                    "lifecycleStage": "str",  # Optional. Current lifecycle stage of the API.
                      Known values are: "design", "development", "testing", "preview", "production",
                      "deprecated", and "retired".
                    "summary": "str",  # Optional. Short descrption of the API.
                    "termsOfService": {
                        "url": "str"  # URL pointing to the terms of service. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.ApiResource]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_apis_list_apis_request(
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    select=select,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ApiResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_api(
        self,
        api_name: str,
        *,
        if_unmodified_since: Optional[datetime.datetime] = None,
        if_modified_since: Optional[datetime.datetime] = None,
        etag: Optional[str] = None,
        match_condition: Optional[MatchConditions] = None,
        **kwargs: Any
    ) -> _models.ApiResource:
        # pylint: disable=line-too-long
        """Get an API.

        :param api_name: API identifier. Required.
        :type api_name: str
        :keyword if_unmodified_since: The request should only proceed if the entity was not modified
         after this time. Default value is None.
        :paramtype if_unmodified_since: ~datetime.datetime
        :keyword if_modified_since: The request should only proceed if the entity was modified after
         this time. Default value is None.
        :paramtype if_modified_since: ~datetime.datetime
        :keyword etag: check if resource is changed. Set None to skip checking etag. Default value is
         None.
        :paramtype etag: str
        :keyword match_condition: The match condition to use upon the etag. Default value is None.
        :paramtype match_condition: ~azure.core.MatchConditions
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ApiResource. The ApiResource is compatible with MutableMapping
        :rtype: ~microsoft.apicenter.models.ApiResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiName": "str",  # API identifier. Required.
                    "kind": "str",  # Kind of API. For example, REST or GraphQL. Required.
                    "lastUpdated": "2020-02-20 00:00:00",  # Last updated date and time.
                      Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the API. Required.
                    "contacts": [
                        {
                            "email": "str",  # Email address for the contact. Required.
                            "name": "str",  # Name of the contact. Required.
                            "url": "str"  # URL for the contact. Required.
                        }
                    ],
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for API
                          entries.
                    },
                    "description": "str",  # Optional. The description of the API.
                    "externalDocumentation": [
                        {
                            "description": "str",  # Description of the documentation.
                              Required.
                            "title": "str",  # Title of the documentation. Required.
                            "url": "str"  # URL pointing to the documentation. Required.
                        }
                    ],
                    "license": {
                        "identifier": "str",  # SPDX license information for the API. The
                          identifier field is mutually exclusive of the URL field. Required.
                        "name": "str",  # Name of the license. Required.
                        "url": "str"  # URL pointing to the license details. The URL field is
                          mutually exclusive of the identifier field. Required.
                    },
                    "lifecycleStage": "str",  # Optional. Current lifecycle stage of the API.
                      Known values are: "design", "development", "testing", "preview", "production",
                      "deprecated", and "retired".
                    "summary": "str",  # Optional. Short descrption of the API.
                    "termsOfService": {
                        "url": "str"  # URL pointing to the terms of service. Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        if match_condition == MatchConditions.IfNotModified:
            error_map[412] = ResourceModifiedError
        elif match_condition == MatchConditions.IfPresent:
            error_map[412] = ResourceNotFoundError
        elif match_condition == MatchConditions.IfMissing:
            error_map[412] = ResourceExistsError
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ApiResource] = kwargs.pop("cls", None)

        _request = build_apis_get_api_request(
            api_name=api_name,
            if_unmodified_since=if_unmodified_since,
            if_modified_since=if_modified_since,
            etag=etag,
            match_condition=match_condition,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ApiResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class ApiDefinitionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`api_definitions` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_definitions(
        self,
        api_name: str,
        version_name: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ApiDefinitionResource"]:
        """List a collection of API definitions.

        :param api_name: API identifier. Required.
        :type api_name: str
        :param version_name: Version identifier. Required.
        :type version_name: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :return: An iterator like instance of ApiDefinitionResource
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~microsoft.apicenter.models.ApiDefinitionResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiDefinitionName": "str",  # Definition identifier. Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the API definition. Required.
                    "description": "str",  # Optional. The description of the API definition.
                    "specification": {
                        "name": "str",  # API specification name, e.g. 'swagger' or
                          'openapi'. Required.
                        "version": "str"  # API specification version, e.g. '3.0.1'.
                          Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.ApiDefinitionResource]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_api_definitions_list_definitions_request(
                    api_name=api_name,
                    version_name=version_name,
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    select=select,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ApiDefinitionResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_definition(
        self,
        api_name: str,
        version_name: str,
        api_definition_name: str,
        *,
        if_unmodified_since: Optional[datetime.datetime] = None,
        if_modified_since: Optional[datetime.datetime] = None,
        etag: Optional[str] = None,
        match_condition: Optional[MatchConditions] = None,
        **kwargs: Any
    ) -> _models.ApiDefinitionResource:
        """Get an API definition.

        :param api_name: API identifier. Required.
        :type api_name: str
        :param version_name: Version identifier. Required.
        :type version_name: str
        :param api_definition_name: Definition identifier. Required.
        :type api_definition_name: str
        :keyword if_unmodified_since: The request should only proceed if the entity was not modified
         after this time. Default value is None.
        :paramtype if_unmodified_since: ~datetime.datetime
        :keyword if_modified_since: The request should only proceed if the entity was modified after
         this time. Default value is None.
        :paramtype if_modified_since: ~datetime.datetime
        :keyword etag: check if resource is changed. Set None to skip checking etag. Default value is
         None.
        :paramtype etag: str
        :keyword match_condition: The match condition to use upon the etag. Default value is None.
        :paramtype match_condition: ~azure.core.MatchConditions
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ApiDefinitionResource. The ApiDefinitionResource is compatible with MutableMapping
        :rtype: ~microsoft.apicenter.models.ApiDefinitionResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiDefinitionName": "str",  # Definition identifier. Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the API definition. Required.
                    "description": "str",  # Optional. The description of the API definition.
                    "specification": {
                        "name": "str",  # API specification name, e.g. 'swagger' or
                          'openapi'. Required.
                        "version": "str"  # API specification version, e.g. '3.0.1'.
                          Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        if match_condition == MatchConditions.IfNotModified:
            error_map[412] = ResourceModifiedError
        elif match_condition == MatchConditions.IfPresent:
            error_map[412] = ResourceNotFoundError
        elif match_condition == MatchConditions.IfMissing:
            error_map[412] = ResourceExistsError
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ApiDefinitionResource] = kwargs.pop("cls", None)

        _request = build_api_definitions_get_definition_request(
            api_name=api_name,
            version_name=version_name,
            api_definition_name=api_definition_name,
            if_unmodified_since=if_unmodified_since,
            if_modified_since=if_modified_since,
            etag=etag,
            match_condition=match_condition,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ApiDefinitionResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def export_specification(
        self, api_name: str, version_name: str, api_definition_name: str, **kwargs: Any
    ) -> _models.ExportSpecificationResource:
        """Export an API specification.

        :param api_name: API identifier. Required.
        :type api_name: str
        :param version_name: Version identifier. Required.
        :type version_name: str
        :param api_definition_name: Definition identifier. Required.
        :type api_definition_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ExportSpecificationResource. The ExportSpecificationResource is compatible with
         MutableMapping
        :rtype: ~microsoft.apicenter.models.ExportSpecificationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "apiDefinitionName": "str",  # Definition identifier. Required.
                    "format": "str",  # The result format of the specification export. Required.
                    "value": "str"  # The result of the specification export. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ExportSpecificationResource] = kwargs.pop("cls", None)

        _request = build_api_definitions_export_specification_request(
            api_name=api_name,
            version_name=version_name,
            api_definition_name=api_definition_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Repeatability-Result"] = self._deserialize(
            "str", response.headers.get("Repeatability-Result")
        )
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ExportSpecificationResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class ApiDeploymentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`api_deployments` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_deployments(
        self,
        api_name: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ApiDeploymentResource"]:
        """List a collection of API deployments.

        :param api_name: API identifier. Required.
        :type api_name: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :return: An iterator like instance of ApiDeploymentResource
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~microsoft.apicenter.models.ApiDeploymentResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "deploymentName": "str",  # Deployment identifier. Required.
                    "environment": "str",  # The name of the deployment environment. Required.
                    "name": "str",  # The resource name. Required.
                    "server": {
                        "runtimeUri": [
                            "str"  # Base runtime URIs for this deployment. Required.
                        ]
                    },
                    "title": "str",  # The name of the deployment. Required.
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for Deployment
                          entries..
                    },
                    "description": "str",  # Optional. The description of the deployment.
                    "recommended": bool  # Optional. Indicates if this is currently recommended
                      deployment.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.ApiDeploymentResource]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_api_deployments_list_deployments_request(
                    api_name=api_name,
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    select=select,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ApiDeploymentResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_deployment(
        self,
        api_name: str,
        deployment_name: str,
        *,
        if_unmodified_since: Optional[datetime.datetime] = None,
        if_modified_since: Optional[datetime.datetime] = None,
        etag: Optional[str] = None,
        match_condition: Optional[MatchConditions] = None,
        **kwargs: Any
    ) -> _models.ApiDeploymentResource:
        """Get an API deployment.

        :param api_name: API identifier. Required.
        :type api_name: str
        :param deployment_name: Deployment identifier. Required.
        :type deployment_name: str
        :keyword if_unmodified_since: The request should only proceed if the entity was not modified
         after this time. Default value is None.
        :paramtype if_unmodified_since: ~datetime.datetime
        :keyword if_modified_since: The request should only proceed if the entity was modified after
         this time. Default value is None.
        :paramtype if_modified_since: ~datetime.datetime
        :keyword etag: check if resource is changed. Set None to skip checking etag. Default value is
         None.
        :paramtype etag: str
        :keyword match_condition: The match condition to use upon the etag. Default value is None.
        :paramtype match_condition: ~azure.core.MatchConditions
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ApiDeploymentResource. The ApiDeploymentResource is compatible with MutableMapping
        :rtype: ~microsoft.apicenter.models.ApiDeploymentResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "deploymentName": "str",  # Deployment identifier. Required.
                    "environment": "str",  # The name of the deployment environment. Required.
                    "name": "str",  # The resource name. Required.
                    "server": {
                        "runtimeUri": [
                            "str"  # Base runtime URIs for this deployment. Required.
                        ]
                    },
                    "title": "str",  # The name of the deployment. Required.
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for Deployment
                          entries..
                    },
                    "description": "str",  # Optional. The description of the deployment.
                    "recommended": bool  # Optional. Indicates if this is currently recommended
                      deployment.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        if match_condition == MatchConditions.IfNotModified:
            error_map[412] = ResourceModifiedError
        elif match_condition == MatchConditions.IfPresent:
            error_map[412] = ResourceNotFoundError
        elif match_condition == MatchConditions.IfMissing:
            error_map[412] = ResourceExistsError
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ApiDeploymentResource] = kwargs.pop("cls", None)

        _request = build_api_deployments_get_deployment_request(
            api_name=api_name,
            deployment_name=deployment_name,
            if_unmodified_since=if_unmodified_since,
            if_modified_since=if_modified_since,
            etag=etag,
            match_condition=match_condition,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ApiDeploymentResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class EnvironmentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`environments` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_environments(
        self,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.EnvironmentResource"]:
        """List a collection of environments.

        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :return: An iterator like instance of EnvironmentResource
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~microsoft.apicenter.models.EnvironmentResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "environmentName": "str",  # Environment identifier. Required.
                    "kind": "str",  # Kind of deployment environment. Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the environment. Required.
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for Environment
                          entries.
                    },
                    "description": "str",  # Optional. Description of the environment.
                    "onboarding": {
                        "developerPortalUri": [
                            "str"  # Developer portal URIs of the environment. Required.
                        ],
                        "instructions": "str"  # Instructions how to onboard to the
                          environment. Required.
                    },
                    "server": {
                        "managementPortalUri": [
                            "str"  # URIs of the server's management portal. Required.
                        ],
                        "type": "str"  # Type of the server that represents the environment.
                          Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.EnvironmentResource]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_environments_list_environments_request(
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    select=select,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.EnvironmentResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_environment(
        self,
        environment_name: str,
        *,
        if_unmodified_since: Optional[datetime.datetime] = None,
        if_modified_since: Optional[datetime.datetime] = None,
        etag: Optional[str] = None,
        match_condition: Optional[MatchConditions] = None,
        **kwargs: Any
    ) -> _models.EnvironmentResource:
        """Get an environment.

        :param environment_name: Environment identifier. Required.
        :type environment_name: str
        :keyword if_unmodified_since: The request should only proceed if the entity was not modified
         after this time. Default value is None.
        :paramtype if_unmodified_since: ~datetime.datetime
        :keyword if_modified_since: The request should only proceed if the entity was modified after
         this time. Default value is None.
        :paramtype if_modified_since: ~datetime.datetime
        :keyword etag: check if resource is changed. Set None to skip checking etag. Default value is
         None.
        :paramtype etag: str
        :keyword match_condition: The match condition to use upon the etag. Default value is None.
        :paramtype match_condition: ~azure.core.MatchConditions
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: EnvironmentResource. The EnvironmentResource is compatible with MutableMapping
        :rtype: ~microsoft.apicenter.models.EnvironmentResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "environmentName": "str",  # Environment identifier. Required.
                    "kind": "str",  # Kind of deployment environment. Required.
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # The name of the environment. Required.
                    "customProperties": {
                        "str": "str"  # Optional. The custom metadata defined for Environment
                          entries.
                    },
                    "description": "str",  # Optional. Description of the environment.
                    "onboarding": {
                        "developerPortalUri": [
                            "str"  # Developer portal URIs of the environment. Required.
                        ],
                        "instructions": "str"  # Instructions how to onboard to the
                          environment. Required.
                    },
                    "server": {
                        "managementPortalUri": [
                            "str"  # URIs of the server's management portal. Required.
                        ],
                        "type": "str"  # Type of the server that represents the environment.
                          Required.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        if match_condition == MatchConditions.IfNotModified:
            error_map[412] = ResourceModifiedError
        elif match_condition == MatchConditions.IfPresent:
            error_map[412] = ResourceNotFoundError
        elif match_condition == MatchConditions.IfMissing:
            error_map[412] = ResourceExistsError
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.EnvironmentResource] = kwargs.pop("cls", None)

        _request = build_environments_get_environment_request(
            environment_name=environment_name,
            if_unmodified_since=if_unmodified_since,
            if_modified_since=if_modified_since,
            etag=etag,
            match_condition=match_condition,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.EnvironmentResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class ApiVersionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.apicenter.aio.DataApiClient`'s
        :attr:`api_versions` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_versions(
        self,
        api_name: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        select: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ApiVersionResource"]:
        # pylint: disable=line-too-long
        """List a collection of API versions.

        :param api_name: API identifier. Required.
        :type api_name: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :return: An iterator like instance of ApiVersionResource
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~microsoft.apicenter.models.ApiVersionResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "lifecycleStage": "str",  # Current lifecycle stage of the API version.
                      Required. Known values are: "design", "development", "testing", "preview",
                      "production", "deprecated", and "retired".
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # Version title. Required.
                    "versionName": "str"  # Version identifier. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.ApiVersionResource]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_api_versions_list_versions_request(
                    api_name=api_name,
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    select=select,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "serviceName": self._serialize.url(
                        "self._config.service_name", self._config.service_name, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ApiVersionResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_version(
        self,
        api_name: str,
        version_name: str,
        *,
        if_unmodified_since: Optional[datetime.datetime] = None,
        if_modified_since: Optional[datetime.datetime] = None,
        etag: Optional[str] = None,
        match_condition: Optional[MatchConditions] = None,
        **kwargs: Any
    ) -> _models.ApiVersionResource:
        # pylint: disable=line-too-long
        """Get an API version.

        :param api_name: API identifier. Required.
        :type api_name: str
        :param version_name: Version identifier. Required.
        :type version_name: str
        :keyword if_unmodified_since: The request should only proceed if the entity was not modified
         after this time. Default value is None.
        :paramtype if_unmodified_since: ~datetime.datetime
        :keyword if_modified_since: The request should only proceed if the entity was modified after
         this time. Default value is None.
        :paramtype if_modified_since: ~datetime.datetime
        :keyword etag: check if resource is changed. Set None to skip checking etag. Default value is
         None.
        :paramtype etag: str
        :keyword match_condition: The match condition to use upon the etag. Default value is None.
        :paramtype match_condition: ~azure.core.MatchConditions
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ApiVersionResource. The ApiVersionResource is compatible with MutableMapping
        :rtype: ~microsoft.apicenter.models.ApiVersionResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "lifecycleStage": "str",  # Current lifecycle stage of the API version.
                      Required. Known values are: "design", "development", "testing", "preview",
                      "production", "deprecated", and "retired".
                    "name": "str",  # The resource name. Required.
                    "title": "str",  # Version title. Required.
                    "versionName": "str"  # Version identifier. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        if match_condition == MatchConditions.IfNotModified:
            error_map[412] = ResourceModifiedError
        elif match_condition == MatchConditions.IfPresent:
            error_map[412] = ResourceNotFoundError
        elif match_condition == MatchConditions.IfMissing:
            error_map[412] = ResourceExistsError
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ApiVersionResource] = kwargs.pop("cls", None)

        _request = build_api_versions_get_version_request(
            api_name=api_name,
            version_name=version_name,
            if_unmodified_since=if_unmodified_since,
            if_modified_since=if_modified_since,
            etag=etag,
            match_condition=match_condition,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "serviceName": self._serialize.url(
                "self._config.service_name", self._config.service_name, "str", skip_quote=True
            ),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ApiVersionResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
