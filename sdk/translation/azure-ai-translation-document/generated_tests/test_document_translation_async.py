# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import DocumentTranslationPreparer
from testpreparer_async import DocumentTranslationClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDocumentTranslationAsync(DocumentTranslationClientTestBaseAsync):
    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_begin_translation(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = await (
            await client.begin_translation(
                body={
                    "inputs": [
                        {
                            "source": {
                                "sourceUrl": "str",
                                "filter": {"prefix": "str", "suffix": "str"},
                                "language": "str",
                                "storageSource": "str",
                            },
                            "targets": [
                                {
                                    "language": "str",
                                    "targetUrl": "str",
                                    "category": "str",
                                    "glossaries": [
                                        {
                                            "format": "str",
                                            "glossaryUrl": "str",
                                            "storageSource": "str",
                                            "version": "str",
                                        }
                                    ],
                                    "storageSource": "str",
                                }
                            ],
                            "storageType": "str",
                        }
                    ],
                    "options": {"translateTextWithinImage": bool},
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_list_translation_statuses(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = client.list_translation_statuses()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_get_document_status(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = await client.get_document_status(
            translation_id="str",
            document_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_get_translation_status(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = await client.get_translation_status(
            translation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_cancel_translation(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = await client.cancel_translation(
            translation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy_async
    async def test_list_document_statuses(self, documenttranslation_endpoint):
        client = self.create_async_client(endpoint=documenttranslation_endpoint)
        response = client.list_document_statuses(
            translation_id="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
