# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import DocumentTranslationClientTestBase, DocumentTranslationPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDocumentTranslation(DocumentTranslationClientTestBase):
    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_begin_start_translation(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.begin_start_translation(
            body={
                "inputs": [
                    {
                        "source": {
                            "sourceUrl": "str",
                            "filter": {"prefix": "str", "suffix": "str"},
                            "language": "str",
                            "storageSource": "str",
                        },
                        "targets": [
                            {
                                "language": "str",
                                "targetUrl": "str",
                                "category": "str",
                                "glossaries": [
                                    {"format": "str", "glossaryUrl": "str", "storageSource": "str", "version": "str"}
                                ],
                                "storageSource": "str",
                            }
                        ],
                        "storageType": "str",
                    }
                ]
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_get_translations_status(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.get_translations_status()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_get_document_status(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.get_document_status(
            id="str",
            document_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_get_translation_status(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.get_translation_status(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_cancel_translation(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.cancel_translation(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_get_documents_status(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.get_documents_status(
            id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentTranslationPreparer()
    @recorded_by_proxy
    def test_get_supported_formats(self, documenttranslation_endpoint):
        client = self.create_client(endpoint=documenttranslation_endpoint)
        response = client.get_supported_formats()

        # please add some check logic here by yourself
        # ...
