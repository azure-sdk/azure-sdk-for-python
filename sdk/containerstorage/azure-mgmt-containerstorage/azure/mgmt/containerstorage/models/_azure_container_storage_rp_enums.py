# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Access mode."""

    READ_WRITE_ONCE = "ReadWriteOnce"
    """Read Write Once"""
    READ_ONLY_MANY = "ReadOnlyMany"
    """Read Only Many"""
    READ_WRITE_MANY = "ReadWriteMany"
    """Read Write Many"""
    READ_WRITE_ONCE_POD = "ReadWriteOncePod"
    """Shared Read Write Once Pod"""


class AccountTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Account Tier."""

    INVALID = "Invalid"
    """Invalid Account Tier"""
    STANDARD = "Standard"
    """Standard Tier"""
    PREMIUM = "Premium"
    """Premium Tier"""
    ULTRA = "Ultra"
    """Ultra Tier"""


class Action(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Action Enum."""

    DENY = "Deny"
    """Deny Action"""
    ALLOW = "Allow"
    """Allow Action"""


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs."""

    INTERNAL = "Internal"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class DiskType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Disk Type."""

    LOCAL = "Local"
    """Local Disk Type"""
    MANAGED = "Managed"
    """Managed Disk Type"""


class EncryptionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Encryption Type."""

    ENCRYPTION_AT_REST_WITH_PLATFORM_KEY = "EncryptionAtRestWithPlatformKey"
    """Encryption at rest with platform key"""


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system".
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"


class PoolType(float, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pool Type."""

    EPHEMERAL = 1
    """Ephemeral Pool"""
    DISK = 2
    """Disk Pool"""
    MANAGED = 3
    """Managed Pool"""
    ELASTIC_SAN = 4
    """ElasticSan Pool"""


class ProtocolType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Protocol Type."""

    NONE = "None"
    """No Protocol"""
    I_SCSI = "iSCSI"
    """iSCSI protocol"""


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of the resource."""

    SUCCEEDED = "Succeeded"
    """Resource has been created."""
    FAILED = "Failed"
    """Resource creation failed."""
    CANCELED = "Canceled"
    """Resource creation was canceled."""
    PROVISIONING = "Provisioning"
    """The resource is being provisioned"""
    UPDATING = "Updating"
    """The resource is updating"""
    DELETING = "Deleting"
    """The resource is being deleted"""
    ACCEPTED = "Accepted"
    """The resource create request has been accepted"""


class ReclaimPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Reclaim Policy."""

    DELETE = "Delete"
    """Delete resource"""
    RETAIN = "Retain"
    """Retain resource"""


class SkuName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Sku Name enum type."""

    INVALID = "Invalid"
    """Invalid Sku"""
    PREMIUM_LRS = "Premium_LRS"
    """Premium_LRS Sku"""
    PREMIUM_ZRS = "Premium_ZRS"
    """Premium_ZRS Sku"""


class VolumeBindingMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Volume binding mode."""

    IMMEDIATE = "Immediate"
    """Immediate binding"""
    WAIT_FIRST_FOR_CUSTOMER = "WaitFirstForCustomer"
    """Wait for customer to bind"""


class VolumeMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Storage volume mode."""

    FILESYSTEM = "Filesystem"
    """FileSystem volume mode"""
    RAW = "Raw"
    """Raw volume mode"""


class WhenUnsatisfiable(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """When request unsatisfiable."""

    DO_NOT_SCHEDULE = "DoNotSchedule"
    """Do not schedule"""
    SCHEDULE_ANYWAY = "ScheduleAnyway"
    """Schedule anyway"""
