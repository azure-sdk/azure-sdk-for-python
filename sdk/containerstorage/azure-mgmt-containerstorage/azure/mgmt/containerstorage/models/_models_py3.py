# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Assignment(_serialization.Model):
    """Assignment Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Indicates if the assignment is in a usable state.
    :vartype status: ~azure.mgmt.containerstorage.models.AssignmentStatus
    :ivar id: Resource id for the assigned resource. Required.
    :vartype id: str
    """

    _validation = {
        "status": {"readonly": True},
        "id": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "AssignmentStatus"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Resource id for the assigned resource. Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.status = None
        self.id = id


class AssignmentStatus(_serialization.Model):
    """Status of the assignment resource.

    All required parameters must be populated in order to send to Azure.

    :ivar state: State of the assignment resource. Required. Known values are: "Assigning",
     "Assigned", "Unassigning", and "Failed".
    :vartype state: str or ~azure.mgmt.containerstorage.models.AssignmentStatusState
    :ivar message: Reason for the status.
    :vartype message: str
    """

    _validation = {
        "state": {"required": True},
    }

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self, *, state: Union[str, "_models.AssignmentStatusState"], message: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword state: State of the assignment resource. Required. Known values are: "Assigning",
         "Assigned", "Unassigning", and "Failed".
        :paramtype state: str or ~azure.mgmt.containerstorage.models.AssignmentStatusState
        :keyword message: Reason for the status.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.state = state
        self.message = message


class AzureDisk(_serialization.Model):
    """Azure Disk Pool Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_group: Managed resource group for the pool.
    :vartype resource_group: str
    :ivar sku_name: Sku name. Known values are: "Premium_LRS", "Standard_LRS", "StandardSSD_LRS",
     "UltraSSD_LRS", "Premium_ZRS", "PremiumV2_LRS", and "StandardSSD_ZRS".
    :vartype sku_name: str or ~azure.mgmt.containerstorage.models.AzureDiskSkuName
    :ivar encryption: Encryption specifies the encryption configuration for the Azure Disk pool.
    :vartype encryption: ~azure.mgmt.containerstorage.models.Encryption
    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[~azure.mgmt.containerstorage.models.Disk]
    """

    _validation = {
        "resource_group": {"readonly": True},
    }

    _attribute_map = {
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "sku_name": {"key": "skuName", "type": "str"},
        "encryption": {"key": "encryption", "type": "Encryption"},
        "disks": {"key": "disks", "type": "[Disk]"},
    }

    def __init__(
        self,
        *,
        sku_name: Optional[Union[str, "_models.AzureDiskSkuName"]] = None,
        encryption: Optional["_models.Encryption"] = None,
        disks: Optional[List["_models.Disk"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku_name: Sku name. Known values are: "Premium_LRS", "Standard_LRS",
         "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS", "PremiumV2_LRS", and "StandardSSD_ZRS".
        :paramtype sku_name: str or ~azure.mgmt.containerstorage.models.AzureDiskSkuName
        :keyword encryption: Encryption specifies the encryption configuration for the Azure Disk pool.
        :paramtype encryption: ~azure.mgmt.containerstorage.models.Encryption
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[~azure.mgmt.containerstorage.models.Disk]
        """
        super().__init__(**kwargs)
        self.resource_group = None
        self.sku_name = sku_name
        self.encryption = encryption
        self.disks = disks


class AzureDiskUpdate(_serialization.Model):
    """Azure Disk Pool Properties.

    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[~azure.mgmt.containerstorage.models.Disk]
    """

    _attribute_map = {
        "disks": {"key": "disks", "type": "[Disk]"},
    }

    def __init__(self, *, disks: Optional[List["_models.Disk"]] = None, **kwargs: Any) -> None:
        """
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[~azure.mgmt.containerstorage.models.Disk]
        """
        super().__init__(**kwargs)
        self.disks = disks


class Disk(_serialization.Model):
    """Model for disk for that pool is using.

    All required parameters must be populated in order to send to Azure.

    :ivar id: ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in
     formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460. Required.
    :vartype id: str
    :ivar reference: Reference is the location of the disk in an external system. Required.
    :vartype reference: str
    """

    _validation = {
        "id": {"required": True},
        "reference": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "reference": {"key": "reference", "type": "str"},
    }

    def __init__(self, *, id: str, reference: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in
         formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460. Required.
        :paramtype id: str
        :keyword reference: Reference is the location of the disk in an external system. Required.
        :paramtype reference: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.reference = reference


class DiskPoolProperties(_serialization.Model):
    """Properties shared between the azureDisk and ephemeralDisk.

    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[~azure.mgmt.containerstorage.models.Disk]
    """

    _attribute_map = {
        "disks": {"key": "disks", "type": "[Disk]"},
    }

    def __init__(self, *, disks: Optional[List["_models.Disk"]] = None, **kwargs: Any) -> None:
        """
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[~azure.mgmt.containerstorage.models.Disk]
        """
        super().__init__(**kwargs)
        self.disks = disks


class ElasticSan(_serialization.Model):
    """Elastic San Pool Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_group: Managed resource group for the pool.
    :vartype resource_group: str
    :ivar sku_name: Sku name. Known values are: "Premium_LRS" and "Premium_ZRS".
    :vartype sku_name: str or ~azure.mgmt.containerstorage.models.ElasticSanSkuName
    :ivar encryption: Encryption specifies the encryption configuration for the Azure Disk pool.
    :vartype encryption: ~azure.mgmt.containerstorage.models.Encryption
    """

    _validation = {
        "resource_group": {"readonly": True},
    }

    _attribute_map = {
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "sku_name": {"key": "skuName", "type": "str"},
        "encryption": {"key": "encryption", "type": "Encryption"},
    }

    def __init__(
        self,
        *,
        sku_name: Optional[Union[str, "_models.ElasticSanSkuName"]] = None,
        encryption: Optional["_models.Encryption"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku_name: Sku name. Known values are: "Premium_LRS" and "Premium_ZRS".
        :paramtype sku_name: str or ~azure.mgmt.containerstorage.models.ElasticSanSkuName
        :keyword encryption: Encryption specifies the encryption configuration for the Azure Disk pool.
        :paramtype encryption: ~azure.mgmt.containerstorage.models.Encryption
        """
        super().__init__(**kwargs)
        self.resource_group = None
        self.sku_name = sku_name
        self.encryption = encryption


class ElasticSanVolumeProperties(_serialization.Model):
    """Properties of the ElasticSAN iSCSI target.

    All required parameters must be populated in order to send to Azure.

    :ivar target_iqn: iSCSI Target IQN (iSCSI Qualified Name); example:
     "iqn.2005-03.org.iscsi:server". Required.
    :vartype target_iqn: str
    :ivar target_portal_hostname: iSCSI Target Portal Host Name. Required.
    :vartype target_portal_hostname: str
    :ivar target_portal_port: iSCSI Target Portal Port. Required.
    :vartype target_portal_port: int
    """

    _validation = {
        "target_iqn": {"required": True},
        "target_portal_hostname": {"required": True},
        "target_portal_port": {"required": True},
    }

    _attribute_map = {
        "target_iqn": {"key": "targetIqn", "type": "str"},
        "target_portal_hostname": {"key": "targetPortalHostname", "type": "str"},
        "target_portal_port": {"key": "targetPortalPort", "type": "int"},
    }

    def __init__(self, *, target_iqn: str, target_portal_hostname: str, target_portal_port: int, **kwargs: Any) -> None:
        """
        :keyword target_iqn: iSCSI Target IQN (iSCSI Qualified Name); example:
         "iqn.2005-03.org.iscsi:server". Required.
        :paramtype target_iqn: str
        :keyword target_portal_hostname: iSCSI Target Portal Host Name. Required.
        :paramtype target_portal_hostname: str
        :keyword target_portal_port: iSCSI Target Portal Port. Required.
        :paramtype target_portal_port: int
        """
        super().__init__(**kwargs)
        self.target_iqn = target_iqn
        self.target_portal_hostname = target_portal_hostname
        self.target_portal_port = target_portal_port


class Encryption(_serialization.Model):
    """Encryption key properties for the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar key_name: The name of the key vault key. Required.
    :vartype key_name: str
    :ivar key_vault_uri: The URI of the key vault. Required.
    :vartype key_vault_uri: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.containerstorage.models.ManagedServiceIdentity
    """

    _validation = {
        "key_name": {"required": True},
        "key_vault_uri": {"required": True},
    }

    _attribute_map = {
        "key_name": {"key": "keyName", "type": "str"},
        "key_vault_uri": {"key": "keyVaultUri", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        key_name: str,
        key_vault_uri: str,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword key_name: The name of the key vault key. Required.
        :paramtype key_name: str
        :keyword key_vault_uri: The URI of the key vault. Required.
        :paramtype key_vault_uri: str
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.containerstorage.models.ManagedServiceIdentity
        """
        super().__init__(**kwargs)
        self.key_name = key_name
        self.key_vault_uri = key_vault_uri
        self.identity = identity


class EphemeralDisk(_serialization.Model):
    """Ephemeral Disk Pool Properties.

    :ivar replicas: The number of data copies. Default 3.
    :vartype replicas: int
    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[~azure.mgmt.containerstorage.models.Disk]
    """

    _validation = {
        "replicas": {"maximum": 3, "minimum": 1},
    }

    _attribute_map = {
        "replicas": {"key": "replicas", "type": "int"},
        "disks": {"key": "disks", "type": "[Disk]"},
    }

    def __init__(self, *, replicas: int = 3, disks: Optional[List["_models.Disk"]] = None, **kwargs: Any) -> None:
        """
        :keyword replicas: The number of data copies. Default 3.
        :paramtype replicas: int
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[~azure.mgmt.containerstorage.models.Disk]
        """
        super().__init__(**kwargs)
        self.replicas = replicas
        self.disks = disks


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.containerstorage.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.containerstorage.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.containerstorage.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.containerstorage.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned, UserAssigned".
    :vartype type: str or ~azure.mgmt.containerstorage.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.containerstorage.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned, UserAssigned".
        :paramtype type: str or ~azure.mgmt.containerstorage.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.containerstorage.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.containerstorage.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.containerstorage.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.containerstorage.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.containerstorage.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.containerstorage.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Pool(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Pool resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar status: The operational status of the resource.
    :vartype status: ~azure.mgmt.containerstorage.models.ResourceOperationalStatus
    :ivar zones: List of availability zones that resources can be created in.
    :vartype zones: list[str or ~azure.mgmt.containerstorage.models.Zone]
    :ivar resources: Resources represent the resources the pool should have.
    :vartype resources: ~azure.mgmt.containerstorage.models.Resources
    :ivar pool_type: Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
    :vartype pool_type: ~azure.mgmt.containerstorage.models.PoolType
    :ivar reclaim_policy: ReclaimPolicy defines what happens to the backend storage when
     StoragePool is deleted. Known values are: "Delete" and "Retain".
    :vartype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
    :ivar assignments: List of resources that should have access to the pool. Typically ARM
     references to AKS clusters or ACI Container Groups. For local and standard this must be a
     single reference. For ElasticSAN there can be many.
    :vartype assignments: list[~azure.mgmt.containerstorage.models.Assignment]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
        "zones": {"max_items": 3, "min_items": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "ResourceOperationalStatus"},
        "zones": {"key": "properties.zones", "type": "[str]"},
        "resources": {"key": "properties.resources", "type": "Resources"},
        "pool_type": {"key": "properties.poolType", "type": "PoolType"},
        "reclaim_policy": {"key": "properties.reclaimPolicy", "type": "str"},
        "assignments": {"key": "properties.assignments", "type": "[Assignment]"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        zones: Optional[List[Union[str, "_models.Zone"]]] = None,
        resources: Optional["_models.Resources"] = None,
        pool_type: Optional["_models.PoolType"] = None,
        reclaim_policy: Optional[Union[str, "_models.ReclaimPolicy"]] = None,
        assignments: Optional[List["_models.Assignment"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword zones: List of availability zones that resources can be created in.
        :paramtype zones: list[str or ~azure.mgmt.containerstorage.models.Zone]
        :keyword resources: Resources represent the resources the pool should have.
        :paramtype resources: ~azure.mgmt.containerstorage.models.Resources
        :keyword pool_type: Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
        :paramtype pool_type: ~azure.mgmt.containerstorage.models.PoolType
        :keyword reclaim_policy: ReclaimPolicy defines what happens to the backend storage when
         StoragePool is deleted. Known values are: "Delete" and "Retain".
        :paramtype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
        :keyword assignments: List of resources that should have access to the pool. Typically ARM
         references to AKS clusters or ACI Container Groups. For local and standard this must be a
         single reference. For ElasticSAN there can be many.
        :paramtype assignments: list[~azure.mgmt.containerstorage.models.Assignment]
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.provisioning_state = None
        self.status = None
        self.zones = zones
        self.resources = resources
        self.pool_type = pool_type
        self.reclaim_policy = reclaim_policy
        self.assignments = assignments


class PoolListResult(_serialization.Model):
    """The response of a Pool list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Pool items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.Pool]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Pool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Pool"], **kwargs: Any) -> None:
        """
        :keyword value: The Pool items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.Pool]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class PoolType(_serialization.Model):
    """Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.

    :ivar azure_disk: Disk Pool Properties.
    :vartype azure_disk: ~azure.mgmt.containerstorage.models.AzureDisk
    :ivar elastic_san: Elastic San Pool Properties.
    :vartype elastic_san: ~azure.mgmt.containerstorage.models.ElasticSan
    :ivar ephemeral_disk: Ephemeral Pool Properties.
    :vartype ephemeral_disk: ~azure.mgmt.containerstorage.models.EphemeralDisk
    """

    _attribute_map = {
        "azure_disk": {"key": "azureDisk", "type": "AzureDisk"},
        "elastic_san": {"key": "elasticSan", "type": "ElasticSan"},
        "ephemeral_disk": {"key": "ephemeralDisk", "type": "EphemeralDisk"},
    }

    def __init__(
        self,
        *,
        azure_disk: Optional["_models.AzureDisk"] = None,
        elastic_san: Optional["_models.ElasticSan"] = None,
        ephemeral_disk: Optional["_models.EphemeralDisk"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword azure_disk: Disk Pool Properties.
        :paramtype azure_disk: ~azure.mgmt.containerstorage.models.AzureDisk
        :keyword elastic_san: Elastic San Pool Properties.
        :paramtype elastic_san: ~azure.mgmt.containerstorage.models.ElasticSan
        :keyword ephemeral_disk: Ephemeral Pool Properties.
        :paramtype ephemeral_disk: ~azure.mgmt.containerstorage.models.EphemeralDisk
        """
        super().__init__(**kwargs)
        self.azure_disk = azure_disk
        self.elastic_san = elastic_san
        self.ephemeral_disk = ephemeral_disk


class PoolTypeUpdate(_serialization.Model):
    """Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.

    :ivar azure_disk: Disk Pool Properties.
    :vartype azure_disk: ~azure.mgmt.containerstorage.models.AzureDiskUpdate
    :ivar elastic_san: Elastic San Pool Properties.
    :vartype elastic_san: JSON
    :ivar ephemeral_disk: Ephemeral Pool Properties.
    :vartype ephemeral_disk: ~azure.mgmt.containerstorage.models.EphemeralDisk
    """

    _attribute_map = {
        "azure_disk": {"key": "azureDisk", "type": "AzureDiskUpdate"},
        "elastic_san": {"key": "elasticSan", "type": "object"},
        "ephemeral_disk": {"key": "ephemeralDisk", "type": "EphemeralDisk"},
    }

    def __init__(
        self,
        *,
        azure_disk: Optional["_models.AzureDiskUpdate"] = None,
        elastic_san: Optional[JSON] = None,
        ephemeral_disk: Optional["_models.EphemeralDisk"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword azure_disk: Disk Pool Properties.
        :paramtype azure_disk: ~azure.mgmt.containerstorage.models.AzureDiskUpdate
        :keyword elastic_san: Elastic San Pool Properties.
        :paramtype elastic_san: JSON
        :keyword ephemeral_disk: Ephemeral Pool Properties.
        :paramtype ephemeral_disk: ~azure.mgmt.containerstorage.models.EphemeralDisk
        """
        super().__init__(**kwargs)
        self.azure_disk = azure_disk
        self.elastic_san = elastic_san
        self.ephemeral_disk = ephemeral_disk


class PoolUpdate(_serialization.Model):
    """The type used for update operations of the Pool.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar resources: Resources represent the resources the pool should have.
    :vartype resources: ~azure.mgmt.containerstorage.models.Resources
    :ivar pool_type: Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
    :vartype pool_type: ~azure.mgmt.containerstorage.models.PoolTypeUpdate
    :ivar assignments: List of resources that should have access to the pool. Typically ARM
     references to AKS clusters or ACI Container Groups. For local and standard this must be a
     single reference. For ElasticSAN there can be many.
    :vartype assignments: list[~azure.mgmt.containerstorage.models.Assignment]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "resources": {"key": "properties.resources", "type": "Resources"},
        "pool_type": {"key": "properties.poolType", "type": "PoolTypeUpdate"},
        "assignments": {"key": "properties.assignments", "type": "[Assignment]"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        resources: Optional["_models.Resources"] = None,
        pool_type: Optional["_models.PoolTypeUpdate"] = None,
        assignments: Optional[List["_models.Assignment"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword resources: Resources represent the resources the pool should have.
        :paramtype resources: ~azure.mgmt.containerstorage.models.Resources
        :keyword pool_type: Type of the Pool: ephemeralDisk, azureDisk, or elasticsan.
        :paramtype pool_type: ~azure.mgmt.containerstorage.models.PoolTypeUpdate
        :keyword assignments: List of resources that should have access to the pool. Typically ARM
         references to AKS clusters or ACI Container Groups. For local and standard this must be a
         single reference. For ElasticSAN there can be many.
        :paramtype assignments: list[~azure.mgmt.containerstorage.models.Assignment]
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.resources = resources
        self.pool_type = pool_type
        self.assignments = assignments


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class Requests(_serialization.Model):
    """Requests for capacity for the pool.

    :ivar storage: Requested capacity of the pool in GiB.
    :vartype storage: int
    """

    _validation = {
        "storage": {"maximum": 65536, "minimum": 1024},
    }

    _attribute_map = {
        "storage": {"key": "storage", "type": "int"},
    }

    def __init__(self, *, storage: int = 1024, **kwargs: Any) -> None:
        """
        :keyword storage: Requested capacity of the pool in GiB.
        :paramtype storage: int
        """
        super().__init__(**kwargs)
        self.storage = storage


class ResourceOperationalStatus(_serialization.Model):
    """Status of the resource.

    All required parameters must be populated in order to send to Azure.

    :ivar state: state of the resource. Required. Known values are: "Pending", "Available", and
     "Unavailable".
    :vartype state: str or ~azure.mgmt.containerstorage.models.ResourceOperationStatusState
    :ivar message: Reason for state.
    :vartype message: str
    """

    _validation = {
        "state": {"required": True},
    }

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self, *, state: Union[str, "_models.ResourceOperationStatusState"], message: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword state: state of the resource. Required. Known values are: "Pending", "Available", and
         "Unavailable".
        :paramtype state: str or ~azure.mgmt.containerstorage.models.ResourceOperationStatusState
        :keyword message: Reason for state.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.state = state
        self.message = message


class Resources(_serialization.Model):
    """Resource Requests for the pool.

    :ivar requests: Requests for capacity for the pool.
    :vartype requests: ~azure.mgmt.containerstorage.models.Requests
    """

    _attribute_map = {
        "requests": {"key": "requests", "type": "Requests"},
    }

    def __init__(self, *, requests: Optional["_models.Requests"] = None, **kwargs: Any) -> None:
        """
        :keyword requests: Requests for capacity for the pool.
        :paramtype requests: ~azure.mgmt.containerstorage.models.Requests
        """
        super().__init__(**kwargs)
        self.requests = requests


class Snapshot(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar status: The status of the resource.
    :vartype status: ~azure.mgmt.containerstorage.models.ResourceOperationalStatus
    :ivar source: Reference to the source volume.
    :vartype source: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
        "source": {"max_length": 253, "min_length": 3, "pattern": r"^[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]$"},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "ResourceOperationalStatus"},
        "source": {"key": "properties.source", "type": "str"},
    }

    def __init__(self, *, source: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword source: Reference to the source volume.
        :paramtype source: str
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.status = None
        self.source = source


class SnapshotListResult(_serialization.Model):
    """The response of a Snapshot list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Snapshot items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.Snapshot]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Snapshot]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Snapshot"], **kwargs: Any) -> None:
        """
        :keyword value: The Snapshot items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.Snapshot]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class Volume(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar status: The status of the resource.
    :vartype status: ~azure.mgmt.containerstorage.models.ResourceOperationalStatus
    :ivar labels: String KV pairs indicating labels.
    :vartype labels: dict[str, str]
    :ivar capacity_gi_b: Requested capacity in GiB.
    :vartype capacity_gi_b: int
    :ivar volume_type: Properties of the volume.
    :vartype volume_type: ~azure.mgmt.containerstorage.models.VolumeType
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
        "capacity_gi_b": {"maximum": 65536, "minimum": 1},
        "volume_type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "ResourceOperationalStatus"},
        "labels": {"key": "properties.labels", "type": "{str}"},
        "capacity_gi_b": {"key": "properties.capacityGiB", "type": "int"},
        "volume_type": {"key": "properties.volumeType", "type": "VolumeType"},
    }

    def __init__(
        self, *, labels: Optional[Dict[str, str]] = None, capacity_gi_b: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword labels: String KV pairs indicating labels.
        :paramtype labels: dict[str, str]
        :keyword capacity_gi_b: Requested capacity in GiB.
        :paramtype capacity_gi_b: int
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.status = None
        self.labels = labels
        self.capacity_gi_b = capacity_gi_b
        self.volume_type = None


class VolumeListResult(_serialization.Model):
    """The response of a Volume list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Volume items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.Volume]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Volume]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Volume"], **kwargs: Any) -> None:
        """
        :keyword value: The Volume items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.Volume]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class VolumeType(_serialization.Model):
    """Properties of the volume.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar elastic_san: Properties of the ElasticSAN iSCSI target.
    :vartype elastic_san: ~azure.mgmt.containerstorage.models.ElasticSanVolumeProperties
    """

    _validation = {
        "elastic_san": {"readonly": True},
    }

    _attribute_map = {
        "elastic_san": {"key": "elasticSan", "type": "ElasticSanVolumeProperties"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.elastic_san = None


class VolumeUpdate(_serialization.Model):
    """The type used for update operations of the Volume.

    :ivar labels: String KV pairs indicating labels.
    :vartype labels: dict[str, str]
    :ivar capacity_gi_b: Requested capacity in GiB.
    :vartype capacity_gi_b: int
    """

    _validation = {
        "capacity_gi_b": {"maximum": 65536, "minimum": 1},
    }

    _attribute_map = {
        "labels": {"key": "properties.labels", "type": "{str}"},
        "capacity_gi_b": {"key": "properties.capacityGiB", "type": "int"},
    }

    def __init__(
        self, *, labels: Optional[Dict[str, str]] = None, capacity_gi_b: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword labels: String KV pairs indicating labels.
        :paramtype labels: dict[str, str]
        :keyword capacity_gi_b: Requested capacity in GiB.
        :paramtype capacity_gi_b: int
        """
        super().__init__(**kwargs)
        self.labels = labels
        self.capacity_gi_b = capacity_gi_b
