# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.selfhelp.aio import SelfHelpMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSelfHelpMgmtTroubleshootersOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SelfHelpMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_troubleshooters_get(self, resource_group):
        response = await self.client.troubleshooters.get(
            scope="str",
            troubleshooter_name="str",
            api_version="2024-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_troubleshooters_create(self, resource_group):
        response = await self.client.troubleshooters.create(
            scope="str",
            troubleshooter_name="str",
            create_troubleshooter_request_body={
                "id": "str",
                "name": "str",
                "parameters": {"str": "str"},
                "provisioningState": "str",
                "solutionId": "str",
                "steps": [
                    {
                        "automatedCheckResults": {"result": "str", "status": "str", "type": "str", "version": "str"},
                        "description": "str",
                        "error": {
                            "additionalInfo": [{"info": {}, "type": "str"}],
                            "code": "str",
                            "details": [...],
                            "message": "str",
                            "target": "str",
                        },
                        "executionStatus": "str",
                        "executionStatusDescription": "str",
                        "guidance": "str",
                        "id": "str",
                        "inputs": [
                            {
                                "questionContent": "str",
                                "questionContentType": "str",
                                "questionId": "str",
                                "questionTitle": "str",
                                "questionType": "str",
                                "recommendedOption": "str",
                                "responseHint": "str",
                                "responseOptions": [{"key": "str", "value": "str"}],
                                "responseValidationProperties": {
                                    "isRequired": bool,
                                    "maxLength": 0,
                                    "regex": "str",
                                    "validationErrorMessage": "str",
                                    "validationScope": "str",
                                },
                                "selectedOptionValue": "str",
                            }
                        ],
                        "insights": [{"id": "str", "importanceLevel": "str", "results": "str", "title": "str"}],
                        "isLastStep": bool,
                        "title": "str",
                        "type": "str",
                    }
                ],
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2024-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_troubleshooters_continue_method(self, resource_group):
        response = await self.client.troubleshooters.continue_method(
            scope="str",
            troubleshooter_name="str",
            api_version="2024-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_troubleshooters_end(self, resource_group):
        response = await self.client.troubleshooters.end(
            scope="str",
            troubleshooter_name="str",
            api_version="2024-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_troubleshooters_restart(self, resource_group):
        response = await self.client.troubleshooters.restart(
            scope="str",
            troubleshooter_name="str",
            api_version="2024-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...
