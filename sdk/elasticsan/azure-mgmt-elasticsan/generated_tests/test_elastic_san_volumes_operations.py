# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.elasticsan import ElasticSanClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestElasticSanVolumesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ElasticSanClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_get(self, resource_group):
        response = self.client.volumes.get(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
            volume_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_begin_create(self, resource_group):
        response = self.client.volumes.begin_create(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
            volume_name="str",
            parameters={
                "properties": {
                    "sizeGiB": 0,
                    "creationData": {"createSource": "str", "sourceId": "str"},
                    "managedBy": {"resourceId": "str"},
                    "provisioningState": "str",
                    "storageTarget": {
                        "provisioningState": "str",
                        "status": "str",
                        "targetIqn": "str",
                        "targetPortalHostname": "str",
                        "targetPortalPort": 0,
                    },
                    "volumeId": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_begin_update(self, resource_group):
        response = self.client.volumes.begin_update(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
            volume_name="str",
            parameters={"properties": {"managedBy": {"resourceId": "str"}, "sizeGiB": 0}},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_begin_delete(self, resource_group):
        response = self.client.volumes.begin_delete(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
            volume_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_list_by_volume_group(self, resource_group):
        response = self.client.volumes.list_by_volume_group(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_volumes_begin_restore_volume(self, resource_group):
        response = self.client.volumes.begin_restore_volume(
            resource_group_name=resource_group.name,
            elastic_san_name="str",
            volume_group_name="str",
            volume_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
