# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    from .. import models as _models


class DatabaseChangeTierProperties(_serialization.Model):
    """A database change tier definition.

    :ivar target_tier_name: A target tier name.
    :vartype target_tier_name: str
    """

    _attribute_map = {
        "target_tier_name": {"key": "targetTierName", "type": "str"},
    }

    def __init__(self, *, target_tier_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword target_tier_name: A target tier name.
        :paramtype target_tier_name: str
        """
        super().__init__(**kwargs)
        self.target_tier_name = target_tier_name


class DatabaseIdentity(_serialization.Model):
    """Database Identity properties.

    :ivar resource_id: Resource Id of the database identity.
    :vartype resource_id: str
    :ivar principal_id: Principal Id of the database identity.
    :vartype principal_id: str
    :ivar client_id: Client Id of the database identity.
    :vartype client_id: str
    """

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        principal_id: Optional[str] = None,
        client_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: Resource Id of the database identity.
        :paramtype resource_id: str
        :keyword principal_id: Principal Id of the database identity.
        :paramtype principal_id: str
        :keyword client_id: Client Id of the database identity.
        :paramtype client_id: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.principal_id = principal_id
        self.client_id = client_id


class DatabaseRenameProperties(_serialization.Model):
    """A database rename definition.

    :ivar new_name: New database name.
    :vartype new_name: str
    """

    _attribute_map = {
        "new_name": {"key": "newName", "type": "str"},
    }

    def __init__(self, *, new_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword new_name: New database name.
        :paramtype new_name: str
        """
        super().__init__(**kwargs)
        self.new_name = new_name


class DestinationTierOverride(_serialization.Model):
    """A destination tier override.

    All required parameters must be populated in order to send to server.

    :ivar resource_type: Resource type. Required. Known values are: "Database" and "Pool".
    :vartype resource_type: str or ~azure.mgmt.databasefleetmanager.models.ResourceType
    :ivar tier_name: Destination tier name. Required.
    :vartype tier_name: str
    :ivar resource_name: Resource name. Required.
    :vartype resource_name: str
    """

    _validation = {
        "resource_type": {"required": True},
        "tier_name": {"required": True},
        "resource_name": {"required": True},
    }

    _attribute_map = {
        "resource_type": {"key": "resourceType", "type": "str"},
        "tier_name": {"key": "tierName", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
    }

    def __init__(
        self, *, resource_type: Union[str, "_models.ResourceType"], tier_name: str, resource_name: str, **kwargs: Any
    ) -> None:
        """
        :keyword resource_type: Resource type. Required. Known values are: "Database" and "Pool".
        :paramtype resource_type: str or ~azure.mgmt.databasefleetmanager.models.ResourceType
        :keyword tier_name: Destination tier name. Required.
        :paramtype tier_name: str
        :keyword resource_name: Resource name. Required.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.resource_type = resource_type
        self.tier_name = tier_name
        self.resource_name = resource_name


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.info: Optional[JSON] = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.databasefleetmanager.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.databasefleetmanager.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code: Optional[str] = None
        self.message: Optional[str] = None
        self.target: Optional[str] = None
        self.details: Optional[List["_models.ErrorDetail"]] = None
        self.additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.databasefleetmanager.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.databasefleetmanager.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.type: Optional[str] = None
        self.system_data: Optional["_models.SystemData"] = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    """


class FirewallRule(ProxyResource):
    """A firewall rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Firewall rule properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FirewallRuleProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FirewallRuleProperties"},
    }

    def __init__(self, *, properties: Optional["_models.FirewallRuleProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: A Firewall rule properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FirewallRuleProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FirewallRuleListResult(_serialization.Model):
    """The response of a FirewallRule list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FirewallRule items on this page. Required.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.FirewallRule]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FirewallRule]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FirewallRule"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The FirewallRule items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasefleetmanager.models.FirewallRule]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FirewallRuleProperties(_serialization.Model):
    """A Firewall rule properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_ip_address: Start IP address.
    :vartype start_ip_address: str
    :ivar end_ip_address: End IP address.
    :vartype end_ip_address: str
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "start_ip_address": {"key": "startIpAddress", "type": "str"},
        "end_ip_address": {"key": "endIpAddress", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self, *, start_ip_address: Optional[str] = None, end_ip_address: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword start_ip_address: Start IP address.
        :paramtype start_ip_address: str
        :keyword end_ip_address: End IP address.
        :paramtype end_ip_address: str
        """
        super().__init__(**kwargs)
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address
        self.provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Fleet(TrackedResource):
    """A Database Fleet.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The fleet properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "FleetProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FleetProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The fleet properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class FleetDatabase(ProxyResource):
    """A fleet database.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: Fleet database properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetDatabaseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FleetDatabaseProperties"},
    }

    def __init__(self, *, properties: Optional["_models.FleetDatabaseProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: Fleet database properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FleetDatabaseProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FleetDatabaseFilterParameters(_serialization.Model):
    """A database filter parameters.

    :ivar tier_name: Filter on database tier name.
    :vartype tier_name: str
    """

    _attribute_map = {
        "tier_name": {"key": "tierName", "type": "str"},
    }

    def __init__(self, *, tier_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword tier_name: Filter on database tier name.
        :paramtype tier_name: str
        """
        super().__init__(**kwargs)
        self.tier_name = tier_name


class FleetDatabaseListResult(_serialization.Model):
    """The response of a FleetDatabase list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FleetDatabase items on this page. Required.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.FleetDatabase]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FleetDatabase]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FleetDatabase"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The FleetDatabase items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasefleetmanager.models.FleetDatabase]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetDatabaseProperties(_serialization.Model):
    """Fleet database properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar original_database_id: Resource identifier for the underlying database resource.
    :vartype original_database_id: str
    :ivar provisioning_state: Database state. Known values are: "Succeeded", "Failed", "Canceled",
     "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    :ivar create_mode: Create mode. Available options: Default - Create a database. Copy - Copy the
     source database (source database name must be specified) PointInTimeRestore - Create a database
     by restoring source database from a point in time (source database name and restore from time
     must be specified). Known values are: "Default", "Copy", and "PointInTimeRestore".
    :vartype create_mode: str or ~azure.mgmt.databasefleetmanager.models.DatabaseCreateMode
    :ivar tier_name: Name of the tier this database belongs to.
    :vartype tier_name: str
    :ivar connection_string: Connection string to connect to the database with.
    :vartype connection_string: str
    :ivar recoverable: If true, database is recoverable.
    :vartype recoverable: bool
    :ivar restore_from_time: Restore from time when CreateMode is PointInTimeRestore.
    :vartype restore_from_time: ~datetime.datetime
    :ivar earliest_restore_time: Earliest restore time.
    :vartype earliest_restore_time: ~datetime.datetime
    :ivar latest_restore_time: Latest restore time.
    :vartype latest_restore_time: ~datetime.datetime
    :ivar backup_retention_days: Backup retention in days.
    :vartype backup_retention_days: int
    :ivar database_size_gb_max: Maximum database size in Gb.
    :vartype database_size_gb_max: int
    :ivar source_database_name: Source database name used when CreateMode is Copy or
     PointInTimeRestore.
    :vartype source_database_name: str
    :ivar resource_tags: Additional database properties to be applied as the underlying database
     resource tags.
    :vartype resource_tags: dict[str, str]
    :ivar identity: Identity property.
    :vartype identity: ~azure.mgmt.databasefleetmanager.models.Identity
    :ivar transparent_data_encryption: Transparent Data Encryption properties.
    :vartype transparent_data_encryption:
     ~azure.mgmt.databasefleetmanager.models.TransparentDataEncryption
    :ivar collation: Database collation.
    :vartype collation: str
    """

    _validation = {
        "original_database_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "connection_string": {"readonly": True},
        "recoverable": {"readonly": True},
        "earliest_restore_time": {"readonly": True},
        "latest_restore_time": {"readonly": True},
        "backup_retention_days": {"readonly": True},
        "database_size_gb_max": {"readonly": True},
    }

    _attribute_map = {
        "original_database_id": {"key": "originalDatabaseId", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "create_mode": {"key": "createMode", "type": "str"},
        "tier_name": {"key": "tierName", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "recoverable": {"key": "recoverable", "type": "bool"},
        "restore_from_time": {"key": "restoreFromTime", "type": "iso-8601"},
        "earliest_restore_time": {"key": "earliestRestoreTime", "type": "iso-8601"},
        "latest_restore_time": {"key": "latestRestoreTime", "type": "iso-8601"},
        "backup_retention_days": {"key": "backupRetentionDays", "type": "int"},
        "database_size_gb_max": {"key": "databaseSizeGbMax", "type": "int"},
        "source_database_name": {"key": "sourceDatabaseName", "type": "str"},
        "resource_tags": {"key": "resourceTags", "type": "{str}"},
        "identity": {"key": "identity", "type": "Identity"},
        "transparent_data_encryption": {"key": "transparentDataEncryption", "type": "TransparentDataEncryption"},
        "collation": {"key": "collation", "type": "str"},
    }

    def __init__(
        self,
        *,
        create_mode: Optional[Union[str, "_models.DatabaseCreateMode"]] = None,
        tier_name: Optional[str] = None,
        restore_from_time: Optional[datetime.datetime] = None,
        source_database_name: Optional[str] = None,
        resource_tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.Identity"] = None,
        transparent_data_encryption: Optional["_models.TransparentDataEncryption"] = None,
        collation: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword create_mode: Create mode. Available options: Default - Create a database. Copy - Copy
         the source database (source database name must be specified) PointInTimeRestore - Create a
         database by restoring source database from a point in time (source database name and restore
         from time must be specified). Known values are: "Default", "Copy", and "PointInTimeRestore".
        :paramtype create_mode: str or ~azure.mgmt.databasefleetmanager.models.DatabaseCreateMode
        :keyword tier_name: Name of the tier this database belongs to.
        :paramtype tier_name: str
        :keyword restore_from_time: Restore from time when CreateMode is PointInTimeRestore.
        :paramtype restore_from_time: ~datetime.datetime
        :keyword source_database_name: Source database name used when CreateMode is Copy or
         PointInTimeRestore.
        :paramtype source_database_name: str
        :keyword resource_tags: Additional database properties to be applied as the underlying database
         resource tags.
        :paramtype resource_tags: dict[str, str]
        :keyword identity: Identity property.
        :paramtype identity: ~azure.mgmt.databasefleetmanager.models.Identity
        :keyword transparent_data_encryption: Transparent Data Encryption properties.
        :paramtype transparent_data_encryption:
         ~azure.mgmt.databasefleetmanager.models.TransparentDataEncryption
        :keyword collation: Database collation.
        :paramtype collation: str
        """
        super().__init__(**kwargs)
        self.original_database_id: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = None
        self.create_mode = create_mode
        self.tier_name = tier_name
        self.connection_string: Optional[str] = None
        self.recoverable: Optional[bool] = None
        self.restore_from_time = restore_from_time
        self.earliest_restore_time: Optional[datetime.datetime] = None
        self.latest_restore_time: Optional[datetime.datetime] = None
        self.backup_retention_days: Optional[int] = None
        self.database_size_gb_max: Optional[int] = None
        self.source_database_name = source_database_name
        self.resource_tags = resource_tags
        self.identity = identity
        self.transparent_data_encryption = transparent_data_encryption
        self.collation = collation


class FleetListResult(_serialization.Model):
    """The response of a Fleet list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Fleet items on this page. Required.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.Fleet]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Fleet]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Fleet"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Fleet items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasefleetmanager.models.Fleet]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetProperties(_serialization.Model):
    """The Database Fleet properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Fleet description.
    :vartype description: str
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(self, *, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword description: Fleet description.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = None


class Fleetspace(ProxyResource):
    """A fleetspace.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Fleetspace properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetspaceProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FleetspaceProperties"},
    }

    def __init__(self, *, properties: Optional["_models.FleetspaceProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: A Fleetspace properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FleetspaceProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FleetspaceListResult(_serialization.Model):
    """The response of a Fleetspace list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Fleetspace items on this page. Required.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.Fleetspace]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Fleetspace]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Fleetspace"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Fleetspace items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasefleetmanager.models.Fleetspace]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetspaceProperties(_serialization.Model):
    """A Fleetspace properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Fleetspace state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    :ivar capacity_max: Maximum number of vCores database fleet manager is allowed to provision in
     the fleetspace.
    :vartype capacity_max: int
    :ivar main_principal: Main Microsoft Entra ID principal that has admin access to all databases
     in the fleetspace.
    :vartype main_principal: ~azure.mgmt.databasefleetmanager.models.MainPrincipal
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "capacity_max": {"key": "capacityMax", "type": "int"},
        "main_principal": {"key": "mainPrincipal", "type": "MainPrincipal"},
    }

    def __init__(
        self,
        *,
        capacity_max: Optional[int] = None,
        main_principal: Optional["_models.MainPrincipal"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword capacity_max: Maximum number of vCores database fleet manager is allowed to provision
         in the fleetspace.
        :paramtype capacity_max: int
        :keyword main_principal: Main Microsoft Entra ID principal that has admin access to all
         databases in the fleetspace.
        :paramtype main_principal: ~azure.mgmt.databasefleetmanager.models.MainPrincipal
        """
        super().__init__(**kwargs)
        self.provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = None
        self.capacity_max = capacity_max
        self.main_principal = main_principal


class FleetTier(ProxyResource):
    """A SQL Database Fleet tier.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Fleet tier properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetTierProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FleetTierProperties"},
    }

    def __init__(self, *, properties: Optional["_models.FleetTierProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: A Fleet tier properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FleetTierProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FleetTierListResult(_serialization.Model):
    """The response of a FleetTier list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FleetTier items on this page. Required.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.FleetTier]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FleetTier]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FleetTier"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The FleetTier items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasefleetmanager.models.FleetTier]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetTierProperties(_serialization.Model):
    """A Fleet tier properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar disabled: If true, tier is disabled.
    :vartype disabled: bool
    :ivar serverless: If true, serverless resources are provisioned in the tier.
    :vartype serverless: bool
    :ivar pooled: If true, databases are pooled.
    :vartype pooled: bool
    :ivar service_tier: Service tier of provisioned resources. Supported values: GeneralPurpose,
     Hyperscale.
    :vartype service_tier: str
    :ivar family: Family of provisioned resources, for example Gen5.
    :vartype family: str
    :ivar capacity: Capacity of provisioned resources in the tier, in units matching the specified
     service tier, for example vCore for GeneralPurpose.
    :vartype capacity: int
    :ivar pool_num_of_databases_max: Maximum number of databases per pool.
    :vartype pool_num_of_databases_max: int
    :ivar high_availability_replica_count: Number of high availability replicas for databases in
     this tier.
    :vartype high_availability_replica_count: int
    :ivar zone_redundancy: Enable zone redundancy for all databases in this tier. Known values are:
     "Enabled" and "Disabled".
    :vartype zone_redundancy: str or ~azure.mgmt.databasefleetmanager.models.ZoneRedundancy
    :ivar database_capacity_min: Minimum allocated capacity per database, in units matching the
     specified service tier.
    :vartype database_capacity_min: float
    :ivar database_capacity_max: Maximum allocated capacity per database, in units matching the
     specified service tier.
    :vartype database_capacity_max: float
    :ivar database_size_gb_max: Maximum database size in Gb.
    :vartype database_size_gb_max: int
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    _validation = {
        "disabled": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "disabled": {"key": "disabled", "type": "bool"},
        "serverless": {"key": "serverless", "type": "bool"},
        "pooled": {"key": "pooled", "type": "bool"},
        "service_tier": {"key": "serviceTier", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
        "pool_num_of_databases_max": {"key": "poolNumOfDatabasesMax", "type": "int"},
        "high_availability_replica_count": {"key": "highAvailabilityReplicaCount", "type": "int"},
        "zone_redundancy": {"key": "zoneRedundancy", "type": "str"},
        "database_capacity_min": {"key": "databaseCapacityMin", "type": "float"},
        "database_capacity_max": {"key": "databaseCapacityMax", "type": "float"},
        "database_size_gb_max": {"key": "databaseSizeGbMax", "type": "int"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        serverless: Optional[bool] = None,
        pooled: Optional[bool] = None,
        service_tier: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        pool_num_of_databases_max: Optional[int] = None,
        high_availability_replica_count: Optional[int] = None,
        zone_redundancy: Optional[Union[str, "_models.ZoneRedundancy"]] = None,
        database_capacity_min: Optional[float] = None,
        database_capacity_max: Optional[float] = None,
        database_size_gb_max: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword serverless: If true, serverless resources are provisioned in the tier.
        :paramtype serverless: bool
        :keyword pooled: If true, databases are pooled.
        :paramtype pooled: bool
        :keyword service_tier: Service tier of provisioned resources. Supported values: GeneralPurpose,
         Hyperscale.
        :paramtype service_tier: str
        :keyword family: Family of provisioned resources, for example Gen5.
        :paramtype family: str
        :keyword capacity: Capacity of provisioned resources in the tier, in units matching the
         specified service tier, for example vCore for GeneralPurpose.
        :paramtype capacity: int
        :keyword pool_num_of_databases_max: Maximum number of databases per pool.
        :paramtype pool_num_of_databases_max: int
        :keyword high_availability_replica_count: Number of high availability replicas for databases in
         this tier.
        :paramtype high_availability_replica_count: int
        :keyword zone_redundancy: Enable zone redundancy for all databases in this tier. Known values
         are: "Enabled" and "Disabled".
        :paramtype zone_redundancy: str or ~azure.mgmt.databasefleetmanager.models.ZoneRedundancy
        :keyword database_capacity_min: Minimum allocated capacity per database, in units matching the
         specified service tier.
        :paramtype database_capacity_min: float
        :keyword database_capacity_max: Maximum allocated capacity per database, in units matching the
         specified service tier.
        :paramtype database_capacity_max: float
        :keyword database_size_gb_max: Maximum database size in Gb.
        :paramtype database_size_gb_max: int
        """
        super().__init__(**kwargs)
        self.disabled: Optional[bool] = None
        self.serverless = serverless
        self.pooled = pooled
        self.service_tier = service_tier
        self.family = family
        self.capacity = capacity
        self.pool_num_of_databases_max = pool_num_of_databases_max
        self.high_availability_replica_count = high_availability_replica_count
        self.zone_redundancy = zone_redundancy
        self.database_capacity_min = database_capacity_min
        self.database_capacity_max = database_capacity_max
        self.database_size_gb_max = database_size_gb_max
        self.provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = None


class FleetUpdate(_serialization.Model):
    """An update to a Database Fleet.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The Database Fleet properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "FleetProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FleetProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The Database Fleet properties.
        :paramtype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class Identity(_serialization.Model):
    """Database Identity.

    :ivar identity_type: Identity type of the main principal. Known values are: "None" and
     "UserAssigned".
    :vartype identity_type: str or ~azure.mgmt.databasefleetmanager.models.IdentityType
    :ivar user_assigned_identities: User identity ids.
    :vartype user_assigned_identities:
     list[~azure.mgmt.databasefleetmanager.models.DatabaseIdentity]
    :ivar federated_client_id: The federated client id for the SQL Database. It is used for cross
     tenant CMK scenario.
    :vartype federated_client_id: str
    """

    _attribute_map = {
        "identity_type": {"key": "identityType", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "[DatabaseIdentity]"},
        "federated_client_id": {"key": "federatedClientId", "type": "str"},
    }

    def __init__(
        self,
        *,
        identity_type: Optional[Union[str, "_models.IdentityType"]] = None,
        user_assigned_identities: Optional[List["_models.DatabaseIdentity"]] = None,
        federated_client_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity_type: Identity type of the main principal. Known values are: "None" and
         "UserAssigned".
        :paramtype identity_type: str or ~azure.mgmt.databasefleetmanager.models.IdentityType
        :keyword user_assigned_identities: User identity ids.
        :paramtype user_assigned_identities:
         list[~azure.mgmt.databasefleetmanager.models.DatabaseIdentity]
        :keyword federated_client_id: The federated client id for the SQL Database. It is used for
         cross tenant CMK scenario.
        :paramtype federated_client_id: str
        """
        super().__init__(**kwargs)
        self.identity_type = identity_type
        self.user_assigned_identities = user_assigned_identities
        self.federated_client_id = federated_client_id


class MainPrincipal(_serialization.Model):
    """A main principal.

    :ivar login: Login name of the main principal.
    :vartype login: str
    :ivar application_id: Application Id of the main principal.
    :vartype application_id: str
    :ivar object_id: Object Id of the main principal.
    :vartype object_id: str
    :ivar tenant_id: Tenant Id of the main principal.
    :vartype tenant_id: str
    :ivar principal_type: Principal type of the main principal. Known values are: "Application" and
     "User".
    :vartype principal_type: str or ~azure.mgmt.databasefleetmanager.models.PrincipalType
    """

    _attribute_map = {
        "login": {"key": "login", "type": "str"},
        "application_id": {"key": "applicationId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "principal_type": {"key": "principalType", "type": "str"},
    }

    def __init__(
        self,
        *,
        login: Optional[str] = None,
        application_id: Optional[str] = None,
        object_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        principal_type: Optional[Union[str, "_models.PrincipalType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword login: Login name of the main principal.
        :paramtype login: str
        :keyword application_id: Application Id of the main principal.
        :paramtype application_id: str
        :keyword object_id: Object Id of the main principal.
        :paramtype object_id: str
        :keyword tenant_id: Tenant Id of the main principal.
        :paramtype tenant_id: str
        :keyword principal_type: Principal type of the main principal. Known values are: "Application"
         and "User".
        :paramtype principal_type: str or ~azure.mgmt.databasefleetmanager.models.PrincipalType
        """
        super().__init__(**kwargs)
        self.login = login
        self.application_id = application_id
        self.object_id = object_id
        self.tenant_id = tenant_id
        self.principal_type = principal_type


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.databasefleetmanager.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.databasefleetmanager.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.databasefleetmanager.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.databasefleetmanager.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.is_data_action: Optional[bool] = None
        self.display = display
        self.origin: Optional[Union[str, "_models.Origin"]] = None
        self.action_type: Optional[Union[str, "_models.ActionType"]] = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider: Optional[str] = None
        self.resource: Optional[str] = None
        self.operation: Optional[str] = None
        self.description: Optional[str] = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.databasefleetmanager.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value: Optional[List["_models.Operation"]] = None
        self.next_link: Optional[str] = None


class RegisterServerProperties(_serialization.Model):
    """Server registration definition.

    :ivar tier_name: Destination tier name.
    :vartype tier_name: str
    :ivar source_subscription_id: Source subscription id.
    :vartype source_subscription_id: str
    :ivar source_resource_group_name: Source resource group name.
    :vartype source_resource_group_name: str
    :ivar source_server_name: Source SQL Server name.
    :vartype source_server_name: str
    :ivar destination_tier_overrides: Destination tier overrides.
    :vartype destination_tier_overrides:
     list[~azure.mgmt.databasefleetmanager.models.DestinationTierOverride]
    """

    _attribute_map = {
        "tier_name": {"key": "tierName", "type": "str"},
        "source_subscription_id": {"key": "sourceSubscriptionId", "type": "str"},
        "source_resource_group_name": {"key": "sourceResourceGroupName", "type": "str"},
        "source_server_name": {"key": "sourceServerName", "type": "str"},
        "destination_tier_overrides": {"key": "destinationTierOverrides", "type": "[DestinationTierOverride]"},
    }

    def __init__(
        self,
        *,
        tier_name: Optional[str] = None,
        source_subscription_id: Optional[str] = None,
        source_resource_group_name: Optional[str] = None,
        source_server_name: Optional[str] = None,
        destination_tier_overrides: Optional[List["_models.DestinationTierOverride"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tier_name: Destination tier name.
        :paramtype tier_name: str
        :keyword source_subscription_id: Source subscription id.
        :paramtype source_subscription_id: str
        :keyword source_resource_group_name: Source resource group name.
        :paramtype source_resource_group_name: str
        :keyword source_server_name: Source SQL Server name.
        :paramtype source_server_name: str
        :keyword destination_tier_overrides: Destination tier overrides.
        :paramtype destination_tier_overrides:
         list[~azure.mgmt.databasefleetmanager.models.DestinationTierOverride]
        """
        super().__init__(**kwargs)
        self.tier_name = tier_name
        self.source_subscription_id = source_subscription_id
        self.source_resource_group_name = source_resource_group_name
        self.source_server_name = source_server_name
        self.destination_tier_overrides = destination_tier_overrides


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TransparentDataEncryption(_serialization.Model):
    """Transparent Data Encryption properties.

    :ivar key_uri: Customer Managed Key (CMK) Uri.
    :vartype key_uri: str
    :ivar keys: Additional Keys.
    :vartype keys: list[str]
    :ivar enable_auto_rotation: Enable key auto rotation.
    :vartype enable_auto_rotation: bool
    """

    _attribute_map = {
        "key_uri": {"key": "keyUri", "type": "str"},
        "keys": {"key": "keys", "type": "[str]"},
        "enable_auto_rotation": {"key": "enableAutoRotation", "type": "bool"},
    }

    def __init__(
        self,
        *,
        key_uri: Optional[str] = None,
        keys: Optional[List[str]] = None,
        enable_auto_rotation: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword key_uri: Customer Managed Key (CMK) Uri.
        :paramtype key_uri: str
        :keyword keys: Additional Keys.
        :paramtype keys: list[str]
        :keyword enable_auto_rotation: Enable key auto rotation.
        :paramtype enable_auto_rotation: bool
        """
        super().__init__(**kwargs)
        self.key_uri = key_uri
        self.keys = keys
        self.enable_auto_rotation = enable_auto_rotation
