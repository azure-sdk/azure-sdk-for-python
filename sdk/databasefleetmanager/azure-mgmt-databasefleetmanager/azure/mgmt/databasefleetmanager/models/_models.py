# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class DatabaseChangeTierProperties(_model_base.Model):
    """A database change tier definition.

    :ivar target_tier_name: A target tier name.
    :vartype target_tier_name: str
    """

    target_tier_name: Optional[str] = rest_field(name="targetTierName", visibility=["read", "create"])
    """A target tier name."""

    @overload
    def __init__(
        self,
        *,
        target_tier_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatabaseIdentity(_model_base.Model):
    """Database Identity properties.

    :ivar resource_id: Resource Id of the database identity.
    :vartype resource_id: str
    :ivar principal_id: Principal Id of the database identity.
    :vartype principal_id: str
    :ivar client_id: Client Id of the database identity.
    :vartype client_id: str
    """

    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read", "create", "update"])
    """Resource Id of the database identity."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read", "create", "update"])
    """Principal Id of the database identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read", "create", "update"])
    """Client Id of the database identity."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        principal_id: Optional[str] = None,
        client_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatabaseRenameProperties(_model_base.Model):
    """A database rename definition.

    :ivar new_name: New database name.
    :vartype new_name: str
    """

    new_name: Optional[str] = rest_field(name="newName", visibility=["read", "create"])
    """New database name."""

    @overload
    def __init__(
        self,
        *,
        new_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DestinationTierOverride(_model_base.Model):
    """A destination tier override.

    All required parameters must be populated in order to send to server.

    :ivar resource_type: Resource type. Required. Known values are: "Database" and "Pool".
    :vartype resource_type: str or ~azure.mgmt.databasefleetmanager.models.ResourceType
    :ivar tier_name: Destination tier name. Required.
    :vartype tier_name: str
    :ivar resource_name: Resource name. Required.
    :vartype resource_name: str
    """

    resource_type: Union[str, "_models.ResourceType"] = rest_field(name="resourceType", visibility=["read", "create"])
    """Resource type. Required. Known values are: \"Database\" and \"Pool\"."""
    tier_name: str = rest_field(name="tierName", visibility=["read", "create"])
    """Destination tier name. Required."""
    resource_name: str = rest_field(name="resourceName", visibility=["read", "create"])
    """Resource name. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_type: Union[str, "_models.ResourceType"],
        tier_name: str,
        resource_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.databasefleetmanager.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.databasefleetmanager.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.databasefleetmanager.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    """


class FirewallRule(ProxyResource):
    """A firewall rule.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Firewall rule properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FirewallRuleProperties
    """

    properties: Optional["_models.FirewallRuleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A Firewall rule properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FirewallRuleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FirewallRuleProperties(_model_base.Model):
    """A Firewall rule properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_ip_address: Start IP address.
    :vartype start_ip_address: str
    :ivar end_ip_address: End IP address.
    :vartype end_ip_address: str
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    start_ip_address: Optional[str] = rest_field(name="startIpAddress", visibility=["read", "create"])
    """Start IP address."""
    end_ip_address: Optional[str] = rest_field(name="endIpAddress", visibility=["read", "create"])
    """End IP address."""
    provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        start_ip_address: Optional[str] = None,
        end_ip_address: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Fleet(TrackedResource):
    """A Database Fleet.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The fleet properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
    """

    properties: Optional["_models.FleetProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The fleet properties."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FleetProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetDatabase(ProxyResource):
    """A fleet database.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: Fleet database properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetDatabaseProperties
    """

    properties: Optional["_models.FleetDatabaseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Fleet database properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FleetDatabaseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetDatabaseProperties(_model_base.Model):
    """Fleet database properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar original_database_id: Resource identifier for the underlying database resource.
    :vartype original_database_id: str
    :ivar provisioning_state: Database state. Known values are: "Succeeded", "Failed", "Canceled",
     "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    :ivar create_mode: Create mode. Available options: Default - Create a database. Copy - Copy the
     source database (source database name must be specified) PointInTimeRestore - Create a database
     by restoring source database from a point in time (source database name and restore from time
     must be specified). Known values are: "Default", "Copy", and "PointInTimeRestore".
    :vartype create_mode: str or ~azure.mgmt.databasefleetmanager.models.DatabaseCreateMode
    :ivar tier_name: Name of the tier this database belongs to.
    :vartype tier_name: str
    :ivar connection_string: Connection string to connect to the database with.
    :vartype connection_string: str
    :ivar recoverable: If true, database is recoverable.
    :vartype recoverable: bool
    :ivar restore_from_time: Restore from time when CreateMode is PointInTimeRestore.
    :vartype restore_from_time: ~datetime.datetime
    :ivar earliest_restore_time: Earliest restore time.
    :vartype earliest_restore_time: ~datetime.datetime
    :ivar latest_restore_time: Latest restore time.
    :vartype latest_restore_time: ~datetime.datetime
    :ivar backup_retention_days: Backup retention in days.
    :vartype backup_retention_days: int
    :ivar database_size_gb_max: Maximum database size in Gb.
    :vartype database_size_gb_max: int
    :ivar source_database_name: Source database name used when CreateMode is Copy or
     PointInTimeRestore.
    :vartype source_database_name: str
    :ivar resource_tags: Additional database properties to be applied as the underlying database
     resource tags.
    :vartype resource_tags: dict[str, str]
    :ivar identity: Identity property.
    :vartype identity: ~azure.mgmt.databasefleetmanager.models.Identity
    :ivar transparent_data_encryption: Transparent Data Encryption properties.
    :vartype transparent_data_encryption:
     ~azure.mgmt.databasefleetmanager.models.TransparentDataEncryption
    :ivar collation: Database collation.
    :vartype collation: str
    """

    original_database_id: Optional[str] = rest_field(name="originalDatabaseId", visibility=["read"])
    """Resource identifier for the underlying database resource."""
    provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Database state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", \"Provisioning\",
     and \"Accepted\"."""
    create_mode: Optional[Union[str, "_models.DatabaseCreateMode"]] = rest_field(
        name="createMode", visibility=["read", "create"]
    )
    """Create mode. Available options: Default - Create a database. Copy - Copy the source database
     (source database name must be specified) PointInTimeRestore - Create a database by restoring
     source database from a point in time (source database name and restore from time must be
     specified). Known values are: \"Default\", \"Copy\", and \"PointInTimeRestore\"."""
    tier_name: Optional[str] = rest_field(name="tierName", visibility=["read", "create"])
    """Name of the tier this database belongs to."""
    connection_string: Optional[str] = rest_field(name="connectionString", visibility=["read"])
    """Connection string to connect to the database with."""
    recoverable: Optional[bool] = rest_field(visibility=["read"])
    """If true, database is recoverable."""
    restore_from_time: Optional[datetime.datetime] = rest_field(
        name="restoreFromTime", visibility=["read", "create"], format="rfc3339"
    )
    """Restore from time when CreateMode is PointInTimeRestore."""
    earliest_restore_time: Optional[datetime.datetime] = rest_field(
        name="earliestRestoreTime", visibility=["read"], format="rfc3339"
    )
    """Earliest restore time."""
    latest_restore_time: Optional[datetime.datetime] = rest_field(
        name="latestRestoreTime", visibility=["read"], format="rfc3339"
    )
    """Latest restore time."""
    backup_retention_days: Optional[int] = rest_field(name="backupRetentionDays", visibility=["read"])
    """Backup retention in days."""
    database_size_gb_max: Optional[int] = rest_field(name="databaseSizeGbMax", visibility=["read"])
    """Maximum database size in Gb."""
    source_database_name: Optional[str] = rest_field(name="sourceDatabaseName", visibility=["read", "create"])
    """Source database name used when CreateMode is Copy or PointInTimeRestore."""
    resource_tags: Optional[Dict[str, str]] = rest_field(name="resourceTags", visibility=["read", "create", "update"])
    """Additional database properties to be applied as the underlying database resource tags."""
    identity: Optional["_models.Identity"] = rest_field(visibility=["read", "create", "update"])
    """Identity property."""
    transparent_data_encryption: Optional["_models.TransparentDataEncryption"] = rest_field(
        name="transparentDataEncryption", visibility=["read", "create", "update"]
    )
    """Transparent Data Encryption properties."""
    collation: Optional[str] = rest_field(visibility=["read", "create"])
    """Database collation."""

    @overload
    def __init__(
        self,
        *,
        create_mode: Optional[Union[str, "_models.DatabaseCreateMode"]] = None,
        tier_name: Optional[str] = None,
        restore_from_time: Optional[datetime.datetime] = None,
        source_database_name: Optional[str] = None,
        resource_tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.Identity"] = None,
        transparent_data_encryption: Optional["_models.TransparentDataEncryption"] = None,
        collation: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetProperties(_model_base.Model):
    """The Database Fleet properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Fleet description.
    :vartype description: str
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    description: Optional[str] = rest_field(visibility=["read", "create"])
    """Fleet description."""
    provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Fleetspace(ProxyResource):
    """A fleetspace.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Fleetspace properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetspaceProperties
    """

    properties: Optional["_models.FleetspaceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A Fleetspace properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FleetspaceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetspaceProperties(_model_base.Model):
    """A Fleetspace properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Fleetspace state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    :ivar capacity_max: Maximum number of vCores database fleet manager is allowed to provision in
     the fleetspace.
    :vartype capacity_max: int
    :ivar main_principal: Main Microsoft Entra ID principal that has admin access to all databases
     in the fleetspace.
    :vartype main_principal: ~azure.mgmt.databasefleetmanager.models.MainPrincipal
    """

    provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Fleetspace state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", \"Provisioning\",
     and \"Accepted\"."""
    capacity_max: Optional[int] = rest_field(name="capacityMax", visibility=["read", "create", "update"])
    """Maximum number of vCores database fleet manager is allowed to provision in the fleetspace."""
    main_principal: Optional["_models.MainPrincipal"] = rest_field(name="mainPrincipal", visibility=["read", "create"])
    """Main Microsoft Entra ID principal that has admin access to all databases in the fleetspace."""

    @overload
    def __init__(
        self,
        *,
        capacity_max: Optional[int] = None,
        main_principal: Optional["_models.MainPrincipal"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetTier(ProxyResource):
    """A SQL Database Fleet tier.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasefleetmanager.models.SystemData
    :ivar properties: A Fleet tier properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetTierProperties
    """

    properties: Optional["_models.FleetTierProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A Fleet tier properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FleetTierProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetTierProperties(_model_base.Model):
    """A Fleet tier properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar disabled: If true, tier is disabled.
    :vartype disabled: bool
    :ivar serverless: If true, serverless resources are provisioned in the tier.
    :vartype serverless: bool
    :ivar pooled: If true, databases are pooled.
    :vartype pooled: bool
    :ivar service_tier: Service tier of provisioned resources. Supported values: GeneralPurpose,
     Hyperscale.
    :vartype service_tier: str
    :ivar family: Family of provisioned resources, for example Gen5.
    :vartype family: str
    :ivar capacity: Capacity of provisioned resources in the tier, in units matching the specified
     service tier, for example vCore for GeneralPurpose.
    :vartype capacity: int
    :ivar pool_num_of_databases_max: Maximum number of databases per pool.
    :vartype pool_num_of_databases_max: int
    :ivar high_availability_replica_count: Number of high availability replicas for databases in
     this tier.
    :vartype high_availability_replica_count: int
    :ivar zone_redundancy: Enable zone redundancy for all databases in this tier. Known values are:
     "Enabled" and "Disabled".
    :vartype zone_redundancy: str or ~azure.mgmt.databasefleetmanager.models.ZoneRedundancy
    :ivar database_capacity_min: Minimum allocated capacity per database, in units matching the
     specified service tier.
    :vartype database_capacity_min: float
    :ivar database_capacity_max: Maximum allocated capacity per database, in units matching the
     specified service tier.
    :vartype database_capacity_max: float
    :ivar database_size_gb_max: Maximum database size in Gb.
    :vartype database_size_gb_max: int
    :ivar provisioning_state: Provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", and "Accepted".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasefleetmanager.models.AzureProvisioningState
    """

    disabled: Optional[bool] = rest_field(visibility=["read"])
    """If true, tier is disabled."""
    serverless: Optional[bool] = rest_field(visibility=["read", "create"])
    """If true, serverless resources are provisioned in the tier."""
    pooled: Optional[bool] = rest_field(visibility=["read", "create"])
    """If true, databases are pooled."""
    service_tier: Optional[str] = rest_field(name="serviceTier", visibility=["read", "create"])
    """Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale."""
    family: Optional[str] = rest_field(visibility=["read", "create"])
    """Family of provisioned resources, for example Gen5."""
    capacity: Optional[int] = rest_field(visibility=["read", "create"])
    """Capacity of provisioned resources in the tier, in units matching the specified service tier,
     for example vCore for GeneralPurpose."""
    pool_num_of_databases_max: Optional[int] = rest_field(
        name="poolNumOfDatabasesMax", visibility=["read", "create", "update"]
    )
    """Maximum number of databases per pool."""
    high_availability_replica_count: Optional[int] = rest_field(
        name="highAvailabilityReplicaCount", visibility=["read", "create"]
    )
    """Number of high availability replicas for databases in this tier."""
    zone_redundancy: Optional[Union[str, "_models.ZoneRedundancy"]] = rest_field(
        name="zoneRedundancy", visibility=["read", "create"]
    )
    """Enable zone redundancy for all databases in this tier. Known values are: \"Enabled\" and
     \"Disabled\"."""
    database_capacity_min: Optional[float] = rest_field(name="databaseCapacityMin", visibility=["read", "create"])
    """Minimum allocated capacity per database, in units matching the specified service tier."""
    database_capacity_max: Optional[float] = rest_field(name="databaseCapacityMax", visibility=["read", "create"])
    """Maximum allocated capacity per database, in units matching the specified service tier."""
    database_size_gb_max: Optional[int] = rest_field(name="databaseSizeGbMax", visibility=["read", "create"])
    """Maximum database size in Gb."""
    provisioning_state: Optional[Union[str, "_models.AzureProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        serverless: Optional[bool] = None,
        pooled: Optional[bool] = None,
        service_tier: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        pool_num_of_databases_max: Optional[int] = None,
        high_availability_replica_count: Optional[int] = None,
        zone_redundancy: Optional[Union[str, "_models.ZoneRedundancy"]] = None,
        database_capacity_min: Optional[float] = None,
        database_capacity_max: Optional[float] = None,
        database_size_gb_max: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FleetUpdate(_model_base.Model):
    """An update to a Database Fleet.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The Database Fleet properties.
    :vartype properties: ~azure.mgmt.databasefleetmanager.models.FleetProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update"])
    """Resource tags."""
    properties: Optional["_models.FleetProperties"] = rest_field(visibility=["read", "create", "update"])
    """The Database Fleet properties."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FleetProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Identity(_model_base.Model):
    """Database Identity.

    :ivar identity_type: Identity type of the main principal. Known values are: "None" and
     "UserAssigned".
    :vartype identity_type: str or ~azure.mgmt.databasefleetmanager.models.IdentityType
    :ivar user_assigned_identities: User identity ids.
    :vartype user_assigned_identities:
     list[~azure.mgmt.databasefleetmanager.models.DatabaseIdentity]
    :ivar federated_client_id: The federated client id for the SQL Database. It is used for cross
     tenant CMK scenario.
    :vartype federated_client_id: str
    """

    identity_type: Optional[Union[str, "_models.IdentityType"]] = rest_field(
        name="identityType", visibility=["read", "create", "update"]
    )
    """Identity type of the main principal. Known values are: \"None\" and \"UserAssigned\"."""
    user_assigned_identities: Optional[List["_models.DatabaseIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update"]
    )
    """User identity ids."""
    federated_client_id: Optional[str] = rest_field(name="federatedClientId", visibility=["read", "create", "update"])
    """The federated client id for the SQL Database. It is used for cross tenant CMK scenario."""

    @overload
    def __init__(
        self,
        *,
        identity_type: Optional[Union[str, "_models.IdentityType"]] = None,
        user_assigned_identities: Optional[List["_models.DatabaseIdentity"]] = None,
        federated_client_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MainPrincipal(_model_base.Model):
    """A main principal.

    :ivar login: Login name of the main principal.
    :vartype login: str
    :ivar application_id: Application Id of the main principal.
    :vartype application_id: str
    :ivar object_id: Object Id of the main principal.
    :vartype object_id: str
    :ivar tenant_id: Tenant Id of the main principal.
    :vartype tenant_id: str
    :ivar principal_type: Principal type of the main principal. Known values are: "Application" and
     "User".
    :vartype principal_type: str or ~azure.mgmt.databasefleetmanager.models.PrincipalType
    """

    login: Optional[str] = rest_field(visibility=["read", "create"])
    """Login name of the main principal."""
    application_id: Optional[str] = rest_field(name="applicationId", visibility=["read", "create"])
    """Application Id of the main principal."""
    object_id: Optional[str] = rest_field(name="objectId", visibility=["read", "create"])
    """Object Id of the main principal."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read", "create"])
    """Tenant Id of the main principal."""
    principal_type: Optional[Union[str, "_models.PrincipalType"]] = rest_field(
        name="principalType", visibility=["read", "create"]
    )
    """Principal type of the main principal. Known values are: \"Application\" and \"User\"."""

    @overload
    def __init__(
        self,
        *,
        login: Optional[str] = None,
        application_id: Optional[str] = None,
        object_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        principal_type: Optional[Union[str, "_models.PrincipalType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.databasefleetmanager.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.databasefleetmanager.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.databasefleetmanager.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class RegisterServerProperties(_model_base.Model):
    """Server registration definition.

    :ivar tier_name: Destination tier name.
    :vartype tier_name: str
    :ivar source_subscription_id: Source subscription id.
    :vartype source_subscription_id: str
    :ivar source_resource_group_name: Source resource group name.
    :vartype source_resource_group_name: str
    :ivar source_server_name: Source SQL Server name.
    :vartype source_server_name: str
    :ivar destination_tier_overrides: Destination tier overrides.
    :vartype destination_tier_overrides:
     list[~azure.mgmt.databasefleetmanager.models.DestinationTierOverride]
    """

    tier_name: Optional[str] = rest_field(name="tierName", visibility=["read", "create"])
    """Destination tier name."""
    source_subscription_id: Optional[str] = rest_field(name="sourceSubscriptionId", visibility=["read", "create"])
    """Source subscription id."""
    source_resource_group_name: Optional[str] = rest_field(
        name="sourceResourceGroupName", visibility=["read", "create"]
    )
    """Source resource group name."""
    source_server_name: Optional[str] = rest_field(name="sourceServerName", visibility=["read", "create"])
    """Source SQL Server name."""
    destination_tier_overrides: Optional[List["_models.DestinationTierOverride"]] = rest_field(
        name="destinationTierOverrides", visibility=["read", "create"]
    )
    """Destination tier overrides."""

    @overload
    def __init__(
        self,
        *,
        tier_name: Optional[str] = None,
        source_subscription_id: Optional[str] = None,
        source_resource_group_name: Optional[str] = None,
        source_server_name: Optional[str] = None,
        destination_tier_overrides: Optional[List["_models.DestinationTierOverride"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.databasefleetmanager.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TransparentDataEncryption(_model_base.Model):
    """Transparent Data Encryption properties.

    :ivar key_uri: Customer Managed Key (CMK) Uri.
    :vartype key_uri: str
    :ivar keys_property: Additional Keys.
    :vartype keys_property: list[str]
    :ivar enable_auto_rotation: Enable key auto rotation.
    :vartype enable_auto_rotation: bool
    """

    key_uri: Optional[str] = rest_field(name="keyUri", visibility=["read", "create", "update"])
    """Customer Managed Key (CMK) Uri."""
    keys_property: Optional[List[str]] = rest_field(name="keys", visibility=["read", "create", "update"])
    """Additional Keys."""
    enable_auto_rotation: Optional[bool] = rest_field(
        name="enableAutoRotation", visibility=["read", "create", "update"]
    )
    """Enable key auto rotation."""

    @overload
    def __init__(
        self,
        *,
        key_uri: Optional[str] = None,
        keys_property: Optional[List[str]] = None,
        enable_auto_rotation: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
