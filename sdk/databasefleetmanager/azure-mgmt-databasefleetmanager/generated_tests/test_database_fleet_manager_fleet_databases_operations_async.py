# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.databasefleetmanager.aio import DatabaseFleetManagerClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDatabaseFleetManagerFleetDatabasesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DatabaseFleetManagerClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_get(self, resource_group):
        response = await self.client.fleet_databases.get(
            resource_group_name=resource_group.name,
            fleet_name="str",
            fleetspace_name="str",
            database_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.fleet_databases.begin_create_or_update(
                resource_group_name=resource_group.name,
                fleet_name="str",
                fleetspace_name="str",
                database_name="str",
                resource={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "backupRetentionDays": 0,
                        "collation": "str",
                        "connectionString": "str",
                        "createMode": "str",
                        "databaseSizeGbMax": 0,
                        "earliestRestoreTime": "2020-02-20 00:00:00",
                        "identity": {
                            "federatedClientId": "str",
                            "identityType": "str",
                            "userAssignedIdentities": [{"clientId": "str", "principalId": "str", "resourceId": "str"}],
                        },
                        "latestRestoreTime": "2020-02-20 00:00:00",
                        "originalDatabaseId": "str",
                        "provisioningState": "str",
                        "recoverable": bool,
                        "resourceTags": {"str": "str"},
                        "restoreFromTime": "2020-02-20 00:00:00",
                        "sourceDatabaseName": "str",
                        "tierName": "str",
                        "transparentDataEncryption": {"enableAutoRotation": bool, "keyUri": "str", "keys": ["str"]},
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_begin_update(self, resource_group):
        response = await (
            await self.client.fleet_databases.begin_update(
                resource_group_name=resource_group.name,
                fleet_name="str",
                fleetspace_name="str",
                database_name="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "backupRetentionDays": 0,
                        "collation": "str",
                        "connectionString": "str",
                        "createMode": "str",
                        "databaseSizeGbMax": 0,
                        "earliestRestoreTime": "2020-02-20 00:00:00",
                        "identity": {
                            "federatedClientId": "str",
                            "identityType": "str",
                            "userAssignedIdentities": [{"clientId": "str", "principalId": "str", "resourceId": "str"}],
                        },
                        "latestRestoreTime": "2020-02-20 00:00:00",
                        "originalDatabaseId": "str",
                        "provisioningState": "str",
                        "recoverable": bool,
                        "resourceTags": {"str": "str"},
                        "restoreFromTime": "2020-02-20 00:00:00",
                        "sourceDatabaseName": "str",
                        "tierName": "str",
                        "transparentDataEncryption": {"enableAutoRotation": bool, "keyUri": "str", "keys": ["str"]},
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_begin_delete(self, resource_group):
        response = await (
            await self.client.fleet_databases.begin_delete(
                resource_group_name=resource_group.name,
                fleet_name="str",
                fleetspace_name="str",
                database_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_list_by_fleetspace(self, resource_group):
        response = self.client.fleet_databases.list_by_fleetspace(
            resource_group_name=resource_group.name,
            fleet_name="str",
            fleetspace_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_begin_change_tier(self, resource_group):
        response = await (
            await self.client.fleet_databases.begin_change_tier(
                resource_group_name=resource_group.name,
                fleet_name="str",
                fleetspace_name="str",
                database_name="str",
                body={"targetTierName": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_fleet_databases_begin_rename(self, resource_group):
        response = await (
            await self.client.fleet_databases.begin_rename(
                resource_group_name=resource_group.name,
                fleet_name="str",
                fleetspace_name="str",
                database_name="str",
                body={"newName": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
