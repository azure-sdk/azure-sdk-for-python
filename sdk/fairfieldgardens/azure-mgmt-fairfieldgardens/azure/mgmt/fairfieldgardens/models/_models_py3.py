# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AllocatedEndpoint(_serialization.Model):
    """Representation of a previously allocated endpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the endpoint. Required.
    :vartype name: str
    :ivar endpoint_type: Type of the endpoint. Required. "Microsoft.EventGrid/namespaces"
    :vartype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
    :ivar host_name: Hostname of the endpoint. Required.
    :vartype host_name: str
    """

    _validation = {
        "name": {"required": True},
        "endpoint_type": {"required": True},
        "host_name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "endpoint_type": {"key": "endpointType", "type": "str"},
        "host_name": {"key": "hostName", "type": "str"},
    }

    def __init__(
        self, *, name: str, endpoint_type: Union[str, "_models.EndpointType"], host_name: str, **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the endpoint. Required.
        :paramtype name: str
        :keyword endpoint_type: Type of the endpoint. Required. "Microsoft.EventGrid/namespaces"
        :paramtype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
        :keyword host_name: Hostname of the endpoint. Required.
        :paramtype host_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.endpoint_type = endpoint_type
        self.host_name = host_name


class AllocationEndpoint(_serialization.Model):
    """Allocation endpoint.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Resource id of the endpoint. Required.
    :vartype resource_id: str
    :ivar host_name: host name of the endpoint. Required.
    :vartype host_name: str
    """

    _validation = {
        "resource_id": {"required": True},
        "host_name": {"required": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "host_name": {"key": "hostName", "type": "str"},
    }

    def __init__(self, *, resource_id: str, host_name: str, **kwargs: Any) -> None:
        """
        :keyword resource_id: Resource id of the endpoint. Required.
        :paramtype resource_id: str
        :keyword host_name: host name of the endpoint. Required.
        :paramtype host_name: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.host_name = host_name


class AllocationRule(_serialization.Model):
    """The allocation rule.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    EvenlyDistributedAllocationRule

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the allocation rule. Required.
    :vartype name: str
    :ivar endpoint_type: Type of endpoint. Required. "Microsoft.EventGrid/namespaces"
    :vartype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
    :ivar type: Type of the allocation rule. Required. "EvenlyDistributed"
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.AllocationType
    """

    _validation = {
        "name": {"required": True},
        "endpoint_type": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "endpoint_type": {"key": "endpointType", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"EvenlyDistributed": "EvenlyDistributedAllocationRule"}}

    def __init__(self, *, name: str, endpoint_type: Union[str, "_models.EndpointType"], **kwargs: Any) -> None:
        """
        :keyword name: Name of the allocation rule. Required.
        :paramtype name: str
        :keyword endpoint_type: Type of endpoint. Required. "Microsoft.EventGrid/namespaces"
        :paramtype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
        """
        super().__init__(**kwargs)
        self.name = name
        self.endpoint_type = endpoint_type
        self.type: Optional[str] = None


class BootstrapAuthenticationRule(_serialization.Model):
    """The authentication rule for bootstrap.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DiscoveryBootstrapAuthenticationRule, X509BootstrapAuthenticationRule

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of authentication rule. Required. Known values are: "X509" and
     "Discovery".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"Discovery": "DiscoveryBootstrapAuthenticationRule", "X509": "X509BootstrapAuthenticationRule"}
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class CaConfig(_serialization.Model):
    """The configuration for setting up a CA.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: System-generated value for referencing the CA.
    :vartype name: str
    :ivar properties: Certificate properties. Required.
    :vartype properties: ~azure.mgmt.fairfieldgardens.models.CertificateProperties
    """

    _validation = {
        "name": {"readonly": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "properties": {"key": "properties", "type": "CertificateProperties"},
    }

    def __init__(self, *, properties: "_models.CertificateProperties", **kwargs: Any) -> None:
        """
        :keyword properties: Certificate properties. Required.
        :paramtype properties: ~azure.mgmt.fairfieldgardens.models.CertificateProperties
        """
        super().__init__(**kwargs)
        self.name = None
        self.properties = properties


class CertificateIssuanceRule(_serialization.Model):
    """Certificate issuance configurations.

    All required parameters must be populated in order to send to Azure.

    :ivar issuing_authority: The type of authority for cert issuance. Required. "FirstParty"
    :vartype issuing_authority: str or
     ~azure.mgmt.fairfieldgardens.models.SupportedIssuingAuthority
    :ivar certificate_authority_configuration: The configuration to set up an ICA. Required.
    :vartype certificate_authority_configuration: ~azure.mgmt.fairfieldgardens.models.CaConfig
    :ivar leaf_certificate_configuration: The leaf certificate configuration. Required.
    :vartype leaf_certificate_configuration: ~azure.mgmt.fairfieldgardens.models.CertPolicyConfig
    :ivar renewal_interval: Cert renewal interval. Required.
    :vartype renewal_interval: int
    """

    _validation = {
        "issuing_authority": {"required": True},
        "certificate_authority_configuration": {"required": True},
        "leaf_certificate_configuration": {"required": True},
        "renewal_interval": {"required": True},
    }

    _attribute_map = {
        "issuing_authority": {"key": "issuingAuthority", "type": "str"},
        "certificate_authority_configuration": {"key": "certificateAuthorityConfiguration", "type": "CaConfig"},
        "leaf_certificate_configuration": {"key": "leafCertificateConfiguration", "type": "CertPolicyConfig"},
        "renewal_interval": {"key": "renewalInterval", "type": "int"},
    }

    def __init__(
        self,
        *,
        issuing_authority: Union[str, "_models.SupportedIssuingAuthority"],
        certificate_authority_configuration: "_models.CaConfig",
        leaf_certificate_configuration: "_models.CertPolicyConfig",
        renewal_interval: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword issuing_authority: The type of authority for cert issuance. Required. "FirstParty"
        :paramtype issuing_authority: str or
         ~azure.mgmt.fairfieldgardens.models.SupportedIssuingAuthority
        :keyword certificate_authority_configuration: The configuration to set up an ICA. Required.
        :paramtype certificate_authority_configuration: ~azure.mgmt.fairfieldgardens.models.CaConfig
        :keyword leaf_certificate_configuration: The leaf certificate configuration. Required.
        :paramtype leaf_certificate_configuration: ~azure.mgmt.fairfieldgardens.models.CertPolicyConfig
        :keyword renewal_interval: Cert renewal interval. Required.
        :paramtype renewal_interval: int
        """
        super().__init__(**kwargs)
        self.issuing_authority = issuing_authority
        self.certificate_authority_configuration = certificate_authority_configuration
        self.leaf_certificate_configuration = leaf_certificate_configuration
        self.renewal_interval = renewal_interval


class CertificateProperties(_serialization.Model):
    """Certificate properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar key_type: Crypto type: RSA or EC. Required. "ECC"
    :vartype key_type: str or ~azure.mgmt.fairfieldgardens.models.SupportedKeyType
    :ivar subject: Certificate subject.
    :vartype subject: str
    :ivar validity_period_in_days: System-assigned validity period.
    :vartype validity_period_in_days: int
    :ivar validity_not_before: Certificate is valid not before this date. Format ISO8601. Generated
     based on on validity period.
    :vartype validity_not_before: ~datetime.datetime
    :ivar validity_not_after: Certificate is valid not after this date. Format ISO8601. Generated
     based on validity period.
    :vartype validity_not_after: ~datetime.datetime
    """

    _validation = {
        "key_type": {"required": True},
        "subject": {"readonly": True},
        "validity_period_in_days": {"readonly": True, "maximum": 366, "minimum": 365},
        "validity_not_before": {"readonly": True},
        "validity_not_after": {"readonly": True},
    }

    _attribute_map = {
        "key_type": {"key": "keyType", "type": "str"},
        "subject": {"key": "subject", "type": "str"},
        "validity_period_in_days": {"key": "validityPeriodInDays", "type": "int"},
        "validity_not_before": {"key": "validityNotBefore", "type": "iso-8601"},
        "validity_not_after": {"key": "validityNotAfter", "type": "iso-8601"},
    }

    def __init__(self, *, key_type: Union[str, "_models.SupportedKeyType"], **kwargs: Any) -> None:
        """
        :keyword key_type: Crypto type: RSA or EC. Required. "ECC"
        :paramtype key_type: str or ~azure.mgmt.fairfieldgardens.models.SupportedKeyType
        """
        super().__init__(**kwargs)
        self.key_type = key_type
        self.subject = None
        self.validity_period_in_days = None
        self.validity_not_before = None
        self.validity_not_after = None


class CertPolicyConfig(_serialization.Model):
    """The configuration for setting up a policy.

    All required parameters must be populated in order to send to Azure.

    :ivar validity_period_in_days: The validity period in days. Required.
    :vartype validity_period_in_days: int
    """

    _validation = {
        "validity_period_in_days": {"required": True},
    }

    _attribute_map = {
        "validity_period_in_days": {"key": "validityPeriodInDays", "type": "int"},
    }

    def __init__(self, *, validity_period_in_days: int, **kwargs: Any) -> None:
        """
        :keyword validity_period_in_days: The validity period in days. Required.
        :paramtype validity_period_in_days: int
        """
        super().__init__(**kwargs)
        self.validity_period_in_days = validity_period_in_days


class DeviceEndpoint(_serialization.Model):
    """The device endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar host_name: Hostname of the Endpoint.
    :vartype host_name: str
    """

    _validation = {
        "host_name": {"readonly": True},
    }

    _attribute_map = {
        "host_name": {"key": "hostName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.host_name = None


class DeviceEndpoints(_serialization.Model):
    """Device endpoints.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar default: The default endpoint.
    :vartype default: ~azure.mgmt.fairfieldgardens.models.DeviceEndpoint
    """

    _validation = {
        "default": {"readonly": True},
    }

    _attribute_map = {
        "default": {"key": "default", "type": "DeviceEndpoint"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.default = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class DeviceProvisioningState(ProxyResource):
    """The provisioning state of a device.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    :ivar registration_id: Unique identifier for the device. Allow alphanumeric and '-', '.', '_',
     ':' only. Last character can only be alphanumeric and '-'.
    :vartype registration_id: str
    :ivar onboarding_status: Onboarding status of the resource this DeviceProvisioningState
     extends. Known values are: "Pending", "Provisioned", and "Failed".
    :vartype onboarding_status: str or ~azure.mgmt.fairfieldgardens.models.OnboardingStatus
    :ivar discovery_enabled: Indicates if the device is enabled for discovery.
    :vartype discovery_enabled: bool
    :ivar provisioning_policy_resource_id: The provisioning policy resource id.
    :vartype provisioning_policy_resource_id: str
    :ivar allocated_endpoints: Array of previously allocated endpoints.
    :vartype allocated_endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocatedEndpoint]
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "registration_id": {"max_length": 128, "pattern": r"^([a-z0-9-._:]{0,127}[a-z0-9-])$"},
        "allocated_endpoints": {"max_items": 1, "min_items": 0},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "registration_id": {"key": "properties.registrationId", "type": "str"},
        "onboarding_status": {"key": "properties.onboardingStatus", "type": "str"},
        "discovery_enabled": {"key": "properties.discoveryEnabled", "type": "bool"},
        "provisioning_policy_resource_id": {"key": "properties.provisioningPolicyResourceId", "type": "str"},
        "allocated_endpoints": {"key": "properties.allocatedEndpoints", "type": "[AllocatedEndpoint]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        registration_id: Optional[str] = None,
        onboarding_status: Optional[Union[str, "_models.OnboardingStatus"]] = None,
        discovery_enabled: bool = False,
        provisioning_policy_resource_id: Optional[str] = None,
        allocated_endpoints: Optional[List["_models.AllocatedEndpoint"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword registration_id: Unique identifier for the device. Allow alphanumeric and '-', '.',
         '_', ':' only. Last character can only be alphanumeric and '-'.
        :paramtype registration_id: str
        :keyword onboarding_status: Onboarding status of the resource this DeviceProvisioningState
         extends. Known values are: "Pending", "Provisioned", and "Failed".
        :paramtype onboarding_status: str or ~azure.mgmt.fairfieldgardens.models.OnboardingStatus
        :keyword discovery_enabled: Indicates if the device is enabled for discovery.
        :paramtype discovery_enabled: bool
        :keyword provisioning_policy_resource_id: The provisioning policy resource id.
        :paramtype provisioning_policy_resource_id: str
        :keyword allocated_endpoints: Array of previously allocated endpoints.
        :paramtype allocated_endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocatedEndpoint]
        """
        super().__init__(**kwargs)
        self.registration_id = registration_id
        self.onboarding_status = onboarding_status
        self.discovery_enabled = discovery_enabled
        self.provisioning_policy_resource_id = provisioning_policy_resource_id
        self.allocated_endpoints = allocated_endpoints
        self.provisioning_state = None


class DeviceProvisioningStateListResult(_serialization.Model):
    """The response of a DeviceProvisioningState list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DeviceProvisioningState items on this page. Required.
    :vartype value: list[~azure.mgmt.fairfieldgardens.models.DeviceProvisioningState]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DeviceProvisioningState]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.DeviceProvisioningState"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The DeviceProvisioningState items on this page. Required.
        :paramtype value: list[~azure.mgmt.fairfieldgardens.models.DeviceProvisioningState]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DeviceProvisioningStateUpdate(_serialization.Model):
    """The type used for update operations of the DeviceProvisioningState.

    :ivar onboarding_status: Onboarding status of the resource this DeviceProvisioningState
     extends. Known values are: "Pending", "Provisioned", and "Failed".
    :vartype onboarding_status: str or ~azure.mgmt.fairfieldgardens.models.OnboardingStatus
    :ivar discovery_enabled: Indicates if the device is enabled for discovery.
    :vartype discovery_enabled: bool
    :ivar provisioning_policy_resource_id: The provisioning policy resource id.
    :vartype provisioning_policy_resource_id: str
    :ivar allocated_endpoints: Array of previously allocated endpoints.
    :vartype allocated_endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocatedEndpoint]
    """

    _validation = {
        "allocated_endpoints": {"max_items": 1, "min_items": 0},
    }

    _attribute_map = {
        "onboarding_status": {"key": "properties.onboardingStatus", "type": "str"},
        "discovery_enabled": {"key": "properties.discoveryEnabled", "type": "bool"},
        "provisioning_policy_resource_id": {"key": "properties.provisioningPolicyResourceId", "type": "str"},
        "allocated_endpoints": {"key": "properties.allocatedEndpoints", "type": "[AllocatedEndpoint]"},
    }

    def __init__(
        self,
        *,
        onboarding_status: Optional[Union[str, "_models.OnboardingStatus"]] = None,
        discovery_enabled: bool = False,
        provisioning_policy_resource_id: Optional[str] = None,
        allocated_endpoints: Optional[List["_models.AllocatedEndpoint"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword onboarding_status: Onboarding status of the resource this DeviceProvisioningState
         extends. Known values are: "Pending", "Provisioned", and "Failed".
        :paramtype onboarding_status: str or ~azure.mgmt.fairfieldgardens.models.OnboardingStatus
        :keyword discovery_enabled: Indicates if the device is enabled for discovery.
        :paramtype discovery_enabled: bool
        :keyword provisioning_policy_resource_id: The provisioning policy resource id.
        :paramtype provisioning_policy_resource_id: str
        :keyword allocated_endpoints: Array of previously allocated endpoints.
        :paramtype allocated_endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocatedEndpoint]
        """
        super().__init__(**kwargs)
        self.onboarding_status = onboarding_status
        self.discovery_enabled = discovery_enabled
        self.provisioning_policy_resource_id = provisioning_policy_resource_id
        self.allocated_endpoints = allocated_endpoints


class ProvisioningPolicyResourceDetails(_serialization.Model):
    """Common further details about the policy resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DeviceRegistryProvisioningPolicyResourceDetails, DiscoveryProvisioningPolicyResourceDetails

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the resource being provisioned. Required. Known values are:
     "Microsoft.DeviceRegistry/devices" and "Microsoft.HybridCompute/machines".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningResourceType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Microsoft.DeviceRegistry/devices": "DeviceRegistryProvisioningPolicyResourceDetails",
            "Microsoft.HybridCompute/machines": "DiscoveryProvisioningPolicyResourceDetails",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class DeviceRegistryProvisioningPolicyResourceDetails(ProvisioningPolicyResourceDetails):
    """Details of the ProvisioningService Device Registry ProvisioningPolicy.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the resource being provisioned. Required. Known values are:
     "Microsoft.DeviceRegistry/devices" and "Microsoft.HybridCompute/machines".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningResourceType
    :ivar operational_identity_info: Identity information.
    :vartype operational_identity_info: ~azure.mgmt.fairfieldgardens.models.IdentityInfo
    :ivar resource_metadata: Resource metadata.
    :vartype resource_metadata: ~azure.mgmt.fairfieldgardens.models.ResourceMetadata
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "operational_identity_info": {"key": "operationalIdentityInfo", "type": "IdentityInfo"},
        "resource_metadata": {"key": "resourceMetadata", "type": "ResourceMetadata"},
    }

    def __init__(
        self,
        *,
        operational_identity_info: Optional["_models.IdentityInfo"] = None,
        resource_metadata: Optional["_models.ResourceMetadata"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operational_identity_info: Identity information.
        :paramtype operational_identity_info: ~azure.mgmt.fairfieldgardens.models.IdentityInfo
        :keyword resource_metadata: Resource metadata.
        :paramtype resource_metadata: ~azure.mgmt.fairfieldgardens.models.ResourceMetadata
        """
        super().__init__(**kwargs)
        self.type: str = "Microsoft.DeviceRegistry/devices"
        self.operational_identity_info = operational_identity_info
        self.resource_metadata = resource_metadata


class DiscoveryBootstrapAuthenticationRule(BootstrapAuthenticationRule):
    """The Discovery-based authentication rule for bootstrapping.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of authentication rule. Required. Known values are: "X509" and
     "Discovery".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: str = "Discovery"


class DiscoveryProvisioningPolicyResourceDetails(ProvisioningPolicyResourceDetails):
    """Details of the ProvisioningService Discovery ProvisioningPolicy.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the resource being provisioned. Required. Known values are:
     "Microsoft.DeviceRegistry/devices" and "Microsoft.HybridCompute/machines".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningResourceType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: str = "Microsoft.HybridCompute/machines"


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.fairfieldgardens.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.fairfieldgardens.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.fairfieldgardens.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.fairfieldgardens.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class EvenlyDistributedAllocationRule(AllocationRule):
    """The allocation rule for evenly distributed allocation type.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the allocation rule. Required.
    :vartype name: str
    :ivar endpoint_type: Type of endpoint. Required. "Microsoft.EventGrid/namespaces"
    :vartype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
    :ivar type: Type of the allocation rule. Required. "EvenlyDistributed"
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.AllocationType
    :ivar endpoints: List of endpoints for evenly distributed allocation type. Required.
    :vartype endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocationEndpoint]
    """

    _validation = {
        "name": {"required": True},
        "endpoint_type": {"required": True},
        "type": {"required": True},
        "endpoints": {"required": True, "max_items": 10, "min_items": 1},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "endpoint_type": {"key": "endpointType", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "endpoints": {"key": "endpoints", "type": "[AllocationEndpoint]"},
    }

    def __init__(
        self,
        *,
        name: str,
        endpoint_type: Union[str, "_models.EndpointType"],
        endpoints: List["_models.AllocationEndpoint"],
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the allocation rule. Required.
        :paramtype name: str
        :keyword endpoint_type: Type of endpoint. Required. "Microsoft.EventGrid/namespaces"
        :paramtype endpoint_type: str or ~azure.mgmt.fairfieldgardens.models.EndpointType
        :keyword endpoints: List of endpoints for evenly distributed allocation type. Required.
        :paramtype endpoints: list[~azure.mgmt.fairfieldgardens.models.AllocationEndpoint]
        """
        super().__init__(name=name, endpoint_type=endpoint_type, **kwargs)
        self.type: str = "EvenlyDistributed"
        self.endpoints = endpoints


class IdentityInfo(_serialization.Model):
    """The information related to device identity.

    All required parameters must be populated in order to send to Azure.

    :ivar certificate_issuance: Certificate issuance settings.
    :vartype certificate_issuance: ~azure.mgmt.fairfieldgardens.models.CertificateIssuanceRule
    :ivar device_template_id: Guid of the device template. Required.
    :vartype device_template_id: str
    :ivar static_group_id: Guid for static AAD group. Required.
    :vartype static_group_id: str
    """

    _validation = {
        "device_template_id": {"required": True},
        "static_group_id": {"required": True},
    }

    _attribute_map = {
        "certificate_issuance": {"key": "certificateIssuance", "type": "CertificateIssuanceRule"},
        "device_template_id": {"key": "deviceTemplateId", "type": "str"},
        "static_group_id": {"key": "staticGroupId", "type": "str"},
    }

    def __init__(
        self,
        *,
        device_template_id: str,
        static_group_id: str,
        certificate_issuance: Optional["_models.CertificateIssuanceRule"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword certificate_issuance: Certificate issuance settings.
        :paramtype certificate_issuance: ~azure.mgmt.fairfieldgardens.models.CertificateIssuanceRule
        :keyword device_template_id: Guid of the device template. Required.
        :paramtype device_template_id: str
        :keyword static_group_id: Guid for static AAD group. Required.
        :paramtype static_group_id: str
        """
        super().__init__(**kwargs)
        self.certificate_issuance = certificate_issuance
        self.device_template_id = device_template_id
        self.static_group_id = static_group_id


class JitRule(_serialization.Model):
    """The rule for Just-in-time connection.

    All required parameters must be populated in order to send to Azure.

    :ivar priority: The priority of the policy. Should be greater than 0. Required.
    :vartype priority: int
    :ivar subscription_id: The ID of the target subscription. Required.
    :vartype subscription_id: str
    :ivar resource_group_name: The case insensitive name of the target resource group. Required.
    :vartype resource_group_name: str
    """

    _validation = {
        "priority": {"required": True},
        "subscription_id": {"required": True, "min_length": 1},
        "resource_group_name": {"required": True, "max_length": 90, "min_length": 1, "pattern": r"^[-\w\._\(\)]+$"},
    }

    _attribute_map = {
        "priority": {"key": "priority", "type": "int"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "resource_group_name": {"key": "resourceGroupName", "type": "str"},
    }

    def __init__(self, *, priority: int, subscription_id: str, resource_group_name: str, **kwargs: Any) -> None:
        """
        :keyword priority: The priority of the policy. Should be greater than 0. Required.
        :paramtype priority: int
        :keyword subscription_id: The ID of the target subscription. Required.
        :paramtype subscription_id: str
        :keyword resource_group_name: The case insensitive name of the target resource group. Required.
        :paramtype resource_group_name: str
        """
        super().__init__(**kwargs)
        self.priority = priority
        self.subscription_id = subscription_id
        self.resource_group_name = resource_group_name


class JitRuleUpdate(_serialization.Model):
    """The rule for Just-in-time connection.

    :ivar priority: The priority of the policy. Should be greater than 0.
    :vartype priority: int
    :ivar subscription_id: The ID of the target subscription.
    :vartype subscription_id: str
    :ivar resource_group_name: The case insensitive name of the target resource group.
    :vartype resource_group_name: str
    """

    _validation = {
        "subscription_id": {"min_length": 1},
        "resource_group_name": {"max_length": 90, "min_length": 1, "pattern": r"^[-\w\._\(\)]+$"},
    }

    _attribute_map = {
        "priority": {"key": "priority", "type": "int"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "resource_group_name": {"key": "resourceGroupName", "type": "str"},
    }

    def __init__(
        self,
        *,
        priority: Optional[int] = None,
        subscription_id: Optional[str] = None,
        resource_group_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword priority: The priority of the policy. Should be greater than 0.
        :paramtype priority: int
        :keyword subscription_id: The ID of the target subscription.
        :paramtype subscription_id: str
        :keyword resource_group_name: The case insensitive name of the target resource group.
        :paramtype resource_group_name: str
        """
        super().__init__(**kwargs)
        self.priority = priority
        self.subscription_id = subscription_id
        self.resource_group_name = resource_group_name


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.fairfieldgardens.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.fairfieldgardens.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.fairfieldgardens.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.fairfieldgardens.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.fairfieldgardens.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class ProvisioningPolicy(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """A provisioning policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar description: Description of the policy.
    :vartype description: str
    :ivar status: The policy status.
    :vartype status: bool
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningState
    :ivar bootstrap_authentication: The bootstrap authentication rule.
    :vartype bootstrap_authentication:
     ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
    :ivar allocations: Allocation rules.
    :vartype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
    :ivar jit: Just-in-time rule to create the device resource.
    :vartype jit: ~azure.mgmt.fairfieldgardens.models.JitRule
    :ivar resource_details: Further details about the policy resource.
    :vartype resource_details:
     ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
        "allocations": {"max_items": 1, "min_items": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "description": {"key": "properties.description", "type": "str"},
        "status": {"key": "properties.status", "type": "bool"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "bootstrap_authentication": {
            "key": "properties.bootstrapAuthentication",
            "type": "BootstrapAuthenticationRule",
        },
        "allocations": {"key": "properties.allocations", "type": "[AllocationRule]"},
        "jit": {"key": "properties.jit", "type": "JitRule"},
        "resource_details": {"key": "properties.resourceDetails", "type": "ProvisioningPolicyResourceDetails"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        status: Optional[bool] = None,
        bootstrap_authentication: Optional["_models.BootstrapAuthenticationRule"] = None,
        allocations: Optional[List["_models.AllocationRule"]] = None,
        jit: Optional["_models.JitRule"] = None,
        resource_details: Optional["_models.ProvisioningPolicyResourceDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword description: Description of the policy.
        :paramtype description: str
        :keyword status: The policy status.
        :paramtype status: bool
        :keyword bootstrap_authentication: The bootstrap authentication rule.
        :paramtype bootstrap_authentication:
         ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
        :keyword allocations: Allocation rules.
        :paramtype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
        :keyword jit: Just-in-time rule to create the device resource.
        :paramtype jit: ~azure.mgmt.fairfieldgardens.models.JitRule
        :keyword resource_details: Further details about the policy resource.
        :paramtype resource_details:
         ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.description = description
        self.status = status
        self.provisioning_state = None
        self.bootstrap_authentication = bootstrap_authentication
        self.allocations = allocations
        self.jit = jit
        self.resource_details = resource_details


class ProvisioningPolicyListResult(_serialization.Model):
    """The response of a ProvisioningPolicy list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The ProvisioningPolicy items on this page. Required.
    :vartype value: list[~azure.mgmt.fairfieldgardens.models.ProvisioningPolicy]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ProvisioningPolicy]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.ProvisioningPolicy"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The ProvisioningPolicy items on this page. Required.
        :paramtype value: list[~azure.mgmt.fairfieldgardens.models.ProvisioningPolicy]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProvisioningPolicyPatchProperties(_serialization.Model):
    """Provisioning policies model for patch.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the policy.
    :vartype description: str
    :ivar status: The policy status.
    :vartype status: bool
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningState
    :ivar bootstrap_authentication: The bootstrap authentication rule.
    :vartype bootstrap_authentication:
     ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
    :ivar allocations: Allocation rules.
    :vartype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
    :ivar jit: Just-in-time rule to create the device resource.
    :vartype jit: ~azure.mgmt.fairfieldgardens.models.JitRuleUpdate
    :ivar resource_details: Further details about the policy resource.
    :vartype resource_details:
     ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "allocations": {"max_items": 1, "min_items": 0},
    }

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "bool"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "bootstrap_authentication": {"key": "bootstrapAuthentication", "type": "BootstrapAuthenticationRule"},
        "allocations": {"key": "allocations", "type": "[AllocationRule]"},
        "jit": {"key": "jit", "type": "JitRuleUpdate"},
        "resource_details": {"key": "resourceDetails", "type": "ProvisioningPolicyResourceDetails"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        status: Optional[bool] = None,
        bootstrap_authentication: Optional["_models.BootstrapAuthenticationRule"] = None,
        allocations: Optional[List["_models.AllocationRule"]] = None,
        jit: Optional["_models.JitRuleUpdate"] = None,
        resource_details: Optional["_models.ProvisioningPolicyResourceDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword description: Description of the policy.
        :paramtype description: str
        :keyword status: The policy status.
        :paramtype status: bool
        :keyword bootstrap_authentication: The bootstrap authentication rule.
        :paramtype bootstrap_authentication:
         ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
        :keyword allocations: Allocation rules.
        :paramtype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
        :keyword jit: Just-in-time rule to create the device resource.
        :paramtype jit: ~azure.mgmt.fairfieldgardens.models.JitRuleUpdate
        :keyword resource_details: Further details about the policy resource.
        :paramtype resource_details:
         ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
        """
        super().__init__(**kwargs)
        self.description = description
        self.status = status
        self.provisioning_state = None
        self.bootstrap_authentication = bootstrap_authentication
        self.allocations = allocations
        self.jit = jit
        self.resource_details = resource_details


class ProvisioningPolicyUpdate(_serialization.Model):
    """The type used for update operations of the ProvisioningPolicy.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar description: Description of the policy.
    :vartype description: str
    :ivar status: The policy status.
    :vartype status: bool
    :ivar bootstrap_authentication: The bootstrap authentication rule.
    :vartype bootstrap_authentication:
     ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
    :ivar allocations: Allocation rules.
    :vartype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
    :ivar jit: Just-in-time rule to create the device resource.
    :vartype jit: ~azure.mgmt.fairfieldgardens.models.JitRuleUpdate
    :ivar resource_details: Further details about the policy resource.
    :vartype resource_details:
     ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
    """

    _validation = {
        "allocations": {"max_items": 1, "min_items": 0},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "description": {"key": "properties.description", "type": "str"},
        "status": {"key": "properties.status", "type": "bool"},
        "bootstrap_authentication": {
            "key": "properties.bootstrapAuthentication",
            "type": "BootstrapAuthenticationRule",
        },
        "allocations": {"key": "properties.allocations", "type": "[AllocationRule]"},
        "jit": {"key": "properties.jit", "type": "JitRuleUpdate"},
        "resource_details": {"key": "properties.resourceDetails", "type": "ProvisioningPolicyResourceDetails"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        status: Optional[bool] = None,
        bootstrap_authentication: Optional["_models.BootstrapAuthenticationRule"] = None,
        allocations: Optional[List["_models.AllocationRule"]] = None,
        jit: Optional["_models.JitRuleUpdate"] = None,
        resource_details: Optional["_models.ProvisioningPolicyResourceDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword description: Description of the policy.
        :paramtype description: str
        :keyword status: The policy status.
        :paramtype status: bool
        :keyword bootstrap_authentication: The bootstrap authentication rule.
        :paramtype bootstrap_authentication:
         ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationRule
        :keyword allocations: Allocation rules.
        :paramtype allocations: list[~azure.mgmt.fairfieldgardens.models.AllocationRule]
        :keyword jit: Just-in-time rule to create the device resource.
        :paramtype jit: ~azure.mgmt.fairfieldgardens.models.JitRuleUpdate
        :keyword resource_details: Further details about the policy resource.
        :paramtype resource_details:
         ~azure.mgmt.fairfieldgardens.models.ProvisioningPolicyResourceDetails
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.status = status
        self.bootstrap_authentication = bootstrap_authentication
        self.allocations = allocations
        self.jit = jit
        self.resource_details = resource_details


class ProvisioningResource(TrackedResource):
    """A provisioning resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fairfieldgardens.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningState
    :ivar device_endpoints: The provisioning service endpoints.
    :vartype device_endpoints: ~azure.mgmt.fairfieldgardens.models.DeviceEndpoints
    :ivar enable_operational_certificates: Selecting 'yes' will enable a Microsoft managed PKI to
     issue certificates. Setting up of the CA and policies for certificate management will be while
     defining the bumblebee provisioning policy.
    :vartype enable_operational_certificates: bool
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
        "device_endpoints": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "device_endpoints": {"key": "properties.deviceEndpoints", "type": "DeviceEndpoints"},
        "enable_operational_certificates": {"key": "properties.enableOperationalCertificates", "type": "bool"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        enable_operational_certificates: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword enable_operational_certificates: Selecting 'yes' will enable a Microsoft managed PKI
         to issue certificates. Setting up of the CA and policies for certificate management will be
         while defining the bumblebee provisioning policy.
        :paramtype enable_operational_certificates: bool
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.provisioning_state = None
        self.device_endpoints = None
        self.enable_operational_certificates = enable_operational_certificates


class ProvisioningResourceListResult(_serialization.Model):
    """The response of a ProvisioningResource list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The ProvisioningResource items on this page. Required.
    :vartype value: list[~azure.mgmt.fairfieldgardens.models.ProvisioningResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ProvisioningResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.ProvisioningResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The ProvisioningResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.fairfieldgardens.models.ProvisioningResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProvisioningResourceUpdate(_serialization.Model):
    """The type used for update operations of the ProvisioningResource.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class ProvisioningRule(_serialization.Model):
    """The provisioning rule.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Type of the resource being provisioned. Required. Known values are:
     "Microsoft.DeviceRegistry/devices" and "Microsoft.HybridCompute/machines".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningResourceType
    :ivar jit: Just-in-time rule to create the device resource.
    :vartype jit: ~azure.mgmt.fairfieldgardens.models.JitRule
    :ivar operational_identity_info: Identity information.
    :vartype operational_identity_info: ~azure.mgmt.fairfieldgardens.models.IdentityInfo
    :ivar resource_metadata: Resource metadata.
    :vartype resource_metadata: str
    """

    _validation = {
        "type": {"required": True},
        "resource_metadata": {"max_length": 200},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "jit": {"key": "jit", "type": "JitRule"},
        "operational_identity_info": {"key": "operationalIdentityInfo", "type": "IdentityInfo"},
        "resource_metadata": {"key": "resourceMetadata", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ProvisioningResourceType"],
        jit: Optional["_models.JitRule"] = None,
        operational_identity_info: Optional["_models.IdentityInfo"] = None,
        resource_metadata: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of the resource being provisioned. Required. Known values are:
         "Microsoft.DeviceRegistry/devices" and "Microsoft.HybridCompute/machines".
        :paramtype type: str or ~azure.mgmt.fairfieldgardens.models.ProvisioningResourceType
        :keyword jit: Just-in-time rule to create the device resource.
        :paramtype jit: ~azure.mgmt.fairfieldgardens.models.JitRule
        :keyword operational_identity_info: Identity information.
        :paramtype operational_identity_info: ~azure.mgmt.fairfieldgardens.models.IdentityInfo
        :keyword resource_metadata: Resource metadata.
        :paramtype resource_metadata: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.jit = jit
        self.operational_identity_info = operational_identity_info
        self.resource_metadata = resource_metadata


class ResourceMetadata(_serialization.Model):
    """Resource metadata.

    :ivar custom_attributes: Custom attributes.
    :vartype custom_attributes: dict[str, any]
    """

    _attribute_map = {
        "custom_attributes": {"key": "customAttributes", "type": "{object}"},
    }

    def __init__(self, *, custom_attributes: Optional[Dict[str, Any]] = None, **kwargs: Any) -> None:
        """
        :keyword custom_attributes: Custom attributes.
        :paramtype custom_attributes: dict[str, any]
        """
        super().__init__(**kwargs)
        self.custom_attributes = custom_attributes


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.fairfieldgardens.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.fairfieldgardens.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.fairfieldgardens.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.fairfieldgardens.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class X509BootstrapAuthenticationRule(BootstrapAuthenticationRule):
    """The x509-based authentication rule for bootstrapping.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The type of authentication rule. Required. Known values are: "X509" and
     "Discovery".
    :vartype type: str or ~azure.mgmt.fairfieldgardens.models.BootstrapAuthenticationType
    :ivar primary_certificate: The primary certificate. B64 x509 cert. Required.
    :vartype primary_certificate: ~azure.mgmt.fairfieldgardens.models.X509Certificate
    :ivar secondary_certificate: The secondary certificate.
    :vartype secondary_certificate: ~azure.mgmt.fairfieldgardens.models.X509Certificate
    """

    _validation = {
        "type": {"required": True},
        "primary_certificate": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "primary_certificate": {"key": "primaryCertificate", "type": "X509Certificate"},
        "secondary_certificate": {"key": "secondaryCertificate", "type": "X509Certificate"},
    }

    def __init__(
        self,
        *,
        primary_certificate: "_models.X509Certificate",
        secondary_certificate: Optional["_models.X509Certificate"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword primary_certificate: The primary certificate. B64 x509 cert. Required.
        :paramtype primary_certificate: ~azure.mgmt.fairfieldgardens.models.X509Certificate
        :keyword secondary_certificate: The secondary certificate.
        :paramtype secondary_certificate: ~azure.mgmt.fairfieldgardens.models.X509Certificate
        """
        super().__init__(**kwargs)
        self.type: str = "X509"
        self.primary_certificate = primary_certificate
        self.secondary_certificate = secondary_certificate


class X509Certificate(_serialization.Model):
    """X509 Certificate.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar certificate: The certificate. Required.
    :vartype certificate: str
    :ivar thumbprint: Thumbprint extracted from the certificate.
    :vartype thumbprint: str
    :ivar expiry_date: Expiry date for the certificate.
    :vartype expiry_date: ~datetime.datetime
    """

    _validation = {
        "certificate": {"required": True},
        "thumbprint": {"readonly": True},
        "expiry_date": {"readonly": True},
    }

    _attribute_map = {
        "certificate": {"key": "certificate", "type": "str"},
        "thumbprint": {"key": "thumbprint", "type": "str"},
        "expiry_date": {"key": "expiryDate", "type": "iso-8601"},
    }

    def __init__(self, *, certificate: str, **kwargs: Any) -> None:
        """
        :keyword certificate: The certificate. Required.
        :paramtype certificate: str
        """
        super().__init__(**kwargs)
        self.certificate = certificate
        self.thumbprint = None
        self.expiry_date = None
