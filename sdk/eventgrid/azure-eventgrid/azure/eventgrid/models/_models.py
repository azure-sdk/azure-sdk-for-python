# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AcsChatEventBaseProperties(_model_base.Model):
    """Schema of common properties of all chat events.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    """

    recipient_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="recipientCommunicationIdentifier"
    )
    """The communication identifier of the target user. Required."""
    transaction_id: str = rest_field(name="transactionId")
    """The transaction id will be used as co-relation vector. Required."""
    thread_id: str = rest_field(name="threadId")
    """The chat thread id. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatEventInThreadBaseProperties(_model_base.Model):
    """Schema of common properties of all thread-level chat events.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    """

    transaction_id: str = rest_field(name="transactionId")
    """The transaction id will be used as co-relation vector. Required."""
    thread_id: str = rest_field(name="threadId")
    """The chat thread id. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageEventBaseProperties(AcsChatEventBaseProperties):
    """Schema of common properties of all chat message events.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    """

    message_id: str = rest_field(name="messageId")
    """The chat message id. Required."""
    sender_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="senderCommunicationIdentifier"
    )
    """The communication identifier of the sender. Required."""
    sender_display_name: str = rest_field(name="senderDisplayName")
    """The display name of the sender. Required."""
    compose_time: datetime.datetime = rest_field(name="composeTime", format="rfc3339")
    """The original compose time of the message. Required."""
    type: str = rest_field()
    """The type of the message. Required."""
    version: int = rest_field()
    """The version of the message. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageDeletedEventData(AcsChatMessageEventBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageDeleted event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar delete_time: The time at which the message was deleted. Required.
    :vartype delete_time: ~datetime.datetime
    """

    delete_time: datetime.datetime = rest_field(name="deleteTime", format="rfc3339")
    """The time at which the message was deleted. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        delete_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageEventInThreadBaseProperties(AcsChatEventInThreadBaseProperties):  # pylint: disable=name-too-long
    """Schema of common properties of all thread-level chat message events.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    """

    message_id: str = rest_field(name="messageId")
    """The chat message id. Required."""
    sender_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="senderCommunicationIdentifier"
    )
    """The communication identifier of the sender. Required."""
    sender_display_name: str = rest_field(name="senderDisplayName")
    """The display name of the sender. Required."""
    compose_time: datetime.datetime = rest_field(name="composeTime", format="rfc3339")
    """The original compose time of the message. Required."""
    type: str = rest_field()
    """The type of the message. Required."""
    version: int = rest_field()
    """The version of the message. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageDeletedInThreadEventData(AcsChatMessageEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageDeletedInThread event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar delete_time: The time at which the message was deleted. Required.
    :vartype delete_time: ~datetime.datetime
    """

    delete_time: datetime.datetime = rest_field(name="deleteTime", format="rfc3339")
    """The time at which the message was deleted. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        delete_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageEditedEventData(AcsChatMessageEventBaseProperties):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageEdited event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar message_body: The body of the chat message. Required.
    :vartype message_body: str
    :ivar metadata: The chat message metadata. Required.
    :vartype metadata: dict[str, str]
    :ivar edit_time: The time at which the message was edited. Required.
    :vartype edit_time: ~datetime.datetime
    """

    message_body: str = rest_field(name="messageBody")
    """The body of the chat message. Required."""
    metadata: Dict[str, str] = rest_field()
    """The chat message metadata. Required."""
    edit_time: datetime.datetime = rest_field(name="editTime", format="rfc3339")
    """The time at which the message was edited. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        message_body: str,
        metadata: Dict[str, str],
        edit_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageEditedInThreadEventData(
    AcsChatMessageEventInThreadBaseProperties
):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageEditedInThread event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar message_body: The body of the chat message. Required.
    :vartype message_body: str
    :ivar metadata: The chat message metadata. Required.
    :vartype metadata: dict[str, str]
    :ivar edit_time: The time at which the message was edited. Required.
    :vartype edit_time: ~datetime.datetime
    """

    message_body: str = rest_field(name="messageBody")
    """The body of the chat message. Required."""
    metadata: Dict[str, str] = rest_field()
    """The chat message metadata. Required."""
    edit_time: datetime.datetime = rest_field(name="editTime", format="rfc3339")
    """The time at which the message was edited. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        message_body: str,
        metadata: Dict[str, str],
        edit_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageReceivedEventData(
    AcsChatMessageEventBaseProperties
):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageReceived event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar message_body: The body of the chat message. Required.
    :vartype message_body: str
    :ivar metadata: The chat message metadata. Required.
    :vartype metadata: dict[str, str]
    """

    message_body: str = rest_field(name="messageBody")
    """The body of the chat message. Required."""
    metadata: Dict[str, str] = rest_field()
    """The chat message metadata. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        message_body: str,
        metadata: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatMessageReceivedInThreadEventData(AcsChatMessageEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatMessageReceivedInThread event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar message_id: The chat message id. Required.
    :vartype message_id: str
    :ivar sender_communication_identifier: The communication identifier of the sender. Required.
    :vartype sender_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar sender_display_name: The display name of the sender. Required.
    :vartype sender_display_name: str
    :ivar compose_time: The original compose time of the message. Required.
    :vartype compose_time: ~datetime.datetime
    :ivar type: The type of the message. Required.
    :vartype type: str
    :ivar version: The version of the message. Required.
    :vartype version: int
    :ivar message_body: The body of the chat message. Required.
    :vartype message_body: str
    :ivar metadata: The chat message metadata. Required.
    :vartype metadata: dict[str, str]
    """

    message_body: str = rest_field(name="messageBody")
    """The body of the chat message. Required."""
    metadata: Dict[str, str] = rest_field()
    """The chat message metadata. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        message_id: str,
        sender_communication_identifier: "_models.CommunicationIdentifierModel",
        sender_display_name: str,
        compose_time: datetime.datetime,
        type: str,
        version: int,
        message_body: str,
        metadata: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatParticipantAddedToThreadEventData(AcsChatEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadParticipantAdded event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar time: The time at which the user was added to the thread. Required.
    :vartype time: ~datetime.datetime
    :ivar added_by_communication_identifier: The communication identifier of the user who added the
     user. Required.
    :vartype added_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar participant_added: The details of the user who was added. Required.
    :vartype participant_added: ~azure.eventgrid.models.AcsChatThreadParticipantProperties
    :ivar version: The version of the thread. Required.
    :vartype version: int
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the user was added to the thread. Required."""
    added_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="addedByCommunicationIdentifier"
    )
    """The communication identifier of the user who added the user. Required."""
    participant_added: "_models.AcsChatThreadParticipantProperties" = rest_field(name="participantAdded")
    """The details of the user who was added. Required."""
    version: int = rest_field()
    """The version of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        time: datetime.datetime,
        added_by_communication_identifier: "_models.CommunicationIdentifierModel",
        participant_added: "_models.AcsChatThreadParticipantProperties",
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadEventBaseProperties(AcsChatEventBaseProperties):
    """Schema of common properties of all chat thread events.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    """

    create_time: datetime.datetime = rest_field(name="createTime", format="rfc3339")
    """The original creation time of the thread. Required."""
    version: int = rest_field()
    """The version of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatParticipantAddedToThreadWithUserEventData(
    AcsChatThreadEventBaseProperties
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatParticipantAddedToThreadWithUser event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar time: The time at which the user was added to the thread. Required.
    :vartype time: ~datetime.datetime
    :ivar added_by_communication_identifier: The communication identifier of the user who added the
     user. Required.
    :vartype added_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar participant_added: The details of the user who was added. Required.
    :vartype participant_added: ~azure.eventgrid.models.AcsChatThreadParticipantProperties
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the user was added to the thread. Required."""
    added_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="addedByCommunicationIdentifier"
    )
    """The communication identifier of the user who added the user. Required."""
    participant_added: "_models.AcsChatThreadParticipantProperties" = rest_field(name="participantAdded")
    """The details of the user who was added. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        time: datetime.datetime,
        added_by_communication_identifier: "_models.CommunicationIdentifierModel",
        participant_added: "_models.AcsChatThreadParticipantProperties",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatParticipantRemovedFromThreadEventData(AcsChatEventInThreadBaseProperties):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadParticipantRemoved event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar time: The time at which the user was removed to the thread. Required.
    :vartype time: ~datetime.datetime
    :ivar removed_by_communication_identifier: The communication identifier of the user who removed
     the user. Required.
    :vartype removed_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar participant_removed: The details of the user who was removed. Required.
    :vartype participant_removed: ~azure.eventgrid.models.AcsChatThreadParticipantProperties
    :ivar version: The version of the thread. Required.
    :vartype version: int
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the user was removed to the thread. Required."""
    removed_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="removedByCommunicationIdentifier"
    )
    """The communication identifier of the user who removed the user. Required."""
    participant_removed: "_models.AcsChatThreadParticipantProperties" = rest_field(name="participantRemoved")
    """The details of the user who was removed. Required."""
    version: int = rest_field()
    """The version of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        time: datetime.datetime,
        removed_by_communication_identifier: "_models.CommunicationIdentifierModel",
        participant_removed: "_models.AcsChatThreadParticipantProperties",
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatParticipantRemovedFromThreadWithUserEventData(
    AcsChatThreadEventBaseProperties
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar time: The time at which the user was removed to the thread. Required.
    :vartype time: ~datetime.datetime
    :ivar removed_by_communication_identifier: The communication identifier of the user who removed
     the user. Required.
    :vartype removed_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar participant_removed: The details of the user who was removed. Required.
    :vartype participant_removed: ~azure.eventgrid.models.AcsChatThreadParticipantProperties
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the user was removed to the thread. Required."""
    removed_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="removedByCommunicationIdentifier"
    )
    """The communication identifier of the user who removed the user. Required."""
    participant_removed: "_models.AcsChatThreadParticipantProperties" = rest_field(name="participantRemoved")
    """The details of the user who was removed. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        time: datetime.datetime,
        removed_by_communication_identifier: "_models.CommunicationIdentifierModel",
        participant_removed: "_models.AcsChatThreadParticipantProperties",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadEventInThreadBaseProperties(AcsChatEventInThreadBaseProperties):
    """Schema of common properties of all chat thread events.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    """

    create_time: datetime.datetime = rest_field(name="createTime", format="rfc3339")
    """The original creation time of the thread. Required."""
    version: int = rest_field()
    """The version of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadCreatedEventData(AcsChatThreadEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadCreated event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar created_by_communication_identifier: The communication identifier of the user who created
     the thread. Required.
    :vartype created_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar properties: The thread properties. Required.
    :vartype properties: dict[str, any]
    :ivar metadata: The thread metadata. Required.
    :vartype metadata: dict[str, str]
    :ivar participants: The list of properties of participants who are part of the thread.
     Required.
    :vartype participants: list[~azure.eventgrid.models.AcsChatThreadParticipantProperties]
    """

    created_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="createdByCommunicationIdentifier"
    )
    """The communication identifier of the user who created the thread. Required."""
    properties: Dict[str, Any] = rest_field()
    """The thread properties. Required."""
    metadata: Dict[str, str] = rest_field()
    """The thread metadata. Required."""
    participants: List["_models.AcsChatThreadParticipantProperties"] = rest_field()
    """The list of properties of participants who are part of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        created_by_communication_identifier: "_models.CommunicationIdentifierModel",
        properties: Dict[str, Any],
        metadata: Dict[str, str],
        participants: List["_models.AcsChatThreadParticipantProperties"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadCreatedWithUserEventData(AcsChatThreadEventBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadCreatedWithUser event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar created_by_communication_identifier: The communication identifier of the user who created
     the thread. Required.
    :vartype created_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar properties: The thread properties. Required.
    :vartype properties: dict[str, any]
    :ivar metadata: The thread metadata. Required.
    :vartype metadata: dict[str, str]
    :ivar participants: The list of properties of participants who are part of the thread.
     Required.
    :vartype participants: list[~azure.eventgrid.models.AcsChatThreadParticipantProperties]
    """

    created_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="createdByCommunicationIdentifier"
    )
    """The communication identifier of the user who created the thread. Required."""
    properties: Dict[str, Any] = rest_field()
    """The thread properties. Required."""
    metadata: Dict[str, str] = rest_field()
    """The thread metadata. Required."""
    participants: List["_models.AcsChatThreadParticipantProperties"] = rest_field()
    """The list of properties of participants who are part of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        created_by_communication_identifier: "_models.CommunicationIdentifierModel",
        properties: Dict[str, Any],
        metadata: Dict[str, str],
        participants: List["_models.AcsChatThreadParticipantProperties"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadDeletedEventData(AcsChatThreadEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadDeleted event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar deleted_by_communication_identifier: The communication identifier of the user who deleted
     the thread. Required.
    :vartype deleted_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar delete_time: The deletion time of the thread. Required.
    :vartype delete_time: ~datetime.datetime
    """

    deleted_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="deletedByCommunicationIdentifier"
    )
    """The communication identifier of the user who deleted the thread. Required."""
    delete_time: datetime.datetime = rest_field(name="deleteTime", format="rfc3339")
    """The deletion time of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        deleted_by_communication_identifier: "_models.CommunicationIdentifierModel",
        delete_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadParticipantProperties(_model_base.Model):
    """Schema of the chat thread participant.


    :ivar display_name: The name of the user. Required.
    :vartype display_name: str
    :ivar participant_communication_identifier: The communication identifier of the user. Required.
    :vartype participant_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar metadata: The metadata of the user. Required.
    :vartype metadata: dict[str, str]
    """

    display_name: str = rest_field(name="displayName")
    """The name of the user. Required."""
    participant_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="participantCommunicationIdentifier"
    )
    """The communication identifier of the user. Required."""
    metadata: Dict[str, str] = rest_field()
    """The metadata of the user. Required."""

    @overload
    def __init__(
        self,
        *,
        display_name: str,
        participant_communication_identifier: "_models.CommunicationIdentifierModel",
        metadata: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadPropertiesUpdatedEventData(AcsChatThreadEventInThreadBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadPropertiesUpdated event.


    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar edited_by_communication_identifier: The communication identifier of the user who updated
     the thread properties. Required.
    :vartype edited_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar edit_time: The time at which the properties of the thread were updated. Required.
    :vartype edit_time: ~datetime.datetime
    :ivar properties: The updated thread properties. Required.
    :vartype properties: dict[str, any]
    :ivar metadata: The thread metadata. Required.
    :vartype metadata: dict[str, str]
    """

    edited_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="editedByCommunicationIdentifier"
    )
    """The communication identifier of the user who updated the thread properties. Required."""
    edit_time: datetime.datetime = rest_field(name="editTime", format="rfc3339")
    """The time at which the properties of the thread were updated. Required."""
    properties: Dict[str, Any] = rest_field()
    """The updated thread properties. Required."""
    metadata: Dict[str, str] = rest_field()
    """The thread metadata. Required."""

    @overload
    def __init__(
        self,
        *,
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        edited_by_communication_identifier: "_models.CommunicationIdentifierModel",
        edit_time: datetime.datetime,
        properties: Dict[str, Any],
        metadata: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadPropertiesUpdatedPerUserEventData(AcsChatThreadEventBaseProperties):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar edited_by_communication_identifier: The communication identifier of the user who updated
     the thread properties. Required.
    :vartype edited_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar edit_time: The time at which the properties of the thread were updated. Required.
    :vartype edit_time: ~datetime.datetime
    :ivar metadata: The thread metadata. Required.
    :vartype metadata: dict[str, str]
    :ivar properties: The updated thread properties. Required.
    :vartype properties: dict[str, any]
    """

    edited_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="editedByCommunicationIdentifier"
    )
    """The communication identifier of the user who updated the thread properties. Required."""
    edit_time: datetime.datetime = rest_field(name="editTime", format="rfc3339")
    """The time at which the properties of the thread were updated. Required."""
    metadata: Dict[str, str] = rest_field()
    """The thread metadata. Required."""
    properties: Dict[str, Any] = rest_field()
    """The updated thread properties. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        edited_by_communication_identifier: "_models.CommunicationIdentifierModel",
        edit_time: datetime.datetime,
        metadata: Dict[str, str],
        properties: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsChatThreadWithUserDeletedEventData(AcsChatThreadEventBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.ChatThreadWithUserDeleted event.


    :ivar recipient_communication_identifier: The communication identifier of the target user.
     Required.
    :vartype recipient_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar transaction_id: The transaction id will be used as co-relation vector. Required.
    :vartype transaction_id: str
    :ivar thread_id: The chat thread id. Required.
    :vartype thread_id: str
    :ivar create_time: The original creation time of the thread. Required.
    :vartype create_time: ~datetime.datetime
    :ivar version: The version of the thread. Required.
    :vartype version: int
    :ivar deleted_by_communication_identifier: The communication identifier of the user who deleted
     the thread. Required.
    :vartype deleted_by_communication_identifier:
     ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar delete_time: The deletion time of the thread. Required.
    :vartype delete_time: ~datetime.datetime
    """

    deleted_by_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="deletedByCommunicationIdentifier"
    )
    """The communication identifier of the user who deleted the thread. Required."""
    delete_time: datetime.datetime = rest_field(name="deleteTime", format="rfc3339")
    """The deletion time of the thread. Required."""

    @overload
    def __init__(
        self,
        *,
        recipient_communication_identifier: "_models.CommunicationIdentifierModel",
        transaction_id: str,
        thread_id: str,
        create_time: datetime.datetime,
        version: int,
        deleted_by_communication_identifier: "_models.CommunicationIdentifierModel",
        delete_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsEmailDeliveryReportReceivedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.EmailDeliveryReportReceived event.


    :ivar sender: The Sender Email Address. Required.
    :vartype sender: str
    :ivar recipient: The recipient Email Address. Required.
    :vartype recipient: str
    :ivar message_id: The Id of the email been sent. Required.
    :vartype message_id: str
    :ivar status: The status of the email. Any value other than Delivered is considered failed.
     Required. Known values are: "Bounced", "Delivered", "Failed", "FilteredSpam", "Quarantined",
     and "Suppressed".
    :vartype status: str or ~azure.eventgrid.models.AcsEmailDeliveryReportStatus
    :ivar delivery_status_details: Detailed information about the status if any. Required.
    :vartype delivery_status_details: ~azure.eventgrid.models.AcsEmailDeliveryReportStatusDetails
    :ivar delivery_attempt_timestamp: The time at which the email delivery report received
     timestamp. Required.
    :vartype delivery_attempt_timestamp: ~datetime.datetime
    """

    sender: str = rest_field()
    """The Sender Email Address. Required."""
    recipient: str = rest_field()
    """The recipient Email Address. Required."""
    message_id: str = rest_field(name="messageId")
    """The Id of the email been sent. Required."""
    status: Union[str, "_models.AcsEmailDeliveryReportStatus"] = rest_field()
    """The status of the email. Any value other than Delivered is considered failed. Required. Known
     values are: \"Bounced\", \"Delivered\", \"Failed\", \"FilteredSpam\", \"Quarantined\", and
     \"Suppressed\"."""
    delivery_status_details: "_models.AcsEmailDeliveryReportStatusDetails" = rest_field(name="deliveryStatusDetails")
    """Detailed information about the status if any. Required."""
    delivery_attempt_timestamp: datetime.datetime = rest_field(name="deliveryAttemptTimestamp", format="rfc3339")
    """The time at which the email delivery report received timestamp. Required."""

    @overload
    def __init__(
        self,
        *,
        sender: str,
        recipient: str,
        message_id: str,
        status: Union[str, "_models.AcsEmailDeliveryReportStatus"],
        delivery_status_details: "_models.AcsEmailDeliveryReportStatusDetails",
        delivery_attempt_timestamp: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsEmailDeliveryReportStatusDetails(_model_base.Model):
    """Detailed information about the status if any.


    :ivar status_message: Detailed status message. Required.
    :vartype status_message: str
    """

    status_message: str = rest_field(name="statusMessage")
    """Detailed status message. Required."""

    @overload
    def __init__(
        self,
        *,
        status_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsEmailEngagementTrackingReportReceivedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.EmailEngagementTrackingReportReceived event.


    :ivar sender: The Sender Email Address. Required.
    :vartype sender: str
    :ivar recipient: The Recipient Email Address. Required.
    :vartype recipient: str
    :ivar message_id: The Id of the email that has been sent. Required.
    :vartype message_id: str
    :ivar user_action_timestamp: The time at which the user interacted with the email. Required.
    :vartype user_action_timestamp: ~datetime.datetime
    :ivar engagement_context: The context of the type of engagement user had with email. Required.
    :vartype engagement_context: str
    :ivar user_agent: The user agent interacting with the email. Required.
    :vartype user_agent: str
    :ivar engagement_type: The type of engagement user have with email. Required. Known values are:
     "view" and "click".
    :vartype engagement_type: str or ~azure.eventgrid.models.AcsUserEngagement
    """

    sender: str = rest_field()
    """The Sender Email Address. Required."""
    recipient: str = rest_field()
    """The Recipient Email Address. Required."""
    message_id: str = rest_field(name="messageId")
    """The Id of the email that has been sent. Required."""
    user_action_timestamp: datetime.datetime = rest_field(name="userActionTimestamp", format="rfc3339")
    """The time at which the user interacted with the email. Required."""
    engagement_context: str = rest_field(name="engagementContext")
    """The context of the type of engagement user had with email. Required."""
    user_agent: str = rest_field(name="userAgent")
    """The user agent interacting with the email. Required."""
    engagement_type: Union[str, "_models.AcsUserEngagement"] = rest_field(name="engagementType")
    """The type of engagement user have with email. Required. Known values are: \"view\" and
     \"click\"."""

    @overload
    def __init__(
        self,
        *,
        sender: str,
        recipient: str,
        message_id: str,
        user_action_timestamp: datetime.datetime,
        engagement_context: str,
        user_agent: str,
        engagement_type: Union[str, "_models.AcsUserEngagement"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsIncomingCallCustomContext(_model_base.Model):
    """Custom Context of Incoming Call.


    :ivar sip_headers: Sip Headers for incoming call. Required.
    :vartype sip_headers: dict[str, str]
    :ivar voip_headers: Voip Headers for incoming call. Required.
    :vartype voip_headers: dict[str, str]
    """

    sip_headers: Dict[str, str] = rest_field(name="sipHeaders")
    """Sip Headers for incoming call. Required."""
    voip_headers: Dict[str, str] = rest_field(name="voipHeaders")
    """Voip Headers for incoming call. Required."""

    @overload
    def __init__(
        self,
        *,
        sip_headers: Dict[str, str],
        voip_headers: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsIncomingCallEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an Microsoft.Communication.IncomingCall
    event.


    :ivar to: The communication identifier of the target user. Required.
    :vartype to: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar from_property: The communication identifier of the user who initiated the call. Required.
    :vartype from_property: ~azure.eventgrid.models.CommunicationIdentifierModel
    :ivar server_call_id: The Id of the server call. Required.
    :vartype server_call_id: str
    :ivar caller_display_name: Display name of caller. Required.
    :vartype caller_display_name: str
    :ivar custom_context: Custom Context of Incoming Call. Required.
    :vartype custom_context: ~azure.eventgrid.models.AcsIncomingCallCustomContext
    :ivar incoming_call_context: Signed incoming call context. Required.
    :vartype incoming_call_context: str
    :ivar correlation_id: CorrelationId (CallId). Required.
    :vartype correlation_id: str
    """

    to: "_models.CommunicationIdentifierModel" = rest_field()
    """The communication identifier of the target user. Required."""
    from_property: "_models.CommunicationIdentifierModel" = rest_field(name="from")
    """The communication identifier of the user who initiated the call. Required."""
    server_call_id: str = rest_field(name="serverCallId")
    """The Id of the server call. Required."""
    caller_display_name: str = rest_field(name="callerDisplayName")
    """Display name of caller. Required."""
    custom_context: "_models.AcsIncomingCallCustomContext" = rest_field(name="customContext")
    """Custom Context of Incoming Call. Required."""
    incoming_call_context: str = rest_field(name="incomingCallContext")
    """Signed incoming call context. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """CorrelationId (CallId). Required."""

    @overload
    def __init__(
        self,
        *,
        to: "_models.CommunicationIdentifierModel",
        from_property: "_models.CommunicationIdentifierModel",
        server_call_id: str,
        caller_display_name: str,
        custom_context: "_models.AcsIncomingCallCustomContext",
        incoming_call_context: str,
        correlation_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageButtonContent(_model_base.Model):
    """Message Button Content.


    :ivar text: The Text of the button. Required.
    :vartype text: str
    :ivar payload: The Payload of the button which was clicked by the user, setup by the business.
     Required.
    :vartype payload: str
    """

    text: str = rest_field()
    """The Text of the button. Required."""
    payload: str = rest_field()
    """The Payload of the button which was clicked by the user, setup by the business. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        payload: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageChannelEventError(_model_base.Model):
    """Message Channel Event Error.


    :ivar channel_code: The channel error code. Required.
    :vartype channel_code: str
    :ivar channel_message: The channel error message. Required.
    :vartype channel_message: str
    """

    channel_code: str = rest_field(name="channelCode")
    """The channel error code. Required."""
    channel_message: str = rest_field(name="channelMessage")
    """The channel error message. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_code: str,
        channel_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageContext(_model_base.Model):
    """Message Context.


    :ivar from_property: The WhatsApp ID for the customer who replied to an inbound message.
     Required.
    :vartype from_property: str
    :ivar id: The message ID for the sent message for an inbound reply. Required.
    :vartype id: str
    """

    from_property: str = rest_field(name="from")
    """The WhatsApp ID for the customer who replied to an inbound message. Required."""
    id: str = rest_field()
    """The message ID for the sent message for an inbound reply. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        id: str,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageEventData(_model_base.Model):
    """Schema of common properties of all chat thread events.


    :ivar from_property: The message sender. Required.
    :vartype from_property: str
    :ivar to: The message recipient. Required.
    :vartype to: str
    :ivar received_time_stamp: The time message was received. Required.
    :vartype received_time_stamp: ~datetime.datetime
    :ivar error: The channel event error. Required.
    :vartype error: ~azure.eventgrid.models.AcsMessageChannelEventError
    """

    from_property: str = rest_field(name="from")
    """The message sender. Required."""
    to: str = rest_field()
    """The message recipient. Required."""
    received_time_stamp: datetime.datetime = rest_field(name="receivedTimeStamp", format="rfc3339")
    """The time message was received. Required."""
    error: "_models.AcsMessageChannelEventError" = rest_field()
    """The channel event error. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
        received_time_stamp: datetime.datetime,
        error: "_models.AcsMessageChannelEventError",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageDeliveryStatusUpdatedEventData(AcsMessageEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.AdvancedMessageDeliveryStatusUpdated event.


    :ivar from_property: The message sender. Required.
    :vartype from_property: str
    :ivar to: The message recipient. Required.
    :vartype to: str
    :ivar received_time_stamp: The time message was received. Required.
    :vartype received_time_stamp: ~datetime.datetime
    :ivar error: The channel event error. Required.
    :vartype error: ~azure.eventgrid.models.AcsMessageChannelEventError
    :ivar message_id: The message id. Required.
    :vartype message_id: str
    :ivar status: The updated message status. Required. Known values are: "read", "delivered",
     "failed", "sent", "warning", and "unknown".
    :vartype status: str or ~azure.eventgrid.models.AcsMessageDeliveryStatus
    :ivar channel_type: The updated message channel type. Required. "whatsapp"
    :vartype channel_type: str or ~azure.eventgrid.models.AcsMessageChannelKind
    """

    message_id: str = rest_field(name="messageId")
    """The message id. Required."""
    status: Union[str, "_models.AcsMessageDeliveryStatus"] = rest_field()
    """The updated message status. Required. Known values are: \"read\", \"delivered\", \"failed\",
     \"sent\", \"warning\", and \"unknown\"."""
    channel_type: Union[str, "_models.AcsMessageChannelKind"] = rest_field(name="channelType")
    """The updated message channel type. Required. \"whatsapp\""""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
        received_time_stamp: datetime.datetime,
        error: "_models.AcsMessageChannelEventError",
        message_id: str,
        status: Union[str, "_models.AcsMessageDeliveryStatus"],
        channel_type: Union[str, "_models.AcsMessageChannelKind"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageInteractiveButtonReplyContent(_model_base.Model):
    """Message Interactive button reply content for a user to business message.


    :ivar id: The ID of the button. Required.
    :vartype id: str
    :ivar title: The title of the button. Required.
    :vartype title: str
    """

    id: str = rest_field()
    """The ID of the button. Required."""
    title: str = rest_field()
    """The title of the button. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageInteractiveContent(_model_base.Model):
    """Message Interactive Content.


    :ivar type: The Message interactive reply type. Required. Known values are: "buttonReply",
     "listReply", and "unknown".
    :vartype type: str or ~azure.eventgrid.models.AcsInteractiveReplyKind
    :ivar button_reply: The Message Sent when a customer clicks a button. Required.
    :vartype button_reply: ~azure.eventgrid.models.AcsMessageInteractiveButtonReplyContent
    :ivar list_reply: The Message Sent when a customer selects an item from a list. Required.
    :vartype list_reply: ~azure.eventgrid.models.AcsMessageInteractiveListReplyContent
    """

    type: Union[str, "_models.AcsInteractiveReplyKind"] = rest_field()
    """The Message interactive reply type. Required. Known values are: \"buttonReply\", \"listReply\",
     and \"unknown\"."""
    button_reply: "_models.AcsMessageInteractiveButtonReplyContent" = rest_field(name="buttonReply")
    """The Message Sent when a customer clicks a button. Required."""
    list_reply: "_models.AcsMessageInteractiveListReplyContent" = rest_field(name="listReply")
    """The Message Sent when a customer selects an item from a list. Required."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.AcsInteractiveReplyKind"],
        button_reply: "_models.AcsMessageInteractiveButtonReplyContent",
        list_reply: "_models.AcsMessageInteractiveListReplyContent",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageInteractiveListReplyContent(_model_base.Model):
    """Message Interactive list reply content for a user to business message.


    :ivar id: The ID of the selected list item. Required.
    :vartype id: str
    :ivar title: The title of the selected list item. Required.
    :vartype title: str
    :ivar description: The description of the selected row. Required.
    :vartype description: str
    """

    id: str = rest_field()
    """The ID of the selected list item. Required."""
    title: str = rest_field()
    """The title of the selected list item. Required."""
    description: str = rest_field()
    """The description of the selected row. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
        description: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageMediaContent(_model_base.Model):
    """Message Media Content.


    :ivar mime_type: The MIME type of the file this media represents. Required.
    :vartype mime_type: str
    :ivar id: The media identifier. Required.
    :vartype id: str
    :ivar file_name: The filename of the underlying media file as specified when uploaded.
     Required.
    :vartype file_name: str
    :ivar caption: The caption for the media object, if supported and provided. Required.
    :vartype caption: str
    """

    mime_type: str = rest_field(name="mimeType")
    """The MIME type of the file this media represents. Required."""
    id: str = rest_field()
    """The media identifier. Required."""
    file_name: str = rest_field(name="fileName")
    """The filename of the underlying media file as specified when uploaded. Required."""
    caption: str = rest_field()
    """The caption for the media object, if supported and provided. Required."""

    @overload
    def __init__(
        self,
        *,
        mime_type: str,
        id: str,  # pylint: disable=redefined-builtin
        file_name: str,
        caption: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsMessageReceivedEventData(AcsMessageEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.AdvancedMessageReceived event.


    :ivar from_property: The message sender. Required.
    :vartype from_property: str
    :ivar to: The message recipient. Required.
    :vartype to: str
    :ivar received_time_stamp: The time message was received. Required.
    :vartype received_time_stamp: ~datetime.datetime
    :ivar error: The channel event error. Required.
    :vartype error: ~azure.eventgrid.models.AcsMessageChannelEventError
    :ivar content: The message content. Required.
    :vartype content: str
    :ivar channel_type: The message channel type. Required. "whatsapp"
    :vartype channel_type: str or ~azure.eventgrid.models.AcsMessageChannelKind
    :ivar media: The received message media content. Required.
    :vartype media: ~azure.eventgrid.models.AcsMessageMediaContent
    :ivar context: The received message context. Required.
    :vartype context: ~azure.eventgrid.models.AcsMessageContext
    :ivar button: The received message button content. Required.
    :vartype button: ~azure.eventgrid.models.AcsMessageButtonContent
    :ivar interactive: The received message interactive content. Required.
    :vartype interactive: ~azure.eventgrid.models.AcsMessageInteractiveContent
    """

    content: str = rest_field()
    """The message content. Required."""
    channel_type: Union[str, "_models.AcsMessageChannelKind"] = rest_field(name="channelType")
    """The message channel type. Required. \"whatsapp\""""
    media: "_models.AcsMessageMediaContent" = rest_field()
    """The received message media content. Required."""
    context: "_models.AcsMessageContext" = rest_field()
    """The received message context. Required."""
    button: "_models.AcsMessageButtonContent" = rest_field()
    """The received message button content. Required."""
    interactive: "_models.AcsMessageInteractiveContent" = rest_field()
    """The received message interactive content. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: str,
        to: str,
        received_time_stamp: datetime.datetime,
        error: "_models.AcsMessageChannelEventError",
        content: str,
        channel_type: Union[str, "_models.AcsMessageChannelKind"],
        media: "_models.AcsMessageMediaContent",
        context: "_models.AcsMessageContext",
        button: "_models.AcsMessageButtonContent",
        interactive: "_models.AcsMessageInteractiveContent",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRecordingChunkInfoProperties(_model_base.Model):
    """Schema for all properties of  Recording Chunk Information.


    :ivar document_id: The documentId of the recording chunk. Required.
    :vartype document_id: str
    :ivar index: The index of the recording chunk. Required.
    :vartype index: int
    :ivar end_reason: The reason for ending the recording chunk. Required.
    :vartype end_reason: str
    :ivar metadata_location: The location of the metadata for this chunk. Required.
    :vartype metadata_location: str
    :ivar content_location: The location of the content for this chunk. Required.
    :vartype content_location: str
    :ivar delete_location: The location to delete all chunk storage. Required.
    :vartype delete_location: str
    """

    document_id: str = rest_field(name="documentId")
    """The documentId of the recording chunk. Required."""
    index: int = rest_field()
    """The index of the recording chunk. Required."""
    end_reason: str = rest_field(name="endReason")
    """The reason for ending the recording chunk. Required."""
    metadata_location: str = rest_field(name="metadataLocation")
    """The location of the metadata for this chunk. Required."""
    content_location: str = rest_field(name="contentLocation")
    """The location of the content for this chunk. Required."""
    delete_location: str = rest_field(name="deleteLocation")
    """The location to delete all chunk storage. Required."""

    @overload
    def __init__(
        self,
        *,
        document_id: str,
        index: int,
        end_reason: str,
        metadata_location: str,
        content_location: str,
        delete_location: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRecordingFileStatusUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RecordingFileStatusUpdated event.


    :ivar recording_storage_info: The details of recording storage information. Required.
    :vartype recording_storage_info: ~azure.eventgrid.models.AcsRecordingStorageInfoProperties
    :ivar recording_start_time: The time at which the recording started. Required.
    :vartype recording_start_time: ~datetime.datetime
    :ivar recording_duration_ms: The recording duration in milliseconds. Required.
    :vartype recording_duration_ms: int
    :ivar recording_content_type: The recording content type- AudioVideo, or Audio. Required. Known
     values are: "AudioVideo" and "Audio".
    :vartype recording_content_type: str or ~azure.eventgrid.models.RecordingContentType
    :ivar recording_channel_type: The recording  channel type - Mixed, Unmixed. Required. Known
     values are: "Mixed" and "Unmixed".
    :vartype recording_channel_type: str or ~azure.eventgrid.models.RecordingChannelType
    :ivar recording_format_type: The recording format type - Mp4, Mp3, Wav. Required. Known values
     are: "Wav", "Mp3", and "Mp4".
    :vartype recording_format_type: str or ~azure.eventgrid.models.RecordingFormatType
    :ivar session_end_reason: The reason for ending recording session. Required.
    :vartype session_end_reason: str
    """

    recording_storage_info: "_models.AcsRecordingStorageInfoProperties" = rest_field(name="recordingStorageInfo")
    """The details of recording storage information. Required."""
    recording_start_time: datetime.datetime = rest_field(name="recordingStartTime", format="rfc3339")
    """The time at which the recording started. Required."""
    recording_duration_ms: int = rest_field(name="recordingDurationMs")
    """The recording duration in milliseconds. Required."""
    recording_content_type: Union[str, "_models.RecordingContentType"] = rest_field(name="recordingContentType")
    """The recording content type- AudioVideo, or Audio. Required. Known values are: \"AudioVideo\"
     and \"Audio\"."""
    recording_channel_type: Union[str, "_models.RecordingChannelType"] = rest_field(name="recordingChannelType")
    """The recording  channel type - Mixed, Unmixed. Required. Known values are: \"Mixed\" and
     \"Unmixed\"."""
    recording_format_type: Union[str, "_models.RecordingFormatType"] = rest_field(name="recordingFormatType")
    """The recording format type - Mp4, Mp3, Wav. Required. Known values are: \"Wav\", \"Mp3\", and
     \"Mp4\"."""
    session_end_reason: str = rest_field(name="sessionEndReason")
    """The reason for ending recording session. Required."""

    @overload
    def __init__(
        self,
        *,
        recording_storage_info: "_models.AcsRecordingStorageInfoProperties",
        recording_start_time: datetime.datetime,
        recording_duration_ms: int,
        recording_content_type: Union[str, "_models.RecordingContentType"],
        recording_channel_type: Union[str, "_models.RecordingChannelType"],
        recording_format_type: Union[str, "_models.RecordingFormatType"],
        session_end_reason: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRecordingStorageInfoProperties(_model_base.Model):
    """Schema for all properties of Recording Storage Information.


    :ivar recording_chunks: List of details of recording chunks information. Required.
    :vartype recording_chunks: list[~azure.eventgrid.models.AcsRecordingChunkInfoProperties]
    """

    recording_chunks: List["_models.AcsRecordingChunkInfoProperties"] = rest_field(name="recordingChunks")
    """List of details of recording chunks information. Required."""

    @overload
    def __init__(
        self,
        *,
        recording_chunks: List["_models.AcsRecordingChunkInfoProperties"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterChannelConfiguration(_model_base.Model):
    """Router Channel Configuration.


    :ivar channel_id: Channel ID for Router Job. Required.
    :vartype channel_id: str
    :ivar capacity_cost_per_job: Capacity Cost Per Job for Router Job. Required.
    :vartype capacity_cost_per_job: int
    :ivar max_number_of_jobs: Max Number of Jobs for Router Job. Required.
    :vartype max_number_of_jobs: int
    """

    channel_id: str = rest_field(name="channelId")
    """Channel ID for Router Job. Required."""
    capacity_cost_per_job: int = rest_field(name="capacityCostPerJob")
    """Capacity Cost Per Job for Router Job. Required."""
    max_number_of_jobs: int = rest_field(name="maxNumberOfJobs")
    """Max Number of Jobs for Router Job. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_id: str,
        capacity_cost_per_job: int,
        max_number_of_jobs: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterCommunicationError(_model_base.Model):
    """Router Communication Error.


    :ivar code: Router Communication Error Code. Required.
    :vartype code: str
    :ivar message: Router Communication Error Message. Required.
    :vartype message: str
    :ivar target: Router Communication Error Target. Required.
    :vartype target: str
    :ivar innererror: Router Communication Inner Error. Required.
    :vartype innererror: ~azure.eventgrid.models.AcsRouterCommunicationError
    :ivar details: List of Router Communication Errors. Required.
    :vartype details: list[~azure.eventgrid.models.AcsRouterCommunicationError]
    """

    code: str = rest_field()
    """Router Communication Error Code. Required."""
    message: str = rest_field()
    """Router Communication Error Message. Required."""
    target: str = rest_field()
    """Router Communication Error Target. Required."""
    innererror: "_models.AcsRouterCommunicationError" = rest_field()
    """Router Communication Inner Error. Required."""
    details: List["_models.AcsRouterCommunicationError"] = rest_field()
    """List of Router Communication Errors. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: str,
        innererror: "_models.AcsRouterCommunicationError",
        details: List["_models.AcsRouterCommunicationError"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterEventData(_model_base.Model):
    """Schema of common properties of all Router events.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    """

    job_id: str = rest_field(name="jobId")
    """Router Event Job ID. Required."""
    channel_reference: str = rest_field(name="channelReference")
    """Router Event Channel Reference. Required."""
    channel_id: str = rest_field(name="channelId")
    """Router Event Channel ID. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobEventData(AcsRouterEventData):
    """Schema of common properties of all Router Job events.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    """

    queue_id: str = rest_field(name="queueId")
    """Router Job events Queue Id. Required."""
    labels: Dict[str, str] = rest_field()
    """Router Job events Labels. Required."""
    tags: Dict[str, str] = rest_field()
    """Router Jobs events Tags. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobCancelledEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobCancelled event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar note: Router Job Note. Required.
    :vartype note: str
    :ivar disposition_code: Router Job Disposition Code. Required.
    :vartype disposition_code: str
    """

    note: str = rest_field()
    """Router Job Note. Required."""
    disposition_code: str = rest_field(name="dispositionCode")
    """Router Job Disposition Code. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        note: str,
        disposition_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobClassificationFailedEventData(AcsRouterJobEventData):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobClassificationFailed event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar classification_policy_id: Router Job Classification Policy Id. Required.
    :vartype classification_policy_id: str
    :ivar errors: Router Job Classification Failed Errors. Required.
    :vartype errors: list[~azure.eventgrid.models.AcsRouterCommunicationError]
    """

    classification_policy_id: str = rest_field(name="classificationPolicyId")
    """Router Job Classification Policy Id. Required."""
    errors: List["_models.AcsRouterCommunicationError"] = rest_field()
    """Router Job Classification Failed Errors. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        classification_policy_id: str,
        errors: List["_models.AcsRouterCommunicationError"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobClassifiedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobClassified event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar queue_details: Router Job Queue Info. Required.
    :vartype queue_details: ~azure.eventgrid.models.AcsRouterQueueDetails
    :ivar classification_policy_id: Router Job Classification Policy Id. Required.
    :vartype classification_policy_id: str
    :ivar priority: Router Job Priority. Required.
    :vartype priority: int
    :ivar attached_worker_selectors: Router Job Attached Worker Selector. Required.
    :vartype attached_worker_selectors: list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    """

    queue_details: "_models.AcsRouterQueueDetails" = rest_field(name="queueDetails")
    """Router Job Queue Info. Required."""
    classification_policy_id: str = rest_field(name="classificationPolicyId")
    """Router Job Classification Policy Id. Required."""
    priority: int = rest_field()
    """Router Job Priority. Required."""
    attached_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(name="attachedWorkerSelectors")
    """Router Job Attached Worker Selector. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        queue_details: "_models.AcsRouterQueueDetails",
        classification_policy_id: str,
        priority: int,
        attached_worker_selectors: List["_models.AcsRouterWorkerSelector"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobClosedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClosed
    event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar assignment_id: Router Job Closed Assignment Id. Required.
    :vartype assignment_id: str
    :ivar worker_id: Router Job Closed Worker Id. Required.
    :vartype worker_id: str
    :ivar disposition_code: Router Job Closed Disposition Code. Required.
    :vartype disposition_code: str
    """

    assignment_id: str = rest_field(name="assignmentId")
    """Router Job Closed Assignment Id. Required."""
    worker_id: str = rest_field(name="workerId")
    """Router Job Closed Worker Id. Required."""
    disposition_code: str = rest_field(name="dispositionCode")
    """Router Job Closed Disposition Code. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        assignment_id: str,
        worker_id: str,
        disposition_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobCompletedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobCompleted event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar assignment_id: Router Job Completed Assignment Id. Required.
    :vartype assignment_id: str
    :ivar worker_id: Router Job Completed Worker Id. Required.
    :vartype worker_id: str
    """

    assignment_id: str = rest_field(name="assignmentId")
    """Router Job Completed Assignment Id. Required."""
    worker_id: str = rest_field(name="workerId")
    """Router Job Completed Worker Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        assignment_id: str,
        worker_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobDeletedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobDeleted
    event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobExceptionTriggeredEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobExceptionTriggered event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar rule_key: Router Job Exception Triggered Rule Key. Required.
    :vartype rule_key: str
    :ivar exception_rule_id: Router Job Exception Triggered Rule Id. Required.
    :vartype exception_rule_id: str
    """

    rule_key: str = rest_field(name="ruleKey")
    """Router Job Exception Triggered Rule Key. Required."""
    exception_rule_id: str = rest_field(name="exceptionRuleId")
    """Router Job Exception Triggered Rule Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        rule_key: str,
        exception_rule_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobQueuedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobQueued
    event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar priority: Router Job Priority. Required.
    :vartype priority: int
    :ivar attached_worker_selectors: Router Job Queued Attached Worker Selector. Required.
    :vartype attached_worker_selectors: list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar requested_worker_selectors: Router Job Queued Requested Worker Selector. Required.
    :vartype requested_worker_selectors: list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    """

    priority: int = rest_field()
    """Router Job Priority. Required."""
    attached_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(name="attachedWorkerSelectors")
    """Router Job Queued Attached Worker Selector. Required."""
    requested_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(name="requestedWorkerSelectors")
    """Router Job Queued Requested Worker Selector. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        priority: int,
        attached_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        requested_worker_selectors: List["_models.AcsRouterWorkerSelector"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobReceivedEventData(AcsRouterJobEventData):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobReceived event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar job_status: Router Job Received Job Status. Required. Known values are:
     "PendingClassification", "Queued", "Assigned", "Completed", "Closed", "Cancelled",
     "ClassificationFailed", "Created", "PendingSchedule", "Scheduled", "ScheduleFailed", and
     "WaitingForActivation".
    :vartype job_status: str or ~azure.eventgrid.models.AcsRouterJobStatus
    :ivar classification_policy_id: Router Job Classification Policy Id. Required.
    :vartype classification_policy_id: str
    :ivar priority: Router Job Priority. Required.
    :vartype priority: int
    :ivar requested_worker_selectors: Router Job Received Requested Worker Selectors. Required.
    :vartype requested_worker_selectors: list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar scheduled_on: Router Job Received Scheduled Time in UTC. Required.
    :vartype scheduled_on: ~datetime.datetime
    :ivar unavailable_for_matching: Unavailable For Matching for Router Job Received. Required.
    :vartype unavailable_for_matching: bool
    """

    job_status: Union[str, "_models.AcsRouterJobStatus"] = rest_field(name="jobStatus")
    """Router Job Received Job Status. Required. Known values are: \"PendingClassification\",
     \"Queued\", \"Assigned\", \"Completed\", \"Closed\", \"Cancelled\", \"ClassificationFailed\",
     \"Created\", \"PendingSchedule\", \"Scheduled\", \"ScheduleFailed\", and
     \"WaitingForActivation\"."""
    classification_policy_id: str = rest_field(name="classificationPolicyId")
    """Router Job Classification Policy Id. Required."""
    priority: int = rest_field()
    """Router Job Priority. Required."""
    requested_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(name="requestedWorkerSelectors")
    """Router Job Received Requested Worker Selectors. Required."""
    scheduled_on: datetime.datetime = rest_field(name="scheduledOn", format="rfc3339")
    """Router Job Received Scheduled Time in UTC. Required."""
    unavailable_for_matching: bool = rest_field(name="unavailableForMatching")
    """Unavailable For Matching for Router Job Received. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        job_status: Union[str, "_models.AcsRouterJobStatus"],
        classification_policy_id: str,
        priority: int,
        requested_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        scheduled_on: datetime.datetime,
        unavailable_for_matching: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobSchedulingFailedEventData(AcsRouterJobEventData):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobSchedulingFailed event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar priority: Router Job Priority. Required.
    :vartype priority: int
    :ivar expired_attached_worker_selectors: Router Job Scheduling Failed Attached Worker Selector
     Expired. Required.
    :vartype expired_attached_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar expired_requested_worker_selectors: Router Job Scheduling Failed Requested Worker
     Selector Expired. Required.
    :vartype expired_requested_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar scheduled_on: Router Job Scheduling Failed Scheduled Time in UTC. Required.
    :vartype scheduled_on: ~datetime.datetime
    :ivar failure_reason: Router Job Scheduling Failed Reason. Required.
    :vartype failure_reason: str
    """

    priority: int = rest_field()
    """Router Job Priority. Required."""
    expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredAttachedWorkerSelectors"
    )
    """Router Job Scheduling Failed Attached Worker Selector Expired. Required."""
    expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredRequestedWorkerSelectors"
    )
    """Router Job Scheduling Failed Requested Worker Selector Expired. Required."""
    scheduled_on: datetime.datetime = rest_field(name="scheduledOn", format="rfc3339")
    """Router Job Scheduling Failed Scheduled Time in UTC. Required."""
    failure_reason: str = rest_field(name="failureReason")
    """Router Job Scheduling Failed Reason. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        priority: int,
        expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        scheduled_on: datetime.datetime,
        failure_reason: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobUnassignedEventData(AcsRouterJobEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobUnassigned event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar assignment_id: Router Job Unassigned Assignment Id. Required.
    :vartype assignment_id: str
    :ivar worker_id: Router Job Unassigned Worker Id. Required.
    :vartype worker_id: str
    """

    assignment_id: str = rest_field(name="assignmentId")
    """Router Job Unassigned Assignment Id. Required."""
    worker_id: str = rest_field(name="workerId")
    """Router Job Unassigned Worker Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        assignment_id: str,
        worker_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobWaitingForActivationEventData(
    AcsRouterJobEventData
):  # pylint: disable=too-many-instance-attributes,name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobWaitingForActivation event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar priority: Router Job Waiting For Activation Priority. Required.
    :vartype priority: int
    :ivar expired_attached_worker_selectors: Router Job Waiting For Activation Worker Selector
     Expired. Required.
    :vartype expired_attached_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar expired_requested_worker_selectors: Router Job Waiting For Activation Requested Worker
     Selector Expired. Required.
    :vartype expired_requested_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar scheduled_on: Router Job Waiting For Activation Scheduled Time in UTC. Required.
    :vartype scheduled_on: ~datetime.datetime
    :ivar unavailable_for_matching: Router Job Waiting For Activation Unavailable For Matching.
     Required.
    :vartype unavailable_for_matching: bool
    """

    priority: int = rest_field()
    """Router Job Waiting For Activation Priority. Required."""
    expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredAttachedWorkerSelectors"
    )
    """Router Job Waiting For Activation Worker Selector Expired. Required."""
    expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredRequestedWorkerSelectors"
    )
    """Router Job Waiting For Activation Requested Worker Selector Expired. Required."""
    scheduled_on: datetime.datetime = rest_field(name="scheduledOn", format="rfc3339")
    """Router Job Waiting For Activation Scheduled Time in UTC. Required."""
    unavailable_for_matching: bool = rest_field(name="unavailableForMatching")
    """Router Job Waiting For Activation Unavailable For Matching. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        priority: int,
        expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        scheduled_on: datetime.datetime,
        unavailable_for_matching: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterJobWorkerSelectorsExpiredEventData(AcsRouterJobEventData):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterJobWorkerSelectorsExpired event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar queue_id: Router Job events Queue Id. Required.
    :vartype queue_id: str
    :ivar labels: Router Job events Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Jobs events Tags. Required.
    :vartype tags: dict[str, str]
    :ivar expired_requested_worker_selectors: Router Job Worker Selectors Expired Requested Worker
     Selectors. Required.
    :vartype expired_requested_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    :ivar expired_attached_worker_selectors: Router Job Worker Selectors Expired Attached Worker
     Selectors. Required.
    :vartype expired_attached_worker_selectors:
     list[~azure.eventgrid.models.AcsRouterWorkerSelector]
    """

    expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredRequestedWorkerSelectors"
    )
    """Router Job Worker Selectors Expired Requested Worker Selectors. Required."""
    expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"] = rest_field(
        name="expiredAttachedWorkerSelectors"
    )
    """Router Job Worker Selectors Expired Attached Worker Selectors. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        queue_id: str,
        labels: Dict[str, str],
        tags: Dict[str, str],
        expired_requested_worker_selectors: List["_models.AcsRouterWorkerSelector"],
        expired_attached_worker_selectors: List["_models.AcsRouterWorkerSelector"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterQueueDetails(_model_base.Model):
    """Router Queue Details.


    :ivar id: Router Queue Id. Required.
    :vartype id: str
    :ivar name: Router Queue Name. Required.
    :vartype name: str
    :ivar labels: Router Queue Labels. Required.
    :vartype labels: dict[str, str]
    """

    id: str = rest_field()
    """Router Queue Id. Required."""
    name: str = rest_field()
    """Router Queue Name. Required."""
    labels: Dict[str, str] = rest_field()
    """Router Queue Labels. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        labels: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerEventData(AcsRouterEventData):
    """Schema of common properties of all Router Worker events.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    """

    worker_id: str = rest_field(name="workerId")
    """Router Worker events Worker Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerDeletedEventData(AcsRouterWorkerEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerDeleted event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    """

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerDeregisteredEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerDeregistered event.


    :ivar worker_id: Router Worker Deregistered Worker Id. Required.
    :vartype worker_id: str
    """

    worker_id: str = rest_field(name="workerId")
    """Router Worker Deregistered Worker Id. Required."""

    @overload
    def __init__(
        self,
        *,
        worker_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerOfferAcceptedEventData(AcsRouterWorkerEventData):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerOfferAccepted event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_id: Router Worker Offer Accepted Queue Id. Required.
    :vartype queue_id: str
    :ivar offer_id: Router Worker Offer Accepted Offer Id. Required.
    :vartype offer_id: str
    :ivar assignment_id: Router Worker Offer Accepted Assignment Id. Required.
    :vartype assignment_id: str
    :ivar job_priority: Router Worker Offer Accepted Job Priority. Required.
    :vartype job_priority: int
    :ivar worker_labels: Router Worker Offer Accepted Worker Labels. Required.
    :vartype worker_labels: dict[str, str]
    :ivar worker_tags: Router Worker Offer Accepted Worker Tags. Required.
    :vartype worker_tags: dict[str, str]
    :ivar job_labels: Router Worker Offer Accepted Job Labels. Required.
    :vartype job_labels: dict[str, str]
    :ivar job_tags: Router Worker Offer Accepted Job Tags. Required.
    :vartype job_tags: dict[str, str]
    """

    queue_id: str = rest_field(name="queueId")
    """Router Worker Offer Accepted Queue Id. Required."""
    offer_id: str = rest_field(name="offerId")
    """Router Worker Offer Accepted Offer Id. Required."""
    assignment_id: str = rest_field(name="assignmentId")
    """Router Worker Offer Accepted Assignment Id. Required."""
    job_priority: int = rest_field(name="jobPriority")
    """Router Worker Offer Accepted Job Priority. Required."""
    worker_labels: Dict[str, str] = rest_field(name="workerLabels")
    """Router Worker Offer Accepted Worker Labels. Required."""
    worker_tags: Dict[str, str] = rest_field(name="workerTags")
    """Router Worker Offer Accepted Worker Tags. Required."""
    job_labels: Dict[str, str] = rest_field(name="jobLabels")
    """Router Worker Offer Accepted Job Labels. Required."""
    job_tags: Dict[str, str] = rest_field(name="jobTags")
    """Router Worker Offer Accepted Job Tags. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
        queue_id: str,
        offer_id: str,
        assignment_id: str,
        job_priority: int,
        worker_labels: Dict[str, str],
        worker_tags: Dict[str, str],
        job_labels: Dict[str, str],
        job_tags: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerOfferDeclinedEventData(AcsRouterWorkerEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerOfferDeclined event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_id: Router Worker Offer Declined Queue Id. Required.
    :vartype queue_id: str
    :ivar offer_id: Router Worker Offer Declined Offer Id. Required.
    :vartype offer_id: str
    """

    queue_id: str = rest_field(name="queueId")
    """Router Worker Offer Declined Queue Id. Required."""
    offer_id: str = rest_field(name="offerId")
    """Router Worker Offer Declined Offer Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
        queue_id: str,
        offer_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerOfferExpiredEventData(AcsRouterWorkerEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerOfferExpired event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_id: Router Worker Offer Expired Queue Id. Required.
    :vartype queue_id: str
    :ivar offer_id: Router Worker Offer Expired Offer Id. Required.
    :vartype offer_id: str
    """

    queue_id: str = rest_field(name="queueId")
    """Router Worker Offer Expired Queue Id. Required."""
    offer_id: str = rest_field(name="offerId")
    """Router Worker Offer Expired Offer Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
        queue_id: str,
        offer_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerOfferIssuedEventData(AcsRouterWorkerEventData):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerOfferIssued event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_id: Router Worker Offer Issued Queue Id. Required.
    :vartype queue_id: str
    :ivar offer_id: Router Worker Offer Issued Offer Id. Required.
    :vartype offer_id: str
    :ivar job_priority: Router Worker Offer Issued Job Priority. Required.
    :vartype job_priority: int
    :ivar worker_labels: Router Worker Offer Issued Worker Labels. Required.
    :vartype worker_labels: dict[str, str]
    :ivar offered_on: Router Worker Offer Issued Time in UTC. Required.
    :vartype offered_on: ~datetime.datetime
    :ivar expires_on: Router Worker Offer Issued Expiration Time in UTC. Required.
    :vartype expires_on: ~datetime.datetime
    :ivar worker_tags: Router Worker Offer Issued Worker Tags. Required.
    :vartype worker_tags: dict[str, str]
    :ivar job_labels: Router Worker Offer Issued Job Labels. Required.
    :vartype job_labels: dict[str, str]
    :ivar job_tags: Router Worker Offer Issued Job Tags. Required.
    :vartype job_tags: dict[str, str]
    """

    queue_id: str = rest_field(name="queueId")
    """Router Worker Offer Issued Queue Id. Required."""
    offer_id: str = rest_field(name="offerId")
    """Router Worker Offer Issued Offer Id. Required."""
    job_priority: int = rest_field(name="jobPriority")
    """Router Worker Offer Issued Job Priority. Required."""
    worker_labels: Dict[str, str] = rest_field(name="workerLabels")
    """Router Worker Offer Issued Worker Labels. Required."""
    offered_on: datetime.datetime = rest_field(name="offeredOn", format="rfc3339")
    """Router Worker Offer Issued Time in UTC. Required."""
    expires_on: datetime.datetime = rest_field(name="expiresOn", format="rfc3339")
    """Router Worker Offer Issued Expiration Time in UTC. Required."""
    worker_tags: Dict[str, str] = rest_field(name="workerTags")
    """Router Worker Offer Issued Worker Tags. Required."""
    job_labels: Dict[str, str] = rest_field(name="jobLabels")
    """Router Worker Offer Issued Job Labels. Required."""
    job_tags: Dict[str, str] = rest_field(name="jobTags")
    """Router Worker Offer Issued Job Tags. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
        queue_id: str,
        offer_id: str,
        job_priority: int,
        worker_labels: Dict[str, str],
        offered_on: datetime.datetime,
        expires_on: datetime.datetime,
        worker_tags: Dict[str, str],
        job_labels: Dict[str, str],
        job_tags: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerOfferRevokedEventData(AcsRouterWorkerEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerOfferRevoked event.


    :ivar job_id: Router Event Job ID. Required.
    :vartype job_id: str
    :ivar channel_reference: Router Event Channel Reference. Required.
    :vartype channel_reference: str
    :ivar channel_id: Router Event Channel ID. Required.
    :vartype channel_id: str
    :ivar worker_id: Router Worker events Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_id: Router Worker Offer Revoked Queue Id. Required.
    :vartype queue_id: str
    :ivar offer_id: Router Worker Offer Revoked Offer Id. Required.
    :vartype offer_id: str
    """

    queue_id: str = rest_field(name="queueId")
    """Router Worker Offer Revoked Queue Id. Required."""
    offer_id: str = rest_field(name="offerId")
    """Router Worker Offer Revoked Offer Id. Required."""

    @overload
    def __init__(
        self,
        *,
        job_id: str,
        channel_reference: str,
        channel_id: str,
        worker_id: str,
        queue_id: str,
        offer_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerRegisteredEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerRegistered event.


    :ivar worker_id: Router Worker Registered Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_assignments: Router Worker Registered Queue Info. Required.
    :vartype queue_assignments: list[~azure.eventgrid.models.AcsRouterQueueDetails]
    :ivar channel_configurations: Router Worker Registered Channel Configuration. Required.
    :vartype channel_configurations: list[~azure.eventgrid.models.AcsRouterChannelConfiguration]
    :ivar total_capacity: Router Worker Register Total Capacity. Required.
    :vartype total_capacity: int
    :ivar labels: Router Worker Registered Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Worker Registered Tags. Required.
    :vartype tags: dict[str, str]
    """

    worker_id: str = rest_field(name="workerId")
    """Router Worker Registered Worker Id. Required."""
    queue_assignments: List["_models.AcsRouterQueueDetails"] = rest_field(name="queueAssignments")
    """Router Worker Registered Queue Info. Required."""
    channel_configurations: List["_models.AcsRouterChannelConfiguration"] = rest_field(name="channelConfigurations")
    """Router Worker Registered Channel Configuration. Required."""
    total_capacity: int = rest_field(name="totalCapacity")
    """Router Worker Register Total Capacity. Required."""
    labels: Dict[str, str] = rest_field()
    """Router Worker Registered Labels. Required."""
    tags: Dict[str, str] = rest_field()
    """Router Worker Registered Tags. Required."""

    @overload
    def __init__(
        self,
        *,
        worker_id: str,
        queue_assignments: List["_models.AcsRouterQueueDetails"],
        channel_configurations: List["_models.AcsRouterChannelConfiguration"],
        total_capacity: int,
        labels: Dict[str, str],
        tags: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerSelector(_model_base.Model):
    """Router Job Worker Selector.


    :ivar key: Router Job Worker Selector Key. Required.
    :vartype key: str
    :ivar label_operator: Router Job Worker Selector Label Operator. Required. Known values are:
     "Equal", "NotEqual", "Greater", "Less", "GreaterThanOrEqual", and "LessThanOrEqual".
    :vartype label_operator: str or ~azure.eventgrid.models.AcsRouterLabelOperator
    :ivar value: Router Job Worker Selector Value. Required.
    :vartype value: any
    :ivar ttl_seconds: Router Job Worker Selector Time to Live in Seconds. Required.
    :vartype ttl_seconds: float
    :ivar state: Router Job Worker Selector State. Required. Known values are: "active" and
     "expired".
    :vartype state: str or ~azure.eventgrid.models.AcsRouterWorkerSelectorState
    :ivar expiration_time: Router Job Worker Selector Expiration Time. Required.
    :vartype expiration_time: ~datetime.datetime
    """

    key: str = rest_field()
    """Router Job Worker Selector Key. Required."""
    label_operator: Union[str, "_models.AcsRouterLabelOperator"] = rest_field(name="labelOperator")
    """Router Job Worker Selector Label Operator. Required. Known values are: \"Equal\", \"NotEqual\",
     \"Greater\", \"Less\", \"GreaterThanOrEqual\", and \"LessThanOrEqual\"."""
    value: Any = rest_field()
    """Router Job Worker Selector Value. Required."""
    ttl_seconds: float = rest_field(name="ttlSeconds")
    """Router Job Worker Selector Time to Live in Seconds. Required."""
    state: Union[str, "_models.AcsRouterWorkerSelectorState"] = rest_field()
    """Router Job Worker Selector State. Required. Known values are: \"active\" and \"expired\"."""
    expiration_time: datetime.datetime = rest_field(name="expirationTime", format="rfc3339")
    """Router Job Worker Selector Expiration Time. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        label_operator: Union[str, "_models.AcsRouterLabelOperator"],
        value: Any,
        ttl_seconds: float,
        state: Union[str, "_models.AcsRouterWorkerSelectorState"],
        expiration_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsRouterWorkerUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.RouterWorkerUpdated event.


    :ivar worker_id: Router Worker Updated Worker Id. Required.
    :vartype worker_id: str
    :ivar queue_assignments: Router Worker Updated Queue Info. Required.
    :vartype queue_assignments: list[~azure.eventgrid.models.AcsRouterQueueDetails]
    :ivar channel_configurations: Router Worker Updated Channel Configuration. Required.
    :vartype channel_configurations: list[~azure.eventgrid.models.AcsRouterChannelConfiguration]
    :ivar total_capacity: Router Worker Updated Total Capacity. Required.
    :vartype total_capacity: int
    :ivar labels: Router Worker Updated Labels. Required.
    :vartype labels: dict[str, str]
    :ivar tags: Router Worker Updated Tags. Required.
    :vartype tags: dict[str, str]
    :ivar updated_worker_properties: Router Worker Properties Updated. Required.
    :vartype updated_worker_properties: list[str or
     ~azure.eventgrid.models.AcsRouterUpdatedWorkerProperty]
    """

    worker_id: str = rest_field(name="workerId")
    """Router Worker Updated Worker Id. Required."""
    queue_assignments: List["_models.AcsRouterQueueDetails"] = rest_field(name="queueAssignments")
    """Router Worker Updated Queue Info. Required."""
    channel_configurations: List["_models.AcsRouterChannelConfiguration"] = rest_field(name="channelConfigurations")
    """Router Worker Updated Channel Configuration. Required."""
    total_capacity: int = rest_field(name="totalCapacity")
    """Router Worker Updated Total Capacity. Required."""
    labels: Dict[str, str] = rest_field()
    """Router Worker Updated Labels. Required."""
    tags: Dict[str, str] = rest_field()
    """Router Worker Updated Tags. Required."""
    updated_worker_properties: List[Union[str, "_models.AcsRouterUpdatedWorkerProperty"]] = rest_field(
        name="updatedWorkerProperties"
    )
    """Router Worker Properties Updated. Required."""

    @overload
    def __init__(
        self,
        *,
        worker_id: str,
        queue_assignments: List["_models.AcsRouterQueueDetails"],
        channel_configurations: List["_models.AcsRouterChannelConfiguration"],
        total_capacity: int,
        labels: Dict[str, str],
        tags: Dict[str, str],
        updated_worker_properties: List[Union[str, "_models.AcsRouterUpdatedWorkerProperty"]],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsSmsDeliveryAttemptProperties(_model_base.Model):
    """Schema for details of a delivery attempt.


    :ivar timestamp: TimeStamp when delivery was attempted. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar segments_succeeded: Number of segments that were successfully delivered. Required.
    :vartype segments_succeeded: int
    :ivar segments_failed: Number of segments whose delivery failed. Required.
    :vartype segments_failed: int
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """TimeStamp when delivery was attempted. Required."""
    segments_succeeded: int = rest_field(name="segmentsSucceeded")
    """Number of segments that were successfully delivered. Required."""
    segments_failed: int = rest_field(name="segmentsFailed")
    """Number of segments whose delivery failed. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        segments_succeeded: int,
        segments_failed: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsSmsEventBaseProperties(_model_base.Model):
    """Schema of common properties of all SMS events.


    :ivar message_id: The identity of the SMS message. Required.
    :vartype message_id: str
    :ivar from_property: The identity of SMS message sender. Required.
    :vartype from_property: str
    :ivar to: The identity of SMS message receiver. Required.
    :vartype to: str
    """

    message_id: str = rest_field(name="messageId")
    """The identity of the SMS message. Required."""
    from_property: str = rest_field(name="from")
    """The identity of SMS message sender. Required."""
    to: str = rest_field()
    """The identity of SMS message receiver. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
        from_property: str,
        to: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsSmsDeliveryReportReceivedEventData(AcsSmsEventBaseProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Communication.SMSDeliveryReportReceived event.


    :ivar message_id: The identity of the SMS message. Required.
    :vartype message_id: str
    :ivar from_property: The identity of SMS message sender. Required.
    :vartype from_property: str
    :ivar to: The identity of SMS message receiver. Required.
    :vartype to: str
    :ivar delivery_status: Status of Delivery. Required.
    :vartype delivery_status: str
    :ivar delivery_status_details: Details about Delivery Status. Required.
    :vartype delivery_status_details: str
    :ivar delivery_attempts: List of details of delivery attempts made. Required.
    :vartype delivery_attempts: list[~azure.eventgrid.models.AcsSmsDeliveryAttemptProperties]
    :ivar received_timestamp: The time at which the SMS delivery report was received. Required.
    :vartype received_timestamp: ~datetime.datetime
    :ivar tag: Customer Content. Required.
    :vartype tag: str
    """

    delivery_status: str = rest_field(name="deliveryStatus")
    """Status of Delivery. Required."""
    delivery_status_details: str = rest_field(name="deliveryStatusDetails")
    """Details about Delivery Status. Required."""
    delivery_attempts: List["_models.AcsSmsDeliveryAttemptProperties"] = rest_field(name="deliveryAttempts")
    """List of details of delivery attempts made. Required."""
    received_timestamp: datetime.datetime = rest_field(name="receivedTimestamp", format="rfc3339")
    """The time at which the SMS delivery report was received. Required."""
    tag: str = rest_field()
    """Customer Content. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
        from_property: str,
        to: str,
        delivery_status: str,
        delivery_status_details: str,
        delivery_attempts: List["_models.AcsSmsDeliveryAttemptProperties"],
        received_timestamp: datetime.datetime,
        tag: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsSmsReceivedEventData(AcsSmsEventBaseProperties):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSReceived
    event.


    :ivar message_id: The identity of the SMS message. Required.
    :vartype message_id: str
    :ivar from_property: The identity of SMS message sender. Required.
    :vartype from_property: str
    :ivar to: The identity of SMS message receiver. Required.
    :vartype to: str
    :ivar message: The SMS content. Required.
    :vartype message: str
    :ivar received_timestamp: The time at which the SMS was received. Required.
    :vartype received_timestamp: ~datetime.datetime
    """

    message: str = rest_field()
    """The SMS content. Required."""
    received_timestamp: datetime.datetime = rest_field(name="receivedTimestamp", format="rfc3339")
    """The time at which the SMS was received. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
        from_property: str,
        to: str,
        message: str,
        received_timestamp: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AcsUserDisconnectedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Communication.UserDisconnected event.


    :ivar user_communication_identifier: The communication identifier of the user who was
     disconnected. Required.
    :vartype user_communication_identifier: ~azure.eventgrid.models.CommunicationIdentifierModel
    """

    user_communication_identifier: "_models.CommunicationIdentifierModel" = rest_field(
        name="userCommunicationIdentifier"
    )
    """The communication identifier of the user who was disconnected. Required."""

    @overload
    def __init__(
        self,
        *,
        user_communication_identifier: "_models.CommunicationIdentifierModel",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiCenterApiDefinitionAddedEventData(_model_base.Model):
    """Schema of the data property of an EventGridEvent for a Microsoft.ApiCenter.ApiDefinitionAdded
    event.


    :ivar title: API definition title. Required.
    :vartype title: str
    :ivar description: API definition description. Required.
    :vartype description: str
    :ivar specification: API definition specification. Required.
    :vartype specification: ~azure.eventgrid.models.ApiCenterApiSpecification
    """

    title: str = rest_field()
    """API definition title. Required."""
    description: str = rest_field()
    """API definition description. Required."""
    specification: "_models.ApiCenterApiSpecification" = rest_field()
    """API definition specification. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        description: str,
        specification: "_models.ApiCenterApiSpecification",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiCenterApiDefinitionUpdatedEventData(_model_base.Model):
    """Schema of the data property of an EventGridEvent for a Microsoft.ApiCenter.ApiDefinitionUpdated
    event.


    :ivar title: API definition title. Required.
    :vartype title: str
    :ivar description: API definition description. Required.
    :vartype description: str
    :ivar specification: API definition specification. Required.
    :vartype specification: ~azure.eventgrid.models.ApiCenterApiSpecification
    """

    title: str = rest_field()
    """API definition title. Required."""
    description: str = rest_field()
    """API definition description. Required."""
    specification: "_models.ApiCenterApiSpecification" = rest_field()
    """API definition specification. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        description: str,
        specification: "_models.ApiCenterApiSpecification",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiCenterApiSpecification(_model_base.Model):
    """API specification details.


    :ivar name: Specification name. Required.
    :vartype name: str
    :ivar version: Specification version. Required.
    :vartype version: str
    """

    name: str = rest_field()
    """Specification name. Required."""
    version: str = rest_field()
    """Specification version. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APICreated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIDeleted
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiReleaseCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.APIReleaseCreated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiReleaseDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.APIReleaseDeleted event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiReleaseUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.APIReleaseUpdated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementApiUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.APIUpdated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayApiAddedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayAPIAdded
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayApiRemovedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayAPIRemoved event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/apis/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayCertificateAuthorityCreatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayCertificateAuthorityCreated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayCertificateAuthorityDeletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayCertificateAuthorityDeleted event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayCertificateAuthorityUpdatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayCertificateAuthorityUpdated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/certificateAuthorities/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayCreated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayDeleted
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayHostnameConfigurationCreatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayHostnameConfigurationCreated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayHostnameConfigurationDeletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayHostnameConfigurationDeleted event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayHostnameConfigurationUpdatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.GatewayHostnameConfigurationUpdated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<GatewayName>/hostnameConfigurations/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementGatewayUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.GatewayUpdated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/gateways/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementProductCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductCreated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementProductDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductDeleted
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementProductUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.ProductUpdated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementSubscriptionCreatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.SubscriptionCreated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementSubscriptionDeletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.SubscriptionDeleted event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementSubscriptionUpdatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ApiManagement.SubscriptionUpdated event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementUserCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserCreated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementUserDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserDeleted
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ApiManagementUserUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.UserUpdated
    event.


    :ivar resource_uri: The fully qualified ID of the resource that the compliance state change is
     for, including the resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required.
    :vartype resource_uri: str
    """

    resource_uri: str = rest_field(name="resourceUri")
    """The fully qualified ID of the resource that the compliance state change is for, including the
     resource name and resource type. Uses the format,
     ``/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/Microsoft.ApiManagement/service/<ServiceName>/<ResourceType>/<ResourceName>``.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        resource_uri: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppConfigurationKeyValueDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.AppConfiguration.KeyValueDeleted event.


    :ivar key: The key used to identify the key-value that was deleted. Required.
    :vartype key: str
    :ivar label: The label, if any, used to identify the key-value that was deleted. Required.
    :vartype label: str
    :ivar etag: The etag representing the key-value that was deleted. Required.
    :vartype etag: str
    :ivar sync_token: The sync token representing the server state after the event. Required.
    :vartype sync_token: str
    """

    key: str = rest_field()
    """The key used to identify the key-value that was deleted. Required."""
    label: str = rest_field()
    """The label, if any, used to identify the key-value that was deleted. Required."""
    etag: str = rest_field()
    """The etag representing the key-value that was deleted. Required."""
    sync_token: str = rest_field(name="syncToken")
    """The sync token representing the server state after the event. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        label: str,
        etag: str,
        sync_token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppConfigurationKeyValueModifiedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.AppConfiguration.KeyValueModified event.


    :ivar key: The key used to identify the key-value that was modified. Required.
    :vartype key: str
    :ivar label: The label, if any, used to identify the key-value that was modified. Required.
    :vartype label: str
    :ivar etag: The etag representing the new state of the key-value. Required.
    :vartype etag: str
    :ivar sync_token: The sync token representing the server state after the event. Required.
    :vartype sync_token: str
    """

    key: str = rest_field()
    """The key used to identify the key-value that was modified. Required."""
    label: str = rest_field()
    """The label, if any, used to identify the key-value that was modified. Required."""
    etag: str = rest_field()
    """The etag representing the new state of the key-value. Required."""
    sync_token: str = rest_field(name="syncToken")
    """The sync token representing the server state after the event. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        label: str,
        etag: str,
        sync_token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppConfigurationSnapshotEventData(_model_base.Model):
    """Schema of common properties of snapshot events.


    :ivar name: The name of the snapshot. Required.
    :vartype name: str
    :ivar etag: The etag representing the new state of the snapshot. Required.
    :vartype etag: str
    :ivar sync_token: The sync token representing the server state after the event. Required.
    :vartype sync_token: str
    """

    name: str = rest_field()
    """The name of the snapshot. Required."""
    etag: str = rest_field()
    """The etag representing the new state of the snapshot. Required."""
    sync_token: str = rest_field(name="syncToken")
    """The sync token representing the server state after the event. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        etag: str,
        sync_token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppConfigurationSnapshotCreatedEventData(AppConfigurationSnapshotEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.AppConfiguration.SnapshotCreated event.


    :ivar name: The name of the snapshot. Required.
    :vartype name: str
    :ivar etag: The etag representing the new state of the snapshot. Required.
    :vartype etag: str
    :ivar sync_token: The sync token representing the server state after the event. Required.
    :vartype sync_token: str
    """

    @overload
    def __init__(
        self,
        *,
        name: str,
        etag: str,
        sync_token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppConfigurationSnapshotModifiedEventData(AppConfigurationSnapshotEventData):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.AppConfiguration.SnapshotModified event.


    :ivar name: The name of the snapshot. Required.
    :vartype name: str
    :ivar etag: The etag representing the new state of the snapshot. Required.
    :vartype etag: str
    :ivar sync_token: The sync token representing the server state after the event. Required.
    :vartype sync_token: str
    """

    @overload
    def __init__(
        self,
        *,
        name: str,
        etag: str,
        sync_token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppEventTypeDetail(_model_base.Model):
    """Detail of action on the app.


    :ivar action: Type of action of the operation. Required. Known values are: "Restarted",
     "Stopped", "ChangedAppSettings", "Started", "Completed", and "Failed".
    :vartype action: str or ~azure.eventgrid.models.AppAction
    """

    action: Union[str, "_models.AppAction"] = rest_field()
    """Type of action of the operation. Required. Known values are: \"Restarted\", \"Stopped\",
     \"ChangedAppSettings\", \"Started\", \"Completed\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        action: Union[str, "_models.AppAction"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppServicePlanEventTypeDetail(_model_base.Model):
    """Detail of action on the app service plan.


    :ivar stamp_kind: Kind of environment where app service plan is. Required. Known values are:
     "Public", "AseV1", and "AseV2".
    :vartype stamp_kind: str or ~azure.eventgrid.models.StampKind
    :ivar action: Type of action on the app service plan. Required. "Updated"
    :vartype action: str or ~azure.eventgrid.models.AppServicePlanAction
    :ivar status: Asynchronous operation status of the operation on the app service plan. Required.
     Known values are: "Started", "Completed", and "Failed".
    :vartype status: str or ~azure.eventgrid.models.AsyncStatus
    """

    stamp_kind: Union[str, "_models.StampKind"] = rest_field(name="stampKind")
    """Kind of environment where app service plan is. Required. Known values are: \"Public\",
     \"AseV1\", and \"AseV2\"."""
    action: Union[str, "_models.AppServicePlanAction"] = rest_field()
    """Type of action on the app service plan. Required. \"Updated\""""
    status: Union[str, "_models.AsyncStatus"] = rest_field()
    """Asynchronous operation status of the operation on the app service plan. Required. Known values
     are: \"Started\", \"Completed\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        stamp_kind: Union[str, "_models.StampKind"],
        action: Union[str, "_models.AppServicePlanAction"],
        status: Union[str, "_models.AsyncStatus"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for Microsoft.AVS/clusters events.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    """

    operation_id: str = rest_field(name="operationId")
    """Id of the operation that caused this event. Required."""
    added_host_names: List[str] = rest_field(name="addedHostNames")
    """Hosts added to the cluster in this event, if any. Required."""
    removed_host_names: List[str] = rest_field(name="removedHostNames")
    """Hosts removed from the cluster in this event, if any. Required."""
    in_maintenance_host_names: List[str] = rest_field(name="inMaintenanceHostNames")
    """Hosts in Maintenance mode in the cluster, if any. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterCreatedEventData(AvsClusterEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterCreated event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterDeletedEventData(AvsClusterEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterDeleted event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterFailedEventData(AvsClusterEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterFailed event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    :ivar failure_message: Failure reason of an event. Required.
    :vartype failure_message: str
    """

    failure_message: str = rest_field(name="failureMessage")
    """Failure reason of an event. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
        failure_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterUpdatedEventData(AvsClusterEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterUpdated event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsClusterUpdatingEventData(AvsClusterEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterUpdating event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar added_host_names: Hosts added to the cluster in this event, if any. Required.
    :vartype added_host_names: list[str]
    :ivar removed_host_names: Hosts removed from the cluster in this event, if any. Required.
    :vartype removed_host_names: list[str]
    :ivar in_maintenance_host_names: Hosts in Maintenance mode in the cluster, if any. Required.
    :vartype in_maintenance_host_names: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        added_host_names: List[str],
        removed_host_names: List[str],
        in_maintenance_host_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsPrivateCloudEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for Microsoft.AVS/privateClouds events.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    """

    operation_id: str = rest_field(name="operationId")
    """Id of the operation that caused this event. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsPrivateCloudFailedEventData(AvsPrivateCloudEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.PrivateCloudFailed event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar failure_message: Failure reason of an event. Required.
    :vartype failure_message: str
    """

    failure_message: str = rest_field(name="failureMessage")
    """Failure reason of an event. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        failure_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsPrivateCloudUpdatedEventData(AvsPrivateCloudEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.PrivateCloudUpdated event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsPrivateCloudUpdatingEventData(AvsPrivateCloudEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.PrivateCloudUpdating
    event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsScriptExecutionEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for Microsoft.AVS/scriptExecutions events.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar cmdlet_id: Cmdlet referenced in the execution that caused this event. Required.
    :vartype cmdlet_id: str
    :ivar output: Stdout outputs from the execution, if any. Required.
    :vartype output: list[str]
    """

    operation_id: str = rest_field(name="operationId")
    """Id of the operation that caused this event. Required."""
    cmdlet_id: str = rest_field(name="cmdletId")
    """Cmdlet referenced in the execution that caused this event. Required."""
    output: List[str] = rest_field()
    """Stdout outputs from the execution, if any. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        cmdlet_id: str,
        output: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsScriptExecutionCancelledEventData(AvsScriptExecutionEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ScriptExecutionCancelled
    event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar cmdlet_id: Cmdlet referenced in the execution that caused this event. Required.
    :vartype cmdlet_id: str
    :ivar output: Stdout outputs from the execution, if any. Required.
    :vartype output: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        cmdlet_id: str,
        output: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsScriptExecutionFailedEventData(AvsScriptExecutionEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ScriptExecutionFailed
    event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar cmdlet_id: Cmdlet referenced in the execution that caused this event. Required.
    :vartype cmdlet_id: str
    :ivar output: Stdout outputs from the execution, if any. Required.
    :vartype output: list[str]
    :ivar failure_message: Failure reason of an event. Required.
    :vartype failure_message: str
    """

    failure_message: str = rest_field(name="failureMessage")
    """Failure reason of an event. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        cmdlet_id: str,
        output: List[str],
        failure_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsScriptExecutionFinishedEventData(AvsScriptExecutionEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ScriptExecutionFinished
    event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar cmdlet_id: Cmdlet referenced in the execution that caused this event. Required.
    :vartype cmdlet_id: str
    :ivar output: Stdout outputs from the execution, if any. Required.
    :vartype output: list[str]
    :ivar named_outputs: Named outputs of completed execution, if any. Required.
    :vartype named_outputs: dict[str, str]
    """

    named_outputs: Dict[str, str] = rest_field(name="namedOutputs")
    """Named outputs of completed execution, if any. Required."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        cmdlet_id: str,
        output: List[str],
        named_outputs: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvsScriptExecutionStartedEventData(AvsScriptExecutionEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ScriptExecutionStarted
    event.


    :ivar operation_id: Id of the operation that caused this event. Required.
    :vartype operation_id: str
    :ivar cmdlet_id: Cmdlet referenced in the execution that caused this event. Required.
    :vartype cmdlet_id: str
    :ivar output: Stdout outputs from the execution, if any. Required.
    :vartype output: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        cmdlet_id: str,
        output: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CommunicationIdentifierModel(_model_base.Model):
    """Identifies a participant in Azure Communication services. A participant is, for example, a
    phone number or an Azure communication user. This model must be interpreted as a union: Apart
    from rawId, at most one further property may be set.


    :ivar kind: The identifier kind. Only required in responses. Required. Known values are:
     "unknown", "communicationUser", "phoneNumber", and "microsoftTeamsUser".
    :vartype kind: str or ~azure.eventgrid.models.CommunicationIdentifierModelKind
    :ivar raw_id: Raw Id of the identifier. Optional in requests, required in responses. Required.
    :vartype raw_id: str
    :ivar communication_user: The communication user. Required.
    :vartype communication_user: ~azure.eventgrid.models.CommunicationUserIdentifierModel
    :ivar phone_number: The phone number. Required.
    :vartype phone_number: ~azure.eventgrid.models.PhoneNumberIdentifierModel
    :ivar microsoft_teams_user: The Microsoft Teams user. Required.
    :vartype microsoft_teams_user: ~azure.eventgrid.models.MicrosoftTeamsUserIdentifierModel
    :ivar microsoft_teams_app: The Microsoft Teams application. Required.
    :vartype microsoft_teams_app: ~azure.eventgrid.models.MicrosoftTeamsAppIdentifierModel
    """

    kind: Union[str, "_models.CommunicationIdentifierModelKind"] = rest_field()
    """The identifier kind. Only required in responses. Required. Known values are: \"unknown\",
     \"communicationUser\", \"phoneNumber\", and \"microsoftTeamsUser\"."""
    raw_id: str = rest_field(name="rawId")
    """Raw Id of the identifier. Optional in requests, required in responses. Required."""
    communication_user: "_models.CommunicationUserIdentifierModel" = rest_field(name="communicationUser")
    """The communication user. Required."""
    phone_number: "_models.PhoneNumberIdentifierModel" = rest_field(name="phoneNumber")
    """The phone number. Required."""
    microsoft_teams_user: "_models.MicrosoftTeamsUserIdentifierModel" = rest_field(name="microsoftTeamsUser")
    """The Microsoft Teams user. Required."""
    microsoft_teams_app: "_models.MicrosoftTeamsAppIdentifierModel" = rest_field(name="microsoftTeamsApp")
    """The Microsoft Teams application. Required."""

    @overload
    def __init__(
        self,
        *,
        kind: Union[str, "_models.CommunicationIdentifierModelKind"],
        raw_id: str,
        communication_user: "_models.CommunicationUserIdentifierModel",
        phone_number: "_models.PhoneNumberIdentifierModel",
        microsoft_teams_user: "_models.MicrosoftTeamsUserIdentifierModel",
        microsoft_teams_app: "_models.MicrosoftTeamsAppIdentifierModel",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CommunicationUserIdentifierModel(_model_base.Model):
    """A user that got created with an Azure Communication Services resource.


    :ivar id: The Id of the communication user. Required.
    :vartype id: str
    """

    id: str = rest_field()
    """The Id of the communication user. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryArtifactEventData(_model_base.Model):
    """The content of the event request message.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    id: str = rest_field()
    """The event ID. Required."""
    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    action: str = rest_field()
    """The action that encompasses the provided event. Required."""
    location: str = rest_field()
    """The location of the event. Required."""
    target: "_models.ContainerRegistryArtifactEventTarget" = rest_field()
    """The target of the event. Required."""
    connected_registry: "_models.ContainerRegistryEventConnectedRegistry" = rest_field(name="connectedRegistry")
    """The connected registry information if the event is generated by a connected registry. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryArtifactEventTarget",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryArtifactEventTarget(_model_base.Model):
    """The target of the event.


    :ivar media_type: The MIME type of the artifact. Required.
    :vartype media_type: str
    :ivar size: The size in bytes of the artifact. Required.
    :vartype size: int
    :ivar digest: The digest of the artifact. Required.
    :vartype digest: str
    :ivar repository: The repository name of the artifact. Required.
    :vartype repository: str
    :ivar tag: The tag of the artifact. Required.
    :vartype tag: str
    :ivar name: The name of the artifact. Required.
    :vartype name: str
    :ivar version: The version of the artifact. Required.
    :vartype version: str
    """

    media_type: str = rest_field(name="mediaType")
    """The MIME type of the artifact. Required."""
    size: int = rest_field()
    """The size in bytes of the artifact. Required."""
    digest: str = rest_field()
    """The digest of the artifact. Required."""
    repository: str = rest_field()
    """The repository name of the artifact. Required."""
    tag: str = rest_field()
    """The tag of the artifact. Required."""
    name: str = rest_field()
    """The name of the artifact. Required."""
    version: str = rest_field()
    """The version of the artifact. Required."""

    @overload
    def __init__(
        self,
        *,
        media_type: str,
        size: int,
        digest: str,
        repository: str,
        tag: str,
        name: str,
        version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryChartDeletedEventData(ContainerRegistryArtifactEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted
    event.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryArtifactEventTarget",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryChartPushedEventData(ContainerRegistryArtifactEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed
    event.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryArtifactEventTarget",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventActor(_model_base.Model):
    """The agent that initiated the event. For most situations, this could be from the authorization
    context of the request.


    :ivar name: The subject or username associated with the request context that generated the
     event. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The subject or username associated with the request context that generated the event. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventConnectedRegistry(_model_base.Model):
    """The connected registry information if the event is generated by a connected registry.


    :ivar name: The name of the connected registry that generated this event. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the connected registry that generated this event. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventData(_model_base.Model):
    """The content of the event request message.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :ivar request: The request that generated the event. Required.
    :vartype request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :ivar actor: The agent that initiated the event. For most situations, this could be from the
     authorization context of the request. Required.
    :vartype actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :ivar source: The registry node that generated the event. Put differently, while the actor
     initiates the event, the source generates it. Required.
    :vartype source: ~azure.eventgrid.models.ContainerRegistryEventSource
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    id: str = rest_field()
    """The event ID. Required."""
    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    action: str = rest_field()
    """The action that encompasses the provided event. Required."""
    location: str = rest_field()
    """The location of the event. Required."""
    target: "_models.ContainerRegistryEventTarget" = rest_field()
    """The target of the event. Required."""
    request: "_models.ContainerRegistryEventRequest" = rest_field()
    """The request that generated the event. Required."""
    actor: "_models.ContainerRegistryEventActor" = rest_field()
    """The agent that initiated the event. For most situations, this could be from the authorization
     context of the request. Required."""
    source: "_models.ContainerRegistryEventSource" = rest_field()
    """The registry node that generated the event. Put differently, while the actor initiates the
     event, the source generates it. Required."""
    connected_registry: "_models.ContainerRegistryEventConnectedRegistry" = rest_field(name="connectedRegistry")
    """The connected registry information if the event is generated by a connected registry. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryEventTarget",
        request: "_models.ContainerRegistryEventRequest",
        actor: "_models.ContainerRegistryEventActor",
        source: "_models.ContainerRegistryEventSource",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventRequest(_model_base.Model):
    """The request that generated the event.


    :ivar id: The ID of the request that initiated the event. Required.
    :vartype id: str
    :ivar addr: The IP or hostname and possibly port of the client connection that initiated the
     event. This is the RemoteAddr from the standard http request. Required.
    :vartype addr: str
    :ivar host: The externally accessible hostname of the registry instance, as specified by the
     http host header on incoming requests. Required.
    :vartype host: str
    :ivar method: The request method that generated the event. Required.
    :vartype method: str
    :ivar useragent: The user agent header of the request. Required.
    :vartype useragent: str
    """

    id: str = rest_field()
    """The ID of the request that initiated the event. Required."""
    addr: str = rest_field()
    """The IP or hostname and possibly port of the client connection that initiated the event. This is
     the RemoteAddr from the standard http request. Required."""
    host: str = rest_field()
    """The externally accessible hostname of the registry instance, as specified by the http host
     header on incoming requests. Required."""
    method: str = rest_field()
    """The request method that generated the event. Required."""
    useragent: str = rest_field()
    """The user agent header of the request. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        addr: str,
        host: str,
        method: str,
        useragent: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventSource(_model_base.Model):
    """The registry node that generated the event. Put differently, while the actor initiates the
    event, the source generates it.


    :ivar addr: The IP or hostname and the port of the registry node that generated the event.
     Generally, this will be resolved by os.Hostname() along with the running port. Required.
    :vartype addr: str
    :ivar instance_i_d: The running instance of an application. Changes after each restart.
     Required.
    :vartype instance_i_d: str
    """

    addr: str = rest_field()
    """The IP or hostname and the port of the registry node that generated the event. Generally, this
     will be resolved by os.Hostname() along with the running port. Required."""
    instance_i_d: str = rest_field(name="instanceID")
    """The running instance of an application. Changes after each restart. Required."""

    @overload
    def __init__(
        self,
        *,
        addr: str,
        instance_i_d: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryEventTarget(_model_base.Model):
    """The target of the event.


    :ivar media_type: The MIME type of the referenced object. Required.
    :vartype media_type: str
    :ivar size: The number of bytes of the content. Same as Length field. Required.
    :vartype size: int
    :ivar digest: The digest of the content, as defined by the Registry V2 HTTP API Specification.
     Required.
    :vartype digest: str
    :ivar length: The number of bytes of the content. Same as Size field. Required.
    :vartype length: int
    :ivar repository: The repository name. Required.
    :vartype repository: str
    :ivar url: The direct URL to the content. Required.
    :vartype url: str
    :ivar tag: The tag name. Required.
    :vartype tag: str
    """

    media_type: str = rest_field(name="mediaType")
    """The MIME type of the referenced object. Required."""
    size: int = rest_field()
    """The number of bytes of the content. Same as Length field. Required."""
    digest: str = rest_field()
    """The digest of the content, as defined by the Registry V2 HTTP API Specification. Required."""
    length: int = rest_field()
    """The number of bytes of the content. Same as Size field. Required."""
    repository: str = rest_field()
    """The repository name. Required."""
    url: str = rest_field()
    """The direct URL to the content. Required."""
    tag: str = rest_field()
    """The tag name. Required."""

    @overload
    def __init__(
        self,
        *,
        media_type: str,
        size: int,
        digest: str,
        length: int,
        repository: str,
        url: str,
        tag: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryImageDeletedEventData(ContainerRegistryEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted
    event.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :ivar request: The request that generated the event. Required.
    :vartype request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :ivar actor: The agent that initiated the event. For most situations, this could be from the
     authorization context of the request. Required.
    :vartype actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :ivar source: The registry node that generated the event. Put differently, while the actor
     initiates the event, the source generates it. Required.
    :vartype source: ~azure.eventgrid.models.ContainerRegistryEventSource
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryEventTarget",
        request: "_models.ContainerRegistryEventRequest",
        actor: "_models.ContainerRegistryEventActor",
        source: "_models.ContainerRegistryEventSource",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerRegistryImagePushedEventData(ContainerRegistryEventData):
    """Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed
    event.


    :ivar id: The event ID. Required.
    :vartype id: str
    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar action: The action that encompasses the provided event. Required.
    :vartype action: str
    :ivar location: The location of the event. Required.
    :vartype location: str
    :ivar target: The target of the event. Required.
    :vartype target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :ivar request: The request that generated the event. Required.
    :vartype request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :ivar actor: The agent that initiated the event. For most situations, this could be from the
     authorization context of the request. Required.
    :vartype actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :ivar source: The registry node that generated the event. Put differently, while the actor
     initiates the event, the source generates it. Required.
    :vartype source: ~azure.eventgrid.models.ContainerRegistryEventSource
    :ivar connected_registry: The connected registry information if the event is generated by a
     connected registry. Required.
    :vartype connected_registry: ~azure.eventgrid.models.ContainerRegistryEventConnectedRegistry
    """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        timestamp: datetime.datetime,
        action: str,
        location: str,
        target: "_models.ContainerRegistryEventTarget",
        request: "_models.ContainerRegistryEventRequest",
        actor: "_models.ContainerRegistryEventActor",
        source: "_models.ContainerRegistryEventSource",
        connected_registry: "_models.ContainerRegistryEventConnectedRegistry",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceClusterSupportEventData(_model_base.Model):
    """Schema of common properties of cluster support events.


    :ivar kubernetes_version: The Kubernetes version of the ManagedCluster resource. Required.
    :vartype kubernetes_version: str
    """

    kubernetes_version: str = rest_field(name="kubernetesVersion")
    """The Kubernetes version of the ManagedCluster resource. Required."""

    @overload
    def __init__(
        self,
        *,
        kubernetes_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceClusterSupportEndedEventData(
    ContainerServiceClusterSupportEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.ClusterSupportEnded event.


    :ivar kubernetes_version: The Kubernetes version of the ManagedCluster resource. Required.
    :vartype kubernetes_version: str
    """

    @overload
    def __init__(
        self,
        *,
        kubernetes_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceClusterSupportEndingEventData(
    ContainerServiceClusterSupportEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.ClusterSupportEnding event.


    :ivar kubernetes_version: The Kubernetes version of the ManagedCluster resource. Required.
    :vartype kubernetes_version: str
    """

    @overload
    def __init__(
        self,
        *,
        kubernetes_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceNewKubernetesVersionAvailableEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.NewKubernetesVersionAvailable event.


    :ivar latest_supported_kubernetes_version: The highest PATCH Kubernetes version for the highest
     MINOR version supported by ManagedCluster resource. Required.
    :vartype latest_supported_kubernetes_version: str
    :ivar latest_stable_kubernetes_version: The highest PATCH Kubernetes version for the MINOR
     version considered stable for the ManagedCluster resource. Required.
    :vartype latest_stable_kubernetes_version: str
    :ivar lowest_minor_kubernetes_version: The highest PATCH Kubernetes version for the lowest
     applicable MINOR version available for the ManagedCluster resource. Required.
    :vartype lowest_minor_kubernetes_version: str
    :ivar latest_preview_kubernetes_version: The highest PATCH Kubernetes version considered
     preview for the ManagedCluster resource. There might not be any version in preview at the time
     of publishing the event. Required.
    :vartype latest_preview_kubernetes_version: str
    """

    latest_supported_kubernetes_version: str = rest_field(name="latestSupportedKubernetesVersion")
    """The highest PATCH Kubernetes version for the highest MINOR version supported by ManagedCluster
     resource. Required."""
    latest_stable_kubernetes_version: str = rest_field(name="latestStableKubernetesVersion")
    """The highest PATCH Kubernetes version for the MINOR version considered stable for the
     ManagedCluster resource. Required."""
    lowest_minor_kubernetes_version: str = rest_field(name="lowestMinorKubernetesVersion")
    """The highest PATCH Kubernetes version for the lowest applicable MINOR version available for the
     ManagedCluster resource. Required."""
    latest_preview_kubernetes_version: str = rest_field(name="latestPreviewKubernetesVersion")
    """The highest PATCH Kubernetes version considered preview for the ManagedCluster resource. There
     might not be any version in preview at the time of publishing the event. Required."""

    @overload
    def __init__(
        self,
        *,
        latest_supported_kubernetes_version: str,
        latest_stable_kubernetes_version: str,
        lowest_minor_kubernetes_version: str,
        latest_preview_kubernetes_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceNodePoolRollingEventData(_model_base.Model):
    """Schema of common properties of node pool rolling events.


    :ivar node_pool_name: The name of the node pool in the ManagedCluster resource. Required.
    :vartype node_pool_name: str
    """

    node_pool_name: str = rest_field(name="nodePoolName")
    """The name of the node pool in the ManagedCluster resource. Required."""

    @overload
    def __init__(
        self,
        *,
        node_pool_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceNodePoolRollingFailedEventData(
    ContainerServiceNodePoolRollingEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.NodePoolRollingFailed event.


    :ivar node_pool_name: The name of the node pool in the ManagedCluster resource. Required.
    :vartype node_pool_name: str
    """

    @overload
    def __init__(
        self,
        *,
        node_pool_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceNodePoolRollingStartedEventData(
    ContainerServiceNodePoolRollingEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.NodePoolRollingStarted event.


    :ivar node_pool_name: The name of the node pool in the ManagedCluster resource. Required.
    :vartype node_pool_name: str
    """

    @overload
    def __init__(
        self,
        *,
        node_pool_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerServiceNodePoolRollingSucceededEventData(
    ContainerServiceNodePoolRollingEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerService.NodePoolRollingSucceeded event.


    :ivar node_pool_name: The name of the node pool in the ManagedCluster resource. Required.
    :vartype node_pool_name: str
    """

    @overload
    def __init__(
        self,
        *,
        node_pool_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataBoxCopyCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.CopyCompleted event.


    :ivar serial_number: Serial Number of the device associated with the event. The list is comma
     separated if more than one serial number is associated. Required.
    :vartype serial_number: str
    :ivar stage_name: Name of the current Stage. Required. Known values are: "CopyStarted",
     "CopyCompleted", and "OrderCompleted".
    :vartype stage_name: str or ~azure.eventgrid.models.DataBoxStageName
    :ivar stage_time: The time at which the stage happened. Required.
    :vartype stage_time: ~datetime.datetime
    """

    serial_number: str = rest_field(name="serialNumber")
    """Serial Number of the device associated with the event. The list is comma separated if more than
     one serial number is associated. Required."""
    stage_name: Union[str, "_models.DataBoxStageName"] = rest_field(name="stageName")
    """Name of the current Stage. Required. Known values are: \"CopyStarted\", \"CopyCompleted\", and
     \"OrderCompleted\"."""
    stage_time: datetime.datetime = rest_field(name="stageTime", format="rfc3339")
    """The time at which the stage happened. Required."""

    @overload
    def __init__(
        self,
        *,
        serial_number: str,
        stage_name: Union[str, "_models.DataBoxStageName"],
        stage_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataBoxCopyStartedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.CopyStarted event.


    :ivar serial_number: Serial Number of the device associated with the event. The list is comma
     separated if more than one serial number is associated. Required.
    :vartype serial_number: str
    :ivar stage_name: Name of the current Stage. Required. Known values are: "CopyStarted",
     "CopyCompleted", and "OrderCompleted".
    :vartype stage_name: str or ~azure.eventgrid.models.DataBoxStageName
    :ivar stage_time: The time at which the stage happened. Required.
    :vartype stage_time: ~datetime.datetime
    """

    serial_number: str = rest_field(name="serialNumber")
    """Serial Number of the device associated with the event. The list is comma separated if more than
     one serial number is associated. Required."""
    stage_name: Union[str, "_models.DataBoxStageName"] = rest_field(name="stageName")
    """Name of the current Stage. Required. Known values are: \"CopyStarted\", \"CopyCompleted\", and
     \"OrderCompleted\"."""
    stage_time: datetime.datetime = rest_field(name="stageTime", format="rfc3339")
    """The time at which the stage happened. Required."""

    @overload
    def __init__(
        self,
        *,
        serial_number: str,
        stage_name: Union[str, "_models.DataBoxStageName"],
        stage_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataBoxOrderCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.OrderCompleted event.


    :ivar serial_number: Serial Number of the device associated with the event. The list is comma
     separated if more than one serial number is associated. Required.
    :vartype serial_number: str
    :ivar stage_name: Name of the current Stage. Required. Known values are: "CopyStarted",
     "CopyCompleted", and "OrderCompleted".
    :vartype stage_name: str or ~azure.eventgrid.models.DataBoxStageName
    :ivar stage_time: The time at which the stage happened. Required.
    :vartype stage_time: ~datetime.datetime
    """

    serial_number: str = rest_field(name="serialNumber")
    """Serial Number of the device associated with the event. The list is comma separated if more than
     one serial number is associated. Required."""
    stage_name: Union[str, "_models.DataBoxStageName"] = rest_field(name="stageName")
    """Name of the current Stage. Required. Known values are: \"CopyStarted\", \"CopyCompleted\", and
     \"OrderCompleted\"."""
    stage_time: datetime.datetime = rest_field(name="stageTime", format="rfc3339")
    """The time at which the stage happened. Required."""

    @overload
    def __init__(
        self,
        *,
        serial_number: str,
        stage_name: Union[str, "_models.DataBoxStageName"],
        stage_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceConnectionStateEventInfo(_model_base.Model):
    """Information about the device connection state event.


    :ivar sequence_number: Sequence number is string representation of a hexadecimal number. string
     compare can be used to identify the larger number because both in ASCII and HEX numbers come
     after alphabets. If you are converting the string to hex, then the number is a 256 bit number.
     Required.
    :vartype sequence_number: str
    """

    sequence_number: str = rest_field(name="sequenceNumber")
    """Sequence number is string representation of a hexadecimal number. string compare can be used to
     identify the larger number because both in ASCII and HEX numbers come after alphabets. If you
     are converting the string to hex, then the number is a 256 bit number. Required."""

    @overload
    def __init__(
        self,
        *,
        sequence_number: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceConnectionStateEventProperties(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a device connection state event
    (DeviceConnected, DeviceDisconnected).


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar module_id: The unique identifier of the module. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype module_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar device_connection_state_event_info: Information about the device connection state event.
     Required.
    :vartype device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    device_id: str = rest_field(name="deviceId")
    """The unique identifier of the device. This case-sensitive string can be up to 128 characters
     long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: -
     : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required."""
    module_id: str = rest_field(name="moduleId")
    """The unique identifier of the module. This case-sensitive string can be up to 128 characters
     long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: -
     : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required."""
    hub_name: str = rest_field(name="hubName")
    """Name of the IoT Hub where the device was created or deleted. Required."""
    device_connection_state_event_info: "_models.DeviceConnectionStateEventInfo" = rest_field(
        name="deviceConnectionStateEventInfo"
    )
    """Information about the device connection state event. Required."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        module_id: str,
        hub_name: str,
        device_connection_state_event_info: "_models.DeviceConnectionStateEventInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceLifeCycleEventProperties(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated,
    DeviceDeleted).


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar twin: Information about the device twin, which is the cloud representation of application
     device metadata. Required.
    :vartype twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    device_id: str = rest_field(name="deviceId")
    """The unique identifier of the device. This case-sensitive string can be up to 128 characters
     long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: -
     : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required."""
    hub_name: str = rest_field(name="hubName")
    """Name of the IoT Hub where the device was created or deleted. Required."""
    twin: "_models.DeviceTwinInfo" = rest_field()
    """Information about the device twin, which is the cloud representation of application device
     metadata. Required."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        hub_name: str,
        twin: "_models.DeviceTwinInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTelemetryEventProperties(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a device telemetry event
    (DeviceTelemetry).


    :ivar body: The content of the message from the device. Required.
    :vartype body: dict[str, any]
    :ivar properties: Application properties are user-defined strings that can be added to the
     message. These fields are optional. Required.
    :vartype properties: dict[str, str]
    :ivar system_properties: System properties help identify contents and source of the messages.
     Required.
    :vartype system_properties: dict[str, str]
    """

    body: Dict[str, Any] = rest_field()
    """The content of the message from the device. Required."""
    properties: Dict[str, str] = rest_field()
    """Application properties are user-defined strings that can be added to the message. These fields
     are optional. Required."""
    system_properties: Dict[str, str] = rest_field(name="systemProperties")
    """System properties help identify contents and source of the messages. Required."""

    @overload
    def __init__(
        self,
        *,
        body: Dict[str, Any],
        properties: Dict[str, str],
        system_properties: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTwinInfo(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Information about the device twin, which is the cloud representation of application device
    metadata.


    :ivar authentication_type: Authentication type used for this device: either SAS, SelfSigned, or
     CertificateAuthority. Required.
    :vartype authentication_type: str
    :ivar cloud_to_device_message_count: Count of cloud to device messages sent to this device.
     Required.
    :vartype cloud_to_device_message_count: float
    :ivar connection_state: Whether the device is connected or disconnected. Required.
    :vartype connection_state: str
    :ivar device_id: The unique identifier of the device twin. Required.
    :vartype device_id: str
    :ivar etag: A piece of information that describes the content of the device twin. Each etag is
     guaranteed to be unique per device twin. Required.
    :vartype etag: str
    :ivar last_activity_time: The ISO8601 timestamp of the last activity. Required.
    :vartype last_activity_time: str
    :ivar properties: Properties JSON element. Required.
    :vartype properties: ~azure.eventgrid.models.DeviceTwinInfoProperties
    :ivar status: Whether the device twin is enabled or disabled. Required.
    :vartype status: str
    :ivar status_update_time: The ISO8601 timestamp of the last device twin status update.
     Required.
    :vartype status_update_time: str
    :ivar version: An integer that is incremented by one each time the device twin is updated.
     Required.
    :vartype version: float
    :ivar x509_thumbprint: The thumbprint is a unique value for the x509 certificate, commonly used
     to find a particular certificate in a certificate store. The thumbprint is dynamically
     generated using the SHA1 algorithm, and does not physically exist in the certificate. Required.
    :vartype x509_thumbprint: ~azure.eventgrid.models.DeviceTwinInfoX509Thumbprint
    """

    authentication_type: str = rest_field(name="authenticationType")
    """Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
     Required."""
    cloud_to_device_message_count: float = rest_field(name="cloudToDeviceMessageCount")
    """Count of cloud to device messages sent to this device. Required."""
    connection_state: str = rest_field(name="connectionState")
    """Whether the device is connected or disconnected. Required."""
    device_id: str = rest_field(name="deviceId")
    """The unique identifier of the device twin. Required."""
    etag: str = rest_field()
    """A piece of information that describes the content of the device twin. Each etag is guaranteed
     to be unique per device twin. Required."""
    last_activity_time: str = rest_field(name="lastActivityTime")
    """The ISO8601 timestamp of the last activity. Required."""
    properties: "_models.DeviceTwinInfoProperties" = rest_field()
    """Properties JSON element. Required."""
    status: str = rest_field()
    """Whether the device twin is enabled or disabled. Required."""
    status_update_time: str = rest_field(name="statusUpdateTime")
    """The ISO8601 timestamp of the last device twin status update. Required."""
    version: float = rest_field()
    """An integer that is incremented by one each time the device twin is updated. Required."""
    x509_thumbprint: "_models.DeviceTwinInfoX509Thumbprint" = rest_field(name="x509Thumbprint")
    """The thumbprint is a unique value for the x509 certificate, commonly used to find a particular
     certificate in a certificate store. The thumbprint is dynamically generated using the SHA1
     algorithm, and does not physically exist in the certificate. Required."""

    @overload
    def __init__(
        self,
        *,
        authentication_type: str,
        cloud_to_device_message_count: float,
        connection_state: str,
        device_id: str,
        etag: str,
        last_activity_time: str,
        properties: "_models.DeviceTwinInfoProperties",
        status: str,
        status_update_time: str,
        version: float,
        x509_thumbprint: "_models.DeviceTwinInfoX509Thumbprint",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTwinInfoProperties(_model_base.Model):
    """Properties JSON element.


    :ivar desired: A portion of the properties that can be written only by the application
     back-end, and read by the device. Required.
    :vartype desired: ~azure.eventgrid.models.DeviceTwinProperties
    :ivar reported: A portion of the properties that can be written only by the device, and read by
     the application back-end. Required.
    :vartype reported: ~azure.eventgrid.models.DeviceTwinProperties
    """

    desired: "_models.DeviceTwinProperties" = rest_field()
    """A portion of the properties that can be written only by the application back-end, and read by
     the device. Required."""
    reported: "_models.DeviceTwinProperties" = rest_field()
    """A portion of the properties that can be written only by the device, and read by the application
     back-end. Required."""

    @overload
    def __init__(
        self,
        *,
        desired: "_models.DeviceTwinProperties",
        reported: "_models.DeviceTwinProperties",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTwinInfoX509Thumbprint(_model_base.Model):
    """The thumbprint is a unique value for the x509 certificate, commonly used to find a particular
    certificate in a certificate store. The thumbprint is dynamically generated using the SHA1
    algorithm, and does not physically exist in the certificate.


    :ivar primary_thumbprint: Primary thumbprint for the x509 certificate. Required.
    :vartype primary_thumbprint: str
    :ivar secondary_thumbprint: Secondary thumbprint for the x509 certificate. Required.
    :vartype secondary_thumbprint: str
    """

    primary_thumbprint: str = rest_field(name="primaryThumbprint")
    """Primary thumbprint for the x509 certificate. Required."""
    secondary_thumbprint: str = rest_field(name="secondaryThumbprint")
    """Secondary thumbprint for the x509 certificate. Required."""

    @overload
    def __init__(
        self,
        *,
        primary_thumbprint: str,
        secondary_thumbprint: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTwinMetadata(_model_base.Model):
    """Metadata information for the properties JSON document.


    :ivar last_updated: The ISO8601 timestamp of the last time the properties were updated.
     Required.
    :vartype last_updated: str
    """

    last_updated: str = rest_field(name="lastUpdated")
    """The ISO8601 timestamp of the last time the properties were updated. Required."""

    @overload
    def __init__(
        self,
        *,
        last_updated: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceTwinProperties(_model_base.Model):
    """A portion of the properties that can be written only by the application back-end, and read by
    the device.


    :ivar metadata: Metadata information for the properties JSON document. Required.
    :vartype metadata: ~azure.eventgrid.models.DeviceTwinMetadata
    :ivar version: Version of device twin properties. Required.
    :vartype version: float
    """

    metadata: "_models.DeviceTwinMetadata" = rest_field()
    """Metadata information for the properties JSON document. Required."""
    version: float = rest_field()
    """Version of device twin properties. Required."""

    @overload
    def __init__(
        self,
        *,
        metadata: "_models.DeviceTwinMetadata",
        version: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventGridMQTTClientEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for MQTT Client state changes.


    :ivar client_authentication_name: Unique identifier for the MQTT client that the client
     presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required.
    :vartype client_authentication_name: str
    :ivar client_name: Name of the client resource in the Event Grid namespace. Required.
    :vartype client_name: str
    :ivar namespace_name: Name of the Event Grid namespace where the MQTT client was created or
     updated. Required.
    :vartype namespace_name: str
    """

    client_authentication_name: str = rest_field(name="clientAuthenticationName")
    """Unique identifier for the MQTT client that the client presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required."""
    client_name: str = rest_field(name="clientName")
    """Name of the client resource in the Event Grid namespace. Required."""
    namespace_name: str = rest_field(name="namespaceName")
    """Name of the Event Grid namespace where the MQTT client was created or updated. Required."""

    @overload
    def __init__(
        self,
        *,
        client_authentication_name: str,
        client_name: str,
        namespace_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventGridMQTTClientCreatedOrUpdatedEventData(EventGridMQTTClientEventData):  # pylint: disable=name-too-long
    """Event data for Microsoft.EventGrid.MQTTClientCreatedOrUpdated event.


    :ivar client_authentication_name: Unique identifier for the MQTT client that the client
     presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required.
    :vartype client_authentication_name: str
    :ivar client_name: Name of the client resource in the Event Grid namespace. Required.
    :vartype client_name: str
    :ivar namespace_name: Name of the Event Grid namespace where the MQTT client was created or
     updated. Required.
    :vartype namespace_name: str
    :ivar state: Configured state of the client. The value could be Enabled or Disabled. Required.
     Known values are: "Enabled" and "Disabled".
    :vartype state: str or ~azure.eventgrid.models.EventGridMQTTClientState
    :ivar created_on: Time the client resource is created based on the provider's UTC time.
     Required.
    :vartype created_on: ~datetime.datetime
    :ivar updated_on: Time the client resource is last updated based on the provider's UTC time. If
     the client resource was never updated, this value is identical to the value of
     the 'createdOn' property. Required.
    :vartype updated_on: ~datetime.datetime
    :ivar attributes: The key-value attributes that are assigned to the client resource. Required.
    :vartype attributes: dict[str, str]
    """

    state: Union[str, "_models.EventGridMQTTClientState"] = rest_field()
    """Configured state of the client. The value could be Enabled or Disabled. Required. Known values
     are: \"Enabled\" and \"Disabled\"."""
    created_on: datetime.datetime = rest_field(name="createdOn", format="rfc3339")
    """Time the client resource is created based on the provider's UTC time. Required."""
    updated_on: datetime.datetime = rest_field(name="updatedOn", format="rfc3339")
    """Time the client resource is last updated based on the provider's UTC time. If
     the client resource was never updated, this value is identical to the value of
     the 'createdOn' property. Required."""
    attributes: Dict[str, str] = rest_field()
    """The key-value attributes that are assigned to the client resource. Required."""

    @overload
    def __init__(
        self,
        *,
        client_authentication_name: str,
        client_name: str,
        namespace_name: str,
        state: Union[str, "_models.EventGridMQTTClientState"],
        created_on: datetime.datetime,
        updated_on: datetime.datetime,
        attributes: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventGridMQTTClientDeletedEventData(EventGridMQTTClientEventData):
    """Event data for Microsoft.EventGrid.MQTTClientDeleted event.


    :ivar client_authentication_name: Unique identifier for the MQTT client that the client
     presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required.
    :vartype client_authentication_name: str
    :ivar client_name: Name of the client resource in the Event Grid namespace. Required.
    :vartype client_name: str
    :ivar namespace_name: Name of the Event Grid namespace where the MQTT client was created or
     updated. Required.
    :vartype namespace_name: str
    """

    @overload
    def __init__(
        self,
        *,
        client_authentication_name: str,
        client_name: str,
        namespace_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventGridMQTTClientSessionConnectedEventData(EventGridMQTTClientEventData):  # pylint: disable=name-too-long
    """Event data for Microsoft.EventGrid.MQTTClientSessionConnected event.


    :ivar client_authentication_name: Unique identifier for the MQTT client that the client
     presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required.
    :vartype client_authentication_name: str
    :ivar client_name: Name of the client resource in the Event Grid namespace. Required.
    :vartype client_name: str
    :ivar namespace_name: Name of the Event Grid namespace where the MQTT client was created or
     updated. Required.
    :vartype namespace_name: str
    :ivar client_session_name: Unique identifier for the MQTT client's session. This case-sensitive
     string can
     be up to 128 characters long, and supports UTF-8 characters. Required.
    :vartype client_session_name: str
    :ivar sequence_number: A number that helps indicate order of MQTT client session connected or
     disconnected events. Latest event will have a sequence number that is higher
     than the previous event. Required.
    :vartype sequence_number: int
    """

    client_session_name: str = rest_field(name="clientSessionName")
    """Unique identifier for the MQTT client's session. This case-sensitive string can
     be up to 128 characters long, and supports UTF-8 characters. Required."""
    sequence_number: int = rest_field(name="sequenceNumber")
    """A number that helps indicate order of MQTT client session connected or
     disconnected events. Latest event will have a sequence number that is higher
     than the previous event. Required."""

    @overload
    def __init__(
        self,
        *,
        client_authentication_name: str,
        client_name: str,
        namespace_name: str,
        client_session_name: str,
        sequence_number: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventGridMQTTClientSessionDisconnectedEventData(EventGridMQTTClientEventData):  # pylint: disable=name-too-long
    """Event data for Microsoft.EventGrid.MQTTClientSessionDisconnected event.


    :ivar client_authentication_name: Unique identifier for the MQTT client that the client
     presents to the service
     for authentication. This case-sensitive string can be up to 128 characters
     long, and supports UTF-8 characters. Required.
    :vartype client_authentication_name: str
    :ivar client_name: Name of the client resource in the Event Grid namespace. Required.
    :vartype client_name: str
    :ivar namespace_name: Name of the Event Grid namespace where the MQTT client was created or
     updated. Required.
    :vartype namespace_name: str
    :ivar client_session_name: Unique identifier for the MQTT client's session. This case-sensitive
     string can
     be up to 128 characters long, and supports UTF-8 characters. Required.
    :vartype client_session_name: str
    :ivar sequence_number: A number that helps indicate order of MQTT client session connected or
     disconnected events. Latest event will have a sequence number that is higher
     than the previous event. Required.
    :vartype sequence_number: int
    :ivar disconnection_reason: Reason for the disconnection of the MQTT client's session. The
     value could be
     one of the values in the disconnection reasons table. Required. Known values are:
     "ClientAuthenticationError", "ClientAuthorizationError", "ClientError",
     "ClientInitiatedDisconnect", "ConnectionLost", "IpForbidden", "QuotaExceeded", "ServerError",
     "ServerInitiatedDisconnect", "SessionOverflow", and "SessionTakenOver".
    :vartype disconnection_reason: str or
     ~azure.eventgrid.models.EventGridMQTTClientDisconnectionReason
    """

    client_session_name: str = rest_field(name="clientSessionName")
    """Unique identifier for the MQTT client's session. This case-sensitive string can
     be up to 128 characters long, and supports UTF-8 characters. Required."""
    sequence_number: int = rest_field(name="sequenceNumber")
    """A number that helps indicate order of MQTT client session connected or
     disconnected events. Latest event will have a sequence number that is higher
     than the previous event. Required."""
    disconnection_reason: Union[str, "_models.EventGridMQTTClientDisconnectionReason"] = rest_field(
        name="disconnectionReason"
    )
    """Reason for the disconnection of the MQTT client's session. The value could be
     one of the values in the disconnection reasons table. Required. Known values are:
     \"ClientAuthenticationError\", \"ClientAuthorizationError\", \"ClientError\",
     \"ClientInitiatedDisconnect\", \"ConnectionLost\", \"IpForbidden\", \"QuotaExceeded\",
     \"ServerError\", \"ServerInitiatedDisconnect\", \"SessionOverflow\", and \"SessionTakenOver\"."""

    @overload
    def __init__(
        self,
        *,
        client_authentication_name: str,
        client_name: str,
        namespace_name: str,
        client_session_name: str,
        sequence_number: int,
        disconnection_reason: Union[str, "_models.EventGridMQTTClientDisconnectionReason"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EventHubCaptureFileCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.EventHub.CaptureFileCreated
    event.


    :ivar file_url: The path to the capture file. Required.
    :vartype file_url: str
    :ivar file_type: The file type of the capture file. Required.
    :vartype file_type: str
    :ivar partition_id: The shard ID. Required.
    :vartype partition_id: str
    :ivar size_in_bytes: The file size. Required.
    :vartype size_in_bytes: int
    :ivar event_count: The number of events in the file. Required.
    :vartype event_count: int
    :ivar first_sequence_number: The smallest sequence number from the queue. Required.
    :vartype first_sequence_number: int
    :ivar last_sequence_number: The last sequence number from the queue. Required.
    :vartype last_sequence_number: int
    :ivar first_enqueue_time: The first time from the queue. Required.
    :vartype first_enqueue_time: ~datetime.datetime
    :ivar last_enqueue_time: The last time from the queue. Required.
    :vartype last_enqueue_time: ~datetime.datetime
    """

    file_url: str = rest_field(name="fileUrl")
    """The path to the capture file. Required."""
    file_type: str = rest_field(name="fileType")
    """The file type of the capture file. Required."""
    partition_id: str = rest_field(name="partitionId")
    """The shard ID. Required."""
    size_in_bytes: int = rest_field(name="sizeInBytes")
    """The file size. Required."""
    event_count: int = rest_field(name="eventCount")
    """The number of events in the file. Required."""
    first_sequence_number: int = rest_field(name="firstSequenceNumber")
    """The smallest sequence number from the queue. Required."""
    last_sequence_number: int = rest_field(name="lastSequenceNumber")
    """The last sequence number from the queue. Required."""
    first_enqueue_time: datetime.datetime = rest_field(name="firstEnqueueTime", format="rfc3339")
    """The first time from the queue. Required."""
    last_enqueue_time: datetime.datetime = rest_field(name="lastEnqueueTime", format="rfc3339")
    """The last time from the queue. Required."""

    @overload
    def __init__(
        self,
        *,
        file_url: str,
        file_type: str,
        partition_id: str,
        size_in_bytes: int,
        event_count: int,
        first_sequence_number: int,
        last_sequence_number: int,
        first_enqueue_time: datetime.datetime,
        last_enqueue_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareDicomImageCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.DicomImageCreated event.


    :ivar partition_name: Data partition name. Required.
    :vartype partition_name: str
    :ivar image_study_instance_uid: Unique identifier for the Study. Required.
    :vartype image_study_instance_uid: str
    :ivar image_series_instance_uid: Unique identifier for the Series. Required.
    :vartype image_series_instance_uid: str
    :ivar image_sop_instance_uid: Unique identifier for the DICOM Image. Required.
    :vartype image_sop_instance_uid: str
    :ivar service_host_name: Domain name of the DICOM account for this image. Required.
    :vartype service_host_name: str
    :ivar sequence_number: Sequence number of the DICOM Service within Azure Health Data Services.
     It is unique for every image creation and deletion within the service. Required.
    :vartype sequence_number: int
    """

    partition_name: str = rest_field(name="partitionName")
    """Data partition name. Required."""
    image_study_instance_uid: str = rest_field(name="imageStudyInstanceUid")
    """Unique identifier for the Study. Required."""
    image_series_instance_uid: str = rest_field(name="imageSeriesInstanceUid")
    """Unique identifier for the Series. Required."""
    image_sop_instance_uid: str = rest_field(name="imageSopInstanceUid")
    """Unique identifier for the DICOM Image. Required."""
    service_host_name: str = rest_field(name="serviceHostName")
    """Domain name of the DICOM account for this image. Required."""
    sequence_number: int = rest_field(name="sequenceNumber")
    """Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every
     image creation and deletion within the service. Required."""

    @overload
    def __init__(
        self,
        *,
        partition_name: str,
        image_study_instance_uid: str,
        image_series_instance_uid: str,
        image_sop_instance_uid: str,
        service_host_name: str,
        sequence_number: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareDicomImageDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.DicomImageDeleted event.


    :ivar partition_name: Data partition name. Required.
    :vartype partition_name: str
    :ivar image_study_instance_uid: Unique identifier for the Study. Required.
    :vartype image_study_instance_uid: str
    :ivar image_series_instance_uid: Unique identifier for the Series. Required.
    :vartype image_series_instance_uid: str
    :ivar image_sop_instance_uid: Unique identifier for the DICOM Image. Required.
    :vartype image_sop_instance_uid: str
    :ivar service_host_name: Host name of the DICOM account for this image. Required.
    :vartype service_host_name: str
    :ivar sequence_number: Sequence number of the DICOM Service within Azure Health Data Services.
     It is unique for every image creation and deletion within the service. Required.
    :vartype sequence_number: int
    """

    partition_name: str = rest_field(name="partitionName")
    """Data partition name. Required."""
    image_study_instance_uid: str = rest_field(name="imageStudyInstanceUid")
    """Unique identifier for the Study. Required."""
    image_series_instance_uid: str = rest_field(name="imageSeriesInstanceUid")
    """Unique identifier for the Series. Required."""
    image_sop_instance_uid: str = rest_field(name="imageSopInstanceUid")
    """Unique identifier for the DICOM Image. Required."""
    service_host_name: str = rest_field(name="serviceHostName")
    """Host name of the DICOM account for this image. Required."""
    sequence_number: int = rest_field(name="sequenceNumber")
    """Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every
     image creation and deletion within the service. Required."""

    @overload
    def __init__(
        self,
        *,
        partition_name: str,
        image_study_instance_uid: str,
        image_series_instance_uid: str,
        image_sop_instance_uid: str,
        service_host_name: str,
        sequence_number: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareDicomImageUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.DicomImageUpdated event.


    :ivar partition_name: Data partition name. Required.
    :vartype partition_name: str
    :ivar image_study_instance_uid: Unique identifier for the Study. Required.
    :vartype image_study_instance_uid: str
    :ivar image_series_instance_uid: Unique identifier for the Series. Required.
    :vartype image_series_instance_uid: str
    :ivar image_sop_instance_uid: Unique identifier for the DICOM Image. Required.
    :vartype image_sop_instance_uid: str
    :ivar service_host_name: Domain name of the DICOM account for this image. Required.
    :vartype service_host_name: str
    :ivar sequence_number: Sequence number of the DICOM Service within Azure Health Data Services.
     It is unique for every image creation, updation and deletion within the service. Required.
    :vartype sequence_number: int
    """

    partition_name: str = rest_field(name="partitionName")
    """Data partition name. Required."""
    image_study_instance_uid: str = rest_field(name="imageStudyInstanceUid")
    """Unique identifier for the Study. Required."""
    image_series_instance_uid: str = rest_field(name="imageSeriesInstanceUid")
    """Unique identifier for the Series. Required."""
    image_sop_instance_uid: str = rest_field(name="imageSopInstanceUid")
    """Unique identifier for the DICOM Image. Required."""
    service_host_name: str = rest_field(name="serviceHostName")
    """Domain name of the DICOM account for this image. Required."""
    sequence_number: int = rest_field(name="sequenceNumber")
    """Sequence number of the DICOM Service within Azure Health Data Services. It is unique for every
     image creation, updation and deletion within the service. Required."""

    @overload
    def __init__(
        self,
        *,
        partition_name: str,
        image_study_instance_uid: str,
        image_series_instance_uid: str,
        image_sop_instance_uid: str,
        service_host_name: str,
        sequence_number: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareFhirResourceCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.FhirResourceCreated event.


    :ivar resource_type: Type of HL7 FHIR resource. Required. Known values are: "Account",
     "ActivityDefinition", "AdverseEvent", "AllergyIntolerance", "Appointment",
     "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BiologicallyDerivedProduct",
     "BodySite", "BodyStructure", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam",
     "CatalogEntry", "ChargeItem", "ChargeItemDefinition", "Claim", "ClaimResponse",
     "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest",
     "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract",
     "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DataElement",
     "DetectedIssue", "Device", "DeviceComponent", "DeviceDefinition", "DeviceMetric",
     "DeviceRequest", "DeviceUseStatement", "DiagnosticReport", "DocumentManifest",
     "DocumentReference", "DomainResource", "EffectEvidenceSynthesis", "EligibilityRequest",
     "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse",
     "EpisodeOfCare", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario",
     "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal",
     "GraphDefinition", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest",
     "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation",
     "ImplementationGuide", "InsurancePlan", "Invoice", "Library", "Linkage", "List", "Location",
     "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration",
     "MedicationDispense", "MedicationKnowledge", "MedicationRequest", "MedicationStatement",
     "MedicinalProduct", "MedicinalProductAuthorization", "MedicinalProductContraindication",
     "MedicinalProductIndication", "MedicinalProductIngredient", "MedicinalProductInteraction",
     "MedicinalProductManufactured", "MedicinalProductPackaged", "MedicinalProductPharmaceutical",
     "MedicinalProductUndesirableEffect", "MessageDefinition", "MessageHeader", "MolecularSequence",
     "NamingSystem", "NutritionOrder", "Observation", "ObservationDefinition",
     "OperationDefinition", "OperationOutcome", "Organization", "OrganizationAffiliation",
     "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition",
     "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest",
     "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest",
     "RelatedPerson", "RequestGroup", "ResearchDefinition", "ResearchElementDefinition",
     "ResearchStudy", "ResearchSubject", "Resource", "RiskAssessment", "RiskEvidenceSynthesis",
     "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "ServiceRequest", "Slot",
     "Specimen", "SpecimenDefinition", "StructureDefinition", "StructureMap", "Subscription",
     "Substance", "SubstanceNucleicAcid", "SubstancePolymer", "SubstanceProtein",
     "SubstanceReferenceInformation", "SubstanceSourceMaterial", "SubstanceSpecification",
     "SupplyDelivery", "SupplyRequest", "Task", "TerminologyCapabilities", "TestReport",
     "TestScript", "ValueSet", "VerificationResult", and "VisionPrescription".
    :vartype resource_type: str or ~azure.eventgrid.models.HealthcareFhirResourceType
    :ivar resource_fhir_account: Domain name of FHIR account for this resource. Required.
    :vartype resource_fhir_account: str
    :ivar resource_fhir_id: Id of HL7 FHIR resource. Required.
    :vartype resource_fhir_id: str
    :ivar resource_version_id: VersionId of HL7 FHIR resource. It changes when the resource is
     created, updated, or deleted(soft-deletion). Required.
    :vartype resource_version_id: int
    """

    resource_type: Union[str, "_models.HealthcareFhirResourceType"] = rest_field(name="resourceType")
    """Type of HL7 FHIR resource. Required. Known values are: \"Account\", \"ActivityDefinition\",
     \"AdverseEvent\", \"AllergyIntolerance\", \"Appointment\", \"AppointmentResponse\",
     \"AuditEvent\", \"Basic\", \"Binary\", \"BiologicallyDerivedProduct\", \"BodySite\",
     \"BodyStructure\", \"Bundle\", \"CapabilityStatement\", \"CarePlan\", \"CareTeam\",
     \"CatalogEntry\", \"ChargeItem\", \"ChargeItemDefinition\", \"Claim\", \"ClaimResponse\",
     \"ClinicalImpression\", \"CodeSystem\", \"Communication\", \"CommunicationRequest\",
     \"CompartmentDefinition\", \"Composition\", \"ConceptMap\", \"Condition\", \"Consent\",
     \"Contract\", \"Coverage\", \"CoverageEligibilityRequest\", \"CoverageEligibilityResponse\",
     \"DataElement\", \"DetectedIssue\", \"Device\", \"DeviceComponent\", \"DeviceDefinition\",
     \"DeviceMetric\", \"DeviceRequest\", \"DeviceUseStatement\", \"DiagnosticReport\",
     \"DocumentManifest\", \"DocumentReference\", \"DomainResource\", \"EffectEvidenceSynthesis\",
     \"EligibilityRequest\", \"EligibilityResponse\", \"Encounter\", \"Endpoint\",
     \"EnrollmentRequest\", \"EnrollmentResponse\", \"EpisodeOfCare\", \"EventDefinition\",
     \"Evidence\", \"EvidenceVariable\", \"ExampleScenario\", \"ExpansionProfile\",
     \"ExplanationOfBenefit\", \"FamilyMemberHistory\", \"Flag\", \"Goal\", \"GraphDefinition\",
     \"Group\", \"GuidanceResponse\", \"HealthcareService\", \"ImagingManifest\", \"ImagingStudy\",
     \"Immunization\", \"ImmunizationEvaluation\", \"ImmunizationRecommendation\",
     \"ImplementationGuide\", \"InsurancePlan\", \"Invoice\", \"Library\", \"Linkage\", \"List\",
     \"Location\", \"Measure\", \"MeasureReport\", \"Media\", \"Medication\",
     \"MedicationAdministration\", \"MedicationDispense\", \"MedicationKnowledge\",
     \"MedicationRequest\", \"MedicationStatement\", \"MedicinalProduct\",
     \"MedicinalProductAuthorization\", \"MedicinalProductContraindication\",
     \"MedicinalProductIndication\", \"MedicinalProductIngredient\",
     \"MedicinalProductInteraction\", \"MedicinalProductManufactured\",
     \"MedicinalProductPackaged\", \"MedicinalProductPharmaceutical\",
     \"MedicinalProductUndesirableEffect\", \"MessageDefinition\", \"MessageHeader\",
     \"MolecularSequence\", \"NamingSystem\", \"NutritionOrder\", \"Observation\",
     \"ObservationDefinition\", \"OperationDefinition\", \"OperationOutcome\", \"Organization\",
     \"OrganizationAffiliation\", \"Parameters\", \"Patient\", \"PaymentNotice\",
     \"PaymentReconciliation\", \"Person\", \"PlanDefinition\", \"Practitioner\",
     \"PractitionerRole\", \"Procedure\", \"ProcedureRequest\", \"ProcessRequest\",
     \"ProcessResponse\", \"Provenance\", \"Questionnaire\", \"QuestionnaireResponse\",
     \"ReferralRequest\", \"RelatedPerson\", \"RequestGroup\", \"ResearchDefinition\",
     \"ResearchElementDefinition\", \"ResearchStudy\", \"ResearchSubject\", \"Resource\",
     \"RiskAssessment\", \"RiskEvidenceSynthesis\", \"Schedule\", \"SearchParameter\", \"Sequence\",
     \"ServiceDefinition\", \"ServiceRequest\", \"Slot\", \"Specimen\", \"SpecimenDefinition\",
     \"StructureDefinition\", \"StructureMap\", \"Subscription\", \"Substance\",
     \"SubstanceNucleicAcid\", \"SubstancePolymer\", \"SubstanceProtein\",
     \"SubstanceReferenceInformation\", \"SubstanceSourceMaterial\", \"SubstanceSpecification\",
     \"SupplyDelivery\", \"SupplyRequest\", \"Task\", \"TerminologyCapabilities\", \"TestReport\",
     \"TestScript\", \"ValueSet\", \"VerificationResult\", and \"VisionPrescription\"."""
    resource_fhir_account: str = rest_field(name="resourceFhirAccount")
    """Domain name of FHIR account for this resource. Required."""
    resource_fhir_id: str = rest_field(name="resourceFhirId")
    """Id of HL7 FHIR resource. Required."""
    resource_version_id: int = rest_field(name="resourceVersionId")
    """VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or
     deleted(soft-deletion). Required."""

    @overload
    def __init__(
        self,
        *,
        resource_type: Union[str, "_models.HealthcareFhirResourceType"],
        resource_fhir_account: str,
        resource_fhir_id: str,
        resource_version_id: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareFhirResourceDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.FhirResourceDeleted event.


    :ivar resource_type: Type of HL7 FHIR resource. Required. Known values are: "Account",
     "ActivityDefinition", "AdverseEvent", "AllergyIntolerance", "Appointment",
     "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BiologicallyDerivedProduct",
     "BodySite", "BodyStructure", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam",
     "CatalogEntry", "ChargeItem", "ChargeItemDefinition", "Claim", "ClaimResponse",
     "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest",
     "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract",
     "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DataElement",
     "DetectedIssue", "Device", "DeviceComponent", "DeviceDefinition", "DeviceMetric",
     "DeviceRequest", "DeviceUseStatement", "DiagnosticReport", "DocumentManifest",
     "DocumentReference", "DomainResource", "EffectEvidenceSynthesis", "EligibilityRequest",
     "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse",
     "EpisodeOfCare", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario",
     "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal",
     "GraphDefinition", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest",
     "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation",
     "ImplementationGuide", "InsurancePlan", "Invoice", "Library", "Linkage", "List", "Location",
     "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration",
     "MedicationDispense", "MedicationKnowledge", "MedicationRequest", "MedicationStatement",
     "MedicinalProduct", "MedicinalProductAuthorization", "MedicinalProductContraindication",
     "MedicinalProductIndication", "MedicinalProductIngredient", "MedicinalProductInteraction",
     "MedicinalProductManufactured", "MedicinalProductPackaged", "MedicinalProductPharmaceutical",
     "MedicinalProductUndesirableEffect", "MessageDefinition", "MessageHeader", "MolecularSequence",
     "NamingSystem", "NutritionOrder", "Observation", "ObservationDefinition",
     "OperationDefinition", "OperationOutcome", "Organization", "OrganizationAffiliation",
     "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition",
     "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest",
     "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest",
     "RelatedPerson", "RequestGroup", "ResearchDefinition", "ResearchElementDefinition",
     "ResearchStudy", "ResearchSubject", "Resource", "RiskAssessment", "RiskEvidenceSynthesis",
     "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "ServiceRequest", "Slot",
     "Specimen", "SpecimenDefinition", "StructureDefinition", "StructureMap", "Subscription",
     "Substance", "SubstanceNucleicAcid", "SubstancePolymer", "SubstanceProtein",
     "SubstanceReferenceInformation", "SubstanceSourceMaterial", "SubstanceSpecification",
     "SupplyDelivery", "SupplyRequest", "Task", "TerminologyCapabilities", "TestReport",
     "TestScript", "ValueSet", "VerificationResult", and "VisionPrescription".
    :vartype resource_type: str or ~azure.eventgrid.models.HealthcareFhirResourceType
    :ivar resource_fhir_account: Domain name of FHIR account for this resource. Required.
    :vartype resource_fhir_account: str
    :ivar resource_fhir_id: Id of HL7 FHIR resource. Required.
    :vartype resource_fhir_id: str
    :ivar resource_version_id: VersionId of HL7 FHIR resource. It changes when the resource is
     created, updated, or deleted(soft-deletion). Required.
    :vartype resource_version_id: int
    """

    resource_type: Union[str, "_models.HealthcareFhirResourceType"] = rest_field(name="resourceType")
    """Type of HL7 FHIR resource. Required. Known values are: \"Account\", \"ActivityDefinition\",
     \"AdverseEvent\", \"AllergyIntolerance\", \"Appointment\", \"AppointmentResponse\",
     \"AuditEvent\", \"Basic\", \"Binary\", \"BiologicallyDerivedProduct\", \"BodySite\",
     \"BodyStructure\", \"Bundle\", \"CapabilityStatement\", \"CarePlan\", \"CareTeam\",
     \"CatalogEntry\", \"ChargeItem\", \"ChargeItemDefinition\", \"Claim\", \"ClaimResponse\",
     \"ClinicalImpression\", \"CodeSystem\", \"Communication\", \"CommunicationRequest\",
     \"CompartmentDefinition\", \"Composition\", \"ConceptMap\", \"Condition\", \"Consent\",
     \"Contract\", \"Coverage\", \"CoverageEligibilityRequest\", \"CoverageEligibilityResponse\",
     \"DataElement\", \"DetectedIssue\", \"Device\", \"DeviceComponent\", \"DeviceDefinition\",
     \"DeviceMetric\", \"DeviceRequest\", \"DeviceUseStatement\", \"DiagnosticReport\",
     \"DocumentManifest\", \"DocumentReference\", \"DomainResource\", \"EffectEvidenceSynthesis\",
     \"EligibilityRequest\", \"EligibilityResponse\", \"Encounter\", \"Endpoint\",
     \"EnrollmentRequest\", \"EnrollmentResponse\", \"EpisodeOfCare\", \"EventDefinition\",
     \"Evidence\", \"EvidenceVariable\", \"ExampleScenario\", \"ExpansionProfile\",
     \"ExplanationOfBenefit\", \"FamilyMemberHistory\", \"Flag\", \"Goal\", \"GraphDefinition\",
     \"Group\", \"GuidanceResponse\", \"HealthcareService\", \"ImagingManifest\", \"ImagingStudy\",
     \"Immunization\", \"ImmunizationEvaluation\", \"ImmunizationRecommendation\",
     \"ImplementationGuide\", \"InsurancePlan\", \"Invoice\", \"Library\", \"Linkage\", \"List\",
     \"Location\", \"Measure\", \"MeasureReport\", \"Media\", \"Medication\",
     \"MedicationAdministration\", \"MedicationDispense\", \"MedicationKnowledge\",
     \"MedicationRequest\", \"MedicationStatement\", \"MedicinalProduct\",
     \"MedicinalProductAuthorization\", \"MedicinalProductContraindication\",
     \"MedicinalProductIndication\", \"MedicinalProductIngredient\",
     \"MedicinalProductInteraction\", \"MedicinalProductManufactured\",
     \"MedicinalProductPackaged\", \"MedicinalProductPharmaceutical\",
     \"MedicinalProductUndesirableEffect\", \"MessageDefinition\", \"MessageHeader\",
     \"MolecularSequence\", \"NamingSystem\", \"NutritionOrder\", \"Observation\",
     \"ObservationDefinition\", \"OperationDefinition\", \"OperationOutcome\", \"Organization\",
     \"OrganizationAffiliation\", \"Parameters\", \"Patient\", \"PaymentNotice\",
     \"PaymentReconciliation\", \"Person\", \"PlanDefinition\", \"Practitioner\",
     \"PractitionerRole\", \"Procedure\", \"ProcedureRequest\", \"ProcessRequest\",
     \"ProcessResponse\", \"Provenance\", \"Questionnaire\", \"QuestionnaireResponse\",
     \"ReferralRequest\", \"RelatedPerson\", \"RequestGroup\", \"ResearchDefinition\",
     \"ResearchElementDefinition\", \"ResearchStudy\", \"ResearchSubject\", \"Resource\",
     \"RiskAssessment\", \"RiskEvidenceSynthesis\", \"Schedule\", \"SearchParameter\", \"Sequence\",
     \"ServiceDefinition\", \"ServiceRequest\", \"Slot\", \"Specimen\", \"SpecimenDefinition\",
     \"StructureDefinition\", \"StructureMap\", \"Subscription\", \"Substance\",
     \"SubstanceNucleicAcid\", \"SubstancePolymer\", \"SubstanceProtein\",
     \"SubstanceReferenceInformation\", \"SubstanceSourceMaterial\", \"SubstanceSpecification\",
     \"SupplyDelivery\", \"SupplyRequest\", \"Task\", \"TerminologyCapabilities\", \"TestReport\",
     \"TestScript\", \"ValueSet\", \"VerificationResult\", and \"VisionPrescription\"."""
    resource_fhir_account: str = rest_field(name="resourceFhirAccount")
    """Domain name of FHIR account for this resource. Required."""
    resource_fhir_id: str = rest_field(name="resourceFhirId")
    """Id of HL7 FHIR resource. Required."""
    resource_version_id: int = rest_field(name="resourceVersionId")
    """VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or
     deleted(soft-deletion). Required."""

    @overload
    def __init__(
        self,
        *,
        resource_type: Union[str, "_models.HealthcareFhirResourceType"],
        resource_fhir_account: str,
        resource_fhir_id: str,
        resource_version_id: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HealthcareFhirResourceUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.HealthcareApis.FhirResourceUpdated event.


    :ivar resource_type: Type of HL7 FHIR resource. Required. Known values are: "Account",
     "ActivityDefinition", "AdverseEvent", "AllergyIntolerance", "Appointment",
     "AppointmentResponse", "AuditEvent", "Basic", "Binary", "BiologicallyDerivedProduct",
     "BodySite", "BodyStructure", "Bundle", "CapabilityStatement", "CarePlan", "CareTeam",
     "CatalogEntry", "ChargeItem", "ChargeItemDefinition", "Claim", "ClaimResponse",
     "ClinicalImpression", "CodeSystem", "Communication", "CommunicationRequest",
     "CompartmentDefinition", "Composition", "ConceptMap", "Condition", "Consent", "Contract",
     "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DataElement",
     "DetectedIssue", "Device", "DeviceComponent", "DeviceDefinition", "DeviceMetric",
     "DeviceRequest", "DeviceUseStatement", "DiagnosticReport", "DocumentManifest",
     "DocumentReference", "DomainResource", "EffectEvidenceSynthesis", "EligibilityRequest",
     "EligibilityResponse", "Encounter", "Endpoint", "EnrollmentRequest", "EnrollmentResponse",
     "EpisodeOfCare", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario",
     "ExpansionProfile", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal",
     "GraphDefinition", "Group", "GuidanceResponse", "HealthcareService", "ImagingManifest",
     "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation",
     "ImplementationGuide", "InsurancePlan", "Invoice", "Library", "Linkage", "List", "Location",
     "Measure", "MeasureReport", "Media", "Medication", "MedicationAdministration",
     "MedicationDispense", "MedicationKnowledge", "MedicationRequest", "MedicationStatement",
     "MedicinalProduct", "MedicinalProductAuthorization", "MedicinalProductContraindication",
     "MedicinalProductIndication", "MedicinalProductIngredient", "MedicinalProductInteraction",
     "MedicinalProductManufactured", "MedicinalProductPackaged", "MedicinalProductPharmaceutical",
     "MedicinalProductUndesirableEffect", "MessageDefinition", "MessageHeader", "MolecularSequence",
     "NamingSystem", "NutritionOrder", "Observation", "ObservationDefinition",
     "OperationDefinition", "OperationOutcome", "Organization", "OrganizationAffiliation",
     "Parameters", "Patient", "PaymentNotice", "PaymentReconciliation", "Person", "PlanDefinition",
     "Practitioner", "PractitionerRole", "Procedure", "ProcedureRequest", "ProcessRequest",
     "ProcessResponse", "Provenance", "Questionnaire", "QuestionnaireResponse", "ReferralRequest",
     "RelatedPerson", "RequestGroup", "ResearchDefinition", "ResearchElementDefinition",
     "ResearchStudy", "ResearchSubject", "Resource", "RiskAssessment", "RiskEvidenceSynthesis",
     "Schedule", "SearchParameter", "Sequence", "ServiceDefinition", "ServiceRequest", "Slot",
     "Specimen", "SpecimenDefinition", "StructureDefinition", "StructureMap", "Subscription",
     "Substance", "SubstanceNucleicAcid", "SubstancePolymer", "SubstanceProtein",
     "SubstanceReferenceInformation", "SubstanceSourceMaterial", "SubstanceSpecification",
     "SupplyDelivery", "SupplyRequest", "Task", "TerminologyCapabilities", "TestReport",
     "TestScript", "ValueSet", "VerificationResult", and "VisionPrescription".
    :vartype resource_type: str or ~azure.eventgrid.models.HealthcareFhirResourceType
    :ivar resource_fhir_account: Domain name of FHIR account for this resource. Required.
    :vartype resource_fhir_account: str
    :ivar resource_fhir_id: Id of HL7 FHIR resource. Required.
    :vartype resource_fhir_id: str
    :ivar resource_version_id: VersionId of HL7 FHIR resource. It changes when the resource is
     created, updated, or deleted(soft-deletion). Required.
    :vartype resource_version_id: int
    """

    resource_type: Union[str, "_models.HealthcareFhirResourceType"] = rest_field(name="resourceType")
    """Type of HL7 FHIR resource. Required. Known values are: \"Account\", \"ActivityDefinition\",
     \"AdverseEvent\", \"AllergyIntolerance\", \"Appointment\", \"AppointmentResponse\",
     \"AuditEvent\", \"Basic\", \"Binary\", \"BiologicallyDerivedProduct\", \"BodySite\",
     \"BodyStructure\", \"Bundle\", \"CapabilityStatement\", \"CarePlan\", \"CareTeam\",
     \"CatalogEntry\", \"ChargeItem\", \"ChargeItemDefinition\", \"Claim\", \"ClaimResponse\",
     \"ClinicalImpression\", \"CodeSystem\", \"Communication\", \"CommunicationRequest\",
     \"CompartmentDefinition\", \"Composition\", \"ConceptMap\", \"Condition\", \"Consent\",
     \"Contract\", \"Coverage\", \"CoverageEligibilityRequest\", \"CoverageEligibilityResponse\",
     \"DataElement\", \"DetectedIssue\", \"Device\", \"DeviceComponent\", \"DeviceDefinition\",
     \"DeviceMetric\", \"DeviceRequest\", \"DeviceUseStatement\", \"DiagnosticReport\",
     \"DocumentManifest\", \"DocumentReference\", \"DomainResource\", \"EffectEvidenceSynthesis\",
     \"EligibilityRequest\", \"EligibilityResponse\", \"Encounter\", \"Endpoint\",
     \"EnrollmentRequest\", \"EnrollmentResponse\", \"EpisodeOfCare\", \"EventDefinition\",
     \"Evidence\", \"EvidenceVariable\", \"ExampleScenario\", \"ExpansionProfile\",
     \"ExplanationOfBenefit\", \"FamilyMemberHistory\", \"Flag\", \"Goal\", \"GraphDefinition\",
     \"Group\", \"GuidanceResponse\", \"HealthcareService\", \"ImagingManifest\", \"ImagingStudy\",
     \"Immunization\", \"ImmunizationEvaluation\", \"ImmunizationRecommendation\",
     \"ImplementationGuide\", \"InsurancePlan\", \"Invoice\", \"Library\", \"Linkage\", \"List\",
     \"Location\", \"Measure\", \"MeasureReport\", \"Media\", \"Medication\",
     \"MedicationAdministration\", \"MedicationDispense\", \"MedicationKnowledge\",
     \"MedicationRequest\", \"MedicationStatement\", \"MedicinalProduct\",
     \"MedicinalProductAuthorization\", \"MedicinalProductContraindication\",
     \"MedicinalProductIndication\", \"MedicinalProductIngredient\",
     \"MedicinalProductInteraction\", \"MedicinalProductManufactured\",
     \"MedicinalProductPackaged\", \"MedicinalProductPharmaceutical\",
     \"MedicinalProductUndesirableEffect\", \"MessageDefinition\", \"MessageHeader\",
     \"MolecularSequence\", \"NamingSystem\", \"NutritionOrder\", \"Observation\",
     \"ObservationDefinition\", \"OperationDefinition\", \"OperationOutcome\", \"Organization\",
     \"OrganizationAffiliation\", \"Parameters\", \"Patient\", \"PaymentNotice\",
     \"PaymentReconciliation\", \"Person\", \"PlanDefinition\", \"Practitioner\",
     \"PractitionerRole\", \"Procedure\", \"ProcedureRequest\", \"ProcessRequest\",
     \"ProcessResponse\", \"Provenance\", \"Questionnaire\", \"QuestionnaireResponse\",
     \"ReferralRequest\", \"RelatedPerson\", \"RequestGroup\", \"ResearchDefinition\",
     \"ResearchElementDefinition\", \"ResearchStudy\", \"ResearchSubject\", \"Resource\",
     \"RiskAssessment\", \"RiskEvidenceSynthesis\", \"Schedule\", \"SearchParameter\", \"Sequence\",
     \"ServiceDefinition\", \"ServiceRequest\", \"Slot\", \"Specimen\", \"SpecimenDefinition\",
     \"StructureDefinition\", \"StructureMap\", \"Subscription\", \"Substance\",
     \"SubstanceNucleicAcid\", \"SubstancePolymer\", \"SubstanceProtein\",
     \"SubstanceReferenceInformation\", \"SubstanceSourceMaterial\", \"SubstanceSpecification\",
     \"SupplyDelivery\", \"SupplyRequest\", \"Task\", \"TerminologyCapabilities\", \"TestReport\",
     \"TestScript\", \"ValueSet\", \"VerificationResult\", and \"VisionPrescription\"."""
    resource_fhir_account: str = rest_field(name="resourceFhirAccount")
    """Domain name of FHIR account for this resource. Required."""
    resource_fhir_id: str = rest_field(name="resourceFhirId")
    """Id of HL7 FHIR resource. Required."""
    resource_version_id: int = rest_field(name="resourceVersionId")
    """VersionId of HL7 FHIR resource. It changes when the resource is created, updated, or
     deleted(soft-deletion). Required."""

    @overload
    def __init__(
        self,
        *,
        resource_type: Union[str, "_models.HealthcareFhirResourceType"],
        resource_fhir_account: str,
        resource_fhir_id: str,
        resource_version_id: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IotHubDeviceConnectedEventData(DeviceConnectionStateEventProperties):
    """Event data for Microsoft.Devices.DeviceConnected event.


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar module_id: The unique identifier of the module. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype module_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar device_connection_state_event_info: Information about the device connection state event.
     Required.
    :vartype device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        module_id: str,
        hub_name: str,
        device_connection_state_event_info: "_models.DeviceConnectionStateEventInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IotHubDeviceCreatedEventData(DeviceLifeCycleEventProperties):
    """Event data for Microsoft.Devices.DeviceCreated event.


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar twin: Information about the device twin, which is the cloud representation of application
     device metadata. Required.
    :vartype twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        hub_name: str,
        twin: "_models.DeviceTwinInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IotHubDeviceDeletedEventData(DeviceLifeCycleEventProperties):
    """Event data for Microsoft.Devices.DeviceDeleted event.


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar twin: Information about the device twin, which is the cloud representation of application
     device metadata. Required.
    :vartype twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        hub_name: str,
        twin: "_models.DeviceTwinInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IotHubDeviceDisconnectedEventData(DeviceConnectionStateEventProperties):
    """Event data for Microsoft.Devices.DeviceDisconnected event.


    :ivar device_id: The unique identifier of the device. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype device_id: str
    :ivar module_id: The unique identifier of the module. This case-sensitive string can be up to
     128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following
     special characters: - : . + % _ &#35; * ? ! ( ) , = ``@`` ; $ '. Required.
    :vartype module_id: str
    :ivar hub_name: Name of the IoT Hub where the device was created or deleted. Required.
    :vartype hub_name: str
    :ivar device_connection_state_event_info: Information about the device connection state event.
     Required.
    :vartype device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        module_id: str,
        hub_name: str,
        device_connection_state_event_info: "_models.DeviceConnectionStateEventInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IotHubDeviceTelemetryEventData(DeviceTelemetryEventProperties):
    """Event data for Microsoft.Devices.DeviceTelemetry event.


    :ivar body: The content of the message from the device. Required.
    :vartype body: dict[str, any]
    :ivar properties: Application properties are user-defined strings that can be added to the
     message. These fields are optional. Required.
    :vartype properties: dict[str, str]
    :ivar system_properties: System properties help identify contents and source of the messages.
     Required.
    :vartype system_properties: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        body: Dict[str, Any],
        properties: Dict[str, str],
        system_properties: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultAccessPolicyChangedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.KeyVault.VaultAccessPolicyChanged event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultCertificateExpiredEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateExpired
    event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultCertificateNearExpiryEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNearExpiry
    event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultCertificateNewVersionCreatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.KeyVault.CertificateNewVersionCreated event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultKeyExpiredEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyExpired event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultKeyNearExpiryEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNearExpiry event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultKeyNewVersionCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNewVersionCreated
    event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultSecretExpiredEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretExpired event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultSecretNearExpiryEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNearExpiry
    event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultSecretNewVersionCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.KeyVault.SecretNewVersionCreated event.


    :ivar id: The id of the object that triggered this event. Required.
    :vartype id: str
    :ivar vault_name: Key vault name of the object that triggered this event. Required.
    :vartype vault_name: str
    :ivar object_type: The type of the object that triggered this event. Required.
    :vartype object_type: str
    :ivar object_name: The name of the object that triggered this event. Required.
    :vartype object_name: str
    :ivar version: The version of the object that triggered this event. Required.
    :vartype version: str
    :ivar n_b_f: Not before date of the object that triggered this event. Required.
    :vartype n_b_f: float
    :ivar e_x_p: The expiration date of the object that triggered this event. Required.
    :vartype e_x_p: float
    """

    id: str = rest_field(name="Id")
    """The id of the object that triggered this event. Required."""
    vault_name: str = rest_field(name="VaultName")
    """Key vault name of the object that triggered this event. Required."""
    object_type: str = rest_field(name="ObjectType")
    """The type of the object that triggered this event. Required."""
    object_name: str = rest_field(name="ObjectName")
    """The name of the object that triggered this event. Required."""
    version: str = rest_field(name="Version")
    """The version of the object that triggered this event. Required."""
    n_b_f: float = rest_field(name="NBF")
    """Not before date of the object that triggered this event. Required."""
    e_x_p: float = rest_field(name="EXP")
    """The expiration date of the object that triggered this event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        vault_name: str,
        object_type: str,
        object_name: str,
        version: str,
        n_b_f: float,
        e_x_p: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MachineLearningServicesDatasetDriftDetectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.MachineLearningServices.DatasetDriftDetected event.


    :ivar data_drift_id: The ID of the data drift monitor that triggered the event. Required.
    :vartype data_drift_id: str
    :ivar data_drift_name: The name of the data drift monitor that triggered the event. Required.
    :vartype data_drift_name: str
    :ivar run_id: The ID of the Run that detected data drift. Required.
    :vartype run_id: str
    :ivar base_dataset_id: The ID of the base Dataset used to detect drift. Required.
    :vartype base_dataset_id: str
    :ivar target_dataset_id: The ID of the target Dataset used to detect drift. Required.
    :vartype target_dataset_id: str
    :ivar drift_coefficient: The coefficient result that triggered the event. Required.
    :vartype drift_coefficient: float
    :ivar start_time: The start time of the target dataset time series that resulted in drift
     detection. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the target dataset time series that resulted in drift
     detection. Required.
    :vartype end_time: ~datetime.datetime
    """

    data_drift_id: str = rest_field(name="dataDriftId")
    """The ID of the data drift monitor that triggered the event. Required."""
    data_drift_name: str = rest_field(name="dataDriftName")
    """The name of the data drift monitor that triggered the event. Required."""
    run_id: str = rest_field(name="runId")
    """The ID of the Run that detected data drift. Required."""
    base_dataset_id: str = rest_field(name="baseDatasetId")
    """The ID of the base Dataset used to detect drift. Required."""
    target_dataset_id: str = rest_field(name="targetDatasetId")
    """The ID of the target Dataset used to detect drift. Required."""
    drift_coefficient: float = rest_field(name="driftCoefficient")
    """The coefficient result that triggered the event. Required."""
    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """The start time of the target dataset time series that resulted in drift detection. Required."""
    end_time: datetime.datetime = rest_field(name="endTime", format="rfc3339")
    """The end time of the target dataset time series that resulted in drift detection. Required."""

    @overload
    def __init__(
        self,
        *,
        data_drift_id: str,
        data_drift_name: str,
        run_id: str,
        base_dataset_id: str,
        target_dataset_id: str,
        drift_coefficient: float,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MachineLearningServicesModelDeployedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.MachineLearningServices.ModelDeployed event.


    :ivar service_name: The name of the deployed service. Required.
    :vartype service_name: str
    :ivar service_compute_type: The compute type (e.g. ACI, AKS) of the deployed service. Required.
    :vartype service_compute_type: str
    :ivar model_ids: A common separated list of model IDs. The IDs of the models deployed in the
     service. Required.
    :vartype model_ids: str
    :ivar service_tags: The tags of the deployed service. Required.
    :vartype service_tags: dict[str, any]
    :ivar service_properties: The properties of the deployed service. Required.
    :vartype service_properties: dict[str, any]
    """

    service_name: str = rest_field(name="serviceName")
    """The name of the deployed service. Required."""
    service_compute_type: str = rest_field(name="serviceComputeType")
    """The compute type (e.g. ACI, AKS) of the deployed service. Required."""
    model_ids: str = rest_field(name="modelIds")
    """A common separated list of model IDs. The IDs of the models deployed in the service. Required."""
    service_tags: Dict[str, Any] = rest_field(name="serviceTags")
    """The tags of the deployed service. Required."""
    service_properties: Dict[str, Any] = rest_field(name="serviceProperties")
    """The properties of the deployed service. Required."""

    @overload
    def __init__(
        self,
        *,
        service_name: str,
        service_compute_type: str,
        model_ids: str,
        service_tags: Dict[str, Any],
        service_properties: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MachineLearningServicesModelRegisteredEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.MachineLearningServices.ModelRegistered event.


    :ivar model_name: The name of the model that was registered. Required.
    :vartype model_name: str
    :ivar model_version: The version of the model that was registered. Required.
    :vartype model_version: str
    :ivar model_tags: The tags of the model that was registered. Required.
    :vartype model_tags: dict[str, any]
    :ivar model_properties: The properties of the model that was registered. Required.
    :vartype model_properties: dict[str, any]
    """

    model_name: str = rest_field(name="modelName")
    """The name of the model that was registered. Required."""
    model_version: str = rest_field(name="modelVersion")
    """The version of the model that was registered. Required."""
    model_tags: Dict[str, Any] = rest_field(name="modelTags")
    """The tags of the model that was registered. Required."""
    model_properties: Dict[str, Any] = rest_field(name="modelProperties")
    """The properties of the model that was registered. Required."""

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        model_version: str,
        model_tags: Dict[str, Any],
        model_properties: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MachineLearningServicesRunCompletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.MachineLearningServices.RunCompleted event.


    :ivar experiment_id: The ID of the experiment that the run belongs to. Required.
    :vartype experiment_id: str
    :ivar experiment_name: The name of the experiment that the run belongs to. Required.
    :vartype experiment_name: str
    :ivar run_id: The ID of the Run that was completed. Required.
    :vartype run_id: str
    :ivar run_type: The Run Type of the completed Run. Required.
    :vartype run_type: str
    :ivar run_tags: The tags of the completed Run. Required.
    :vartype run_tags: dict[str, any]
    :ivar run_properties: The properties of the completed Run. Required.
    :vartype run_properties: dict[str, any]
    """

    experiment_id: str = rest_field(name="experimentId")
    """The ID of the experiment that the run belongs to. Required."""
    experiment_name: str = rest_field(name="experimentName")
    """The name of the experiment that the run belongs to. Required."""
    run_id: str = rest_field(name="runId")
    """The ID of the Run that was completed. Required."""
    run_type: str = rest_field(name="runType")
    """The Run Type of the completed Run. Required."""
    run_tags: Dict[str, Any] = rest_field(name="runTags")
    """The tags of the completed Run. Required."""
    run_properties: Dict[str, Any] = rest_field(name="runProperties")
    """The properties of the completed Run. Required."""

    @overload
    def __init__(
        self,
        *,
        experiment_id: str,
        experiment_name: str,
        run_id: str,
        run_type: str,
        run_tags: Dict[str, Any],
        run_properties: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MachineLearningServicesRunStatusChangedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.MachineLearningServices.RunStatusChanged event.


    :ivar experiment_id: The ID of the experiment that the Machine Learning Run belongs to.
     Required.
    :vartype experiment_id: str
    :ivar experiment_name: The name of the experiment that the Machine Learning Run belongs to.
     Required.
    :vartype experiment_name: str
    :ivar run_id: The ID of the Machine Learning Run. Required.
    :vartype run_id: str
    :ivar run_type: The Run Type of the Machine Learning Run. Required.
    :vartype run_type: str
    :ivar run_tags: The tags of the Machine Learning Run. Required.
    :vartype run_tags: dict[str, any]
    :ivar run_properties: The properties of the Machine Learning Run. Required.
    :vartype run_properties: dict[str, any]
    :ivar run_status: The status of the Machine Learning Run. Required.
    :vartype run_status: str
    """

    experiment_id: str = rest_field(name="experimentId")
    """The ID of the experiment that the Machine Learning Run belongs to. Required."""
    experiment_name: str = rest_field(name="experimentName")
    """The name of the experiment that the Machine Learning Run belongs to. Required."""
    run_id: str = rest_field(name="runId")
    """The ID of the Machine Learning Run. Required."""
    run_type: str = rest_field(name="runType")
    """The Run Type of the Machine Learning Run. Required."""
    run_tags: Dict[str, Any] = rest_field(name="runTags")
    """The tags of the Machine Learning Run. Required."""
    run_properties: Dict[str, Any] = rest_field(name="runProperties")
    """The properties of the Machine Learning Run. Required."""
    run_status: str = rest_field(name="runStatus")
    """The status of the Machine Learning Run. Required."""

    @overload
    def __init__(
        self,
        *,
        experiment_id: str,
        experiment_name: str,
        run_id: str,
        run_type: str,
        run_tags: Dict[str, Any],
        run_properties: Dict[str, Any],
        run_status: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MapsGeofenceEventProperties(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered,
    GeofenceExited, GeofenceResult).


    :ivar expired_geofence_geometry_id: Lists of the geometry ID of the geofence which is expired
     relative to the user time in the request. Required.
    :vartype expired_geofence_geometry_id: list[str]
    :ivar geometries: Lists the fence geometries that either fully contain the coordinate position
     or have an overlap with the searchBuffer around the fence. Required.
    :vartype geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :ivar invalid_period_geofence_geometry_id: Lists of the geometry ID of the geofence which is in
     invalid period relative to the user time in the request. Required.
    :vartype invalid_period_geofence_geometry_id: list[str]
    :ivar is_event_published: True if at least one event is published to the Azure Maps event
     subscriber, false if no event is published to the Azure Maps event subscriber. Required.
    :vartype is_event_published: bool
    """

    expired_geofence_geometry_id: List[str] = rest_field(name="expiredGeofenceGeometryId")
    """Lists of the geometry ID of the geofence which is expired relative to the user time in the
     request. Required."""
    geometries: List["_models.MapsGeofenceGeometry"] = rest_field()
    """Lists the fence geometries that either fully contain the coordinate position or have an overlap
     with the searchBuffer around the fence. Required."""
    invalid_period_geofence_geometry_id: List[str] = rest_field(name="invalidPeriodGeofenceGeometryId")
    """Lists of the geometry ID of the geofence which is in invalid period relative to the user time
     in the request. Required."""
    is_event_published: bool = rest_field(name="isEventPublished")
    """True if at least one event is published to the Azure Maps event subscriber, false if no event
     is published to the Azure Maps event subscriber. Required."""

    @overload
    def __init__(
        self,
        *,
        expired_geofence_geometry_id: List[str],
        geometries: List["_models.MapsGeofenceGeometry"],
        invalid_period_geofence_geometry_id: List[str],
        is_event_published: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MapsGeofenceEnteredEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event.


    :ivar expired_geofence_geometry_id: Lists of the geometry ID of the geofence which is expired
     relative to the user time in the request. Required.
    :vartype expired_geofence_geometry_id: list[str]
    :ivar geometries: Lists the fence geometries that either fully contain the coordinate position
     or have an overlap with the searchBuffer around the fence. Required.
    :vartype geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :ivar invalid_period_geofence_geometry_id: Lists of the geometry ID of the geofence which is in
     invalid period relative to the user time in the request. Required.
    :vartype invalid_period_geofence_geometry_id: list[str]
    :ivar is_event_published: True if at least one event is published to the Azure Maps event
     subscriber, false if no event is published to the Azure Maps event subscriber. Required.
    :vartype is_event_published: bool
    """

    @overload
    def __init__(
        self,
        *,
        expired_geofence_geometry_id: List[str],
        geometries: List["_models.MapsGeofenceGeometry"],
        invalid_period_geofence_geometry_id: List[str],
        is_event_published: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MapsGeofenceExitedEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event.


    :ivar expired_geofence_geometry_id: Lists of the geometry ID of the geofence which is expired
     relative to the user time in the request. Required.
    :vartype expired_geofence_geometry_id: list[str]
    :ivar geometries: Lists the fence geometries that either fully contain the coordinate position
     or have an overlap with the searchBuffer around the fence. Required.
    :vartype geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :ivar invalid_period_geofence_geometry_id: Lists of the geometry ID of the geofence which is in
     invalid period relative to the user time in the request. Required.
    :vartype invalid_period_geofence_geometry_id: list[str]
    :ivar is_event_published: True if at least one event is published to the Azure Maps event
     subscriber, false if no event is published to the Azure Maps event subscriber. Required.
    :vartype is_event_published: bool
    """

    @overload
    def __init__(
        self,
        *,
        expired_geofence_geometry_id: List[str],
        geometries: List["_models.MapsGeofenceGeometry"],
        invalid_period_geofence_geometry_id: List[str],
        is_event_published: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MapsGeofenceGeometry(_model_base.Model):
    """The geofence geometry.


    :ivar device_id: ID of the device. Required.
    :vartype device_id: str
    :ivar distance: Distance from the coordinate to the closest border of the geofence. Positive
     means the coordinate is outside of the geofence. If the coordinate is outside of the geofence,
     but more than the value of searchBuffer away from the closest geofence border, then the value
     is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside
     the polygon, but more than the value of searchBuffer away from the closest geofencing
     border,then the value is -999. A value of 999 means that there is great confidence the
     coordinate is well outside the geofence. A value of -999 means that there is great confidence
     the coordinate is well within the geofence. Required.
    :vartype distance: float
    :ivar geometry_id: The unique ID for the geofence geometry. Required.
    :vartype geometry_id: str
    :ivar nearest_lat: Latitude of the nearest point of the geometry. Required.
    :vartype nearest_lat: float
    :ivar nearest_lon: Longitude of the nearest point of the geometry. Required.
    :vartype nearest_lon: float
    :ivar ud_id: The unique id returned from user upload service when uploading a geofence. Will
     not be included in geofencing post API. Required.
    :vartype ud_id: str
    """

    device_id: str = rest_field(name="deviceId")
    """ID of the device. Required."""
    distance: float = rest_field()
    """Distance from the coordinate to the closest border of the geofence. Positive means the
     coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more
     than the value of searchBuffer away from the closest geofence border, then the value is 999.
     Negative means the coordinate is inside of the geofence. If the coordinate is inside the
     polygon, but more than the value of searchBuffer away from the closest geofencing border,then
     the value is -999. A value of 999 means that there is great confidence the coordinate is well
     outside the geofence. A value of -999 means that there is great confidence the coordinate is
     well within the geofence. Required."""
    geometry_id: str = rest_field(name="geometryId")
    """The unique ID for the geofence geometry. Required."""
    nearest_lat: float = rest_field(name="nearestLat")
    """Latitude of the nearest point of the geometry. Required."""
    nearest_lon: float = rest_field(name="nearestLon")
    """Longitude of the nearest point of the geometry. Required."""
    ud_id: str = rest_field(name="udId")
    """The unique id returned from user upload service when uploading a geofence. Will not be included
     in geofencing post API. Required."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        distance: float,
        geometry_id: str,
        nearest_lat: float,
        nearest_lon: float,
        ud_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MapsGeofenceResultEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event.


    :ivar expired_geofence_geometry_id: Lists of the geometry ID of the geofence which is expired
     relative to the user time in the request. Required.
    :vartype expired_geofence_geometry_id: list[str]
    :ivar geometries: Lists the fence geometries that either fully contain the coordinate position
     or have an overlap with the searchBuffer around the fence. Required.
    :vartype geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :ivar invalid_period_geofence_geometry_id: Lists of the geometry ID of the geofence which is in
     invalid period relative to the user time in the request. Required.
    :vartype invalid_period_geofence_geometry_id: list[str]
    :ivar is_event_published: True if at least one event is published to the Azure Maps event
     subscriber, false if no event is published to the Azure Maps event subscriber. Required.
    :vartype is_event_published: bool
    """

    @overload
    def __init__(
        self,
        *,
        expired_geofence_geometry_id: List[str],
        geometries: List["_models.MapsGeofenceGeometry"],
        invalid_period_geofence_geometry_id: List[str],
        is_event_published: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobStateChangeEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
      Microsoft.Media.JobStateChange event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    """

    previous_state: Union[str, "_models.MediaJobState"] = rest_field(name="previousState")
    """The previous state of the Job. Required. Known values are: \"Canceled\", \"Canceling\",
     \"Error\", \"Finished\", \"Processing\", \"Queued\", and \"Scheduled\"."""
    state: Union[str, "_models.MediaJobState"] = rest_field()
    """The new state of the Job. Required. Known values are: \"Canceled\", \"Canceling\", \"Error\",
     \"Finished\", \"Processing\", \"Queued\", and \"Scheduled\"."""
    correlation_data: Dict[str, str] = rest_field(name="correlationData")
    """Gets the Job correlation data. Required."""

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobCanceledEventData(MediaJobStateChangeEventData):
    """Job canceled event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.JobCanceled event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    :ivar outputs: Gets the Job outputs. Required.
    :vartype outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    outputs: List["_models.MediaJobOutput"] = rest_field()
    """Gets the Job outputs. Required."""

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
        outputs: List["_models.MediaJobOutput"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobCancelingEventData(MediaJobStateChangeEventData):
    """Job canceling event data. Schema of the data property of an EventGridEvent for
    a Microsoft.Media.JobCanceling event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobError(_model_base.Model):
    """Details of JobOutput errors.


    :ivar code: Error code describing the error. Required. Known values are: "ServiceError",
     "ServiceTransientError", "DownloadNotAccessible", "DownloadTransientError",
     "UploadNotAccessible", "UploadTransientError", "ConfigurationUnsupported", "ContentMalformed",
     "ContentUnsupported", and "IdentityUnsupported".
    :vartype code: str or ~azure.eventgrid.models.MediaJobErrorCode
    :ivar message: A human-readable language-dependent representation of the error. Required.
    :vartype message: str
    :ivar category: Helps with categorization of errors. Required. Known values are: "Service",
     "Download", "Upload", "Configuration", "Content", and "Account".
    :vartype category: str or ~azure.eventgrid.models.MediaJobErrorCategory
    :ivar retry: Indicates that it may be possible to retry the Job. If retry is unsuccessful,
     please contact Azure support via Azure Portal. Required. Known values are: "DoNotRetry" and
     "MayRetry".
    :vartype retry: str or ~azure.eventgrid.models.MediaJobRetry
    :ivar details: An array of details about specific errors that led to this reported error.
     Required.
    :vartype details: list[~azure.eventgrid.models.MediaJobErrorDetail]
    """

    code: Union[str, "_models.MediaJobErrorCode"] = rest_field()
    """Error code describing the error. Required. Known values are: \"ServiceError\",
     \"ServiceTransientError\", \"DownloadNotAccessible\", \"DownloadTransientError\",
     \"UploadNotAccessible\", \"UploadTransientError\", \"ConfigurationUnsupported\",
     \"ContentMalformed\", \"ContentUnsupported\", and \"IdentityUnsupported\"."""
    message: str = rest_field()
    """A human-readable language-dependent representation of the error. Required."""
    category: Union[str, "_models.MediaJobErrorCategory"] = rest_field()
    """Helps with categorization of errors. Required. Known values are: \"Service\", \"Download\",
     \"Upload\", \"Configuration\", \"Content\", and \"Account\"."""
    retry: Union[str, "_models.MediaJobRetry"] = rest_field()
    """Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact
     Azure support via Azure Portal. Required. Known values are: \"DoNotRetry\" and \"MayRetry\"."""
    details: List["_models.MediaJobErrorDetail"] = rest_field()
    """An array of details about specific errors that led to this reported error. Required."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.MediaJobErrorCode"],
        message: str,
        category: Union[str, "_models.MediaJobErrorCategory"],
        retry: Union[str, "_models.MediaJobRetry"],
        details: List["_models.MediaJobErrorDetail"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobErrorDetail(_model_base.Model):
    """Details of JobOutput errors.


    :ivar code: Code describing the error detail. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    """

    code: str = rest_field()
    """Code describing the error detail. Required."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobErroredEventData(MediaJobStateChangeEventData):
    """Job error state event data. Schema of the data property of an EventGridEvent
    for a Microsoft.Media.JobErrored event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    :ivar outputs: Gets the Job outputs. Required.
    :vartype outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    outputs: List["_models.MediaJobOutput"] = rest_field()
    """Gets the Job outputs. Required."""

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
        outputs: List["_models.MediaJobOutput"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobFinishedEventData(MediaJobStateChangeEventData):
    """Job finished event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.JobFinished event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    :ivar outputs: Gets the Job outputs. Required.
    :vartype outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    outputs: List["_models.MediaJobOutput"] = rest_field()
    """Gets the Job outputs. Required."""

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
        outputs: List["_models.MediaJobOutput"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutput(_model_base.Model):
    """The event data for a Job output.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    MediaJobOutputAsset


    :ivar _odata_type: The discriminator for derived types. Required. Default value is None.
    :vartype _odata_type: str
    :ivar error: Gets the Job output error. Required.
    :vartype error: ~azure.eventgrid.models.MediaJobError
    :ivar label: Gets the Job output label. Required.
    :vartype label: str
    :ivar progress: Gets the Job output progress. Required.
    :vartype progress: int
    :ivar state: Gets the Job output state. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    _odata_type: str = rest_discriminator(name="@odata.type")
    """The discriminator for derived types. Required. Default value is None."""
    error: "_models.MediaJobError" = rest_field()
    """Gets the Job output error. Required."""
    label: str = rest_field()
    """Gets the Job output label. Required."""
    progress: int = rest_field()
    """Gets the Job output progress. Required."""
    state: Union[str, "_models.MediaJobState"] = rest_field()
    """Gets the Job output state. Required. Known values are: \"Canceled\", \"Canceling\", \"Error\",
     \"Finished\", \"Processing\", \"Queued\", and \"Scheduled\"."""

    @overload
    def __init__(
        self,
        *,
        _odata_type: str,
        error: "_models.MediaJobError",
        label: str,
        progress: int,
        state: Union[str, "_models.MediaJobState"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputAsset(MediaJobOutput, discriminator="#Microsoft.Media.JobOutputAsset"):
    """The event data for a Job output asset.


    :ivar error: Gets the Job output error. Required.
    :vartype error: ~azure.eventgrid.models.MediaJobError
    :ivar label: Gets the Job output label. Required.
    :vartype label: str
    :ivar progress: Gets the Job output progress. Required.
    :vartype progress: int
    :ivar state: Gets the Job output state. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar asset_name: Gets the Job output asset name. Required.
    :vartype asset_name: str
    :ivar _odata_type: The discriminator for derived types. Required. Default value is
     "#Microsoft.Media.JobOutputAsset".
    :vartype _odata_type: str
    """

    asset_name: str = rest_field(name="assetName")
    """Gets the Job output asset name. Required."""
    _odata_type: Literal["#Microsoft.Media.JobOutputAsset"] = rest_discriminator(name="@odata.type")  # type: ignore
    """The discriminator for derived types. Required. Default value is
     \"#Microsoft.Media.JobOutputAsset\"."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.MediaJobError",
        label: str,
        progress: int,
        state: Union[str, "_models.MediaJobState"],
        asset_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, _odata_type="#Microsoft.Media.JobOutputAsset", **kwargs)


class MediaJobOutputStateChangeEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
      Microsoft.Media.JobOutputStateChange event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    previous_state: Union[str, "_models.MediaJobState"] = rest_field(name="previousState")
    """The previous state of the Job. Required. Known values are: \"Canceled\", \"Canceling\",
     \"Error\", \"Finished\", \"Processing\", \"Queued\", and \"Scheduled\"."""
    output: "_models.MediaJobOutput" = rest_field()
    """Gets the output. Required."""
    job_correlation_data: Dict[str, str] = rest_field(name="jobCorrelationData")
    """Gets the Job correlation data. Required."""

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputCanceledEventData(MediaJobOutputStateChangeEventData):
    """Job output canceled event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.JobOutputCanceled event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputCancelingEventData(MediaJobOutputStateChangeEventData):
    """Job output canceling event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.JobOutputCanceling event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputErroredEventData(MediaJobOutputStateChangeEventData):
    """Job output error event data. Schema of the data property of an EventGridEvent
    for a Microsoft.Media.JobOutputErrored event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputFinishedEventData(MediaJobOutputStateChangeEventData):
    """Job output finished event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.JobOutputFinished event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputProcessingEventData(MediaJobOutputStateChangeEventData):
    """Job output processing event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.JobOutputProcessing event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputProgressEventData(_model_base.Model):
    """Job Output Progress Event Data. Schema of the Data property of an
      EventGridEvent for a Microsoft.Media.JobOutputProgress event.


    :ivar label: Gets the Job output label. Required.
    :vartype label: str
    :ivar progress: Gets the Job output progress. Required.
    :vartype progress: int
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    label: str = rest_field()
    """Gets the Job output label. Required."""
    progress: int = rest_field()
    """Gets the Job output progress. Required."""
    job_correlation_data: Dict[str, str] = rest_field(name="jobCorrelationData")
    """Gets the Job correlation data. Required."""

    @overload
    def __init__(
        self,
        *,
        label: str,
        progress: int,
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobOutputScheduledEventData(MediaJobOutputStateChangeEventData):
    """Job output scheduled event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.JobOutputScheduled event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar output: Gets the output. Required.
    :vartype output: ~azure.eventgrid.models.MediaJobOutput
    :ivar job_correlation_data: Gets the Job correlation data. Required.
    :vartype job_correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        output: "_models.MediaJobOutput",
        job_correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobProcessingEventData(MediaJobStateChangeEventData):
    """Job processing event data. Schema of the data property of an EventGridEvent for
    a Microsoft.Media.JobProcessing event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaJobScheduledEventData(MediaJobStateChangeEventData):
    """Job scheduled event data. Schema of the data property of an EventGridEvent for
    a Microsoft.Media.JobScheduled event.


    :ivar previous_state: The previous state of the Job. Required. Known values are: "Canceled",
     "Canceling", "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Required. Known values are: "Canceled", "Canceling",
     "Error", "Finished", "Processing", "Queued", and "Scheduled".
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :ivar correlation_data: Gets the Job correlation data. Required.
    :vartype correlation_data: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        previous_state: Union[str, "_models.MediaJobState"],
        state: Union[str, "_models.MediaJobState"],
        correlation_data: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventChannelArchiveHeartbeatEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Channel Archive heartbeat event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventChannelArchiveHeartbeat event.


    :ivar channel_latency_ms: Gets the channel latency in ms. Required.
    :vartype channel_latency_ms: str
    :ivar latency_result_code: Gets the latency result code. Required.
    :vartype latency_result_code: str
    """

    channel_latency_ms: str = rest_field(name="channelLatencyMs")
    """Gets the channel latency in ms. Required."""
    latency_result_code: str = rest_field(name="latencyResultCode")
    """Gets the latency result code. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_latency_ms: str,
        latency_result_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventConnectionRejectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Encoder connection rejected event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventConnectionRejected event.


    :ivar ingest_url: Gets the ingest URL provided by the live event. Required.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id. Required.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP. Required.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port. Required.
    :vartype encoder_port: str
    :ivar result_code: Gets the result code. Required.
    :vartype result_code: str
    """

    ingest_url: str = rest_field(name="ingestUrl")
    """Gets the ingest URL provided by the live event. Required."""
    stream_id: str = rest_field(name="streamId")
    """Gets the stream Id. Required."""
    encoder_ip: str = rest_field(name="encoderIp")
    """Gets the remote IP. Required."""
    encoder_port: str = rest_field(name="encoderPort")
    """Gets the remote port. Required."""
    result_code: str = rest_field(name="resultCode")
    """Gets the result code. Required."""

    @overload
    def __init__(
        self,
        *,
        ingest_url: str,
        stream_id: str,
        encoder_ip: str,
        encoder_port: str,
        result_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventEncoderConnectedEventData(_model_base.Model):
    """Encoder connect event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventEncoderConnected event.


    :ivar ingest_url: Gets the ingest URL provided by the live event. Required.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id. Required.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP. Required.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port. Required.
    :vartype encoder_port: str
    """

    ingest_url: str = rest_field(name="ingestUrl")
    """Gets the ingest URL provided by the live event. Required."""
    stream_id: str = rest_field(name="streamId")
    """Gets the stream Id. Required."""
    encoder_ip: str = rest_field(name="encoderIp")
    """Gets the remote IP. Required."""
    encoder_port: str = rest_field(name="encoderPort")
    """Gets the remote port. Required."""

    @overload
    def __init__(
        self,
        *,
        ingest_url: str,
        stream_id: str,
        encoder_ip: str,
        encoder_port: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventEncoderDisconnectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Encoder disconnected event data. Schema of the Data property of an EventGridEvent for a
    Microsoft.Media.LiveEventEncoderDisconnected event.


    :ivar ingest_url: Gets the ingest URL provided by the live event. Required.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id. Required.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP. Required.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port. Required.
    :vartype encoder_port: str
    :ivar result_code: Gets the result code. Required.
    :vartype result_code: str
    """

    ingest_url: str = rest_field(name="ingestUrl")
    """Gets the ingest URL provided by the live event. Required."""
    stream_id: str = rest_field(name="streamId")
    """Gets the stream Id. Required."""
    encoder_ip: str = rest_field(name="encoderIp")
    """Gets the remote IP. Required."""
    encoder_port: str = rest_field(name="encoderPort")
    """Gets the remote port. Required."""
    result_code: str = rest_field(name="resultCode")
    """Gets the result code. Required."""

    @overload
    def __init__(
        self,
        *,
        ingest_url: str,
        stream_id: str,
        encoder_ip: str,
        encoder_port: str,
        result_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventIncomingDataChunkDroppedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventIncomingDataChunkDropped event.


    :ivar timestamp: Gets the timestamp of the data chunk dropped. Required.
    :vartype timestamp: str
    :ivar track_type: Gets the type of the track (Audio / Video). Required.
    :vartype track_type: str
    :ivar bitrate: Gets the bitrate of the track. Required.
    :vartype bitrate: int
    :ivar timescale: Gets the timescale of the Timestamp. Required.
    :vartype timescale: str
    :ivar result_code: Gets the result code for fragment drop operation. Required.
    :vartype result_code: str
    :ivar track_name: Gets the name of the track for which fragment is dropped. Required.
    :vartype track_name: str
    """

    timestamp: str = rest_field()
    """Gets the timestamp of the data chunk dropped. Required."""
    track_type: str = rest_field(name="trackType")
    """Gets the type of the track (Audio / Video). Required."""
    bitrate: int = rest_field()
    """Gets the bitrate of the track. Required."""
    timescale: str = rest_field()
    """Gets the timescale of the Timestamp. Required."""
    result_code: str = rest_field(name="resultCode")
    """Gets the result code for fragment drop operation. Required."""
    track_name: str = rest_field(name="trackName")
    """Gets the name of the track for which fragment is dropped. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: str,
        track_type: str,
        bitrate: int,
        timescale: str,
        result_code: str,
        track_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventIncomingStreamReceivedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Encoder connect event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventIncomingStreamReceived event.


    :ivar ingest_url: Gets the ingest URL provided by the live event. Required.
    :vartype ingest_url: str
    :ivar track_type: Gets the type of the track (Audio / Video). Required.
    :vartype track_type: str
    :ivar track_name: Gets the track name. Required.
    :vartype track_name: str
    :ivar bitrate: Gets the bitrate of the track. Required.
    :vartype bitrate: int
    :ivar encoder_ip: Gets the remote IP. Required.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port. Required.
    :vartype encoder_port: str
    :ivar timestamp: Gets the first timestamp of the data chunk received. Required.
    :vartype timestamp: str
    :ivar duration: Gets the duration of the first data chunk. Required.
    :vartype duration: str
    :ivar timescale: Gets the timescale in which timestamp is represented. Required.
    :vartype timescale: str
    """

    ingest_url: str = rest_field(name="ingestUrl")
    """Gets the ingest URL provided by the live event. Required."""
    track_type: str = rest_field(name="trackType")
    """Gets the type of the track (Audio / Video). Required."""
    track_name: str = rest_field(name="trackName")
    """Gets the track name. Required."""
    bitrate: int = rest_field()
    """Gets the bitrate of the track. Required."""
    encoder_ip: str = rest_field(name="encoderIp")
    """Gets the remote IP. Required."""
    encoder_port: str = rest_field(name="encoderPort")
    """Gets the remote port. Required."""
    timestamp: str = rest_field()
    """Gets the first timestamp of the data chunk received. Required."""
    duration: str = rest_field()
    """Gets the duration of the first data chunk. Required."""
    timescale: str = rest_field()
    """Gets the timescale in which timestamp is represented. Required."""

    @overload
    def __init__(
        self,
        *,
        ingest_url: str,
        track_type: str,
        track_name: str,
        bitrate: int,
        encoder_ip: str,
        encoder_port: str,
        timestamp: str,
        duration: str,
        timescale: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventIncomingStreamsOutOfSyncEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Incoming streams out of sync event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventIncomingStreamsOutOfSync event.


    :ivar min_last_timestamp: Gets the minimum last timestamp received. Required.
    :vartype min_last_timestamp: str
    :ivar type_of_stream_with_min_last_timestamp: Gets the type of stream with minimum last
     timestamp. Required.
    :vartype type_of_stream_with_min_last_timestamp: str
    :ivar max_last_timestamp: Gets the maximum timestamp among all the tracks (audio or video).
     Required.
    :vartype max_last_timestamp: str
    :ivar type_of_stream_with_max_last_timestamp: Gets the type of stream with maximum last
     timestamp. Required.
    :vartype type_of_stream_with_max_last_timestamp: str
    :ivar timescale_of_min_last_timestamp: Gets the timescale in which \\"MinLastTimestamp\\" is
     represented. Required.
    :vartype timescale_of_min_last_timestamp: str
    :ivar timescale_of_max_last_timestamp: Gets the timescale in which \\"MaxLastTimestamp\\" is
     represented. Required.
    :vartype timescale_of_max_last_timestamp: str
    """

    min_last_timestamp: str = rest_field(name="minLastTimestamp")
    """Gets the minimum last timestamp received. Required."""
    type_of_stream_with_min_last_timestamp: str = rest_field(name="typeOfStreamWithMinLastTimestamp")
    """Gets the type of stream with minimum last timestamp. Required."""
    max_last_timestamp: str = rest_field(name="maxLastTimestamp")
    """Gets the maximum timestamp among all the tracks (audio or video). Required."""
    type_of_stream_with_max_last_timestamp: str = rest_field(name="typeOfStreamWithMaxLastTimestamp")
    """Gets the type of stream with maximum last timestamp. Required."""
    timescale_of_min_last_timestamp: str = rest_field(name="timescaleOfMinLastTimestamp")
    """Gets the timescale in which \\"MinLastTimestamp\\" is represented. Required."""
    timescale_of_max_last_timestamp: str = rest_field(name="timescaleOfMaxLastTimestamp")
    """Gets the timescale in which \\"MaxLastTimestamp\\" is represented. Required."""

    @overload
    def __init__(
        self,
        *,
        min_last_timestamp: str,
        type_of_stream_with_min_last_timestamp: str,
        max_last_timestamp: str,
        type_of_stream_with_max_last_timestamp: str,
        timescale_of_min_last_timestamp: str,
        timescale_of_max_last_timestamp: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventIncomingVideoStreamsOutOfSyncEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Incoming video stream out of sync event data. Schema of the data property of an EventGridEvent
    for a Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync event.


    :ivar first_timestamp: Gets the first timestamp received for one of the quality levels.
     Required.
    :vartype first_timestamp: str
    :ivar first_duration: Gets the duration of the data chunk with first timestamp. Required.
    :vartype first_duration: str
    :ivar second_timestamp: Gets the timestamp received for some other quality levels. Required.
    :vartype second_timestamp: str
    :ivar second_duration: Gets the duration of the data chunk with second timestamp. Required.
    :vartype second_duration: str
    :ivar timescale: Gets the timescale in which both the timestamps and durations are represented.
     Required.
    :vartype timescale: str
    """

    first_timestamp: str = rest_field(name="firstTimestamp")
    """Gets the first timestamp received for one of the quality levels. Required."""
    first_duration: str = rest_field(name="firstDuration")
    """Gets the duration of the data chunk with first timestamp. Required."""
    second_timestamp: str = rest_field(name="secondTimestamp")
    """Gets the timestamp received for some other quality levels. Required."""
    second_duration: str = rest_field(name="secondDuration")
    """Gets the duration of the data chunk with second timestamp. Required."""
    timescale: str = rest_field()
    """Gets the timescale in which both the timestamps and durations are represented. Required."""

    @overload
    def __init__(
        self,
        *,
        first_timestamp: str,
        first_duration: str,
        second_timestamp: str,
        second_duration: str,
        timescale: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventIngestHeartbeatEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Ingest heartbeat event data. Schema of the data property of an EventGridEvent for a
    Microsoft.Media.LiveEventIngestHeartbeat event.


    :ivar track_type: Gets the type of the track (Audio / Video). Required.
    :vartype track_type: str
    :ivar track_name: Gets the track name. Required.
    :vartype track_name: str
    :ivar transcription_language: Gets the Live Transcription language. Required.
    :vartype transcription_language: str
    :ivar transcription_state: Gets the Live Transcription state. Required.
    :vartype transcription_state: str
    :ivar bitrate: Gets the bitrate of the track. Required.
    :vartype bitrate: int
    :ivar incoming_bitrate: Gets the incoming bitrate. Required.
    :vartype incoming_bitrate: int
    :ivar ingest_drift_value: Gets the track ingest drift value. Required.
    :vartype ingest_drift_value: str
    :ivar last_fragment_arrival_time: Gets the arrival UTC time of the last fragment. Required.
    :vartype last_fragment_arrival_time: str
    :ivar last_timestamp: Gets the last timestamp. Required.
    :vartype last_timestamp: str
    :ivar timescale: Gets the timescale of the last timestamp. Required.
    :vartype timescale: str
    :ivar overlap_count: Gets the fragment Overlap count. Required.
    :vartype overlap_count: int
    :ivar discontinuity_count: Gets the fragment Discontinuity count. Required.
    :vartype discontinuity_count: int
    :ivar nonincreasing_count: Gets Non increasing count. Required.
    :vartype nonincreasing_count: int
    :ivar unexpected_bitrate: Gets a value indicating whether unexpected bitrate is present or not.
     Required.
    :vartype unexpected_bitrate: bool
    :ivar state: Gets the state of the live event. Required.
    :vartype state: str
    :ivar healthy: Gets a value indicating whether preview is healthy or not. Required.
    :vartype healthy: bool
    """

    track_type: str = rest_field(name="trackType")
    """Gets the type of the track (Audio / Video). Required."""
    track_name: str = rest_field(name="trackName")
    """Gets the track name. Required."""
    transcription_language: str = rest_field(name="transcriptionLanguage")
    """Gets the Live Transcription language. Required."""
    transcription_state: str = rest_field(name="transcriptionState")
    """Gets the Live Transcription state. Required."""
    bitrate: int = rest_field()
    """Gets the bitrate of the track. Required."""
    incoming_bitrate: int = rest_field(name="incomingBitrate")
    """Gets the incoming bitrate. Required."""
    ingest_drift_value: str = rest_field(name="ingestDriftValue")
    """Gets the track ingest drift value. Required."""
    last_fragment_arrival_time: str = rest_field(name="lastFragmentArrivalTime")
    """Gets the arrival UTC time of the last fragment. Required."""
    last_timestamp: str = rest_field(name="lastTimestamp")
    """Gets the last timestamp. Required."""
    timescale: str = rest_field()
    """Gets the timescale of the last timestamp. Required."""
    overlap_count: int = rest_field(name="overlapCount")
    """Gets the fragment Overlap count. Required."""
    discontinuity_count: int = rest_field(name="discontinuityCount")
    """Gets the fragment Discontinuity count. Required."""
    nonincreasing_count: int = rest_field(name="nonincreasingCount")
    """Gets Non increasing count. Required."""
    unexpected_bitrate: bool = rest_field(name="unexpectedBitrate")
    """Gets a value indicating whether unexpected bitrate is present or not. Required."""
    state: str = rest_field()
    """Gets the state of the live event. Required."""
    healthy: bool = rest_field()
    """Gets a value indicating whether preview is healthy or not. Required."""

    @overload
    def __init__(
        self,
        *,
        track_type: str,
        track_name: str,
        transcription_language: str,
        transcription_state: str,
        bitrate: int,
        incoming_bitrate: int,
        ingest_drift_value: str,
        last_fragment_arrival_time: str,
        last_timestamp: str,
        timescale: str,
        overlap_count: int,
        discontinuity_count: int,
        nonincreasing_count: int,
        unexpected_bitrate: bool,
        state: str,
        healthy: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MediaLiveEventTrackDiscontinuityDetectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Ingest track discontinuity detected event data. Schema of the data property of an
    EventGridEvent for a Microsoft.Media.LiveEventTrackDiscontinuityDetected event.


    :ivar track_type: Gets the type of the track (Audio / Video). Required.
    :vartype track_type: str
    :ivar track_name: Gets the track name. Required.
    :vartype track_name: str
    :ivar bitrate: Gets the bitrate. Required.
    :vartype bitrate: int
    :ivar previous_timestamp: Gets the timestamp of the previous fragment. Required.
    :vartype previous_timestamp: str
    :ivar new_timestamp: Gets the timestamp of the current fragment. Required.
    :vartype new_timestamp: str
    :ivar timescale: Gets the timescale in which both timestamps and discontinuity gap are
     represented. Required.
    :vartype timescale: str
    :ivar discontinuity_gap: Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
     Required.
    :vartype discontinuity_gap: str
    """

    track_type: str = rest_field(name="trackType")
    """Gets the type of the track (Audio / Video). Required."""
    track_name: str = rest_field(name="trackName")
    """Gets the track name. Required."""
    bitrate: int = rest_field()
    """Gets the bitrate. Required."""
    previous_timestamp: str = rest_field(name="previousTimestamp")
    """Gets the timestamp of the previous fragment. Required."""
    new_timestamp: str = rest_field(name="newTimestamp")
    """Gets the timestamp of the current fragment. Required."""
    timescale: str = rest_field()
    """Gets the timescale in which both timestamps and discontinuity gap are represented. Required."""
    discontinuity_gap: str = rest_field(name="discontinuityGap")
    """Gets the discontinuity gap between PreviousTimestamp and NewTimestamp. Required."""

    @overload
    def __init__(
        self,
        *,
        track_type: str,
        track_name: str,
        bitrate: int,
        previous_timestamp: str,
        new_timestamp: str,
        timescale: str,
        discontinuity_gap: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MicrosoftTeamsAppIdentifierModel(_model_base.Model):
    """A Microsoft Teams application.


    :ivar app_id: The Id of the Microsoft Teams application. Required.
    :vartype app_id: str
    :ivar cloud: The cloud that the Microsoft Teams application belongs to. By default 'public' if
     missing. Required. Known values are: "public", "dod", and "gcch".
    :vartype cloud: str or ~azure.eventgrid.models.CommunicationCloudEnvironmentModel
    """

    app_id: str = rest_field(name="appId")
    """The Id of the Microsoft Teams application. Required."""
    cloud: Union[str, "_models.CommunicationCloudEnvironmentModel"] = rest_field()
    """The cloud that the Microsoft Teams application belongs to. By default 'public' if missing.
     Required. Known values are: \"public\", \"dod\", and \"gcch\"."""

    @overload
    def __init__(
        self,
        *,
        app_id: str,
        cloud: Union[str, "_models.CommunicationCloudEnvironmentModel"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MicrosoftTeamsUserIdentifierModel(_model_base.Model):
    """A Microsoft Teams user.


    :ivar user_id: The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id
     of the user. Required.
    :vartype user_id: str
    :ivar is_anonymous: True if the Microsoft Teams user is anonymous. By default false if missing.
     Required.
    :vartype is_anonymous: bool
    :ivar cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
     missing. Required. Known values are: "public", "dod", and "gcch".
    :vartype cloud: str or ~azure.eventgrid.models.CommunicationCloudEnvironmentModel
    """

    user_id: str = rest_field(name="userId")
    """The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user.
     Required."""
    is_anonymous: bool = rest_field(name="isAnonymous")
    """True if the Microsoft Teams user is anonymous. By default false if missing. Required."""
    cloud: Union[str, "_models.CommunicationCloudEnvironmentModel"] = rest_field()
    """The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. Required.
     Known values are: \"public\", \"dod\", and \"gcch\"."""

    @overload
    def __init__(
        self,
        *,
        user_id: str,
        is_anonymous: bool,
        cloud: Union[str, "_models.CommunicationCloudEnvironmentModel"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PhoneNumberIdentifierModel(_model_base.Model):
    """A phone number.


    :ivar value: The phone number in E.164 format. Required.
    :vartype value: str
    """

    value: str = rest_field()
    """The phone number in E.164 format. Required."""

    @overload
    def __init__(
        self,
        *,
        value: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PolicyInsightsPolicyStateChangedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.PolicyInsights.PolicyStateChanged event.


    :ivar timestamp: The time that the resource was scanned by Azure Policy in the Universal ISO
     8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar policy_assignment_id: The resource ID of the policy assignment. Required.
    :vartype policy_assignment_id: str
    :ivar policy_definition_id: The resource ID of the policy definition. Required.
    :vartype policy_definition_id: str
    :ivar policy_definition_reference_id: The reference ID for the policy definition inside the
     initiative definition, if the policy assignment is for an initiative. May be empty. Required.
    :vartype policy_definition_reference_id: str
    :ivar compliance_state: The compliance state of the resource with respect to the policy
     assignment. Required.
    :vartype compliance_state: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar compliance_reason_code: The compliance reason code. May be empty. Required.
    :vartype compliance_reason_code: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime
     format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required."""
    policy_assignment_id: str = rest_field(name="policyAssignmentId")
    """The resource ID of the policy assignment. Required."""
    policy_definition_id: str = rest_field(name="policyDefinitionId")
    """The resource ID of the policy definition. Required."""
    policy_definition_reference_id: str = rest_field(name="policyDefinitionReferenceId")
    """The reference ID for the policy definition inside the initiative definition, if the policy
     assignment is for an initiative. May be empty. Required."""
    compliance_state: str = rest_field(name="complianceState")
    """The compliance state of the resource with respect to the policy assignment. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    compliance_reason_code: str = rest_field(name="complianceReasonCode")
    """The compliance reason code. May be empty. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        policy_assignment_id: str,
        policy_definition_id: str,
        policy_definition_reference_id: str,
        compliance_state: str,
        subscription_id: str,
        compliance_reason_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PolicyInsightsPolicyStateCreatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.PolicyInsights.PolicyStateCreated event.


    :ivar timestamp: The time that the resource was scanned by Azure Policy in the Universal ISO
     8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar policy_assignment_id: The resource ID of the policy assignment. Required.
    :vartype policy_assignment_id: str
    :ivar policy_definition_id: The resource ID of the policy definition. Required.
    :vartype policy_definition_id: str
    :ivar policy_definition_reference_id: The reference ID for the policy definition inside the
     initiative definition, if the policy assignment is for an initiative. May be empty. Required.
    :vartype policy_definition_reference_id: str
    :ivar compliance_state: The compliance state of the resource with respect to the policy
     assignment. Required.
    :vartype compliance_state: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar compliance_reason_code: The compliance reason code. May be empty. Required.
    :vartype compliance_reason_code: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime
     format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required."""
    policy_assignment_id: str = rest_field(name="policyAssignmentId")
    """The resource ID of the policy assignment. Required."""
    policy_definition_id: str = rest_field(name="policyDefinitionId")
    """The resource ID of the policy definition. Required."""
    policy_definition_reference_id: str = rest_field(name="policyDefinitionReferenceId")
    """The reference ID for the policy definition inside the initiative definition, if the policy
     assignment is for an initiative. May be empty. Required."""
    compliance_state: str = rest_field(name="complianceState")
    """The compliance state of the resource with respect to the policy assignment. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    compliance_reason_code: str = rest_field(name="complianceReasonCode")
    """The compliance reason code. May be empty. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        policy_assignment_id: str,
        policy_definition_id: str,
        policy_definition_reference_id: str,
        compliance_state: str,
        subscription_id: str,
        compliance_reason_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PolicyInsightsPolicyStateDeletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.PolicyInsights.PolicyStateDeleted event.


    :ivar timestamp: The time that the resource was scanned by Azure Policy in the Universal ISO
     8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar policy_assignment_id: The resource ID of the policy assignment. Required.
    :vartype policy_assignment_id: str
    :ivar policy_definition_id: The resource ID of the policy definition. Required.
    :vartype policy_definition_id: str
    :ivar policy_definition_reference_id: The reference ID for the policy definition inside the
     initiative definition, if the policy assignment is for an initiative. May be empty. Required.
    :vartype policy_definition_reference_id: str
    :ivar compliance_state: The compliance state of the resource with respect to the policy
     assignment. Required.
    :vartype compliance_state: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar compliance_reason_code: The compliance reason code. May be empty. Required.
    :vartype compliance_reason_code: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime
     format yyyy-MM-ddTHH:mm:ss.fffffffZ. Required."""
    policy_assignment_id: str = rest_field(name="policyAssignmentId")
    """The resource ID of the policy assignment. Required."""
    policy_definition_id: str = rest_field(name="policyDefinitionId")
    """The resource ID of the policy definition. Required."""
    policy_definition_reference_id: str = rest_field(name="policyDefinitionReferenceId")
    """The reference ID for the policy definition inside the initiative definition, if the policy
     assignment is for an initiative. May be empty. Required."""
    compliance_state: str = rest_field(name="complianceState")
    """The compliance state of the resource with respect to the policy assignment. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    compliance_reason_code: str = rest_field(name="complianceReasonCode")
    """The compliance reason code. May be empty. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        policy_assignment_id: str,
        policy_definition_id: str,
        policy_definition_reference_id: str,
        compliance_state: str,
        subscription_id: str,
        compliance_reason_code: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RedisExportRDBCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ExportRDBCompleted
    event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar name: The name of this event. Required.
    :vartype name: str
    :ivar status: The status of this event. Failed or  succeeded. Required.
    :vartype status: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    name: str = rest_field()
    """The name of this event. Required."""
    status: str = rest_field()
    """The status of this event. Failed or  succeeded. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        name: str,
        status: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RedisImportRDBCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ImportRDBCompleted
    event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar name: The name of this event. Required.
    :vartype name: str
    :ivar status: The status of this event. Failed or  succeeded. Required.
    :vartype status: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    name: str = rest_field()
    """The name of this event. Required."""
    status: str = rest_field()
    """The status of this event. Failed or  succeeded. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        name: str,
        status: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RedisPatchingCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Cache.PatchingCompleted event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar name: The name of this event. Required.
    :vartype name: str
    :ivar status: The status of this event. Failed or  succeeded. Required.
    :vartype status: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    name: str = rest_field()
    """The name of this event. Required."""
    status: str = rest_field()
    """The status of this event. Failed or  succeeded. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        name: str,
        status: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RedisScalingCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ScalingCompleted event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar name: The name of this event. Required.
    :vartype name: str
    :ivar status: The status of this event. Failed or  succeeded. Required.
    :vartype status: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    name: str = rest_field()
    """The name of this event. Required."""
    status: str = rest_field()
    """The status of this event. Failed or  succeeded. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        name: str,
        status: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceActionCancelEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionCancel
    event. This is raised when a resource action operation is canceled.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceActionFailureEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceActionFailure event. This is raised when a resource action
    operation fails.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceActionSuccessEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceActionSuccess event. This is raised when a resource action
    operation succeeds.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceAuthorization(_model_base.Model):
    """The details of the authorization for the resource.


    :ivar scope: The scope of the authorization. Required.
    :vartype scope: str
    :ivar action: The action being requested. Required.
    :vartype action: str
    :ivar evidence: The evidence for the authorization. Required.
    :vartype evidence: dict[str, str]
    """

    scope: str = rest_field()
    """The scope of the authorization. Required."""
    action: str = rest_field()
    """The action being requested. Required."""
    evidence: Dict[str, str] = rest_field()
    """The evidence for the authorization. Required."""

    @overload
    def __init__(
        self,
        *,
        scope: str,
        action: str,
        evidence: Dict[str, str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceDeleteCancelEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteCancel
    event. This is raised when a resource delete operation is canceled.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceDeleteFailureEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceDeleteFailure event. This is raised when a resource delete
    operation fails.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceDeleteSuccessEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a resource delete
    operation succeeds.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceHttpRequest(_model_base.Model):
    """The details of the HTTP request.


    :ivar client_request_id: The client request ID. Required.
    :vartype client_request_id: str
    :ivar client_ip_address: The client IP address. Required.
    :vartype client_ip_address: str
    :ivar method: The request method. Required.
    :vartype method: str
    :ivar url: The url used in the request. Required.
    :vartype url: str
    """

    client_request_id: str = rest_field(name="clientRequestId")
    """The client request ID. Required."""
    client_ip_address: str = rest_field(name="clientIpAddress")
    """The client IP address. Required."""
    method: str = rest_field()
    """The request method. Required."""
    url: str = rest_field()
    """The url used in the request. Required."""

    @overload
    def __init__(
        self,
        *,
        client_request_id: str,
        client_ip_address: str,
        method: str,
        url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceUpdatedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the schema of the common properties across all ARN system topic events.


    :ivar resource_info: resourceInfo details for update event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceUpdatedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    :ivar api_version: api version of the resource properties bag. Required.
    :vartype api_version: str
    """

    resource_info: "_models.ResourceNotificationsResourceUpdatedDetails" = rest_field(name="resourceInfo")
    """resourceInfo details for update event. Required."""
    operational_info: "_models.ResourceNotificationsOperationalDetails" = rest_field(name="operationalInfo")
    """details about operational info. Required."""
    api_version: str = rest_field(name="apiVersion")
    """api version of the resource properties bag. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceUpdatedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
        api_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsHealthResourcesAnnotatedEventData(
    ResourceNotificationsResourceUpdatedEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ResourceNotifications.HealthResources.ResourceAnnotated event.


    :ivar resource_info: resourceInfo details for update event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceUpdatedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    :ivar api_version: api version of the resource properties bag. Required.
    :vartype api_version: str
    """

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceUpdatedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
        api_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData(
    ResourceNotificationsResourceUpdatedEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ResourceNotifications.HealthResources.AvailabilityStatusChanged
    event.


    :ivar resource_info: resourceInfo details for update event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceUpdatedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    :ivar api_version: api version of the resource properties bag. Required.
    :vartype api_version: str
    """

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceUpdatedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
        api_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsOperationalDetails(_model_base.Model):
    """details of operational info.


    :ivar resource_event_time: Date and Time when resource was updated. Required.
    :vartype resource_event_time: ~datetime.datetime
    """

    resource_event_time: datetime.datetime = rest_field(name="resourceEventTime", format="rfc3339")
    """Date and Time when resource was updated. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_event_time: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceDeletedDetails(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the schema of the properties under resource info which are common
    across all ARN system topic delete events.


    :ivar id: id of the resource for which the event is being emitted. Required.
    :vartype id: str
    :ivar name: name of the resource for which the event is being emitted. Required.
    :vartype name: str
    :ivar type: the type of the resource for which the event is being emitted. Required.
    :vartype type: str
    """

    id: str = rest_field()
    """id of the resource for which the event is being emitted. Required."""
    name: str = rest_field()
    """name of the resource for which the event is being emitted. Required."""
    type: str = rest_field()
    """the type of the resource for which the event is being emitted. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        type: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceDeletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the schema of the common properties across all ARN system topic
    delete events.


    :ivar resource_info: resourceInfo details for delete event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceDeletedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    """

    resource_info: "_models.ResourceNotificationsResourceDeletedDetails" = rest_field(name="resourceInfo")
    """resourceInfo details for delete event. Required."""
    operational_info: "_models.ResourceNotificationsOperationalDetails" = rest_field(name="operationalInfo")
    """details about operational info. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceDeletedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceManagementCreatedOrUpdatedEventData(
    ResourceNotificationsResourceUpdatedEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ResourceNotifications.Resources.CreatedOrUpdated event.


    :ivar resource_info: resourceInfo details for update event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceUpdatedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    :ivar api_version: api version of the resource properties bag. Required.
    :vartype api_version: str
    """

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceUpdatedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
        api_version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceManagementDeletedEventData(
    ResourceNotificationsResourceDeletedEventData
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ResourceNotifications.Resources.Deleted event.


    :ivar resource_info: resourceInfo details for delete event. Required.
    :vartype resource_info: ~azure.eventgrid.models.ResourceNotificationsResourceDeletedDetails
    :ivar operational_info: details about operational info. Required.
    :vartype operational_info: ~azure.eventgrid.models.ResourceNotificationsOperationalDetails
    """

    @overload
    def __init__(
        self,
        *,
        resource_info: "_models.ResourceNotificationsResourceDeletedDetails",
        operational_info: "_models.ResourceNotificationsOperationalDetails",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceNotificationsResourceUpdatedDetails(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the schema of the properties under resource info which are common
    across all ARN system topic events.


    :ivar id: id of the resource for which the event is being emitted. Required.
    :vartype id: str
    :ivar name: name of the resource for which the event is being emitted. Required.
    :vartype name: str
    :ivar type: the type of the resource for which the event is being emitted. Required.
    :vartype type: str
    :ivar location: the location of the resource for which the event is being emitted. Required.
    :vartype location: str
    :ivar tags: the tags on the resource for which the event is being emitted. Required.
    :vartype tags: dict[str, str]
    :ivar properties: properties in the payload of the resource for which the event is being
     emitted. Required.
    :vartype properties: dict[str, any]
    """

    id: str = rest_field()
    """id of the resource for which the event is being emitted. Required."""
    name: str = rest_field()
    """name of the resource for which the event is being emitted. Required."""
    type: str = rest_field()
    """the type of the resource for which the event is being emitted. Required."""
    location: str = rest_field()
    """the location of the resource for which the event is being emitted. Required."""
    tags: Dict[str, str] = rest_field()
    """the tags on the resource for which the event is being emitted. Required."""
    properties: Dict[str, Any] = rest_field()
    """properties in the payload of the resource for which the event is being emitted. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        type: str,
        location: str,
        tags: Dict[str, str],
        properties: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceWriteCancelEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteCancel
    event. This is raised when a resource create or update operation is canceled.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceWriteFailureEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteFailure
    event. This is raised when a resource create or update operation fails.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourceWriteSuccessEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteSuccess
    event. This is raised when a resource create or update operation succeeds.


    :ivar tenant_id: The tenant ID of the resource. Required.
    :vartype tenant_id: str
    :ivar subscription_id: The subscription ID of the resource. Required.
    :vartype subscription_id: str
    :ivar resource_group: The resource group of the resource. Required.
    :vartype resource_group: str
    :ivar resource_provider: The resource provider performing the operation. Required.
    :vartype resource_provider: str
    :ivar resource_uri: The URI of the resource in the operation. Required.
    :vartype resource_uri: str
    :ivar operation_name: The operation that was performed. Required.
    :vartype operation_name: str
    :ivar status: The status of the operation. Required.
    :vartype status: str
    :ivar authorization: The requested authorization for the operation. Required.
    :vartype authorization: ~azure.eventgrid.models.ResourceAuthorization
    :ivar claims: The properties of the claims. Required.
    :vartype claims: dict[str, str]
    :ivar correlation_id: An operation ID used for troubleshooting. Required.
    :vartype correlation_id: str
    :ivar http_request: The details of the operation. Required.
    :vartype http_request: ~azure.eventgrid.models.ResourceHttpRequest
    """

    tenant_id: str = rest_field(name="tenantId")
    """The tenant ID of the resource. Required."""
    subscription_id: str = rest_field(name="subscriptionId")
    """The subscription ID of the resource. Required."""
    resource_group: str = rest_field(name="resourceGroup")
    """The resource group of the resource. Required."""
    resource_provider: str = rest_field(name="resourceProvider")
    """The resource provider performing the operation. Required."""
    resource_uri: str = rest_field(name="resourceUri")
    """The URI of the resource in the operation. Required."""
    operation_name: str = rest_field(name="operationName")
    """The operation that was performed. Required."""
    status: str = rest_field()
    """The status of the operation. Required."""
    authorization: "_models.ResourceAuthorization" = rest_field()
    """The requested authorization for the operation. Required."""
    claims: Dict[str, str] = rest_field()
    """The properties of the claims. Required."""
    correlation_id: str = rest_field(name="correlationId")
    """An operation ID used for troubleshooting. Required."""
    http_request: "_models.ResourceHttpRequest" = rest_field(name="httpRequest")
    """The details of the operation. Required."""

    @overload
    def __init__(
        self,
        *,
        tenant_id: str,
        subscription_id: str,
        resource_group: str,
        resource_provider: str,
        resource_uri: str,
        operation_name: str,
        status: str,
        authorization: "_models.ResourceAuthorization",
        claims: Dict[str, str],
        correlation_id: str,
        http_request: "_models.ResourceHttpRequest",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.ActiveMessagesAvailablePeriodicNotifications event.


    :ivar namespace_name: The namespace name of the Microsoft.ServiceBus resource. Required.
    :vartype namespace_name: str
    :ivar request_uri: The endpoint of the Microsoft.ServiceBus resource. Required.
    :vartype request_uri: str
    :ivar entity_type: The entity type of the Microsoft.ServiceBus resource. Could be one of
     'queue' or 'subscriber'. Required.
    :vartype entity_type: str
    :ivar queue_name: The name of the Microsoft.ServiceBus queue. If the entity type is of type
     'subscriber', then this value will be null. Required.
    :vartype queue_name: str
    :ivar topic_name: The name of the Microsoft.ServiceBus topic. If the entity type is of type
     'queue', then this value will be null. Required.
    :vartype topic_name: str
    :ivar subscription_name: The name of the Microsoft.ServiceBus topic's subscription. If the
     entity type is of type 'queue', then this value will be null. Required.
    :vartype subscription_name: str
    """

    namespace_name: str = rest_field(name="namespaceName")
    """The namespace name of the Microsoft.ServiceBus resource. Required."""
    request_uri: str = rest_field(name="requestUri")
    """The endpoint of the Microsoft.ServiceBus resource. Required."""
    entity_type: str = rest_field(name="entityType")
    """The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
     Required."""
    queue_name: str = rest_field(name="queueName")
    """The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
     this value will be null. Required."""
    topic_name: str = rest_field(name="topicName")
    """The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
     value will be null. Required."""
    subscription_name: str = rest_field(name="subscriptionName")
    """The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
     'queue', then this value will be null. Required."""

    @overload
    def __init__(
        self,
        *,
        namespace_name: str,
        request_uri: str,
        entity_type: str,
        queue_name: str,
        topic_name: str,
        subscription_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ServiceBusActiveMessagesAvailableWithNoListenersEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event.


    :ivar namespace_name: The namespace name of the Microsoft.ServiceBus resource. Required.
    :vartype namespace_name: str
    :ivar request_uri: The endpoint of the Microsoft.ServiceBus resource. Required.
    :vartype request_uri: str
    :ivar entity_type: The entity type of the Microsoft.ServiceBus resource. Could be one of
     'queue' or 'subscriber'. Required.
    :vartype entity_type: str
    :ivar queue_name: The name of the Microsoft.ServiceBus queue. If the entity type is of type
     'subscriber', then this value will be null. Required.
    :vartype queue_name: str
    :ivar topic_name: The name of the Microsoft.ServiceBus topic. If the entity type is of type
     'queue', then this value will be null. Required.
    :vartype topic_name: str
    :ivar subscription_name: The name of the Microsoft.ServiceBus topic's subscription. If the
     entity type is of type 'queue', then this value will be null. Required.
    :vartype subscription_name: str
    """

    namespace_name: str = rest_field(name="namespaceName")
    """The namespace name of the Microsoft.ServiceBus resource. Required."""
    request_uri: str = rest_field(name="requestUri")
    """The endpoint of the Microsoft.ServiceBus resource. Required."""
    entity_type: str = rest_field(name="entityType")
    """The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
     Required."""
    queue_name: str = rest_field(name="queueName")
    """The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
     this value will be null. Required."""
    topic_name: str = rest_field(name="topicName")
    """The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
     value will be null. Required."""
    subscription_name: str = rest_field(name="subscriptionName")
    """The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
     'queue', then this value will be null. Required."""

    @overload
    def __init__(
        self,
        *,
        namespace_name: str,
        request_uri: str,
        entity_type: str,
        queue_name: str,
        topic_name: str,
        subscription_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.DeadletterMessagesAvailablePeriodicNotifications event.


    :ivar namespace_name: The namespace name of the Microsoft.ServiceBus resource. Required.
    :vartype namespace_name: str
    :ivar request_uri: The endpoint of the Microsoft.ServiceBus resource. Required.
    :vartype request_uri: str
    :ivar entity_type: The entity type of the Microsoft.ServiceBus resource. Could be one of
     'queue' or 'subscriber'. Required.
    :vartype entity_type: str
    :ivar queue_name: The name of the Microsoft.ServiceBus queue. If the entity type is of type
     'subscriber', then this value will be null. Required.
    :vartype queue_name: str
    :ivar topic_name: The name of the Microsoft.ServiceBus topic. If the entity type is of type
     'queue', then this value will be null. Required.
    :vartype topic_name: str
    :ivar subscription_name: The name of the Microsoft.ServiceBus topic's subscription. If the
     entity type is of type 'queue', then this value will be null. Required.
    :vartype subscription_name: str
    """

    namespace_name: str = rest_field(name="namespaceName")
    """The namespace name of the Microsoft.ServiceBus resource. Required."""
    request_uri: str = rest_field(name="requestUri")
    """The endpoint of the Microsoft.ServiceBus resource. Required."""
    entity_type: str = rest_field(name="entityType")
    """The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
     Required."""
    queue_name: str = rest_field(name="queueName")
    """The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
     this value will be null. Required."""
    topic_name: str = rest_field(name="topicName")
    """The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
     value will be null. Required."""
    subscription_name: str = rest_field(name="subscriptionName")
    """The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
     'queue', then this value will be null. Required."""

    @overload
    def __init__(
        self,
        *,
        namespace_name: str,
        request_uri: str,
        entity_type: str,
        queue_name: str,
        topic_name: str,
        subscription_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners event.


    :ivar namespace_name: The namespace name of the Microsoft.ServiceBus resource. Required.
    :vartype namespace_name: str
    :ivar request_uri: The endpoint of the Microsoft.ServiceBus resource. Required.
    :vartype request_uri: str
    :ivar entity_type: The entity type of the Microsoft.ServiceBus resource. Could be one of
     'queue' or 'subscriber'. Required.
    :vartype entity_type: str
    :ivar queue_name: The name of the Microsoft.ServiceBus queue. If the entity type is of type
     'subscriber', then this value will be null. Required.
    :vartype queue_name: str
    :ivar topic_name: The name of the Microsoft.ServiceBus topic. If the entity type is of type
     'queue', then this value will be null. Required.
    :vartype topic_name: str
    :ivar subscription_name: The name of the Microsoft.ServiceBus topic's subscription. If the
     entity type is of type 'queue', then this value will be null. Required.
    :vartype subscription_name: str
    """

    namespace_name: str = rest_field(name="namespaceName")
    """The namespace name of the Microsoft.ServiceBus resource. Required."""
    request_uri: str = rest_field(name="requestUri")
    """The endpoint of the Microsoft.ServiceBus resource. Required."""
    entity_type: str = rest_field(name="entityType")
    """The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
     Required."""
    queue_name: str = rest_field(name="queueName")
    """The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
     this value will be null. Required."""
    topic_name: str = rest_field(name="topicName")
    """The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
     value will be null. Required."""
    subscription_name: str = rest_field(name="subscriptionName")
    """The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
     'queue', then this value will be null. Required."""

    @overload
    def __init__(
        self,
        *,
        namespace_name: str,
        request_uri: str,
        entity_type: str,
        queue_name: str,
        topic_name: str,
        subscription_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SignalRServiceClientConnectionConnectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.SignalRService.ClientConnectionConnected event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar hub_name: The hub of connected client connection. Required.
    :vartype hub_name: str
    :ivar connection_id: The connection Id of connected client connection. Required.
    :vartype connection_id: str
    :ivar user_id: The user Id of connected client connection. Required.
    :vartype user_id: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    hub_name: str = rest_field(name="hubName")
    """The hub of connected client connection. Required."""
    connection_id: str = rest_field(name="connectionId")
    """The connection Id of connected client connection. Required."""
    user_id: str = rest_field(name="userId")
    """The user Id of connected client connection. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        hub_name: str,
        connection_id: str,
        user_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SignalRServiceClientConnectionDisconnectedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.SignalRService.ClientConnectionDisconnected event.


    :ivar timestamp: The time at which the event occurred. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar hub_name: The hub of connected client connection. Required.
    :vartype hub_name: str
    :ivar connection_id: The connection Id of connected client connection. Required.
    :vartype connection_id: str
    :ivar user_id: The user Id of connected client connection. Required.
    :vartype user_id: str
    :ivar error_message: The message of error that cause the client connection disconnected.
     Required.
    :vartype error_message: str
    """

    timestamp: datetime.datetime = rest_field(format="rfc3339")
    """The time at which the event occurred. Required."""
    hub_name: str = rest_field(name="hubName")
    """The hub of connected client connection. Required."""
    connection_id: str = rest_field(name="connectionId")
    """The connection Id of connected client connection. Required."""
    user_id: str = rest_field(name="userId")
    """The user Id of connected client connection. Required."""
    error_message: str = rest_field(name="errorMessage")
    """The message of error that cause the client connection disconnected. Required."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        hub_name: str,
        connection_id: str,
        user_id: str,
        error_message: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageAsyncOperationInitiatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Storage.AsyncOperationInitiated event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar content_type: The content type of the blob. This is the same as what would be returned in
     the Content-Type header from the blob.
    :vartype content_type: str
    :ivar content_length: The size of the blob in bytes. This is the same as what would be returned
     in the Content-Length header from the blob. Required.
    :vartype content_length: int
    :ivar blob_type: The type of blob. Required.
    :vartype blob_type: str
    :ivar url: The path to the blob. Required.
    :vartype url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular blob name. Users can use standard string comparison to understand the relative
     sequence of two events on the same blob name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The content type of the blob. This is the same as what would be returned in the Content-Type
     header from the blob."""
    content_length: int = rest_field(name="contentLength")
    """The size of the blob in bytes. This is the same as what would be returned in the Content-Length
     header from the blob. Required."""
    blob_type: str = rest_field(name="blobType")
    """The type of blob. Required."""
    url: str = rest_field()
    """The path to the blob. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular blob
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same blob name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        content_length: int,
        blob_type: str,
        url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
        content_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageBlobCreatedEventData(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar e_tag: The etag of the blob at the time this event was triggered. Required.
    :vartype e_tag: str
    :ivar content_type: The content type of the blob. This is the same as what would be returned in
     the Content-Type header from the blob.
    :vartype content_type: str
    :ivar content_length: The size of the blob in bytes. This is the same as what would be returned
     in the Content-Length header from the blob. Required.
    :vartype content_length: int
    :ivar content_offset: The offset of the blob in bytes. Required.
    :vartype content_offset: int
    :ivar blob_type: The type of blob. Required.
    :vartype blob_type: str
    :ivar url: The path to the blob. Required.
    :vartype url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular blob name. Users can use standard string comparison to understand the relative
     sequence of two events on the same blob name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    e_tag: str = rest_field(name="eTag")
    """The etag of the blob at the time this event was triggered. Required."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The content type of the blob. This is the same as what would be returned in the Content-Type
     header from the blob."""
    content_length: int = rest_field(name="contentLength")
    """The size of the blob in bytes. This is the same as what would be returned in the Content-Length
     header from the blob. Required."""
    content_offset: int = rest_field(name="contentOffset")
    """The offset of the blob in bytes. Required."""
    blob_type: str = rest_field(name="blobType")
    """The type of blob. Required."""
    url: str = rest_field()
    """The path to the blob. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular blob
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same blob name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        e_tag: str,
        content_length: int,
        content_offset: int,
        blob_type: str,
        url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
        content_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageBlobDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar content_type: The content type of the blob. This is the same as what would be returned in
     the Content-Type header from the blob.
    :vartype content_type: str
    :ivar blob_type: The type of blob. Required.
    :vartype blob_type: str
    :ivar url: The path to the blob. Required.
    :vartype url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular blob name. Users can use standard string comparison to understand the relative
     sequence of two events on the same blob name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The content type of the blob. This is the same as what would be returned in the Content-Type
     header from the blob."""
    blob_type: str = rest_field(name="blobType")
    """The type of blob. Required."""
    url: str = rest_field()
    """The path to the blob. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular blob
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same blob name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        blob_type: str,
        url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
        content_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageBlobInventoryPolicyCompletedEventData(_model_base.Model):  # pylint: disable=name-too-long
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.BlobInventoryPolicyCompleted event.


    :ivar schedule_date_time: The time at which inventory policy was scheduled. Required.
    :vartype schedule_date_time: ~datetime.datetime
    :ivar account_name: The account name for which inventory policy is registered. Required.
    :vartype account_name: str
    :ivar rule_name: The rule name for inventory policy. Required.
    :vartype rule_name: str
    :ivar policy_run_status: The status of inventory run, it can be
     Succeeded/PartiallySucceeded/Failed. Required.
    :vartype policy_run_status: str
    :ivar policy_run_status_message: The status message for inventory run. Required.
    :vartype policy_run_status_message: str
    :ivar policy_run_id: The policy run id for inventory run. Required.
    :vartype policy_run_id: str
    :ivar manifest_blob_url: The blob URL for manifest file for inventory run. Required.
    :vartype manifest_blob_url: str
    """

    schedule_date_time: datetime.datetime = rest_field(name="scheduleDateTime", format="rfc3339")
    """The time at which inventory policy was scheduled. Required."""
    account_name: str = rest_field(name="accountName")
    """The account name for which inventory policy is registered. Required."""
    rule_name: str = rest_field(name="ruleName")
    """The rule name for inventory policy. Required."""
    policy_run_status: str = rest_field(name="policyRunStatus")
    """The status of inventory run, it can be Succeeded/PartiallySucceeded/Failed. Required."""
    policy_run_status_message: str = rest_field(name="policyRunStatusMessage")
    """The status message for inventory run. Required."""
    policy_run_id: str = rest_field(name="policyRunId")
    """The policy run id for inventory run. Required."""
    manifest_blob_url: str = rest_field(name="manifestBlobUrl")
    """The blob URL for manifest file for inventory run. Required."""

    @overload
    def __init__(
        self,
        *,
        schedule_date_time: datetime.datetime,
        account_name: str,
        rule_name: str,
        policy_run_status: str,
        policy_run_status_message: str,
        policy_run_id: str,
        manifest_blob_url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageBlobRenamedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobRenamed event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar source_url: The path to the blob that was renamed. Required.
    :vartype source_url: str
    :ivar destination_url: The new path to the blob after the rename operation. Required.
    :vartype destination_url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular blob name. Users can use standard string comparison to understand the relative
     sequence of two events on the same blob name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    source_url: str = rest_field(name="sourceUrl")
    """The path to the blob that was renamed. Required."""
    destination_url: str = rest_field(name="destinationUrl")
    """The new path to the blob after the rename operation. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular blob
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same blob name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        source_url: str,
        destination_url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageBlobTierChangedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar content_type: The content type of the blob. This is the same as what would be returned in
     the Content-Type header from the blob.
    :vartype content_type: str
    :ivar content_length: The size of the blob in bytes. This is the same as what would be returned
     in the Content-Length header from the blob. Required.
    :vartype content_length: int
    :ivar blob_type: The type of blob. Required.
    :vartype blob_type: str
    :ivar url: The path to the blob. Required.
    :vartype url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular blob name. Users can use standard string comparison to understand the relative
     sequence of two events on the same blob name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: Optional[str] = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The content type of the blob. This is the same as what would be returned in the Content-Type
     header from the blob."""
    content_length: int = rest_field(name="contentLength")
    """The size of the blob in bytes. This is the same as what would be returned in the Content-Length
     header from the blob. Required."""
    blob_type: str = rest_field(name="blobType")
    """The type of blob. Required."""
    url: str = rest_field()
    """The path to the blob. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular blob
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same blob name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        request_id: str,
        content_length: int,
        blob_type: str,
        url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
        client_request_id: Optional[str] = None,
        content_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageDirectoryCreatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryCreated
    event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar e_tag: The etag of the directory at the time this event was triggered. Required.
    :vartype e_tag: str
    :ivar url: The path to the directory. Required.
    :vartype url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular directory name. Users can use standard string comparison to understand the relative
     sequence of two events on the same directory name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    e_tag: str = rest_field(name="eTag")
    """The etag of the directory at the time this event was triggered. Required."""
    url: str = rest_field()
    """The path to the directory. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular directory
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same directory name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        e_tag: str,
        url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageDirectoryDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted
    event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar url: The path to the deleted directory. Required.
    :vartype url: str
    :ivar recursive: Is this event for a recursive delete operation. Required.
    :vartype recursive: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular directory name. Users can use standard string comparison to understand the relative
     sequence of two events on the same directory name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    url: str = rest_field()
    """The path to the deleted directory. Required."""
    recursive: str = rest_field()
    """Is this event for a recursive delete operation. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular directory
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same directory name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        url: str,
        recursive: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageDirectoryRenamedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed
    event.


    :ivar api: The name of the API/operation that triggered this event. Required.
    :vartype api: str
    :ivar client_request_id: A request id provided by the client of the storage API operation that
     triggered this event. Required.
    :vartype client_request_id: str
    :ivar request_id: The request id generated by the storage service for the storage API operation
     that triggered this event. Required.
    :vartype request_id: str
    :ivar source_url: The path to the directory that was renamed. Required.
    :vartype source_url: str
    :ivar destination_url: The new path to the directory after the rename operation. Required.
    :vartype destination_url: str
    :ivar sequencer: An opaque string value representing the logical sequence of events for any
     particular directory name. Users can use standard string comparison to understand the relative
     sequence of two events on the same directory name. Required.
    :vartype sequencer: str
    :ivar identity: The identity of the requester that triggered this event. Required.
    :vartype identity: str
    :ivar storage_diagnostics: For service use only. Diagnostic data occasionally included by the
     Azure Storage service. This property should be ignored by event consumers. Required.
    :vartype storage_diagnostics: dict[str, any]
    """

    api: str = rest_field()
    """The name of the API/operation that triggered this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """A request id provided by the client of the storage API operation that triggered this event.
     Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the storage service for the storage API operation that triggered
     this event. Required."""
    source_url: str = rest_field(name="sourceUrl")
    """The path to the directory that was renamed. Required."""
    destination_url: str = rest_field(name="destinationUrl")
    """The new path to the directory after the rename operation. Required."""
    sequencer: str = rest_field()
    """An opaque string value representing the logical sequence of events for any particular directory
     name. Users can use standard string comparison to understand the relative sequence of two
     events on the same directory name. Required."""
    identity: str = rest_field()
    """The identity of the requester that triggered this event. Required."""
    storage_diagnostics: Dict[str, Any] = rest_field(name="storageDiagnostics")
    """For service use only. Diagnostic data occasionally included by the Azure Storage service. This
     property should be ignored by event consumers. Required."""

    @overload
    def __init__(
        self,
        *,
        api: str,
        client_request_id: str,
        request_id: str,
        source_url: str,
        destination_url: str,
        sequencer: str,
        identity: str,
        storage_diagnostics: Dict[str, Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageLifecyclePolicyActionSummaryDetail(_model_base.Model):  # pylint: disable=name-too-long
    """Execution statistics of a specific policy action in a Blob Management cycle.


    :ivar total_objects_count: Total number of objects to be acted on by this action. Required.
    :vartype total_objects_count: int
    :ivar success_count: Number of success operations of this action. Required.
    :vartype success_count: int
    :ivar error_list: Error messages of this action if any. Required.
    :vartype error_list: str
    """

    total_objects_count: int = rest_field(name="totalObjectsCount")
    """Total number of objects to be acted on by this action. Required."""
    success_count: int = rest_field(name="successCount")
    """Number of success operations of this action. Required."""
    error_list: str = rest_field(name="errorList")
    """Error messages of this action if any. Required."""

    @overload
    def __init__(
        self,
        *,
        total_objects_count: int,
        success_count: int,
        error_list: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageLifecyclePolicyCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Storage.LifecyclePolicyCompleted event.


    :ivar schedule_time: The time the policy task was scheduled. Required.
    :vartype schedule_time: str
    :ivar delete_summary: Execution statistics of a specific policy action in a Blob Management
     cycle. Required.
    :vartype delete_summary: ~azure.eventgrid.models.StorageLifecyclePolicyActionSummaryDetail
    :ivar tier_to_cool_summary: Execution statistics of a specific policy action in a Blob
     Management cycle. Required.
    :vartype tier_to_cool_summary:
     ~azure.eventgrid.models.StorageLifecyclePolicyActionSummaryDetail
    :ivar tier_to_archive_summary: Execution statistics of a specific policy action in a Blob
     Management cycle. Required.
    :vartype tier_to_archive_summary:
     ~azure.eventgrid.models.StorageLifecyclePolicyActionSummaryDetail
    """

    schedule_time: str = rest_field(name="scheduleTime")
    """The time the policy task was scheduled. Required."""
    delete_summary: "_models.StorageLifecyclePolicyActionSummaryDetail" = rest_field(name="deleteSummary")
    """Execution statistics of a specific policy action in a Blob Management cycle. Required."""
    tier_to_cool_summary: "_models.StorageLifecyclePolicyActionSummaryDetail" = rest_field(name="tierToCoolSummary")
    """Execution statistics of a specific policy action in a Blob Management cycle. Required."""
    tier_to_archive_summary: "_models.StorageLifecyclePolicyActionSummaryDetail" = rest_field(
        name="tierToArchiveSummary"
    )
    """Execution statistics of a specific policy action in a Blob Management cycle. Required."""

    @overload
    def __init__(
        self,
        *,
        schedule_time: str,
        delete_summary: "_models.StorageLifecyclePolicyActionSummaryDetail",
        tier_to_cool_summary: "_models.StorageLifecyclePolicyActionSummaryDetail",
        tier_to_archive_summary: "_models.StorageLifecyclePolicyActionSummaryDetail",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageTaskAssignmentCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.StorageTaskAssignmentCompleted event.


    :ivar status: The status for a storage task. Required. Known values are: "Succeeded" and
     "Failed".
    :vartype status: str or ~azure.eventgrid.models.StorageTaskAssignmentCompletedStatus
    :ivar completed_date_time: The time at which a storage task was completed. Required.
    :vartype completed_date_time: ~datetime.datetime
    :ivar task_execution_id: The execution id for a storage task. Required.
    :vartype task_execution_id: str
    :ivar task_name: The task name for a storage task. Required.
    :vartype task_name: str
    :ivar summary_report_blob_url: The summary report blob url for a storage task. Required.
    :vartype summary_report_blob_url: str
    """

    status: Union[str, "_models.StorageTaskAssignmentCompletedStatus"] = rest_field()
    """The status for a storage task. Required. Known values are: \"Succeeded\" and \"Failed\"."""
    completed_date_time: datetime.datetime = rest_field(name="completedDateTime", format="rfc3339")
    """The time at which a storage task was completed. Required."""
    task_execution_id: str = rest_field(name="taskExecutionId")
    """The execution id for a storage task. Required."""
    task_name: str = rest_field(name="taskName")
    """The task name for a storage task. Required."""
    summary_report_blob_url: str = rest_field(name="summaryReportBlobUrl")
    """The summary report blob url for a storage task. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.StorageTaskAssignmentCompletedStatus"],
        completed_date_time: datetime.datetime,
        task_execution_id: str,
        task_name: str,
        summary_report_blob_url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageTaskAssignmentQueuedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.StorageTaskAssignmentQueued event.


    :ivar queued_date_time: The time at which a storage task was queued. Required.
    :vartype queued_date_time: ~datetime.datetime
    :ivar task_execution_id: The execution id for a storage task. Required.
    :vartype task_execution_id: str
    """

    queued_date_time: datetime.datetime = rest_field(name="queuedDateTime", format="rfc3339")
    """The time at which a storage task was queued. Required."""
    task_execution_id: str = rest_field(name="taskExecutionId")
    """The execution id for a storage task. Required."""

    @overload
    def __init__(
        self,
        *,
        queued_date_time: datetime.datetime,
        task_execution_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageTaskCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an Microsoft.Storage.StorageTaskCompleted
    event.


    :ivar status: The status for a storage task. Required. Known values are: "Succeeded" and
     "Failed".
    :vartype status: str or ~azure.eventgrid.models.StorageTaskCompletedStatus
    :ivar completed_date_time: The time at which a storage task was completed. Required.
    :vartype completed_date_time: ~datetime.datetime
    :ivar task_execution_id: The execution id for a storage task. Required.
    :vartype task_execution_id: str
    :ivar task_name: The task name for a storage task. Required.
    :vartype task_name: str
    :ivar summary_report_blob_url: The summary report blob url for a storage task. Required.
    :vartype summary_report_blob_url: str
    """

    status: Union[str, "_models.StorageTaskCompletedStatus"] = rest_field()
    """The status for a storage task. Required. Known values are: \"Succeeded\" and \"Failed\"."""
    completed_date_time: datetime.datetime = rest_field(name="completedDateTime", format="rfc3339")
    """The time at which a storage task was completed. Required."""
    task_execution_id: str = rest_field(name="taskExecutionId")
    """The execution id for a storage task. Required."""
    task_name: str = rest_field(name="taskName")
    """The task name for a storage task. Required."""
    summary_report_blob_url: str = rest_field(name="summaryReportBlobUrl")
    """The summary report blob url for a storage task. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.StorageTaskCompletedStatus"],
        completed_date_time: datetime.datetime,
        task_execution_id: str,
        task_name: str,
        summary_report_blob_url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageTaskQueuedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for an Microsoft.Storage.StorageTaskQueued
    event.


    :ivar queued_date_time: The time at which a storage task was queued. Required.
    :vartype queued_date_time: ~datetime.datetime
    :ivar task_execution_id: The execution id for a storage task. Required.
    :vartype task_execution_id: str
    """

    queued_date_time: datetime.datetime = rest_field(name="queuedDateTime", format="rfc3339")
    """The time at which a storage task was queued. Required."""
    task_execution_id: str = rest_field(name="taskExecutionId")
    """The execution id for a storage task. Required."""

    @overload
    def __init__(
        self,
        *,
        queued_date_time: datetime.datetime,
        task_execution_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SubscriptionDeletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.EventGrid.SubscriptionDeletedEvent event.


    :ivar event_subscription_id: The Azure resource ID of the deleted event subscription. Required.
    :vartype event_subscription_id: str
    """

    event_subscription_id: str = rest_field(name="eventSubscriptionId")
    """The Azure resource ID of the deleted event subscription. Required."""

    @overload
    def __init__(
        self,
        *,
        event_subscription_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SubscriptionValidationEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.EventGrid.SubscriptionValidationEvent event.


    :ivar validation_code: The validation code sent by Azure Event Grid to validate an event
     subscription.
     To complete the validation handshake, the subscriber must either respond with this validation
     code as part of the validation response,
     or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     Required.
    :vartype validation_code: str
    :ivar validation_url: The validation URL sent by Azure Event Grid (available starting version
     2018-05-01-preview).
     To complete the validation handshake, the subscriber must either respond with the
     validationCode as part of the validation response,
     or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     Required.
    :vartype validation_url: str
    """

    validation_code: str = rest_field(name="validationCode")
    """The validation code sent by Azure Event Grid to validate an event subscription.
     To complete the validation handshake, the subscriber must either respond with this validation
     code as part of the validation response,
     or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     Required."""
    validation_url: str = rest_field(name="validationUrl")
    """The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview).
     To complete the validation handshake, the subscriber must either respond with the
     validationCode as part of the validation response,
     or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
     Required."""

    @overload
    def __init__(
        self,
        *,
        validation_code: str,
        validation_url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SubscriptionValidationResponse(_model_base.Model):
    """To complete an event subscription validation handshake, a subscriber can use
    either the validationCode or the validationUrl received in a
    SubscriptionValidationEvent. When the validationCode is used, the
    SubscriptionValidationResponse can be used to build the response.


    :ivar validation_response: The validation response sent by the subscriber to Azure Event Grid
     to complete the validation of an event subscription. Required.
    :vartype validation_response: str
    """

    validation_response: str = rest_field(name="validationResponse")
    """The validation response sent by the subscriber to Azure Event Grid to complete the validation
     of an event subscription. Required."""

    @overload
    def __init__(
        self,
        *,
        validation_response: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebAppServicePlanUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppServicePlanUpdated
    event.


    :ivar app_service_plan_event_type_detail: Detail of action on the app service plan. Required.
    :vartype app_service_plan_event_type_detail:
     ~azure.eventgrid.models.AppServicePlanEventTypeDetail
    :ivar sku: sku of app service plan. Required.
    :vartype sku: ~azure.eventgrid.models.WebAppServicePlanUpdatedEventDataSku
    :ivar name: name of the app service plan that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the app service
     plan API operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     app service plan API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the app service plan API
     operation that triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_service_plan_event_type_detail: "_models.AppServicePlanEventTypeDetail" = rest_field(
        name="appServicePlanEventTypeDetail"
    )
    """Detail of action on the app service plan. Required."""
    sku: "_models.WebAppServicePlanUpdatedEventDataSku" = rest_field()
    """sku of app service plan. Required."""
    name: str = rest_field()
    """name of the app service plan that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the app service plan API operation that
     triggered this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the app service plan API operation
     that triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the app service plan API operation that
     triggered this event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_service_plan_event_type_detail: "_models.AppServicePlanEventTypeDetail",
        sku: "_models.WebAppServicePlanUpdatedEventDataSku",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebAppServicePlanUpdatedEventDataSku(_model_base.Model):
    """sku of app service plan.


    :ivar name: name of app service plan sku. Required.
    :vartype name: str
    :ivar tier: tier of app service plan sku. Required.
    :vartype tier: str
    :ivar size: size of app service plan sku. Required.
    :vartype size: str
    :ivar family: family of app service plan sku. Required.
    :vartype family: str
    :ivar capacity: capacity of app service plan sku. Required.
    :vartype capacity: str
    """

    name: str = rest_field()
    """name of app service plan sku. Required."""
    tier: str = rest_field(name="Tier")
    """tier of app service plan sku. Required."""
    size: str = rest_field(name="Size")
    """size of app service plan sku. Required."""
    family: str = rest_field(name="Family")
    """family of app service plan sku. Required."""
    capacity: str = rest_field(name="Capacity")
    """capacity of app service plan sku. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        tier: str,
        size: str,
        family: str,
        capacity: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebAppUpdatedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebBackupOperationCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationCompleted
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebBackupOperationFailedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationFailed
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebBackupOperationStartedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationStarted
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebRestoreOperationCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationCompleted
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebRestoreOperationFailedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationFailed
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebRestoreOperationStartedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationStarted
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebSlotSwapCompletedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapCompleted event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebSlotSwapFailedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapFailed event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebSlotSwapStartedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapStarted event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebSlotSwapWithPreviewCancelledEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Web.SlotSwapWithPreviewCancelled event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WebSlotSwapWithPreviewStartedEventData(_model_base.Model):
    """Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewStarted
    event.


    :ivar app_event_type_detail: Detail of action on the app. Required.
    :vartype app_event_type_detail: ~azure.eventgrid.models.AppEventTypeDetail
    :ivar name: name of the web site that had this event. Required.
    :vartype name: str
    :ivar client_request_id: The client request id generated by the app service for the site API
     operation that triggered this event. Required.
    :vartype client_request_id: str
    :ivar correlation_request_id: The correlation request id generated by the app service for the
     site API operation that triggered this event. Required.
    :vartype correlation_request_id: str
    :ivar request_id: The request id generated by the app service for the site API operation that
     triggered this event. Required.
    :vartype request_id: str
    :ivar address: HTTP request URL of this operation. Required.
    :vartype address: str
    :ivar verb: HTTP verb of this operation. Required.
    :vartype verb: str
    """

    app_event_type_detail: "_models.AppEventTypeDetail" = rest_field(name="appEventTypeDetail")
    """Detail of action on the app. Required."""
    name: str = rest_field()
    """name of the web site that had this event. Required."""
    client_request_id: str = rest_field(name="clientRequestId")
    """The client request id generated by the app service for the site API operation that triggered
     this event. Required."""
    correlation_request_id: str = rest_field(name="correlationRequestId")
    """The correlation request id generated by the app service for the site API operation that
     triggered this event. Required."""
    request_id: str = rest_field(name="requestId")
    """The request id generated by the app service for the site API operation that triggered this
     event. Required."""
    address: str = rest_field()
    """HTTP request URL of this operation. Required."""
    verb: str = rest_field()
    """HTTP verb of this operation. Required."""

    @overload
    def __init__(
        self,
        *,
        app_event_type_detail: "_models.AppEventTypeDetail",
        name: str,
        client_request_id: str,
        correlation_request_id: str,
        request_id: str,
        address: str,
        verb: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
