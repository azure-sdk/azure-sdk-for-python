# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    """


class ApplyUpdate(ProxyResource):
    """Apply Update request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    :ivar properties: Properties of the apply update.
    :vartype properties: ~azure.mgmt.maintenance.models.ApplyUpdateProperties
    """

    properties: Optional["_models.ApplyUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the apply update."""

    __flattened_items = ["status", "resource_id", "last_update_time"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ApplyUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ApplyUpdateProperties(_Model):
    """Properties for apply update.

    :ivar status: The status. Known values are: "Pending", "InProgress", "Completed", "RetryNow",
     "RetryLater", "NoUpdatesPending", "Cancel", and "Cancelled".
    :vartype status: str or ~azure.mgmt.maintenance.models.UpdateStatus
    :ivar resource_id: The resourceId.
    :vartype resource_id: str
    :ivar last_update_time: Last Update time.
    :vartype last_update_time: ~datetime.datetime
    """

    status: Optional[Union[str, "_models.UpdateStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status. Known values are: \"Pending\", \"InProgress\", \"Completed\", \"RetryNow\",
     \"RetryLater\", \"NoUpdatesPending\", \"Cancel\", and \"Cancelled\"."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resourceId."""
    last_update_time: Optional[datetime.datetime] = rest_field(
        name="lastUpdateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Last Update time."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.UpdateStatus"]] = None,
        resource_id: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfigurationAssignment(ProxyResource):
    """Configuration Assignment.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    :ivar location: Location of the resource.
    :vartype location: str
    :ivar properties: Properties of the configuration assignment.
    :vartype properties: ~azure.mgmt.maintenance.models.ConfigurationAssignmentProperties
    """

    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Location of the resource."""
    properties: Optional["_models.ConfigurationAssignmentProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the configuration assignment."""

    __flattened_items = ["maintenance_configuration_id", "resource_id", "filter"]

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        properties: Optional["_models.ConfigurationAssignmentProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ConfigurationAssignmentFilterProperties(_Model):
    """Azure query for the update configuration.

    :ivar resource_types: List of allowed resources.
    :vartype resource_types: list[str]
    :ivar resource_groups: List of allowed resource groups.
    :vartype resource_groups: list[str]
    :ivar os_types: List of allowed operating systems.
    :vartype os_types: list[str]
    :ivar locations: List of locations to scope the query to.
    :vartype locations: list[str]
    :ivar tag_settings: Tag settings for the VM.
    :vartype tag_settings: ~azure.mgmt.maintenance.models.TagSettingsProperties
    """

    resource_types: Optional[List[str]] = rest_field(
        name="resourceTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of allowed resources."""
    resource_groups: Optional[List[str]] = rest_field(
        name="resourceGroups", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of allowed resource groups."""
    os_types: Optional[List[str]] = rest_field(
        name="osTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of allowed operating systems."""
    locations: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of locations to scope the query to."""
    tag_settings: Optional["_models.TagSettingsProperties"] = rest_field(
        name="tagSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tag settings for the VM."""

    @overload
    def __init__(
        self,
        *,
        resource_types: Optional[List[str]] = None,
        resource_groups: Optional[List[str]] = None,
        os_types: Optional[List[str]] = None,
        locations: Optional[List[str]] = None,
        tag_settings: Optional["_models.TagSettingsProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfigurationAssignmentProperties(_Model):
    """Properties for configuration assignment.

    :ivar maintenance_configuration_id: The maintenance configuration Id.
    :vartype maintenance_configuration_id: str
    :ivar resource_id: The unique resourceId.
    :vartype resource_id: str
    :ivar filter: Properties of the configuration assignment.
    :vartype filter: ~azure.mgmt.maintenance.models.ConfigurationAssignmentFilterProperties
    """

    maintenance_configuration_id: Optional[str] = rest_field(
        name="maintenanceConfigurationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maintenance configuration Id."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The unique resourceId."""
    filter: Optional["_models.ConfigurationAssignmentFilterProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the configuration assignment."""

    @overload
    def __init__(
        self,
        *,
        maintenance_configuration_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        filter: Optional["_models.ConfigurationAssignmentFilterProperties"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorDetails(_Model):
    """An error response details received from the Azure Maintenance service.

    :ivar code: Service-defined error code. This code serves as a sub-status for the HTTP error
     code specified in the response.
    :vartype code: str
    :ivar message: Human-readable representation of the error.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Service-defined error code. This code serves as a sub-status for the HTTP error code specified
     in the response."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Human-readable representation of the error."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InputLinuxParameters(_Model):
    """Input properties for patching a Linux machine.

    :ivar package_name_masks_to_exclude: Package names to be excluded for patching.
    :vartype package_name_masks_to_exclude: list[str]
    :ivar package_name_masks_to_include: Package names to be included for patching.
    :vartype package_name_masks_to_include: list[str]
    :ivar classifications_to_include: Classification category of patches to be patched. Allowed
     values are 'Critical', 'Security', and 'Other'.
    :vartype classifications_to_include: list[str]
    """

    package_name_masks_to_exclude: Optional[List[str]] = rest_field(
        name="packageNameMasksToExclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Package names to be excluded for patching."""
    package_name_masks_to_include: Optional[List[str]] = rest_field(
        name="packageNameMasksToInclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Package names to be included for patching."""
    classifications_to_include: Optional[List[str]] = rest_field(
        name="classificationsToInclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Classification category of patches to be patched. Allowed values are 'Critical', 'Security',
     and 'Other'."""

    @overload
    def __init__(
        self,
        *,
        package_name_masks_to_exclude: Optional[List[str]] = None,
        package_name_masks_to_include: Optional[List[str]] = None,
        classifications_to_include: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InputPatchConfiguration(_Model):
    """Input configuration for a patch run.

    :ivar reboot_setting: Possible reboot preference as defined by the user based on which it would
     be decided to reboot the machine or not after the patch operation is completed. Known values
     are: "IfRequired", "Never", and "Always".
    :vartype reboot_setting: str or ~azure.mgmt.maintenance.models.RebootOptions
    :ivar windows_parameters: Input parameters specific to patching a Windows machine. For Linux
     machines, do not pass this property.
    :vartype windows_parameters: ~azure.mgmt.maintenance.models.InputWindowsParameters
    :ivar linux_parameters: Input parameters specific to patching Linux machine. For Windows
     machines, do not pass this property.
    :vartype linux_parameters: ~azure.mgmt.maintenance.models.InputLinuxParameters
    """

    reboot_setting: Optional[Union[str, "_models.RebootOptions"]] = rest_field(
        name="rebootSetting", visibility=["read", "create", "update", "delete", "query"]
    )
    """Possible reboot preference as defined by the user based on which it would be decided to reboot
     the machine or not after the patch operation is completed. Known values are: \"IfRequired\",
     \"Never\", and \"Always\"."""
    windows_parameters: Optional["_models.InputWindowsParameters"] = rest_field(
        name="windowsParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Input parameters specific to patching a Windows machine. For Linux machines, do not pass this
     property."""
    linux_parameters: Optional["_models.InputLinuxParameters"] = rest_field(
        name="linuxParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Input parameters specific to patching Linux machine. For Windows machines, do not pass this
     property."""

    @overload
    def __init__(
        self,
        *,
        reboot_setting: Optional[Union[str, "_models.RebootOptions"]] = None,
        windows_parameters: Optional["_models.InputWindowsParameters"] = None,
        linux_parameters: Optional["_models.InputLinuxParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InputWindowsParameters(_Model):
    """Input properties for patching a Windows machine.

    :ivar kb_numbers_to_exclude: Windows KBID to be excluded for patching.
    :vartype kb_numbers_to_exclude: list[str]
    :ivar kb_numbers_to_include: Windows KBID to be included for patching.
    :vartype kb_numbers_to_include: list[str]
    :ivar classifications_to_include: Classification category of patches to be patched. Allowed
     values are 'Critical', 'Security', 'UpdateRollup', 'FeaturePack', 'ServicePack', 'Definition',
     'Tools', and 'Updates'.
    :vartype classifications_to_include: list[str]
    :ivar exclude_kbs_requiring_reboot: Exclude patches which need reboot.
    :vartype exclude_kbs_requiring_reboot: bool
    """

    kb_numbers_to_exclude: Optional[List[str]] = rest_field(
        name="kbNumbersToExclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Windows KBID to be excluded for patching."""
    kb_numbers_to_include: Optional[List[str]] = rest_field(
        name="kbNumbersToInclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Windows KBID to be included for patching."""
    classifications_to_include: Optional[List[str]] = rest_field(
        name="classificationsToInclude", visibility=["read", "create", "update", "delete", "query"]
    )
    """Classification category of patches to be patched. Allowed values are 'Critical', 'Security',
     'UpdateRollup', 'FeaturePack', 'ServicePack', 'Definition', 'Tools', and 'Updates'."""
    exclude_kbs_requiring_reboot: Optional[bool] = rest_field(
        name="excludeKbsRequiringReboot", visibility=["read", "create", "update", "delete", "query"]
    )
    """Exclude patches which need reboot."""

    @overload
    def __init__(
        self,
        *,
        kb_numbers_to_exclude: Optional[List[str]] = None,
        kb_numbers_to_include: Optional[List[str]] = None,
        classifications_to_include: Optional[List[str]] = None,
        exclude_kbs_requiring_reboot: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MaintenanceConfiguration(TrackedResource):
    """Maintenance configuration record type.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maintenance.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Gets or sets properties of the resource.
    :vartype properties: ~azure.mgmt.maintenance.models.MaintenanceConfigurationProperties
    """

    properties: Optional["_models.MaintenanceConfigurationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets properties of the resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.MaintenanceConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MaintenanceConfigurationProperties(_Model):
    """Properties for maintenance configuration.

    :ivar namespace: Gets or sets namespace of the resource.
    :vartype namespace: str
    :ivar extension_properties: Gets or sets extensionProperties of the maintenanceConfiguration.
    :vartype extension_properties: dict[str, str]
    :ivar maintenance_scope: Gets or sets maintenanceScope of the configuration. Known values are:
     "Host", "Resource", "OSImage", "Extension", "InGuestPatch", "SQLDB", and "SQLManagedInstance".
    :vartype maintenance_scope: str or ~azure.mgmt.maintenance.models.MaintenanceScope
    :ivar maintenance_window: Definition of a MaintenanceWindow.
    :vartype maintenance_window: ~azure.mgmt.maintenance.models.MaintenanceWindow
    :ivar visibility: Gets or sets the visibility of the configuration. The default value is
     'Custom'. Known values are: "Custom" and "Public".
    :vartype visibility: str or ~azure.mgmt.maintenance.models.Visibility
    :ivar install_patches: The input parameters to be passed to the patch run operation.
    :vartype install_patches: ~azure.mgmt.maintenance.models.InputPatchConfiguration
    """

    namespace: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets namespace of the resource."""
    extension_properties: Optional[Dict[str, str]] = rest_field(
        name="extensionProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets extensionProperties of the maintenanceConfiguration."""
    maintenance_scope: Optional[Union[str, "_models.MaintenanceScope"]] = rest_field(
        name="maintenanceScope", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets maintenanceScope of the configuration. Known values are: \"Host\", \"Resource\",
     \"OSImage\", \"Extension\", \"InGuestPatch\", \"SQLDB\", and \"SQLManagedInstance\"."""
    maintenance_window: Optional["_models.MaintenanceWindow"] = rest_field(
        name="maintenanceWindow", visibility=["read", "create", "update", "delete", "query"]
    )
    """Definition of a MaintenanceWindow."""
    visibility: Optional[Union[str, "_models.Visibility"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the visibility of the configuration. The default value is 'Custom'. Known values
     are: \"Custom\" and \"Public\"."""
    install_patches: Optional["_models.InputPatchConfiguration"] = rest_field(
        name="installPatches", visibility=["read", "create", "update", "delete", "query"]
    )
    """The input parameters to be passed to the patch run operation."""

    __flattened_items = ["start_date_time", "expiration_date_time", "duration", "time_zone", "recur_every"]

    @overload
    def __init__(
        self,
        *,
        namespace: Optional[str] = None,
        extension_properties: Optional[Dict[str, str]] = None,
        maintenance_scope: Optional[Union[str, "_models.MaintenanceScope"]] = None,
        maintenance_window: Optional["_models.MaintenanceWindow"] = None,
        visibility: Optional[Union[str, "_models.Visibility"]] = None,
        install_patches: Optional["_models.InputPatchConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.maintenance_window is None:
                return None
            return getattr(self.maintenance_window, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.maintenance_window is None:
                self.maintenance_window = self._attr_to_rest_field["maintenance_window"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MaintenanceError(_Model):
    """An error response received from the Azure Maintenance service.

    :ivar error: Details of the error.
    :vartype error: ~azure.mgmt.maintenance.models.ErrorDetails
    """

    error: Optional["_models.ErrorDetails"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Details of the error."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MaintenanceWindow(_Model):
    """Definition of a MaintenanceWindow.

    :ivar start_date_time: Effective start date of the maintenance window in YYYY-MM-DD hh:mm
     format. The start date can be set to either the current date or future date. The window will be
     created in the time zone provided and adjusted to daylight savings according to that time zone.
    :vartype start_date_time: str
    :ivar expiration_date_time: Effective expiration date of the maintenance window in YYYY-MM-DD
     hh:mm format. The window will be created in the time zone provided and adjusted to daylight
     savings according to that time zone. Expiration date must be set to a future date. If not
     provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
    :vartype expiration_date_time: str
    :ivar duration: Duration of the maintenance window in HH:mm format. If not provided, default
     value will be used based on maintenance scope provided. Example: 05:00.
    :vartype duration: str
    :ivar time_zone: Name of the timezone. List of timezones can be obtained by executing
     [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC,
     W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
    :vartype time_zone: str
    :ivar recur_every: Rate at which a Maintenance window is expected to recur. The rate can be
     expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery:
     [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1.
     Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted
     as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays
     Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week
     Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma
     separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First,
     Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset
     value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month,
     recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery:
     Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday
     Offset6.
    :vartype recur_every: str
    """

    start_date_time: Optional[str] = rest_field(
        name="startDateTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can
     be set to either the current date or future date. The window will be created in the time zone
     provided and adjusted to daylight savings according to that time zone."""
    expiration_date_time: Optional[str] = rest_field(
        name="expirationDateTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will
     be created in the time zone provided and adjusted to daylight savings according to that time
     zone. Expiration date must be set to a future date. If not provided, it will be set to the
     maximum datetime 9999-12-31 23:59:59."""
    duration: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Duration of the maintenance window in HH:mm format. If not provided, default value will be used
     based on maintenance scope provided. Example: 05:00."""
    time_zone: Optional[str] = rest_field(name="timeZone", visibility=["read", "create", "update", "delete", "query"])
    """Name of the timezone. List of timezones can be obtained by executing
     [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC,
     W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time."""
    recur_every: Optional[str] = rest_field(
        name="recurEvery", visibility=["read", "create", "update", "delete", "query"]
    )
    """Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily,
     weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as
     integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule
     examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery:
     [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday].
     Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly
     schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month
     days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
     Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6
     to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months,
     recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday,
     recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6."""

    @overload
    def __init__(
        self,
        *,
        start_date_time: Optional[str] = None,
        expiration_date_time: Optional[str] = None,
        duration: Optional[str] = None,
        time_zone: Optional[str] = None,
        recur_every: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.maintenance.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.maintenance.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.maintenance.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class ScheduledEventApproveResponse(_Model):
    """Response of scheduled event acknowledge.

    :ivar value: Successfully Approved.
    :vartype value: str
    """

    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Successfully Approved."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.maintenance.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.maintenance.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TagSettingsProperties(_Model):
    """Tag filter information for the VM.

    :ivar tags: Dictionary of tags with its list of values.
    :vartype tags: dict[str, list[str]]
    :ivar filter_operator: Filter VMs by Any or All specified tags. Known values are: "All" and
     "Any".
    :vartype filter_operator: str or ~azure.mgmt.maintenance.models.TagOperators
    """

    tags: Optional[Dict[str, List[str]]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of tags with its list of values."""
    filter_operator: Optional[Union[str, "_models.TagOperators"]] = rest_field(
        name="filterOperator", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter VMs by Any or All specified tags. Known values are: \"All\" and \"Any\"."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, List[str]]] = None,
        filter_operator: Optional[Union[str, "_models.TagOperators"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Update(_Model):
    """Maintenance update on a resource.

    :ivar maintenance_scope: The impact area. Known values are: "Host", "Resource", "OSImage",
     "Extension", "InGuestPatch", "SQLDB", and "SQLManagedInstance".
    :vartype maintenance_scope: str or ~azure.mgmt.maintenance.models.MaintenanceScope
    :ivar impact_type: The impact type. Known values are: "None", "Freeze", "Restart", and
     "Redeploy".
    :vartype impact_type: str or ~azure.mgmt.maintenance.models.ImpactType
    :ivar status: The status. Known values are: "Pending", "InProgress", "Completed", "RetryNow",
     "RetryLater", "NoUpdatesPending", "Cancel", and "Cancelled".
    :vartype status: str or ~azure.mgmt.maintenance.models.UpdateStatus
    :ivar impact_duration_in_sec: Duration of impact in seconds.
    :vartype impact_duration_in_sec: int
    :ivar not_before: Time when Azure will start force updates if not self-updated by customer
     before this time.
    :vartype not_before: ~datetime.datetime
    :ivar properties: Properties of the apply update.
    :vartype properties: ~azure.mgmt.maintenance.models.UpdateProperties
    """

    maintenance_scope: Optional[Union[str, "_models.MaintenanceScope"]] = rest_field(
        name="maintenanceScope", visibility=["read", "create", "update", "delete", "query"]
    )
    """The impact area. Known values are: \"Host\", \"Resource\", \"OSImage\", \"Extension\",
     \"InGuestPatch\", \"SQLDB\", and \"SQLManagedInstance\"."""
    impact_type: Optional[Union[str, "_models.ImpactType"]] = rest_field(
        name="impactType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The impact type. Known values are: \"None\", \"Freeze\", \"Restart\", and \"Redeploy\"."""
    status: Optional[Union[str, "_models.UpdateStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status. Known values are: \"Pending\", \"InProgress\", \"Completed\", \"RetryNow\",
     \"RetryLater\", \"NoUpdatesPending\", \"Cancel\", and \"Cancelled\"."""
    impact_duration_in_sec: Optional[int] = rest_field(
        name="impactDurationInSec", visibility=["read", "create", "update", "delete", "query"]
    )
    """Duration of impact in seconds."""
    not_before: Optional[datetime.datetime] = rest_field(
        name="notBefore", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Time when Azure will start force updates if not self-updated by customer before this time."""
    properties: Optional["_models.UpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the apply update."""

    @overload
    def __init__(
        self,
        *,
        maintenance_scope: Optional[Union[str, "_models.MaintenanceScope"]] = None,
        impact_type: Optional[Union[str, "_models.ImpactType"]] = None,
        status: Optional[Union[str, "_models.UpdateStatus"]] = None,
        impact_duration_in_sec: Optional[int] = None,
        not_before: Optional[datetime.datetime] = None,
        properties: Optional["_models.UpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateProperties(_Model):
    """Properties for update.

    :ivar resource_id: The resourceId.
    :vartype resource_id: str
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resourceId."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
