# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.maintenance import MaintenanceManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMaintenanceManagementMaintenanceConfigurationsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MaintenanceManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_maintenance_configurations_get(self, resource_group):
        response = self.client.maintenance_configurations.get(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_maintenance_configurations_create_or_update(self, resource_group):
        response = self.client.maintenance_configurations.create_or_update(
            resource_group_name=resource_group.name,
            resource_name="str",
            configuration={
                "duration": "str",
                "expirationDateTime": "str",
                "extensionProperties": {"str": "str"},
                "id": "str",
                "installPatches": {
                    "linuxParameters": {
                        "classificationsToInclude": ["str"],
                        "packageNameMasksToExclude": ["str"],
                        "packageNameMasksToInclude": ["str"],
                    },
                    "rebootSetting": "IfRequired",
                    "windowsParameters": {
                        "classificationsToInclude": ["str"],
                        "excludeKbsRequiringReboot": bool,
                        "kbNumbersToExclude": ["str"],
                        "kbNumbersToInclude": ["str"],
                    },
                },
                "location": "str",
                "maintenanceScope": "str",
                "name": "str",
                "namespace": "str",
                "recurEvery": "str",
                "startDateTime": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "timeZone": "str",
                "type": "str",
                "visibility": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_maintenance_configurations_delete(self, resource_group):
        response = self.client.maintenance_configurations.delete(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_maintenance_configurations_update(self, resource_group):
        response = self.client.maintenance_configurations.update(
            resource_group_name=resource_group.name,
            resource_name="str",
            configuration={
                "duration": "str",
                "expirationDateTime": "str",
                "extensionProperties": {"str": "str"},
                "id": "str",
                "installPatches": {
                    "linuxParameters": {
                        "classificationsToInclude": ["str"],
                        "packageNameMasksToExclude": ["str"],
                        "packageNameMasksToInclude": ["str"],
                    },
                    "rebootSetting": "IfRequired",
                    "windowsParameters": {
                        "classificationsToInclude": ["str"],
                        "excludeKbsRequiringReboot": bool,
                        "kbNumbersToExclude": ["str"],
                        "kbNumbersToInclude": ["str"],
                    },
                },
                "location": "str",
                "maintenanceScope": "str",
                "name": "str",
                "namespace": "str",
                "recurEvery": "str",
                "startDateTime": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "timeZone": "str",
                "type": "str",
                "visibility": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_maintenance_configurations_list(self, resource_group):
        response = self.client.maintenance_configurations.list(
            api_version="2023-10-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
