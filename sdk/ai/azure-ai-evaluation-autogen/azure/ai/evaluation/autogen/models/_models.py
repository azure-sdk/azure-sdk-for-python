# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class InputData(_model_base.Model):
    """Abstract data class for input data configuration.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AppInsightsConfiguration, Dataset


    :ivar type: Type of the data. Required. Default value is None.
    :vartype type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type")
    """Type of the data. Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AppInsightsConfiguration(InputData, discriminator="app_insights"):
    """Data Source for Application Insight.


    :ivar type: Required. Default value is "app_insights".
    :vartype type: str
    :ivar resource_id: LogAnalytic Workspace resourceID associated with AppInsights. Required.
    :vartype resource_id: str
    :ivar query: Query to fetch data. Required.
    :vartype query: str
    :ivar service_name: Service name. Required.
    :vartype service_name: str
    """

    type: Literal["app_insights"] = rest_discriminator(name="type")  # type: ignore
    """Required. Default value is \"app_insights\"."""
    resource_id: str = rest_field(name="resourceId")
    """LogAnalytic Workspace resourceID associated with AppInsights. Required."""
    query: str = rest_field()
    """Query to fetch data. Required."""
    service_name: str = rest_field(name="serviceName")
    """Service name. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        query: str,
        service_name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, type="app_insights", **kwargs)


class Dataset(InputData, discriminator="dataset"):
    """Dataset as source for evaluation.


    :ivar type: Required. Default value is "dataset".
    :vartype type: str
    :ivar id: Input dataset id. Required.
    :vartype id: str
    """

    type: Literal["dataset"] = rest_discriminator(name="type")  # type: ignore
    """Required. Default value is \"dataset\"."""
    id: str = rest_field()
    """Input dataset id. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, type="dataset", **kwargs)


class Evaluation(_model_base.Model):
    """Evaluation Definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Identifier of the evaluation.
    :vartype id: str
    :ivar data: Data for evaluation. Required.
    :vartype data: ~azure.ai.evaluation.autogen.models.InputData
    :ivar display_name: Update stage to 'Archive' to archive the asset. Default is Development,
     which means the asset is under development.
    :vartype display_name: str
    :ivar description: Description of the evaluation. It can be used to store additional
     information about the evaluation and is mutable.
    :vartype description: str
    :ivar system_data: Metadata containing createdBy and modifiedBy information.
    :vartype system_data: ~azure.ai.evaluation.autogen.models.SystemData
    :ivar status: Status of the evaluation. It is set by service and is read-only.
    :vartype status: str
    :ivar tags: Evaluation's tags. Unlike properties, tags are fully mutable.
    :vartype tags: dict[str, str]
    :ivar properties: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     property cannot be removed.
    :vartype properties: dict[str, str]
    :ivar evaluators: Evaluators to be used for the evaluation. Required.
    :vartype evaluators: dict[str, ~azure.ai.evaluation.autogen.models.EvaluatorConfiguration]
    """

    id: Optional[str] = rest_field()
    """Identifier of the evaluation."""
    data: "_models.InputData" = rest_field()
    """Data for evaluation. Required."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Update stage to 'Archive' to archive the asset. Default is Development, which means the asset
     is under development."""
    description: Optional[str] = rest_field()
    """Description of the evaluation. It can be used to store additional information about the
     evaluation and is mutable."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata containing createdBy and modifiedBy information."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Status of the evaluation. It is set by service and is read-only."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Evaluation's tags. Unlike properties, tags are fully mutable."""
    properties: Optional[Dict[str, str]] = rest_field()
    """Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be
     removed."""
    evaluators: Dict[str, "_models.EvaluatorConfiguration"] = rest_field()
    """Evaluators to be used for the evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        data: "_models.InputData",
        evaluators: Dict[str, "_models.EvaluatorConfiguration"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EvaluationSchedule(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Evaluation Schedule Definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Identifier of the evaluation.
    :vartype id: str
    :ivar data: Data for evaluation. Required.
    :vartype data: ~azure.ai.evaluation.autogen.models.InputData
    :ivar display_name: Update stage to 'Archive' to archive the asset. Default is Development,
     which means the asset is under development.
    :vartype display_name: str
    :ivar description: Description of the evaluation. It can be used to store additional
     information about the evaluation and is mutable.
    :vartype description: str
    :ivar system_data: Metadata containing createdBy and modifiedBy information.
    :vartype system_data: ~azure.ai.evaluation.autogen.models.SystemData
    :ivar status: Status of the evaluation. It is set by service and is read-only.
    :vartype status: str
    :ivar tags: Evaluation's tags. Unlike properties, tags are fully mutable.
    :vartype tags: dict[str, str]
    :ivar properties: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     property cannot be removed.
    :vartype properties: dict[str, str]
    :ivar evaluators: Evaluators to be used for the evaluation. Required.
    :vartype evaluators: dict[str, ~azure.ai.evaluation.autogen.models.EvaluatorConfiguration]
    :ivar recurrence: Recurrence pattern for the evaluation.
    :vartype recurrence: ~azure.ai.evaluation.autogen.models.Recurrence
    :ivar cron_expression: Cron expression for the evaluation.
    :vartype cron_expression: str
    :ivar sampling_strategy: Sampling strategy for the evaluation. Required.
    :vartype sampling_strategy: ~azure.ai.evaluation.autogen.models.SamplingStrategy
    """

    id: Optional[str] = rest_field()
    """Identifier of the evaluation."""
    data: "_models.InputData" = rest_field()
    """Data for evaluation. Required."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Update stage to 'Archive' to archive the asset. Default is Development, which means the asset
     is under development."""
    description: Optional[str] = rest_field()
    """Description of the evaluation. It can be used to store additional information about the
     evaluation and is mutable."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata containing createdBy and modifiedBy information."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Status of the evaluation. It is set by service and is read-only."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Evaluation's tags. Unlike properties, tags are fully mutable."""
    properties: Optional[Dict[str, str]] = rest_field()
    """Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be
     removed."""
    evaluators: Dict[str, "_models.EvaluatorConfiguration"] = rest_field()
    """Evaluators to be used for the evaluation. Required."""
    recurrence: Optional["_models.Recurrence"] = rest_field()
    """Recurrence pattern for the evaluation."""
    cron_expression: Optional[str] = rest_field(name="cronExpression")
    """Cron expression for the evaluation."""
    sampling_strategy: "_models.SamplingStrategy" = rest_field(name="samplingStrategy")
    """Sampling strategy for the evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        data: "_models.InputData",
        evaluators: Dict[str, "_models.EvaluatorConfiguration"],
        sampling_strategy: "_models.SamplingStrategy",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        recurrence: Optional["_models.Recurrence"] = None,
        cron_expression: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EvaluatorConfiguration(_model_base.Model):
    """Evaluator Configuration.


    :ivar id: Identifier of the evaluator. Required.
    :vartype id: str
    :ivar init_params: Initialization parameters of the evaluator.
    :vartype init_params: dict[str, str]
    :ivar data_mapping: Data parameters of the evaluator.
    :vartype data_mapping: dict[str, str]
    """

    id: str = rest_field()
    """Identifier of the evaluator. Required."""
    init_params: Optional[Dict[str, str]] = rest_field(name="initParams")
    """Initialization parameters of the evaluator."""
    data_mapping: Optional[Dict[str, str]] = rest_field(name="dataMapping")
    """Data parameters of the evaluator."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        init_params: Optional[Dict[str, str]] = None,
        data_mapping: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Recurrence(_model_base.Model):
    """Recurrence Definition.


    :ivar frequency: The frequency to trigger schedule. Required. Known values are: "Month",
     "Week", "Day", "Hour", and "Minute".
    :vartype frequency: str or ~azure.ai.evaluation.autogen.models.Frequency
    :ivar interval: Specifies schedule interval in conjunction with frequency. Required.
    :vartype interval: int
    :ivar schedule: The recurrence schedule. Required.
    :vartype schedule: ~azure.ai.evaluation.autogen.models.RecurrenceSchedule
    """

    frequency: Union[str, "_models.Frequency"] = rest_field()
    """The frequency to trigger schedule. Required. Known values are: \"Month\", \"Week\", \"Day\",
     \"Hour\", and \"Minute\"."""
    interval: int = rest_field()
    """Specifies schedule interval in conjunction with frequency. Required."""
    schedule: "_models.RecurrenceSchedule" = rest_field()
    """The recurrence schedule. Required."""

    @overload
    def __init__(
        self,
        *,
        frequency: Union[str, "_models.Frequency"],
        interval: int,
        schedule: "_models.RecurrenceSchedule",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RecurrenceSchedule(_model_base.Model):
    """RecurrenceSchedule Definition.


    :ivar hours: List of hours for the schedule. Required.
    :vartype hours: list[int]
    :ivar minutes: List of minutes for the schedule. Required.
    :vartype minutes: list[int]
    :ivar week_days: List of days for the schedule. Required.
    :vartype week_days: list[str or ~azure.ai.evaluation.autogen.models.WeekDays]
    :ivar month_days: List of month days for the schedule. Required.
    :vartype month_days: list[int]
    """

    hours: List[int] = rest_field()
    """List of hours for the schedule. Required."""
    minutes: List[int] = rest_field()
    """List of minutes for the schedule. Required."""
    week_days: List[Union[str, "_models.WeekDays"]] = rest_field(name="weekDays")
    """List of days for the schedule. Required."""
    month_days: List[int] = rest_field(name="monthDays")
    """List of month days for the schedule. Required."""

    @overload
    def __init__(
        self,
        *,
        hours: List[int],
        minutes: List[int],
        week_days: List[Union[str, "_models.WeekDays"]],
        month_days: List[int],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SamplingStrategy(_model_base.Model):
    """SamplingStrategy Definition.


    :ivar rate: Sampling rate. Required.
    :vartype rate: float
    """

    rate: float = rest_field()
    """Sampling rate. Required."""

    @overload
    def __init__(
        self,
        *,
        rate: float,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_at: The timestamp the resource was created at.
    :vartype created_at: ~datetime.datetime
    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The identity type that created the resource.
    :vartype created_by_type: str
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The timestamp the resource was created at."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """The identity that created the resource."""
    created_by_type: Optional[str] = rest_field(name="createdByType", visibility=["read"])
    """The identity type that created the resource."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""


class UpdateEvaluationRequest(_model_base.Model):
    """Update Evaluation Request.

    All required parameters must be populated in order to send to server.

    :ivar tags: Tags to be updated. Required.
    :vartype tags: dict[str, str]
    :ivar display_name: Display Name. Required.
    :vartype display_name: str
    :ivar description: Description. Required.
    :vartype description: str
    """

    tags: Dict[str, str] = rest_field()
    """Tags to be updated. Required."""
    display_name: str = rest_field(name="displayName")
    """Display Name. Required."""
    description: str = rest_field()
    """Description. Required."""

    @overload
    def __init__(
        self,
        *,
        tags: Dict[str, str],
        display_name: str,
        description: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
