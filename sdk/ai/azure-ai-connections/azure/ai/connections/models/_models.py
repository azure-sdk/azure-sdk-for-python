# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Dict, List, Literal, TYPE_CHECKING, Union

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import AuthenticationType

if TYPE_CHECKING:
    from .. import models as _models


class CredentialsApiKeyAuth(_model_base.Model):
    """The credentials needed for API key authentication.


    :ivar key: The API key. Required.
    :vartype key: str
    """

    key: str = rest_field()
    """The API key. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CredentialsSASAuth(_model_base.Model):
    """The credentials needed for Shared Access Signatures (SAS) authentication.


    :ivar sas: The Shared Access Signatures (SAS) token. Required.
    :vartype sas: str
    """

    sas: str = rest_field(name="SAS")
    """The Shared Access Signatures (SAS) token. Required."""

    @overload
    def __init__(
        self,
        *,
        sas: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetConnectionResponse(_model_base.Model):
    """Response from the listSecrets operation.


    :ivar id: A unique identifier for the connection. Required.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.ai.connections.models._models.InternalConnectionProperties
    """

    id: str = rest_field()
    """A unique identifier for the connection. Required."""
    name: str = rest_field()
    """The name of the resource. Required."""
    properties: "_models._models.InternalConnectionProperties" = rest_field()
    """The properties of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        properties: "_models._models.InternalConnectionProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetWorkspaceResponse(_model_base.Model):
    """Response from the Workspace - Get operation.


    :ivar id: A unique identifier for the resource. Required.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.ai.connections.models._models.WorkspaceProperties
    """

    id: str = rest_field()
    """A unique identifier for the resource. Required."""
    name: str = rest_field()
    """The name of the resource. Required."""
    properties: "_models._models.WorkspaceProperties" = rest_field()
    """The properties of the resource. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        properties: "_models._models.WorkspaceProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InternalConnectionProperties(_model_base.Model):
    """Connection properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    InternalConnectionPropertiesAADAuth, InternalConnectionPropertiesApiKeyAuth,
    InternalConnectionPropertiesNoAuth, InternalConnectionPropertiesSASAuth


    :ivar auth_type: Authentication type of the connection target. Required. Known values are:
     "ApiKey", "AAD", "SAS", and "None".
    :vartype auth_type: str or ~azure.ai.connections.models.AuthenticationType
    :ivar category: Category of the connection. Required. Known values are: "AzureOpenAI",
     "Serverless", "AzureBlob", "AIServices", and "CognitiveSearch".
    :vartype category: str or ~azure.ai.connections.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    auth_type: str = rest_discriminator(name="authType")
    """Authentication type of the connection target. Required. Known values are: \"ApiKey\", \"AAD\",
     \"SAS\", and \"None\"."""
    category: Union[str, "_models.ConnectionType"] = rest_field()
    """Category of the connection. Required. Known values are: \"AzureOpenAI\", \"Serverless\",
     \"AzureBlob\", \"AIServices\", and \"CognitiveSearch\"."""
    target: str = rest_field()
    """The connection URL to be used for this service. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: str,
        category: Union[str, "_models.ConnectionType"],
        target: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InternalConnectionPropertiesAADAuth(InternalConnectionProperties, discriminator="AAD"):
    """Connection properties for connections with AAD authentication (aka ``Entra ID passthrough``\\
    ).


    :ivar category: Category of the connection. Required. Known values are: "AzureOpenAI",
     "Serverless", "AzureBlob", "AIServices", and "CognitiveSearch".
    :vartype category: str or ~azure.ai.connections.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    :ivar auth_type: Authentication type of the connection target. Required. Entra ID
     authentication (formerly known as AAD)
    :vartype auth_type: str or ~azure.ai.connections.models.ENTRA_ID
    """

    auth_type: Literal[AuthenticationType.ENTRA_ID] = rest_discriminator(name="authType")  # type: ignore
    """Authentication type of the connection target. Required. Entra ID authentication (formerly known
     as AAD)"""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ConnectionType"],
        target: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, auth_type=AuthenticationType.ENTRA_ID, **kwargs)


class InternalConnectionPropertiesApiKeyAuth(InternalConnectionProperties, discriminator="ApiKey"):
    """Connection properties for connections with API key authentication.


    :ivar category: Category of the connection. Required. Known values are: "AzureOpenAI",
     "Serverless", "AzureBlob", "AIServices", and "CognitiveSearch".
    :vartype category: str or ~azure.ai.connections.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    :ivar auth_type: Authentication type of the connection target. Required. API Key authentication
    :vartype auth_type: str or ~azure.ai.connections.models.API_KEY
    :ivar credentials: Credentials will only be present for authType=ApiKey. Required.
    :vartype credentials: ~azure.ai.connections.models._models.CredentialsApiKeyAuth
    """

    auth_type: Literal[AuthenticationType.API_KEY] = rest_discriminator(name="authType")  # type: ignore
    """Authentication type of the connection target. Required. API Key authentication"""
    credentials: "_models._models.CredentialsApiKeyAuth" = rest_field()
    """Credentials will only be present for authType=ApiKey. Required."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ConnectionType"],
        target: str,
        credentials: "_models._models.CredentialsApiKeyAuth",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, auth_type=AuthenticationType.API_KEY, **kwargs)


class InternalConnectionPropertiesNoAuth(InternalConnectionProperties, discriminator="None"):
    """Connection properties for connections with no authentication.


    :ivar category: Category of the connection. Required. Known values are: "AzureOpenAI",
     "Serverless", "AzureBlob", "AIServices", and "CognitiveSearch".
    :vartype category: str or ~azure.ai.connections.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    :ivar auth_type: Authentication type of the connection target. Required. No authentication
    :vartype auth_type: str or ~azure.ai.connections.models.NONE
    """

    auth_type: Literal[AuthenticationType.NONE] = rest_discriminator(name="authType")  # type: ignore
    """Authentication type of the connection target. Required. No authentication"""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ConnectionType"],
        target: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, auth_type=AuthenticationType.NONE, **kwargs)


class InternalConnectionPropertiesSASAuth(InternalConnectionProperties, discriminator="SAS"):
    """Connection properties for connections with SAS authentication.


    :ivar category: Category of the connection. Required. Known values are: "AzureOpenAI",
     "Serverless", "AzureBlob", "AIServices", and "CognitiveSearch".
    :vartype category: str or ~azure.ai.connections.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    :ivar auth_type: Authentication type of the connection target. Required. Shared Access
     Signature (SAS) authentication
    :vartype auth_type: str or ~azure.ai.connections.models.SAS
    :ivar credentials: Credentials will only be present for authType=ApiKey. Required.
    :vartype credentials: ~azure.ai.connections.models._models.CredentialsSASAuth
    """

    auth_type: Literal[AuthenticationType.SAS] = rest_discriminator(name="authType")  # type: ignore
    """Authentication type of the connection target. Required. Shared Access Signature (SAS)
     authentication"""
    credentials: "_models._models.CredentialsSASAuth" = rest_field()
    """Credentials will only be present for authType=ApiKey. Required."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ConnectionType"],
        target: str,
        credentials: "_models._models.CredentialsSASAuth",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, auth_type=AuthenticationType.SAS, **kwargs)


class ListConnectionsResponse(_model_base.Model):
    """Response from the list operation.


    :ivar value: A list of connection list secrets. Required.
    :vartype value: list[~azure.ai.connections.models._models.GetConnectionResponse]
    """

    value: List["_models._models.GetConnectionResponse"] = rest_field()
    """A list of connection list secrets. Required."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models._models.GetConnectionResponse"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WorkspaceProperties(_model_base.Model):
    """workspace properties.


    :ivar application_insights: Authentication type of the connection target. Required.
    :vartype application_insights: str
    """

    application_insights: str = rest_field(name="applicationInsights")
    """Authentication type of the connection target. Required."""

    @overload
    def __init__(
        self,
        *,
        application_insights: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
