# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import AIProjectClientTestBase, AIProjectPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAIProjectRedTeamsOperations(AIProjectClientTestBase):
    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get(
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_list(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.list()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_create_run(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.create_run(
            red_team={
                "attackStrategies": ["str"],
                "id": "str",
                "numTurns": 0,
                "outputs": {"str": "str"},
                "riskCategories": ["str"],
                "simulationOnly": bool,
                "applicationScenario": "str",
                "properties": {"str": "str"},
                "scanName": "str",
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                },
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_upload_run(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.upload_run(
            redteam={
                "id": "str",
                "applicationScenario": "str",
                "attackStrategy": ["str"],
                "numTurns": 0,
                "outputs": {"str": "str"},
                "properties": {"str": "str"},
                "riskCategories": ["str"],
                "scanName": "str",
                "simulationOnly": bool,
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                },
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_upload_update_run(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.upload_update_run(
            name="str",
            redteam={
                "id": "str",
                "applicationScenario": "str",
                "attackStrategy": ["str"],
                "numTurns": 0,
                "outputs": {"str": "str"},
                "properties": {"str": "str"},
                "riskCategories": ["str"],
                "scanName": "str",
                "simulationOnly": bool,
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                },
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_jail_break_dataset_with_type(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_jail_break_dataset_with_type(
            type="str",
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_attack_objectives(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_attack_objectives()

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_jail_break_dataset(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_jail_break_dataset()

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_template_parameters_with_type(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_template_parameters_with_type(
            type="str",
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_template_parameters(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_template_parameters()

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_get_template_parameters_image(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.get_template_parameters_image(
            path="str",
        )

        # please add some check logic here by yourself
        # ...

    @AIProjectPreparer()
    @recorded_by_proxy
    def test_red_teams_submit_simulation(self, aiproject_endpoint):
        client = self.create_client(endpoint=aiproject_endpoint)
        response = client.red_teams.submit_simulation(
            body={
                "CustomizationParameters": {"HarmCategories": ["str"], "ApplicationScenario": "str"},
                "Headers": {"str": "str"},
                "IsMicrosoftTenant": bool,
                "Json": "str",
                "Params": {"str": "str"},
                "ResourceGroupName": "str",
                "SimulationType": "str",
                "SubscriptionId": "str",
                "TemplateKey": "str",
                "TemplateParameters": {"str": "str"},
                "Url": "str",
                "WorkspaceName": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
