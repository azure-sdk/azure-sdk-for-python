# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.maps.aio import AzureMapsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMapsManagementAccountsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMapsManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.accounts.create_or_update(
            resource_group_name=resource_group.name,
            account_name="str",
            maps_account={
                "location": "str",
                "sku": {"name": "str", "tier": "str"},
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "kind": "Gen2",
                "name": "str",
                "properties": {
                    "cors": {"corsRules": [{"allowedOrigins": ["str"]}]},
                    "disableLocalAuth": False,
                    "encryption": {
                        "customerManagedKeyEncryption": {
                            "keyEncryptionKeyIdentity": {
                                "delegatedIdentityClientId": "str",
                                "identityType": "str",
                                "userAssignedIdentityResourceId": "str",
                            },
                            "keyEncryptionKeyUrl": "str",
                        },
                        "infrastructureEncryption": "str",
                    },
                    "linkedResources": [{"id": "str", "uniqueName": "str"}],
                    "locations": [{"locationName": "str"}],
                    "provisioningState": "str",
                    "uniqueId": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.accounts.update(
            resource_group_name=resource_group.name,
            account_name="str",
            maps_account_update_parameters={
                "cors": {"corsRules": [{"allowedOrigins": ["str"]}]},
                "disableLocalAuth": False,
                "encryption": {
                    "customerManagedKeyEncryption": {
                        "keyEncryptionKeyIdentity": {
                            "delegatedIdentityClientId": "str",
                            "identityType": "str",
                            "userAssignedIdentityResourceId": "str",
                        },
                        "keyEncryptionKeyUrl": "str",
                    },
                    "infrastructureEncryption": "str",
                },
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "kind": "Gen2",
                "linkedResources": [{"id": "str", "uniqueName": "str"}],
                "locations": [{"locationName": "str"}],
                "provisioningState": "str",
                "sku": {"name": "str", "tier": "str"},
                "tags": {"str": "str"},
                "uniqueId": "str",
            },
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.accounts.delete(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.accounts.get(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.accounts.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-07-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription(self, resource_group):
        response = self.client.accounts.list_by_subscription(
            api_version="2024-07-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_sas(self, resource_group):
        response = await self.client.accounts.list_sas(
            resource_group_name=resource_group.name,
            account_name="str",
            maps_account_sas_parameters={
                "expiry": "str",
                "maxRatePerSecond": 500,
                "principalId": "str",
                "signingKey": "str",
                "start": "str",
                "regions": ["str"],
            },
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_keys(self, resource_group):
        response = await self.client.accounts.list_keys(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_regenerate_keys(self, resource_group):
        response = await self.client.accounts.regenerate_keys(
            resource_group_name=resource_group.name,
            account_name="str",
            key_specification={"keyType": "str"},
            api_version="2024-07-01-preview",
        )

        # please add some check logic here by yourself
        # ...
