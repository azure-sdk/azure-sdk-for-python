# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccountSasParameters(_serialization.Model):
    """Parameters used to create an account Shared Access Signature (SAS) token. The REST API access
    control is provided by Azure Maps Role Based Access (RBAC) identity and access.

    All required parameters must be populated in order to send to server.

    :ivar signing_key: The Maps account key to use for signing. Picking ``primaryKey`` or
     ``secondaryKey`` will use the Maps account Shared Keys, and using ``managedIdentity`` will use
     the auto-renewed private key to sign the SAS. Required. Known values are: "primaryKey",
     "secondaryKey", and "managedIdentity".
    :vartype signing_key: str or ~azure.mgmt.maps.models.SigningKey
    :ivar principal_id: The principal Id also known as the object Id of a User Assigned Managed
     Identity currently assigned to the Maps Account. To assign a Managed Identity of the account,
     use operation Create or Update an assign a User Assigned Identity resource Id. Required.
    :vartype principal_id: str
    :ivar regions: Optional, allows control of which region locations are permitted access to Azure
     Maps REST APIs with the SAS token. Example: "eastus", "westus2". Omitting this parameter will
     allow all region locations to be accessible.
    :vartype regions: list[str]
    :ivar max_rate_per_second: Required parameter which represents the desired maximum request per
     second to allowed for the given SAS token. This does not guarantee perfect accuracy in
     measurements but provides application safe guards of abuse with eventual enforcement.
    :vartype max_rate_per_second: int
    :ivar start: The date time offset of when the token validity begins. For example
     "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between ``start`` and
     ``expiry``. Required.
    :vartype start: str
    :ivar expiry: The date time offset of when the token validity expires. For example
     "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between ``start`` and
     ``expiry``. Required.
    :vartype expiry: str
    """

    _validation = {
        "signing_key": {"required": True},
        "principal_id": {"required": True},
        "max_rate_per_second": {"required": True, "maximum": 500, "minimum_ex": 0},
        "start": {"required": True},
        "expiry": {"required": True},
    }

    _attribute_map = {
        "signing_key": {"key": "signingKey", "type": "str"},
        "principal_id": {"key": "principalId", "type": "str"},
        "regions": {"key": "regions", "type": "[str]"},
        "max_rate_per_second": {"key": "maxRatePerSecond", "type": "int"},
        "start": {"key": "start", "type": "str"},
        "expiry": {"key": "expiry", "type": "str"},
    }

    def __init__(
        self,
        *,
        signing_key: Union[str, "_models.SigningKey"],
        principal_id: str,
        max_rate_per_second: int = 500,
        start: str,
        expiry: str,
        regions: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword signing_key: The Maps account key to use for signing. Picking ``primaryKey`` or
         ``secondaryKey`` will use the Maps account Shared Keys, and using ``managedIdentity`` will use
         the auto-renewed private key to sign the SAS. Required. Known values are: "primaryKey",
         "secondaryKey", and "managedIdentity".
        :paramtype signing_key: str or ~azure.mgmt.maps.models.SigningKey
        :keyword principal_id: The principal Id also known as the object Id of a User Assigned Managed
         Identity currently assigned to the Maps Account. To assign a Managed Identity of the account,
         use operation Create or Update an assign a User Assigned Identity resource Id. Required.
        :paramtype principal_id: str
        :keyword regions: Optional, allows control of which region locations are permitted access to
         Azure Maps REST APIs with the SAS token. Example: "eastus", "westus2". Omitting this parameter
         will allow all region locations to be accessible.
        :paramtype regions: list[str]
        :keyword max_rate_per_second: Required parameter which represents the desired maximum request
         per second to allowed for the given SAS token. This does not guarantee perfect accuracy in
         measurements but provides application safe guards of abuse with eventual enforcement.
        :paramtype max_rate_per_second: int
        :keyword start: The date time offset of when the token validity begins. For example
         "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between ``start`` and
         ``expiry``. Required.
        :paramtype start: str
        :keyword expiry: The date time offset of when the token validity expires. For example
         "2017-05-24T10:42:03.1567373Z". Maximum duration allowed is 24 hours between ``start`` and
         ``expiry``. Required.
        :paramtype expiry: str
        """
        super().__init__(**kwargs)
        self.signing_key = signing_key
        self.principal_id = principal_id
        self.regions = regions
        self.max_rate_per_second = max_rate_per_second
        self.start = start
        self.expiry = expiry


class CorsRule(_serialization.Model):
    """Specifies a CORS rule for the Map Account.

    All required parameters must be populated in order to send to server.

    :ivar allowed_origins: Required if CorsRule element is present. A list of origin domains that
     will be allowed via CORS, or "*" to allow all domains. Required.
    :vartype allowed_origins: list[str]
    """

    _validation = {
        "allowed_origins": {"required": True},
    }

    _attribute_map = {
        "allowed_origins": {"key": "allowedOrigins", "type": "[str]"},
    }

    def __init__(self, *, allowed_origins: List[str], **kwargs: Any) -> None:
        """
        :keyword allowed_origins: Required if CorsRule element is present. A list of origin domains
         that will be allowed via CORS, or "*" to allow all domains. Required.
        :paramtype allowed_origins: list[str]
        """
        super().__init__(**kwargs)
        self.allowed_origins = allowed_origins


class CorsRules(_serialization.Model):
    """Sets the CORS rules. You can include up to five CorsRule elements in the request.

    :ivar cors_rules: The list of CORS rules. You can include up to five CorsRule elements in the
     request.
    :vartype cors_rules: list[~azure.mgmt.maps.models.CorsRule]
    """

    _validation = {
        "cors_rules": {"max_items": 5, "min_items": 0},
    }

    _attribute_map = {
        "cors_rules": {"key": "corsRules", "type": "[CorsRule]"},
    }

    def __init__(self, *, cors_rules: Optional[List["_models.CorsRule"]] = None, **kwargs: Any) -> None:
        """
        :keyword cors_rules: The list of CORS rules. You can include up to five CorsRule elements in
         the request.
        :paramtype cors_rules: list[~azure.mgmt.maps.models.CorsRule]
        """
        super().__init__(**kwargs)
        self.cors_rules = cors_rules


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maps.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maps.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Creator(TrackedResource):
    """An Azure resource which represents Maps Creator product and provides ability to manage private
    location data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maps.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The Creator resource properties. Required.
    :vartype properties: ~azure.mgmt.maps.models.CreatorProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "CreatorProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.CreatorProperties",
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The Creator resource properties. Required.
        :paramtype properties: ~azure.mgmt.maps.models.CreatorProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class CreatorList(_serialization.Model):
    """A list of Creator resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: a Creator account.
    :vartype value: list[~azure.mgmt.maps.models.Creator]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
     It's null for now, added for future use.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Creator]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword next_link: URL client should use to fetch the next page (per server side paging).
         It's null for now, added for future use.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class CreatorProperties(_serialization.Model):
    """Creator resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar provisioning_state: The state of the resource provisioning, terminal states: Succeeded,
     Failed, Canceled.
    :vartype provisioning_state: str
    :ivar storage_units: The storage units to be allocated. Integer values from 1 to 100,
     inclusive. Required.
    :vartype storage_units: int
    :ivar total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for the
     creator resource.
    :vartype total_storage_unit_size_in_bytes: int
    :ivar consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
     creator resource.
    :vartype consumed_storage_unit_size_in_bytes: int
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "storage_units": {"required": True, "maximum": 100, "minimum": 1},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "storage_units": {"key": "storageUnits", "type": "int"},
        "total_storage_unit_size_in_bytes": {"key": "totalStorageUnitSizeInBytes", "type": "int"},
        "consumed_storage_unit_size_in_bytes": {"key": "consumedStorageUnitSizeInBytes", "type": "int"},
    }

    def __init__(
        self,
        *,
        storage_units: int,
        total_storage_unit_size_in_bytes: Optional[int] = None,
        consumed_storage_unit_size_in_bytes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword storage_units: The storage units to be allocated. Integer values from 1 to 100,
         inclusive. Required.
        :paramtype storage_units: int
        :keyword total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for
         the creator resource.
        :paramtype total_storage_unit_size_in_bytes: int
        :keyword consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
         creator resource.
        :paramtype consumed_storage_unit_size_in_bytes: int
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.storage_units = storage_units
        self.total_storage_unit_size_in_bytes = total_storage_unit_size_in_bytes
        self.consumed_storage_unit_size_in_bytes = consumed_storage_unit_size_in_bytes


class CreatorUpdateParameters(_serialization.Model):
    """Parameters used to update an existing Creator resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: Gets or sets a list of key value pairs that describe the resource. These tags can
     be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags
     can be provided for a resource. Each tag must have a key no greater than 128 characters and
     value no greater than 256 characters.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: The state of the resource provisioning, terminal states: Succeeded,
     Failed, Canceled.
    :vartype provisioning_state: str
    :ivar storage_units: The storage units to be allocated. Integer values from 1 to 100,
     inclusive.
    :vartype storage_units: int
    :ivar total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for the
     creator resource.
    :vartype total_storage_unit_size_in_bytes: int
    :ivar consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
     creator resource.
    :vartype consumed_storage_unit_size_in_bytes: int
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "storage_units": {"maximum": 100, "minimum": 1},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "storage_units": {"key": "properties.storageUnits", "type": "int"},
        "total_storage_unit_size_in_bytes": {"key": "properties.totalStorageUnitSizeInBytes", "type": "int"},
        "consumed_storage_unit_size_in_bytes": {"key": "properties.consumedStorageUnitSizeInBytes", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        storage_units: Optional[int] = None,
        total_storage_unit_size_in_bytes: Optional[int] = None,
        consumed_storage_unit_size_in_bytes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Gets or sets a list of key value pairs that describe the resource. These tags
         can be used in viewing and grouping this resource (across resource groups). A maximum of 15
         tags can be provided for a resource. Each tag must have a key no greater than 128 characters
         and value no greater than 256 characters.
        :paramtype tags: dict[str, str]
        :keyword storage_units: The storage units to be allocated. Integer values from 1 to 100,
         inclusive.
        :paramtype storage_units: int
        :keyword total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for
         the creator resource.
        :paramtype total_storage_unit_size_in_bytes: int
        :keyword consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
         creator resource.
        :paramtype consumed_storage_unit_size_in_bytes: int
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.provisioning_state = None
        self.storage_units = storage_units
        self.total_storage_unit_size_in_bytes = total_storage_unit_size_in_bytes
        self.consumed_storage_unit_size_in_bytes = consumed_storage_unit_size_in_bytes


class Encryption(_serialization.Model):
    """All encryption configuration for a resource.

    :ivar infrastructure_encryption: (Optional) Discouraged to include in resource definition. Only
     needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE
     is an example of this. Values are enabled and disabled. Known values are: "enabled" and
     "disabled".
    :vartype infrastructure_encryption: str or ~azure.mgmt.maps.models.InfrastructureEncryption
    :ivar customer_managed_key_encryption: All Customer-managed key encryption properties for the
     resource.
    :vartype customer_managed_key_encryption:
     ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryption
    """

    _attribute_map = {
        "infrastructure_encryption": {"key": "infrastructureEncryption", "type": "str"},
        "customer_managed_key_encryption": {
            "key": "customerManagedKeyEncryption",
            "type": "EncryptionCustomerManagedKeyEncryption",
        },
    }

    def __init__(
        self,
        *,
        infrastructure_encryption: Optional[Union[str, "_models.InfrastructureEncryption"]] = None,
        customer_managed_key_encryption: Optional["_models.EncryptionCustomerManagedKeyEncryption"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword infrastructure_encryption: (Optional) Discouraged to include in resource definition.
         Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL
         TDE is an example of this. Values are enabled and disabled. Known values are: "enabled" and
         "disabled".
        :paramtype infrastructure_encryption: str or ~azure.mgmt.maps.models.InfrastructureEncryption
        :keyword customer_managed_key_encryption: All Customer-managed key encryption properties for
         the resource.
        :paramtype customer_managed_key_encryption:
         ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryption
        """
        super().__init__(**kwargs)
        self.infrastructure_encryption = infrastructure_encryption
        self.customer_managed_key_encryption = customer_managed_key_encryption


class EncryptionCustomerManagedKeyEncryption(_serialization.Model):
    """All Customer-managed key encryption properties for the resource.

    :ivar key_encryption_key_identity: All identity configuration for Customer-managed key settings
     defining which identity should be used to auth to Key Vault.
    :vartype key_encryption_key_identity:
     ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryptionKeyIdentity
    :ivar key_encryption_key_url: key encryption key Url, versioned or unversioned. Ex:
     https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
     https://contosovault.vault.azure.net/keys/contosokek.
    :vartype key_encryption_key_url: str
    """

    _attribute_map = {
        "key_encryption_key_identity": {
            "key": "keyEncryptionKeyIdentity",
            "type": "EncryptionCustomerManagedKeyEncryptionKeyIdentity",
        },
        "key_encryption_key_url": {"key": "keyEncryptionKeyUrl", "type": "str"},
    }

    def __init__(
        self,
        *,
        key_encryption_key_identity: Optional["_models.EncryptionCustomerManagedKeyEncryptionKeyIdentity"] = None,
        key_encryption_key_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword key_encryption_key_identity: All identity configuration for Customer-managed key
         settings defining which identity should be used to auth to Key Vault.
        :paramtype key_encryption_key_identity:
         ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryptionKeyIdentity
        :keyword key_encryption_key_url: key encryption key Url, versioned or unversioned. Ex:
         https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or
         https://contosovault.vault.azure.net/keys/contosokek.
        :paramtype key_encryption_key_url: str
        """
        super().__init__(**kwargs)
        self.key_encryption_key_identity = key_encryption_key_identity
        self.key_encryption_key_url = key_encryption_key_url


class EncryptionCustomerManagedKeyEncryptionKeyIdentity(_serialization.Model):  # pylint: disable=name-too-long
    """All identity configuration for Customer-managed key settings defining which identity should be
    used to auth to Key Vault.

    :ivar identity_type: The type of identity to use. Values can be systemAssignedIdentity,
     userAssignedIdentity, or delegatedResourceIdentity. Known values are: "systemAssignedIdentity",
     "userAssignedIdentity", and "delegatedResourceIdentity".
    :vartype identity_type: str or
     ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryptionKeyIdentityType
    :ivar user_assigned_identity_resource_id: User assigned identity to use for accessing key
     encryption key Url. Ex:
     /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/:code:`<resource
     group>`/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive
     with identityType systemAssignedIdentity.
    :vartype user_assigned_identity_resource_id: str
    :ivar federated_client_id: application client identity to use for accessing key encryption key
     Url in a different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540.
    :vartype federated_client_id: str
    :ivar delegated_identity_client_id: delegated identity to use for accessing key encryption key
     Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/:code:`<resource
     group>`/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive
     with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
    :vartype delegated_identity_client_id: str
    """

    _attribute_map = {
        "identity_type": {"key": "identityType", "type": "str"},
        "user_assigned_identity_resource_id": {"key": "userAssignedIdentityResourceId", "type": "str"},
        "federated_client_id": {"key": "federatedClientId", "type": "str"},
        "delegated_identity_client_id": {"key": "delegatedIdentityClientId", "type": "str"},
    }

    def __init__(
        self,
        *,
        identity_type: Optional[Union[str, "_models.EncryptionCustomerManagedKeyEncryptionKeyIdentityType"]] = None,
        user_assigned_identity_resource_id: Optional[str] = None,
        federated_client_id: Optional[str] = None,
        delegated_identity_client_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity_type: The type of identity to use. Values can be systemAssignedIdentity,
         userAssignedIdentity, or delegatedResourceIdentity. Known values are: "systemAssignedIdentity",
         "userAssignedIdentity", and "delegatedResourceIdentity".
        :paramtype identity_type: str or
         ~azure.mgmt.maps.models.EncryptionCustomerManagedKeyEncryptionKeyIdentityType
        :keyword user_assigned_identity_resource_id: User assigned identity to use for accessing key
         encryption key Url. Ex:
         /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/:code:`<resource
         group>`/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive
         with identityType systemAssignedIdentity.
        :paramtype user_assigned_identity_resource_id: str
        :keyword federated_client_id: application client identity to use for accessing key encryption
         key Url in a different tenant. Ex: f83c6b1b-4d34-47e4-bb34-9d83df58b540.
        :paramtype federated_client_id: str
        :keyword delegated_identity_client_id: delegated identity to use for accessing key encryption
         key Url. Ex:
         /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/:code:`<resource
         group>`/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive
         with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
        :paramtype delegated_identity_client_id: str
        """
        super().__init__(**kwargs)
        self.identity_type = identity_type
        self.user_assigned_identity_resource_id = user_assigned_identity_resource_id
        self.federated_client_id = federated_client_id
        self.delegated_identity_client_id = delegated_identity_client_id


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.maps.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.maps.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.maps.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.maps.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class LinkedResource(_serialization.Model):
    """Linked resource is reference to a resource deployed in an Azure subscription, add the linked
    resource ``uniqueName`` value as an optional parameter for operations on Azure Maps Geospatial
    REST APIs.

    All required parameters must be populated in order to send to server.

    :ivar unique_name: A provided name which uniquely identifies the linked resource. Required.
    :vartype unique_name: str
    :ivar id: ARM resource id in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    """

    _validation = {
        "unique_name": {"required": True},
        "id": {"required": True},
    }

    _attribute_map = {
        "unique_name": {"key": "uniqueName", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, unique_name: str, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword unique_name: A provided name which uniquely identifies the linked resource. Required.
        :paramtype unique_name: str
        :keyword id: ARM resource id in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.  # pylint: disable=line-too-long
         Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.unique_name = unique_name
        self.id = id


class LocationsItem(_serialization.Model):
    """Data processing location.

    All required parameters must be populated in order to send to server.

    :ivar location_name: The location name. Required.
    :vartype location_name: str
    """

    _validation = {
        "location_name": {"required": True},
    }

    _attribute_map = {
        "location_name": {"key": "locationName", "type": "str"},
    }

    def __init__(self, *, location_name: str, **kwargs: Any) -> None:
        """
        :keyword location_name: The location name. Required.
        :paramtype location_name: str
        """
        super().__init__(**kwargs)
        self.location_name = location_name


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.maps.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str, ~azure.mgmt.maps.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.maps.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str, ~azure.mgmt.maps.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class MapsAccount(TrackedResource):
    """An Azure resource which represents access to a suite of Maps REST APIs.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.maps.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar sku: The SKU of this account. Required.
    :vartype sku: ~azure.mgmt.maps.models.Sku
    :ivar kind: Get or Set Kind property. "Gen2"
    :vartype kind: str or ~azure.mgmt.maps.models.Kind
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.maps.models.ManagedServiceIdentity
    :ivar properties: The map account properties.
    :vartype properties: ~azure.mgmt.maps.models.MapsAccountProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "sku": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "sku": {"key": "sku", "type": "Sku"},
        "kind": {"key": "kind", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "properties": {"key": "properties", "type": "MapsAccountProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        sku: "_models.Sku",
        tags: Optional[Dict[str, str]] = None,
        kind: Optional[Union[str, "_models.Kind"]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        properties: Optional["_models.MapsAccountProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword sku: The SKU of this account. Required.
        :paramtype sku: ~azure.mgmt.maps.models.Sku
        :keyword kind: Get or Set Kind property. "Gen2"
        :paramtype kind: str or ~azure.mgmt.maps.models.Kind
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.maps.models.ManagedServiceIdentity
        :keyword properties: The map account properties.
        :paramtype properties: ~azure.mgmt.maps.models.MapsAccountProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.sku = sku
        self.kind = kind
        self.identity = identity
        self.properties = properties


class MapsAccountKeys(_serialization.Model):
    """The set of keys which can be used to access the Maps REST APIs. Two keys are provided for key
    rotation without interruption.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar primary_key_last_updated: The last updated date and time of the primary key.
    :vartype primary_key_last_updated: str
    :ivar primary_key: The primary key for accessing the Maps REST APIs.
    :vartype primary_key: str
    :ivar secondary_key: The secondary key for accessing the Maps REST APIs.
    :vartype secondary_key: str
    :ivar secondary_key_last_updated: The last updated date and time of the secondary key.
    :vartype secondary_key_last_updated: str
    """

    _validation = {
        "primary_key_last_updated": {"readonly": True},
        "primary_key": {"readonly": True},
        "secondary_key": {"readonly": True},
        "secondary_key_last_updated": {"readonly": True},
    }

    _attribute_map = {
        "primary_key_last_updated": {"key": "primaryKeyLastUpdated", "type": "str"},
        "primary_key": {"key": "primaryKey", "type": "str"},
        "secondary_key": {"key": "secondaryKey", "type": "str"},
        "secondary_key_last_updated": {"key": "secondaryKeyLastUpdated", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.primary_key_last_updated = None
        self.primary_key = None
        self.secondary_key = None
        self.secondary_key_last_updated = None


class MapsAccountProperties(_serialization.Model):
    """Additional Maps account properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar unique_id: A unique identifier for the Maps Account.
    :vartype unique_id: str
    :ivar disable_local_auth: Allows toggle functionality on Azure Policy to disable Azure Maps
     local authentication support. This will disable Shared Keys and Shared Access Signature Token
     authentication from any usage.
    :vartype disable_local_auth: bool
    :ivar provisioning_state: The provisioning state of the Maps account resource, Account updates
     can only be performed on terminal states. Terminal states: ``Succeeded`` and ``Failed``.
    :vartype provisioning_state: str
    :ivar linked_resources: The array of associated resources to the Maps account. Linked resource
     in the array cannot individually update, you must update all linked resources in the array
     together. These resources may be used on operations on the Azure Maps REST API. Access is
     controlled by the Maps Account Managed Identity(s) permissions to those resource(s).
    :vartype linked_resources: list[~azure.mgmt.maps.models.LinkedResource]
    :ivar cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the Blob service.
    :vartype cors: ~azure.mgmt.maps.models.CorsRules
    :ivar encryption: All encryption configuration for a resource.
    :vartype encryption: ~azure.mgmt.maps.models.Encryption
    :ivar locations: List of additional data processing regions for the Maps Account, which may
     result in requests being processed in another geography. Some features or results may be
     restricted to specific regions. By default, Maps REST APIs process requests according to the
     account location or the `geographic scope
     <https://learn.microsoft.com/azure/azure-maps/geographic-scope>`_.
    :vartype locations: list[~azure.mgmt.maps.models.LocationsItem]
    """

    _validation = {
        "unique_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "linked_resources": {"max_items": 10, "min_items": 0},
    }

    _attribute_map = {
        "unique_id": {"key": "uniqueId", "type": "str"},
        "disable_local_auth": {"key": "disableLocalAuth", "type": "bool"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "linked_resources": {"key": "linkedResources", "type": "[LinkedResource]"},
        "cors": {"key": "cors", "type": "CorsRules"},
        "encryption": {"key": "encryption", "type": "Encryption"},
        "locations": {"key": "locations", "type": "[LocationsItem]"},
    }

    def __init__(
        self,
        *,
        disable_local_auth: bool = False,
        linked_resources: Optional[List["_models.LinkedResource"]] = None,
        cors: Optional["_models.CorsRules"] = None,
        encryption: Optional["_models.Encryption"] = None,
        locations: Optional[List["_models.LocationsItem"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword disable_local_auth: Allows toggle functionality on Azure Policy to disable Azure Maps
         local authentication support. This will disable Shared Keys and Shared Access Signature Token
         authentication from any usage.
        :paramtype disable_local_auth: bool
        :keyword linked_resources: The array of associated resources to the Maps account. Linked
         resource in the array cannot individually update, you must update all linked resources in the
         array together. These resources may be used on operations on the Azure Maps REST API. Access is
         controlled by the Maps Account Managed Identity(s) permissions to those resource(s).
        :paramtype linked_resources: list[~azure.mgmt.maps.models.LinkedResource]
        :keyword cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the Blob service.
        :paramtype cors: ~azure.mgmt.maps.models.CorsRules
        :keyword encryption: All encryption configuration for a resource.
        :paramtype encryption: ~azure.mgmt.maps.models.Encryption
        :keyword locations: List of additional data processing regions for the Maps Account, which may
         result in requests being processed in another geography. Some features or results may be
         restricted to specific regions. By default, Maps REST APIs process requests according to the
         account location or the `geographic scope
         <https://learn.microsoft.com/azure/azure-maps/geographic-scope>`_.
        :paramtype locations: list[~azure.mgmt.maps.models.LocationsItem]
        """
        super().__init__(**kwargs)
        self.unique_id = None
        self.disable_local_auth = disable_local_auth
        self.provisioning_state = None
        self.linked_resources = linked_resources
        self.cors = cors
        self.encryption = encryption
        self.locations = locations


class MapsAccounts(_serialization.Model):
    """A list of Maps Accounts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: a Maps Account.
    :vartype value: list[~azure.mgmt.maps.models.MapsAccount]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
     It's null for now, added for future use.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[MapsAccount]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword next_link: URL client should use to fetch the next page (per server side paging).
         It's null for now, added for future use.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class MapsAccountSasToken(_serialization.Model):
    """A new Sas token which can be used to access the Maps REST APIs and is controlled by the
    specified Managed identity permissions on Azure (IAM) Role Based Access Control.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar account_sas_token: The shared access signature access token.
    :vartype account_sas_token: str
    """

    _validation = {
        "account_sas_token": {"readonly": True},
    }

    _attribute_map = {
        "account_sas_token": {"key": "accountSasToken", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.account_sas_token = None


class MapsAccountUpdateParameters(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Parameters used to update an existing Maps Account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: Gets or sets a list of key value pairs that describe the resource. These tags can
     be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags
     can be provided for a resource. Each tag must have a key no greater than 128 characters and
     value no greater than 256 characters.
    :vartype tags: dict[str, str]
    :ivar kind: Get or Set Kind property. "Gen2"
    :vartype kind: str or ~azure.mgmt.maps.models.Kind
    :ivar sku: The SKU of this account.
    :vartype sku: ~azure.mgmt.maps.models.Sku
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.maps.models.ManagedServiceIdentity
    :ivar unique_id: A unique identifier for the Maps Account.
    :vartype unique_id: str
    :ivar disable_local_auth: Allows toggle functionality on Azure Policy to disable Azure Maps
     local authentication support. This will disable Shared Keys and Shared Access Signature Token
     authentication from any usage.
    :vartype disable_local_auth: bool
    :ivar provisioning_state: The provisioning state of the Maps account resource, Account updates
     can only be performed on terminal states. Terminal states: ``Succeeded`` and ``Failed``.
    :vartype provisioning_state: str
    :ivar linked_resources: The array of associated resources to the Maps account. Linked resource
     in the array cannot individually update, you must update all linked resources in the array
     together. These resources may be used on operations on the Azure Maps REST API. Access is
     controlled by the Maps Account Managed Identity(s) permissions to those resource(s).
    :vartype linked_resources: list[~azure.mgmt.maps.models.LinkedResource]
    :ivar cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the Blob service.
    :vartype cors: ~azure.mgmt.maps.models.CorsRules
    :ivar encryption: All encryption configuration for a resource.
    :vartype encryption: ~azure.mgmt.maps.models.Encryption
    :ivar locations: List of additional data processing regions for the Maps Account, which may
     result in requests being processed in another geography. Some features or results may be
     restricted to specific regions. By default, Maps REST APIs process requests according to the
     account location or the `geographic scope
     <https://learn.microsoft.com/azure/azure-maps/geographic-scope>`_.
    :vartype locations: list[~azure.mgmt.maps.models.LocationsItem]
    """

    _validation = {
        "unique_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "linked_resources": {"max_items": 10, "min_items": 0},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "kind": {"key": "kind", "type": "str"},
        "sku": {"key": "sku", "type": "Sku"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "unique_id": {"key": "properties.uniqueId", "type": "str"},
        "disable_local_auth": {"key": "properties.disableLocalAuth", "type": "bool"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "linked_resources": {"key": "properties.linkedResources", "type": "[LinkedResource]"},
        "cors": {"key": "properties.cors", "type": "CorsRules"},
        "encryption": {"key": "properties.encryption", "type": "Encryption"},
        "locations": {"key": "properties.locations", "type": "[LocationsItem]"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        kind: Optional[Union[str, "_models.Kind"]] = None,
        sku: Optional["_models.Sku"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        disable_local_auth: bool = False,
        linked_resources: Optional[List["_models.LinkedResource"]] = None,
        cors: Optional["_models.CorsRules"] = None,
        encryption: Optional["_models.Encryption"] = None,
        locations: Optional[List["_models.LocationsItem"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Gets or sets a list of key value pairs that describe the resource. These tags
         can be used in viewing and grouping this resource (across resource groups). A maximum of 15
         tags can be provided for a resource. Each tag must have a key no greater than 128 characters
         and value no greater than 256 characters.
        :paramtype tags: dict[str, str]
        :keyword kind: Get or Set Kind property. "Gen2"
        :paramtype kind: str or ~azure.mgmt.maps.models.Kind
        :keyword sku: The SKU of this account.
        :paramtype sku: ~azure.mgmt.maps.models.Sku
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.maps.models.ManagedServiceIdentity
        :keyword disable_local_auth: Allows toggle functionality on Azure Policy to disable Azure Maps
         local authentication support. This will disable Shared Keys and Shared Access Signature Token
         authentication from any usage.
        :paramtype disable_local_auth: bool
        :keyword linked_resources: The array of associated resources to the Maps account. Linked
         resource in the array cannot individually update, you must update all linked resources in the
         array together. These resources may be used on operations on the Azure Maps REST API. Access is
         controlled by the Maps Account Managed Identity(s) permissions to those resource(s).
        :paramtype linked_resources: list[~azure.mgmt.maps.models.LinkedResource]
        :keyword cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the Blob service.
        :paramtype cors: ~azure.mgmt.maps.models.CorsRules
        :keyword encryption: All encryption configuration for a resource.
        :paramtype encryption: ~azure.mgmt.maps.models.Encryption
        :keyword locations: List of additional data processing regions for the Maps Account, which may
         result in requests being processed in another geography. Some features or results may be
         restricted to specific regions. By default, Maps REST APIs process requests according to the
         account location or the `geographic scope
         <https://learn.microsoft.com/azure/azure-maps/geographic-scope>`_.
        :paramtype locations: list[~azure.mgmt.maps.models.LocationsItem]
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.kind = kind
        self.sku = sku
        self.identity = identity
        self.unique_id = None
        self.disable_local_auth = disable_local_auth
        self.provisioning_state = None
        self.linked_resources = linked_resources
        self.cors = cors
        self.encryption = encryption
        self.locations = locations


class MapsKeySpecification(_serialization.Model):
    """Whether the operation refers to the primary or secondary key.

    All required parameters must be populated in order to send to server.

    :ivar key_type: Whether the operation refers to the primary or secondary key. Required. Known
     values are: "primary" and "secondary".
    :vartype key_type: str or ~azure.mgmt.maps.models.KeyType
    """

    _validation = {
        "key_type": {"required": True},
    }

    _attribute_map = {
        "key_type": {"key": "keyType", "type": "str"},
    }

    def __init__(self, *, key_type: Union[str, "_models.KeyType"], **kwargs: Any) -> None:
        """
        :keyword key_type: Whether the operation refers to the primary or secondary key. Required.
         Known values are: "primary" and "secondary".
        :paramtype key_type: str or ~azure.mgmt.maps.models.KeyType
        """
        super().__init__(**kwargs)
        self.key_type = key_type


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.maps.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.maps.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.maps.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.maps.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.maps.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Sku(_serialization.Model):
    """The SKU of the Maps Account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU, in standard format (such as G2). Required. "G2"
    :vartype name: str or ~azure.mgmt.maps.models.Name
    :ivar tier: Gets the sku tier. This is based on the SKU name.
    :vartype tier: str
    """

    _validation = {
        "name": {"required": True},
        "tier": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(self, *, name: Union[str, "_models.Name"], **kwargs: Any) -> None:
        """
        :keyword name: The name of the SKU, in standard format (such as G2). Required. "G2"
        :paramtype name: str or ~azure.mgmt.maps.models.Name
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = None


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.maps.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.maps.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.maps.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.maps.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None
