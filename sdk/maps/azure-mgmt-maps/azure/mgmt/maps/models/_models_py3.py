# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Creator(TrackedResource):
    """An Azure resource which represents Maps Creator product and provides ability to manage private
    location data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The Creator resource properties. Required.
    :vartype properties: ~azure.mgmt.maps.models.CreatorProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "CreatorProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.CreatorProperties",
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The Creator resource properties. Required.
        :paramtype properties: ~azure.mgmt.maps.models.CreatorProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class CreatorList(_serialization.Model):
    """A list of Creator resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: a Creator account.
    :vartype value: list[~azure.mgmt.maps.models.Creator]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
     It's null for now, added for future use.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Creator]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword next_link: URL client should use to fetch the next page (per server side paging).
         It's null for now, added for future use.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class CreatorProperties(_serialization.Model):
    """Creator resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: The state of the resource provisioning, terminal states: Succeeded,
     Failed, Canceled.
    :vartype provisioning_state: str
    :ivar storage_units: The storage units to be allocated. Integer values from 1 to 100,
     inclusive. Required.
    :vartype storage_units: int
    :ivar total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for the
     creator resource.
    :vartype total_storage_unit_size_in_bytes: int
    :ivar consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
     creator resource.
    :vartype consumed_storage_unit_size_in_bytes: int
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "storage_units": {"required": True, "maximum": 100, "minimum": 1},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "storage_units": {"key": "storageUnits", "type": "int"},
        "total_storage_unit_size_in_bytes": {"key": "totalStorageUnitSizeInBytes", "type": "int"},
        "consumed_storage_unit_size_in_bytes": {"key": "consumedStorageUnitSizeInBytes", "type": "int"},
    }

    def __init__(
        self,
        *,
        storage_units: int,
        total_storage_unit_size_in_bytes: Optional[int] = None,
        consumed_storage_unit_size_in_bytes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword storage_units: The storage units to be allocated. Integer values from 1 to 100,
         inclusive. Required.
        :paramtype storage_units: int
        :keyword total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for
         the creator resource.
        :paramtype total_storage_unit_size_in_bytes: int
        :keyword consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
         creator resource.
        :paramtype consumed_storage_unit_size_in_bytes: int
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.storage_units = storage_units
        self.total_storage_unit_size_in_bytes = total_storage_unit_size_in_bytes
        self.consumed_storage_unit_size_in_bytes = consumed_storage_unit_size_in_bytes


class CreatorUpdateParameters(_serialization.Model):
    """Parameters used to update an existing Creator resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: Gets or sets a list of key value pairs that describe the resource. These tags can
     be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags
     can be provided for a resource. Each tag must have a key no greater than 128 characters and
     value no greater than 256 characters.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: The state of the resource provisioning, terminal states: Succeeded,
     Failed, Canceled.
    :vartype provisioning_state: str
    :ivar storage_units: The storage units to be allocated. Integer values from 1 to 100,
     inclusive.
    :vartype storage_units: int
    :ivar total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for the
     creator resource.
    :vartype total_storage_unit_size_in_bytes: int
    :ivar consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
     creator resource.
    :vartype consumed_storage_unit_size_in_bytes: int
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "storage_units": {"maximum": 100, "minimum": 1},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "storage_units": {"key": "properties.storageUnits", "type": "int"},
        "total_storage_unit_size_in_bytes": {"key": "properties.totalStorageUnitSizeInBytes", "type": "int"},
        "consumed_storage_unit_size_in_bytes": {"key": "properties.consumedStorageUnitSizeInBytes", "type": "int"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        storage_units: Optional[int] = None,
        total_storage_unit_size_in_bytes: Optional[int] = None,
        consumed_storage_unit_size_in_bytes: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Gets or sets a list of key value pairs that describe the resource. These tags
         can be used in viewing and grouping this resource (across resource groups). A maximum of 15
         tags can be provided for a resource. Each tag must have a key no greater than 128 characters
         and value no greater than 256 characters.
        :paramtype tags: dict[str, str]
        :keyword storage_units: The storage units to be allocated. Integer values from 1 to 100,
         inclusive.
        :paramtype storage_units: int
        :keyword total_storage_unit_size_in_bytes: The total allocated storage unit size in bytes for
         the creator resource.
        :paramtype total_storage_unit_size_in_bytes: int
        :keyword consumed_storage_unit_size_in_bytes: The consumed storage unit size in bytes for the
         creator resource.
        :paramtype consumed_storage_unit_size_in_bytes: int
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.provisioning_state = None
        self.storage_units = storage_units
        self.total_storage_unit_size_in_bytes = total_storage_unit_size_in_bytes
        self.consumed_storage_unit_size_in_bytes = consumed_storage_unit_size_in_bytes


class Dimension(_serialization.Model):
    """Dimension of map account, for example API Category, Api Name, Result Type, and Response Code.

    :ivar name: Display name of dimension.
    :vartype name: str
    :ivar display_name: Display name of dimension.
    :vartype display_name: str
    :ivar internal_name: Internal name of the dimension.
    :vartype internal_name: str
    :ivar internal_metric_name: Internal metric name of the dimension.
    :vartype internal_metric_name: str
    :ivar source_mdm_namespace: Source Mdm Namespace of the dimension.
    :vartype source_mdm_namespace: str
    :ivar to_be_exported_to_shoebox: Flag to indicate exporting to Azure Monitor.
    :vartype to_be_exported_to_shoebox: bool
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "internal_name": {"key": "internalName", "type": "str"},
        "internal_metric_name": {"key": "internalMetricName", "type": "str"},
        "source_mdm_namespace": {"key": "sourceMdmNamespace", "type": "str"},
        "to_be_exported_to_shoebox": {"key": "toBeExportedToShoebox", "type": "bool"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        internal_name: Optional[str] = None,
        internal_metric_name: Optional[str] = None,
        source_mdm_namespace: Optional[str] = None,
        to_be_exported_to_shoebox: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Display name of dimension.
        :paramtype name: str
        :keyword display_name: Display name of dimension.
        :paramtype display_name: str
        :keyword internal_name: Internal name of the dimension.
        :paramtype internal_name: str
        :keyword internal_metric_name: Internal metric name of the dimension.
        :paramtype internal_metric_name: str
        :keyword source_mdm_namespace: Source Mdm Namespace of the dimension.
        :paramtype source_mdm_namespace: str
        :keyword to_be_exported_to_shoebox: Flag to indicate exporting to Azure Monitor.
        :paramtype to_be_exported_to_shoebox: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.internal_name = internal_name
        self.internal_metric_name = internal_metric_name
        self.source_mdm_namespace = source_mdm_namespace
        self.to_be_exported_to_shoebox = to_be_exported_to_shoebox


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.maps.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.maps.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.maps.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.maps.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class MapsKeySpecification(_serialization.Model):
    """Whether the operation refers to the primary or secondary key.

    All required parameters must be populated in order to send to Azure.

    :ivar key_type: Whether the operation refers to the primary or secondary key. Required. Known
     values are: "primary" and "secondary".
    :vartype key_type: str or ~azure.mgmt.maps.models.KeyType
    """

    _validation = {
        "key_type": {"required": True},
    }

    _attribute_map = {
        "key_type": {"key": "keyType", "type": "str"},
    }

    def __init__(self, *, key_type: Union[str, "_models.KeyType"], **kwargs: Any) -> None:
        """
        :keyword key_type: Whether the operation refers to the primary or secondary key. Required.
         Known values are: "primary" and "secondary".
        :paramtype key_type: str or ~azure.mgmt.maps.models.KeyType
        """
        super().__init__(**kwargs)
        self.key_type = key_type


class MapsOperations(_serialization.Model):
    """The set of operations available for Maps.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: An operation available for Maps.
    :vartype value: list[~azure.mgmt.maps.models.OperationDetail]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
     It's null for now, added for future use.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[OperationDetail]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword next_link: URL client should use to fetch the next page (per server side paging).
         It's null for now, added for future use.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class MetricSpecification(_serialization.Model):
    """Metric specification of operation.

    :ivar name: Name of metric specification.
    :vartype name: str
    :ivar display_name: Display name of metric specification.
    :vartype display_name: str
    :ivar display_description: Display description of metric specification.
    :vartype display_description: str
    :ivar unit: Unit could be Count.
    :vartype unit: str
    :ivar dimensions: Dimensions of map account.
    :vartype dimensions: list[~azure.mgmt.maps.models.Dimension]
    :ivar aggregation_type: Aggregation type could be Average.
    :vartype aggregation_type: str
    :ivar fill_gap_with_zero: The property to decide fill gap with zero or not.
    :vartype fill_gap_with_zero: bool
    :ivar category: The category this metric specification belong to, could be Capacity.
    :vartype category: str
    :ivar resource_id_dimension_name_override: Account Resource Id.
    :vartype resource_id_dimension_name_override: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "display_description": {"key": "displayDescription", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "dimensions": {"key": "dimensions", "type": "[Dimension]"},
        "aggregation_type": {"key": "aggregationType", "type": "str"},
        "fill_gap_with_zero": {"key": "fillGapWithZero", "type": "bool"},
        "category": {"key": "category", "type": "str"},
        "resource_id_dimension_name_override": {"key": "resourceIdDimensionNameOverride", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        display_description: Optional[str] = None,
        unit: Optional[str] = None,
        dimensions: Optional[List["_models.Dimension"]] = None,
        aggregation_type: Optional[str] = None,
        fill_gap_with_zero: Optional[bool] = None,
        category: Optional[str] = None,
        resource_id_dimension_name_override: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of metric specification.
        :paramtype name: str
        :keyword display_name: Display name of metric specification.
        :paramtype display_name: str
        :keyword display_description: Display description of metric specification.
        :paramtype display_description: str
        :keyword unit: Unit could be Count.
        :paramtype unit: str
        :keyword dimensions: Dimensions of map account.
        :paramtype dimensions: list[~azure.mgmt.maps.models.Dimension]
        :keyword aggregation_type: Aggregation type could be Average.
        :paramtype aggregation_type: str
        :keyword fill_gap_with_zero: The property to decide fill gap with zero or not.
        :paramtype fill_gap_with_zero: bool
        :keyword category: The category this metric specification belong to, could be Capacity.
        :paramtype category: str
        :keyword resource_id_dimension_name_override: Account Resource Id.
        :paramtype resource_id_dimension_name_override: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.display_description = display_description
        self.unit = unit
        self.dimensions = dimensions
        self.aggregation_type = aggregation_type
        self.fill_gap_with_zero = fill_gap_with_zero
        self.category = category
        self.resource_id_dimension_name_override = resource_id_dimension_name_override


class OperationDetail(_serialization.Model):
    """Operation detail payload.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar display: Display of the operation.
    :vartype display: ~azure.mgmt.maps.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar service_specification: One property of operation, include metric specifications.
    :vartype service_specification: ~azure.mgmt.maps.models.ServiceSpecification
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "service_specification": {"key": "properties.serviceSpecification", "type": "ServiceSpecification"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        service_specification: Optional["_models.ServiceSpecification"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the operation.
        :paramtype name: str
        :keyword is_data_action: Indicates whether the operation is a data action.
        :paramtype is_data_action: bool
        :keyword display: Display of the operation.
        :paramtype display: ~azure.mgmt.maps.models.OperationDisplay
        :keyword origin: Origin of the operation.
        :paramtype origin: str
        :keyword service_specification: One property of operation, include metric specifications.
        :paramtype service_specification: ~azure.mgmt.maps.models.ServiceSpecification
        """
        super().__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display
        self.origin = origin
        self.service_specification = service_specification


class OperationDisplay(_serialization.Model):
    """Operation display payload.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource of the operation.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation.
    :vartype description: str
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword provider: Resource provider of the operation.
        :paramtype provider: str
        :keyword resource: Resource of the operation.
        :paramtype resource: str
        :keyword operation: Localized friendly name for the operation.
        :paramtype operation: str
        :keyword description: Localized friendly description for the operation.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class ServiceSpecification(_serialization.Model):
    """One property of operation, include metric specifications.

    :ivar metric_specifications: Metric specifications of operation.
    :vartype metric_specifications: list[~azure.mgmt.maps.models.MetricSpecification]
    """

    _attribute_map = {
        "metric_specifications": {"key": "metricSpecifications", "type": "[MetricSpecification]"},
    }

    def __init__(
        self, *, metric_specifications: Optional[List["_models.MetricSpecification"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword metric_specifications: Metric specifications of operation.
        :paramtype metric_specifications: list[~azure.mgmt.maps.models.MetricSpecification]
        """
        super().__init__(**kwargs)
        self.metric_specifications = metric_specifications


class Sku(_serialization.Model):
    """The SKU of the Maps Account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the SKU, in standard format (such as S0). Required. Known values are:
     "S0", "S1", and "G2".
    :vartype name: str or ~azure.mgmt.maps.models.Name
    :ivar tier: Gets the sku tier. This is based on the SKU name.
    :vartype tier: str
    """

    _validation = {
        "name": {"required": True},
        "tier": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(self, *, name: Union[str, "_models.Name"], **kwargs: Any) -> None:
        """
        :keyword name: The name of the SKU, in standard format (such as S0). Required. Known values
         are: "S0", "S1", and "G2".
        :paramtype name: str or ~azure.mgmt.maps.models.Name
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = None
