# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, Optional, TYPE_CHECKING

from msrest import Deserializer, Serializer

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest

from ._configuration import CreatorClientConfiguration
from .operations import AliasOperations, ConversionOperations, DataOperations, DatasetOperations, FeatureStateOperations, SpatialOperations, TilesetOperations, WFSOperations

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Dict

    from azure.core.credentials_async import AsyncTokenCredential

class CreatorClient:    # pylint: disable=too-many-instance-attributes
    """APIs for managing aliases in Azure Maps.

    :ivar alias: AliasOperations operations
    :vartype alias: azure.maps.creator.aio.operations.AliasOperations
    :ivar data: DataOperations operations
    :vartype data: azure.maps.creator.aio.operations.DataOperations
    :ivar dataset: DatasetOperations operations
    :vartype dataset: azure.maps.creator.aio.operations.DatasetOperations
    :ivar conversion: ConversionOperations operations
    :vartype conversion: azure.maps.creator.aio.operations.ConversionOperations
    :ivar feature_state: FeatureStateOperations operations
    :vartype feature_state: azure.maps.creator.aio.operations.FeatureStateOperations
    :ivar spatial: SpatialOperations operations
    :vartype spatial: azure.maps.creator.aio.operations.SpatialOperations
    :ivar tileset: TilesetOperations operations
    :vartype tileset: azure.maps.creator.aio.operations.TilesetOperations
    :ivar wfs: WFSOperations operations
    :vartype wfs: azure.maps.creator.aio.operations.WFSOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param client_id: Specifies which account is intended for usage in conjunction with the Azure
     AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved
     from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see
     the following `articles <https://aka.ms/amauthdetails>`_ for guidance. Default value is None.
    :type client_id: str
    :param geography: This parameter specifies where the Azure Maps Creator resource is located.
     Valid values are us and eu. Known values are: "us" or "eu". Default value is "us".
    :type geography: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        client_id: Optional[str] = None,
        geography: str = "us",
        **kwargs: Any
    ) -> None:
        _endpoint = 'https://{geography}.atlas.microsoft.com'
        self._config = CreatorClientConfiguration(credential=credential, client_id=client_id, geography=geography, **kwargs)
        self._client = AsyncPipelineClient(base_url=_endpoint, config=self._config, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.alias = AliasOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.data = DataOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.dataset = DatasetOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.conversion = ConversionOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.feature_state = FeatureStateOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.spatial = SpatialOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.tileset = TilesetOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.wfs = WFSOperations(
            self._client, self._config, self._serialize, self._deserialize
        )


    def send_request(
        self,
        request: HttpRequest,
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/protocol/quickstart

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "geography": self._serialize.url("self._config.geography", self._config.geography, 'str'),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "CreatorClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
