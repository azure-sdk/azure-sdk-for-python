# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devcenter.aio import DevCenterMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevCenterMgmtProjectEnvironmentTypesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevCenterMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.project_environment_types.list(
            resource_group_name=resource_group.name,
            project_name="str",
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.project_environment_types.get(
            resource_group_name=resource_group.name,
            project_name="str",
            environment_type_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.project_environment_types.create_or_update(
            resource_group_name=resource_group.name,
            project_name="str",
            environment_type_name="str",
            body={
                "creatorRoleAssignment": {"roles": {"str": {"description": "str", "roleName": "str"}}},
                "deploymentTargetId": "str",
                "displayName": "str",
                "environmentCount": 0,
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "location": "str",
                "name": "str",
                "provisioningState": "str",
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "userRoleAssignments": {"str": {"roles": {"str": {"description": "str", "roleName": "str"}}}},
            },
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.project_environment_types.update(
            resource_group_name=resource_group.name,
            project_name="str",
            environment_type_name="str",
            body={
                "creatorRoleAssignment": {"roles": {"str": {"description": "str", "roleName": "str"}}},
                "deploymentTargetId": "str",
                "displayName": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "status": "str",
                "tags": {"str": "str"},
                "userRoleAssignments": {"str": {"roles": {"str": {"description": "str", "roleName": "str"}}}},
            },
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.project_environment_types.delete(
            resource_group_name=resource_group.name,
            project_name="str",
            environment_type_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...
