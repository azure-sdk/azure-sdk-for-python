# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devcenter.aio import DevCenterMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevCenterMgmtDevBoxDefinitionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevCenterMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_dev_center(self, resource_group):
        response = self.client.dev_box_definitions.list_by_dev_center(
            resource_group_name=resource_group.name,
            dev_center_name="str",
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.dev_box_definitions.get(
            resource_group_name=resource_group.name,
            dev_center_name="str",
            dev_box_definition_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.dev_box_definitions.begin_create_or_update(
                resource_group_name=resource_group.name,
                dev_center_name="str",
                dev_box_definition_name="str",
                body={
                    "location": "str",
                    "activeImageReference": {"exactVersion": "str", "id": "str"},
                    "hibernateSupport": "str",
                    "id": "str",
                    "imageReference": {"exactVersion": "str", "id": "str"},
                    "imageValidationErrorDetails": {"code": "str", "message": "str"},
                    "imageValidationStatus": "str",
                    "name": "str",
                    "osStorageType": "str",
                    "provisioningState": "str",
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                    "validationStatus": "str",
                },
                api_version="2024-08-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update(self, resource_group):
        response = await (
            await self.client.dev_box_definitions.begin_update(
                resource_group_name=resource_group.name,
                dev_center_name="str",
                dev_box_definition_name="str",
                body={
                    "hibernateSupport": "str",
                    "imageReference": {"exactVersion": "str", "id": "str"},
                    "location": "str",
                    "osStorageType": "str",
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "tags": {"str": "str"},
                },
                api_version="2024-08-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.dev_box_definitions.begin_delete(
                resource_group_name=resource_group.name,
                dev_center_name="str",
                dev_box_definition_name="str",
                api_version="2024-08-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_project(self, resource_group):
        response = self.client.dev_box_definitions.list_by_project(
            resource_group_name=resource_group.name,
            project_name="str",
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_by_project(self, resource_group):
        response = await self.client.dev_box_definitions.get_by_project(
            resource_group_name=resource_group.name,
            project_name="str",
            dev_box_definition_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...
