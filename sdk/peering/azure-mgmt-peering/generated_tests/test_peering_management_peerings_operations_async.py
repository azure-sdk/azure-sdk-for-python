# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.peering.aio import PeeringManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPeeringManagementPeeringsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(PeeringManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_get(self, resource_group):
        response = await self.client.peerings.get(
            resource_group_name=resource_group.name,
            peering_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_create_or_update(self, resource_group):
        response = await self.client.peerings.create_or_update(
            resource_group_name=resource_group.name,
            peering_name="str",
            peering={
                "kind": "str",
                "location": "str",
                "sku": {"family": "str", "name": "str", "size": "str", "tier": "str"},
                "connectivityProbes": [
                    {
                        "azureRegion": "str",
                        "createdTimeUtc": "2020-02-20 00:00:00",
                        "endpoint": "str",
                        "prefixesToAccesslist": ["str"],
                        "protocol": "str",
                    }
                ],
                "direct": {
                    "connections": [
                        {
                            "bandwidthInMbps": 0,
                            "bgpSession": {
                                "maxPrefixesAdvertisedV4": 0,
                                "maxPrefixesAdvertisedV6": 0,
                                "md5AuthenticationKey": "str",
                                "microsoftSessionIPv4Address": "str",
                                "microsoftSessionIPv6Address": "str",
                                "peerSessionIPv4Address": "str",
                                "peerSessionIPv6Address": "str",
                                "sessionPrefixV4": "str",
                                "sessionPrefixV6": "str",
                                "sessionStateV4": "str",
                                "sessionStateV6": "str",
                            },
                            "connectionIdentifier": "str",
                            "connectionState": "str",
                            "errorMessage": "str",
                            "lastFailureTimeUtc": "2020-02-20 00:00:00",
                            "microsoftTrackingId": "str",
                            "migrationWorkWindowBgpSessionSameDevice": {"str": "str"},
                            "migrationWorkWindowTracker": "str",
                            "peeringDBFacilityId": 0,
                            "previousConnectionProvisioningState": "str",
                            "provisionedBandwidthInMbps": 0,
                            "sessionAddressProvider": "str",
                            "useForPeeringService": bool,
                        }
                    ],
                    "directPeeringType": "str",
                    "peerAsn": {"id": "str"},
                    "useForPeeringService": bool,
                },
                "exchange": {
                    "connections": [
                        {
                            "bgpSession": {
                                "maxPrefixesAdvertisedV4": 0,
                                "maxPrefixesAdvertisedV6": 0,
                                "md5AuthenticationKey": "str",
                                "microsoftSessionIPv4Address": "str",
                                "microsoftSessionIPv6Address": "str",
                                "peerSessionIPv4Address": "str",
                                "peerSessionIPv6Address": "str",
                                "sessionPrefixV4": "str",
                                "sessionPrefixV6": "str",
                                "sessionStateV4": "str",
                                "sessionStateV6": "str",
                            },
                            "connectionIdentifier": "str",
                            "connectionState": "str",
                            "errorMessage": "str",
                            "lastFailureTimeUtc": "2020-02-20 00:00:00",
                            "migrationWorkWindowBgpSessionSameDevice": {"str": "str"},
                            "migrationWorkWindowTracker": "str",
                            "peeringDBFacilityId": 0,
                            "previousConnectionProvisioningState": "str",
                        }
                    ],
                    "peerAsn": {"id": "str"},
                },
                "id": "str",
                "name": "str",
                "peeringLocation": "str",
                "provisioningState": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_delete(self, resource_group):
        response = await self.client.peerings.delete(
            resource_group_name=resource_group.name,
            peering_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_update(self, resource_group):
        response = await self.client.peerings.update(
            resource_group_name=resource_group.name,
            peering_name="str",
            tags={"tags": {"str": "str"}},
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_list_by_resource_group(self, resource_group):
        response = self.client.peerings.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peerings_list_by_subscription(self, resource_group):
        response = self.client.peerings.list_by_subscription(
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
