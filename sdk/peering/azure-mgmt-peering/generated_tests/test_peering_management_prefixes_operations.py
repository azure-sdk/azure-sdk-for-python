# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.peering import PeeringManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPeeringManagementPrefixesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(PeeringManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_prefixes_get(self, resource_group):
        response = self.client.prefixes.get(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            prefix_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_prefixes_create_or_update(self, resource_group):
        response = self.client.prefixes.create_or_update(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            prefix_name="str",
            peering_service_prefix={
                "errorMessage": "str",
                "events": [
                    {
                        "eventDescription": "str",
                        "eventLevel": "str",
                        "eventSummary": "str",
                        "eventTimestamp": "2020-02-20 00:00:00",
                        "eventType": "str",
                    }
                ],
                "id": "str",
                "learnedType": "str",
                "name": "str",
                "peeringServicePrefixKey": "str",
                "prefix": "str",
                "prefixValidationState": "str",
                "provisioningState": "str",
                "type": "str",
            },
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_prefixes_delete(self, resource_group):
        response = self.client.prefixes.delete(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            prefix_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_prefixes_list_by_peering_service(self, resource_group):
        response = self.client.prefixes.list_by_peering_service(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            api_version="2025-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
