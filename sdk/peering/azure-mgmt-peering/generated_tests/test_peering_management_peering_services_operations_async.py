# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.peering.aio import PeeringManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPeeringManagementPeeringServicesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(PeeringManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_get(self, resource_group):
        response = await self.client.peering_services.get(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_create_or_update(self, resource_group):
        response = await self.client.peering_services.create_or_update(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            peering_service={
                "location": "str",
                "id": "str",
                "logAnalyticsWorkspaceProperties": {"connectedAgents": ["str"], "key": "str", "workspaceID": "str"},
                "name": "str",
                "peeringServiceLocation": "str",
                "peeringServiceProvider": "str",
                "providerBackupPeeringLocation": "str",
                "providerPrimaryPeeringLocation": "str",
                "provisioningState": "str",
                "sku": {"name": "str"},
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_delete(self, resource_group):
        response = await self.client.peering_services.delete(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_update(self, resource_group):
        response = await self.client.peering_services.update(
            resource_group_name=resource_group.name,
            peering_service_name="str",
            tags={"tags": {"str": "str"}},
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_list_by_resource_group(self, resource_group):
        response = self.client.peering_services.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_list_by_subscription(self, resource_group):
        response = self.client.peering_services.list_by_subscription(
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_peering_services_initialize_connection_monitor(self, resource_group):
        response = await self.client.peering_services.initialize_connection_monitor(
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...
