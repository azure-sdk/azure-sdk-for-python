# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import _model_base, models as _models
from ..._model_base import _deserialize
from ..._operations._operations import build_transcription_transcribe_request
from ..._vendor import FileType, prepare_multipart_form_data
from .._vendor import TranscriptionClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
_Unset: Any = object()
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class TranscriptionClientOperationsMixin(TranscriptionClientMixinABC):

    @overload
    async def transcribe(
        self, *, audio: FileType, definition: Optional[_models.TranscriptionOptions] = None, **kwargs: Any
    ) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :keyword audio: The content of the audio file to be transcribed. The audio file must be shorter
         than 2 hours in audio duration and smaller than 250 MB in size. Required.
        :paramtype audio: ~azure.ai.transcription._vendor.FileType
        :keyword definition: Metadata for a transcription request. This field contains a
         JSON-serialized object of type ``TranscribeDefinition``. Default value is None.
        :paramtype definition: ~azure.ai.transcription.models.TranscriptionOptions
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def transcribe(self, body: JSON, **kwargs: Any) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :param body: Required.
        :type body: JSON
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def transcribe(
        self,
        body: JSON = _Unset,
        *,
        audio: FileType = _Unset,
        definition: Optional[_models.TranscriptionOptions] = None,
        **kwargs: Any
    ) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :param body: Is one of the following types: JSON Required.
        :type body: JSON
        :keyword audio: The content of the audio file to be transcribed. The audio file must be shorter
         than 2 hours in audio duration and smaller than 250 MB in size. Required.
        :paramtype audio: ~azure.ai.transcription._vendor.FileType
        :keyword definition: Metadata for a transcription request. This field contains a
         JSON-serialized object of type ``TranscribeDefinition``. Default value is None.
        :paramtype definition: ~azure.ai.transcription.models.TranscriptionOptions
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TranscriptionResult] = kwargs.pop("cls", None)

        if body is _Unset:
            if audio is _Unset:
                raise TypeError("missing required argument: audio")
            body = {"audio": audio, "definition": definition}
            body = {k: v for k, v in body.items() if v is not None}
        _body = body.as_dict() if isinstance(body, _model_base.Model) else body
        _file_fields: List[str] = ["audio"]
        _data_fields: List[str] = ["definition"]
        _files, _data = prepare_multipart_form_data(_body, _file_fields, _data_fields)

        _request = build_transcription_transcribe_request(
            api_version=self._config.api_version,
            files=_files,
            data=_data,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TranscriptionResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
