# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class ChannelCombinedPhrases(_model_base.Model):
    """The full transcript per channel.

    :ivar channel: The 0-based channel index. Only present if channel separation is enabled.
    :vartype channel: int
    :ivar text: The complete transcribed text for the channel. Required.
    :vartype text: str
    """

    channel: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The 0-based channel index. Only present if channel separation is enabled."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The complete transcribed text for the channel. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        channel: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscribedPhrase(_model_base.Model):
    """A transcribed phrase.

    :ivar channel: The 0-based channel index. Only present if channel separation is enabled.
    :vartype channel: int
    :ivar speaker: A unique integer number that is assigned to each speaker detected in the audio
     without particular order. Only present if speaker diarization is enabled.
    :vartype speaker: int
    :ivar offset_milliseconds: The start offset of the phrase in milliseconds. Required.
    :vartype offset_milliseconds: int
    :ivar duration_milliseconds: The duration of the phrase in milliseconds. Required.
    :vartype duration_milliseconds: int
    :ivar text: The transcribed text of the phrase. Required.
    :vartype text: str
    :ivar words: The words that make up the phrase. Only present if word-level timestamps are
     enabled.
    :vartype words: list[~azure.ai.transcription.models.TranscribedWord]
    :ivar locale: The locale of the phrase.
    :vartype locale: str
    :ivar confidence: The confidence value for the phrase. Required.
    :vartype confidence: float
    """

    channel: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The 0-based channel index. Only present if channel separation is enabled."""
    speaker: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A unique integer number that is assigned to each speaker detected in the audio without
     particular order. Only present if speaker diarization is enabled."""
    offset_milliseconds: int = rest_field(
        name="offsetMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The start offset of the phrase in milliseconds. Required."""
    duration_milliseconds: int = rest_field(
        name="durationMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The duration of the phrase in milliseconds. Required."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The transcribed text of the phrase. Required."""
    words: Optional[List["_models.TranscribedWord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The words that make up the phrase. Only present if word-level timestamps are enabled."""
    locale: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The locale of the phrase."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The confidence value for the phrase. Required."""

    @overload
    def __init__(
        self,
        *,
        offset_milliseconds: int,
        duration_milliseconds: int,
        text: str,
        confidence: float,
        channel: Optional[int] = None,
        speaker: Optional[int] = None,
        words: Optional[List["_models.TranscribedWord"]] = None,
        locale: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscribedWord(_model_base.Model):
    """Time-stamped word in the display form.

    :ivar text: The recognized word, including punctuation. Required.
    :vartype text: str
    :ivar offset_milliseconds: The start offset of the word in milliseconds. Required.
    :vartype offset_milliseconds: int
    :ivar duration_milliseconds: The duration of the word in milliseconds. Required.
    :vartype duration_milliseconds: int
    """

    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The recognized word, including punctuation. Required."""
    offset_milliseconds: int = rest_field(
        name="offsetMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The start offset of the word in milliseconds. Required."""
    duration_milliseconds: int = rest_field(
        name="durationMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The duration of the word in milliseconds. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        offset_milliseconds: int,
        duration_milliseconds: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionDiarizationOptions(_model_base.Model):
    """The Speaker Identification settings. Diarization settings must be specified to enable speaker
    identification.

    :ivar enabled: Gets or sets a value indicating whether speaker diarization is enabled.
    :vartype enabled: bool
    :ivar max_speakers: Gets or sets a hint for the maximum number of speakers for diarization.
     Must be greater than 1 and less than 36.
    :vartype max_speakers: int
    """

    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets a value indicating whether speaker diarization is enabled."""
    max_speakers: Optional[int] = rest_field(
        name="maxSpeakers", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets a hint for the maximum number of speakers for diarization. Must be greater than 1
     and less than 36."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        max_speakers: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionOptions(_model_base.Model):
    """Metadata for a transcription request.

    :ivar locales: A list of possible locales for the transcription. If not specified, the locale
     of the speech in the audio is detected automatically from all supported locales.
    :vartype locales: list[str]
    :ivar models: Maps some or all candidate locales to a model URI to be used for transcription.
     If no mapping is given, the default model for the locale is used.
    :vartype models: dict[str, str]
    :ivar profanity_filter_mode: Mode of profanity filtering. Known values are: "None", "Removed",
     "Tags", and "Masked".
    :vartype profanity_filter_mode: str or ~azure.ai.transcription.models.ProfanityFilterMode
    :ivar diarization_properties: Mode of diarization.
    :vartype diarization_properties: ~azure.ai.transcription.models.TranscriptionDiarizationOptions
    :ivar active_channels: The 0-based indices of the channels to be transcribed separately. If not
     specified, multiple channels are merged and transcribed jointly. Only up to two channels are
     supported.
    :vartype active_channels: list[int]
    """

    locales: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of possible locales for the transcription. If not specified, the locale of the speech in
     the audio is detected automatically from all supported locales."""
    models: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Maps some or all candidate locales to a model URI to be used for transcription. If no mapping
     is given, the default model for the locale is used."""
    profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = rest_field(
        name="profanityFilterMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of profanity filtering. Known values are: \"None\", \"Removed\", \"Tags\", and \"Masked\"."""
    diarization_properties: Optional["_models.TranscriptionDiarizationOptions"] = rest_field(
        name="diarizationProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of diarization."""
    active_channels: Optional[List[int]] = rest_field(
        name="activeChannels", visibility=["read", "create", "update", "delete", "query"]
    )
    """The 0-based indices of the channels to be transcribed separately. If not specified, multiple
     channels are merged and transcribed jointly. Only up to two channels are supported."""

    @overload
    def __init__(
        self,
        *,
        locales: Optional[List[str]] = None,
        models: Optional[Dict[str, str]] = None,
        profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = None,
        diarization_properties: Optional["_models.TranscriptionDiarizationOptions"] = None,
        active_channels: Optional[List[int]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionResult(_model_base.Model):
    """The result of the transcribe operation.

    :ivar duration_milliseconds: The duration of the audio in milliseconds. Required.
    :vartype duration_milliseconds: int
    :ivar combined_phrases: The full transcript for each channel. Required.
    :vartype combined_phrases: list[~azure.ai.transcription.models.ChannelCombinedPhrases]
    :ivar phrases: The transcription results segmented into phrases. Required.
    :vartype phrases: list[~azure.ai.transcription.models.TranscribedPhrase]
    """

    duration_milliseconds: int = rest_field(
        name="durationMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The duration of the audio in milliseconds. Required."""
    combined_phrases: List["_models.ChannelCombinedPhrases"] = rest_field(
        name="combinedPhrases", visibility=["read", "create", "update", "delete", "query"]
    )
    """The full transcript for each channel. Required."""
    phrases: List["_models.TranscribedPhrase"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The transcription results segmented into phrases. Required."""

    @overload
    def __init__(
        self,
        *,
        duration_milliseconds: int,
        combined_phrases: List["_models.ChannelCombinedPhrases"],
        phrases: List["_models.TranscribedPhrase"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
