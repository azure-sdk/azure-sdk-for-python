# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class DiarizationProperties(_model_base.Model):
    """Speaker Identification Properties.

    :ivar enabled: A value indicating whether speaker identification is enabled. Required.
    :vartype enabled: bool
    :ivar max_speakers: A hint for the maximum number of speakers for diarization. Must be greater
     than 1 and less than 36. Required.
    :vartype max_speakers: int
    """

    enabled: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A value indicating whether speaker identification is enabled. Required."""
    max_speakers: int = rest_field(name="maxSpeakers", visibility=["read", "create", "update", "delete", "query"])
    """A hint for the maximum number of speakers for diarization. Must be greater than 1 and less than
     36. Required."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        max_speakers: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EntityError(_model_base.Model):
    """EntityError.

    :ivar code: The code of this error.
    :vartype code: str
    :ivar message: The message for this error.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The code of this error."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The message for this error."""


class EntityReference(_model_base.Model):
    """EntityReference.

    :ivar self_property: The location of the referenced entity. Required.
    :vartype self_property: str
    """

    self_property: str = rest_field(name="self", visibility=["read", "create", "update", "delete", "query"])
    """The location of the referenced entity. Required."""

    @overload
    def __init__(
        self,
        *,
        self_property: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileLinks(_model_base.Model):
    """FileLinks.

    :ivar content_url: The url to retrieve the content of this file. Required.
    :vartype content_url: str
    """

    content_url: str = rest_field(name="contentUrl", visibility=["read", "create", "update", "delete", "query"])
    """The url to retrieve the content of this file. Required."""

    @overload
    def __init__(
        self,
        *,
        content_url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileProperties(_model_base.Model):
    """FileProperties.

    :ivar duration_milliseconds: The total duration in milliseconds of the file in case this file
     is an audio file. Required.
    :vartype duration_milliseconds: int
    :ivar size: The size of the data in bytes. Required.
    :vartype size: int
    """

    duration_milliseconds: int = rest_field(
        name="durationMilliseconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total duration in milliseconds of the file in case this file is an audio file. Required."""
    size: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The size of the data in bytes. Required."""

    @overload
    def __init__(
        self,
        *,
        duration_milliseconds: int,
        size: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LanguageIdentificationProperties(_model_base.Model):
    """LanguageIdentificationProperties.

    :ivar mode: The mode used for language identification. Known values are: "Continuous" and
     "Single".
    :vartype mode: str or ~azure.ai.batchtranscription.models.LanguageIdentificationMode
    :ivar candidate_locales: The candidate locales for language identification (example ["en-US",
     "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main
     locale for the transcription, is supported for continuous mode. For single language
     identification, the maximum number of candidate locales is unbounded. Required.
    :vartype candidate_locales: list[str]
    :ivar speech_model_mapping: An optional mapping of locales to speech model entities. If no
     model is given for a locale, the default base model is used.
     Keys must be locales contained in the candidate locales, values are entities for models of the
     respective locales.
    :vartype speech_model_mapping: dict[str, ~azure.ai.batchtranscription.models.EntityReference]
    """

    mode: Optional[Union[str, "_models.LanguageIdentificationMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The mode used for language identification. Known values are: \"Continuous\" and \"Single\"."""
    candidate_locales: List[str] = rest_field(
        name="candidateLocales", visibility=["read", "create", "update", "delete", "query"]
    )
    """The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]).
     A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the
     transcription, is supported for continuous mode. For single language identification, the
     maximum number of candidate locales is unbounded. Required."""
    speech_model_mapping: Optional[Dict[str, "_models.EntityReference"]] = rest_field(
        name="speechModelMapping", visibility=["read", "create", "update", "delete", "query"]
    )
    """An optional mapping of locales to speech model entities. If no model is given for a locale, the
     default base model is used.
     Keys must be locales contained in the candidate locales, values are entities for models of the
     respective locales."""

    @overload
    def __init__(
        self,
        *,
        candidate_locales: List[str],
        mode: Optional[Union[str, "_models.LanguageIdentificationMode"]] = None,
        speech_model_mapping: Optional[Dict[str, "_models.EntityReference"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionFile(_model_base.Model):
    """TranscriptionFile.

    :ivar created: The creation time of this file. The time stamp is encoded as ISO 8601 date and
     time format (see `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_). Required.
    :vartype created: ~datetime.datetime
    :ivar kind: FileKind. Required. Known values are: "AcousticDataArchive",
     "AcousticDataTranscriptionV2", "Audio", "DatasetReport", "EvaluationDetails", "LanguageData",
     "ModelReport", "OutputFormattingData", "PronunciationData", "Transcription", and
     "TranscriptionReport".
    :vartype kind: str or ~azure.ai.batchtranscription.models.FileKind
    :ivar links: FileLinks. Required.
    :vartype links: ~azure.ai.batchtranscription.models.FileLinks
    :ivar display_name: The name of this file. Required.
    :vartype display_name: str
    :ivar properties: FileProperties. Required.
    :vartype properties: ~azure.ai.batchtranscription.models.FileProperties
    :ivar self_property: The location of this entity. Required.
    :vartype self_property: str
    """

    created: datetime.datetime = rest_field(
        name="createdDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see
     `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_). Required."""
    kind: Union[str, "_models.FileKind"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """FileKind. Required. Known values are: \"AcousticDataArchive\", \"AcousticDataTranscriptionV2\",
     \"Audio\", \"DatasetReport\", \"EvaluationDetails\", \"LanguageData\", \"ModelReport\",
     \"OutputFormattingData\", \"PronunciationData\", \"Transcription\", and
     \"TranscriptionReport\"."""
    links: "_models.FileLinks" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """FileLinks. Required."""
    display_name: str = rest_field(name="displayName", visibility=["read", "create", "update", "delete", "query"])
    """The name of this file. Required."""
    properties: "_models.FileProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """FileProperties. Required."""
    self_property: str = rest_field(name="self", visibility=["read"])
    """The location of this entity. Required."""

    @overload
    def __init__(
        self,
        *,
        created: datetime.datetime,
        kind: Union[str, "_models.FileKind"],
        links: "_models.FileLinks",
        display_name: str,
        properties: "_models.FileProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionJob(_model_base.Model):
    """Transcription.

    :ivar links: TranscriptionLinks.
    :vartype links: ~azure.ai.batchtranscription.models.TranscriptionLinks
    :ivar properties: TranscriptionProperties. Required.
    :vartype properties: ~azure.ai.batchtranscription.models.TranscriptionProperties
    :ivar id: The id of this entity. Required.
    :vartype id: str
    :ivar self_property: The location of this entity. Required.
    :vartype self_property: str
    :ivar model: EntityReference.
    :vartype model: ~azure.ai.batchtranscription.models.EntityReference
    :ivar dataset: EntityReference.
    :vartype dataset: ~azure.ai.batchtranscription.models.EntityReference
    :ivar content_urls: A list of content urls to get audio files to transcribe. Up to 1000 urls
     are allowed.
     This property will not be returned in a response.
    :vartype content_urls: list[str]
    :ivar source_container_url: A URL for an Azure blob container that contains the audio files. A
     container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
     The maximum size for a blob is 2.5GB.
     Container SAS should contain 'r' (read) and 'l' (list) permissions.
     This property will not be returned in a response.
    :vartype source_container_url: str
    :ivar locale: The locale of the contained data. If Language Identification is used, this locale
     is used to transcribe speech for which no language could be detected. Required.
    :vartype locale: str
    :ivar display_name: The display name of the object. Required.
    :vartype display_name: str
    :ivar description: The description of the object.
    :vartype description: str
    :ivar custom_properties: The custom properties of this entity. The maximum allowed key length
     is 64 characters, the maximum
     allowed value length is 256 characters and the count of allowed entries is 10.
    :vartype custom_properties: dict[str, str]
    :ivar last_action_date_time: The time-stamp when the current status was entered.
     The time stamp is encoded as ISO 8601 date and time format
     ("YYYY-MM-DDThh:mm:ssZ", see
     `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_).
    :vartype last_action_date_time: ~datetime.datetime
    :ivar status: The status of the object. Required. Known values are: "NotStarted", "Running",
     "Succeeded", and "Failed".
    :vartype status: str or ~azure.ai.batchtranscription.models.TranscriptionStatus
    :ivar created: The time-stamp when the object was created.
     The time stamp is encoded as ISO 8601 date and time format
     ("YYYY-MM-DDThh:mm:ssZ", see
     `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_).
    :vartype created: ~datetime.datetime
    """

    links: Optional["_models.TranscriptionLinks"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """TranscriptionLinks."""
    properties: "_models.TranscriptionProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """TranscriptionProperties. Required."""
    id: str = rest_field(visibility=["read"])
    """The id of this entity. Required."""
    self_property: str = rest_field(name="self", visibility=["read"])
    """The location of this entity. Required."""
    model: Optional["_models.EntityReference"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """EntityReference."""
    dataset: Optional["_models.EntityReference"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """EntityReference."""
    content_urls: Optional[List[str]] = rest_field(
        name="contentUrls", visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
     This property will not be returned in a response."""
    source_container_url: Optional[str] = rest_field(
        name="contentContainerUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """A URL for an Azure blob container that contains the audio files. A container is allowed to have
     a maximum size of 5GB and a maximum number of 10000 blobs.
     The maximum size for a blob is 2.5GB.
     Container SAS should contain 'r' (read) and 'l' (list) permissions.
     This property will not be returned in a response."""
    locale: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The locale of the contained data. If Language Identification is used, this locale is used to
     transcribe speech for which no language could be detected. Required."""
    display_name: str = rest_field(name="displayName", visibility=["read", "create", "update", "delete", "query"])
    """The display name of the object. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the object."""
    custom_properties: Optional[Dict[str, str]] = rest_field(
        name="customProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom properties of this entity. The maximum allowed key length is 64 characters, the
     maximum
     allowed value length is 256 characters and the count of allowed entries is 10."""
    last_action_date_time: Optional[datetime.datetime] = rest_field(
        name="lastActionDateTime", visibility=["read"], format="rfc3339"
    )
    """The time-stamp when the current status was entered.
     The time stamp is encoded as ISO 8601 date and time format
     (\"YYYY-MM-DDThh:mm:ssZ\", see
     `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_)."""
    status: Union[str, "_models.TranscriptionStatus"] = rest_field(visibility=["read"])
    """The status of the object. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", and \"Failed\"."""
    created: Optional[datetime.datetime] = rest_field(name="createdDateTime", visibility=["read"], format="rfc3339")
    """The time-stamp when the object was created.
     The time stamp is encoded as ISO 8601 date and time format
     (\"YYYY-MM-DDThh:mm:ssZ\", see
     `https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations
     <https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations>`_)."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.TranscriptionProperties",
        locale: str,
        display_name: str,
        links: Optional["_models.TranscriptionLinks"] = None,
        model: Optional["_models.EntityReference"] = None,
        dataset: Optional["_models.EntityReference"] = None,
        content_urls: Optional[List[str]] = None,
        source_container_url: Optional[str] = None,
        description: Optional[str] = None,
        custom_properties: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionLinks(_model_base.Model):
    """TranscriptionLinks.

    :ivar files: The location to get all files of this entity. See operation
     "Transcriptions_ListFiles" for more details.
    :vartype files: str
    """

    files: Optional[str] = rest_field(visibility=["read"])
    """The location to get all files of this entity. See operation \"Transcriptions_ListFiles\" for
     more details."""


class TranscriptionProperties(_model_base.Model):
    """TranscriptionProperties.

    :ivar word_level_timestamps_enabled: A value indicating whether word level timestamps are
     requested. The default value is false.
    :vartype word_level_timestamps_enabled: bool
    :ivar display_form_word_level_timestamps_enabled: A value indicating whether word level
     timestamps for the display form are requested. The default value is false.
    :vartype display_form_word_level_timestamps_enabled: bool
    :ivar duration_milliseconds: The duration in milliseconds of the transcription.
     Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript
     integers.
    :vartype duration_milliseconds: int
    :ivar channels: A collection of the requested channel numbers. In the default case, the
     channels 0 and 1 are considered.
    :vartype channels: list[int]
    :ivar destination_container_url: The requested destination container.

     Remarks

     When a destination container is used in combination with a timeToLive, the metadata of a
     transcription will be deleted normally, but the data stored in the destination container,
     including transcription results, will remain untouched, because no delete permissions are
     required for this container.

     To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring
     your own Storage (BYOS)" instead of destinationContainerUrl, where blobs can be cleaned up.
    :vartype destination_container_url: str
    :ivar punctuation_mode: The mode used for punctuation. Known values are: "None", "Dictated",
     "Automatic", and "DictatedAndAutomatic".
    :vartype punctuation_mode: str or ~azure.ai.batchtranscription.models.PunctuationMode
    :ivar profanity_filter_mode: Mode of profanity filtering. Known values are: "None", "Removed",
     "Tags", and "Masked".
    :vartype profanity_filter_mode: str or ~azure.ai.batchtranscription.models.ProfanityFilterMode
    :ivar time_to_live_hours: How long the transcription will be kept in the system after it has
     completed. Once the transcription reaches the time to live after completion(successful or
     failed) it will be automatically deleted.

     Note: When using BYOS (bring your own storage), the result files on the customer owned storage
     account will also be deleted.Use either destinationContainerUrl to specify a separate container
     for result files which will not be deleted when the timeToLive expires, or retrieve the result
     files through the API and store them as needed.

     The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days
     (48 hours) is the recommended default value when data is consumed directly. Required.
    :vartype time_to_live_hours: int
    :ivar error: EntityError.
    :vartype error: ~azure.ai.batchtranscription.models.EntityError
    :ivar diarization: Speaker Identification.
    :vartype diarization: ~azure.ai.batchtranscription.models.DiarizationProperties
    :ivar language_identification_properties: LanguageIdentificationProperties.
    :vartype language_identification_properties:
     ~azure.ai.batchtranscription.models.LanguageIdentificationProperties
    """

    word_level_timestamps_enabled: Optional[bool] = rest_field(
        name="wordLevelTimestampsEnabled", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value indicating whether word level timestamps are requested. The default value is false."""
    display_form_word_level_timestamps_enabled: Optional[bool] = rest_field(
        name="displayFormWordLevelTimestampsEnabled", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value indicating whether word level timestamps for the display form are requested. The
     default value is false."""
    duration_milliseconds: Optional[int] = rest_field(name="durationMilliseconds", visibility=["read"])
    """The duration in milliseconds of the transcription.
     Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript
     integers."""
    channels: Optional[List[int]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of the requested channel numbers. In the default case, the channels 0 and 1 are
     considered."""
    destination_container_url: Optional[str] = rest_field(
        name="destinationContainerUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The requested destination container.
     
     Remarks
     
     When a destination container is used in combination with a timeToLive, the metadata of a
     transcription will be deleted normally, but the data stored in the destination container,
     including transcription results, will remain untouched, because no delete permissions are
     required for this container.
     
     To support automatic cleanup, either configure blob lifetimes on the container, or use \"Bring
     your own Storage (BYOS)\" instead of destinationContainerUrl, where blobs can be cleaned up."""
    punctuation_mode: Optional[Union[str, "_models.PunctuationMode"]] = rest_field(
        name="punctuationMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """The mode used for punctuation. Known values are: \"None\", \"Dictated\", \"Automatic\", and
     \"DictatedAndAutomatic\"."""
    profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = rest_field(
        name="profanityFilterMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of profanity filtering. Known values are: \"None\", \"Removed\", \"Tags\", and \"Masked\"."""
    time_to_live_hours: int = rest_field(
        name="timeToLiveHours", visibility=["read", "create", "update", "delete", "query"]
    )
    """How long the transcription will be kept in the system after it has completed. Once the
     transcription reaches the time to live after completion(successful or failed) it will be
     automatically deleted.
     
     Note: When using BYOS (bring your own storage), the result files on the customer owned storage
     account will also be deleted.Use either destinationContainerUrl to specify a separate container
     for result files which will not be deleted when the timeToLive expires, or retrieve the result
     files through the API and store them as needed.
     
     The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days
     (48 hours) is the recommended default value when data is consumed directly. Required."""
    error: Optional["_models.EntityError"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """EntityError."""
    diarization: Optional["_models.DiarizationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Speaker Identification."""
    language_identification_properties: Optional["_models.LanguageIdentificationProperties"] = rest_field(
        name="languageIdentification", visibility=["read", "create", "update", "delete", "query"]
    )
    """LanguageIdentificationProperties."""

    @overload
    def __init__(
        self,
        *,
        time_to_live_hours: int,
        word_level_timestamps_enabled: Optional[bool] = None,
        display_form_word_level_timestamps_enabled: Optional[bool] = None,
        channels: Optional[List[int]] = None,
        destination_container_url: Optional[str] = None,
        punctuation_mode: Optional[Union[str, "_models.PunctuationMode"]] = None,
        profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = None,
        error: Optional["_models.EntityError"] = None,
        diarization: Optional["_models.DiarizationProperties"] = None,
        language_identification_properties: Optional["_models.LanguageIdentificationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
