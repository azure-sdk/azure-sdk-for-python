# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.scvmm import ScVmmMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestScVmmMgmtVirtualMachineInstancesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ScVmmMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.virtual_machine_instances.list(
            resource_uri="str",
            api_version="2024-06-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.virtual_machine_instances.get(
            resource_uri="str",
            api_version="2024-06-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.virtual_machine_instances.begin_create_or_update(
            resource_uri="str",
            resource={
                "extendedLocation": {"name": "str", "type": "str"},
                "id": "str",
                "name": "str",
                "properties": {
                    "availabilitySets": [{"id": "str", "name": "str"}],
                    "hardwareProfile": {
                        "cpuCount": 0,
                        "dynamicMemoryEnabled": "str",
                        "dynamicMemoryMaxMB": 0,
                        "dynamicMemoryMinMB": 0,
                        "isHighlyAvailable": "str",
                        "limitCpuForMigration": "str",
                        "memoryMB": 0,
                    },
                    "infrastructureProfile": {
                        "biosGuid": "str",
                        "checkpointType": "str",
                        "checkpoints": [
                            {"checkpointID": "str", "description": "str", "name": "str", "parentCheckpointID": "str"}
                        ],
                        "cloudId": "str",
                        "generation": 0,
                        "inventoryItemId": "str",
                        "lastRestoredVMCheckpoint": {
                            "checkpointID": "str",
                            "description": "str",
                            "name": "str",
                            "parentCheckpointID": "str",
                        },
                        "templateId": "str",
                        "uuid": "str",
                        "vmName": "str",
                        "vmmServerId": "str",
                    },
                    "networkProfile": {
                        "networkInterfaces": [
                            {
                                "displayName": "str",
                                "ipv4AddressType": "str",
                                "ipv4Addresses": ["str"],
                                "ipv6AddressType": "str",
                                "ipv6Addresses": ["str"],
                                "macAddress": "str",
                                "macAddressType": "str",
                                "name": "str",
                                "networkName": "str",
                                "nicId": "str",
                                "virtualNetworkId": "str",
                            }
                        ]
                    },
                    "osProfile": {
                        "adminPassword": "str",
                        "computerName": "str",
                        "domainName": "str",
                        "domainPassword": "str",
                        "domainUsername": "str",
                        "osSku": "str",
                        "osType": "str",
                        "osVersion": "str",
                        "productKey": "str",
                        "runOnceCommands": "str",
                        "timezone": 0,
                        "workgroup": "str",
                    },
                    "powerState": "str",
                    "provisioningState": "str",
                    "storageProfile": {
                        "disks": [
                            {
                                "bus": 0,
                                "busType": "str",
                                "createDiffDisk": "str",
                                "diskId": "str",
                                "diskSizeGB": 0,
                                "displayName": "str",
                                "lun": 0,
                                "maxDiskSizeGB": 0,
                                "name": "str",
                                "storageQoSPolicy": {"id": "str", "name": "str"},
                                "templateDiskId": "str",
                                "vhdFormatType": "str",
                                "vhdType": "str",
                                "volumeType": "str",
                            }
                        ]
                    },
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.virtual_machine_instances.begin_update(
            resource_uri="str",
            properties={
                "properties": {
                    "availabilitySets": [{"id": "str", "name": "str"}],
                    "hardwareProfile": {
                        "cpuCount": 0,
                        "dynamicMemoryEnabled": "str",
                        "dynamicMemoryMaxMB": 0,
                        "dynamicMemoryMinMB": 0,
                        "limitCpuForMigration": "str",
                        "memoryMB": 0,
                    },
                    "infrastructureProfile": {"checkpointType": "str"},
                    "networkProfile": {
                        "networkInterfaces": [
                            {
                                "ipv4AddressType": "str",
                                "ipv6AddressType": "str",
                                "macAddress": "str",
                                "macAddressType": "str",
                                "name": "str",
                                "nicId": "str",
                                "virtualNetworkId": "str",
                            }
                        ]
                    },
                    "storageProfile": {
                        "disks": [
                            {
                                "bus": 0,
                                "busType": "str",
                                "diskId": "str",
                                "diskSizeGB": 0,
                                "lun": 0,
                                "name": "str",
                                "storageQoSPolicy": {"id": "str", "name": "str"},
                                "vhdType": "str",
                            }
                        ]
                    },
                }
            },
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.virtual_machine_instances.begin_delete(
            resource_uri="str",
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_checkpoint(self, resource_group):
        response = self.client.virtual_machine_instances.begin_create_checkpoint(
            resource_uri="str",
            body={"description": "str", "name": "str"},
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete_checkpoint(self, resource_group):
        response = self.client.virtual_machine_instances.begin_delete_checkpoint(
            resource_uri="str",
            body={"id": "str"},
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_restart(self, resource_group):
        response = self.client.virtual_machine_instances.begin_restart(
            resource_uri="str",
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_restore_checkpoint(self, resource_group):
        response = self.client.virtual_machine_instances.begin_restore_checkpoint(
            resource_uri="str",
            body={"id": "str"},
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_start(self, resource_group):
        response = self.client.virtual_machine_instances.begin_start(
            resource_uri="str",
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_stop(self, resource_group):
        response = self.client.virtual_machine_instances.begin_stop(
            resource_uri="str",
            body={"skipShutdown": "false"},
            api_version="2024-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
