# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.scvmm.aio import ScVmmMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestScVmmMgmtVirtualMachineTemplatesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ScVmmMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_get(self, resource_group):
        response = await self.client.virtual_machine_templates.get(
            resource_group_name=resource_group.name,
            virtual_machine_template_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.virtual_machine_templates.begin_create_or_update(
                resource_group_name=resource_group.name,
                virtual_machine_template_name="str",
                resource={
                    "extendedLocation": {"name": "str", "type": "str"},
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "computerName": "str",
                        "cpuCount": 0,
                        "disks": [
                            {
                                "bus": 0,
                                "busType": "str",
                                "createDiffDisk": "str",
                                "diskId": "str",
                                "diskSizeGB": 0,
                                "displayName": "str",
                                "lun": 0,
                                "maxDiskSizeGB": 0,
                                "name": "str",
                                "storageQoSPolicy": {"id": "str", "name": "str"},
                                "templateDiskId": "str",
                                "vhdFormatType": "str",
                                "vhdType": "str",
                                "volumeType": "str",
                            }
                        ],
                        "dynamicMemoryEnabled": "str",
                        "dynamicMemoryMaxMB": 0,
                        "dynamicMemoryMinMB": 0,
                        "generation": 0,
                        "inventoryItemId": "str",
                        "isCustomizable": "str",
                        "isHighlyAvailable": "str",
                        "limitCpuForMigration": "str",
                        "memoryMB": 0,
                        "networkInterfaces": [
                            {
                                "displayName": "str",
                                "ipv4AddressType": "str",
                                "ipv4Addresses": ["str"],
                                "ipv6AddressType": "str",
                                "ipv6Addresses": ["str"],
                                "macAddress": "str",
                                "macAddressType": "str",
                                "name": "str",
                                "networkName": "str",
                                "nicId": "str",
                                "virtualNetworkId": "str",
                            }
                        ],
                        "osName": "str",
                        "osType": "str",
                        "provisioningState": "str",
                        "uuid": "str",
                        "vmmServerId": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_begin_update(self, resource_group):
        response = await (
            await self.client.virtual_machine_templates.begin_update(
                resource_group_name=resource_group.name,
                virtual_machine_template_name="str",
                properties={"tags": {"str": "str"}},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_begin_delete(self, resource_group):
        response = await (
            await self.client.virtual_machine_templates.begin_delete(
                resource_group_name=resource_group.name,
                virtual_machine_template_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_list_by_resource_group(self, resource_group):
        response = self.client.virtual_machine_templates.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_virtual_machine_templates_list_by_subscription(self, resource_group):
        response = self.client.virtual_machine_templates.list_by_subscription()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
