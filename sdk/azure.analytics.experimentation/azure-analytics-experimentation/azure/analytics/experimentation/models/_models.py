# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import MetricKind

if TYPE_CHECKING:
    from .. import models as _models


class AggregatedValue(_model_base.Model):
    """An event property value aggregated by a metric.

    :ivar event_name: The name of the event. Required.
    :vartype event_name: str
    :ivar filter: [Optional] A condition to filter events.
    :vartype filter: str
    :ivar event_property: The key of the event property to aggregate. Required.
    :vartype event_property: str
    """

    event_name: str = rest_field(name="eventName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the event. Required."""
    filter: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """[Optional] A condition to filter events."""
    event_property: str = rest_field(name="eventProperty", visibility=["read", "create", "update", "delete", "query"])
    """The key of the event property to aggregate. Required."""

    @overload
    def __init__(
        self,
        *,
        event_name: str,
        event_property: str,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricDefinition(_model_base.Model):
    """The metric definition, which determines how the metric value is calculated from event data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AverageDefinition, EventCountDefinition, EventRateDefinition, PercentileDefinition,
    SumDefinition, UserCountDefinition, UserRateDefinition

    :ivar kind: Discriminator property for MetricDefinition. Required. Known values are:
     "EventCount", "UserCount", "EventRate", "UserRate", "Sum", "Average", and "Percentile".
    :vartype kind: str or ~azure.analytics.experimentation.models.MetricKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind")
    """Discriminator property for MetricDefinition. Required. Known values are: \"EventCount\",
     \"UserCount\", \"EventRate\", \"UserRate\", \"Sum\", \"Average\", and \"Percentile\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AverageDefinition(MetricDefinition, discriminator="Average"):
    """The definition of an Average metric. This metric kind measures the average of an event
    property.

    :ivar kind: The kind of metric. Required. The average of an event property.
    :vartype kind: str or ~azure.analytics.experimentation.models.AVERAGE
    :ivar value: The value to aggregate. Required.
    :vartype value: ~azure.analytics.experimentation.models.AggregatedValue
    """

    kind: Literal[MetricKind.AVERAGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. The average of an event property."""
    value: "_models.AggregatedValue" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value to aggregate. Required."""

    @overload
    def __init__(
        self,
        *,
        value: "_models.AggregatedValue",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.AVERAGE, **kwargs)


class DiagnosticInfo(_model_base.Model):
    """The diagnostic information.

    :ivar message: The error message. Required.
    :vartype message: str
    :ivar code: The error code. Required. Known values are: "FailedSchemaValidation",
     "InvalidEventCondition", "UnsupportedEventCondition", and "InvalidMetricDefinition".
    :vartype code: str or ~azure.analytics.experimentation.models.DiagnosticCode
    """

    message: str = rest_field(visibility=["read"])
    """The error message. Required."""
    code: Union[str, "_models.DiagnosticCode"] = rest_field(visibility=["read"])
    """The error code. Required. Known values are: \"FailedSchemaValidation\",
     \"InvalidEventCondition\", \"UnsupportedEventCondition\", and \"InvalidMetricDefinition\"."""


class EventCountDefinition(MetricDefinition, discriminator="EventCount"):
    """The definition of an EventCount metric. This metric kind counts the observations of an event.
    Experiment analysis accounts for unequal traffic allocation.

    :ivar kind: The kind of metric. Required. Count the observations of an event. Experiment
     analysis accounts for unequal traffic allocation.
    :vartype kind: str or ~azure.analytics.experimentation.models.EVENT_COUNT
    :ivar event: Event to observe. Required.
    :vartype event: ~azure.analytics.experimentation.models.ObservedEvent
    """

    kind: Literal[MetricKind.EVENT_COUNT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. Count the observations of an event. Experiment analysis accounts
     for unequal traffic allocation."""
    event: "_models.ObservedEvent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Event to observe. Required."""

    @overload
    def __init__(
        self,
        *,
        event: "_models.ObservedEvent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.EVENT_COUNT, **kwargs)


class EventRateDefinition(MetricDefinition, discriminator="EventRate"):
    """The definition of an EventRate metric. This metric kind counts the percentage of events that
    satisfy a condition.

    :ivar kind: The kind of metric. Required. Count the percentage of events that satisfy a
     condition.
    :vartype kind: str or ~azure.analytics.experimentation.models.EVENT_RATE
    :ivar event: Event to observe as the rate denominator. Required.
    :vartype event: ~azure.analytics.experimentation.models.ObservedEvent
    :ivar condition: The event contributes to the rate numerator if it satisfies this condition.
     Required.
    :vartype condition: str
    """

    kind: Literal[MetricKind.EVENT_RATE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. Count the percentage of events that satisfy a condition."""
    event: "_models.ObservedEvent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Event to observe as the rate denominator. Required."""
    condition: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The event contributes to the rate numerator if it satisfies this condition. Required."""

    @overload
    def __init__(
        self,
        *,
        event: "_models.ObservedEvent",
        condition: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.EVENT_RATE, **kwargs)


class Metric(_model_base.Model):
    """A Metric object that describes the metric.

    :ivar id: An ID used to uniquely identify and reference the metric. Required.
    :vartype id: str
    :ivar lifecycle: The stage in the metric lifecycle, which determines when the metric is
     calculated. Required. Known values are: "Active" and "Inactive".
    :vartype lifecycle: str or ~azure.analytics.experimentation.models.LifecycleStage
    :ivar display_name: A display name for the metric to use for display rather than the ID.
     Required.
    :vartype display_name: str
    :ivar description: A description of the metric. Required.
    :vartype description: str
    :ivar tags: The tags of the metric. Required.
    :vartype tags: list[str]
    :ivar desired_direction: Whether an increase or decrease to the metric value is desired.
     Required. Known values are: "Increase", "Decrease", and "Neutral".
    :vartype desired_direction: str or ~azure.analytics.experimentation.models.DesiredDirection
    :ivar definition: The metric definition, which determines how the metric value is calculated
     from event data. Required.
    :vartype definition: ~azure.analytics.experimentation.models.MetricDefinition
    :ivar e_tag: ETag of the metric. Required.
    :vartype e_tag: str
    :ivar last_modified_at: The timestamp of resource last modification (UTC). Required.
    :vartype last_modified_at: ~datetime.datetime
    """

    id: str = rest_field(visibility=["read"])
    """An ID used to uniquely identify and reference the metric. Required."""
    lifecycle: Union[str, "_models.LifecycleStage"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The stage in the metric lifecycle, which determines when the metric is calculated. Required.
     Known values are: \"Active\" and \"Inactive\"."""
    display_name: str = rest_field(name="displayName", visibility=["read", "create", "update", "delete", "query"])
    """A display name for the metric to use for display rather than the ID. Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the metric. Required."""
    tags: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the metric. Required."""
    desired_direction: Union[str, "_models.DesiredDirection"] = rest_field(
        name="desiredDirection", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether an increase or decrease to the metric value is desired. Required. Known values are:
     \"Increase\", \"Decrease\", and \"Neutral\"."""
    definition: "_models.MetricDefinition" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metric definition, which determines how the metric value is calculated from event data.
     Required."""
    e_tag: str = rest_field(name="eTag", visibility=["read"])
    """ETag of the metric. Required."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", visibility=["read"], format="rfc3339")
    """The timestamp of resource last modification (UTC). Required."""

    @overload
    def __init__(
        self,
        *,
        lifecycle: Union[str, "_models.LifecycleStage"],
        display_name: str,
        description: str,
        tags: List[str],
        desired_direction: Union[str, "_models.DesiredDirection"],
        definition: "_models.MetricDefinition",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricValidateResult(_model_base.Model):
    """The result of validating a Metric.

    :ivar diagnostics: The validation result. Required.
    :vartype diagnostics: list[~azure.analytics.experimentation.models.DiagnosticInfo]
    :ivar result: Whether the metric is valid. Required. Known values are: "Valid" and "Invalid".
    :vartype result: str or ~azure.analytics.experimentation.models.ValidationResultOption
    """

    diagnostics: List["_models.DiagnosticInfo"] = rest_field(visibility=["read"])
    """The validation result. Required."""
    result: Union[str, "_models.ValidationResultOption"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether the metric is valid. Required. Known values are: \"Valid\" and \"Invalid\"."""

    @overload
    def __init__(
        self,
        *,
        result: Union[str, "_models.ValidationResultOption"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ObservedEvent(_model_base.Model):
    """An event observed by a metric.

    :ivar event_name: The name of the event. Required.
    :vartype event_name: str
    :ivar filter: [Optional] A condition to filter events.
    :vartype filter: str
    """

    event_name: str = rest_field(name="eventName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the event. Required."""
    filter: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """[Optional] A condition to filter events."""

    @overload
    def __init__(
        self,
        *,
        event_name: str,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PercentileDefinition(MetricDefinition, discriminator="Percentile"):
    """The definition of a Percentile metric. This metric kind measures the percentile of an event
    property.

    :ivar kind: The kind of metric. Required. The percentile of an event property.
    :vartype kind: str or ~azure.analytics.experimentation.models.PERCENTILE
    :ivar value: The value to aggregate. Required.
    :vartype value: ~azure.analytics.experimentation.models.AggregatedValue
    :ivar percentile: The percentile to measure. Required.
    :vartype percentile: int
    """

    kind: Literal[MetricKind.PERCENTILE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. The percentile of an event property."""
    value: "_models.AggregatedValue" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value to aggregate. Required."""
    percentile: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The percentile to measure. Required."""

    @overload
    def __init__(
        self,
        *,
        value: "_models.AggregatedValue",
        percentile: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.PERCENTILE, **kwargs)


class SumDefinition(MetricDefinition, discriminator="Sum"):
    """The definition of a Sum metric. This metric kind measures the sum of an event property.
    Experiment analysis accounts for unequal traffic allocation.

    :ivar kind: The kind of metric. Required. The sum of an event property. Experiment analysis
     accounts for unequal traffic allocation.
    :vartype kind: str or ~azure.analytics.experimentation.models.SUM
    :ivar value: The value to aggregate. Required.
    :vartype value: ~azure.analytics.experimentation.models.AggregatedValue
    """

    kind: Literal[MetricKind.SUM] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. The sum of an event property. Experiment analysis accounts for
     unequal traffic allocation."""
    value: "_models.AggregatedValue" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value to aggregate. Required."""

    @overload
    def __init__(
        self,
        *,
        value: "_models.AggregatedValue",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.SUM, **kwargs)


class UserCountDefinition(MetricDefinition, discriminator="UserCount"):
    """The definition of a UserCount metric. This metric kind counts the users who encounter an event.
    Experiment analysis accounts for unequal traffic allocation.

    :ivar kind: The kind of metric. Required. Count the users who encounter an event. Experiment
     analysis accounts for unequal traffic allocation.
    :vartype kind: str or ~azure.analytics.experimentation.models.USER_COUNT
    :ivar event: Event to observe. Required.
    :vartype event: ~azure.analytics.experimentation.models.ObservedEvent
    """

    kind: Literal[MetricKind.USER_COUNT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. Count the users who encounter an event. Experiment analysis
     accounts for unequal traffic allocation."""
    event: "_models.ObservedEvent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Event to observe. Required."""

    @overload
    def __init__(
        self,
        *,
        event: "_models.ObservedEvent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.USER_COUNT, **kwargs)


class UserRateDefinition(MetricDefinition, discriminator="UserRate"):
    """The definition of a UserRate metric. This metric kind counts the percentage of users with the
    start event that then encounter the end event. The metric denominator counts the number of
    users who encounter the start event at least once. The metric numerator counts the number of
    users who encounter both the start and end events at least once. The computation is ordered, so
    the start event must occur before the end event.

    :ivar kind: The kind of metric. Required. Count the percentage of users with the start event
     that then encounter the end event. The metric denominator counts the number of users who
     encounter the start event at least once. The metric numerator counts the number of users who
     encounter both the start and end events at least once. The computation is ordered, so the start
     event must occur before the end event.
    :vartype kind: str or ~azure.analytics.experimentation.models.USER_RATE
    :ivar start_event: The start event to observe as the rate denominator. Required.
    :vartype start_event: ~azure.analytics.experimentation.models.ObservedEvent
    :ivar end_event: The end event to observe, which is a condition for the rate numerator.
     Required.
    :vartype end_event: ~azure.analytics.experimentation.models.ObservedEvent
    """

    kind: Literal[MetricKind.USER_RATE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The kind of metric. Required. Count the percentage of users with the start event that then
     encounter the end event. The metric denominator counts the number of users who encounter the
     start event at least once. The metric numerator counts the number of users who encounter both
     the start and end events at least once. The computation is ordered, so the start event must
     occur before the end event."""
    start_event: "_models.ObservedEvent" = rest_field(
        name="startEvent", visibility=["read", "create", "update", "delete", "query"]
    )
    """The start event to observe as the rate denominator. Required."""
    end_event: "_models.ObservedEvent" = rest_field(
        name="endEvent", visibility=["read", "create", "update", "delete", "query"]
    )
    """The end event to observe, which is a condition for the rate numerator. Required."""

    @overload
    def __init__(
        self,
        *,
        start_event: "_models.ObservedEvent",
        end_event: "_models.ObservedEvent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MetricKind.USER_RATE, **kwargs)
