# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class DesiredDirection(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Desired direction of the metric."""

    INCREASE = "Increase"
    """An increase to the metric value is desired. E.g., Success rate, Total revenue."""
    DECREASE = "Decrease"
    """A decrease to the metric value is desired. E.g., Error rate, Latency."""
    NEUTRAL = "Neutral"
    """Neither an increase nor a decrease to the metric value is desired, or the desired direction
    depends on other factors. E.g., Number of video play attempts, Number of user feedbacks"""


class DiagnosticCode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The diagnostic error codes."""

    FAILED_SCHEMA_VALIDATION = "FailedSchemaValidation"
    """The metric definition is not according to Json Schema."""
    INVALID_EVENT_CONDITION = "InvalidEventCondition"
    """The KQL filter condition is invalid."""
    UNSUPPORTED_EVENT_CONDITION = "UnsupportedEventCondition"
    """The KQL filter condition is valid but not currently supported."""
    INVALID_METRIC_DEFINITION = "InvalidMetricDefinition"
    """The metric definition provided is invalid.
    for example, if the metric is defined to calculate the average of the Revenue property,
    but also includes a filter such as Revenue == 'hello', this creates a type mismatch.
    The system infers conflicting data types—numeric and string—resulting in a validation failure."""


class LifecycleStage(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Lifecycle stages of a metric, which determines when the metric is calculated."""

    ACTIVE = "Active"
    """Metric is included in experiment analysis"""
    INACTIVE = "Inactive"
    """Metric is not included in experiment analysis"""


class MetricKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """How the metric should be calculated from the event data."""

    EVENT_COUNT = "EventCount"
    """Count the observations of an event. Experiment analysis accounts for unequal traffic
    allocation."""
    USER_COUNT = "UserCount"
    """Count the users who encounter an event. Experiment analysis accounts for unequal traffic
    allocation."""
    EVENT_RATE = "EventRate"
    """Count the percentage of events that satisfy a condition."""
    USER_RATE = "UserRate"
    """Count the percentage of users with the start event that then encounter the end event. The
    metric denominator counts the number of users who encounter the start event at least once. The
    metric numerator counts the number of users who encounter both the start and end events at
    least once. The computation is ordered, so the start event must occur before the end event."""
    SUM = "Sum"
    """The sum of an event property. Experiment analysis accounts for unequal traffic allocation."""
    AVERAGE = "Average"
    """The average of an event property."""
    PERCENTILE = "Percentile"
    """The percentile of an event property."""


class ValidationResultOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The result of validating a Metric."""

    VALID = "Valid"
    """The metric is valid."""
    INVALID = "Invalid"
    """The metric is invalid."""
