# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationassessment import AzureMigrateAssessmentService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateAssessmentServiceBusinessCaseOperationsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateAssessmentService)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_assessment_project(self, resource_group):
        response = self.client.business_case_operations.list_by_assessment_project(
            resource_group_name=resource_group.name,
            project_name="str",
            api_version="2023-09-09-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.business_case_operations.get(
            resource_group_name=resource_group.name,
            project_name="str",
            business_case_name="str",
            api_version="2023-09-09-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.business_case_operations.begin_create(
            resource_group_name=resource_group.name,
            project_name="str",
            business_case_name="str",
            resource={
                "id": "str",
                "name": "str",
                "properties": {
                    "provisioningState": "str",
                    "reportStatusDetails": [{"reportStatus": "str", "reportType": "str"}],
                    "settings": {
                        "azureSettings": {
                            "currency": "str",
                            "targetLocation": "str",
                            "avsLaborCostPercentage": 75,
                            "businessCaseType": "str",
                            "comfortFactor": 1,
                            "discountPercentage": 0.0,
                            "iaasLaborCostPercentage": 75,
                            "infrastructureGrowthRate": 5,
                            "networkCostPercentage": 5,
                            "paasLaborCostPercentage": 60,
                            "perYearMigrationCompletionPercentage": {"str": 0.0},
                            "performanceDataEndTime": "2020-02-20 00:00:00",
                            "performanceDataStartTime": "2020-02-20 00:00:00",
                            "performanceUtilizationPercentile": 95,
                            "savingsOption": "str",
                            "wacc": 0.0,
                            "workloadDiscoverySource": "str",
                        },
                        "azureArcSettings": {
                            "azureArcState": "str",
                            "laborCostPercentage": 0.0,
                            "managementSettings": {"monitoringSettings": {"alertRulesCount": 0, "logsVolumeInGB": 0.0}},
                        },
                        "onPremiseSettings": {
                            "computeSettings": {
                                "hyperthreadCoreToMemoryRatio": 0.0,
                                "price": 0.0,
                                "rhelLinuxServerLicensing": {"licenseCost": 0.0},
                                "sqlServerLicensing": [
                                    {"licenseCost": 0.0, "softwareAssuranceCost": 0.0, "version": "str"}
                                ],
                                "suseLinuxServerLicensing": {"licenseCost": 0.0},
                                "virtualizationSoftwareSettings": {"vMwareCloudFoundationLicenseCost": 0.0},
                                "windowsServerLicensing": {
                                    "licenseCost": 0.0,
                                    "licensesPerCore": 0,
                                    "softwareAssuranceCost": 0.0,
                                },
                            },
                            "facilitySettings": {"facilitiesCostPerKwh": 0.0},
                            "laborSettings": {
                                "hourlyAdminCost": 0.0,
                                "physicalServersPerAdmin": 0,
                                "virtualMachinesPerAdmin": 0,
                            },
                            "networkSettings": {
                                "hardwareSoftwareCostPercentage": 0.0,
                                "maintenanceCostPercentage": 0.0,
                            },
                            "securitySettings": {
                                "serverSecurityCostPerServerPerYear": 0.0,
                                "sqlServerSecurityCostPerServerPerYear": 0.0,
                            },
                            "storageSettings": {
                                "costPerGbPerMonth": 0.0,
                                "maintainanceCostPercentageToAcquisitionCost": 0.0,
                            },
                            "managementSettings": {
                                "hypervVirtualizationManagementSettings": {
                                    "licenseAndSupportList": [{"licenseCost": 0.0, "licenseType": "str"}],
                                    "numberOfPhysicalCoresPerLicense": 0,
                                    "softwareAssuranceCost": 0.0,
                                },
                                "otherManagementCostsSettings": {
                                    "dataProtectionCostPerServerPerYear": 0.0,
                                    "monitoringCostPerServerPerYear": 0.0,
                                    "patchingCostPerServerPerYear": 0.0,
                                },
                                "thirdPartyManagementSettings": {"licenseCost": 0.0, "supportCost": 0.0},
                            },
                        },
                    },
                    "state": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2023-09-09-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.business_case_operations.delete(
            resource_group_name=resource_group.name,
            project_name="str",
            business_case_name="str",
            api_version="2023-09-09-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_compare_summary(self, resource_group):
        response = self.client.business_case_operations.begin_compare_summary(
            resource_group_name=resource_group.name,
            project_name="str",
            business_case_name="str",
            body={},
            api_version="2023-09-09-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_get_report_download_url(self, resource_group):
        response = self.client.business_case_operations.begin_get_report_download_url(
            resource_group_name=resource_group.name,
            project_name="str",
            business_case_name="str",
            body={},
            api_version="2023-09-09-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
