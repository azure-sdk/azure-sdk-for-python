# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationassessment import AzureMigrateAssessmentService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateAssessmentServiceAksAssessmentOperationsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateAssessmentService)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_aks_assessment_operations_list_by_assessment_project(self, resource_group):
        response = self.client.aks_assessment_operations.list_by_assessment_project(
            resource_group_name=resource_group.name,
            project_name="str",
            api_version="2024-01-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_aks_assessment_operations_get(self, resource_group):
        response = self.client.aks_assessment_operations.get(
            resource_group_name=resource_group.name,
            project_name="str",
            assessment_name="str",
            api_version="2024-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_aks_assessment_operations_begin_create(self, resource_group):
        response = self.client.aks_assessment_operations.begin_create(
            resource_group_name=resource_group.name,
            project_name="str",
            assessment_name="str",
            resource={
                "eTag": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "settings": {
                        "azureLocation": "str",
                        "category": "str",
                        "consolidation": "str",
                        "currency": "str",
                        "environmentType": "str",
                        "licensingProgram": "str",
                        "pricingTier": "str",
                        "savingsOptions": "str",
                        "sizingCriteria": "str",
                        "discountPercentage": 0.0,
                        "performanceData": {
                            "percentile": "str",
                            "timeRange": "str",
                            "perfDataEndTime": "2020-02-20 00:00:00",
                            "perfDataStartTime": "2020-02-20 00:00:00",
                        },
                        "scalingFactor": 0.0,
                    },
                    "details": {
                        "createdTimestamp": "2020-02-20 00:00:00",
                        "machineCount": 0,
                        "status": "str",
                        "totalMonthlyCost": 0.0,
                        "updatedTimestamp": "2020-02-20 00:00:00",
                        "webAppCount": 0,
                        "webServerCount": 0,
                        "confidenceRatingInPercentage": 0.0,
                        "pricesTimestamp": "2020-02-20 00:00:00",
                    },
                    "provisioningState": "str",
                    "scope": {"serverGroupId": "str"},
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2024-01-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_aks_assessment_operations_delete(self, resource_group):
        response = self.client.aks_assessment_operations.delete(
            resource_group_name=resource_group.name,
            project_name="str",
            assessment_name="str",
            api_version="2024-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_aks_assessment_operations_begin_download_url(self, resource_group):
        response = self.client.aks_assessment_operations.begin_download_url(
            resource_group_name=resource_group.name,
            project_name="str",
            assessment_name="str",
            body={},
            api_version="2024-01-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
