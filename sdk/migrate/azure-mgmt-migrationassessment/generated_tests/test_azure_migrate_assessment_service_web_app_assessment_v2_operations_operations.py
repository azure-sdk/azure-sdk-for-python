# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationassessment import AzureMigrateAssessmentService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateAssessmentServiceWebAppAssessmentV2OperationsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateAssessmentService)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_group(self, resource_group):
        response = self.client.web_app_assessment_v2_operations.list_by_group(
            resource_group_name=resource_group.name,
            project_name="str",
            group_name="str",
            api_version="2023-09-09-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.web_app_assessment_v2_operations.get(
            resource_group_name=resource_group.name,
            project_name="str",
            group_name="str",
            assessment_name="str",
            api_version="2023-09-09-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.web_app_assessment_v2_operations.begin_create(
            resource_group_name=resource_group.name,
            project_name="str",
            group_name="str",
            assessment_name="str",
            resource={
                "id": "str",
                "name": "str",
                "properties": {
                    "appSvcContainerSettings": {"isolationRequired": bool},
                    "appSvcNativeSettings": {"isolationRequired": bool},
                    "assessmentType": "str",
                    "azureLocation": "str",
                    "azureOfferCode": "str",
                    "azureSecurityOfferingType": "str",
                    "confidenceRatingInPercentage": 0.0,
                    "createdTimestamp": "2020-02-20 00:00:00",
                    "currency": "str",
                    "discountPercentage": 0.0,
                    "discoveredEntityLightSummary": {"numberOfMachines": 0, "numberOfServers": 0, "numberOfWebApps": 0},
                    "eaSubscriptionId": "str",
                    "entityUptime": {"daysPerMonth": 0, "hoursPerDay": 0},
                    "environmentType": "str",
                    "groupType": "str",
                    "percentile": "str",
                    "perfDataEndTime": "2020-02-20 00:00:00",
                    "perfDataStartTime": "2020-02-20 00:00:00",
                    "pricesTimestamp": "2020-02-20 00:00:00",
                    "provisioningState": "str",
                    "reservedInstance": "str",
                    "scalingFactor": 0.0,
                    "schemaVersion": "str",
                    "sizingCriterion": "str",
                    "stage": "str",
                    "status": "str",
                    "timeRange": "str",
                    "updatedTimestamp": "2020-02-20 00:00:00",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2023-09-09-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.web_app_assessment_v2_operations.delete(
            resource_group_name=resource_group.name,
            project_name="str",
            group_name="str",
            assessment_name="str",
            api_version="2023-09-09-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_download_url(self, resource_group):
        response = self.client.web_app_assessment_v2_operations.begin_download_url(
            resource_group_name=resource_group.name,
            project_name="str",
            group_name="str",
            assessment_name="str",
            body={},
            api_version="2023-09-09-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
