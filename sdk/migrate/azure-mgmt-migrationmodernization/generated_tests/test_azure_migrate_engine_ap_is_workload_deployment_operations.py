# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationmodernization import AzureMigrateEngineAPIs

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateEngineAPIsWorkloadDeploymentOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateEngineAPIs)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.workload_deployment.get(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create(self, resource_group):
        response = self.client.workload_deployment.create(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.workload_deployment.begin_delete(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.workload_deployment.list(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            api_version="2022-05-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_secret_configurations(self, resource_group):
        response = self.client.workload_deployment.get_secret_configurations(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_build_container_image(self, resource_group):
        response = self.client.workload_deployment.begin_build_container_image(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_test_migrate(self, resource_group):
        response = self.client.workload_deployment.begin_test_migrate(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_test_migrate_cleanup(self, resource_group):
        response = self.client.workload_deployment.begin_test_migrate_cleanup(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_migrate(self, resource_group):
        response = self.client.workload_deployment.begin_migrate(
            subscription_id="str",
            resource_group_name=resource_group.name,
            modernize_project_name="str",
            workload_deployment_name="str",
            api_version="2022-05-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
