# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationdiscovery.aio import AzureMigrateDiscoveryService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateDiscoveryServiceServerSitesControllerOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateDiscoveryService, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription(self, resource_group):
        response = self.client.server_sites_controller.list_by_subscription(
            api_version="2023-10-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.server_sites_controller.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-10-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.server_sites_controller.get(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_create(
                resource_group_name=resource_group.name,
                site_name="str",
                body={
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "agentDetails": {
                            "id": "str",
                            "keyVaultId": "str",
                            "keyVaultUri": "str",
                            "lastHeartBeatUtc": "2020-02-20 00:00:00",
                            "version": "str",
                        },
                        "applianceName": "str",
                        "discoverySolutionId": "str",
                        "masterSiteId": "str",
                        "provisioningState": "str",
                        "serviceEndpoint": "str",
                        "servicePrincipalIdentityDetails": {
                            "aadAuthority": "str",
                            "applicationId": "str",
                            "audience": "str",
                            "objectId": "str",
                            "rawCertData": "str",
                            "tenantId": "str",
                        },
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.server_sites_controller.update(
            resource_group_name=resource_group.name,
            site_name="str",
            body={
                "properties": {
                    "agentDetails": {
                        "id": "str",
                        "keyVaultId": "str",
                        "keyVaultUri": "str",
                        "lastHeartBeatUtc": "2020-02-20 00:00:00",
                        "version": "str",
                    },
                    "applianceName": "str",
                    "discoverySolutionId": "str",
                    "servicePrincipalIdentityDetails": {
                        "aadAuthority": "str",
                        "applicationId": "str",
                        "audience": "str",
                        "objectId": "str",
                        "rawCertData": "str",
                        "tenantId": "str",
                    },
                },
                "tags": {"str": "str"},
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.server_sites_controller.delete(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_compute_error_summary(self, resource_group):
        response = await self.client.server_sites_controller.compute_error_summary(
            resource_group_name=resource_group.name,
            site_name="str",
            body={},
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_computeusage(self, resource_group):
        response = await self.client.server_sites_controller.computeusage(
            resource_group_name=resource_group.name,
            site_name="str",
            body={},
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_export_applications(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_export_applications(
                resource_group_name=resource_group.name,
                site_name="str",
                body={},
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_export_machine_errors(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_export_machine_errors(
                resource_group_name=resource_group.name,
                site_name="str",
                body={"properties": {"discoveryScope": "str"}},
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_health_summary(self, resource_group):
        response = await self.client.server_sites_controller.list_health_summary(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_refresh_site(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_refresh_site(
                resource_group_name=resource_group.name,
                site_name="str",
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_summary(self, resource_group):
        response = await self.client.server_sites_controller.summary(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update_dependency_map_status(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_update_dependency_map_status(
                resource_group_name=resource_group.name,
                site_name="str",
                map_request={"machines": [{"isDependencyMapToBeEnabled": bool, "machineId": "str"}]},
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update_properties(self, resource_group):
        response = await (
            await self.client.server_sites_controller.begin_update_properties(
                resource_group_name=resource_group.name,
                site_name="str",
                meta_data={"value": [{"dependencyMapping": "str", "machineArmId": "str", "tags": {"str": "str"}}]},
                api_version="2023-10-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
