# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationdiscovery import AzureMigrateDiscoveryService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateDiscoveryServiceServerDependencyMapControllerOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateDiscoveryService)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_server_dependency_map_controller_begin_client_group_members(self, resource_group):
        response = self.client.server_dependency_map_controller.begin_client_group_members(
            resource_group_name=resource_group.name,
            site_name="str",
            map_request={
                "endTime": "2020-02-20 00:00:00",
                "filters": {"machineIds": ["str"], "processIds": ["str"]},
                "machineId": "str",
                "processGroupName": "str",
                "processName": "str",
                "startTime": "2020-02-20 00:00:00",
            },
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_server_dependency_map_controller_begin_export_dependencies(self, resource_group):
        response = self.client.server_dependency_map_controller.begin_export_dependencies(
            resource_group_name=resource_group.name,
            site_name="str",
            request_body={"endTime": "2020-02-20 00:00:00", "startTime": "2020-02-20 00:00:00"},
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_server_dependency_map_controller_begin_generate_coarse_map(self, resource_group):
        response = self.client.server_dependency_map_controller.begin_generate_coarse_map(
            resource_group_name=resource_group.name,
            site_name="str",
            map_request={
                "endTime": "2020-02-20 00:00:00",
                "filters": {"machineIds": ["str"], "processIds": ["str"]},
                "startTime": "2020-02-20 00:00:00",
            },
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_server_dependency_map_controller_begin_generate_detailed_map(self, resource_group):
        response = self.client.server_dependency_map_controller.begin_generate_detailed_map(
            resource_group_name=resource_group.name,
            site_name="str",
            map_request={
                "endTime": "2020-02-20 00:00:00",
                "filters": {"machineIds": ["str"], "processIds": ["str"]},
                "machineId": "str",
                "startTime": "2020-02-20 00:00:00",
            },
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_server_dependency_map_controller_begin_server_group_members(self, resource_group):
        response = self.client.server_dependency_map_controller.begin_server_group_members(
            resource_group_name=resource_group.name,
            site_name="str",
            map_request={
                "endTime": "2020-02-20 00:00:00",
                "filters": {"machineIds": ["str"], "processIds": ["str"]},
                "serverPort": 0,
                "startTime": "2020-02-20 00:00:00",
            },
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
