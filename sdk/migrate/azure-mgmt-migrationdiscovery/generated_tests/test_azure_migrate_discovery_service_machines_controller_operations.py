# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationdiscovery import AzureMigrateDiscoveryService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateDiscoveryServiceMachinesControllerOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateDiscoveryService)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_vmware_site(self, resource_group):
        response = self.client.machines_controller.list_by_vmware_site(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2023-10-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.machines_controller.get(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.machines_controller.update(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            body={
                "properties": {
                    "allocatedMemoryInMb": 0.0,
                    "biosGuid": "str",
                    "biosSerialNumber": "str",
                    "firmware": "str",
                    "numberOfProcessorCore": 0,
                    "operatingSystemDetails": {
                        "osArchitecture": "str",
                        "osName": "str",
                        "osType": "str",
                        "osVersion": "str",
                    },
                    "productSupportStatus": {
                        "currentVersion": "str",
                        "esuStatus": "str",
                        "esuYear": "str",
                        "supportEndDate": "2020-02-20 00:00:00",
                        "supportStatus": "str",
                    },
                    "runAsAccountId": "str",
                    "tags": {"str": "str"},
                }
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_start(self, resource_group):
        response = self.client.machines_controller.begin_start(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_stop(self, resource_group):
        response = self.client.machines_controller.begin_stop(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
