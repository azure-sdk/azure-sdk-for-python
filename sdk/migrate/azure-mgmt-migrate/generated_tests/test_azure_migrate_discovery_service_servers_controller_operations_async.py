# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrate.aio import AzureMigrateDiscoveryService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateDiscoveryServiceServersControllerOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateDiscoveryService, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_server_site_resource(self, resource_group):
        response = self.client.servers_controller.list_by_server_site_resource(
            resource_group_name=resource_group.name,
            site_name="str",
            api_version="2024-05-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_machine(self, resource_group):
        response = await self.client.servers_controller.get_machine(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update_machine(self, resource_group):
        response = await self.client.servers_controller.update_machine(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            body={
                "properties": {
                    "allocatedMemoryInMb": 0.0,
                    "biosGuid": "str",
                    "biosSerialNumber": "str",
                    "disks": [
                        {
                            "diskType": "str",
                            "generatedId": "str",
                            "id": "str",
                            "lun": 0,
                            "maxSizeInBytes": 0,
                            "name": "str",
                            "path": "str",
                        }
                    ],
                    "firmware": "str",
                    "fqdn": "str",
                    "hydratedFqdn": "str",
                    "networkAdapters": [
                        {
                            "ipAddressList": ["str"],
                            "ipAddressType": "str",
                            "macAddress": "str",
                            "networkName": "str",
                            "nicId": "str",
                        }
                    ],
                    "numberOfProcessorCore": 0,
                    "operatingSystemDetails": {
                        "osArchitecture": "str",
                        "osName": "str",
                        "osType": "str",
                        "osVersion": "str",
                    },
                    "productSupportStatus": {
                        "currentVersion": "str",
                        "esuStatus": "str",
                        "esuYear": "str",
                        "supportEndDate": "2020-02-20 00:00:00",
                        "supportStatus": "str",
                    },
                    "provisioningState": "str",
                    "runAsAccountId": "str",
                    "tags": {"str": {}},
                    "validationRequired": "str",
                }
            },
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete_machine(self, resource_group):
        response = await self.client.servers_controller.delete_machine(
            resource_group_name=resource_group.name,
            site_name="str",
            machine_name="str",
            api_version="2024-05-01-preview",
        )

        # please add some check logic here by yourself
        # ...
