# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrate.aio import AzureMigrateDiscoveryService

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateDiscoveryServiceVmwarePropertiesControllerOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateDiscoveryService, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_vmware_properties_controller_begin_update_dependency_map_status(self, resource_group):
        response = await (
            await self.client.vmware_properties_controller.begin_update_dependency_map_status(
                resource_group_name=resource_group.name,
                site_name="str",
                update_machine_dep_map_status={"machines": [{"isDependencyMapToBeEnabled": bool, "machineId": "str"}]},
                api_version="2024-12-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_vmware_properties_controller_begin_update_properties(self, resource_group):
        response = await (
            await self.client.vmware_properties_controller.begin_update_properties(
                resource_group_name=resource_group.name,
                site_name="str",
                meta_data={"value": [{"dependencyMapping": "str", "machineArmId": "str", "tags": {"str": "str"}}]},
                api_version="2024-12-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_vmware_properties_controller_begin_update_run_as_account(self, resource_group):
        response = await (
            await self.client.vmware_properties_controller.begin_update_run_as_account(
                resource_group_name=resource_group.name,
                site_name="str",
                update_machine_run_as_account={"machines": [{"machineId": "str", "runAsAccountId": "str"}]},
                api_version="2024-12-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_vmware_properties_controller_begin_update_tags(self, resource_group):
        response = await (
            await self.client.vmware_properties_controller.begin_update_tags(
                resource_group_name=resource_group.name,
                site_name="str",
                update_machine_tags={"machines": [{"machineId": "str", "tags": {"str": "str"}}]},
                api_version="2024-12-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
