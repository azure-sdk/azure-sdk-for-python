# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.migrationhub import AzureMigrateV2

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-migrationhub
# USAGE
    python private_endpoint_connection_proxy_controller_create_maximum_set_gen.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = AzureMigrateV2(
        credential=DefaultAzureCredential(),
        subscription_id="6B3E0419-6680-4A8A-B3E7-0E56DF525B0F",
    )

    response = client.private_endpoint_connection_proxy_controller.create(
        resource_group_name="rghubmigrate",
        migrate_project_name="1GQwlI-",
        pec_proxy_name="R-0-fb4",
        body={
            "eTag": "ftvkdifbymdoybmuhqocd",
            "properties": {
                "remotePrivateEndpoint": {
                    "connectionDetails": [
                        {
                            "groupId": "h",
                            "id": "khwrvxsvodxkggvgbckqfzhuiqfhrb",
                            "linkIdentifier": "bvzpt",
                            "memberName": "xssdfavvmtwgbsgrjpmtybkprifvyq",
                            "privateIpAddress": "glbd",
                        }
                    ],
                    "id": "nganwgltitktejoo",
                    "manualPrivateLinkServiceConnections": [
                        {
                            "groupIds": ["iodlcfjm"],
                            "id": "fufgetajboxgmnmimjbauwwunqmg",
                            "name": "odbxispygy",
                            "requestMessage": "oqogvejy",
                        }
                    ],
                    "privateLinkServiceConnections": [
                        {
                            "groupIds": ["iodlcfjm"],
                            "id": "fufgetajboxgmnmimjbauwwunqmg",
                            "name": "odbxispygy",
                            "requestMessage": "oqogvejy",
                        }
                    ],
                    "privateLinkServiceProxies": [
                        {
                            "groupConnectivityInformation": [
                                {
                                    "customerVisibleFqdns": ["yecaabcylpewkynpsrgbpzt"],
                                    "groupId": "oajwuwjbjpxuqcrgsmpsu",
                                    "id": "s",
                                    "internalFqdn": "zbwuonwrvbk",
                                    "memberName": "mb",
                                    "privateLinkServiceArmRegion": "zjdpbogbmybiimpfkydvfkvvbql",
                                    "redirectMapId": "aljuztnsxn",
                                }
                            ],
                            "id": "jpoxlghslkrrwlvcopuvyatlzs",
                            "remotePrivateEndpointConnection": {},
                            "remotePrivateLinkServiceConnectionState": {
                                "actionsRequired": "poxbvbemmarin",
                                "description": "vhtgysdjzdgsimxmjuhcuzm",
                                "status": "Approved",
                            },
                        }
                    ],
                }
            },
        },
    )
    print(response)


# x-ms-original-file: specification/migrate/resource-manager/Microsoft.Migrate/MigrateProjects/stable/2023-01-01/examples/PrivateEndpointConnectionProxyController_Create_MaximumSet_Gen.json
if __name__ == "__main__":
    main()
