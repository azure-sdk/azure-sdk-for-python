# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.migrationhub.aio import AzureMigrateV2

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureMigrateV2SolutionsControllerOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureMigrateV2, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_get_solution(self, resource_group):
        response = await self.client.solutions_controller.get_solution(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_create(self, resource_group):
        response = await self.client.solutions_controller.create(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            solution_input={
                "etag": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "cleanupState": "str",
                    "details": {"assessmentCount": 0, "extendedDetails": {"str": "str"}, "groupCount": 0},
                    "goal": "str",
                    "purpose": "str",
                    "status": "str",
                    "summary": {"instanceType": "str"},
                    "tool": "str",
                },
                "type": "str",
            },
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_update(self, resource_group):
        response = await self.client.solutions_controller.update(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            solution_input={
                "etag": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "cleanupState": "str",
                    "details": {"assessmentCount": 0, "extendedDetails": {"str": "str"}, "groupCount": 0},
                    "goal": "str",
                    "purpose": "str",
                    "status": "str",
                    "summary": {"instanceType": "str"},
                    "tool": "str",
                },
                "type": "str",
            },
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_delete_solution(self, resource_group):
        response = await self.client.solutions_controller.delete_solution(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_list_solutions(self, resource_group):
        response = self.client.solutions_controller.list_solutions(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            api_version="2023-01-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_get_config(self, resource_group):
        response = await self.client.solutions_controller.get_config(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_solutions_controller_cleanup_data(self, resource_group):
        response = await self.client.solutions_controller.cleanup_data(
            resource_group_name=resource_group.name,
            migrate_project_name="str",
            solution_name="str",
            api_version="2023-01-01",
        )

        # please add some check logic here by yourself
        # ...
