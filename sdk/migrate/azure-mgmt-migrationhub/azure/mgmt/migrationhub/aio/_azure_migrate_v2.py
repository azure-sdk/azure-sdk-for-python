# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING
from typing_extensions import Self

from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient
from azure.mgmt.core.policies import AsyncARMAutoResourceProviderRegistrationPolicy

from .. import models as _models
from .._serialization import Deserializer, Serializer
from ._configuration import AzureMigrateV2Configuration
from .operations import (
    DatabaseInstancesControllerOperations,
    DatabasesControllerOperations,
    EventsControllerOperations,
    MachinesControllerOperations,
    MigrateProjectsControllerOperations,
    Operations,
    PrivateEndpointConnectionControllerOperations,
    PrivateEndpointConnectionProxyControllerOperations,
    PrivateEndpointConnectionsControllerOperations,
    PrivateLinkResourceControllerOperations,
    ProjectsOperations,
    SolutionsControllerOperations,
    VirtualDesktopUserControllerOperations,
    WebServersControllerOperations,
    WebSitesControllerOperations,
)

if TYPE_CHECKING:
    from azure.core.credentials_async import AsyncTokenCredential


class AzureMigrateV2:  # pylint: disable=too-many-instance-attributes
    """Migrate your workloads to Azure.

    :ivar database_instances_controller: DatabaseInstancesControllerOperations operations
    :vartype database_instances_controller:
     azure.mgmt.migrationhub.aio.operations.DatabaseInstancesControllerOperations
    :ivar databases_controller: DatabasesControllerOperations operations
    :vartype databases_controller:
     azure.mgmt.migrationhub.aio.operations.DatabasesControllerOperations
    :ivar events_controller: EventsControllerOperations operations
    :vartype events_controller: azure.mgmt.migrationhub.aio.operations.EventsControllerOperations
    :ivar machines_controller: MachinesControllerOperations operations
    :vartype machines_controller:
     azure.mgmt.migrationhub.aio.operations.MachinesControllerOperations
    :ivar migrate_projects_controller: MigrateProjectsControllerOperations operations
    :vartype migrate_projects_controller:
     azure.mgmt.migrationhub.aio.operations.MigrateProjectsControllerOperations
    :ivar solutions_controller: SolutionsControllerOperations operations
    :vartype solutions_controller:
     azure.mgmt.migrationhub.aio.operations.SolutionsControllerOperations
    :ivar virtual_desktop_user_controller: VirtualDesktopUserControllerOperations operations
    :vartype virtual_desktop_user_controller:
     azure.mgmt.migrationhub.aio.operations.VirtualDesktopUserControllerOperations
    :ivar web_servers_controller: WebServersControllerOperations operations
    :vartype web_servers_controller:
     azure.mgmt.migrationhub.aio.operations.WebServersControllerOperations
    :ivar web_sites_controller: WebSitesControllerOperations operations
    :vartype web_sites_controller:
     azure.mgmt.migrationhub.aio.operations.WebSitesControllerOperations
    :ivar projects: ProjectsOperations operations
    :vartype projects: azure.mgmt.migrationhub.aio.operations.ProjectsOperations
    :ivar private_endpoint_connections_controller: PrivateEndpointConnectionsControllerOperations
     operations
    :vartype private_endpoint_connections_controller:
     azure.mgmt.migrationhub.aio.operations.PrivateEndpointConnectionsControllerOperations
    :ivar private_endpoint_connection_controller: PrivateEndpointConnectionControllerOperations
     operations
    :vartype private_endpoint_connection_controller:
     azure.mgmt.migrationhub.aio.operations.PrivateEndpointConnectionControllerOperations
    :ivar private_endpoint_connection_proxy_controller:
     PrivateEndpointConnectionProxyControllerOperations operations
    :vartype private_endpoint_connection_proxy_controller:
     azure.mgmt.migrationhub.aio.operations.PrivateEndpointConnectionProxyControllerOperations
    :ivar private_link_resource_controller: PrivateLinkResourceControllerOperations operations
    :vartype private_link_resource_controller:
     azure.mgmt.migrationhub.aio.operations.PrivateLinkResourceControllerOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.migrationhub.aio.operations.Operations
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The ID of the target subscription. Required.
    :type subscription_id: str
    :param base_url: Service URL. Default value is "https://management.azure.com".
    :type base_url: str
    :keyword api_version: Api Version. Default value is "2023-01-01". Note that overriding this
     default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: str = "https://management.azure.com",
        **kwargs: Any
    ) -> None:
        self._config = AzureMigrateV2Configuration(credential=credential, subscription_id=subscription_id, **kwargs)
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                AsyncARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncARMPipelineClient = AsyncARMPipelineClient(base_url=base_url, policies=_policies, **kwargs)

        client_models = {k: v for k, v in _models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.database_instances_controller = DatabaseInstancesControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.databases_controller = DatabasesControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.events_controller = EventsControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.machines_controller = MachinesControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.migrate_projects_controller = MigrateProjectsControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.solutions_controller = SolutionsControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.virtual_desktop_user_controller = VirtualDesktopUserControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.web_servers_controller = WebServersControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.web_sites_controller = WebSitesControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.projects = ProjectsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.private_endpoint_connections_controller = PrivateEndpointConnectionsControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.private_endpoint_connection_controller = PrivateEndpointConnectionControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.private_endpoint_connection_proxy_controller = PrivateEndpointConnectionProxyControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.private_link_resource_controller = PrivateLinkResourceControllerOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)

    def _send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client._send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> Self:
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
