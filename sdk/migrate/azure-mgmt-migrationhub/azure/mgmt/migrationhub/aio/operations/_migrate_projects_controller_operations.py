# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, Type, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._migrate_projects_controller_operations import (
    build_delete_migrate_project_request,
    build_get_migrate_project_request,
    build_get_tool_registration_details_request,
    build_patch_migrate_project_request,
    build_put_migrate_project_request,
    build_refresh_summary_request,
    build_register_tool_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class MigrateProjectsControllerOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.migrationhub.aio.AzureMigrateV2`'s
        :attr:`migrate_projects_controller` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def register_tool(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: _models.RegisterToolInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RegistrationResult:
        """Registers a tool with the migrate project.

        Registers a tool with the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Input containing the name of the tool to be registered. Required.
        :type input: ~azure.mgmt.migrationhub.models.RegisterToolInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RegistrationResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def register_tool(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RegistrationResult:
        """Registers a tool with the migrate project.

        Registers a tool with the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Input containing the name of the tool to be registered. Required.
        :type input: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RegistrationResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def register_tool(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: Union[_models.RegisterToolInput, IO[bytes]],
        **kwargs: Any
    ) -> _models.RegistrationResult:
        """Registers a tool with the migrate project.

        Registers a tool with the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Input containing the name of the tool to be registered. Is either a
         RegisterToolInput type or a IO[bytes] type. Required.
        :type input: ~azure.mgmt.migrationhub.models.RegisterToolInput or IO[bytes]
        :return: RegistrationResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RegistrationResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(input, (IOBase, bytes)):
            _content = input
        else:
            _json = self._serialize.body(input, "RegisterToolInput")

        _request = build_register_tool_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RegistrationResult", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def refresh_summary(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: _models.RefreshSummaryInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RefreshSummaryResult:
        """Refresh the summary of the migrate project.

        Refresh the summary of the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: The goal input which needs to be refreshed. Required.
        :type input: ~azure.mgmt.migrationhub.models.RefreshSummaryInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RefreshSummaryResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RefreshSummaryResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def refresh_summary(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RefreshSummaryResult:
        """Refresh the summary of the migrate project.

        Refresh the summary of the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: The goal input which needs to be refreshed. Required.
        :type input: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RefreshSummaryResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RefreshSummaryResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def refresh_summary(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: Union[_models.RefreshSummaryInput, IO[bytes]],
        **kwargs: Any
    ) -> _models.RefreshSummaryResult:
        """Refresh the summary of the migrate project.

        Refresh the summary of the migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: The goal input which needs to be refreshed. Is either a RefreshSummaryInput type
         or a IO[bytes] type. Required.
        :type input: ~azure.mgmt.migrationhub.models.RefreshSummaryInput or IO[bytes]
        :return: RefreshSummaryResult or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RefreshSummaryResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RefreshSummaryResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(input, (IOBase, bytes)):
            _content = input
        else:
            _json = self._serialize.body(input, "RefreshSummaryInput")

        _request = build_refresh_summary_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RefreshSummaryResult", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_migrate_project(
        self, resource_group_name: str, migrate_project_name: str, **kwargs: Any
    ) -> _models.MigrateProject:
        """Get a specific project.

        Get information related to a specific migrate project. Returns a json object of type
        'migrateProject' as specified in the models section.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.MigrateProject] = kwargs.pop("cls", None)

        _request = build_get_migrate_project_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("MigrateProject", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def put_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: _models.MigrateProject,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Create or update a new project with specified settings.

        Create or update a new project by sending a json object of type 'migrateproject' as given in
        Models section as part of the Request Body. The project name is unique.

        This operation is Idempotent.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Required.
        :type body: ~azure.mgmt.migrationhub.models.MigrateProject
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Create or update a new project with specified settings.

        Create or update a new project by sending a json object of type 'migrateproject' as given in
        Models section as part of the Request Body. The project name is unique.

        This operation is Idempotent.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: Union[_models.MigrateProject, IO[bytes]],
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Create or update a new project with specified settings.

        Create or update a new project by sending a json object of type 'migrateproject' as given in
        Models section as part of the Request Body. The project name is unique.

        This operation is Idempotent.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Is either a MigrateProject type or a IO[bytes] type.
         Required.
        :type body: ~azure.mgmt.migrationhub.models.MigrateProject or IO[bytes]
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.MigrateProject] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "MigrateProject")

        _request = build_put_migrate_project_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = self._deserialize("MigrateProject", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_migrate_project(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, migrate_project_name: str, **kwargs: Any
    ) -> None:
        """Delete the project.

        Delete the migrate project. It deletes summary of the project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_migrate_project_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    async def patch_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: _models.MigrateProject,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Update project.

        Update a project with specified name. Supports partial updates, for example only tags can be
        provided.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Required.
        :type body: ~azure.mgmt.migrationhub.models.MigrateProject
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def patch_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Update project.

        Update a project with specified name. Supports partial updates, for example only tags can be
        provided.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def patch_migrate_project(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        body: Union[_models.MigrateProject, IO[bytes]],
        **kwargs: Any
    ) -> _models.MigrateProject:
        """Update project.

        Update a project with specified name. Supports partial updates, for example only tags can be
        provided.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param body: Migrate project body. Is either a MigrateProject type or a IO[bytes] type.
         Required.
        :type body: ~azure.mgmt.migrationhub.models.MigrateProject or IO[bytes]
        :return: MigrateProject or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.MigrateProject
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.MigrateProject] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "MigrateProject")

        _request = build_patch_migrate_project_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("MigrateProject", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def get_tool_registration_details(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: _models.RegistrationDetailsInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RegistrationDetailsResponse:
        """get_tool_registration_details.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Required.
        :type input: ~azure.mgmt.migrationhub.models.RegistrationDetailsInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RegistrationDetailsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationDetailsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_tool_registration_details(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RegistrationDetailsResponse:
        """get_tool_registration_details.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Required.
        :type input: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RegistrationDetailsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationDetailsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def get_tool_registration_details(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        input: Union[_models.RegistrationDetailsInput, IO[bytes]],
        **kwargs: Any
    ) -> _models.RegistrationDetailsResponse:
        """get_tool_registration_details.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param input: Is either a RegistrationDetailsInput type or a IO[bytes] type. Required.
        :type input: ~azure.mgmt.migrationhub.models.RegistrationDetailsInput or IO[bytes]
        :return: RegistrationDetailsResponse or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.RegistrationDetailsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RegistrationDetailsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(input, (IOBase, bytes)):
            _content = input
        else:
            _json = self._serialize.body(input, "RegistrationDetailsInput")

        _request = build_get_tool_registration_details_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RegistrationDetailsResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
