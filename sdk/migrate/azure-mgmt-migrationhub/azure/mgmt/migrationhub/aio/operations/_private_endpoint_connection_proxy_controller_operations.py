# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._private_endpoint_connection_proxy_controller_operations import (
    build_create_request,
    build_delete_request,
    build_get_request,
    build_list_private_endpoint_connection_proxies_request,
    build_validate_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class PrivateEndpointConnectionProxyControllerOperations:  # pylint: disable=name-too-long
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.migrationhub.aio.AzureMigrateV2`'s
        :attr:`private_endpoint_connection_proxy_controller` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_private_endpoint_connection_proxies(
        self, resource_group_name: str, migrate_project_name: str, **kwargs: Any
    ) -> AsyncIterable["_models.PrivateEndpointConnectionProxy"]:
        """Get the private endpoint connection proxies.

        Get all the private endpoint connections proxies under a migrate project.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :return: An iterator like instance of either PrivateEndpointConnectionProxy or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.PrivateEndpointConnectionProxyCollection] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_list_private_endpoint_connection_proxies_request(
                    resource_group_name=resource_group_name,
                    migrate_project_name=migrate_project_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)
                _request.method = "GET"
            return _request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PrivateEndpointConnectionProxyCollection", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get(
        self, resource_group_name: str, migrate_project_name: str, pec_proxy_name: str, **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Get the private link proxy resource.

        Get the of private link proxy resources from a migrate project and private link proxy resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private link proxy name. Required.
        :type pec_proxy_name: str
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.PrivateEndpointConnectionProxy] = kwargs.pop("cls", None)

        _request = build_get_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            pec_proxy_name=pec_proxy_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("PrivateEndpointConnectionProxy", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: _models.PrivateEndpointConnectionProxy,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Create or update private endpoint proxy.

        Create or update a private endpoint proxy with specified name. If a private endpoint already
        exists, update it.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private endpoint proxy name. Required.
        :type pec_proxy_name: str
        :param body: Modify private endpoint proxy state body. Required.
        :type body: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Create or update private endpoint proxy.

        Create or update a private endpoint proxy with specified name. If a private endpoint already
        exists, update it.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private endpoint proxy name. Required.
        :type pec_proxy_name: str
        :param body: Modify private endpoint proxy state body. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: Union[_models.PrivateEndpointConnectionProxy, IO[bytes]],
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Create or update private endpoint proxy.

        Create or update a private endpoint proxy with specified name. If a private endpoint already
        exists, update it.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private endpoint proxy name. Required.
        :type pec_proxy_name: str
        :param body: Modify private endpoint proxy state body. Is either a
         PrivateEndpointConnectionProxy type or a IO[bytes] type. Required.
        :type body: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy or IO[bytes]
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.PrivateEndpointConnectionProxy] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "PrivateEndpointConnectionProxy")

        _request = build_create_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            pec_proxy_name=pec_proxy_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = self._deserialize("PrivateEndpointConnectionProxy", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(
        self, resource_group_name: str, migrate_project_name: str, pec_proxy_name: str, **kwargs: Any
    ) -> JSON:
        """Delete the private endpoint proxy.

        Delete the private endpoint proxy. Deleting non-existent private endpoint proxy is a
        no-operation.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private endpoint proxy name. Required.
        :type pec_proxy_name: str
        :return: JSON or the result of cls(response)
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_delete_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            pec_proxy_name=pec_proxy_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("object", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def validate(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: _models.PrivateEndpointConnectionProxy,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Validates private endpoint connection proxy.

        Validates private endpoint connection using a project and private endpoint connection proxy.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private link proxy name. Required.
        :type pec_proxy_name: str
        :param body: Validate proxy connection state body. Required.
        :type body: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def validate(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Validates private endpoint connection proxy.

        Validates private endpoint connection using a project and private endpoint connection proxy.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private link proxy name. Required.
        :type pec_proxy_name: str
        :param body: Validate proxy connection state body. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def validate(
        self,
        resource_group_name: str,
        migrate_project_name: str,
        pec_proxy_name: str,
        body: Union[_models.PrivateEndpointConnectionProxy, IO[bytes]],
        **kwargs: Any
    ) -> _models.PrivateEndpointConnectionProxy:
        """Validates private endpoint connection proxy.

        Validates private endpoint connection using a project and private endpoint connection proxy.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param migrate_project_name: Name of the Azure Migrate project. Required.
        :type migrate_project_name: str
        :param pec_proxy_name: Private link proxy name. Required.
        :type pec_proxy_name: str
        :param body: Validate proxy connection state body. Is either a PrivateEndpointConnectionProxy
         type or a IO[bytes] type. Required.
        :type body: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy or IO[bytes]
        :return: PrivateEndpointConnectionProxy or the result of cls(response)
        :rtype: ~azure.mgmt.migrationhub.models.PrivateEndpointConnectionProxy
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.PrivateEndpointConnectionProxy] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "PrivateEndpointConnectionProxy")

        _request = build_validate_request(
            resource_group_name=resource_group_name,
            migrate_project_name=migrate_project_name,
            pec_proxy_name=pec_proxy_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("PrivateEndpointConnectionProxy", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
