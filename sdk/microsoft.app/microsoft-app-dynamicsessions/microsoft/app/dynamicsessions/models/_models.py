# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import HttpResponseError

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class SessionCodeExecutionRequest(_model_base.Model):
    """The request to execute code.

    All required parameters must be populated in order to send to server.

    :ivar code_input_type: The code input type of the code execution request. Required. Known
     values are: "Inline", "InlineBase64", and "InlineText".
    :vartype code_input_type: str or ~microsoft.app.dynamicsessions.models.CodeInputType
    :ivar execution_type: The execution type of the code execution request. Required. Known values
     are: "Synchronous" and "Asynchronous".
    :vartype execution_type: str or ~microsoft.app.dynamicsessions.models.ExecutionType
    :ivar code: The string of the code to execute, based on CodeInputType. Required.
    :vartype code: str
    :ivar timeout_in_seconds: Code execution timeout in seconds. Required.
    :vartype timeout_in_seconds: int
    """

    code_input_type: Union[str, "_models.CodeInputType"] = rest_field(name="codeInputType")
    """The code input type of the code execution request. Required. Known values are: \"Inline\",
     \"InlineBase64\", and \"InlineText\"."""
    execution_type: Union[str, "_models.ExecutionType"] = rest_field(name="executionType")
    """The execution type of the code execution request. Required. Known values are: \"Synchronous\"
     and \"Asynchronous\"."""
    code: str = rest_field()
    """The string of the code to execute, based on CodeInputType. Required."""
    timeout_in_seconds: int = rest_field(name="timeoutInSeconds")
    """Code execution timeout in seconds. Required."""

    @overload
    def __init__(
        self,
        *,
        code_input_type: Union[str, "_models.CodeInputType"],
        execution_type: Union[str, "_models.ExecutionType"],
        code: str,
        timeout_in_seconds: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SessionCodeExecutionResource(_model_base.Model):
    """The session code execution resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Session code execution id. Required.
    :vartype id: str
    :ivar identifier: The identifier of the session. Required.
    :vartype identifier: str
    :ivar execution_type: The execution type of the code execution request. Required. Known values
     are: "Synchronous" and "Asynchronous".
    :vartype execution_type: str or ~microsoft.app.dynamicsessions.models.ExecutionType
    :ivar status: The status of the code execution operation, indicates whether succeeded or not.
     Required. Known values are: "NotStarted", "Running", "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~microsoft.app.dynamicsessions.models.OperationState
    :ivar error: The error of this code execution if failed.
    :vartype error: ~azure.core.HttpResponseError
    :ivar result: The result of this code execution operation.
    :vartype result: ~microsoft.app.dynamicsessions.models.SessionCodeExecutionResult
    """

    id: str = rest_field(visibility=["read"])
    """Session code execution id. Required."""
    identifier: str = rest_field()
    """The identifier of the session. Required."""
    execution_type: Union[str, "_models.ExecutionType"] = rest_field(name="executionType")
    """The execution type of the code execution request. Required. Known values are: \"Synchronous\"
     and \"Asynchronous\"."""
    status: Union[str, "_models.OperationState"] = rest_field()
    """The status of the code execution operation, indicates whether succeeded or not. Required. Known
     values are: \"NotStarted\", \"Running\", \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[HttpResponseError] = rest_field()
    """The error of this code execution if failed."""
    result: Optional["_models.SessionCodeExecutionResult"] = rest_field()
    """The result of this code execution operation."""

    @overload
    def __init__(
        self,
        *,
        identifier: str,
        execution_type: Union[str, "_models.ExecutionType"],
        status: Union[str, "_models.OperationState"],
        error: Optional[HttpResponseError] = None,
        result: Optional["_models.SessionCodeExecutionResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SessionCodeExecutionResult(_model_base.Model):
    """The result of the code execution.

    :ivar stdout: The standard output of the code execution.
    :vartype stdout: str
    :ivar stderr: The standard error of the code execution.
    :vartype stderr: str
    :ivar execution_result: The result of the code execution. The type of this field is same as the
     type of actual result of the code execution after being Json serialized.
    :vartype execution_result: any
    :ivar execution_time_in_milliseconds: The execution time of the code in milliseconds.
    :vartype execution_time_in_milliseconds: int
    """

    stdout: Optional[str] = rest_field()
    """The standard output of the code execution."""
    stderr: Optional[str] = rest_field()
    """The standard error of the code execution."""
    execution_result: Optional[Any] = rest_field(name="executionResult")
    """The result of the code execution. The type of this field is same as the type of actual result
     of the code execution after being Json serialized."""
    execution_time_in_milliseconds: Optional[int] = rest_field(name="executionTimeInMilliseconds")
    """The execution time of the code in milliseconds."""

    @overload
    def __init__(
        self,
        *,
        stdout: Optional[str] = None,
        stderr: Optional[str] = None,
        execution_result: Optional[Any] = None,
        execution_time_in_milliseconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SessionResourceFile(_model_base.Model):
    """Code execution file resource.


    :ivar name: The name of the file. Required.
    :vartype name: str
    :ivar type: The type of the session resource file. Required.
    :vartype type: str
    :ivar content_type: The type of the content of this file.
    :vartype content_type: str
    :ivar size_in_bytes: The size of the file.
    :vartype size_in_bytes: int
    :ivar last_modified_at: The date time in RFC3339 format when the file was last modified.
     Required.
    :vartype last_modified_at: ~datetime.datetime
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the file. Required."""
    type: str = rest_field()
    """The type of the session resource file. Required."""
    content_type: Optional[str] = rest_field(name="contentType")
    """The type of the content of this file."""
    size_in_bytes: Optional[int] = rest_field(name="sizeInBytes")
    """The size of the file."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", format="rfc3339")
    """The date time in RFC3339 format when the file was last modified. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
        last_modified_at: datetime.datetime,
        content_type: Optional[str] = None,
        size_in_bytes: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
