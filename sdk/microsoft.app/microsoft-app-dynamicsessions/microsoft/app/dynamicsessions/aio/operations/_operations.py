# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from io import IOBase
import json
from typing import Any, AsyncIterable, AsyncIterator, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core import AsyncPipelineClient
from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._utils.model_base import Model as _Model, SdkJSONEncoder, _deserialize
from ..._utils.serialization import Deserializer, Serializer
from ..._utils.utils import prepare_multipart_form_data
from ...operations._operations import (
    build_code_execution_execute_request,
    build_code_execution_get_request,
    build_session_resource_files_delete_request,
    build_session_resource_files_get_content_request,
    build_session_resource_files_get_request,
    build_session_resource_files_list_request,
    build_session_resource_files_upload_request,
)
from .._configuration import DynamicSessionsClientConfiguration

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class CodeExecutionOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.app.dynamicsessions.aio.DynamicSessionsClient`'s
        :attr:`code_execution` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: DynamicSessionsClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    async def _execute_initial(
        self,
        code_execution_request: Union[_models.SessionCodeExecutionRequest, JSON, IO[bytes]],
        *,
        identifier: str,
        operation_id: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(code_execution_request, (IOBase, bytes)):
            _content = code_execution_request
        else:
            _content = json.dumps(code_execution_request, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_code_execution_execute_request(
            identifier=identifier,
            operation_id=operation_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            try:
                await response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))
        response_headers["operation-id"] = self._deserialize("str", response.headers.get("operation-id"))
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def begin_execute(
        self,
        code_execution_request: _models.SessionCodeExecutionRequest,
        *,
        identifier: str,
        operation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SessionCodeExecutionResult]:
        """Execute code in a session.

        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: ~microsoft.app.dynamicsessions.models.SessionCodeExecutionRequest
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword operation_id: The id of this execution operation. Default value is None.
        :paramtype operation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SessionCodeExecutionResult. The
         SessionCodeExecutionResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~microsoft.app.dynamicsessions.models.SessionCodeExecutionResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_execute(
        self,
        code_execution_request: JSON,
        *,
        identifier: str,
        operation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SessionCodeExecutionResult]:
        """Execute code in a session.

        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: JSON
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword operation_id: The id of this execution operation. Default value is None.
        :paramtype operation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SessionCodeExecutionResult. The
         SessionCodeExecutionResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~microsoft.app.dynamicsessions.models.SessionCodeExecutionResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_execute(
        self,
        code_execution_request: IO[bytes],
        *,
        identifier: str,
        operation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SessionCodeExecutionResult]:
        """Execute code in a session.

        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: IO[bytes]
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword operation_id: The id of this execution operation. Default value is None.
        :paramtype operation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns SessionCodeExecutionResult. The
         SessionCodeExecutionResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~microsoft.app.dynamicsessions.models.SessionCodeExecutionResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def begin_execute(
        self,
        code_execution_request: Union[_models.SessionCodeExecutionRequest, JSON, IO[bytes]],
        *,
        identifier: str,
        operation_id: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[_models.SessionCodeExecutionResult]:
        """Execute code in a session.

        :param code_execution_request: The request to execute code. Is one of the following types:
         SessionCodeExecutionRequest, JSON, IO[bytes] Required.
        :type code_execution_request: ~microsoft.app.dynamicsessions.models.SessionCodeExecutionRequest
         or JSON or IO[bytes]
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword operation_id: The id of this execution operation. Default value is None.
        :paramtype operation_id: str
        :return: An instance of AsyncLROPoller that returns SessionCodeExecutionResult. The
         SessionCodeExecutionResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~microsoft.app.dynamicsessions.models.SessionCodeExecutionResult]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SessionCodeExecutionResult] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._execute_initial(
                code_execution_request=code_execution_request,
                identifier=identifier,
                operation_id=operation_id,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            await raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))
            response_headers["operation-id"] = self._deserialize("str", response.headers.get("operation-id"))
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.SessionCodeExecutionResult, response.json().get("result", {}))
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncLROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller[_models.SessionCodeExecutionResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller[_models.SessionCodeExecutionResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace_async
    async def get(self, execution_id: str, *, identifier: str, **kwargs: Any) -> _models.SessionCodeExecutionResource:
        """Get the code execution result.

        :param execution_id: Session code execution id. Required.
        :type execution_id: str
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :return: SessionCodeExecutionResource. The SessionCodeExecutionResource is compatible with
         MutableMapping
        :rtype: ~microsoft.app.dynamicsessions.models.SessionCodeExecutionResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SessionCodeExecutionResource] = kwargs.pop("cls", None)

        _request = build_code_execution_get_request(
            execution_id=execution_id,
            identifier=identifier,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SessionCodeExecutionResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class SessionResourceFilesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.app.dynamicsessions.aio.DynamicSessionsClient`'s
        :attr:`session_resource_files` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: DynamicSessionsClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self, *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> AsyncIterable["_models.SessionResourceFile"]:
        """List the file resources.

        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: An iterator like instance of SessionResourceFile
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~microsoft.app.dynamicsessions.models.SessionResourceFile]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.SessionResourceFile]] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_session_resource_files_list_request(
                    identifier=identifier,
                    path=path,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.SessionResourceFile], deserialized.get("value", []))
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get(
        self, name: str, *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> _models.SessionResourceFile:
        """Get the file resource.

        :param name: The name of the file. Required.
        :type name: str
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: SessionResourceFile. The SessionResourceFile is compatible with MutableMapping
        :rtype: ~microsoft.app.dynamicsessions.models.SessionResourceFile
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SessionResourceFile] = kwargs.pop("cls", None)

        _request = build_session_resource_files_get_request(
            name=name,
            identifier=identifier,
            path=path,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SessionResourceFile, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(self, name: str, *, identifier: str, path: Optional[str] = None, **kwargs: Any) -> None:
        """Delete the file.

        :param name: The name of the file. Required.
        :type name: str
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_session_resource_files_delete_request(
            name=name,
            identifier=identifier,
            path=path,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    async def upload(
        self, body: _models.UploadRequest, *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> _models.SessionResourceFile:
        """Upload a file to a session.

        :param body: Multipart body. Required.
        :type body: ~microsoft.app.dynamicsessions.models.UploadRequest
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: SessionResourceFile. The SessionResourceFile is compatible with MutableMapping
        :rtype: ~microsoft.app.dynamicsessions.models.SessionResourceFile
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def upload(
        self, body: JSON, *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> _models.SessionResourceFile:
        """Upload a file to a session.

        :param body: Multipart body. Required.
        :type body: JSON
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: SessionResourceFile. The SessionResourceFile is compatible with MutableMapping
        :rtype: ~microsoft.app.dynamicsessions.models.SessionResourceFile
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def upload(
        self, body: Union[_models.UploadRequest, JSON], *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> _models.SessionResourceFile:
        """Upload a file to a session.

        :param body: Multipart body. Is either a UploadRequest type or a JSON type. Required.
        :type body: ~microsoft.app.dynamicsessions.models.UploadRequest or JSON
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: SessionResourceFile. The SessionResourceFile is compatible with MutableMapping
        :rtype: ~microsoft.app.dynamicsessions.models.SessionResourceFile
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SessionResourceFile] = kwargs.pop("cls", None)

        _body = body.as_dict() if isinstance(body, _Model) else body
        _file_fields: List[str] = ["file"]
        _data_fields: List[str] = []
        _files, _data = prepare_multipart_form_data(_body, _file_fields, _data_fields)

        _request = build_session_resource_files_upload_request(
            identifier=identifier,
            path=path,
            api_version=self._config.api_version,
            files=_files,
            data=_data,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SessionResourceFile, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_content(
        self, name: str, *, identifier: str, path: Optional[str] = None, **kwargs: Any
    ) -> AsyncIterator[bytes]:
        """Get the content of the file.

        :param name: The name of the file. Required.
        :type name: str
        :keyword identifier: The user-assigned identifier of the session. Required.
        :paramtype identifier: str
        :keyword path: The path of the file after uploaded. Default value is None.
        :paramtype path: str
        :return: AsyncIterator[bytes]
        :rtype: AsyncIterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[AsyncIterator[bytes]] = kwargs.pop("cls", None)

        _request = build_session_resource_files_get_content_request(
            name=name,
            identifier=identifier,
            path=path,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
