# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Mapping, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class SessionCodeExecutionRequest(_model_base.Model):
    """The request to execute code.

    All required parameters must be populated in order to send to server.

    :ivar code_input_type: The code input type of the code execution request. Required. Known
     values are: "Inline", "InlineBase64", and "InlineText".
    :vartype code_input_type: str or ~microsoft.app.models.CodeInputType
    :ivar execution_type: The execution type of the code execution request. Required. Known values
     are: "Synchronous" and "Asynchronous".
    :vartype execution_type: str or ~microsoft.app.models.ExecutionType
    :ivar network_status: The network status of the code execution session. Required. Known values
     are: "EgressEnabled" and "EgressDisabled".
    :vartype network_status: str or ~microsoft.app.models.NetworkStatus
    :ivar multi_array_status: The multi array status of the code execution session. Required. Known
     values are: "MultiArrayEnabled" and "MultiArrayDisabled".
    :vartype multi_array_status: str or ~microsoft.app.models.MultiArrayStatus
    :ivar code: The string of the code to execute, based on CodeInputType. Required.
    :vartype code: str
    :ivar timeout_in_seconds: Code execution timeout in seconds. Required.
    :vartype timeout_in_seconds: int
    """

    code_input_type: Union[str, "_models.CodeInputType"] = rest_field(name="codeInputType")
    """The code input type of the code execution request. Required. Known values are: \"Inline\",
     \"InlineBase64\", and \"InlineText\"."""
    execution_type: Union[str, "_models.ExecutionType"] = rest_field(name="executionType")
    """The execution type of the code execution request. Required. Known values are: \"Synchronous\"
     and \"Asynchronous\"."""
    network_status: Union[str, "_models.NetworkStatus"] = rest_field(name="networkStatus")
    """The network status of the code execution session. Required. Known values are: \"EgressEnabled\"
     and \"EgressDisabled\"."""
    multi_array_status: Union[str, "_models.MultiArrayStatus"] = rest_field(name="multiArrayStatus")
    """The multi array status of the code execution session. Required. Known values are:
     \"MultiArrayEnabled\" and \"MultiArrayDisabled\"."""
    code: str = rest_field()
    """The string of the code to execute, based on CodeInputType. Required."""
    timeout_in_seconds: int = rest_field(name="timeoutInSeconds")
    """Code execution timeout in seconds. Required."""

    @overload
    def __init__(
        self,
        *,
        code_input_type: Union[str, "_models.CodeInputType"],
        execution_type: Union[str, "_models.ExecutionType"],
        network_status: Union[str, "_models.NetworkStatus"],
        multi_array_status: Union[str, "_models.MultiArrayStatus"],
        code: str,
        timeout_in_seconds: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SessionCodeExecutionResult(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The result containing the result of the code execution.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar code_input_type: The code input type of the code execution request. Required. Known
     values are: "Inline", "InlineBase64", and "InlineText".
    :vartype code_input_type: str or ~microsoft.app.models.CodeInputType
    :ivar execution_type: The execution type of the code execution request. Required. Known values
     are: "Synchronous" and "Asynchronous".
    :vartype execution_type: str or ~microsoft.app.models.ExecutionType
    :ivar network_status: The network status of the code execution session. Required. Known values
     are: "EgressEnabled" and "EgressDisabled".
    :vartype network_status: str or ~microsoft.app.models.NetworkStatus
    :ivar multi_array_status: The multi array status of the code execution session. Required. Known
     values are: "MultiArrayEnabled" and "MultiArrayDisabled".
    :vartype multi_array_status: str or ~microsoft.app.models.MultiArrayStatus
    :ivar code: The string of the code to execute, based on CodeInputType. Required.
    :vartype code: str
    :ivar timeout_in_seconds: Code execution timeout in seconds. Required.
    :vartype timeout_in_seconds: int
    :ivar id: Session code execution id. Required.
    :vartype id: str
    :ivar status: The status of the code execution, indicates whether succeeded or not. Required.
     Known values are: "Success" and "Failure".
    :vartype status: str or ~microsoft.app.models.CodeExecutionStatus
    :ivar stdout: The standard output of the code execution. Required.
    :vartype stdout: str
    :ivar stderr: The standard error of the code execution. Required.
    :vartype stderr: str
    :ivar result: The result of the code execution. Required.
    :vartype result: any
    :ivar execution_time_in_milliseconds: The execution time of the code in milliseconds. Required.
    :vartype execution_time_in_milliseconds: int
    """

    code_input_type: Union[str, "_models.CodeInputType"] = rest_field(name="codeInputType")
    """The code input type of the code execution request. Required. Known values are: \"Inline\",
     \"InlineBase64\", and \"InlineText\"."""
    execution_type: Union[str, "_models.ExecutionType"] = rest_field(name="executionType")
    """The execution type of the code execution request. Required. Known values are: \"Synchronous\"
     and \"Asynchronous\"."""
    network_status: Union[str, "_models.NetworkStatus"] = rest_field(name="networkStatus")
    """The network status of the code execution session. Required. Known values are: \"EgressEnabled\"
     and \"EgressDisabled\"."""
    multi_array_status: Union[str, "_models.MultiArrayStatus"] = rest_field(name="multiArrayStatus")
    """The multi array status of the code execution session. Required. Known values are:
     \"MultiArrayEnabled\" and \"MultiArrayDisabled\"."""
    code: str = rest_field()
    """The string of the code to execute, based on CodeInputType. Required."""
    timeout_in_seconds: int = rest_field(name="timeoutInSeconds")
    """Code execution timeout in seconds. Required."""
    id: str = rest_field(visibility=["read"])
    """Session code execution id. Required."""
    status: Union[str, "_models.CodeExecutionStatus"] = rest_field()
    """The status of the code execution, indicates whether succeeded or not. Required. Known values
     are: \"Success\" and \"Failure\"."""
    stdout: str = rest_field()
    """The standard output of the code execution. Required."""
    stderr: str = rest_field()
    """The standard error of the code execution. Required."""
    result: Any = rest_field()
    """The result of the code execution. Required."""
    execution_time_in_milliseconds: int = rest_field(name="executionTimeInMilliseconds")
    """The execution time of the code in milliseconds. Required."""

    @overload
    def __init__(
        self,
        *,
        code_input_type: Union[str, "_models.CodeInputType"],
        execution_type: Union[str, "_models.ExecutionType"],
        network_status: Union[str, "_models.NetworkStatus"],
        multi_array_status: Union[str, "_models.MultiArrayStatus"],
        code: str,
        timeout_in_seconds: int,
        status: Union[str, "_models.CodeExecutionStatus"],
        stdout: str,
        stderr: str,
        result: Any,
        execution_time_in_milliseconds: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SessionResourceFile(_model_base.Model):
    """Code execution file resource.


    :ivar file_name: The name of the file. Required.
    :vartype file_name: str
    :ivar size_in_bytes: The size of the file. Required.
    :vartype size_in_bytes: int
    :ivar created_at: The date time in RFC3339 format when the file was uploaded. Required.
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_at: The date time in RFC3339 format when the file was last modified.
     Required.
    :vartype last_modified_at: ~datetime.datetime
    """

    file_name: str = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the file. Required."""
    size_in_bytes: int = rest_field(name="sizeInBytes")
    """The size of the file. Required."""
    created_at: datetime.datetime = rest_field(name="createdAt", format="rfc3339")
    """The date time in RFC3339 format when the file was uploaded. Required."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", format="rfc3339")
    """The date time in RFC3339 format when the file was last modified. Required."""

    @overload
    def __init__(
        self,
        *,
        file_name: str,
        size_in_bytes: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
