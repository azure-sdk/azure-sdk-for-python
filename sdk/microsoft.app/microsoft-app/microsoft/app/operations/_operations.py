# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import _model_base, models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import FileType, prepare_multipart_form_data

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]
_Unset: Any = object()

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_session_code_execution_execute_code_request(  # pylint: disable=name-too-long
    subscription_id: str, resource_group_name: str, session_pool_name: str, *, identifier: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = (
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/sessionPools/{sessionPoolName}/code/execute"
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sessionPoolName": _SERIALIZER.url("session_pool_name", session_pool_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["identifier"] = _SERIALIZER.query("identifier", identifier, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_session_resource_files_get_file_metadata_request(  # pylint: disable=name-too-long
    subscription_id: str,
    resource_group_name: str,
    session_pool_name: str,
    file_name: str,
    *,
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/sessionPools/{sessionPoolName}/files/{fileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sessionPoolName": _SERIALIZER.url("session_pool_name", session_pool_name, "str"),
        "fileName": _SERIALIZER.url("file_name", file_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["identifier"] = _SERIALIZER.query("identifier", identifier, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_session_resource_files_delete_file_request(  # pylint: disable=name-too-long
    subscription_id: str,
    resource_group_name: str,
    session_pool_name: str,
    file_name: str,
    *,
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/sessionPools/{sessionPoolName}/files/{fileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sessionPoolName": _SERIALIZER.url("session_pool_name", session_pool_name, "str"),
        "fileName": _SERIALIZER.url("file_name", file_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["identifier"] = _SERIALIZER.query("identifier", identifier, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_session_resource_files_get_file_content_request(  # pylint: disable=name-too-long
    subscription_id: str,
    resource_group_name: str,
    session_pool_name: str,
    filename: str,
    *,
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/sessionPools/{sessionPoolName}/files/content/{filename}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sessionPoolName": _SERIALIZER.url("session_pool_name", session_pool_name, "str"),
        "filename": _SERIALIZER.url("filename", filename, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["identifier"] = _SERIALIZER.query("identifier", identifier, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_session_resource_files_upload_file_request(  # pylint: disable=name-too-long
    subscription_id: str,
    resource_group_name: str,
    session_pool_name: str,
    file_name: str,
    *,
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-08-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/sessionPools/{sessionPoolName}/files/{fileName}:uploadFile"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "sessionPoolName": _SERIALIZER.url("session_pool_name", session_pool_name, "str"),
        "fileName": _SERIALIZER.url("file_name", file_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["identifier"] = _SERIALIZER.query("identifier", identifier, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class SessionCodeExecutionOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.app.AppClient`'s
        :attr:`session_code_execution` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def execute_code(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        code_execution_request: _models.SessionCodeExecutionRequest,
        *,
        identifier: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SessionCodeExecutionResponse:
        """Execute code in a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: ~microsoft.app.models.SessionCodeExecutionRequest
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SessionCodeExecutionResponse. The SessionCodeExecutionResponse is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionCodeExecutionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def execute_code(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        code_execution_request: JSON,
        *,
        identifier: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SessionCodeExecutionResponse:
        """Execute code in a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: JSON
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SessionCodeExecutionResponse. The SessionCodeExecutionResponse is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionCodeExecutionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def execute_code(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        code_execution_request: IO[bytes],
        *,
        identifier: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SessionCodeExecutionResponse:
        """Execute code in a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param code_execution_request: The request to execute code. Required.
        :type code_execution_request: IO[bytes]
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SessionCodeExecutionResponse. The SessionCodeExecutionResponse is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionCodeExecutionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def execute_code(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        code_execution_request: Union[_models.SessionCodeExecutionRequest, JSON, IO[bytes]],
        *,
        identifier: str,
        **kwargs: Any
    ) -> _models.SessionCodeExecutionResponse:
        """Execute code in a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param code_execution_request: The request to execute code. Is one of the following types:
         SessionCodeExecutionRequest, JSON, IO[bytes] Required.
        :type code_execution_request: ~microsoft.app.models.SessionCodeExecutionRequest or JSON or
         IO[bytes]
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :return: SessionCodeExecutionResponse. The SessionCodeExecutionResponse is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionCodeExecutionResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SessionCodeExecutionResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(code_execution_request, (IOBase, bytes)):
            _content = code_execution_request
        else:
            _content = json.dumps(code_execution_request, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_session_code_execution_execute_code_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            session_pool_name=session_pool_name,
            identifier=identifier,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SessionCodeExecutionResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class SessionResourceFilesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~microsoft.app.AppClient`'s
        :attr:`session_resource_files` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_file_metadata(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        file_name: str,
        *,
        identifier: str,
        **kwargs: Any
    ) -> _models.GetFileMetadataResponse:
        """Get the file resource.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param file_name: The name of the file. Required.
        :type file_name: str
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :return: GetFileMetadataResponse. The GetFileMetadataResponse is compatible with MutableMapping
        :rtype: ~microsoft.app.models.GetFileMetadataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.GetFileMetadataResponse] = kwargs.pop("cls", None)

        _request = build_session_resource_files_get_file_metadata_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            session_pool_name=session_pool_name,
            file_name=file_name,
            identifier=identifier,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.GetFileMetadataResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete_file(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        file_name: str,
        *,
        identifier: str,
        **kwargs: Any
    ) -> None:
        """Delete the file.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param file_name: The name of the file. Required.
        :type file_name: str
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_session_resource_files_delete_file_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            session_pool_name=session_pool_name,
            file_name=file_name,
            identifier=identifier,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_file_content(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        filename: str,
        *,
        identifier: str,
        **kwargs: Any
    ) -> bytes:
        """Get the content of the file.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param filename: The name of the file. Required.
        :type filename: str
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :return: bytes
        :rtype: bytes
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bytes] = kwargs.pop("cls", None)

        _request = build_session_resource_files_get_file_content_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            session_pool_name=session_pool_name,
            filename=filename,
            identifier=identifier,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(bytes, response.json(), format="base64")

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def upload_file(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        file_name: str,
        body: JSON,
        *,
        identifier: str,
        **kwargs: Any
    ) -> _models.SessionResourceFileCollection:
        """Upload a file to a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param file_name: The name of the file. Required.
        :type file_name: str
        :param body: Required.
        :type body: JSON
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :return: SessionResourceFileCollection. The SessionResourceFileCollection is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionResourceFileCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def upload_file(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        file_name: str,
        *,
        identifier: str,
        file: FileType,
        **kwargs: Any
    ) -> _models.SessionResourceFileCollection:
        """Upload a file to a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param file_name: The name of the file. Required.
        :type file_name: str
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :keyword file: The file to upload. Required.
        :paramtype file: ~microsoft.app._vendor.FileType
        :return: SessionResourceFileCollection. The SessionResourceFileCollection is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionResourceFileCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def upload_file(
        self,
        subscription_id: str,
        resource_group_name: str,
        session_pool_name: str,
        file_name: str,
        body: JSON = _Unset,
        *,
        identifier: str,
        file: FileType = _Unset,
        **kwargs: Any
    ) -> _models.SessionResourceFileCollection:
        """Upload a file to a session.

        :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
        :type subscription_id: str
        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param session_pool_name: The name of the session pool. Required.
        :type session_pool_name: str
        :param file_name: The name of the file. Required.
        :type file_name: str
        :param body: Is one of the following types: JSON Required.
        :type body: JSON
        :keyword identifier: The identifier of the session. Required.
        :paramtype identifier: str
        :keyword file: The file to upload. Required.
        :paramtype file: ~microsoft.app._vendor.FileType
        :return: SessionResourceFileCollection. The SessionResourceFileCollection is compatible with
         MutableMapping
        :rtype: ~microsoft.app.models.SessionResourceFileCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SessionResourceFileCollection] = kwargs.pop("cls", None)

        if body is _Unset:
            if file is _Unset:
                raise TypeError("missing required argument: file")
            body = {"file": file}
            body = {k: v for k, v in body.items() if v is not None}
        _body = body.as_dict() if isinstance(body, _model_base.Model) else body
        _file_fields: List[str] = ["file"]
        _data_fields: List[str] = []
        _files, _data = prepare_multipart_form_data(_body, _file_fields, _data_fields)

        _request = build_session_resource_files_upload_file_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            session_pool_name=session_pool_name,
            file_name=file_name,
            identifier=identifier,
            api_version=self._config.api_version,
            files=_files,
            data=_data,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SessionResourceFileCollection, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
