# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ApiError(_model_base.Model):
    """ApiError for Fleet."""


class BaseVirtualMachineProfile(_model_base.Model):
    """BaseVirtualMachineProfile."""


class ComputeProfile(_model_base.Model):
    """Compute Profile to use for running user's workloads.

    All required parameters must be populated in order to send to server.

    :ivar base_virtual_machine_profile: Base Virtual Machine Profile Properties to be specified
     according to
     "specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile".  # pylint: disable=line-too-long
     Required.
    :vartype base_virtual_machine_profile:
     ~azure.mgmt.computefleet.models.BaseVirtualMachineProfile
    :ivar compute_api_version: Specifies the Microsoft.Compute API version to use when creating
     underlying Virtual Machine scale sets and Virtual Machines.
     The default value will be the latest supported computeApiVersion by Compute Fleet.
    :vartype compute_api_version: str
    :ivar platform_fault_domain_count: Specifies the number of fault domains to use when creating
     the underlying VMSS.
     A fault domain is a logical group of hardware within an Azure datacenter.
     VMs in the same fault domain share a common power source and network switch.
     If not specified, defaults to 1, which represents "Max Spreading" (using as many fault domains
     as possible).
     This property cannot be updated.
    :vartype platform_fault_domain_count: int
    """

    base_virtual_machine_profile: "_models.BaseVirtualMachineProfile" = rest_field(name="baseVirtualMachineProfile")
    """Base Virtual Machine Profile Properties to be specified according to
     \"specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile\".  # pylint: disable=line-too-long
     Required."""
    compute_api_version: Optional[str] = rest_field(name="computeApiVersion")
    """Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine
     scale sets and Virtual Machines.
     The default value will be the latest supported computeApiVersion by Compute Fleet."""
    platform_fault_domain_count: Optional[int] = rest_field(name="platformFaultDomainCount")
    """Specifies the number of fault domains to use when creating the underlying VMSS.
     A fault domain is a logical group of hardware within an Azure datacenter.
     VMs in the same fault domain share a common power source and network switch.
     If not specified, defaults to 1, which represents \"Max Spreading\" (using as many fault
     domains as possible).
     This property cannot be updated."""

    @overload
    def __init__(
        self,
        *,
        base_virtual_machine_profile: "_models.BaseVirtualMachineProfile",
        compute_api_version: Optional[str] = None,
        platform_fault_domain_count: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.computefleet.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.computefleet.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.computefleet.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.computefleet.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.computefleet.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Fleet(TrackedResource):
    """An Compute Fleet resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.computefleet.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.computefleet.models.FleetProperties
    :ivar zones: Zones in which the Compute Fleet is available.
    :vartype zones: list[str]
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.computefleet.models.ManagedServiceIdentity
    :ivar plan: Details of the resource plan.
    :vartype plan: ~azure.mgmt.computefleet.models.Plan
    """

    properties: Optional["_models.FleetProperties"] = rest_field()
    """The resource-specific properties for this resource."""
    zones: Optional[List[str]] = rest_field()
    """Zones in which the Compute Fleet is available."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field()
    """The managed service identities assigned to this resource."""
    plan: Optional["_models.Plan"] = rest_field()
    """Details of the resource plan."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FleetProperties"] = None,
        zones: Optional[List[str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        plan: Optional["_models.Plan"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FleetProperties(_model_base.Model):
    """Details of the Compute Fleet.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", "Deleting", and "Migrating".
    :vartype provisioning_state: str or ~azure.mgmt.computefleet.models.ProvisioningState
    :ivar spot_priority_profile: Configuration Options for Spot instances in Compute Fleet.
    :vartype spot_priority_profile: ~azure.mgmt.computefleet.models.SpotPriorityProfile
    :ivar regular_priority_profile: Configuration Options for Regular instances in Compute Fleet.
    :vartype regular_priority_profile: ~azure.mgmt.computefleet.models.RegularPriorityProfile
    :ivar vm_sizes_profile: List of VM sizes supported for Compute Fleet. Required.
    :vartype vm_sizes_profile: list[~azure.mgmt.computefleet.models.VmSizeProfile]
    :ivar compute_profile: Compute Profile to use for running user's workloads. Required.
    :vartype compute_profile: ~azure.mgmt.computefleet.models.ComputeProfile
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Updating\", \"Deleting\", and \"Migrating\"."""
    spot_priority_profile: Optional["_models.SpotPriorityProfile"] = rest_field(name="spotPriorityProfile")
    """Configuration Options for Spot instances in Compute Fleet."""
    regular_priority_profile: Optional["_models.RegularPriorityProfile"] = rest_field(name="regularPriorityProfile")
    """Configuration Options for Regular instances in Compute Fleet."""
    vm_sizes_profile: List["_models.VmSizeProfile"] = rest_field(name="vmSizesProfile")
    """List of VM sizes supported for Compute Fleet. Required."""
    compute_profile: "_models.ComputeProfile" = rest_field(name="computeProfile")
    """Compute Profile to use for running user's workloads. Required."""

    @overload
    def __init__(
        self,
        *,
        vm_sizes_profile: List["_models.VmSizeProfile"],
        compute_profile: "_models.ComputeProfile",
        spot_priority_profile: Optional["_models.SpotPriorityProfile"] = None,
        regular_priority_profile: Optional["_models.RegularPriorityProfile"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FleetUpdate(_model_base.Model):
    """Fleet Update Model.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: Updatable managed service identity.
    :vartype identity: ~azure.mgmt.computefleet.models.ManagedServiceIdentityUpdate
    :ivar plan: Updatable resource plan.
    :vartype plan: ~azure.mgmt.computefleet.models.ResourcePlanUpdate
    :ivar properties: RP-specific updatable properties.
    :vartype properties: ~azure.mgmt.computefleet.models.FleetProperties
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    identity: Optional["_models.ManagedServiceIdentityUpdate"] = rest_field()
    """Updatable managed service identity."""
    plan: Optional["_models.ResourcePlanUpdate"] = rest_field()
    """Updatable resource plan."""
    properties: Optional["_models.FleetProperties"] = rest_field()
    """RP-specific updatable properties."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentityUpdate"] = None,
        plan: Optional["_models.ResourcePlanUpdate"] = None,
        properties: Optional["_models.FleetProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_model_base.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.computefleet.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.computefleet.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field()
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ManagedServiceIdentityUpdate(_model_base.Model):
    """The template for adding optional properties.

    :ivar type: The type of managed identity assigned to this resource. Known values are: "None",
     "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.computefleet.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.computefleet.models.UserAssignedIdentity]
    """

    type: Optional[Union[str, "_models.ManagedServiceIdentityType"]] = rest_field()
    """The type of managed identity assigned to this resource. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedServiceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.computefleet.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.computefleet.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.computefleet.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field()
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field()
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field()
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field()
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Plan(_model_base.Model):
    """Plan for the resource.

    All required parameters must be populated in order to send to server.

    :ivar name: A user defined name of the 3rd Party Artifact that is being procured. Required.
    :vartype name: str
    :ivar publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic.
     Required.
    :vartype publisher: str
    :ivar product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
     the OfferID specified for the artifact at the time of Data Market onboarding. Required.
    :vartype product: str
    :ivar promotion_code: A publisher provided promotion code as provisioned in Data Market for the
     said product/artifact.
    :vartype promotion_code: str
    :ivar version: The version of the desired product/artifact.
    :vartype version: str
    """

    name: str = rest_field()
    """A user defined name of the 3rd Party Artifact that is being procured. Required."""
    publisher: str = rest_field()
    """The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic. Required."""
    product: str = rest_field()
    """The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID
     specified for the artifact at the time of Data Market onboarding. Required."""
    promotion_code: Optional[str] = rest_field(name="promotionCode")
    """A publisher provided promotion code as provisioned in Data Market for the said
     product/artifact."""
    version: Optional[str] = rest_field()
    """The version of the desired product/artifact."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        publisher: str,
        product: str,
        promotion_code: Optional[str] = None,
        version: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RegularPriorityProfile(_model_base.Model):
    """Configuration Options for Regular instances in Compute Fleet.

    :ivar capacity: Total capacity to achieve. It is currently in terms of number of VMs.
    :vartype capacity: int
    :ivar min_capacity: Minimum capacity to achieve which cannot be updated. If we will not be able
     to "guarantee" minimum capacity, we will reject the request in the sync path itself.
    :vartype min_capacity: int
    :ivar allocation_strategy: Allocation strategy to follow when determining the VM sizes
     distribution for Regular VMs. Known values are: "LowestPrice" and "Prioritized".
    :vartype allocation_strategy: str or
     ~azure.mgmt.computefleet.models.RegularPriorityAllocationStrategy
    """

    capacity: Optional[int] = rest_field()
    """Total capacity to achieve. It is currently in terms of number of VMs."""
    min_capacity: Optional[int] = rest_field(name="minCapacity")
    """Minimum capacity to achieve which cannot be updated. If we will not be able to \"guarantee\"
     minimum capacity, we will reject the request in the sync path itself."""
    allocation_strategy: Optional[Union[str, "_models.RegularPriorityAllocationStrategy"]] = rest_field(
        name="allocationStrategy"
    )
    """Allocation strategy to follow when determining the VM sizes distribution for Regular VMs. Known
     values are: \"LowestPrice\" and \"Prioritized\"."""

    @overload
    def __init__(
        self,
        *,
        capacity: Optional[int] = None,
        min_capacity: Optional[int] = None,
        allocation_strategy: Optional[Union[str, "_models.RegularPriorityAllocationStrategy"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ResourcePlanUpdate(_model_base.Model):
    """The template for adding optional properties.

    :ivar name: A user defined name of the 3rd Party Artifact that is being procured.
    :vartype name: str
    :ivar publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic.
    :vartype publisher: str
    :ivar product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
     the OfferID specified for the artifact at the time of Data Market onboarding.
    :vartype product: str
    :ivar promotion_code: A publisher provided promotion code as provisioned in Data Market for the
     said product/artifact.
    :vartype promotion_code: str
    :ivar version: The version of the desired product/artifact.
    :vartype version: str
    """

    name: Optional[str] = rest_field()
    """A user defined name of the 3rd Party Artifact that is being procured."""
    publisher: Optional[str] = rest_field()
    """The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic."""
    product: Optional[str] = rest_field()
    """The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID
     specified for the artifact at the time of Data Market onboarding."""
    promotion_code: Optional[str] = rest_field(name="promotionCode")
    """A publisher provided promotion code as provisioned in Data Market for the said
     product/artifact."""
    version: Optional[str] = rest_field()
    """The version of the desired product/artifact."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
        promotion_code: Optional[str] = None,
        version: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SpotPriorityProfile(_model_base.Model):
    """Configuration Options for Spot instances in Compute Fleet.

    :ivar capacity: Total capacity to achieve. It is currently in terms of number of VMs.
    :vartype capacity: int
    :ivar min_capacity: Minimum capacity to achieve which cannot be updated. If we will not be able
     to "guarantee" minimum capacity, we will reject the request in the sync path itself.
    :vartype min_capacity: int
    :ivar max_price_per_v_m: Price per hour of each Spot VM will never exceed this.
    :vartype max_price_per_v_m: float
    :ivar eviction_policy: Eviction Policy to follow when evicting Spot VMs. Known values are:
     "Delete" and "Deallocate".
    :vartype eviction_policy: str or ~azure.mgmt.computefleet.models.EvictionPolicy
    :ivar allocation_strategy: Allocation strategy to follow when determining the VM sizes
     distribution for Spot VMs. Known values are: "PriceCapacityOptimized", "LowestPrice", and
     "CapacityOptimized".
    :vartype allocation_strategy: str or ~azure.mgmt.computefleet.models.SpotAllocationStrategy
    :ivar maintain: Flag to enable/disable continuous goal seeking for the desired capacity and
     restoration of evicted Spot VMs.
     If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs
     (if VMs are evicted deleted)
     or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate
     due to capacity constraint) in order to achieve the desired capacity.
     Maintain is enabled by default.
    :vartype maintain: bool
    """

    capacity: Optional[int] = rest_field()
    """Total capacity to achieve. It is currently in terms of number of VMs."""
    min_capacity: Optional[int] = rest_field(name="minCapacity")
    """Minimum capacity to achieve which cannot be updated. If we will not be able to \"guarantee\"
     minimum capacity, we will reject the request in the sync path itself."""
    max_price_per_v_m: Optional[float] = rest_field(name="maxPricePerVM")
    """Price per hour of each Spot VM will never exceed this."""
    eviction_policy: Optional[Union[str, "_models.EvictionPolicy"]] = rest_field(name="evictionPolicy")
    """Eviction Policy to follow when evicting Spot VMs. Known values are: \"Delete\" and
     \"Deallocate\"."""
    allocation_strategy: Optional[Union[str, "_models.SpotAllocationStrategy"]] = rest_field(name="allocationStrategy")
    """Allocation strategy to follow when determining the VM sizes distribution for Spot VMs. Known
     values are: \"PriceCapacityOptimized\", \"LowestPrice\", and \"CapacityOptimized\"."""
    maintain: Optional[bool] = rest_field()
    """Flag to enable/disable continuous goal seeking for the desired capacity and restoration of
     evicted Spot VMs.
     If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs
     (if VMs are evicted deleted)
     or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate
     due to capacity constraint) in order to achieve the desired capacity.
     Maintain is enabled by default."""

    @overload
    def __init__(
        self,
        *,
        capacity: Optional[int] = None,
        min_capacity: Optional[int] = None,
        max_price_per_v_m: Optional[float] = None,
        eviction_policy: Optional[Union[str, "_models.EvictionPolicy"]] = None,
        allocation_strategy: Optional[Union[str, "_models.SpotAllocationStrategy"]] = None,
        maintain: Optional[bool] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.computefleet.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.computefleet.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_model_base.Model):
    """User assigned identity properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""


class VirtualMachineScaleSet(_model_base.Model):
    """An AzureFleet's virtualMachineScaleSet.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: The compute RP resource id of the virtualMachineScaleSet
    "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}".
     Required.
    :vartype id: str
    :ivar type: Type of the virtualMachineScaleSet.
    :vartype type: str
    :ivar operation_status: This represents the operationStatus of the VMSS in response to the last
     operation that was performed on it by Azure Fleet resource. Required. Known values are:
     "Succeeded", "Failed", "Canceled", "Creating", "Updating", "Deleting", and "Migrating".
    :vartype operation_status: str or ~azure.mgmt.computefleet.models.ProvisioningState
    :ivar error: Error Information when ``operationStatus`` is ``Failed``.
    :vartype error: ~azure.mgmt.computefleet.models.ApiError
    """

    id: str = rest_field(visibility=["read"])
    """The compute RP resource id of the virtualMachineScaleSet
     \"subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}\".
     Required."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Type of the virtualMachineScaleSet."""
    operation_status: Union[str, "_models.ProvisioningState"] = rest_field(name="operationStatus", visibility=["read"])
    """This represents the operationStatus of the VMSS in response to the last operation that was
     performed on it by Azure Fleet resource. Required. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Creating\", \"Updating\", \"Deleting\", and \"Migrating\"."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """Error Information when ``operationStatus`` is ``Failed``."""


class VirtualMachineScaleSetListResult(_model_base.Model):
    """The response of a VirtualMachineScaleSet list operation.


    :ivar value: The VirtualMachineScaleSet items on this page. Required.
    :vartype value: list[~azure.mgmt.computefleet.models.VirtualMachineScaleSet]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.VirtualMachineScaleSet"] = rest_field()
    """The VirtualMachineScaleSet items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.VirtualMachineScaleSet"],
        next_link: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmSizeProfile(_model_base.Model):
    """Specifications about a VM Size. This will also contain the corresponding rank and weight in
    future.

    All required parameters must be populated in order to send to server.

    :ivar name: The Sku name (e.g. 'Standard_DS1_v2'). Required.
    :vartype name: str
    :ivar rank: The rank of the VM size. This is used with
     'RegularPriorityAllocationStrategy.Prioritized'
     The lower the number, the higher the priority. Starting with 0.
    :vartype rank: int
    """

    name: str = rest_field()
    """The Sku name (e.g. 'Standard_DS1_v2'). Required."""
    rank: Optional[int] = rest_field()
    """The rank of the VM size. This is used with 'RegularPriorityAllocationStrategy.Prioritized'
     The lower the number, the higher the priority. Starting with 0."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        rank: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
