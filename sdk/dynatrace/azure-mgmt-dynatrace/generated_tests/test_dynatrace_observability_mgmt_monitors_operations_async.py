# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.dynatrace.aio import DynatraceObservabilityMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDynatraceObservabilityMgmtMonitorsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DynatraceObservabilityMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_monitored_resources(self, resource_group):
        response = self.client.monitors.list_monitored_resources(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_get_vm_host_payload(self, resource_group):
        response = await self.client.monitors.get_vm_host_payload(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_get(self, resource_group):
        response = await self.client.monitors.get(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.monitors.begin_create_or_update(
                resource_group_name=resource_group.name,
                monitor_name="str",
                resource={
                    "location": "str",
                    "dynatraceEnvironmentProperties": {
                        "accountInfo": {"accountId": "str", "regionId": "str"},
                        "environmentInfo": {
                            "environmentId": "str",
                            "ingestionKey": "str",
                            "landingURL": "str",
                            "logsIngestionEndpoint": "str",
                        },
                        "singleSignOnProperties": {
                            "aadDomains": ["str"],
                            "enterpriseAppId": "str",
                            "provisioningState": "str",
                            "singleSignOnState": "str",
                            "singleSignOnUrl": "str",
                        },
                        "userId": "str",
                    },
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "liftrResourceCategory": "str",
                    "liftrResourcePreference": 0,
                    "marketplaceSubscriptionStatus": "str",
                    "monitoringStatus": "str",
                    "name": "str",
                    "planData": {
                        "billingCycle": "str",
                        "effectiveDate": "2020-02-20 00:00:00",
                        "planDetails": "str",
                        "usageType": "str",
                    },
                    "provisioningState": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                    "userInfo": {
                        "country": "str",
                        "emailAddress": "str",
                        "firstName": "str",
                        "lastName": "str",
                        "phoneNumber": "str",
                    },
                },
                api_version="2023-04-27",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_update(self, resource_group):
        response = await self.client.monitors.update(
            resource_group_name=resource_group.name,
            monitor_name="str",
            resource={"tags": {"str": "str"}},
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_begin_delete(self, resource_group):
        response = await (
            await self.client.monitors.begin_delete(
                resource_group_name=resource_group.name,
                monitor_name="str",
                api_version="2023-04-27",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_by_subscription_id(self, resource_group):
        response = self.client.monitors.list_by_subscription_id(
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_by_resource_group(self, resource_group):
        response = self.client.monitors.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_get_marketplace_saa_s_resource_details(self, resource_group):
        response = await self.client.monitors.get_marketplace_saa_s_resource_details(
            request={"tenantId": "str"},
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_hosts(self, resource_group):
        response = self.client.monitors.list_hosts(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_get_metric_status(self, resource_group):
        response = await self.client.monitors.get_metric_status(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_app_services(self, resource_group):
        response = self.client.monitors.list_app_services(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_get_sso_details(self, resource_group):
        response = await self.client.monitors.get_sso_details(
            resource_group_name=resource_group.name,
            monitor_name="str",
            api_version="2023-04-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_monitors_list_linkable_environments(self, resource_group):
        response = self.client.monitors.list_linkable_environments(
            resource_group_name=resource_group.name,
            monitor_name="str",
            request={"region": "str", "tenantId": "str", "userPrincipal": "str"},
            api_version="2023-04-27",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
