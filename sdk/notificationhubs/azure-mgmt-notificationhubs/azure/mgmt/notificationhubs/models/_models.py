# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AdmCredential(_Model):
    """Description of a NotificationHub AdmCredential.

    :ivar properties: Description of a NotificationHub AdmCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.AdmCredentialProperties
    """

    properties: "_models.AdmCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub AdmCredential. Required."""

    __flattened_items = ["client_id", "client_secret", "auth_token_url"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.AdmCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class AdmCredentialProperties(_Model):
    """Description of a NotificationHub AdmCredential.

    :ivar client_id: Gets or sets the client identifier. Required.
    :vartype client_id: str
    :ivar client_secret: Gets or sets the credential secret access key. Required.
    :vartype client_secret: str
    :ivar auth_token_url: Gets or sets the URL of the authorization token. Required.
    :vartype auth_token_url: str
    """

    client_id: str = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the client identifier. Required."""
    client_secret: str = rest_field(name="clientSecret", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the credential secret access key. Required."""
    auth_token_url: str = rest_field(name="authTokenUrl", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the URL of the authorization token. Required."""

    @overload
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        auth_token_url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApnsCredential(_Model):
    """Description of a NotificationHub ApnsCredential.

    :ivar properties: Description of a NotificationHub ApnsCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.ApnsCredentialProperties
    """

    properties: "_models.ApnsCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub ApnsCredential. Required."""

    __flattened_items = [
        "apns_certificate",
        "certificate_key",
        "endpoint",
        "thumbprint",
        "key_id",
        "app_name",
        "app_id",
        "token",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ApnsCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ApnsCredentialProperties(_Model):
    """Description of a NotificationHub ApnsCredential.

    :ivar apns_certificate: Gets or sets the APNS certificate.
    :vartype apns_certificate: str
    :ivar certificate_key: Gets or sets the certificate key.
    :vartype certificate_key: str
    :ivar endpoint: Gets or sets the endpoint of this credential. Required.
    :vartype endpoint: str
    :ivar thumbprint: Gets or sets the APNS certificate Thumbprint.
    :vartype thumbprint: str
    :ivar key_id: Gets or sets a 10-character key identifier (kid) key, obtained from
     your developer account.
    :vartype key_id: str
    :ivar app_name: Gets or sets the name of the application.
    :vartype app_name: str
    :ivar app_id: Gets or sets the issuer (iss) registered claim key, whose value is
     your 10-character Team ID, obtained from your developer account.
    :vartype app_id: str
    :ivar token: Gets or sets provider Authentication Token, obtained through your
     developer account.
    :vartype token: str
    """

    apns_certificate: Optional[str] = rest_field(
        name="apnsCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the APNS certificate."""
    certificate_key: Optional[str] = rest_field(
        name="certificateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the certificate key."""
    endpoint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the endpoint of this credential. Required."""
    thumbprint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the APNS certificate Thumbprint."""
    key_id: Optional[str] = rest_field(name="keyId", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets a 10-character key identifier (kid) key, obtained from
     your developer account."""
    app_name: Optional[str] = rest_field(name="appName", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the name of the application."""
    app_id: Optional[str] = rest_field(name="appId", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the issuer (iss) registered claim key, whose value is
     your 10-character Team ID, obtained from your developer account."""
    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets provider Authentication Token, obtained through your
     developer account."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        apns_certificate: Optional[str] = None,
        certificate_key: Optional[str] = None,
        thumbprint: Optional[str] = None,
        key_id: Optional[str] = None,
        app_name: Optional[str] = None,
        app_id: Optional[str] = None,
        token: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Availability(_Model):
    """Represents metric availability (part of RP operation descriptions).

    :ivar time_grain: Time grain of the availability.
    :vartype time_grain: str
    :ivar blob_duration: Duration of the availability blob.
    :vartype blob_duration: str
    """

    time_grain: Optional[str] = rest_field(name="timeGrain", visibility=["read"])
    """Time grain of the availability."""
    blob_duration: Optional[str] = rest_field(name="blobDuration", visibility=["read"])
    """Duration of the availability blob."""


class BaiduCredential(_Model):
    """Description of a NotificationHub BaiduCredential.

    :ivar properties: Description of a NotificationHub BaiduCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.BaiduCredentialProperties
    """

    properties: "_models.BaiduCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BaiduCredential. Required."""

    __flattened_items = ["baidu_api_key", "baidu_end_point", "baidu_secret_key"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.BaiduCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class BaiduCredentialProperties(_Model):
    """Description of a NotificationHub BaiduCredential.

    :ivar baidu_api_key: Gets or sets baidu Api Key. Required.
    :vartype baidu_api_key: str
    :ivar baidu_end_point: Gets or sets baidu Endpoint. Required.
    :vartype baidu_end_point: str
    :ivar baidu_secret_key: Gets or sets baidu Secret Key. Required.
    :vartype baidu_secret_key: str
    """

    baidu_api_key: str = rest_field(name="baiduApiKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets baidu Api Key. Required."""
    baidu_end_point: str = rest_field(name="baiduEndPoint", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets baidu Endpoint. Required."""
    baidu_secret_key: str = rest_field(
        name="baiduSecretKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets baidu Secret Key. Required."""

    @overload
    def __init__(
        self,
        *,
        baidu_api_key: str,
        baidu_end_point: str,
        baidu_secret_key: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrowserCredential(_Model):
    """Description of a NotificationHub BrowserCredential.

    :ivar properties: Description of a NotificationHub BrowserCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.BrowserCredentialProperties
    """

    properties: "_models.BrowserCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BrowserCredential. Required."""

    __flattened_items = ["subject", "vapid_private_key", "vapid_public_key"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.BrowserCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class BrowserCredentialProperties(_Model):
    """Description of a NotificationHub BrowserCredential.

    :ivar subject: Gets or sets web push subject. Required.
    :vartype subject: str
    :ivar vapid_private_key: Gets or sets VAPID private key. Required.
    :vartype vapid_private_key: str
    :ivar vapid_public_key: Gets or sets VAPID public key. Required.
    :vartype vapid_public_key: str
    """

    subject: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets web push subject. Required."""
    vapid_private_key: str = rest_field(
        name="vapidPrivateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets VAPID private key. Required."""
    vapid_public_key: str = rest_field(
        name="vapidPublicKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets VAPID public key. Required."""

    @overload
    def __init__(
        self,
        *,
        subject: str,
        vapid_private_key: str,
        vapid_public_key: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckAvailabilityParameters(_Model):
    """Parameters supplied to the Check Name Availability for Namespace and
    NotificationHubs.

    :ivar id: Gets resource Id.
    :vartype id: str
    :ivar name: Gets or sets resource name. Required.
    :vartype name: str
    :ivar type: Gets resource type.
    :vartype type: str
    :ivar location: Gets or sets resource location.
    :vartype location: str
    :ivar tags: Gets or sets resource tags.
    :vartype tags: dict[str, str]
    :ivar is_availiable: Not used and deprecated since API version 2023-01-01-preview.
    :vartype is_availiable: bool
    :ivar sku: The Sku description for a namespace.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Gets resource Id."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets resource name. Required."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Gets resource type."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets resource location."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets resource tags."""
    is_availiable: Optional[bool] = rest_field(
        name="isAvailiable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Not used and deprecated since API version 2023-01-01-preview."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        is_availiable: Optional[bool] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    """


class CheckAvailabilityResult(ProxyResource):
    """Description of a CheckAvailability resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar is_availiable: Gets or sets true if the name is available and can be used to
     create new Namespace/NotificationHub. Otherwise false.
    :vartype is_availiable: bool
    :ivar location: Deprecated - only for compatibility.
    :vartype location: str
    :ivar tags: Deprecated - only for compatibility.
    :vartype tags: dict[str, str]
    :ivar sku: The Sku description for a namespace.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    """

    is_availiable: Optional[bool] = rest_field(
        name="isAvailiable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets true if the name is available and can be used to
     create new Namespace/NotificationHub. Otherwise false."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """Deprecated - only for compatibility."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Deprecated - only for compatibility."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace."""

    @overload
    def __init__(
        self,
        *,
        is_availiable: Optional[bool] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DebugSendResponse(ProxyResource):
    """Description of a NotificationHub Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar properties: Result of DebugSend operations.
    :vartype properties: ~azure.mgmt.notificationhubs.models.DebugSendResult
    :ivar location: Deprecated - only for compatibility.
    :vartype location: str
    :ivar tags: Deprecated - only for compatibility.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.DebugSendResult"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Result of DebugSend operations."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """Deprecated - only for compatibility."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Deprecated - only for compatibility."""

    __flattened_items = ["success", "failure", "results"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DebugSendResult"] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DebugSendResult(_Model):
    """Result of DebugSend operations.

    :ivar success: Gets or sets successful send.
    :vartype success: int
    :ivar failure: Gets or sets send failure.
    :vartype failure: int
    :ivar results: Gets or sets actual failure description.
    :vartype results: list[~azure.mgmt.notificationhubs.models.RegistrationResult]
    """

    success: Optional[int] = rest_field(visibility=["read"])
    """Gets or sets successful send."""
    failure: Optional[int] = rest_field(visibility=["read"])
    """Gets or sets send failure."""
    results: Optional[List["_models.RegistrationResult"]] = rest_field(visibility=["read"])
    """Gets or sets actual failure description."""


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.notificationhubs.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.notificationhubs.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.notificationhubs.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FcmV1Credential(_Model):
    """Description of a NotificationHub FcmV1Credential.

    :ivar properties: Description of a NotificationHub FcmV1Credential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.FcmV1CredentialProperties
    """

    properties: "_models.FcmV1CredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub FcmV1Credential. Required."""

    __flattened_items = ["client_email", "private_key", "project_id"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FcmV1CredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FcmV1CredentialProperties(_Model):
    """Description of a NotificationHub FcmV1Credential.

    :ivar client_email: Gets or sets client email. Required.
    :vartype client_email: str
    :ivar private_key: Gets or sets private key. Required.
    :vartype private_key: str
    :ivar project_id: Gets or sets project id. Required.
    :vartype project_id: str
    """

    client_email: str = rest_field(name="clientEmail", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets client email. Required."""
    private_key: str = rest_field(name="privateKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets private key. Required."""
    project_id: str = rest_field(name="projectId", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets project id. Required."""

    @overload
    def __init__(
        self,
        *,
        client_email: str,
        private_key: str,
        project_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GcmCredential(_Model):
    """Description of a NotificationHub GcmCredential.

    :ivar properties: Description of a NotificationHub GcmCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.GcmCredentialProperties
    """

    properties: "_models.GcmCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub GcmCredential. Required."""

    __flattened_items = ["gcm_endpoint", "google_api_key"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.GcmCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GcmCredentialProperties(_Model):
    """Description of a NotificationHub GcmCredential.

    :ivar gcm_endpoint: Gets or sets the GCM endpoint.
    :vartype gcm_endpoint: str
    :ivar google_api_key: Gets or sets the Google API key. Required.
    :vartype google_api_key: str
    """

    gcm_endpoint: Optional[str] = rest_field(
        name="gcmEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the GCM endpoint."""
    google_api_key: str = rest_field(name="googleApiKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the Google API key. Required."""

    @overload
    def __init__(
        self,
        *,
        google_api_key: str,
        gcm_endpoint: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IpRule(_Model):
    """A network authorization rule that filters traffic based on IP address.

    :ivar ip_mask: IP mask. Required.
    :vartype ip_mask: str
    :ivar rights: List of access rights. Required.
    :vartype rights: list[str or ~azure.mgmt.notificationhubs.models.AccessRights]
    """

    ip_mask: str = rest_field(name="ipMask", visibility=["read", "create", "update", "delete", "query"])
    """IP mask. Required."""
    rights: List[Union[str, "_models.AccessRights"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of access rights. Required."""

    @overload
    def __init__(
        self,
        *,
        ip_mask: str,
        rights: List[Union[str, "_models.AccessRights"]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogSpecification(_Model):
    """A single log category specification.

    :ivar name: Name of the log category.
    :vartype name: str
    :ivar display_name: Display name of the log category.
    :vartype display_name: str
    :ivar blob_duration: Duration of data written to a single blob.
    :vartype blob_duration: str
    :ivar category_groups: Category group for the log specification.
    :vartype category_groups: list[str]
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Name of the log category."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Display name of the log category."""
    blob_duration: Optional[str] = rest_field(name="blobDuration", visibility=["read"])
    """Duration of data written to a single blob."""
    category_groups: Optional[List[str]] = rest_field(
        name="categoryGroups", visibility=["read", "create", "update", "delete", "query"]
    )
    """Category group for the log specification."""

    @overload
    def __init__(
        self,
        *,
        category_groups: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricSpecification(_Model):
    """A metric specification.

    :ivar name: Metric name / id.
    :vartype name: str
    :ivar display_name: User-visible metric name.
    :vartype display_name: str
    :ivar display_description: Description of the metric.
    :vartype display_description: str
    :ivar unit: Metric unit.
    :vartype unit: str
    :ivar aggregation_type: Type of the aggregation (Average, Minimum, Maximum, Total or Count).
    :vartype aggregation_type: str
    :ivar availabilities: List of availabilities.
    :vartype availabilities: list[~azure.mgmt.notificationhubs.models.Availability]
    :ivar supported_time_grain_types: List of supported time grain types.
    :vartype supported_time_grain_types: list[str]
    :ivar metric_filter_pattern: The matching regex pattern to be applied to the field pointed by
     the "metricsFilterPathSelector" flag in the ARM manifest.
    :vartype metric_filter_pattern: str
    :ivar fill_gap_with_zero: Optional property. If set to true, then zero will be returned for
     time duration where no metric is emitted / published.
    :vartype fill_gap_with_zero: bool
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Metric name / id."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """User-visible metric name."""
    display_description: Optional[str] = rest_field(name="displayDescription", visibility=["read"])
    """Description of the metric."""
    unit: Optional[str] = rest_field(visibility=["read"])
    """Metric unit."""
    aggregation_type: Optional[str] = rest_field(name="aggregationType", visibility=["read"])
    """Type of the aggregation (Average, Minimum, Maximum, Total or Count)."""
    availabilities: Optional[List["_models.Availability"]] = rest_field(visibility=["read"])
    """List of availabilities."""
    supported_time_grain_types: Optional[List[str]] = rest_field(name="supportedTimeGrainTypes", visibility=["read"])
    """List of supported time grain types."""
    metric_filter_pattern: Optional[str] = rest_field(name="metricFilterPattern", visibility=["read"])
    """The matching regex pattern to be applied to the field pointed by the
     \"metricsFilterPathSelector\" flag in the ARM manifest."""
    fill_gap_with_zero: Optional[bool] = rest_field(name="fillGapWithZero", visibility=["read"])
    """Optional property. If set to true, then zero will be returned for time duration where no metric
     is emitted / published."""


class MpnsCredential(_Model):
    """Description of a NotificationHub MpnsCredential.

    :ivar properties: Description of a NotificationHub MpnsCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.MpnsCredentialProperties
    """

    properties: "_models.MpnsCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub MpnsCredential. Required."""

    __flattened_items = ["mpns_certificate", "certificate_key", "thumbprint"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.MpnsCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MpnsCredentialProperties(_Model):
    """Description of a NotificationHub MpnsCredential.

    :ivar mpns_certificate: Gets or sets the MPNS certificate. Required.
    :vartype mpns_certificate: str
    :ivar certificate_key: Gets or sets the certificate key for this credential. Required.
    :vartype certificate_key: str
    :ivar thumbprint: Gets or sets the MPNS certificate Thumbprint. Required.
    :vartype thumbprint: str
    """

    mpns_certificate: str = rest_field(
        name="mpnsCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the MPNS certificate. Required."""
    certificate_key: str = rest_field(name="certificateKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the certificate key for this credential. Required."""
    thumbprint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the MPNS certificate Thumbprint. Required."""

    @overload
    def __init__(
        self,
        *,
        mpns_certificate: str,
        certificate_key: str,
        thumbprint: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NamespacePatchParameters(_Model):
    """Patch parameter for NamespaceResource.

    :ivar sku: The Sku description for a namespace.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    :ivar properties: Represents namespace properties.
    :vartype properties: ~azure.mgmt.notificationhubs.models.NamespaceProperties
    :ivar tags: Dictionary of <string>.
    :vartype tags: dict[str, str]
    """

    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace."""
    properties: Optional["_models.NamespaceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents namespace properties."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of <string>."""

    @overload
    def __init__(
        self,
        *,
        sku: Optional["_models.Sku"] = None,
        properties: Optional["_models.NamespaceProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NamespaceProperties(_Model):
    """Represents namespace properties.

    :ivar name: Name of the Notification Hubs namespace. This is immutable property, set
     automatically
     by the service when the namespace is created.
    :vartype name: str
    :ivar provisioning_state: Defines values for OperationProvisioningState. Known values are:
     "Unknown", "InProgress", "Succeeded", "Failed", "Canceled", "Pending", and "Disabled".
    :vartype provisioning_state: str or
     ~azure.mgmt.notificationhubs.models.OperationProvisioningState
    :ivar status: Namespace status. Known values are: "Created", "Creating", "Suspended", and
     "Deleting".
    :vartype status: str or ~azure.mgmt.notificationhubs.models.NamespaceStatus
    :ivar enabled: Gets or sets whether or not the namespace is currently enabled.
    :vartype enabled: bool
    :ivar critical: Gets or sets whether or not the namespace is set as Critical.
    :vartype critical: bool
    :ivar subscription_id: Namespace subscription id.
    :vartype subscription_id: str
    :ivar region: Region. The value is always set to the same value as Namespace.Location, so we
     are deprecating
     this property.
    :vartype region: str
    :ivar metric_id: Azure Insights Metrics id.
    :vartype metric_id: str
    :ivar created_at: Time when the namespace was created.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: Time when the namespace was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar namespace_type: Defines values for NamespaceType. Known values are: "Messaging" and
     "NotificationHub".
    :vartype namespace_type: str or ~azure.mgmt.notificationhubs.models.NamespaceType
    :ivar replication_region: Allowed replication region. Known values are: "Default", "WestUs2",
     "NorthEurope", "AustraliaEast", "BrazilSouth", "SouthEastAsia", "SouthAfricaNorth", and "None".
    :vartype replication_region: str or ~azure.mgmt.notificationhubs.models.ReplicationRegion
    :ivar zone_redundancy: Namespace SKU name. Known values are: "Disabled" and "Enabled".
    :vartype zone_redundancy: str or ~azure.mgmt.notificationhubs.models.ZoneRedundancyPreference
    :ivar network_acls: A collection of network authorization rules.
    :vartype network_acls: ~azure.mgmt.notificationhubs.models.NetworkAcls
    :ivar pns_credentials: Collection of Notification Hub or Notification Hub Namespace PNS
     credentials.
    :vartype pns_credentials: ~azure.mgmt.notificationhubs.models.PnsCredentials
    :ivar service_bus_endpoint: Gets or sets endpoint you can use to perform NotificationHub
     operations.
    :vartype service_bus_endpoint: str
    :ivar private_endpoint_connections: Private Endpoint Connections for namespace.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.notificationhubs.models.PrivateEndpointConnectionResource]
    :ivar scale_unit: Gets or sets scaleUnit where the namespace gets created.
    :vartype scale_unit: str
    :ivar data_center: Deprecated.
    :vartype data_center: str
    :ivar public_network_access: Type of public network access. Known values are: "Enabled" and
     "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.notificationhubs.models.PublicNetworkAccess
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Name of the Notification Hubs namespace. This is immutable property, set automatically
     by the service when the namespace is created."""
    provisioning_state: Optional[Union[str, "_models.OperationProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Defines values for OperationProvisioningState. Known values are: \"Unknown\", \"InProgress\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Pending\", and \"Disabled\"."""
    status: Optional[Union[str, "_models.NamespaceStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Namespace status. Known values are: \"Created\", \"Creating\", \"Suspended\", and \"Deleting\"."""
    enabled: Optional[bool] = rest_field(visibility=["read"])
    """Gets or sets whether or not the namespace is currently enabled."""
    critical: Optional[bool] = rest_field(visibility=["read"])
    """Gets or sets whether or not the namespace is set as Critical."""
    subscription_id: Optional[str] = rest_field(name="subscriptionId", visibility=["read"])
    """Namespace subscription id."""
    region: Optional[str] = rest_field(visibility=["read"])
    """Region. The value is always set to the same value as Namespace.Location, so we are deprecating
     this property."""
    metric_id: Optional[str] = rest_field(name="metricId", visibility=["read"])
    """Azure Insights Metrics id."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """Time when the namespace was created."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """Time when the namespace was updated."""
    namespace_type: Optional[Union[str, "_models.NamespaceType"]] = rest_field(
        name="namespaceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Defines values for NamespaceType. Known values are: \"Messaging\" and \"NotificationHub\"."""
    replication_region: Optional[Union[str, "_models.ReplicationRegion"]] = rest_field(
        name="replicationRegion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Allowed replication region. Known values are: \"Default\", \"WestUs2\", \"NorthEurope\",
     \"AustraliaEast\", \"BrazilSouth\", \"SouthEastAsia\", \"SouthAfricaNorth\", and \"None\"."""
    zone_redundancy: Optional[Union[str, "_models.ZoneRedundancyPreference"]] = rest_field(
        name="zoneRedundancy", visibility=["read", "create"]
    )
    """Namespace SKU name. Known values are: \"Disabled\" and \"Enabled\"."""
    network_acls: Optional["_models.NetworkAcls"] = rest_field(
        name="networkAcls", visibility=["read", "create", "update", "delete", "query"]
    )
    """A collection of network authorization rules."""
    pns_credentials: Optional["_models.PnsCredentials"] = rest_field(
        name="pnsCredentials", visibility=["read", "create", "update", "delete", "query"]
    )
    """Collection of Notification Hub or Notification Hub Namespace PNS credentials."""
    service_bus_endpoint: Optional[str] = rest_field(name="serviceBusEndpoint", visibility=["read"])
    """Gets or sets endpoint you can use to perform NotificationHub
     operations."""
    private_endpoint_connections: Optional[List["_models.PrivateEndpointConnectionResource"]] = rest_field(
        name="privateEndpointConnections", visibility=["read"]
    )
    """Private Endpoint Connections for namespace."""
    scale_unit: Optional[str] = rest_field(name="scaleUnit", visibility=["read", "create"])
    """Gets or sets scaleUnit where the namespace gets created."""
    data_center: Optional[str] = rest_field(
        name="dataCenter", visibility=["read", "create", "update", "delete", "query"]
    )
    """Deprecated."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of public network access. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.OperationProvisioningState"]] = None,
        status: Optional[Union[str, "_models.NamespaceStatus"]] = None,
        namespace_type: Optional[Union[str, "_models.NamespaceType"]] = None,
        replication_region: Optional[Union[str, "_models.ReplicationRegion"]] = None,
        zone_redundancy: Optional[Union[str, "_models.ZoneRedundancyPreference"]] = None,
        network_acls: Optional["_models.NetworkAcls"] = None,
        pns_credentials: Optional["_models.PnsCredentials"] = None,
        scale_unit: Optional[str] = None,
        data_center: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NamespaceResource(TrackedResource):
    """Notification Hubs Namespace Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar sku: The Sku description for a namespace. Required.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    :ivar properties: Represents namespace properties.
    :vartype properties: ~azure.mgmt.notificationhubs.models.NamespaceProperties
    """

    sku: "_models.Sku" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace. Required."""
    properties: Optional["_models.NamespaceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents namespace properties."""

    __flattened_items = [
        "name",
        "provisioning_state",
        "status",
        "enabled",
        "critical",
        "subscription_id",
        "region",
        "metric_id",
        "created_at",
        "updated_at",
        "namespace_type",
        "replication_region",
        "zone_redundancy",
        "network_acls",
        "pns_credentials",
        "service_bus_endpoint",
        "private_endpoint_connections",
        "scale_unit",
        "data_center",
        "public_network_access",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        sku: "_models.Sku",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.NamespaceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NetworkAcls(_Model):
    """A collection of network authorization rules.

    :ivar ip_rules: List of IP rules.
    :vartype ip_rules: list[~azure.mgmt.notificationhubs.models.IpRule]
    :ivar public_network_rule: A default (public Internet) network authorization rule, which
     contains rights if no other network rule matches.
    :vartype public_network_rule:
     ~azure.mgmt.notificationhubs.models.PublicInternetAuthorizationRule
    """

    ip_rules: Optional[List["_models.IpRule"]] = rest_field(
        name="ipRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of IP rules."""
    public_network_rule: Optional["_models.PublicInternetAuthorizationRule"] = rest_field(
        name="publicNetworkRule", visibility=["read", "create", "update", "delete", "query"]
    )
    """A default (public Internet) network authorization rule, which contains rights if no other
     network rule matches."""

    @overload
    def __init__(
        self,
        *,
        ip_rules: Optional[List["_models.IpRule"]] = None,
        public_network_rule: Optional["_models.PublicInternetAuthorizationRule"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationHubPatchParameters(_Model):
    """Patch parameter for NamespaceResource.

    :ivar properties: NotificationHub properties.
    :vartype properties: ~azure.mgmt.notificationhubs.models.NotificationHubProperties
    :ivar sku: The Sku description for a namespace.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    :ivar tags: Dictionary of <string>.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.NotificationHubProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """NotificationHub properties."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of <string>."""

    __flattened_items = [
        "name",
        "registration_ttl",
        "authorization_rules",
        "apns_credential",
        "wns_credential",
        "gcm_credential",
        "mpns_credential",
        "adm_credential",
        "baidu_credential",
        "browser_credential",
        "xiaomi_credential",
        "fcm_v1_credential",
        "daily_max_active_devices",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NotificationHubProperties"] = None,
        sku: Optional["_models.Sku"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NotificationHubProperties(_Model):
    """NotificationHub properties.

    :ivar name: Gets or sets the NotificationHub name.
    :vartype name: str
    :ivar registration_ttl: Gets or sets the RegistrationTtl of the created NotificationHub.
    :vartype registration_ttl: str
    :ivar authorization_rules: Gets or sets the AuthorizationRules of the created NotificationHub.
    :vartype authorization_rules:
     list[~azure.mgmt.notificationhubs.models.SharedAccessAuthorizationRuleProperties]
    :ivar apns_credential: Description of a NotificationHub ApnsCredential.
    :vartype apns_credential: ~azure.mgmt.notificationhubs.models.ApnsCredential
    :ivar wns_credential: Description of a NotificationHub WnsCredential.
    :vartype wns_credential: ~azure.mgmt.notificationhubs.models.WnsCredential
    :ivar gcm_credential: Description of a NotificationHub GcmCredential.
    :vartype gcm_credential: ~azure.mgmt.notificationhubs.models.GcmCredential
    :ivar mpns_credential: Description of a NotificationHub MpnsCredential.
    :vartype mpns_credential: ~azure.mgmt.notificationhubs.models.MpnsCredential
    :ivar adm_credential: Description of a NotificationHub AdmCredential.
    :vartype adm_credential: ~azure.mgmt.notificationhubs.models.AdmCredential
    :ivar baidu_credential: Description of a NotificationHub BaiduCredential.
    :vartype baidu_credential: ~azure.mgmt.notificationhubs.models.BaiduCredential
    :ivar browser_credential: Description of a NotificationHub BrowserCredential.
    :vartype browser_credential: ~azure.mgmt.notificationhubs.models.BrowserCredential
    :ivar xiaomi_credential: Description of a NotificationHub XiaomiCredential.
    :vartype xiaomi_credential: ~azure.mgmt.notificationhubs.models.XiaomiCredential
    :ivar fcm_v1_credential: Description of a NotificationHub FcmV1Credential.
    :vartype fcm_v1_credential: ~azure.mgmt.notificationhubs.models.FcmV1Credential
    :ivar daily_max_active_devices:
    :vartype daily_max_active_devices: int
    """

    name: Optional[str] = rest_field(visibility=["read", "create"])
    """Gets or sets the NotificationHub name."""
    registration_ttl: Optional[str] = rest_field(
        name="registrationTtl", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the RegistrationTtl of the created NotificationHub."""
    authorization_rules: Optional[List["_models.SharedAccessAuthorizationRuleProperties"]] = rest_field(
        name="authorizationRules", visibility=["read"]
    )
    """Gets or sets the AuthorizationRules of the created NotificationHub."""
    apns_credential: Optional["_models.ApnsCredential"] = rest_field(
        name="apnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub ApnsCredential."""
    wns_credential: Optional["_models.WnsCredential"] = rest_field(
        name="wnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub WnsCredential."""
    gcm_credential: Optional["_models.GcmCredential"] = rest_field(
        name="gcmCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub GcmCredential."""
    mpns_credential: Optional["_models.MpnsCredential"] = rest_field(
        name="mpnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub MpnsCredential."""
    adm_credential: Optional["_models.AdmCredential"] = rest_field(
        name="admCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub AdmCredential."""
    baidu_credential: Optional["_models.BaiduCredential"] = rest_field(
        name="baiduCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BaiduCredential."""
    browser_credential: Optional["_models.BrowserCredential"] = rest_field(
        name="browserCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BrowserCredential."""
    xiaomi_credential: Optional["_models.XiaomiCredential"] = rest_field(
        name="xiaomiCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub XiaomiCredential."""
    fcm_v1_credential: Optional["_models.FcmV1Credential"] = rest_field(
        name="fcmV1Credential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub FcmV1Credential."""
    daily_max_active_devices: Optional[int] = rest_field(name="dailyMaxActiveDevices", visibility=["read"])

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        registration_ttl: Optional[str] = None,
        apns_credential: Optional["_models.ApnsCredential"] = None,
        wns_credential: Optional["_models.WnsCredential"] = None,
        gcm_credential: Optional["_models.GcmCredential"] = None,
        mpns_credential: Optional["_models.MpnsCredential"] = None,
        adm_credential: Optional["_models.AdmCredential"] = None,
        baidu_credential: Optional["_models.BaiduCredential"] = None,
        browser_credential: Optional["_models.BrowserCredential"] = None,
        xiaomi_credential: Optional["_models.XiaomiCredential"] = None,
        fcm_v1_credential: Optional["_models.FcmV1Credential"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationHubResource(TrackedResource):
    """Notification Hub Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: NotificationHub properties.
    :vartype properties: ~azure.mgmt.notificationhubs.models.NotificationHubProperties
    :ivar sku: The Sku description for a namespace.
    :vartype sku: ~azure.mgmt.notificationhubs.models.Sku
    """

    properties: Optional["_models.NotificationHubProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """NotificationHub properties."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Sku description for a namespace."""

    __flattened_items = [
        "name",
        "registration_ttl",
        "authorization_rules",
        "apns_credential",
        "wns_credential",
        "gcm_credential",
        "mpns_credential",
        "adm_credential",
        "baidu_credential",
        "browser_credential",
        "xiaomi_credential",
        "fcm_v1_credential",
        "daily_max_active_devices",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.NotificationHubProperties"] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Operation(_Model):
    """Result of the request to list SQL operations.

    :ivar name: The name of the operation being performed on this particular object.".
    :vartype name: str
    :ivar display: he localized display information for this particular operation / action.
    :vartype display: ~azure.mgmt.notificationhubs.models.OperationDisplay
    :ivar is_data_action: The intended executor of the operation.".
    :vartype is_data_action: bool
    :ivar properties: Additional descriptions for the operation.
    :vartype properties: ~azure.mgmt.notificationhubs.models.OperationProperties
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation being performed on this particular object.\"."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """he localized display information for this particular operation / action."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """The intended executor of the operation.\"."""
    properties: Optional["_models.OperationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional descriptions for the operation."""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        properties: Optional["_models.OperationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """OperationDisplay.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OperationProperties(_Model):
    """Optional operation properties.

    :ivar service_specification: Optional service specification used in Operations API.
    :vartype service_specification: ~azure.mgmt.notificationhubs.models.ServiceSpecification
    """

    service_specification: Optional["_models.ServiceSpecification"] = rest_field(
        name="serviceSpecification", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional service specification used in Operations API."""

    @overload
    def __init__(
        self,
        *,
        service_specification: Optional["_models.ServiceSpecification"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PnsCredentials(_Model):
    """Collection of Notification Hub or Notification Hub Namespace PNS credentials.

    :ivar adm_credential: Description of a NotificationHub AdmCredential.
    :vartype adm_credential: ~azure.mgmt.notificationhubs.models.AdmCredential
    :ivar apns_credential: Description of a NotificationHub ApnsCredential.
    :vartype apns_credential: ~azure.mgmt.notificationhubs.models.ApnsCredential
    :ivar baidu_credential: Description of a NotificationHub BaiduCredential.
    :vartype baidu_credential: ~azure.mgmt.notificationhubs.models.BaiduCredential
    :ivar browser_credential: Description of a NotificationHub BrowserCredential.
    :vartype browser_credential: ~azure.mgmt.notificationhubs.models.BrowserCredential
    :ivar gcm_credential: Description of a NotificationHub GcmCredential.
    :vartype gcm_credential: ~azure.mgmt.notificationhubs.models.GcmCredential
    :ivar mpns_credential: Description of a NotificationHub MpnsCredential.
    :vartype mpns_credential: ~azure.mgmt.notificationhubs.models.MpnsCredential
    :ivar wns_credential: Description of a NotificationHub WnsCredential.
    :vartype wns_credential: ~azure.mgmt.notificationhubs.models.WnsCredential
    :ivar xiaomi_credential: Description of a NotificationHub XiaomiCredential.
    :vartype xiaomi_credential: ~azure.mgmt.notificationhubs.models.XiaomiCredential
    :ivar fcm_v1_credential: Description of a NotificationHub FcmV1Credential.
    :vartype fcm_v1_credential: ~azure.mgmt.notificationhubs.models.FcmV1Credential
    """

    adm_credential: Optional["_models.AdmCredential"] = rest_field(
        name="admCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub AdmCredential."""
    apns_credential: Optional["_models.ApnsCredential"] = rest_field(
        name="apnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub ApnsCredential."""
    baidu_credential: Optional["_models.BaiduCredential"] = rest_field(
        name="baiduCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BaiduCredential."""
    browser_credential: Optional["_models.BrowserCredential"] = rest_field(
        name="browserCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub BrowserCredential."""
    gcm_credential: Optional["_models.GcmCredential"] = rest_field(
        name="gcmCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub GcmCredential."""
    mpns_credential: Optional["_models.MpnsCredential"] = rest_field(
        name="mpnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub MpnsCredential."""
    wns_credential: Optional["_models.WnsCredential"] = rest_field(
        name="wnsCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub WnsCredential."""
    xiaomi_credential: Optional["_models.XiaomiCredential"] = rest_field(
        name="xiaomiCredential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub XiaomiCredential."""
    fcm_v1_credential: Optional["_models.FcmV1Credential"] = rest_field(
        name="fcmV1Credential", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub FcmV1Credential."""

    @overload
    def __init__(
        self,
        *,
        adm_credential: Optional["_models.AdmCredential"] = None,
        apns_credential: Optional["_models.ApnsCredential"] = None,
        baidu_credential: Optional["_models.BaiduCredential"] = None,
        browser_credential: Optional["_models.BrowserCredential"] = None,
        gcm_credential: Optional["_models.GcmCredential"] = None,
        mpns_credential: Optional["_models.MpnsCredential"] = None,
        wns_credential: Optional["_models.WnsCredential"] = None,
        xiaomi_credential: Optional["_models.XiaomiCredential"] = None,
        fcm_v1_credential: Optional["_models.FcmV1Credential"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PnsCredentialsResource(ProxyResource):
    """Description of a NotificationHub PNS Credentials. This is a response of the POST requests that
    return namespace or hubs
    PNS credentials.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar properties: Collection of Notification Hub or Notification Hub Namespace PNS credentials.
    :vartype properties: ~azure.mgmt.notificationhubs.models.PnsCredentials
    :ivar location: Deprecated - only for compatibility.
    :vartype location: str
    :ivar tags: Deprecated - only for compatibility.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.PnsCredentials"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Collection of Notification Hub or Notification Hub Namespace PNS credentials."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """Deprecated - only for compatibility."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Deprecated - only for compatibility."""

    __flattened_items = [
        "adm_credential",
        "apns_credential",
        "baidu_credential",
        "browser_credential",
        "gcm_credential",
        "mpns_credential",
        "wns_credential",
        "xiaomi_credential",
        "fcm_v1_credential",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PnsCredentials"] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PolicyKeyResource(_Model):
    """Namespace / NotificationHub Regenerate Keys request.

    :ivar policy_key: Type of Shared Access Policy Key (primary or secondary). Required. Known
     values are: "PrimaryKey" and "SecondaryKey".
    :vartype policy_key: str or ~azure.mgmt.notificationhubs.models.PolicyKeyType
    """

    policy_key: Union[str, "_models.PolicyKeyType"] = rest_field(
        name="policyKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of Shared Access Policy Key (primary or secondary). Required. Known values are:
     \"PrimaryKey\" and \"SecondaryKey\"."""

    @overload
    def __init__(
        self,
        *,
        policy_key: Union[str, "_models.PolicyKeyType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnectionProperties(_Model):
    """Private Endpoint Connection properties.

    :ivar provisioning_state: State of Private Endpoint Connection. Known values are: "Unknown",
     "Succeeded", "Creating", "Updating", "UpdatingByProxy", "Deleting", "DeletingByProxy", and
     "Deleted".
    :vartype provisioning_state: str or
     ~azure.mgmt.notificationhubs.models.PrivateEndpointConnectionProvisioningState
    :ivar private_endpoint: Represents a Private Endpoint that is connected to Notification Hubs
     namespace using Private Endpoint Connection.
    :vartype private_endpoint: ~azure.mgmt.notificationhubs.models.RemotePrivateEndpointConnection
    :ivar group_ids: List of group ids. For Notification Hubs, it always contains a single
     "namespace" element.
    :vartype group_ids: list[str]
    :ivar private_link_service_connection_state: State of the Private Link Service connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.notificationhubs.models.RemotePrivateLinkServiceConnectionState
    """

    provisioning_state: Optional[Union[str, "_models.PrivateEndpointConnectionProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read", "create", "update", "delete", "query"]
    )
    """State of Private Endpoint Connection. Known values are: \"Unknown\", \"Succeeded\",
     \"Creating\", \"Updating\", \"UpdatingByProxy\", \"Deleting\", \"DeletingByProxy\", and
     \"Deleted\"."""
    private_endpoint: Optional["_models.RemotePrivateEndpointConnection"] = rest_field(
        name="privateEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents a Private Endpoint that is connected to Notification Hubs namespace using Private
     Endpoint Connection."""
    group_ids: Optional[List[str]] = rest_field(name="groupIds", visibility=["read"])
    """List of group ids. For Notification Hubs, it always contains a single \"namespace\" element."""
    private_link_service_connection_state: Optional["_models.RemotePrivateLinkServiceConnectionState"] = rest_field(
        name="privateLinkServiceConnectionState", visibility=["read", "create", "update", "delete", "query"]
    )
    """State of the Private Link Service connection."""

    @overload
    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.PrivateEndpointConnectionProvisioningState"]] = None,
        private_endpoint: Optional["_models.RemotePrivateEndpointConnection"] = None,
        private_link_service_connection_state: Optional["_models.RemotePrivateLinkServiceConnectionState"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnectionResource(ProxyResource):
    """Represents a Private Endpoint Connection ARM resource - a sub-resource of Notification Hubs
    namespace.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar properties: Private Endpoint Connection properties.
    :vartype properties: ~azure.mgmt.notificationhubs.models.PrivateEndpointConnectionProperties
    """

    properties: Optional["_models.PrivateEndpointConnectionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Private Endpoint Connection properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateEndpointConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResource(ProxyResource):
    """A Private Link Arm Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar properties: Represents properties of Private Link Resource.
    :vartype properties: ~azure.mgmt.notificationhubs.models.PrivateLinkResourceProperties
    """

    properties: Optional["_models.PrivateLinkResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents properties of Private Link Resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateLinkResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResourceProperties(_Model):
    """Represents properties of Private Link Resource.

    :ivar group_id: A Group Id for Private Link. For Notification Hubs, it is always set to
     "namespace".
    :vartype group_id: str
    :ivar required_members: Required members. For Notification Hubs, it's always a collection with
     a single "namespace" item.
    :vartype required_members: list[str]
    :ivar required_zone_names: Required DNS zone names. For Notification Hubs, it contains two
     CNames for Service Bus and Notification Hubs zones.
    :vartype required_zone_names: list[str]
    """

    group_id: Optional[str] = rest_field(name="groupId", visibility=["read"])
    """A Group Id for Private Link. For Notification Hubs, it is always set to \"namespace\"."""
    required_members: Optional[List[str]] = rest_field(name="requiredMembers", visibility=["read"])
    """Required members. For Notification Hubs, it's always a collection with a single \"namespace\"
     item."""
    required_zone_names: Optional[List[str]] = rest_field(name="requiredZoneNames", visibility=["read"])
    """Required DNS zone names. For Notification Hubs, it contains two CNames for Service Bus and
     Notification Hubs zones."""


class PublicInternetAuthorizationRule(_Model):
    """A default (public Internet) network authorization rule, which contains rights if no other
    network rule matches.

    :ivar rights: List of access rights. Required.
    :vartype rights: list[str or ~azure.mgmt.notificationhubs.models.AccessRights]
    """

    rights: List[Union[str, "_models.AccessRights"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of access rights. Required."""

    @overload
    def __init__(
        self,
        *,
        rights: List[Union[str, "_models.AccessRights"]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistrationResult(_Model):
    """Notification result for a single registration.

    :ivar application_platform: PNS type.
    :vartype application_platform: str
    :ivar pns_handle: PNS handle.
    :vartype pns_handle: str
    :ivar registration_id: Registration id.
    :vartype registration_id: str
    :ivar outcome: Notification outcome.
    :vartype outcome: str
    """

    application_platform: Optional[str] = rest_field(name="applicationPlatform", visibility=["read"])
    """PNS type."""
    pns_handle: Optional[str] = rest_field(name="pnsHandle", visibility=["read"])
    """PNS handle."""
    registration_id: Optional[str] = rest_field(name="registrationId", visibility=["read"])
    """Registration id."""
    outcome: Optional[str] = rest_field(visibility=["read"])
    """Notification outcome."""


class RemotePrivateEndpointConnection(_Model):
    """Represents a Private Endpoint that is connected to Notification Hubs namespace using Private
    Endpoint Connection.

    :ivar id: ARM resource ID of the Private Endpoint. This may belong to different subscription
     and resource group than a Notification Hubs namespace.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """ARM resource ID of the Private Endpoint. This may belong to different subscription and resource
     group than a Notification Hubs namespace."""


class RemotePrivateLinkServiceConnectionState(_Model):
    """State of the Private Link Service connection.

    :ivar status: State of Private Link Connection. Known values are: "Disconnected", "Pending",
     "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.notificationhubs.models.PrivateLinkConnectionStatus
    :ivar description: Human-friendly description.
    :vartype description: str
    :ivar actions_required: Human-friendly description of required actions.
    :vartype actions_required: str
    """

    status: Optional[Union[str, "_models.PrivateLinkConnectionStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """State of Private Link Connection. Known values are: \"Disconnected\", \"Pending\",
     \"Approved\", and \"Rejected\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Human-friendly description."""
    actions_required: Optional[str] = rest_field(name="actionsRequired", visibility=["read"])
    """Human-friendly description of required actions."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateLinkConnectionStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceListKeys(_Model):
    """Response for the POST request that returns Namespace or NotificationHub access keys (connection
    strings).

    :ivar primary_connection_string: Gets or sets primaryConnectionString of the AuthorizationRule.
    :vartype primary_connection_string: str
    :ivar secondary_connection_string: Gets or sets secondaryConnectionString of the created
     AuthorizationRule.
    :vartype secondary_connection_string: str
    :ivar primary_key: Gets or sets primaryKey of the created AuthorizationRule.
    :vartype primary_key: str
    :ivar secondary_key: Gets or sets secondaryKey of the created AuthorizationRule.
    :vartype secondary_key: str
    :ivar key_name: Gets or sets keyName of the created AuthorizationRule.
    :vartype key_name: str
    """

    primary_connection_string: Optional[str] = rest_field(name="primaryConnectionString", visibility=["read"])
    """Gets or sets primaryConnectionString of the AuthorizationRule."""
    secondary_connection_string: Optional[str] = rest_field(name="secondaryConnectionString", visibility=["read"])
    """Gets or sets secondaryConnectionString of the created
     AuthorizationRule."""
    primary_key: Optional[str] = rest_field(name="primaryKey", visibility=["read"])
    """Gets or sets primaryKey of the created AuthorizationRule."""
    secondary_key: Optional[str] = rest_field(name="secondaryKey", visibility=["read"])
    """Gets or sets secondaryKey of the created AuthorizationRule."""
    key_name: Optional[str] = rest_field(name="keyName", visibility=["read"])
    """Gets or sets keyName of the created AuthorizationRule."""


class ServiceSpecification(_Model):
    """Optional service specification used in Operations API.

    :ivar log_specifications: Log specifications.
    :vartype log_specifications: list[~azure.mgmt.notificationhubs.models.LogSpecification]
    :ivar metric_specifications: Metric specification.
    :vartype metric_specifications: list[~azure.mgmt.notificationhubs.models.MetricSpecification]
    """

    log_specifications: Optional[List["_models.LogSpecification"]] = rest_field(
        name="logSpecifications", visibility=["read"]
    )
    """Log specifications."""
    metric_specifications: Optional[List["_models.MetricSpecification"]] = rest_field(
        name="metricSpecifications", visibility=["read"]
    )
    """Metric specification."""


class SharedAccessAuthorizationRuleProperties(_Model):
    """SharedAccessAuthorizationRule properties.

    :ivar rights: Gets or sets the rights associated with the rule. Required.
    :vartype rights: list[str or ~azure.mgmt.notificationhubs.models.AccessRights]
    :ivar primary_key: Gets a base64-encoded 256-bit primary key for signing and
     validating the SAS token.
    :vartype primary_key: str
    :ivar secondary_key: Gets a base64-encoded 256-bit primary key for signing and
     validating the SAS token.
    :vartype secondary_key: str
    :ivar key_name: Gets a string that describes the authorization rule.
    :vartype key_name: str
    :ivar modified_time: Gets the last modified time for this rule.
    :vartype modified_time: ~datetime.datetime
    :ivar created_time: Gets the created time for this rule.
    :vartype created_time: ~datetime.datetime
    :ivar claim_type: Gets a string that describes the claim type.
    :vartype claim_type: str
    :ivar claim_value: Gets a string that describes the claim value.
    :vartype claim_value: str
    :ivar revision: Gets the revision number for the rule.
    :vartype revision: int
    """

    rights: List[Union[str, "_models.AccessRights"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the rights associated with the rule. Required."""
    primary_key: Optional[str] = rest_field(
        name="primaryKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets a base64-encoded 256-bit primary key for signing and
     validating the SAS token."""
    secondary_key: Optional[str] = rest_field(
        name="secondaryKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets a base64-encoded 256-bit primary key for signing and
     validating the SAS token."""
    key_name: Optional[str] = rest_field(name="keyName", visibility=["read"])
    """Gets a string that describes the authorization rule."""
    modified_time: Optional[datetime.datetime] = rest_field(name="modifiedTime", visibility=["read"], format="rfc3339")
    """Gets the last modified time for this rule."""
    created_time: Optional[datetime.datetime] = rest_field(name="createdTime", visibility=["read"], format="rfc3339")
    """Gets the created time for this rule."""
    claim_type: Optional[str] = rest_field(name="claimType", visibility=["read"])
    """Gets a string that describes the claim type."""
    claim_value: Optional[str] = rest_field(name="claimValue", visibility=["read"])
    """Gets a string that describes the claim value."""
    revision: Optional[int] = rest_field(visibility=["read"])
    """Gets the revision number for the rule."""

    @overload
    def __init__(
        self,
        *,
        rights: List[Union[str, "_models.AccessRights"]],
        primary_key: Optional[str] = None,
        secondary_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedAccessAuthorizationRuleResource(ProxyResource):
    """Response for POST requests that return single SharedAccessAuthorizationRule.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.notificationhubs.models.SystemData
    :ivar properties: SharedAccessAuthorizationRule properties.
    :vartype properties:
     ~azure.mgmt.notificationhubs.models.SharedAccessAuthorizationRuleProperties
    :ivar location:
    :vartype location: str
    :ivar tags:
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.SharedAccessAuthorizationRuleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """SharedAccessAuthorizationRule properties."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    __flattened_items = [
        "rights",
        "primary_key",
        "secondary_key",
        "key_name",
        "modified_time",
        "created_time",
        "claim_type",
        "claim_value",
        "revision",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SharedAccessAuthorizationRuleProperties"] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Sku(_Model):
    """The Sku description for a namespace.

    :ivar name: Namespace SKU name. Required. Known values are: "Free", "Basic", and "Standard".
    :vartype name: str or ~azure.mgmt.notificationhubs.models.SkuName
    :ivar tier: Gets or sets the tier of particular sku.
    :vartype tier: str
    :ivar size: Gets or sets the Sku size.
    :vartype size: str
    :ivar family: Gets or sets the Sku Family.
    :vartype family: str
    :ivar capacity: Gets or sets the capacity of the resource.
    :vartype capacity: int
    """

    name: Union[str, "_models.SkuName"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Namespace SKU name. Required. Known values are: \"Free\", \"Basic\", and \"Standard\"."""
    tier: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the tier of particular sku."""
    size: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the Sku size."""
    family: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the Sku Family."""
    capacity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the capacity of the resource."""

    @overload
    def __init__(
        self,
        *,
        name: Union[str, "_models.SkuName"],
        tier: Optional[str] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.notificationhubs.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.notificationhubs.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WnsCredential(_Model):
    """Description of a NotificationHub WnsCredential.

    :ivar properties: Description of a NotificationHub WnsCredential. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.WnsCredentialProperties
    """

    properties: "_models.WnsCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub WnsCredential. Required."""

    __flattened_items = ["package_sid", "secret_key", "windows_live_endpoint", "certificate_key", "wns_certificate"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.WnsCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class WnsCredentialProperties(_Model):
    """Description of a NotificationHub WnsCredential.

    :ivar package_sid: Gets or sets the package ID for this credential.
    :vartype package_sid: str
    :ivar secret_key: Gets or sets the secret key.
    :vartype secret_key: str
    :ivar windows_live_endpoint: Gets or sets the Windows Live endpoint.
    :vartype windows_live_endpoint: str
    :ivar certificate_key: Ges or sets the WNS Certificate Key.
    :vartype certificate_key: str
    :ivar wns_certificate: Gets or sets the WNS Certificate.
    :vartype wns_certificate: str
    """

    package_sid: Optional[str] = rest_field(
        name="packageSid", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the package ID for this credential."""
    secret_key: Optional[str] = rest_field(name="secretKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the secret key."""
    windows_live_endpoint: Optional[str] = rest_field(
        name="windowsLiveEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the Windows Live endpoint."""
    certificate_key: Optional[str] = rest_field(
        name="certificateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Ges or sets the WNS Certificate Key."""
    wns_certificate: Optional[str] = rest_field(
        name="wnsCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets the WNS Certificate."""

    @overload
    def __init__(
        self,
        *,
        package_sid: Optional[str] = None,
        secret_key: Optional[str] = None,
        windows_live_endpoint: Optional[str] = None,
        certificate_key: Optional[str] = None,
        wns_certificate: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class XiaomiCredential(_Model):
    """Description of a NotificationHub XiaomiCredential.

    :ivar properties: Description of a NotificationHub XiaomiCredentialProperties. Required.
    :vartype properties: ~azure.mgmt.notificationhubs.models.XiaomiCredentialProperties
    """

    properties: "_models.XiaomiCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of a NotificationHub XiaomiCredentialProperties. Required."""

    __flattened_items = ["app_secret", "endpoint"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.XiaomiCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class XiaomiCredentialProperties(_Model):
    """Description of a NotificationHub XiaomiCredentialProperties.

    :ivar app_secret: Gets or sets app secret.
    :vartype app_secret: str
    :ivar endpoint: Gets or sets xiaomi service endpoint.
    :vartype endpoint: str
    """

    app_secret: Optional[str] = rest_field(name="appSecret", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets app secret."""
    endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets xiaomi service endpoint."""

    @overload
    def __init__(
        self,
        *,
        app_secret: Optional[str] = None,
        endpoint: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
