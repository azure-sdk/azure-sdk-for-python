# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.notificationhubs.aio import NotificationHubsClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNotificationHubsNamespaceResourcesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NotificationHubsClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_get(self, resource_group):
        response = await self.client.namespace_resources.get(
            resource_group_name=resource_group.name,
            namespace_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.namespace_resources.begin_create_or_update(
                resource_group_name=resource_group.name,
                namespace_name="str",
                parameters={
                    "location": "str",
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "createdAt": "2020-02-20 00:00:00",
                        "critical": bool,
                        "dataCenter": "str",
                        "enabled": bool,
                        "metricId": "str",
                        "name": "str",
                        "namespaceType": "str",
                        "networkAcls": {
                            "ipRules": [{"ipMask": "str", "rights": ["str"]}],
                            "publicNetworkRule": {"rights": ["str"]},
                        },
                        "pnsCredentials": {
                            "admCredential": {
                                "properties": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"}
                            },
                            "apnsCredential": {
                                "properties": {
                                    "endpoint": "str",
                                    "apnsCertificate": "str",
                                    "appId": "str",
                                    "appName": "str",
                                    "certificateKey": "str",
                                    "keyId": "str",
                                    "thumbprint": "str",
                                    "token": "str",
                                }
                            },
                            "baiduCredential": {
                                "properties": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"}
                            },
                            "browserCredential": {
                                "properties": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"}
                            },
                            "fcmV1Credential": {
                                "properties": {"clientEmail": "str", "privateKey": "str", "projectId": "str"}
                            },
                            "gcmCredential": {"properties": {"googleApiKey": "str", "gcmEndpoint": "str"}},
                            "mpnsCredential": {
                                "properties": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"}
                            },
                            "wnsCredential": {
                                "properties": {
                                    "certificateKey": "str",
                                    "packageSid": "str",
                                    "secretKey": "str",
                                    "windowsLiveEndpoint": "str",
                                    "wnsCertificate": "str",
                                }
                            },
                            "xiaomiCredential": {"properties": {"appSecret": "str", "endpoint": "str"}},
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",
                                "name": "str",
                                "properties": {
                                    "groupIds": ["str"],
                                    "privateEndpoint": {"id": "str"},
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",
                                        "description": "str",
                                        "status": "str",
                                    },
                                    "provisioningState": "str",
                                },
                                "systemData": {
                                    "createdAt": "2020-02-20 00:00:00",
                                    "createdBy": "str",
                                    "createdByType": "str",
                                    "lastModifiedAt": "2020-02-20 00:00:00",
                                    "lastModifiedBy": "str",
                                    "lastModifiedByType": "str",
                                },
                                "type": "str",
                            }
                        ],
                        "provisioningState": "str",
                        "publicNetworkAccess": "str",
                        "region": "str",
                        "replicationRegion": "str",
                        "scaleUnit": "str",
                        "serviceBusEndpoint": "str",
                        "status": "str",
                        "subscriptionId": "str",
                        "updatedAt": "2020-02-20 00:00:00",
                        "zoneRedundancy": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_update(self, resource_group):
        response = await self.client.namespace_resources.update(
            resource_group_name=resource_group.name,
            namespace_name="str",
            parameters={
                "properties": {
                    "createdAt": "2020-02-20 00:00:00",
                    "critical": bool,
                    "dataCenter": "str",
                    "enabled": bool,
                    "metricId": "str",
                    "name": "str",
                    "namespaceType": "str",
                    "networkAcls": {
                        "ipRules": [{"ipMask": "str", "rights": ["str"]}],
                        "publicNetworkRule": {"rights": ["str"]},
                    },
                    "pnsCredentials": {
                        "admCredential": {
                            "properties": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"}
                        },
                        "apnsCredential": {
                            "properties": {
                                "endpoint": "str",
                                "apnsCertificate": "str",
                                "appId": "str",
                                "appName": "str",
                                "certificateKey": "str",
                                "keyId": "str",
                                "thumbprint": "str",
                                "token": "str",
                            }
                        },
                        "baiduCredential": {
                            "properties": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"}
                        },
                        "browserCredential": {
                            "properties": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"}
                        },
                        "fcmV1Credential": {
                            "properties": {"clientEmail": "str", "privateKey": "str", "projectId": "str"}
                        },
                        "gcmCredential": {"properties": {"googleApiKey": "str", "gcmEndpoint": "str"}},
                        "mpnsCredential": {
                            "properties": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"}
                        },
                        "wnsCredential": {
                            "properties": {
                                "certificateKey": "str",
                                "packageSid": "str",
                                "secretKey": "str",
                                "windowsLiveEndpoint": "str",
                                "wnsCertificate": "str",
                            }
                        },
                        "xiaomiCredential": {"properties": {"appSecret": "str", "endpoint": "str"}},
                    },
                    "privateEndpointConnections": [
                        {
                            "id": "str",
                            "name": "str",
                            "properties": {
                                "groupIds": ["str"],
                                "privateEndpoint": {"id": "str"},
                                "privateLinkServiceConnectionState": {
                                    "actionsRequired": "str",
                                    "description": "str",
                                    "status": "str",
                                },
                                "provisioningState": "str",
                            },
                            "systemData": {
                                "createdAt": "2020-02-20 00:00:00",
                                "createdBy": "str",
                                "createdByType": "str",
                                "lastModifiedAt": "2020-02-20 00:00:00",
                                "lastModifiedBy": "str",
                                "lastModifiedByType": "str",
                            },
                            "type": "str",
                        }
                    ],
                    "provisioningState": "str",
                    "publicNetworkAccess": "str",
                    "region": "str",
                    "replicationRegion": "str",
                    "scaleUnit": "str",
                    "serviceBusEndpoint": "str",
                    "status": "str",
                    "subscriptionId": "str",
                    "updatedAt": "2020-02-20 00:00:00",
                    "zoneRedundancy": "str",
                },
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_delete(self, resource_group):
        response = await self.client.namespace_resources.delete(
            resource_group_name=resource_group.name,
            namespace_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_list(self, resource_group):
        response = self.client.namespace_resources.list(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_list_all(self, resource_group):
        response = self.client.namespace_resources.list_all()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_check_notification_hub_availability(self, resource_group):
        response = await self.client.namespace_resources.check_notification_hub_availability(
            resource_group_name=resource_group.name,
            namespace_name="str",
            parameters={
                "name": "str",
                "id": "str",
                "isAvailiable": bool,
                "location": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_namespace_resources_get_pns_credentials(self, resource_group):
        response = await self.client.namespace_resources.get_pns_credentials(
            resource_group_name=resource_group.name,
            namespace_name="str",
        )

        # please add some check logic here by yourself
        # ...
