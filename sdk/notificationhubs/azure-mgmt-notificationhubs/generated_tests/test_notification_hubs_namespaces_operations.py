# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.notificationhubs import NotificationHubsClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNotificationHubsNamespacesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NotificationHubsClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_get_authorization_rule(self, resource_group):
        response = self.client.namespaces.get_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_create_or_update_authorization_rule(self, resource_group):
        response = self.client.namespaces.create_or_update_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            parameters={
                "id": "str",
                "location": "str",
                "name": "str",
                "properties": {
                    "rights": ["str"],
                    "claimType": "str",
                    "claimValue": "str",
                    "createdTime": "2020-02-20 00:00:00",
                    "keyName": "str",
                    "modifiedTime": "2020-02-20 00:00:00",
                    "primaryKey": "str",
                    "revision": 0,
                    "secondaryKey": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_delete_authorization_rule(self, resource_group):
        response = self.client.namespaces.delete_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_list_authorization_rules(self, resource_group):
        response = self.client.namespaces.list_authorization_rules(
            resource_group_name=resource_group.name,
            namespace_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_list_keys(self, resource_group):
        response = self.client.namespaces.list_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_namespaces_regenerate_keys(self, resource_group):
        response = self.client.namespaces.regenerate_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            parameters={"policyKey": "str"},
        )

        # please add some check logic here by yourself
        # ...
