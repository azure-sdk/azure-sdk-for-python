# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.advisor.aio import AdvisorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAdvisorManagementRecommendationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AdvisorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_recommendations_generate(self, resource_group):
        response = await self.client.recommendations.generate(
            api_version="2023-09-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_recommendations_get_generate_status(self, resource_group):
        response = await self.client.recommendations.get_generate_status(
            operation_id="str",
            api_version="2023-09-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_recommendations_list(self, resource_group):
        response = self.client.recommendations.list(
            api_version="2023-09-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_recommendations_get(self, resource_group):
        response = await self.client.recommendations.get(
            resource_uri="str",
            recommendation_id="str",
            api_version="2023-09-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_recommendations_patch(self, resource_group):
        response = await self.client.recommendations.patch(
            resource_uri="str",
            recommendation_id="str",
            tracked_properties={
                "properties": {
                    "trackedProperties": {
                        "postponedTime": "2020-02-20 00:00:00",
                        "priority": "str",
                        "reason": "str",
                        "state": "str",
                    }
                }
            },
            api_version="2023-09-01-preview",
        )

        # please add some check logic here by yourself
        # ...
