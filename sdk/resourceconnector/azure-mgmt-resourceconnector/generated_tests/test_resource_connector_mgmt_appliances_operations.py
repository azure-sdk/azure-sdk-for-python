# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.resourceconnector import ResourceConnectorMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestResourceConnectorMgmtAppliancesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ResourceConnectorMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_operations(self, resource_group):
        response = self.client.appliances.list_operations(
            api_version="2022-10-27",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_telemetry_config(self, resource_group):
        response = self.client.appliances.get_telemetry_config(
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.appliances.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2022-10-27",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.appliances.get(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.appliances.begin_create_or_update(
            resource_group_name=resource_group.name,
            resource_name="str",
            parameters={
                "location": "str",
                "distro": "AKSEdge",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "infrastructureConfig": {"provider": "str"},
                "name": "str",
                "provisioningState": "str",
                "publicKey": "str",
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "version": "str",
            },
            api_version="2022-10-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.appliances.begin_delete(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2022-10-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.appliances.update(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_cluster_user_credential(self, resource_group):
        response = self.client.appliances.list_cluster_user_credential(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_keys(self, resource_group):
        response = self.client.appliances.list_keys(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_upgrade_graph(self, resource_group):
        response = self.client.appliances.get_upgrade_graph(
            resource_group_name=resource_group.name,
            resource_name="str",
            upgrade_graph="str",
            api_version="2022-10-27",
        )

        # please add some check logic here by yourself
        # ...
