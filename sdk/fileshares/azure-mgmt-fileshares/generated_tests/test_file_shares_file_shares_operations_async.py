# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.fileshares.aio import FileSharesClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFileSharesFileSharesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(FileSharesClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_get(self, resource_group):
        response = await self.client.file_shares.get(
            resource_group_name=resource_group.name,
            resource_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.file_shares.begin_create_or_update(
                resource_group_name=resource_group.name,
                resource_name="str",
                resource={
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "hostName": "str",
                        "includedBurstIOPerSec": 0,
                        "maxBurstIOPerSecCredits": 0,
                        "mediaTier": "str",
                        "mountName": "str",
                        "nfsProtocolProperties": {"rootSquash": "str"},
                        "privateEndpointConnections": [
                            {
                                "id": "str",
                                "name": "str",
                                "properties": {
                                    "privateLinkServiceConnectionState": {
                                        "actionsRequired": "str",
                                        "description": "str",
                                        "status": "str",
                                    },
                                    "groupIds": ["str"],
                                    "privateEndpoint": {"id": "str"},
                                    "provisioningState": "str",
                                },
                                "systemData": {
                                    "createdAt": "2020-02-20 00:00:00",
                                    "createdBy": "str",
                                    "createdByType": "str",
                                    "lastModifiedAt": "2020-02-20 00:00:00",
                                    "lastModifiedBy": "str",
                                    "lastModifiedByType": "str",
                                },
                                "type": "str",
                            }
                        ],
                        "protocol": "str",
                        "provisionedIOPerSec": 0,
                        "provisionedIOPerSecNextAllowedDowngrade": "2020-02-20 00:00:00",
                        "provisionedStorageGiB": 0,
                        "provisionedStorageNextAllowedDowngrade": "2020-02-20 00:00:00",
                        "provisionedThroughputMiBPerSec": 0,
                        "provisionedThroughputNextAllowedDowngrade": "2020-02-20 00:00:00",
                        "provisioningState": "str",
                        "publicAccessProperties": {"allowedSubnets": ["str"]},
                        "publicNetworkAccess": "str",
                        "redundancy": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_begin_update(self, resource_group):
        response = await (
            await self.client.file_shares.begin_update(
                resource_group_name=resource_group.name,
                resource_name="str",
                properties={
                    "properties": {
                        "nfsProtocolProperties": {"rootSquash": "str"},
                        "provisionedIOPerSec": 0,
                        "provisionedStorageGiB": 0,
                        "provisionedThroughputMiBPerSec": 0,
                        "publicAccessProperties": {"allowedSubnets": ["str"]},
                        "publicNetworkAccess": "str",
                    },
                    "tags": {"str": "str"},
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_begin_delete(self, resource_group):
        response = await (
            await self.client.file_shares.begin_delete(
                resource_group_name=resource_group.name,
                resource_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_list_by_subscription(self, resource_group):
        response = self.client.file_shares.list_by_subscription()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_list_by_parent(self, resource_group):
        response = self.client.file_shares.list_by_parent(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_check_name_availability(self, resource_group):
        response = await self.client.file_shares.check_name_availability(
            location="str",
            body={"name": "str", "type": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_get_file_share_snapshot(self, resource_group):
        response = await self.client.file_shares.get_file_share_snapshot(
            resource_group_name=resource_group.name,
            resource_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_create_or_update_file_share_snapshot(self, resource_group):
        response = await self.client.file_shares.create_or_update_file_share_snapshot(
            resource_group_name=resource_group.name,
            resource_name="str",
            name="str",
            resource={
                "id": "str",
                "name": "str",
                "properties": {
                    "initiatorId": "str",
                    "metadata": {"str": "str"},
                    "provisioningState": "str",
                    "snapshotTime": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_begin_update_file_share_snapshot(self, resource_group):
        response = await (
            await self.client.file_shares.begin_update_file_share_snapshot(
                resource_group_name=resource_group.name,
                resource_name="str",
                name="str",
                properties={"properties": {"metadata": {"str": "str"}}},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_begin_delete_file_share_snapshot(self, resource_group):
        response = await (
            await self.client.file_shares.begin_delete_file_share_snapshot(
                resource_group_name=resource_group.name,
                resource_name="str",
                name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_file_shares_list_by_file_share(self, resource_group):
        response = self.client.file_shares.list_by_file_share(
            resource_group_name=resource_group.name,
            resource_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
