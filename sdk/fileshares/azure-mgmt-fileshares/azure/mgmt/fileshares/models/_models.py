# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class CheckNameAvailabilityRequest(_Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the resource for which availability needs to be checked."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityResponse(_Model):
    """The check availability result.

    :ivar name_available: Indicates if the resource name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the given name is not available. Known values are: "Invalid" and
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.fileshares.models.CheckNameAvailabilityReason
    :ivar message: Detailed reason why the given name is not available.
    :vartype message: str
    """

    name_available: Optional[bool] = rest_field(
        name="nameAvailable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates if the resource name is available."""
    reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The reason why the given name is not available. Known values are: \"Invalid\" and
     \"AlreadyExists\"."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Detailed reason why the given name is not available."""

    @overload
    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.fileshares.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.fileshares.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.fileshares.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShare(TrackedResource):
    """File share resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.fileshares.models.FileShareProperties
    """

    properties: Optional["_models.FileShareProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FileShareProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareProperties(_Model):
    """File share properties.

    :ivar mount_name: The name of the file share as seen by the end user when mounting the share,
     such as in a URI or UNC format in their operating system.
    :vartype mount_name: str
    :ivar host_name: The host name of the file share.
    :vartype host_name: str
    :ivar media_tier: The storage media tier of the file share. "SSD"
    :vartype media_tier: str or ~azure.mgmt.fileshares.models.MediaTier
    :ivar redundancy: The chosen redundancy level of the file share. Known values are: "Local" and
     "Zone".
    :vartype redundancy: str or ~azure.mgmt.fileshares.models.Redundancy
    :ivar protocol: The file sharing protocol for this file share. "NFS"
    :vartype protocol: str or ~azure.mgmt.fileshares.models.Protocol
    :ivar provisioned_storage_gi_b: The provisioned storage size of the share in GiB (1 GiB is
     1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned
     storage, regardless of the amount of used storage.
    :vartype provisioned_storage_gi_b: int
    :ivar provisioned_storage_next_allowed_downgrade: A date/time value that specifies when the
     provisioned storage for the file share is permitted to be reduced.
    :vartype provisioned_storage_next_allowed_downgrade: ~datetime.datetime
    :ivar provisioned_io_per_sec: The provisioned IO / sec of the share.
    :vartype provisioned_io_per_sec: int
    :ivar provisioned_io_per_sec_next_allowed_downgrade: A date/time value that specifies when the
     provisioned IOPS for the file share is permitted to be reduced.
    :vartype provisioned_io_per_sec_next_allowed_downgrade: ~datetime.datetime
    :ivar provisioned_throughput_mi_b_per_sec: The provisioned throughput / sec of the share.
    :vartype provisioned_throughput_mi_b_per_sec: int
    :ivar provisioned_throughput_next_allowed_downgrade: A date/time value that specifies when the
     provisioned throughput for the file share is permitted to be reduced.
    :vartype provisioned_throughput_next_allowed_downgrade: ~datetime.datetime
    :ivar included_burst_io_per_sec: Burst IOPS are extra buffer IOPS enabling you to consume more
     than your provisioned IOPS for a short period of time, depending on the burst credits available
     for your share.
    :vartype included_burst_io_per_sec: int
    :ivar max_burst_io_per_sec_credits: Max burst IOPS credits shows the maximum number of burst
     credits the share can have at the current IOPS provisioning level.
    :vartype max_burst_io_per_sec_credits: int
    :ivar nfs_protocol_properties: Protocol settings specific NFS.
    :vartype nfs_protocol_properties: ~azure.mgmt.fileshares.models.NfsProtocolProperties
    :ivar public_access_properties: The set of properties for control public access.
    :vartype public_access_properties: ~azure.mgmt.fileshares.models.PublicAccessProperties
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.fileshares.models.FileShareProvisioningState
    :ivar public_network_access: Gets or sets allow or disallow public network access to azure
     managed file share. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.fileshares.models.PublicNetworkAccess
    :ivar private_endpoint_connections: The list of associated private endpoint connections.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.fileshares.models.PrivateEndpointConnection]
    """

    mount_name: Optional[str] = rest_field(name="mountName", visibility=["read", "create"])
    """The name of the file share as seen by the end user when mounting the share, such as in a URI or
     UNC format in their operating system."""
    host_name: Optional[str] = rest_field(name="hostName", visibility=["read"])
    """The host name of the file share."""
    media_tier: Optional[Union[str, "_models.MediaTier"]] = rest_field(name="mediaTier", visibility=["read", "create"])
    """The storage media tier of the file share. \"SSD\""""
    redundancy: Optional[Union[str, "_models.Redundancy"]] = rest_field(visibility=["read", "create"])
    """The chosen redundancy level of the file share. Known values are: \"Local\" and \"Zone\"."""
    protocol: Optional[Union[str, "_models.Protocol"]] = rest_field(visibility=["read", "create"])
    """The file sharing protocol for this file share. \"NFS\""""
    provisioned_storage_gi_b: Optional[int] = rest_field(
        name="provisionedStorageGiB", visibility=["read", "create", "update"]
    )
    """The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A
     component of the file share's bill is the provisioned storage, regardless of the amount of used
     storage."""
    provisioned_storage_next_allowed_downgrade: Optional[datetime.datetime] = rest_field(
        name="provisionedStorageNextAllowedDowngrade", visibility=["read"], format="rfc3339"
    )
    """A date/time value that specifies when the provisioned storage for the file share is permitted
     to be reduced."""
    provisioned_io_per_sec: Optional[int] = rest_field(
        name="provisionedIOPerSec", visibility=["read", "create", "update"]
    )
    """The provisioned IO / sec of the share."""
    provisioned_io_per_sec_next_allowed_downgrade: Optional[datetime.datetime] = rest_field(
        name="provisionedIOPerSecNextAllowedDowngrade", visibility=["read"], format="rfc3339"
    )
    """A date/time value that specifies when the provisioned IOPS for the file share is permitted to
     be reduced."""
    provisioned_throughput_mi_b_per_sec: Optional[int] = rest_field(
        name="provisionedThroughputMiBPerSec", visibility=["read", "create", "update"]
    )
    """The provisioned throughput / sec of the share."""
    provisioned_throughput_next_allowed_downgrade: Optional[datetime.datetime] = rest_field(
        name="provisionedThroughputNextAllowedDowngrade", visibility=["read"], format="rfc3339"
    )
    """A date/time value that specifies when the provisioned throughput for the file share is
     permitted to be reduced."""
    included_burst_io_per_sec: Optional[int] = rest_field(name="includedBurstIOPerSec", visibility=["read"])
    """Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a
     short period of time, depending on the burst credits available for your share."""
    max_burst_io_per_sec_credits: Optional[int] = rest_field(name="maxBurstIOPerSecCredits", visibility=["read"])
    """Max burst IOPS credits shows the maximum number of burst credits the share can have at the
     current IOPS provisioning level."""
    nfs_protocol_properties: Optional["_models.NfsProtocolProperties"] = rest_field(
        name="nfsProtocolProperties", visibility=["read", "create", "update"]
    )
    """Protocol settings specific NFS."""
    public_access_properties: Optional["_models.PublicAccessProperties"] = rest_field(
        name="publicAccessProperties", visibility=["read", "create", "update"]
    )
    """The set of properties for control public access."""
    provisioning_state: Optional[Union[str, "_models.FileShareProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create", "update"]
    )
    """Gets or sets allow or disallow public network access to azure managed file share. Known values
     are: \"Enabled\" and \"Disabled\"."""
    private_endpoint_connections: Optional[List["_models.PrivateEndpointConnection"]] = rest_field(
        name="privateEndpointConnections", visibility=["read"]
    )
    """The list of associated private endpoint connections."""

    @overload
    def __init__(
        self,
        *,
        mount_name: Optional[str] = None,
        media_tier: Optional[Union[str, "_models.MediaTier"]] = None,
        redundancy: Optional[Union[str, "_models.Redundancy"]] = None,
        protocol: Optional[Union[str, "_models.Protocol"]] = None,
        provisioned_storage_gi_b: Optional[int] = None,
        provisioned_io_per_sec: Optional[int] = None,
        provisioned_throughput_mi_b_per_sec: Optional[int] = None,
        nfs_protocol_properties: Optional["_models.NfsProtocolProperties"] = None,
        public_access_properties: Optional["_models.PublicAccessProperties"] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    """


class FileShareSnapshot(ProxyResource):
    """FileShareSnapshot resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.fileshares.models.FileShareSnapshotProperties
    """

    properties: Optional["_models.FileShareSnapshotProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FileShareSnapshotProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareSnapshotProperties(_Model):
    """FileShareSnapshot properties.

    :ivar snapshot_time: The FileShareSnapshot time in UTC in string representation.
    :vartype snapshot_time: str
    :ivar initiator_id: The initiator of the FileShareSnapshot.
    :vartype initiator_id: str
    :ivar metadata: The metadata.
    :vartype metadata: dict[str, str]
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.fileshares.models.FileShareProvisioningState
    """

    snapshot_time: Optional[str] = rest_field(name="snapshotTime", visibility=["read"])
    """The FileShareSnapshot time in UTC in string representation."""
    initiator_id: Optional[str] = rest_field(name="initiatorId", visibility=["read"])
    """The initiator of the FileShareSnapshot."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metadata."""
    provisioning_state: Optional[Union[str, "_models.FileShareProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareSnapshotUpdate(_Model):
    """The type used for update operations of the FileShareSnapshot.

    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.fileshares.models.FileShareSnapshotUpdateProperties
    """

    properties: Optional["_models.FileShareSnapshotUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FileShareSnapshotUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareSnapshotUpdateProperties(_Model):
    """The updatable properties of the FileShareSnapshot.

    :ivar metadata: The metadata.
    :vartype metadata: dict[str, str]
    """

    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metadata."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareUpdate(_Model):
    """The type used for update operations of the FileShare.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.fileshares.models.FileShareUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.FileShareUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FileShareUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileShareUpdateProperties(_Model):
    """The updatable properties of the FileShare.

    :ivar provisioned_storage_gi_b: The provisioned storage size of the share in GiB (1 GiB is
     1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned
     storage, regardless of the amount of used storage.
    :vartype provisioned_storage_gi_b: int
    :ivar provisioned_io_per_sec: The provisioned IO / sec of the share.
    :vartype provisioned_io_per_sec: int
    :ivar provisioned_throughput_mi_b_per_sec: The provisioned throughput / sec of the share.
    :vartype provisioned_throughput_mi_b_per_sec: int
    :ivar nfs_protocol_properties: Protocol settings specific NFS.
    :vartype nfs_protocol_properties: ~azure.mgmt.fileshares.models.NfsProtocolProperties
    :ivar public_access_properties: The set of properties for control public access.
    :vartype public_access_properties: ~azure.mgmt.fileshares.models.PublicAccessProperties
    :ivar public_network_access: Gets or sets allow or disallow public network access to azure
     managed file share. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.fileshares.models.PublicNetworkAccess
    """

    provisioned_storage_gi_b: Optional[int] = rest_field(
        name="provisionedStorageGiB", visibility=["read", "create", "update"]
    )
    """The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A
     component of the file share's bill is the provisioned storage, regardless of the amount of used
     storage."""
    provisioned_io_per_sec: Optional[int] = rest_field(
        name="provisionedIOPerSec", visibility=["read", "create", "update"]
    )
    """The provisioned IO / sec of the share."""
    provisioned_throughput_mi_b_per_sec: Optional[int] = rest_field(
        name="provisionedThroughputMiBPerSec", visibility=["read", "create", "update"]
    )
    """The provisioned throughput / sec of the share."""
    nfs_protocol_properties: Optional["_models.NfsProtocolProperties"] = rest_field(
        name="nfsProtocolProperties", visibility=["read", "create", "update"]
    )
    """Protocol settings specific NFS."""
    public_access_properties: Optional["_models.PublicAccessProperties"] = rest_field(
        name="publicAccessProperties", visibility=["read", "create", "update"]
    )
    """The set of properties for control public access."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create", "update"]
    )
    """Gets or sets allow or disallow public network access to azure managed file share. Known values
     are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        provisioned_storage_gi_b: Optional[int] = None,
        provisioned_io_per_sec: Optional[int] = None,
        provisioned_throughput_mi_b_per_sec: Optional[int] = None,
        nfs_protocol_properties: Optional["_models.NfsProtocolProperties"] = None,
        public_access_properties: Optional["_models.PublicAccessProperties"] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NfsProtocolProperties(_Model):
    """Properties specific to the NFS protocol.

    :ivar root_squash: Root squash defines how root users on clients are mapped to the NFS share.
     Known values are: "NoRootSquash", "RootSquash", and "AllSquash".
    :vartype root_squash: str or ~azure.mgmt.fileshares.models.ShareRootSquash
    """

    root_squash: Optional[Union[str, "_models.ShareRootSquash"]] = rest_field(
        name="rootSquash", visibility=["read", "create", "update", "delete", "query"]
    )
    """Root squash defines how root users on clients are mapped to the NFS share. Known values are:
     \"NoRootSquash\", \"RootSquash\", and \"AllSquash\"."""

    @overload
    def __init__(
        self,
        *,
        root_squash: Optional[Union[str, "_models.ShareRootSquash"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.fileshares.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.fileshares.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.fileshares.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class PrivateEndpoint(_Model):
    """The Private Endpoint resource.

    :ivar id: The resource identifier for private endpoint.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The resource identifier for private endpoint."""


class PrivateEndpointConnection(Resource):
    """The private endpoint connection resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.fileshares.models.SystemData
    :ivar properties: The private endpoint connection properties.
    :vartype properties: ~azure.mgmt.fileshares.models.PrivateEndpointConnectionProperties
    """

    properties: Optional["_models.PrivateEndpointConnectionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The private endpoint connection properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateEndpointConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnectionProperties(_Model):
    """Properties of the private endpoint connection.

    :ivar group_ids: The group ids for the private endpoint resource.
    :vartype group_ids: list[str]
    :ivar private_endpoint: The private endpoint resource.
    :vartype private_endpoint: ~azure.mgmt.fileshares.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider. Required.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.fileshares.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.fileshares.models.PrivateEndpointConnectionProvisioningState
    """

    group_ids: Optional[List[str]] = rest_field(name="groupIds", visibility=["read"])
    """The group ids for the private endpoint resource."""
    private_endpoint: Optional["_models.PrivateEndpoint"] = rest_field(
        name="privateEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The private endpoint resource."""
    private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState" = rest_field(
        name="privateLinkServiceConnectionState", visibility=["read", "create", "update", "delete", "query"]
    )
    """A collection of information about the state of the connection between service consumer and
     provider. Required."""
    provisioning_state: Optional[Union[str, "_models.PrivateEndpointConnectionProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the private endpoint connection resource. Known values are:
     \"Succeeded\", \"Creating\", \"Deleting\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState",
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkServiceConnectionState(_Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.fileshares.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the connection has been Approved/Rejected/Removed by the owner of the
     service. Known values are: \"Pending\", \"Approved\", and \"Rejected\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The reason for approval/rejection of the connection."""
    actions_required: Optional[str] = rest_field(
        name="actionsRequired", visibility=["read", "create", "update", "delete", "query"]
    )
    """A message indicating if changes on the service provider require any updates on the consumer."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PublicAccessProperties(_Model):
    """The set of properties for control public access.

    :ivar allowed_subnets: The allowed set of subnets when access is restricted.
    :vartype allowed_subnets: list[str]
    """

    allowed_subnets: Optional[List[str]] = rest_field(
        name="allowedSubnets", visibility=["read", "create", "update", "delete", "query"]
    )
    """The allowed set of subnets when access is restricted."""

    @overload
    def __init__(
        self,
        *,
        allowed_subnets: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.fileshares.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.fileshares.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
