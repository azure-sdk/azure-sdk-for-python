# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AdministrativeDetails(_model_base.Model):
    """The administrative details of the instruction.

    :ivar source: The source of the instruction. Required.
    :vartype source: str
    :ivar created_by: The comment for the instruction. Required.
    :vartype created_by: str
    :ivar last_modified_by: The comment for the instruction. Required.
    :vartype last_modified_by: str
    :ivar created_at: Creation date of the instruction. Required.
    :vartype created_at: ~datetime.datetime
    :ivar comment: any closing comments. Required.
    :vartype comment: str
    """

    source: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The source of the instruction. Required."""
    created_by: str = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The comment for the instruction. Required."""
    last_modified_by: str = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The comment for the instruction. Required."""
    created_at: datetime.datetime = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Creation date of the instruction. Required."""
    comment: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """any closing comments. Required."""

    @overload
    def __init__(
        self,
        *,
        source: str,
        created_by: str,
        last_modified_by: str,
        created_at: datetime.datetime,
        comment: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Alias(_model_base.Model):
    """This is the request model for Alias.

    :ivar id: Id for the alias. Required.
    :vartype id: str
    :ivar name: Key for the alias. Required.
    :vartype name: str
    :ivar aliases: List of aliases. Required.
    :vartype aliases: list[str]
    :ivar is_custom: Indicates if the alias is enabled. Required. Known values are: "Yes" and "No".
    :vartype is_custom: str or ~azure.microsoft.industry.manufacturing.mds.copilot.models.Choice
    :ivar state: Indicates if the alias is enabled. Required. Known values are: "Active" and
     "Inactive".
    :vartype state: str or ~azure.microsoft.industry.manufacturing.mds.copilot.models.ResourceState
    """

    id: str = rest_field(visibility=["read"])
    """Id for the alias. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Key for the alias. Required."""
    aliases: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of aliases. Required."""
    is_custom: Union[str, "_models.Choice"] = rest_field(name="isCustom", visibility=["read"])
    """Indicates if the alias is enabled. Required. Known values are: \"Yes\" and \"No\"."""
    state: Union[str, "_models.ResourceState"] = rest_field(visibility=["update"])
    """Indicates if the alias is enabled. Required. Known values are: \"Active\" and \"Inactive\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        aliases: List[str],
        state: Union[str, "_models.ResourceState"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentProperties(_model_base.Model):
    """The content properties of the instruction.

    :ivar semantic_content: The semantic content of the instruction. Required.
    :vartype semantic_content:
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.SemanticContent
    """

    semantic_content: "_models.SemanticContent" = rest_field(
        name="semanticContent", visibility=["read", "create", "update", "delete", "query"]
    )
    """The semantic content of the instruction. Required."""

    @overload
    def __init__(
        self,
        *,
        semantic_content: "_models.SemanticContent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CopilotHealth(_model_base.Model):
    """Copilot Health Response.

    :ivar message: The message. Required.
    :vartype message: str
    :ivar operation_status: The operation status. Required. Known values are: "Accepted",
     "InProgress", "TransientFailure", "Succeeded", "Failed", "Deleting", "Canceled", "Unknown", and
     "Skipped".
    :vartype operation_status: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.OperationStatusValue
    :ivar error_message: The error message. Required.
    :vartype error_message: list[str]
    """

    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The message. Required."""
    operation_status: Union[str, "_models.OperationStatusValue"] = rest_field(
        name="operationStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The operation status. Required. Known values are: \"Accepted\", \"InProgress\",
     \"TransientFailure\", \"Succeeded\", \"Failed\", \"Deleting\", \"Canceled\", \"Unknown\", and
     \"Skipped\"."""
    error_message: List[str] = rest_field(
        name="errorMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """The error message. Required."""

    @overload
    def __init__(
        self,
        *,
        message: str,
        operation_status: Union[str, "_models.OperationStatusValue"],
        error_message: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExampleQueryRequest(_model_base.Model):
    """The example query resource.

    :ivar example_id: The ID of the example query. Required.
    :vartype example_id: str
    :ivar user_question: The user question associated with the example. Required.
    :vartype user_question: str
    :ivar linked_instructions: The linked instructions for the example query. Required.
    :vartype linked_instructions: list[str]
    :ivar sample_query: The sample query for the example. Required.
    :vartype sample_query: ~azure.microsoft.industry.manufacturing.mds.copilot.models.SampleQuery
    """

    example_id: str = rest_field(name="exampleId", visibility=["read"])
    """The ID of the example query. Required."""
    user_question: str = rest_field(name="userQuestion", visibility=["read", "create", "update", "delete", "query"])
    """The user question associated with the example. Required."""
    linked_instructions: List[str] = rest_field(
        name="linkedInstructions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The linked instructions for the example query. Required."""
    sample_query: "_models.SampleQuery" = rest_field(
        name="sampleQuery", visibility=["read", "create", "update", "delete", "query"]
    )
    """The sample query for the example. Required."""

    @overload
    def __init__(
        self,
        *,
        user_question: str,
        linked_instructions: List[str],
        sample_query: "_models.SampleQuery",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetOperationResultResponse(_model_base.Model):
    """GetOperationResultResponse.

    :ivar status: The operation status. Required. Known values are: "Accepted", "InProgress",
     "TransientFailure", "Succeeded", "Failed", "Deleting", "Canceled", "Unknown", and "Skipped".
    :vartype status: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.OperationStatusValue
    :ivar error_message: The error message. Required.
    :vartype error_message: list[str]
    """

    status: Union[str, "_models.OperationStatusValue"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The operation status. Required. Known values are: \"Accepted\", \"InProgress\",
     \"TransientFailure\", \"Succeeded\", \"Failed\", \"Deleting\", \"Canceled\", \"Unknown\", and
     \"Skipped\"."""
    error_message: List[str] = rest_field(
        name="errorMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """The error message. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OperationStatusValue"],
        error_message: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetResponse(_model_base.Model):
    """GetResponse.

    :ivar id: Id for the alias. Required.
    :vartype id: str
    :ivar name: Key for the alias. Required.
    :vartype name: str
    :ivar aliases: List of aliases. Required.
    :vartype aliases: list[str]
    :ivar is_custom: Indicates if the alias is enabled. Required. Known values are: "Yes" and "No".
    :vartype is_custom: str or ~azure.microsoft.industry.manufacturing.mds.copilot.models.Choice
    """

    id: str = rest_field(visibility=["read"])
    """Id for the alias. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Key for the alias. Required."""
    aliases: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of aliases. Required."""
    is_custom: Union[str, "_models.Choice"] = rest_field(name="isCustom", visibility=["read"])
    """Indicates if the alias is enabled. Required. Known values are: \"Yes\" and \"No\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        aliases: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Instruction(_model_base.Model):
    """This is the request model for Instruction.

    :ivar id: Id for the instruction. Required.
    :vartype id: str
    :ivar instruction_id: intruction Id for the instruction. Required.
    :vartype instruction_id: str
    :ivar instruction_version: Version for the instruction. Required.
    :vartype instruction_version: str
    :ivar domain: Domain for the instruction. Required. Known values are: "MOM", "SCM", and "DE".
    :vartype domain: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.InstrustionDomainEnum
    :ivar sub_domain: Sub-domain for the instruction. Required. Known values are: "Production",
     "Quality", "Maintenance", "Inventory", "Downtime", "Scrap", and "Mixed".
    :vartype sub_domain: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionSubDomainEnum
    :ivar category: Category for the instruction. Required. Known values are: "Transactional",
     "Analytical", "Trend", and "KPI".
    :vartype category: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionCategoryEnum
    :ivar language: The language of the instruction. Required. "EN"
    :vartype language: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.InstructionLanguageEnum
    :ivar retrieval: The retrieval properties of the instruction. Required.
    :vartype retrieval:
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.RetrievalProperties
    :ivar content: The content properties of the instruction. Required.
    :vartype content: ~azure.microsoft.industry.manufacturing.mds.copilot.models.ContentProperties
    :ivar relationships: The relationships of the instruction. Required.
    :vartype relationships:
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.Relationships
    :ivar administrative_details: audit record for the instruction. Required.
    :vartype administrative_details:
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.AdministrativeDetails
    :ivar state: state for the instruction. Required. Known values are: "Active" and "Inactive".
    :vartype state: str or ~azure.microsoft.industry.manufacturing.mds.copilot.models.ResourceState
    """

    id: str = rest_field(visibility=["read"])
    """Id for the instruction. Required."""
    instruction_id: str = rest_field(name="instructionId", visibility=["read", "create", "update", "delete", "query"])
    """intruction Id for the instruction. Required."""
    instruction_version: str = rest_field(
        name="instructionVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Version for the instruction. Required."""
    domain: Union[str, "_models.InstrustionDomainEnum"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Domain for the instruction. Required. Known values are: \"MOM\", \"SCM\", and \"DE\"."""
    sub_domain: Union[str, "_models.InstructionSubDomainEnum"] = rest_field(
        name="subDomain", visibility=["read", "create", "update", "delete", "query"]
    )
    """Sub-domain for the instruction. Required. Known values are: \"Production\", \"Quality\",
     \"Maintenance\", \"Inventory\", \"Downtime\", \"Scrap\", and \"Mixed\"."""
    category: Union[str, "_models.InstructionCategoryEnum"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Category for the instruction. Required. Known values are: \"Transactional\", \"Analytical\",
     \"Trend\", and \"KPI\"."""
    language: Union[str, "_models.InstructionLanguageEnum"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The language of the instruction. Required. \"EN\""""
    retrieval: "_models.RetrievalProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The retrieval properties of the instruction. Required."""
    content: "_models.ContentProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The content properties of the instruction. Required."""
    relationships: "_models.Relationships" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The relationships of the instruction. Required."""
    administrative_details: "_models.AdministrativeDetails" = rest_field(
        name="administrativeDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """audit record for the instruction. Required."""
    state: Union[str, "_models.ResourceState"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """state for the instruction. Required. Known values are: \"Active\" and \"Inactive\"."""

    @overload
    def __init__(
        self,
        *,
        instruction_id: str,
        instruction_version: str,
        domain: Union[str, "_models.InstrustionDomainEnum"],
        sub_domain: Union[str, "_models.InstructionSubDomainEnum"],
        category: Union[str, "_models.InstructionCategoryEnum"],
        language: Union[str, "_models.InstructionLanguageEnum"],
        retrieval: "_models.RetrievalProperties",
        content: "_models.ContentProperties",
        relationships: "_models.Relationships",
        administrative_details: "_models.AdministrativeDetails",
        state: Union[str, "_models.ResourceState"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class QueryResponse(_model_base.Model):
    """Query Response Result.

    :ivar result: Resultant Query Query or Query query execution response (JArray string). If
     Markdown format is requested, the result will be in Markdown format and only first 100 records
     will be presented here.
    :vartype result: str
    :ivar summary: Summary of the Resultant Query Query or Query query execution response (JArray
     string).
    :vartype summary: str
    """

    result: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resultant Query Query or Query query execution response (JArray string). If Markdown format is
     requested, the result will be in Markdown format and only first 100 records will be presented
     here."""
    summary: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Summary of the Resultant Query Query or Query query execution response (JArray string)."""

    @overload
    def __init__(
        self,
        *,
        result: Optional[str] = None,
        summary: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Relationships(_model_base.Model):
    """Relationships.

    :ivar dependencies: List of dependent instructions. Required.
    :vartype dependencies: list[str]
    :ivar exclusions: List of InstructionIds to be excluded. Required.
    :vartype exclusions: list[str]
    """

    dependencies: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of dependent instructions. Required."""
    exclusions: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of InstructionIds to be excluded. Required."""

    @overload
    def __init__(
        self,
        *,
        dependencies: List[str],
        exclusions: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RetrievalProperties(_model_base.Model):
    """The retrieval properties of the instruction.

    :ivar sub_topics: The sub-topics related to the instruction. Required.
    :vartype sub_topics: list[str]
    :ivar keywords: The keywords associated with the instruction. Required.
    :vartype keywords: list[str]
    :ivar sample_questions: The sample questions for the instruction. Required.
    :vartype sample_questions: list[str]
    """

    sub_topics: List[str] = rest_field(name="subTopics", visibility=["read", "create", "update", "delete", "query"])
    """The sub-topics related to the instruction. Required."""
    keywords: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The keywords associated with the instruction. Required."""
    sample_questions: List[str] = rest_field(
        name="sampleQuestions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The sample questions for the instruction. Required."""

    @overload
    def __init__(
        self,
        *,
        sub_topics: List[str],
        keywords: List[str],
        sample_questions: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SampleQuery(_model_base.Model):
    """The sample query resource.

    :ivar language: The query language. Required.
    :vartype language: str
    :ivar query: The query string. Required.
    :vartype query: str
    """

    language: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The query language. Required."""
    query: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The query string. Required."""

    @overload
    def __init__(
        self,
        *,
        language: str,
        query: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SemanticContent(_model_base.Model):
    """The semantic content of the instruction.

    :ivar context: The content of the instruction. Required.
    :vartype context: str
    :ivar steps: The source of the instruction. Required.
    :vartype steps: str
    """

    context: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The content of the instruction. Required."""
    steps: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The source of the instruction. Required."""

    @overload
    def __init__(
        self,
        *,
        context: str,
        steps: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubmitFeedbackResponse(_model_base.Model):
    """SubmitFeedbackResponse.

    :ivar conversation_id: conversation id.
    :vartype conversation_id: str
    :ivar feedback: The feedback. Required. Known values are: "Neutral", "ThumbUp", and
     "ThumbDown".
    :vartype feedback: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.FeedbackCategory
    :ivar query_endpoint: QueryEndpoint. Required. Known values are: "V3" and "Assistant".
    :vartype query_endpoint: str or
     ~azure.microsoft.industry.manufacturing.mds.copilot.models.QueryEndpoint
    """

    conversation_id: Optional[str] = rest_field(
        name="conversationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """conversation id."""
    feedback: Union[str, "_models.FeedbackCategory"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The feedback. Required. Known values are: \"Neutral\", \"ThumbUp\", and \"ThumbDown\"."""
    query_endpoint: Union[str, "_models.QueryEndpoint"] = rest_field(
        name="queryEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """QueryEndpoint. Required. Known values are: \"V3\" and \"Assistant\"."""

    @overload
    def __init__(
        self,
        *,
        feedback: Union[str, "_models.FeedbackCategory"],
        query_endpoint: Union[str, "_models.QueryEndpoint"],
        conversation_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserQueryRequest(_model_base.Model):
    """Query Response.

    :ivar ask: User query in natural language. Required.
    :vartype ask: str
    """

    ask: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """User query in natural language. Required."""

    @overload
    def __init__(
        self,
        *,
        ask: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
