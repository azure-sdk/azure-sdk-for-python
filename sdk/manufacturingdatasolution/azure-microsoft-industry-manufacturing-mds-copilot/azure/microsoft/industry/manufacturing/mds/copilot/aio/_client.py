# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING
from typing_extensions import Self

from azure.core import AsyncPipelineClient
from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .._serialization import Deserializer, Serializer
from ._configuration import CopilotServiceClientConfiguration
from .operations import (
    AliasesServiceClientOperations,
    HeathServiceClientOperations,
    InstructionsOperations,
    ModelsOperations,
    OperationServiceClientOperations,
    QueryExampleServiceClientOperations,
    QueryServiceClientOperations,
)

if TYPE_CHECKING:
    from azure.core.credentials_async import AsyncTokenCredential


class CopilotServiceClient:  # pylint: disable=too-many-instance-attributes
    """CopilotServiceClient.

    :ivar models: ModelsOperations operations
    :vartype models:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.ModelsOperations
    :ivar instructions: InstructionsOperations operations
    :vartype instructions:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.InstructionsOperations
    :ivar query_service_client: QueryServiceClientOperations operations
    :vartype query_service_client:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.QueryServiceClientOperations
    :ivar operation_service_client: OperationServiceClientOperations operations
    :vartype operation_service_client:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.OperationServiceClientOperations
    :ivar query_example_service_client: QueryExampleServiceClientOperations operations
    :vartype query_example_service_client:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.QueryExampleServiceClientOperations
    :ivar aliases_service_client: AliasesServiceClientOperations operations
    :vartype aliases_service_client:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.AliasesServiceClientOperations
    :ivar heath_service_client: HeathServiceClientOperations operations
    :vartype heath_service_client:
     azure.microsoft.industry.manufacturing.mds.copilot.aio.operations.HeathServiceClientOperations
    :param mds_unique_id: Required.
    :type mds_unique_id: str
    :param credential: Credential used to authenticate requests to the service. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :keyword location: Default value is "mds.azure.com".
    :paramtype location: str
    :keyword api_version: api-version to use. Default value is "2025-03-01". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self, mds_unique_id: str, credential: "AsyncTokenCredential", *, location: str = "mds.azure.com", **kwargs: Any
    ) -> None:
        _endpoint = "https://mds-{mdsUniqueId}.{location}.cloudapp.azure.com/"
        self._config = CopilotServiceClientConfiguration(
            mds_unique_id=mds_unique_id, credential=credential, location=location, **kwargs
        )
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncPipelineClient = AsyncPipelineClient(base_url=_endpoint, policies=_policies, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.models = ModelsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.instructions = InstructionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.query_service_client = QueryServiceClientOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.operation_service_client = OperationServiceClientOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.query_example_service_client = QueryExampleServiceClientOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.aliases_service_client = AliasesServiceClientOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.heath_service_client = HeathServiceClientOperations(
            self._client, self._config, self._serialize, self._deserialize
        )

    def send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "mdsUniqueId": self._serialize.url("self._config.mds_unique_id", self._config.mds_unique_id, "str"),
            "location": self._serialize.url("self._config.location", self._config.location, "str"),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> Self:
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
