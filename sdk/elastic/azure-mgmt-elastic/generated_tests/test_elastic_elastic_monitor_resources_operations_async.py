# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.elastic.aio import ElasticClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestElasticElasticMonitorResourcesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ElasticClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_get(self, resource_group):
        response = await self.client.elastic_monitor_resources.get(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_create(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_create(
                resource_group_name=resource_group.name,
                monitor_name="str",
                body={
                    "location": "str",
                    "id": "str",
                    "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                    "kind": "str",
                    "name": "str",
                    "properties": {
                        "elasticProperties": {
                            "elasticCloudDeployment": {
                                "azureSubscriptionId": "str",
                                "deploymentId": "str",
                                "elasticsearchRegion": "str",
                                "elasticsearchServiceUrl": "str",
                                "kibanaServiceUrl": "str",
                                "kibanaSsoUrl": "str",
                                "name": "str",
                            },
                            "elasticCloudUser": {
                                "elasticCloudSsoDefaultUrl": "str",
                                "emailAddress": "str",
                                "id": "str",
                            },
                        },
                        "generateApiKey": bool,
                        "hostingType": "str",
                        "liftrResourceCategory": "str",
                        "liftrResourcePreference": 0,
                        "monitoringStatus": "str",
                        "planDetails": {
                            "offerID": "str",
                            "planID": "str",
                            "planName": "str",
                            "publisherID": "str",
                            "termID": "str",
                        },
                        "projectDetails": {"configurationType": "str", "projectType": "str"},
                        "provisioningState": "str",
                        "saaSAzureSubscriptionStatus": "str",
                        "sourceCampaignId": "str",
                        "sourceCampaignName": "str",
                        "subscriptionState": "str",
                        "userInfo": {
                            "companyInfo": {
                                "business": "str",
                                "country": "str",
                                "domain": "str",
                                "employeesNumber": "str",
                                "state": "str",
                            },
                            "companyName": "str",
                            "emailAddress": "str",
                            "firstName": "str",
                            "lastName": "str",
                        },
                        "version": "str",
                    },
                    "sku": {"name": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_update(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_update(
                resource_group_name=resource_group.name,
                monitor_name="str",
                body={"tags": {"str": "str"}},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_delete(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_delete(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_list_by_resource_group(self, resource_group):
        response = self.client.elastic_monitor_resources.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_list(self, resource_group):
        response = self.client.elastic_monitor_resources.list()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_monitored_resources_list(self, resource_group):
        response = self.client.elastic_monitor_resources.monitored_resources_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_deployment_info_list(self, resource_group):
        response = await self.client.elastic_monitor_resources.deployment_info_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_create_or_update(self, resource_group):
        response = await self.client.elastic_monitor_resources.create_or_update(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_billing_info_get(self, resource_group):
        response = await self.client.elastic_monitor_resources.billing_info_get(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_connected_partner_resources_list(self, resource_group):
        response = self.client.elastic_monitor_resources.connected_partner_resources_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_v_m_host_list(self, resource_group):
        response = self.client.elastic_monitor_resources.v_m_host_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_details(self, resource_group):
        response = await self.client.elastic_monitor_resources.details(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_v_m_collection_update(self, resource_group):
        response = await self.client.elastic_monitor_resources.v_m_collection_update(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_upgradable_versions_details(self, resource_group):
        response = await self.client.elastic_monitor_resources.upgradable_versions_details(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_upgrade(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_upgrade(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_all_traffic_filters_list(self, resource_group):
        response = await self.client.elastic_monitor_resources.all_traffic_filters_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_list_associated_traffic_filters_list(self, resource_group):
        response = await self.client.elastic_monitor_resources.list_associated_traffic_filters_list(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_create_and_associate_ip_filter_create(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_create_and_associate_ip_filter_create(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_create_and_associate_pl_filter_create(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_create_and_associate_pl_filter_create(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_associate(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_associate(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_detach_and_delete_traffic_filter_delete(self, resource_group):
        response = await self.client.elastic_monitor_resources.detach_and_delete_traffic_filter_delete(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_detach_traffic_filter_update(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_detach_traffic_filter_update(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_traffic_filters_delete(self, resource_group):
        response = await self.client.elastic_monitor_resources.traffic_filters_delete(
            resource_group_name=resource_group.name,
            monitor_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_elastic_monitor_resources_begin_resubscribe(self, resource_group):
        response = await (
            await self.client.elastic_monitor_resources.begin_resubscribe(
                resource_group_name=resource_group.name,
                monitor_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
