# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class ArmResponseElasticMonitorResource(_Model):
    """Azure operation completed successfully.

    :ivar body: The body type of the operation request or response. Required.
    :vartype body: ~azure.mgmt.elastic.models.ElasticMonitorResource
    """

    body: "_models.ElasticMonitorResource" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The body type of the operation request or response. Required."""

    @overload
    def __init__(
        self,
        *,
        body: "_models.ElasticMonitorResource",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BillingInfoResponse(_Model):
    """Marketplace Subscription and Organization details to which resource gets billed into.

    :ivar marketplace_saas_info: Marketplace Subscription details.
    :vartype marketplace_saas_info: ~azure.mgmt.elastic.models.MarketplaceSaaSInfo
    :ivar partner_billing_entity: Partner Billing Entity details: Organization Info.
    :vartype partner_billing_entity: ~azure.mgmt.elastic.models.PartnerBillingEntity
    """

    marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = rest_field(
        name="marketplaceSaasInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription details."""
    partner_billing_entity: Optional["_models.PartnerBillingEntity"] = rest_field(
        name="partnerBillingEntity", visibility=["read", "create", "update", "delete", "query"]
    )
    """Partner Billing Entity details: Organization Info."""

    @overload
    def __init__(
        self,
        *,
        marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = None,
        partner_billing_entity: Optional["_models.PartnerBillingEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CompanyInfo(_Model):
    """Company information of the user to be passed to partners.

    :ivar domain: Domain of the company.
    :vartype domain: str
    :ivar business: Business of the company.
    :vartype business: str
    :ivar employees_number: Number of employees in the company.
    :vartype employees_number: str
    :ivar state: State of the company location.
    :vartype state: str
    :ivar country: Country of the company location.
    :vartype country: str
    """

    domain: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Domain of the company."""
    business: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Business of the company."""
    employees_number: Optional[str] = rest_field(
        name="employeesNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Number of employees in the company."""
    state: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """State of the company location."""
    country: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Country of the company location."""

    @overload
    def __init__(
        self,
        *,
        domain: Optional[str] = None,
        business: Optional[str] = None,
        employees_number: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectedPartnerResourceProperties(_Model):
    """Connected Partner Resource Properties.

    :ivar partner_deployment_name: Elastic resource name.
    :vartype partner_deployment_name: str
    :ivar partner_deployment_uri: URL of the resource in Elastic cloud.
    :vartype partner_deployment_uri: str
    :ivar azure_resource_id: The azure resource Id of the resource.
    :vartype azure_resource_id: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar type: The hosting type of the resource.
    :vartype type: str
    """

    partner_deployment_name: Optional[str] = rest_field(
        name="partnerDeploymentName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Elastic resource name."""
    partner_deployment_uri: Optional[str] = rest_field(
        name="partnerDeploymentUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """URL of the resource in Elastic cloud."""
    azure_resource_id: Optional[str] = rest_field(
        name="azureResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The azure resource Id of the resource."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The location of the resource."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The hosting type of the resource."""

    @overload
    def __init__(
        self,
        *,
        partner_deployment_name: Optional[str] = None,
        partner_deployment_uri: Optional[str] = None,
        azure_resource_id: Optional[str] = None,
        location: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectedPartnerResourcesListFormat(_Model):
    """Connected Partner Resources List Format.

    :ivar properties: Connected Partner Resource Properties.
    :vartype properties: ~azure.mgmt.elastic.models.ConnectedPartnerResourceProperties
    """

    properties: Optional["_models.ConnectedPartnerResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Connected Partner Resource Properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ConnectedPartnerResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateOrUpdateParameterBody(_Model):
    """CreateOrUpdateParameterBody.

    :ivar body: Elastic External User Creation Parameters.
    :vartype body: ~azure.mgmt.elastic.models.ExternalUserInfo
    """

    body: Optional["_models.ExternalUserInfo"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Elastic External User Creation Parameters."""

    @overload
    def __init__(
        self,
        *,
        body: Optional["_models.ExternalUserInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DeploymentInfoResponse(_Model):
    """The properties of deployment in Elastic cloud corresponding to the Elastic monitor resource.

    :ivar status: The Elastic deployment status. Known values are: "Healthy" and "Unhealthy".
    :vartype status: str or ~azure.mgmt.elastic.models.ElasticDeploymentStatus
    :ivar version: Version of the elasticsearch in Elastic cloud deployment.
    :vartype version: str
    :ivar memory_capacity: RAM capacity of the elasticsearch in Elastic cloud deployment.
    :vartype memory_capacity: str
    :ivar disk_capacity: Disk capacity of the elasticsearch in Elastic cloud deployment.
    :vartype disk_capacity: str
    :ivar elasticsearch_end_point: Elasticsearch endpoint in Elastic cloud deployment. This is
     either the aliased_endpoint if available, or the service_url otherwise.
    :vartype elasticsearch_end_point: str
    :ivar deployment_url: Deployment URL of the elasticsearch in Elastic cloud deployment.
    :vartype deployment_url: str
    :ivar marketplace_saas_info: Marketplace SaaS Info of the resource.
    :vartype marketplace_saas_info: ~azure.mgmt.elastic.models.MarketplaceSaaSInfo
    :ivar project_type: Project Type - Applicable for Serverless only.
    :vartype project_type: str
    :ivar configuration_type: ConfigurationType Type - Applicable for Serverless only.
    :vartype configuration_type: str
    """

    status: Optional[Union[str, "_models.ElasticDeploymentStatus"]] = rest_field(visibility=["read"])
    """The Elastic deployment status. Known values are: \"Healthy\" and \"Unhealthy\"."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Version of the elasticsearch in Elastic cloud deployment."""
    memory_capacity: Optional[str] = rest_field(name="memoryCapacity", visibility=["read"])
    """RAM capacity of the elasticsearch in Elastic cloud deployment."""
    disk_capacity: Optional[str] = rest_field(name="diskCapacity", visibility=["read"])
    """Disk capacity of the elasticsearch in Elastic cloud deployment."""
    elasticsearch_end_point: Optional[str] = rest_field(name="elasticsearchEndPoint", visibility=["read"])
    """Elasticsearch endpoint in Elastic cloud deployment. This is either the aliased_endpoint if
     available, or the service_url otherwise."""
    deployment_url: Optional[str] = rest_field(name="deploymentUrl", visibility=["read"])
    """Deployment URL of the elasticsearch in Elastic cloud deployment."""
    marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = rest_field(
        name="marketplaceSaasInfo", visibility=["read"]
    )
    """Marketplace SaaS Info of the resource."""
    project_type: Optional[str] = rest_field(name="projectType", visibility=["read"])
    """Project Type - Applicable for Serverless only."""
    configuration_type: Optional[str] = rest_field(name="configurationType", visibility=["read"])
    """ConfigurationType Type - Applicable for Serverless only."""


class ElasticCloudDeployment(_Model):
    """Details of the user's elastic deployment associated with the monitor resource.

    :ivar name: Elastic deployment name.
    :vartype name: str
    :ivar deployment_id: Elastic deployment Id.
    :vartype deployment_id: str
    :ivar azure_subscription_id: Associated Azure subscription Id for the elastic deployment.
    :vartype azure_subscription_id: str
    :ivar elasticsearch_region: Region where Deployment at Elastic side took place.
    :vartype elasticsearch_region: str
    :ivar elasticsearch_service_url: Elasticsearch ingestion endpoint of the Elastic deployment.
    :vartype elasticsearch_service_url: str
    :ivar kibana_service_url: Kibana endpoint of the Elastic deployment.
    :vartype kibana_service_url: str
    :ivar kibana_sso_url: Kibana dashboard sso URL of the Elastic deployment.
    :vartype kibana_sso_url: str
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Elastic deployment name."""
    deployment_id: Optional[str] = rest_field(name="deploymentId", visibility=["read"])
    """Elastic deployment Id."""
    azure_subscription_id: Optional[str] = rest_field(name="azureSubscriptionId", visibility=["read"])
    """Associated Azure subscription Id for the elastic deployment."""
    elasticsearch_region: Optional[str] = rest_field(name="elasticsearchRegion", visibility=["read"])
    """Region where Deployment at Elastic side took place."""
    elasticsearch_service_url: Optional[str] = rest_field(name="elasticsearchServiceUrl", visibility=["read"])
    """Elasticsearch ingestion endpoint of the Elastic deployment."""
    kibana_service_url: Optional[str] = rest_field(name="kibanaServiceUrl", visibility=["read"])
    """Kibana endpoint of the Elastic deployment."""
    kibana_sso_url: Optional[str] = rest_field(name="kibanaSsoUrl", visibility=["read"])
    """Kibana dashboard sso URL of the Elastic deployment."""


class ElasticCloudUser(_Model):
    """Details of the user's elastic account.

    :ivar email_address: Email of the Elastic User Account.
    :vartype email_address: str
    :ivar id: User Id of the elastic account of the User.
    :vartype id: str
    :ivar elastic_cloud_sso_default_url: Elastic cloud default dashboard sso URL of the Elastic
     user account.
    :vartype elastic_cloud_sso_default_url: str
    """

    email_address: Optional[str] = rest_field(name="emailAddress", visibility=["read"])
    """Email of the Elastic User Account."""
    id: Optional[str] = rest_field(visibility=["read"])
    """User Id of the elastic account of the User."""
    elastic_cloud_sso_default_url: Optional[str] = rest_field(name="elasticCloudSsoDefaultUrl", visibility=["read"])
    """Elastic cloud default dashboard sso URL of the Elastic user account."""


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticMonitorResource(TrackedResource):
    """Monitor resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of the monitor resource.
    :vartype properties: ~azure.mgmt.elastic.models.MonitorProperties
    :ivar kind: The kind of the Elastic resource - observability, security, search etc.
    :vartype kind: str
    :ivar sku: SKU of the monitor resource.
    :vartype sku: ~azure.mgmt.elastic.models.ResourceSku
    :ivar identity: Identity properties of the monitor resource.
    :vartype identity: ~azure.mgmt.elastic.models.IdentityProperties
    """

    properties: Optional["_models.MonitorProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the monitor resource."""
    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The kind of the Elastic resource - observability, security, search etc."""
    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """SKU of the monitor resource."""
    identity: Optional["_models.IdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identity properties of the monitor resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.MonitorProperties"] = None,
        kind: Optional[str] = None,
        sku: Optional["_models.ResourceSku"] = None,
        identity: Optional["_models.IdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticMonitorResourceUpdateParameters(_Model):
    """Monitor resource update parameters.

    :ivar tags: elastic monitor resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """elastic monitor resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticMonitorUpgrade(_Model):
    """Upgrade elastic monitor version.

    :ivar version: Version to which the elastic monitor should be upgraded to.
    :vartype version: str
    """

    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Version to which the elastic monitor should be upgraded to."""

    @overload
    def __init__(
        self,
        *,
        version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticOrganizationToAzureSubscriptionMappingResponse(_Model):  # pylint: disable=name-too-long
    """The Azure Subscription ID to which the Organization of the logged in user belongs and gets
    billed into.

    :ivar properties: The properties of Azure Subscription ID to which the Organization of the
     logged in user belongs and gets billed into.
    :vartype properties:
     ~azure.mgmt.elastic.models.ElasticOrganizationToAzureSubscriptionMappingResponseProperties
    """

    properties: Optional["_models.ElasticOrganizationToAzureSubscriptionMappingResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of Azure Subscription ID to which the Organization of the logged in user belongs
     and gets billed into."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ElasticOrganizationToAzureSubscriptionMappingResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticOrganizationToAzureSubscriptionMappingResponseProperties(_Model):  # pylint: disable=name-too-long
    """The properties of Azure Subscription ID to which the Organization of the logged in user belongs
    and gets billed into.

    :ivar billed_azure_subscription_id: The Azure Subscription ID to which the Organization belongs
     and gets billed into. This is empty for a new user OR a user without an Elastic Organization.
    :vartype billed_azure_subscription_id: str
    :ivar marketplace_saas_info: Marketplace SaaS Info of the resource.
    :vartype marketplace_saas_info: ~azure.mgmt.elastic.models.MarketplaceSaaSInfo
    :ivar elastic_organization_id: The Elastic Organization Id.
    :vartype elastic_organization_id: str
    :ivar elastic_organization_name: The Elastic Organization Name.
    :vartype elastic_organization_name: str
    """

    billed_azure_subscription_id: Optional[str] = rest_field(
        name="billedAzureSubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure Subscription ID to which the Organization belongs and gets billed into. This is empty
     for a new user OR a user without an Elastic Organization."""
    marketplace_saas_info: Optional["_models.MarketplaceSaaSInfo"] = rest_field(
        name="marketplaceSaasInfo", visibility=["read"]
    )
    """Marketplace SaaS Info of the resource."""
    elastic_organization_id: Optional[str] = rest_field(
        name="elasticOrganizationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Elastic Organization Id."""
    elastic_organization_name: Optional[str] = rest_field(
        name="elasticOrganizationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Elastic Organization Name."""

    @overload
    def __init__(
        self,
        *,
        billed_azure_subscription_id: Optional[str] = None,
        elastic_organization_id: Optional[str] = None,
        elastic_organization_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticProperties(_Model):
    """Elastic Resource Properties.

    :ivar elastic_cloud_user: Details of the user's elastic account.
    :vartype elastic_cloud_user: ~azure.mgmt.elastic.models.ElasticCloudUser
    :ivar elastic_cloud_deployment: Details of the elastic cloud deployment.
    :vartype elastic_cloud_deployment: ~azure.mgmt.elastic.models.ElasticCloudDeployment
    """

    elastic_cloud_user: Optional["_models.ElasticCloudUser"] = rest_field(
        name="elasticCloudUser", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the user's elastic account."""
    elastic_cloud_deployment: Optional["_models.ElasticCloudDeployment"] = rest_field(
        name="elasticCloudDeployment", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the elastic cloud deployment."""

    @overload
    def __init__(
        self,
        *,
        elastic_cloud_user: Optional["_models.ElasticCloudUser"] = None,
        elastic_cloud_deployment: Optional["_models.ElasticCloudDeployment"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticTrafficFilter(_Model):
    """Elastic traffic filter object.

    :ivar id: Id of the elastic filter.
    :vartype id: str
    :ivar name: Name of the elastic filter.
    :vartype name: str
    :ivar description: Description of the elastic filter.
    :vartype description: str
    :ivar region: Region of the elastic filter.
    :vartype region: str
    :ivar type: Type of the elastic filter. Known values are: "ip" and "azure_private_endpoint".
    :vartype type: str or ~azure.mgmt.elastic.models.Type
    :ivar include_by_default: IncludeByDefault for the elastic filter.
    :vartype include_by_default: bool
    :ivar rules: Rules in the elastic filter.
    :vartype rules: list[~azure.mgmt.elastic.models.ElasticTrafficFilterRule]
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the elastic filter."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the elastic filter."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the elastic filter."""
    region: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Region of the elastic filter."""
    type: Optional[Union[str, "_models.Type"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the elastic filter. Known values are: \"ip\" and \"azure_private_endpoint\"."""
    include_by_default: Optional[bool] = rest_field(
        name="includeByDefault", visibility=["read", "create", "update", "delete", "query"]
    )
    """IncludeByDefault for the elastic filter."""
    rules: Optional[List["_models.ElasticTrafficFilterRule"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Rules in the elastic filter."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        description: Optional[str] = None,
        region: Optional[str] = None,
        type: Optional[Union[str, "_models.Type"]] = None,
        include_by_default: Optional[bool] = None,
        rules: Optional[List["_models.ElasticTrafficFilterRule"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticTrafficFilterResponse(_Model):
    """List of elastic traffic filters in the account.

    :ivar rulesets: List of elastic traffic filters in the account.
    :vartype rulesets: list[~azure.mgmt.elastic.models.ElasticTrafficFilter]
    """

    rulesets: Optional[List["_models.ElasticTrafficFilter"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of elastic traffic filters in the account."""

    @overload
    def __init__(
        self,
        *,
        rulesets: Optional[List["_models.ElasticTrafficFilter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticTrafficFilterRule(_Model):
    """Elastic traffic filter rule object.

    :ivar source: IP of the elastic filter rule.
    :vartype source: str
    :ivar description: Description of the elastic filter rule.
    :vartype description: str
    :ivar azure_endpoint_guid: Guid of Private Endpoint in the elastic filter rule.
    :vartype azure_endpoint_guid: str
    :ivar azure_endpoint_name: Name of the Private Endpoint in the elastic filter rule.
    :vartype azure_endpoint_name: str
    :ivar id: Id of the elastic filter rule.
    :vartype id: str
    """

    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """IP of the elastic filter rule."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the elastic filter rule."""
    azure_endpoint_guid: Optional[str] = rest_field(
        name="azureEndpointGuid", visibility=["read", "create", "update", "delete", "query"]
    )
    """Guid of Private Endpoint in the elastic filter rule."""
    azure_endpoint_name: Optional[str] = rest_field(
        name="azureEndpointName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the Private Endpoint in the elastic filter rule."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the elastic filter rule."""

    @overload
    def __init__(
        self,
        *,
        source: Optional[str] = None,
        description: Optional[str] = None,
        azure_endpoint_guid: Optional[str] = None,
        azure_endpoint_name: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticVersionListFormat(_Model):
    """Elastic Version List Format.

    :ivar properties: Elastic Version Properties.
    :vartype properties: ~azure.mgmt.elastic.models.ElasticVersionListProperties
    """

    properties: Optional["_models.ElasticVersionListProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Elastic Version Properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ElasticVersionListProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ElasticVersionListProperties(_Model):
    """Elastic Version Properties.

    :ivar version: Available elastic version of the given region.
    :vartype version: str
    """

    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Available elastic version of the given region."""

    @overload
    def __init__(
        self,
        *,
        version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.elastic.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.elastic.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.elastic.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponseBody(_Model):
    """Error response body.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar target: Error target.
    :vartype target: str
    :ivar details: Error details.
    :vartype details: list[~azure.mgmt.elastic.models.ErrorResponseBody]
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error code."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error message."""
    target: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error target."""
    details: Optional[List["_models.ErrorResponseBody"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Error details."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.ErrorResponseBody"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExternalUserCreationResponse(_Model):
    """The properties of the response we got from elastic while creating external user.

    :ivar created: Shows if user is created or updated.
    :vartype created: bool
    """

    created: Optional[bool] = rest_field(visibility=["read"])
    """Shows if user is created or updated."""


class ExternalUserInfo(_Model):
    """The properties of the request required for creating user on elastic side.

    :ivar user_name: Username of the user to be created or updated.
    :vartype user_name: str
    :ivar full_name: Full name of the user to be created or updated.
    :vartype full_name: str
    :ivar password: Password of the user to be created or updated.
    :vartype password: str
    :ivar email_id: Email id of the user to be created or updated.
    :vartype email_id: str
    :ivar roles: Roles to be assigned for  created or updated user.
    :vartype roles: list[str]
    """

    user_name: Optional[str] = rest_field(name="userName", visibility=["read", "create", "update", "delete", "query"])
    """Username of the user to be created or updated."""
    full_name: Optional[str] = rest_field(name="fullName", visibility=["read", "create", "update", "delete", "query"])
    """Full name of the user to be created or updated."""
    password: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Password of the user to be created or updated."""
    email_id: Optional[str] = rest_field(name="emailId", visibility=["read", "create", "update", "delete", "query"])
    """Email id of the user to be created or updated."""
    roles: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Roles to be assigned for  created or updated user."""

    @overload
    def __init__(
        self,
        *,
        user_name: Optional[str] = None,
        full_name: Optional[str] = None,
        password: Optional[str] = None,
        email_id: Optional[str] = None,
        roles: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilteringTag(_Model):
    """The definition of a filtering tag. Filtering tags are used for capturing resources and
    include/exclude them from being monitored.

    :ivar name: The name (also known as the key) of the tag.
    :vartype name: str
    :ivar value: The value of the tag.
    :vartype value: str
    :ivar action: Valid actions for a filtering tag. Known values are: "Include" and "Exclude".
    :vartype action: str or ~azure.mgmt.elastic.models.TagAction
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name (also known as the key) of the tag."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the tag."""
    action: Optional[Union[str, "_models.TagAction"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Valid actions for a filtering tag. Known values are: \"Include\" and \"Exclude\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        action: Optional[Union[str, "_models.TagAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IdentityProperties(_Model):
    """Identity properties.

    :ivar principal_id: The identity ID.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of resource.
    :vartype tenant_id: str
    :ivar type: Managed identity type. "SystemAssigned"
    :vartype type: str or ~azure.mgmt.elastic.models.ManagedIdentityTypes
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The identity ID."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of resource."""
    type: Optional[Union[str, "_models.ManagedIdentityTypes"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Managed identity type. \"SystemAssigned\""""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedIdentityTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogRules(_Model):
    """Set of rules for sending logs for the Monitor resource.

    :ivar send_aad_logs: Flag specifying if AAD logs should be sent for the Monitor resource.
    :vartype send_aad_logs: bool
    :ivar send_subscription_logs: Flag specifying if subscription logs should be sent for the
     Monitor resource.
    :vartype send_subscription_logs: bool
    :ivar send_activity_logs: Flag specifying if activity logs from Azure resources should be sent
     for the Monitor resource.
    :vartype send_activity_logs: bool
    :ivar filtering_tags: List of filtering tags to be used for capturing logs. This only takes
     effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only
     Exclude action is specified, the rules will apply to the list of all available resources. If
     Include actions are specified, the rules will only include resources with the associated tags.
    :vartype filtering_tags: list[~azure.mgmt.elastic.models.FilteringTag]
    """

    send_aad_logs: Optional[bool] = rest_field(
        name="sendAadLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if AAD logs should be sent for the Monitor resource."""
    send_subscription_logs: Optional[bool] = rest_field(
        name="sendSubscriptionLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if subscription logs should be sent for the Monitor resource."""
    send_activity_logs: Optional[bool] = rest_field(
        name="sendActivityLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if activity logs from Azure resources should be sent for the Monitor resource."""
    filtering_tags: Optional[List["_models.FilteringTag"]] = rest_field(
        name="filteringTags", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of filtering tags to be used for capturing logs. This only takes effect if
     SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude
     action is specified, the rules will apply to the list of all available resources. If Include
     actions are specified, the rules will only include resources with the associated tags."""

    @overload
    def __init__(
        self,
        *,
        send_aad_logs: Optional[bool] = None,
        send_subscription_logs: Optional[bool] = None,
        send_activity_logs: Optional[bool] = None,
        filtering_tags: Optional[List["_models.FilteringTag"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MarketplaceSaaSInfo(_Model):
    """Marketplace SAAS Info of the resource.

    :ivar marketplace_subscription: Marketplace Subscription.
    :vartype marketplace_subscription:
     ~azure.mgmt.elastic.models.MarketplaceSaaSInfoMarketplaceSubscription
    :ivar marketplace_name: Marketplace Subscription Details: SAAS Name.
    :vartype marketplace_name: str
    :ivar marketplace_resource_id: Marketplace Subscription Details: Resource URI.
    :vartype marketplace_resource_id: str
    :ivar marketplace_status: Marketplace Subscription Details: SaaS Subscription Status.
    :vartype marketplace_status: str
    :ivar billed_azure_subscription_id: The Azure Subscription ID to which the Marketplace
     Subscription belongs and gets billed into.
    :vartype billed_azure_subscription_id: str
    :ivar subscribed: Flag specifying if the Marketplace status is subscribed or not.
    :vartype subscribed: bool
    """

    marketplace_subscription: Optional["_models.MarketplaceSaaSInfoMarketplaceSubscription"] = rest_field(
        name="marketplaceSubscription", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription."""
    marketplace_name: Optional[str] = rest_field(
        name="marketplaceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Details: SAAS Name."""
    marketplace_resource_id: Optional[str] = rest_field(
        name="marketplaceResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Details: Resource URI."""
    marketplace_status: Optional[str] = rest_field(
        name="marketplaceStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Marketplace Subscription Details: SaaS Subscription Status."""
    billed_azure_subscription_id: Optional[str] = rest_field(
        name="billedAzureSubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure Subscription ID to which the Marketplace Subscription belongs and gets billed into."""
    subscribed: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Flag specifying if the Marketplace status is subscribed or not."""

    @overload
    def __init__(
        self,
        *,
        marketplace_subscription: Optional["_models.MarketplaceSaaSInfoMarketplaceSubscription"] = None,
        marketplace_name: Optional[str] = None,
        marketplace_resource_id: Optional[str] = None,
        marketplace_status: Optional[str] = None,
        billed_azure_subscription_id: Optional[str] = None,
        subscribed: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MarketplaceSaaSInfoMarketplaceSubscription(_Model):  # pylint: disable=name-too-long
    """Marketplace Subscription.

    :ivar id: Marketplace Subscription Id. This is a GUID-formatted string.
    :vartype id: str
    :ivar publisher_id: Publisher Id of the Marketplace offer.
    :vartype publisher_id: str
    :ivar offer_id: Offer Id of the Marketplace offer,.
    :vartype offer_id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Marketplace Subscription Id. This is a GUID-formatted string."""
    publisher_id: Optional[str] = rest_field(
        name="publisherId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Publisher Id of the Marketplace offer."""
    offer_id: Optional[str] = rest_field(name="offerId", visibility=["read", "create", "update", "delete", "query"])
    """Offer Id of the Marketplace offer,."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        publisher_id: Optional[str] = None,
        offer_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoredResource(_Model):
    """The properties of a resource currently being monitored by the Elastic monitor resource.

    :ivar id: The ARM id of the resource.
    :vartype id: str
    :ivar sending_logs: Flag indicating the status of the resource for sending logs operation to
     Elastic. Known values are: "True" and "False".
    :vartype sending_logs: str or ~azure.mgmt.elastic.models.SendingLogs
    :ivar reason_for_logs_status: Reason for why the resource is sending logs (or why it is not
     sending).
    :vartype reason_for_logs_status: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ARM id of the resource."""
    sending_logs: Optional[Union[str, "_models.SendingLogs"]] = rest_field(
        name="sendingLogs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag indicating the status of the resource for sending logs operation to Elastic. Known values
     are: \"True\" and \"False\"."""
    reason_for_logs_status: Optional[str] = rest_field(
        name="reasonForLogsStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reason for why the resource is sending logs (or why it is not sending)."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        sending_logs: Optional[Union[str, "_models.SendingLogs"]] = None,
        reason_for_logs_status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoredSubscription(_Model):
    """The list of subscriptions and it's monitoring status by current Elastic monitor.

    :ivar subscription_id: The subscriptionId to be monitored. Required.
    :vartype subscription_id: str
    :ivar status: The state of monitoring. Known values are: "InProgress", "Active", "Failed", and
     "Deleting".
    :vartype status: str or ~azure.mgmt.elastic.models.Status
    :ivar error: The reason of not monitoring the subscription.
    :vartype error: str
    :ivar tag_rules: Definition of the properties for a TagRules resource.
    :vartype tag_rules: ~azure.mgmt.elastic.models.MonitoringTagRulesProperties
    """

    subscription_id: str = rest_field(name="subscriptionId", visibility=["read", "create", "update", "delete", "query"])
    """The subscriptionId to be monitored. Required."""
    status: Optional[Union[str, "_models.Status"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The state of monitoring. Known values are: \"InProgress\", \"Active\", \"Failed\", and
     \"Deleting\"."""
    error: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The reason of not monitoring the subscription."""
    tag_rules: Optional["_models.MonitoringTagRulesProperties"] = rest_field(
        name="tagRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """Definition of the properties for a TagRules resource."""

    @overload
    def __init__(
        self,
        *,
        subscription_id: str,
        status: Optional[Union[str, "_models.Status"]] = None,
        error: Optional[str] = None,
        tag_rules: Optional["_models.MonitoringTagRulesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    """


class MonitoredSubscriptionProperties(ProxyResource):
    """The request to update subscriptions needed to be monitored by the Elastic monitor resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    :ivar properties: The request to update subscriptions needed to be monitored by the Elastic
     monitor resource.
    :vartype properties: ~azure.mgmt.elastic.models.SubscriptionList
    """

    properties: Optional["_models.SubscriptionList"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The request to update subscriptions needed to be monitored by the Elastic monitor resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SubscriptionList"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoringTagRules(ProxyResource):
    """Capture logs and metrics of Azure resources based on ARM tags.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    :ivar properties: Properties of the monitoring tag rules.
    :vartype properties: ~azure.mgmt.elastic.models.MonitoringTagRulesProperties
    """

    properties: Optional["_models.MonitoringTagRulesProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the monitoring tag rules."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.MonitoringTagRulesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoringTagRulesProperties(_Model):
    """Definition of the properties for a TagRules resource.

    :ivar provisioning_state: Provisioning state of the monitoring tag rules. Known values are:
     "Accepted", "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted",
     and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.elastic.models.ProvisioningState
    :ivar log_rules: Rules for sending logs.
    :vartype log_rules: ~azure.mgmt.elastic.models.LogRules
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the monitoring tag rules. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and
     \"NotSpecified\"."""
    log_rules: Optional["_models.LogRules"] = rest_field(
        name="logRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """Rules for sending logs."""

    @overload
    def __init__(
        self,
        *,
        log_rules: Optional["_models.LogRules"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitorProperties(_Model):
    """Properties specific to the monitor resource.

    :ivar provisioning_state: Provisioning state of the monitor resource. Known values are:
     "Accepted", "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted",
     and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.elastic.models.ProvisioningState
    :ivar monitoring_status: Flag specifying if the resource monitoring is enabled or disabled.
     Known values are: "Enabled" and "Disabled".
    :vartype monitoring_status: str or ~azure.mgmt.elastic.models.MonitoringStatus
    :ivar elastic_properties: Elastic cloud properties.
    :vartype elastic_properties: ~azure.mgmt.elastic.models.ElasticProperties
    :ivar user_info: User information.
    :vartype user_info: ~azure.mgmt.elastic.models.UserInfo
    :ivar plan_details: Plan details of the monitor resource.
    :vartype plan_details: ~azure.mgmt.elastic.models.PlanDetails
    :ivar version: Version of elastic of the monitor resource.
    :vartype version: str
    :ivar subscription_state: State of the Azure Subscription containing the monitor resource.
    :vartype subscription_state: str
    :ivar saa_s_azure_subscription_status: Status of Azure Subscription where Marketplace SaaS is
     located.
    :vartype saa_s_azure_subscription_status: str
    :ivar source_campaign_name: Name of the marketing campaign.
    :vartype source_campaign_name: str
    :ivar source_campaign_id: A unique identifier associated with the campaign.
    :vartype source_campaign_id: str
    :ivar liftr_resource_category: Known values are: "Unknown" and "MonitorLogs".
    :vartype liftr_resource_category: str or ~azure.mgmt.elastic.models.LiftrResourceCategories
    :ivar liftr_resource_preference: The priority of the resource.
    :vartype liftr_resource_preference: int
    :ivar generate_api_key: Flag to determine if User API Key has to be generated and shared.
    :vartype generate_api_key: bool
    :ivar hosting_type: Hosting type of the monitor resource - either Hosted deployments OR
     Serverless Projects. Known values are: "Hosted" and "Serverless".
    :vartype hosting_type: str or ~azure.mgmt.elastic.models.HostingType
    :ivar project_details: Project details of the monitor resource IF it belongs to Serverless
     offer kind.
    :vartype project_details: ~azure.mgmt.elastic.models.ProjectDetails
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the monitor resource. Known values are: \"Accepted\", \"Creating\",
     \"Updating\", \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and
     \"NotSpecified\"."""
    monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = rest_field(
        name="monitoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag specifying if the resource monitoring is enabled or disabled. Known values are:
     \"Enabled\" and \"Disabled\"."""
    elastic_properties: Optional["_models.ElasticProperties"] = rest_field(
        name="elasticProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Elastic cloud properties."""
    user_info: Optional["_models.UserInfo"] = rest_field(name="userInfo", visibility=["create"])
    """User information."""
    plan_details: Optional["_models.PlanDetails"] = rest_field(
        name="planDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Plan details of the monitor resource."""
    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Version of elastic of the monitor resource."""
    subscription_state: Optional[str] = rest_field(
        name="subscriptionState", visibility=["read", "create", "update", "delete", "query"]
    )
    """State of the Azure Subscription containing the monitor resource."""
    saa_s_azure_subscription_status: Optional[str] = rest_field(
        name="saaSAzureSubscriptionStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of Azure Subscription where Marketplace SaaS is located."""
    source_campaign_name: Optional[str] = rest_field(
        name="sourceCampaignName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the marketing campaign."""
    source_campaign_id: Optional[str] = rest_field(
        name="sourceCampaignId", visibility=["read", "create", "update", "delete", "query"]
    )
    """A unique identifier associated with the campaign."""
    liftr_resource_category: Optional[Union[str, "_models.LiftrResourceCategories"]] = rest_field(
        name="liftrResourceCategory", visibility=["read"]
    )
    """Known values are: \"Unknown\" and \"MonitorLogs\"."""
    liftr_resource_preference: Optional[int] = rest_field(name="liftrResourcePreference", visibility=["read"])
    """The priority of the resource."""
    generate_api_key: Optional[bool] = rest_field(
        name="generateApiKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Flag to determine if User API Key has to be generated and shared."""
    hosting_type: Optional[Union[str, "_models.HostingType"]] = rest_field(
        name="hostingType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hosting type of the monitor resource - either Hosted deployments OR Serverless Projects. Known
     values are: \"Hosted\" and \"Serverless\"."""
    project_details: Optional["_models.ProjectDetails"] = rest_field(
        name="projectDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Project details of the monitor resource IF it belongs to Serverless offer kind."""

    @overload
    def __init__(
        self,
        *,
        monitoring_status: Optional[Union[str, "_models.MonitoringStatus"]] = None,
        elastic_properties: Optional["_models.ElasticProperties"] = None,
        user_info: Optional["_models.UserInfo"] = None,
        plan_details: Optional["_models.PlanDetails"] = None,
        version: Optional[str] = None,
        subscription_state: Optional[str] = None,
        saa_s_azure_subscription_status: Optional[str] = None,
        source_campaign_name: Optional[str] = None,
        source_campaign_id: Optional[str] = None,
        generate_api_key: Optional[bool] = None,
        hosting_type: Optional[Union[str, "_models.HostingType"]] = None,
        project_details: Optional["_models.ProjectDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OkResponse(_Model):
    """The request has succeeded."""


class OpenAIIntegrationProperties(_Model):
    """Open AI Integration details.

    :ivar open_ai_resource_id: The resource name of Open AI resource.
    :vartype open_ai_resource_id: str
    :ivar open_ai_resource_endpoint: The API endpoint for Open AI resource.
    :vartype open_ai_resource_endpoint: str
    :ivar open_ai_connector_id: The connector id of Open AI resource.
    :vartype open_ai_connector_id: str
    :ivar key: Value of API key for Open AI resource.
    :vartype key: str
    :ivar last_refresh_at: Last Update Timestamp for key updation.
    :vartype last_refresh_at: ~datetime.datetime
    """

    open_ai_resource_id: Optional[str] = rest_field(
        name="openAIResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource name of Open AI resource."""
    open_ai_resource_endpoint: Optional[str] = rest_field(
        name="openAIResourceEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The API endpoint for Open AI resource."""
    open_ai_connector_id: Optional[str] = rest_field(
        name="openAIConnectorId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The connector id of Open AI resource."""
    key: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of API key for Open AI resource."""
    last_refresh_at: Optional[datetime.datetime] = rest_field(
        name="lastRefreshAt", visibility=["read"], format="rfc3339"
    )
    """Last Update Timestamp for key updation."""

    @overload
    def __init__(
        self,
        *,
        open_ai_resource_id: Optional[str] = None,
        open_ai_resource_endpoint: Optional[str] = None,
        open_ai_connector_id: Optional[str] = None,
        key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenAIIntegrationRPModel(ProxyResource):
    """Capture properties of Open AI resource Integration.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.elastic.models.SystemData
    :ivar properties: Open AI Integration details.
    :vartype properties: ~azure.mgmt.elastic.models.OpenAIIntegrationProperties
    """

    properties: Optional["_models.OpenAIIntegrationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Open AI Integration details."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.OpenAIIntegrationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenAIIntegrationStatusResponse(_Model):
    """Status of the OpenAI Integration.

    :ivar properties: Status of the OpenAI Integration.
    :vartype properties: ~azure.mgmt.elastic.models.OpenAIIntegrationStatusResponseProperties
    """

    properties: Optional["_models.OpenAIIntegrationStatusResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of the OpenAI Integration."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.OpenAIIntegrationStatusResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenAIIntegrationStatusResponseProperties(_Model):  # pylint: disable=name-too-long
    """Status of the OpenAI Integration.

    :ivar status: Status of the OpenAI Integration.
    :vartype status: str
    """

    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the OpenAI Integration."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Represents the display information for an operation.

    :ivar provider: The service provider of the operation.
    :vartype provider: str
    :ivar resource: The resource type of the operation.
    :vartype resource: str
    :ivar operation: The name of the operation.
    :vartype operation: str
    :ivar description: A description of the operation.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The service provider of the operation."""
    resource: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type of the operation."""
    operation: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the operation."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the operation."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationResult(_Model):
    """A Microsoft.Elastic REST API operation.

    :ivar name: Operation name, i.e., {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar display: The object that represents the operation.
    :vartype display: ~azure.mgmt.elastic.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Operation name, i.e., {provider}/{resource}/{operation}."""
    is_data_action: Optional[bool] = rest_field(
        name="isDataAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the operation is a data action."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The object that represents the operation."""
    origin: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Origin of the operation."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PartnerBillingEntity(_Model):
    """Partner Billing details associated with the resource.

    :ivar id: The Elastic Organization Id.
    :vartype id: str
    :ivar name: The Elastic Organization Name.
    :vartype name: str
    :ivar partner_entity_uri: Link to the elastic organization page.
    :vartype partner_entity_uri: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Elastic Organization Id."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Elastic Organization Name."""
    partner_entity_uri: Optional[str] = rest_field(
        name="partnerEntityUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to the elastic organization page."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        partner_entity_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PlanDetails(_Model):
    """Plan details of the monitor resource.

    :ivar offer_id: Offer ID of the plan.
    :vartype offer_id: str
    :ivar publisher_id: Publisher ID of the plan.
    :vartype publisher_id: str
    :ivar term_id: Term ID of the plan.
    :vartype term_id: str
    :ivar plan_id: Plan ID.
    :vartype plan_id: str
    :ivar plan_name: Plan Name.
    :vartype plan_name: str
    """

    offer_id: Optional[str] = rest_field(name="offerID", visibility=["read", "create", "update", "delete", "query"])
    """Offer ID of the plan."""
    publisher_id: Optional[str] = rest_field(
        name="publisherID", visibility=["read", "create", "update", "delete", "query"]
    )
    """Publisher ID of the plan."""
    term_id: Optional[str] = rest_field(name="termID", visibility=["read", "create", "update", "delete", "query"])
    """Term ID of the plan."""
    plan_id: Optional[str] = rest_field(name="planID", visibility=["read", "create", "update", "delete", "query"])
    """Plan ID."""
    plan_name: Optional[str] = rest_field(name="planName", visibility=["read", "create", "update", "delete", "query"])
    """Plan Name."""

    @overload
    def __init__(
        self,
        *,
        offer_id: Optional[str] = None,
        publisher_id: Optional[str] = None,
        term_id: Optional[str] = None,
        plan_id: Optional[str] = None,
        plan_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProjectDetails(_Model):
    """Project details of the monitor resource IF it belongs to Serverless offer kind.

    :ivar project_type: Project type; ex: Elasticsearch / Observability / Security. Known values
     are: "Elasticsearch", "Observability", "Security", and "NotApplicable".
    :vartype project_type: str or ~azure.mgmt.elastic.models.ProjectType
    :ivar configuration_type: Configuration type of the Elasticsearch project. Known values are:
     "GeneralPurpose", "Vector", "TimeSeries", and "NotApplicable".
    :vartype configuration_type: str or ~azure.mgmt.elastic.models.ConfigurationType
    """

    project_type: Optional[Union[str, "_models.ProjectType"]] = rest_field(
        name="projectType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Project type; ex: Elasticsearch / Observability / Security. Known values are:
     \"Elasticsearch\", \"Observability\", \"Security\", and \"NotApplicable\"."""
    configuration_type: Optional[Union[str, "_models.ConfigurationType"]] = rest_field(
        name="configurationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration type of the Elasticsearch project. Known values are: \"GeneralPurpose\",
     \"Vector\", \"TimeSeries\", and \"NotApplicable\"."""

    @overload
    def __init__(
        self,
        *,
        project_type: Optional[Union[str, "_models.ProjectType"]] = None,
        configuration_type: Optional[Union[str, "_models.ConfigurationType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceProviderDefaultErrorResponse(_Model):
    """RP default error response.

    :ivar error: Response body of Error.
    :vartype error: ~azure.mgmt.elastic.models.ErrorResponseBody
    """

    error: Optional["_models.ErrorResponseBody"] = rest_field(visibility=["read"])
    """Response body of Error."""


class ResourceSku(_Model):
    """Represents the SKU of a resource.

    :ivar name: The name of the SKU. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the SKU. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResubscribeParameterBody(_Model):
    """ResubscribeParameterBody.

    :ivar body: Resubscribe Properties.
    :vartype body: ~azure.mgmt.elastic.models.ResubscribeProperties
    """

    body: Optional["_models.ResubscribeProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Resubscribe Properties."""

    @overload
    def __init__(
        self,
        *,
        body: Optional["_models.ResubscribeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResubscribeProperties(_Model):
    """Resubscribe Properties.

    :ivar plan_id: Newly selected plan Id to create the new Marketplace subscription for
     Resubscribe.
    :vartype plan_id: str
    :ivar term: Newly selected term to create the new Marketplace subscription for Resubscribe.
    :vartype term: str
    :ivar subscription_id: Newly selected Azure Subscription Id in which the new Marketplace
     subscription will be created for Resubscribe.
    :vartype subscription_id: str
    :ivar resource_group: Newly selected Azure resource group in which the new Marketplace
     subscription will be created for Resubscribe.
    :vartype resource_group: str
    :ivar organization_id: Organization Id of the Elastic Organization that needs to be
     resubscribed.
    :vartype organization_id: str
    """

    plan_id: Optional[str] = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """Newly selected plan Id to create the new Marketplace subscription for Resubscribe."""
    term: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Newly selected term to create the new Marketplace subscription for Resubscribe."""
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Newly selected Azure Subscription Id in which the new Marketplace subscription will be created
     for Resubscribe."""
    resource_group: Optional[str] = rest_field(
        name="resourceGroup", visibility=["read", "create", "update", "delete", "query"]
    )
    """Newly selected Azure resource group in which the new Marketplace subscription will be created
     for Resubscribe."""
    organization_id: Optional[str] = rest_field(
        name="organizationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Organization Id of the Elastic Organization that needs to be resubscribed."""

    @overload
    def __init__(
        self,
        *,
        plan_id: Optional[str] = None,
        term: Optional[str] = None,
        subscription_id: Optional[str] = None,
        resource_group: Optional[str] = None,
        organization_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubscriptionList(_Model):
    """The request to update subscriptions needed to be monitored by the Elastic monitor resource.

    :ivar operation: The operation for the patch on the resource. Known values are: "AddBegin",
     "AddComplete", "DeleteBegin", "DeleteComplete", and "Active".
    :vartype operation: str or ~azure.mgmt.elastic.models.Operation
    :ivar monitored_subscription_list: List of subscriptions and the state of the monitoring.
    :vartype monitored_subscription_list: list[~azure.mgmt.elastic.models.MonitoredSubscription]
    :ivar provisioning_state: Provisioning State of the resource. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.elastic.models.ProvisioningState
    """

    operation: Optional[Union[str, "_models.Operation"]] = rest_field(visibility=["create", "update"])
    """The operation for the patch on the resource. Known values are: \"AddBegin\", \"AddComplete\",
     \"DeleteBegin\", \"DeleteComplete\", and \"Active\"."""
    monitored_subscription_list: Optional[List["_models.MonitoredSubscription"]] = rest_field(
        name="monitoredSubscriptionList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of subscriptions and the state of the monitoring."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State of the resource. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""

    @overload
    def __init__(
        self,
        *,
        operation: Optional[Union[str, "_models.Operation"]] = None,
        monitored_subscription_list: Optional[List["_models.MonitoredSubscription"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.elastic.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.elastic.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpgradableVersionsList(_Model):
    """Stack Versions that this version can upgrade to.

    :ivar current_version: Current version of the elastic monitor.
    :vartype current_version: str
    :ivar upgradable_versions: Stack Versions that this version can upgrade to.
    :vartype upgradable_versions: list[str]
    """

    current_version: Optional[str] = rest_field(
        name="currentVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current version of the elastic monitor."""
    upgradable_versions: Optional[List[str]] = rest_field(
        name="upgradableVersions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Stack Versions that this version can upgrade to."""

    @overload
    def __init__(
        self,
        *,
        current_version: Optional[str] = None,
        upgradable_versions: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpgradeParameterBody(_Model):
    """UpgradeParameterBody.

    :ivar body: Elastic Monitor Upgrade Parameters.
    :vartype body: ~azure.mgmt.elastic.models.ElasticMonitorUpgrade
    """

    body: Optional["_models.ElasticMonitorUpgrade"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Elastic Monitor Upgrade Parameters."""

    @overload
    def __init__(
        self,
        *,
        body: Optional["_models.ElasticMonitorUpgrade"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserApiKeyResponse(_Model):
    """The User Api Key created for the Organization associated with the User Email Id that was passed
    in the request.

    :ivar properties:
    :vartype properties: ~azure.mgmt.elastic.models.UserApiKeyResponseProperties
    """

    properties: Optional["_models.UserApiKeyResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.UserApiKeyResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserApiKeyResponseProperties(_Model):
    """UserApiKeyResponseProperties.

    :ivar api_key: The User Api Key Generated based on GenerateApiKey flag. This is applicable for
     non-Portal clients only.
    :vartype api_key: str
    """

    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """The User Api Key Generated based on GenerateApiKey flag. This is applicable for non-Portal
     clients only."""

    @overload
    def __init__(
        self,
        *,
        api_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserEmailId(_Model):
    """Email Id of the User Organization, of which the API Key must be returned.

    :ivar email_id: The User email Id.
    :vartype email_id: str
    """

    email_id: Optional[str] = rest_field(name="emailId", visibility=["read", "create", "update", "delete", "query"])
    """The User email Id."""

    @overload
    def __init__(
        self,
        *,
        email_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserInfo(_Model):
    """User Information to be passed to partners.

    :ivar first_name: First name of the user.
    :vartype first_name: str
    :ivar last_name: Last name of the user.
    :vartype last_name: str
    :ivar company_name: Company name of the user.
    :vartype company_name: str
    :ivar email_address: Email of the user used by Elastic for contacting them if needed.
    :vartype email_address: str
    :ivar company_info: Company information of the user to be passed to partners.
    :vartype company_info: ~azure.mgmt.elastic.models.CompanyInfo
    """

    first_name: Optional[str] = rest_field(name="firstName", visibility=["read", "create", "update", "delete", "query"])
    """First name of the user."""
    last_name: Optional[str] = rest_field(name="lastName", visibility=["read", "create", "update", "delete", "query"])
    """Last name of the user."""
    company_name: Optional[str] = rest_field(
        name="companyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Company name of the user."""
    email_address: Optional[str] = rest_field(
        name="emailAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Email of the user used by Elastic for contacting them if needed."""
    company_info: Optional["_models.CompanyInfo"] = rest_field(
        name="companyInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Company information of the user to be passed to partners."""

    @overload
    def __init__(
        self,
        *,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        company_name: Optional[str] = None,
        email_address: Optional[str] = None,
        company_info: Optional["_models.CompanyInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMCollectionUpdate(_Model):
    """Update VM resource collection.

    :ivar vm_resource_id: ARM id of the VM resource.
    :vartype vm_resource_id: str
    :ivar operation_name: Operation to be performed for given VM. Known values are: "Add" and
     "Delete".
    :vartype operation_name: str or ~azure.mgmt.elastic.models.OperationName
    """

    vm_resource_id: Optional[str] = rest_field(
        name="vmResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ARM id of the VM resource."""
    operation_name: Optional[Union[str, "_models.OperationName"]] = rest_field(
        name="operationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Operation to be performed for given VM. Known values are: \"Add\" and \"Delete\"."""

    @overload
    def __init__(
        self,
        *,
        vm_resource_id: Optional[str] = None,
        operation_name: Optional[Union[str, "_models.OperationName"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMCollectionUpdateParameterBody(_Model):
    """VMCollectionUpdateParameterBody.

    :ivar body: VM resource Id.
    :vartype body: ~azure.mgmt.elastic.models.VMCollectionUpdate
    """

    body: Optional["_models.VMCollectionUpdate"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """VM resource Id."""

    @overload
    def __init__(
        self,
        *,
        body: Optional["_models.VMCollectionUpdate"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMIngestionDetailsResponse(_Model):
    """The vm ingestion details to install an agent.

    :ivar cloud_id: The cloudId of given Elastic monitor resource.
    :vartype cloud_id: str
    :ivar ingestion_key: Ingestion details to install agent on given VM.
    :vartype ingestion_key: str
    """

    cloud_id: Optional[str] = rest_field(name="cloudId", visibility=["read", "create", "update", "delete", "query"])
    """The cloudId of given Elastic monitor resource."""
    ingestion_key: Optional[str] = rest_field(
        name="ingestionKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Ingestion details to install agent on given VM."""

    @overload
    def __init__(
        self,
        *,
        cloud_id: Optional[str] = None,
        ingestion_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMResources(_Model):
    """The vm resource properties that is currently being monitored by the Elastic monitor resource.

    :ivar vm_resource_id: The ARM id of the VM resource.
    :vartype vm_resource_id: str
    """

    vm_resource_id: Optional[str] = rest_field(
        name="vmResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ARM id of the VM resource."""

    @overload
    def __init__(
        self,
        *,
        vm_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
