# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._configuration import ReportingClientConfiguration
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Deserializer, Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
_Unset: Any = object()
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_test_runs_create_or_update_request(account_id: str, test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs/{testRunId}"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
        "testRunId": _SERIALIZER.url("test_run_id", test_run_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_get_request(account_id: str, test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs/{testRunId}"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
        "testRunId": _SERIALIZER.url("test_run_id", test_run_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_list_request(
    account_id: str,
    *,
    top: Optional[int] = None,
    skip: Optional[int] = None,
    maxpagesize: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    if maxpagesize is not None:
        _params["maxpagesize"] = _SERIALIZER.query("maxpagesize", maxpagesize, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_create_artifacts_upload_base_url_request(  # pylint: disable=name-too-long
    account_id: str, test_run_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs/{testRunId}:createArtifactsUploadBaseUrl"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
        "testRunId": _SERIALIZER.url("test_run_id", test_run_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_update_shard_execution_status_request(  # pylint: disable=name-too-long
    account_id: str, test_run_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs/{testRunId}:updateShardExecutionStatus"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
        "testRunId": _SERIALIZER.url("test_run_id", test_run_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_compute_account_run_stats_request(  # pylint: disable=name-too-long
    account_id: str,
    *,
    top: Optional[int] = None,
    skip: Optional[int] = None,
    maxpagesize: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs:accountRunStats"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    if maxpagesize is not None:
        _params["maxpagesize"] = _SERIALIZER.query("maxpagesize", maxpagesize, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_runs_compute_metadata_request(account_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-runs:metadata"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_results_upload_batch_request(account_id: str, *, test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-results:uploadBatch"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["testRunId"] = _SERIALIZER.query("test_run_id", test_run_id, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_results_list_request(
    account_id: str,
    *,
    top: Optional[int] = None,
    skip: Optional[int] = None,
    maxpagesize: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-results"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    if maxpagesize is not None:
        _params["maxpagesize"] = _SERIALIZER.query("maxpagesize", maxpagesize, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_test_results_compute_results_stats_request(  # pylint: disable=name-too-long
    account_id: str,
    *,
    top: Optional[int] = None,
    skip: Optional[int] = None,
    maxpagesize: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-24"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/accounts/{accountId}/test-results:resultsStats"
    path_format_arguments = {
        "accountId": _SERIALIZER.url("account_id", account_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    if maxpagesize is not None:
        _params["maxpagesize"] = _SERIALIZER.query("maxpagesize", maxpagesize, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class TestRunsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.microsoftplaywrighttesting.ReportingClient`'s
        :attr:`test_runs` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: ReportingClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create_or_update(
        self,
        account_id: str,
        test_run_id: str,
        resource: _models.TestRun,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestRun:
        """Creates or updates a testrun.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param resource: The resource instance. Required.
        :type resource: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(
        self,
        account_id: str,
        test_run_id: str,
        resource: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestRun:
        """Creates or updates a testrun.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param resource: The resource instance. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(
        self,
        account_id: str,
        test_run_id: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestRun:
        """Creates or updates a testrun.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param resource: The resource instance. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update(
        self, account_id: str, test_run_id: str, resource: Union[_models.TestRun, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestRun:
        """Creates or updates a testrun.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param resource: The resource instance. Is one of the following types: TestRun, JSON, IO[bytes]
         Required.
        :type resource: ~azure.developer.microsoftplaywrighttesting.models.TestRun or JSON or IO[bytes]
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TestRun] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_test_runs_create_or_update_request(
            account_id=account_id,
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get(self, account_id: str, test_run_id: str, **kwargs: Any) -> _models.TestRun:
        """Gets a test run.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRun] = kwargs.pop("cls", None)

        _request = build_test_runs_get_request(
            account_id=account_id,
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list(
        self,
        account_id: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.TestRun"]:
        """List test runs. Supported filters are triggeredAt with operator ge, status and branch  with in
        operator, displayName with eq operator.

        :param account_id: The account id. Required.
        :type account_id: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword filter: Filter the result list using the given expression. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of TestRun
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.developer.microsoftplaywrighttesting.models.TestRun]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.TestRun]] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_test_runs_list_request(
                    account_id=account_id,
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestRun], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def create_artifacts_upload_base_url(
        self, account_id: str, test_run_id: str, **kwargs: Any
    ) -> _models.TestResultsUrl:
        """Get TestResults Upload Url.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :return: TestResultsUrl. The TestResultsUrl is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestResultsUrl
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestResultsUrl] = kwargs.pop("cls", None)

        _request = build_test_runs_create_artifacts_upload_base_url_request(
            account_id=account_id,
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestResultsUrl, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update_shard_execution_status(
        self,
        account_id: str,
        test_run_id: str,
        *,
        shard_id: int,
        summary: _models.UpdateShardExecutionSummary,
        workers_count: int,
        content_type: str = "application/json",
        upload_completed: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """Resource action operation template.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :keyword shard_id: Shard Id for the shard- indexed 1,2,3 etc. Required.
        :paramtype shard_id: int
        :keyword summary: Summary of the test run shard. Required.
        :paramtype summary:
         ~azure.developer.microsoftplaywrighttesting.models.UpdateShardExecutionSummary
        :keyword workers_count: number of workers used by playwright client. Required.
        :paramtype workers_count: int
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword upload_completed: Flag indicating if upload is completed for the shard. Default value
         is None.
        :paramtype upload_completed: bool
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_shard_execution_status(
        self, account_id: str, test_run_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Resource action operation template.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_shard_execution_status(
        self,
        account_id: str,
        test_run_id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Resource action operation template.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_shard_execution_status(  # pylint: disable=inconsistent-return-statements
        self,
        account_id: str,
        test_run_id: str,
        body: Union[JSON, IO[bytes]] = _Unset,
        *,
        shard_id: int = _Unset,
        summary: _models.UpdateShardExecutionSummary = _Unset,
        workers_count: int = _Unset,
        upload_completed: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """Resource action operation template.

        :param account_id: The account id. Required.
        :type account_id: str
        :param test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
         control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
         consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
        :type test_run_id: str
        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword shard_id: Shard Id for the shard- indexed 1,2,3 etc. Required.
        :paramtype shard_id: int
        :keyword summary: Summary of the test run shard. Required.
        :paramtype summary:
         ~azure.developer.microsoftplaywrighttesting.models.UpdateShardExecutionSummary
        :keyword workers_count: number of workers used by playwright client. Required.
        :paramtype workers_count: int
        :keyword upload_completed: Flag indicating if upload is completed for the shard. Default value
         is None.
        :paramtype upload_completed: bool
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        if body is _Unset:
            if shard_id is _Unset:
                raise TypeError("missing required argument: shard_id")
            if summary is _Unset:
                raise TypeError("missing required argument: summary")
            if workers_count is _Unset:
                raise TypeError("missing required argument: workers_count")
            body = {
                "shardId": shard_id,
                "summary": summary,
                "uploadCompleted": upload_completed,
                "workersCount": workers_count,
            }
            body = {k: v for k, v in body.items() if v is not None}
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_test_runs_update_shard_execution_status_request(
            account_id=account_id,
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def compute_account_run_stats(
        self,
        account_id: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.AccountTestRunStats:
        """Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge,
        status and branch  with in operator, displayName with eq operator.

        :param account_id: The account id. Required.
        :type account_id: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword filter: Filter the result list using the given expression. Default value is None.
        :paramtype filter: str
        :return: AccountTestRunStats. The AccountTestRunStats is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.AccountTestRunStats
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[_models.AccountTestRunStats] = kwargs.pop("cls", None)

        _request = build_test_runs_compute_account_run_stats_request(
            account_id=account_id,
            top=top,
            skip=skip,
            maxpagesize=maxpagesize,
            filter=filter,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.AccountTestRunStats, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def compute_metadata(self, account_id: str, **kwargs: Any) -> _models.TestRunsMetadata:
        """Get TestRuns metadata for all runs in an account.

        :param account_id: The account id. Required.
        :type account_id: str
        :return: TestRunsMetadata. The TestRunsMetadata is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.TestRunsMetadata
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRunsMetadata] = kwargs.pop("cls", None)

        _request = build_test_runs_compute_metadata_request(
            account_id=account_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRunsMetadata, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class TestResultsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.microsoftplaywrighttesting.ReportingClient`'s
        :attr:`test_results` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: ReportingClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def upload_batch(
        self,
        account_id: str,
        *,
        test_run_id: str,
        values: List[_models.TestResultDetails],
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Upload Test Results.

        :param account_id: The account id. Required.
        :type account_id: str
        :keyword test_run_id: All unicode characters except ASCII control characters, special Git
         characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
         start/end with a slash (/) or start with period (.). Required.
        :paramtype test_run_id: str
        :keyword values: List of test results. Required.
        :paramtype values: list[~azure.developer.microsoftplaywrighttesting.models.TestResultDetails]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def upload_batch(
        self, account_id: str, body: JSON, *, test_run_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Upload Test Results.

        :param account_id: The account id. Required.
        :type account_id: str
        :param body: Required.
        :type body: JSON
        :keyword test_run_id: All unicode characters except ASCII control characters, special Git
         characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
         start/end with a slash (/) or start with period (.). Required.
        :paramtype test_run_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def upload_batch(
        self,
        account_id: str,
        body: IO[bytes],
        *,
        test_run_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Upload Test Results.

        :param account_id: The account id. Required.
        :type account_id: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword test_run_id: All unicode characters except ASCII control characters, special Git
         characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
         start/end with a slash (/) or start with period (.). Required.
        :paramtype test_run_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def upload_batch(  # pylint: disable=inconsistent-return-statements
        self,
        account_id: str,
        body: Union[JSON, IO[bytes]] = _Unset,
        *,
        test_run_id: str,
        values: List[_models.TestResultDetails] = _Unset,
        **kwargs: Any
    ) -> None:
        """Upload Test Results.

        :param account_id: The account id. Required.
        :type account_id: str
        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword test_run_id: All unicode characters except ASCII control characters, special Git
         characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
         start/end with a slash (/) or start with period (.). Required.
        :paramtype test_run_id: str
        :keyword values: List of test results. Required.
        :paramtype values: list[~azure.developer.microsoftplaywrighttesting.models.TestResultDetails]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        if body is _Unset:
            if values is _Unset:
                raise TypeError("missing required argument: values")
            body = {"values_property": values}
            body = {k: v for k, v in body.items() if v is not None}
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_test_results_upload_batch_request(
            account_id=account_id,
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def list(
        self,
        account_id: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.TestResultDetails"]:
        """List Test Results.Supported filters are Supported filters are runid,testTitle with eq operator
        , project, jobname  tag, status with in operator.

        :param account_id: The account id. Required.
        :type account_id: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword filter: Filter the result list using the given expression. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of TestResultDetails
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.developer.microsoftplaywrighttesting.models.TestResultDetails]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.TestResultDetails]] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_test_results_list_request(
                    account_id=account_id,
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestResultDetails], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def compute_results_stats(
        self,
        account_id: str,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.ResultsStats:
        """Get Test Results summary.Supported filters are runid,testTitle with eq operator , project,
        jobname  tag, status with in operator.

        :param account_id: The account id. Required.
        :type account_id: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword filter: Filter the result list using the given expression. Default value is None.
        :paramtype filter: str
        :return: ResultsStats. The ResultsStats is compatible with MutableMapping
        :rtype: ~azure.developer.microsoftplaywrighttesting.models.ResultsStats
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[_models.ResultsStats] = kwargs.pop("cls", None)

        _request = build_test_results_compute_results_stats_request(
            account_id=account_id,
            top=top,
            skip=skip,
            maxpagesize=maxpagesize,
            filter=filter,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ResultsStats, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
