# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AccountTestRunStats(_model_base.Model):
    """Summary statistics of Testrun in an account.


    :ivar passed: Passed  runs within an account. Required.
    :vartype passed: int
    :ivar failed: Failed  runs within an account. Required.
    :vartype failed: int
    :ivar flaky: Flaky  runs within an account. Required.
    :vartype flaky: int
    :ivar all: Total  runs within an account. Required.
    :vartype all: int
    :ivar cloud_execution_runs: Cloud Executed runs within an account. Required.
    :vartype cloud_execution_runs: int
    """

    passed: int = rest_field()
    """Passed  runs within an account. Required."""
    failed: int = rest_field()
    """Failed  runs within an account. Required."""
    flaky: int = rest_field()
    """Flaky  runs within an account. Required."""
    all: int = rest_field()
    """Total  runs within an account. Required."""
    cloud_execution_runs: int = rest_field(name="cloudExecutionRuns")
    """Cloud Executed runs within an account. Required."""

    @overload
    def __init__(
        self,
        *,
        passed: int,
        failed: int,
        flaky: int,
        all: int,
        cloud_execution_runs: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CiConfig(_model_base.Model):
    """Model representing continuous integration (CI) configuration.

    :ivar ci_provider_name: Name of the CI provider.  GitHub | Azure DevOps | Default. Known values
     are: "GitHub", "Azure DevOps", and "Default".
    :vartype ci_provider_name: str or
     ~azure.developer.microsoftplaywrighttesting.models.CiProviderName
    :ivar branch: Branch name in the source code repository. All unicode characters except spaces,
     ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..),
     multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.).
    :vartype branch: str
    :ivar author: Author of the commit triggering the test run. All unicode characters except ASCII
     control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.).
    :vartype author: str
    :ivar commit_id: ID of the commit triggering the test run. This is the SHA-1 hash.
    :vartype commit_id: str
    :ivar revision_url: URL linking to the revision details. Should be a valid Url. Allowed
     characters- alphanumeric characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.),
     tildes (~), and forward slashes (/) for hierarchy. Special characters must be URL-encoded.
    :vartype revision_url: str
    """

    ci_provider_name: Optional[Union[str, "_models.CiProviderName"]] = rest_field(name="ciProviderName")
    """Name of the CI provider.  GitHub | Azure DevOps | Default. Known values are: \"GitHub\",
     \"Azure DevOps\", and \"Default\"."""
    branch: Optional[str] = rest_field()
    """Branch name in the source code repository. All unicode characters except spaces, ASCII control
     characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.)."""
    author: Optional[str] = rest_field()
    """Author of the commit triggering the test run. All unicode characters except ASCII control
     characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.)."""
    commit_id: Optional[str] = rest_field(name="commitId")
    """ID of the commit triggering the test run. This is the SHA-1 hash."""
    revision_url: Optional[str] = rest_field(name="revisionUrl")
    """URL linking to the revision details. Should be a valid Url. Allowed characters- alphanumeric
     characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward
     slashes (/) for hierarchy. Special characters must be URL-encoded."""

    @overload
    def __init__(
        self,
        *,
        ci_provider_name: Optional[Union[str, "_models.CiProviderName"]] = None,
        branch: Optional[str] = None,
        author: Optional[str] = None,
        commit_id: Optional[str] = None,
        revision_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudReportingSummary(_model_base.Model):
    """Model representing summary of test run results.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar start_time: Start time of the test run in datetime(RFC 3339 literal format). Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time of the test run. Required.
    :vartype end_time: ~datetime.datetime
    :ivar server_status: Processing Status of the testresults on the Server Side. Required. Known
     values are: "Running", "ClientComplete", and "ServerComplete".
    :vartype server_status: str or ~azure.developer.microsoftplaywrighttesting.models.TestRunStatus
    :ivar total_tests_count: Total number of tests executed.
    :vartype total_tests_count: int
    :ivar passed_tests_count: Number of tests that passed.
    :vartype passed_tests_count: int
    :ivar failed_tests_count: Number of tests that failed.
    :vartype failed_tests_count: int
    :ivar skipped_tests_count: Number of tests that were skipped.
    :vartype skipped_tests_count: int
    :ivar flaky_tests_count: Number of tests that were flaky (passed on retry).
    :vartype flaky_tests_count: int
    :ivar status: Status of the test run. Required. Known values are: "Passed", "Failed",
     "Skipped", "Flaky", "Interrupted", and "TimedOut".
    :vartype status: str or ~azure.developer.microsoftplaywrighttesting.models.TestStatus
    :ivar jobs: List of CI jobs associated with the test run.
    :vartype jobs: list[str]
    :ivar projects: List of Playwright projects (https://playwright.dev/docs/test-projects)
     associated with the test run.
    :vartype projects: list[str]
    :ivar tags: List of tags associated with the test run.
    :vartype tags: list[str]
    :ivar workers_count: Number of worker instances.
    :vartype workers_count: int
    """

    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """Start time of the test run in datetime(RFC 3339 literal format). Required."""
    end_time: datetime.datetime = rest_field(name="endTime", format="rfc3339")
    """End time of the test run. Required."""
    server_status: Union[str, "_models.TestRunStatus"] = rest_field(name="serverStatus")
    """Processing Status of the testresults on the Server Side. Required. Known values are:
     \"Running\", \"ClientComplete\", and \"ServerComplete\"."""
    total_tests_count: Optional[int] = rest_field(name="totalTestsCount", visibility=["read"])
    """Total number of tests executed."""
    passed_tests_count: Optional[int] = rest_field(name="passedTestsCount", visibility=["read"])
    """Number of tests that passed."""
    failed_tests_count: Optional[int] = rest_field(name="failedTestsCount", visibility=["read"])
    """Number of tests that failed."""
    skipped_tests_count: Optional[int] = rest_field(name="skippedTestsCount", visibility=["read"])
    """Number of tests that were skipped."""
    flaky_tests_count: Optional[int] = rest_field(name="flakyTestsCount", visibility=["read"])
    """Number of tests that were flaky (passed on retry)."""
    status: Union[str, "_models.TestStatus"] = rest_field(visibility=["read"])
    """Status of the test run. Required. Known values are: \"Passed\", \"Failed\", \"Skipped\",
     \"Flaky\", \"Interrupted\", and \"TimedOut\"."""
    jobs: Optional[List[str]] = rest_field(visibility=["read"])
    """List of CI jobs associated with the test run."""
    projects: Optional[List[str]] = rest_field(visibility=["read"])
    """List of Playwright projects (https://playwright.dev/docs/test-projects) associated with the
     test run."""
    tags: Optional[List[str]] = rest_field(visibility=["read"])
    """List of tags associated with the test run."""
    workers_count: Optional[int] = rest_field(name="workersCount", visibility=["read", "create"])
    """Number of worker instances."""

    @overload
    def __init__(
        self,
        *,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        server_status: Union[str, "_models.TestRunStatus"],
        workers_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudRunSummary(_model_base.Model):
    """Model representing summary information about a test run.


    :ivar server_status: Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE |
     SERVER_COMPLETE. Required. Known values are: "Running", "ClientComplete", and "ServerComplete".
    :vartype server_status: str or ~azure.developer.microsoftplaywrighttesting.models.TestRunStatus
    :ivar billable_time_in_ms: Billable time for the test run. Available after testRun Ends.
    :vartype billable_time_in_ms: int
    :ivar total_time_in_ms: Total time taken for the test run.
    :vartype total_time_in_ms: int
    :ivar browser_sessions_count: Number of browser sessions used in the test run.
    :vartype browser_sessions_count: int
    :ivar browser_quota_exceeded: Flag indicating whether the test run was throttled due to
     reaching the maximum allowed parallel browser limit for the workspace. Required.
    :vartype browser_quota_exceeded: bool
    """

    server_status: Union[str, "_models.TestRunStatus"] = rest_field(name="serverStatus")
    """Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE. Required.
     Known values are: \"Running\", \"ClientComplete\", and \"ServerComplete\"."""
    billable_time_in_ms: Optional[int] = rest_field(name="billableTimeInMs")
    """Billable time for the test run. Available after testRun Ends."""
    total_time_in_ms: Optional[int] = rest_field(name="totalTimeInMs")
    """Total time taken for the test run."""
    browser_sessions_count: Optional[int] = rest_field(name="browserSessionsCount")
    """Number of browser sessions used in the test run."""
    browser_quota_exceeded: bool = rest_field(name="browserQuotaExceeded")
    """Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel
     browser limit for the workspace. Required."""

    @overload
    def __init__(
        self,
        *,
        server_status: Union[str, "_models.TestRunStatus"],
        browser_quota_exceeded: bool,
        billable_time_in_ms: Optional[int] = None,
        total_time_in_ms: Optional[int] = None,
        browser_sessions_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PreviousRetrySummary(_model_base.Model):
    """Summary of previous retries.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar test_execution_id: Identifier of the test execution. Required.
    :vartype test_execution_id: str
    :ivar retry_count: Number of retryCount attempts. Required.
    :vartype retry_count: int
    :ivar status: Status of the test execution. Required. Known values are: "Passed", "Failed",
     "Skipped", "Flaky", "Interrupted", and "TimedOut".
    :vartype status: str or ~azure.developer.microsoftplaywrighttesting.models.TestStatus
    :ivar duration_in_ms: Duration of the test execution. Required.
    :vartype duration_in_ms: ~datetime.timedelta
    :ivar start_time: Start time of the test execution- RFC 3339 literal format. Required.
    :vartype start_time: ~datetime.datetime
    :ivar attachments_metadata: Metadata related to attachments. Required.
    :vartype attachments_metadata: list[str or
     ~azure.developer.microsoftplaywrighttesting.models.AttachmentKind]
    :ivar artifacts_path: List of artifacts paths.
    :vartype artifacts_path: str
    """

    test_execution_id: str = rest_field(name="testExecutionId")
    """Identifier of the test execution. Required."""
    retry_count: int = rest_field(name="retryCount")
    """Number of retryCount attempts. Required."""
    status: Union[str, "_models.TestStatus"] = rest_field()
    """Status of the test execution. Required. Known values are: \"Passed\", \"Failed\", \"Skipped\",
     \"Flaky\", \"Interrupted\", and \"TimedOut\"."""
    duration_in_ms: datetime.timedelta = rest_field(name="durationInMs")
    """Duration of the test execution. Required."""
    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """Start time of the test execution- RFC 3339 literal format. Required."""
    attachments_metadata: List[Union[str, "_models.AttachmentKind"]] = rest_field(name="attachmentsMetadata")
    """Metadata related to attachments. Required."""
    artifacts_path: Optional[str] = rest_field(name="artifactsPath", visibility=["read"])
    """List of artifacts paths."""

    @overload
    def __init__(
        self,
        *,
        test_execution_id: str,
        retry_count: int,
        status: Union[str, "_models.TestStatus"],
        duration_in_ms: datetime.timedelta,
        start_time: datetime.datetime,
        attachments_metadata: List[Union[str, "_models.AttachmentKind"]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResultsStats(_model_base.Model):
    """Summary statistics of testresults in a run.


    :ivar passed: Passed test-results within a run. Required.
    :vartype passed: int
    :ivar failed: Failed tests within a run. Required.
    :vartype failed: int
    :ivar flaky: Flaky tests within a run. Required.
    :vartype flaky: int
    :ivar skipped: Skipped tests within a run. Required.
    :vartype skipped: int
    :ivar all: Total tests within a run. Required.
    :vartype all: int
    """

    passed: int = rest_field()
    """Passed test-results within a run. Required."""
    failed: int = rest_field()
    """Failed tests within a run. Required."""
    flaky: int = rest_field()
    """Flaky tests within a run. Required."""
    skipped: int = rest_field()
    """Skipped tests within a run. Required."""
    all: int = rest_field()
    """Total tests within a run. Required."""

    @overload
    def __init__(
        self,
        *,
        passed: int,
        failed: int,
        flaky: int,
        skipped: int,
        all: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ShardDetails(_model_base.Model):
    """Model representing a shard. Learn about Playwright sharding here:
    https://playwright.dev/docs/test-sharding.


    :ivar total: Total number of shards. Required.
    :vartype total: int
    """

    total: int = rest_field()
    """Total number of shards. Required."""

    @overload
    def __init__(
        self,
        *,
        total: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestFramework(_model_base.Model):
    """Model representing a test framework.


    :ivar name: Name of the test framework. Supported Frameworks are Playwright. Required.
     "Playwright"
    :vartype name: str or ~azure.developer.microsoftplaywrighttesting.models.TestFrameworkName
    :ivar version: Version of the test framework. Required.
    :vartype version: str
    :ivar runner_type: Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT.
     Required. Known values are: "MsTest", "Nunit", and "Playwright".
    :vartype runner_type: str or ~azure.developer.microsoftplaywrighttesting.models.RunnerType
    """

    name: Union[str, "_models.TestFrameworkName"] = rest_field()
    """Name of the test framework. Supported Frameworks are Playwright. Required. \"Playwright\""""
    version: str = rest_field()
    """Version of the test framework. Required."""
    runner_type: Union[str, "_models.RunnerType"] = rest_field(name="runnerType")
    """Name of the test runner.Supported Frameworks are MSTEST, Playwright, NUNIT. Required. Known
     values are: \"MsTest\", \"Nunit\", and \"Playwright\"."""

    @overload
    def __init__(
        self,
        *,
        name: Union[str, "_models.TestFrameworkName"],
        version: str,
        runner_type: Union[str, "_models.RunnerType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestResultDetails(_model_base.Model):
    """Details of a single test result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar test_execution_id: Identifier of the test execution. Should be a guid. Required.
    :vartype test_execution_id: str
    :ivar test_id: Identifier of the test. Required.
    :vartype test_id: str
    :ivar test_combination_id: Identifier of the test combination.This is SHA-1 hash. Required.
    :vartype test_combination_id: str
    :ivar run_id: Identifier of the test run. Required.
    :vartype run_id: str
    :ivar shard_id: Identifier of the shard. Required.
    :vartype shard_id: int
    :ivar account_id: Identifier of the account. Required.
    :vartype account_id: str
    :ivar suite_id: Identifier of the suite. Required.
    :vartype suite_id: str
    :ivar test_title: Title of the test. All unicode characters except ASCII control characters,
     special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype test_title: str
    :ivar suite_title: Title of the suite. All unicode characters except ASCII control characters,
     special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype suite_title: str
    :ivar file_name: Name of the file- subject to constraints of OS and programming language.
     Required.
    :vartype file_name: str
    :ivar line_number: Line number. Required.
    :vartype line_number: int
    :ivar retry_count: Number of retryCount attempts. Max retryCount is 100, after which
     testresults metadata will not be stored. Required.
    :vartype retry_count: int
    :ivar status: Status of the test result. While uploading results, a single test execution
     status can't be Flaky. Required. Known values are: "Passed", "Failed", "Skipped", "Flaky",
     "Interrupted", and "TimedOut".
    :vartype status: str or ~azure.developer.microsoftplaywrighttesting.models.TestStatus
    :ivar web_test_config: Configuration for the web test.
    :vartype web_test_config: ~azure.developer.microsoftplaywrighttesting.models.WebTestConfig
    :ivar ci_config: Continuous integration configuration.
    :vartype ci_config: ~azure.developer.microsoftplaywrighttesting.models.CiConfig
    :ivar duration_in_ms: Duration of the test execution in milliseconds. Required.
    :vartype duration_in_ms: int
    :ivar start_time: Start time of the test execution.- (RFC 3339 literal format). Required.
    :vartype start_time: ~datetime.datetime
    :ivar attachments_metadata: Metadata related to attachments- comma separated IMAGE, VIDEO,
     TRACE as applicable.
    :vartype attachments_metadata: list[str or
     ~azure.developer.microsoftplaywrighttesting.models.AttachmentKind]
    :ivar previous_retries: Previous retry summaries. While uploading results, each retry is
     uploaded separately.However, all the retries of a test gets grouped on the server side and can
     be retrieved as a single entity using GET API.
    :vartype previous_retries:
     list[~azure.developer.microsoftplaywrighttesting.models.PreviousRetrySummary]
    :ivar tags: List of tags associated with the test result. All unicode characters except ASCII
     control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.).
    :vartype tags: list[str]
    :ivar annotations: List of annotations (https://playwright.dev/docs/test-annotations).All
     unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [,
     ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start
     with period (.).
    :vartype annotations: list[str]
    :ivar artifacts_path: Relative path in storage for all the artifacts of this test. contain only
     lowercase letters, numbers, and hyphens, and cannot start or end with a hyphen or contain
     consecutive hyphens.
    :vartype artifacts_path: str
    """

    test_execution_id: str = rest_field(name="testExecutionId", visibility=["read", "create"])
    """Identifier of the test execution. Should be a guid. Required."""
    test_id: str = rest_field(name="testId", visibility=["read", "create"])
    """Identifier of the test. Required."""
    test_combination_id: str = rest_field(name="testCombinationId", visibility=["read", "create"])
    """Identifier of the test combination.This is SHA-1 hash. Required."""
    run_id: str = rest_field(name="runId", visibility=["read"])
    """Identifier of the test run. Required."""
    shard_id: int = rest_field(name="shardId", visibility=["read", "create"])
    """Identifier of the shard. Required."""
    account_id: str = rest_field(name="accountId", visibility=["read"])
    """Identifier of the account. Required."""
    suite_id: str = rest_field(name="suiteId", visibility=["read", "create"])
    """Identifier of the suite. Required."""
    test_title: str = rest_field(name="testTitle", visibility=["read", "create"])
    """Title of the test. All unicode characters except ASCII control characters, special Git
     characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     start/end with a slash (/) or start with period (.). Required."""
    suite_title: str = rest_field(name="suiteTitle", visibility=["read", "create"])
    """Title of the suite. All unicode characters except ASCII control characters, special Git
     characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     start/end with a slash (/) or start with period (.). Required."""
    file_name: str = rest_field(name="fileName", visibility=["read", "create"])
    """Name of the file- subject to constraints of OS and programming language. Required."""
    line_number: int = rest_field(name="lineNumber", visibility=["read", "create"])
    """Line number. Required."""
    retry_count: int = rest_field(name="retryCount", visibility=["read", "create"])
    """Number of retryCount attempts. Max retryCount is 100, after which testresults metadata will not
     be stored. Required."""
    status: Union[str, "_models.TestStatus"] = rest_field(visibility=["read", "create"])
    """Status of the test result. While uploading results, a single test execution status can't be
     Flaky. Required. Known values are: \"Passed\", \"Failed\", \"Skipped\", \"Flaky\",
     \"Interrupted\", and \"TimedOut\"."""
    web_test_config: Optional["_models.WebTestConfig"] = rest_field(name="webTestConfig", visibility=["read", "create"])
    """Configuration for the web test."""
    ci_config: Optional["_models.CiConfig"] = rest_field(name="ciConfig", visibility=["read"])
    """Continuous integration configuration."""
    duration_in_ms: int = rest_field(name="durationInMs")
    """Duration of the test execution in milliseconds. Required."""
    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """Start time of the test execution.- (RFC 3339 literal format). Required."""
    attachments_metadata: Optional[List[Union[str, "_models.AttachmentKind"]]] = rest_field(name="attachmentsMetadata")
    """Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as applicable."""
    previous_retries: Optional[List["_models.PreviousRetrySummary"]] = rest_field(
        name="previousRetries", visibility=["read"]
    )
    """Previous retry summaries. While uploading results, each retry is uploaded separately.However,
     all the retries of a test gets grouped on the server side and can be retrieved as a single
     entity using GET API."""
    tags: Optional[List[str]] = rest_field(visibility=["read", "create"])
    """List of tags associated with the test result. All unicode characters except ASCII control
     characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive
     slashes (//), or start/end with a slash (/) or start with period (.)."""
    annotations: Optional[List[str]] = rest_field(visibility=["read", "create"])
    """List of annotations (https://playwright.dev/docs/test-annotations).All unicode characters
     except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots
     (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period
     (.)."""
    artifacts_path: Optional[str] = rest_field(name="artifactsPath", visibility=["read", "create"])
    """Relative path in storage for all the artifacts of this test. contain only lowercase letters,
     numbers, and hyphens, and cannot start or end with a hyphen or contain consecutive hyphens."""

    @overload
    def __init__(
        self,
        *,
        test_execution_id: str,
        test_id: str,
        test_combination_id: str,
        shard_id: int,
        suite_id: str,
        test_title: str,
        suite_title: str,
        file_name: str,
        line_number: int,
        retry_count: int,
        status: Union[str, "_models.TestStatus"],
        duration_in_ms: int,
        start_time: datetime.datetime,
        web_test_config: Optional["_models.WebTestConfig"] = None,
        attachments_metadata: Optional[List[Union[str, "_models.AttachmentKind"]]] = None,
        tags: Optional[List[str]] = None,
        annotations: Optional[List[str]] = None,
        artifacts_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestResultsUrl(_model_base.Model):
    """Model representing a test results URL.


    :ivar url: URL for accessing test results. Required.
    :vartype url: str
    :ivar created_at: Creation timestamp of the test results URL- RFC 3339 literal format.
     Required.
    :vartype created_at: ~datetime.datetime
    :ivar expires_at: Expiration timestamp of the test results URL- RFC 3339 literal format.
     Required.
    :vartype expires_at: ~datetime.datetime
    :ivar access_level: Access level for the test results URL. Required. Known values are: "Read",
     "Write", "ReadWrite", and "ReadAddCreateWrite".
    :vartype access_level: str or ~azure.developer.microsoftplaywrighttesting.models.AccessLevel
    """

    url: str = rest_field()
    """URL for accessing test results. Required."""
    created_at: datetime.datetime = rest_field(name="createdAt", format="rfc3339")
    """Creation timestamp of the test results URL- RFC 3339 literal format. Required."""
    expires_at: datetime.datetime = rest_field(name="expiresAt", format="rfc3339")
    """Expiration timestamp of the test results URL- RFC 3339 literal format. Required."""
    access_level: Union[str, "_models.AccessLevel"] = rest_field(name="accessLevel")
    """Access level for the test results URL. Required. Known values are: \"Read\", \"Write\",
     \"ReadWrite\", and \"ReadAddCreateWrite\"."""

    @overload
    def __init__(
        self,
        *,
        url: str,
        created_at: datetime.datetime,
        expires_at: datetime.datetime,
        access_level: Union[str, "_models.AccessLevel"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestRun(_model_base.Model):
    """Model representing detailed information about a test run.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar test_run_id: Identifier of the test run. All unicode characters except spaces, ASCII
     control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype test_run_id: str
    :ivar display_name: Display name of the test run All unicode characters except ASCII control
     characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype display_name: str
    :ivar creation_time: Creation time of the test run -RFC 3339 literal format. Required.
    :vartype creation_time: ~datetime.datetime
    :ivar creator_id: Creator's identifier. It's the Id referred in the access/Entra token.
     Required.
    :vartype creator_id: str
    :ivar creator_name: Creator's name. Required.
    :vartype creator_name: str
    :ivar cloud_run_summary: Summary of the Cloud executed run. Only available if cloud run is
     enabled.
    :vartype cloud_run_summary: ~azure.developer.microsoftplaywrighttesting.models.CloudRunSummary
    :ivar cloud_report_summary: Summary of reports uploaded on cloud. Only available if cloud
     reporting is enabled.
    :vartype cloud_report_summary:
     ~azure.developer.microsoftplaywrighttesting.models.CloudReportingSummary
    :ivar ci_config: Continuous integration configuration.
    :vartype ci_config: ~azure.developer.microsoftplaywrighttesting.models.CiConfig
    :ivar test_run_config: Client configuration for the test run.
    :vartype test_run_config: ~azure.developer.microsoftplaywrighttesting.models.TestRunConfig
    :ivar test_results_url: URL for accessing test results.
    :vartype test_results_url: ~azure.developer.microsoftplaywrighttesting.models.TestResultsUrl
    :ivar cloud_run_enabled: Flag indicating if cloud run is enabled. Required.
    :vartype cloud_run_enabled: bool
    :ivar cloud_reporting_enabled: Must be set to true when users want to use Reporting Feature.
     Required.
    :vartype cloud_reporting_enabled: bool
    """

    test_run_id: str = rest_field(name="testRunId", visibility=["read"])
    """Identifier of the test run. All unicode characters except spaces, ASCII control characters,
     special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     (//), or start/end with a slash (/) or start with period (.). Required."""
    display_name: str = rest_field(name="displayName", visibility=["read", "create"])
    """Display name of the test run All unicode characters except ASCII control characters, special
     Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     start/end with a slash (/) or start with period (.). Required."""
    creation_time: datetime.datetime = rest_field(name="creationTime", visibility=["read", "create"], format="rfc3339")
    """Creation time of the test run -RFC 3339 literal format. Required."""
    creator_id: str = rest_field(name="creatorId", visibility=["read"])
    """Creator's identifier. It's the Id referred in the access/Entra token. Required."""
    creator_name: str = rest_field(name="creatorName", visibility=["read"])
    """Creator's name. Required."""
    cloud_run_summary: Optional["_models.CloudRunSummary"] = rest_field(name="cloudRunSummary", visibility=["read"])
    """Summary of the Cloud executed run. Only available if cloud run is enabled."""
    cloud_report_summary: Optional["_models.CloudReportingSummary"] = rest_field(
        name="cloudReportSummary", visibility=["read"]
    )
    """Summary of reports uploaded on cloud. Only available if cloud reporting is enabled."""
    ci_config: Optional["_models.CiConfig"] = rest_field(name="ciConfig", visibility=["read", "create"])
    """Continuous integration configuration."""
    test_run_config: Optional["_models.TestRunConfig"] = rest_field(name="testRunConfig", visibility=["read", "create"])
    """Client configuration for the test run."""
    test_results_url: Optional["_models.TestResultsUrl"] = rest_field(name="testResultsUrl", visibility=["read"])
    """URL for accessing test results."""
    cloud_run_enabled: bool = rest_field(name="cloudRunEnabled", visibility=["read"])
    """Flag indicating if cloud run is enabled. Required."""
    cloud_reporting_enabled: bool = rest_field(name="cloudReportingEnabled", visibility=["read", "create"])
    """Must be set to true when users want to use Reporting Feature. Required."""

    @overload
    def __init__(
        self,
        *,
        display_name: str,
        creation_time: datetime.datetime,
        cloud_reporting_enabled: bool,
        ci_config: Optional["_models.CiConfig"] = None,
        test_run_config: Optional["_models.TestRunConfig"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestRunConfig(_model_base.Model):
    """Model representing client configuration.


    :ivar retry_count: Number of retry attempts.
    :vartype retry_count: int
    :ivar repeat_each: Interval between repeated test runs.
    :vartype repeat_each: int
    :ivar test_framework: Details of the test framework used.
    :vartype test_framework: ~azure.developer.microsoftplaywrighttesting.models.TestFramework
    :ivar shard_details: Details of the shards used in the test.
    :vartype shard_details: ~azure.developer.microsoftplaywrighttesting.models.ShardDetails
    :ivar timeout_in_ms: Timeout duration for test execution. Required.
    :vartype timeout_in_ms: int
    :ivar test_type: Type of test being executed (default: WebTest).
    :vartype test_type: str
    :ivar test_sdk_language: Programming language used for the test SDK. Supported languages are
     'JavaScript', 'TypeScript', 'Csharp'. Required. Known values are: "JavaScript", "TypeScript",
     and "CSharp".
    :vartype test_sdk_language: str or
     ~azure.developer.microsoftplaywrighttesting.models.TestSdkLanguage
    :ivar service_package_version: Version of the reporter package.
    :vartype service_package_version: str
    """

    retry_count: Optional[int] = rest_field(name="retryCount", visibility=["read", "create"])
    """Number of retry attempts."""
    repeat_each: Optional[int] = rest_field(name="repeatEach", visibility=["read", "create"])
    """Interval between repeated test runs."""
    test_framework: Optional["_models.TestFramework"] = rest_field(name="testFramework", visibility=["read", "create"])
    """Details of the test framework used."""
    shard_details: Optional["_models.ShardDetails"] = rest_field(name="shardDetails", visibility=["read", "create"])
    """Details of the shards used in the test."""
    timeout_in_ms: int = rest_field(name="timeoutInMs", visibility=["read", "create"])
    """Timeout duration for test execution. Required."""
    test_type: Optional[str] = rest_field(name="testType", visibility=["read", "create"])
    """Type of test being executed (default: WebTest)."""
    test_sdk_language: Union[str, "_models.TestSdkLanguage"] = rest_field(
        name="testSdkLanguage", visibility=["read", "create"]
    )
    """Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript',
     'Csharp'. Required. Known values are: \"JavaScript\", \"TypeScript\", and \"CSharp\"."""
    service_package_version: Optional[str] = rest_field(name="servicePackageVersion", visibility=["read", "create"])
    """Version of the reporter package."""

    @overload
    def __init__(
        self,
        *,
        timeout_in_ms: int,
        test_sdk_language: Union[str, "_models.TestSdkLanguage"],
        retry_count: Optional[int] = None,
        repeat_each: Optional[int] = None,
        test_framework: Optional["_models.TestFramework"] = None,
        shard_details: Optional["_models.ShardDetails"] = None,
        test_type: Optional[str] = None,
        service_package_version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TestRunsMetadata(_model_base.Model):
    """Metadata for  testruns/builds.


    :ivar branches: List of CI branches for a testrun, All unicode characters except ASCII control
     characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype branches: list[str]
    """

    branches: List[str] = rest_field()
    """List of CI branches for a testrun, All unicode characters except ASCII control characters,
     special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes
     (//), or start/end with a slash (/) or start with period (.). Required."""

    @overload
    def __init__(
        self,
        *,
        branches: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateShardExecutionSummary(_model_base.Model):
    """Model to update shard result.

    All required parameters must be populated in order to send to server.

    :ivar start_time: Start time of the test run in datetime(RFC 3339 literal format). Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time of the test run. Required.
    :vartype end_time: ~datetime.datetime
    :ivar upload_metadata: Metadata related to test run uploads.
    :vartype upload_metadata: ~azure.developer.microsoftplaywrighttesting.models.UploadMetadata
    """

    start_time: datetime.datetime = rest_field(name="startTime", format="rfc3339")
    """Start time of the test run in datetime(RFC 3339 literal format). Required."""
    end_time: datetime.datetime = rest_field(name="endTime", format="rfc3339")
    """End time of the test run. Required."""
    upload_metadata: Optional["_models.UploadMetadata"] = rest_field(name="uploadMetadata")
    """Metadata related to test run uploads."""

    @overload
    def __init__(
        self,
        *,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        upload_metadata: Optional["_models.UploadMetadata"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UploadMetadata(_model_base.Model):
    """Model representing upload metadata.

    All required parameters must be populated in order to send to server.

    :ivar test_results_count: Total number of test results uploaded. Required.
    :vartype test_results_count: int
    :ivar total_attachments_count: Total number of attachments uploaded. Required.
    :vartype total_attachments_count: int
    :ivar total_attachments_size: Total size of attachments uploaded in Bytes. Required.
    :vartype total_attachments_size: int
    """

    test_results_count: int = rest_field(name="testResultsCount")
    """Total number of test results uploaded. Required."""
    total_attachments_count: int = rest_field(name="totalAttachmentsCount")
    """Total number of attachments uploaded. Required."""
    total_attachments_size: int = rest_field(name="totalAttachmentsSize")
    """Total size of attachments uploaded in Bytes. Required."""

    @overload
    def __init__(
        self,
        *,
        test_results_count: int,
        total_attachments_count: int,
        total_attachments_size: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebTestConfig(_model_base.Model):
    """Configuration details for the web test.


    :ivar job_name: Name of the CI job running the test. All unicode characters except ASCII
     control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype job_name: str
    :ivar project_name: Name of the Playwright project.All unicode characters except ASCII control
     characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple
     consecutive slashes (//), or start/end with a slash (/) or start with period (.). Required.
    :vartype project_name: str
    :ivar browser_type: Name of the browser. Required. Known values are: "Chromium", "Webkit", and
     "Firefox".
    :vartype browser_type: str or ~azure.developer.microsoftplaywrighttesting.models.BrowserType
    :ivar os: Operating system where the browser is hosted. Required. Known values are: "Windows",
     "Linux", and "Mac".
    :vartype os: str or ~azure.developer.microsoftplaywrighttesting.models.OsType
    """

    job_name: str = rest_field(name="jobName")
    """Name of the CI job running the test. All unicode characters except ASCII control characters,
     special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//),
     or start/end with a slash (/) or start with period (.). Required."""
    project_name: str = rest_field(name="projectName")
    """Name of the Playwright project.All unicode characters except ASCII control characters, special
     Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or
     start/end with a slash (/) or start with period (.). Required."""
    browser_type: Union[str, "_models.BrowserType"] = rest_field(name="browserType")
    """Name of the browser. Required. Known values are: \"Chromium\", \"Webkit\", and \"Firefox\"."""
    os: Union[str, "_models.OsType"] = rest_field()
    """Operating system where the browser is hosted. Required. Known values are: \"Windows\",
     \"Linux\", and \"Mac\"."""

    @overload
    def __init__(
        self,
        *,
        job_name: str,
        project_name: str,
        browser_type: Union[str, "_models.BrowserType"],
        os: Union[str, "_models.OsType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
