# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.providerhub.aio import ProviderHub

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestProviderHubDefaultRolloutsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ProviderHub, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_default_rollouts_get(self, resource_group):
        response = await self.client.default_rollouts.get(
            provider_namespace="str",
            rollout_name="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_default_rollouts_delete(self, resource_group):
        response = await self.client.default_rollouts.delete(
            provider_namespace="str",
            rollout_name="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_default_rollouts_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.default_rollouts.begin_create_or_update(
                provider_namespace="str",
                rollout_name="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "provisioningState": "str",
                        "specification": {
                            "canary": {"regions": ["str"], "skipRegions": ["str"]},
                            "highTraffic": {"regions": ["str"], "waitDuration": "1 day, 0:00:00"},
                            "lowTraffic": {"regions": ["str"], "waitDuration": "1 day, 0:00:00"},
                            "mediumTraffic": {"regions": ["str"], "waitDuration": "1 day, 0:00:00"},
                            "providerRegistration": {
                                "id": "str",
                                "name": "str",
                                "properties": {
                                    "capabilities": [{"effect": "str", "quotaId": "str", "requiredFeatures": ["str"]}],
                                    "featuresRule": {"requiredFeaturesPolicy": "str"},
                                    "management": {
                                        "incidentContactEmail": "str",
                                        "incidentRoutingService": "str",
                                        "incidentRoutingTeam": "str",
                                        "manifestOwners": ["str"],
                                        "resourceAccessPolicy": "str",
                                        "resourceAccessRoles": [{}],
                                        "schemaOwners": ["str"],
                                        "serviceTreeInfos": [{"componentId": "str", "serviceId": "str"}],
                                    },
                                    "metadata": {},
                                    "namespace": "str",
                                    "providerAuthentication": {"allowedAudiences": ["str"]},
                                    "providerAuthorizations": [
                                        {
                                            "applicationId": "str",
                                            "managedByRoleDefinitionId": "str",
                                            "roleDefinitionId": "str",
                                        }
                                    ],
                                    "providerHubMetadata": {
                                        "providerAuthentication": {"allowedAudiences": ["str"]},
                                        "providerAuthorizations": [
                                            {
                                                "applicationId": "str",
                                                "managedByRoleDefinitionId": "str",
                                                "roleDefinitionId": "str",
                                            }
                                        ],
                                        "thirdPartyProviderAuthorization": {
                                            "authorizations": [{"principalId": "str", "roleDefinitionId": "str"}],
                                            "managedByTenantId": "str",
                                        },
                                    },
                                    "providerType": "str",
                                    "providerVersion": "str",
                                    "provisioningState": "str",
                                    "requestHeaderOptions": {"optInHeaders": "str"},
                                    "requiredFeatures": ["str"],
                                    "subscriptionLifecycleNotificationSpecifications": {
                                        "softDeleteTTL": "1 day, 0:00:00",
                                        "subscriptionStateOverrideActions": [{"action": "str", "state": "str"}],
                                    },
                                    "templateDeploymentOptions": {
                                        "preflightOptions": ["str"],
                                        "preflightSupported": bool,
                                    },
                                },
                                "type": "str",
                            },
                            "resourceTypeRegistrations": [
                                {
                                    "id": "str",
                                    "name": "str",
                                    "properties": {
                                        "allowedUnauthorizedActions": ["str"],
                                        "authorizationActionMappings": [{"desired": "str", "original": "str"}],
                                        "checkNameAvailabilitySpecifications": {
                                            "enableDefaultValidation": bool,
                                            "resourceTypesWithCustomValidation": ["str"],
                                        },
                                        "defaultApiVersion": "str",
                                        "disallowedActionVerbs": ["str"],
                                        "enableAsyncOperation": bool,
                                        "enableThirdPartyS2S": bool,
                                        "endpoints": [
                                            {
                                                "apiVersions": ["str"],
                                                "enabled": bool,
                                                "extensions": [
                                                    {
                                                        "endpointUri": "str",
                                                        "extensionCategories": ["str"],
                                                        "timeout": "1 day, 0:00:00",
                                                    }
                                                ],
                                                "featuresRule": {"requiredFeaturesPolicy": "str"},
                                                "locations": ["str"],
                                                "requiredFeatures": ["str"],
                                                "timeout": "1 day, 0:00:00",
                                            }
                                        ],
                                        "extendedLocations": [{"supportedPolicy": "str", "type": "str"}],
                                        "extensionOptions": {
                                            "resourceCreationBegin": {"request": ["str"], "response": ["str"]}
                                        },
                                        "featuresRule": {"requiredFeaturesPolicy": "str"},
                                        "identityManagement": {"applicationId": "str", "type": "str"},
                                        "isPureProxy": bool,
                                        "linkedAccessChecks": [
                                            {
                                                "actionName": "str",
                                                "linkedAction": "str",
                                                "linkedActionVerb": "str",
                                                "linkedProperty": "str",
                                                "linkedType": "str",
                                            }
                                        ],
                                        "loggingRules": [
                                            {
                                                "action": "str",
                                                "detailLevel": "str",
                                                "direction": "str",
                                                "hiddenPropertyPaths": {
                                                    "hiddenPathsOnRequest": ["str"],
                                                    "hiddenPathsOnResponse": ["str"],
                                                },
                                            }
                                        ],
                                        "marketplaceType": "str",
                                        "provisioningState": "str",
                                        "regionality": "str",
                                        "requestHeaderOptions": {"optInHeaders": "str"},
                                        "requiredFeatures": ["str"],
                                        "resourceDeletionPolicy": "str",
                                        "resourceMovePolicy": {
                                            "crossResourceGroupMoveEnabled": bool,
                                            "crossSubscriptionMoveEnabled": bool,
                                            "validationRequired": bool,
                                        },
                                        "routingType": "str",
                                        "serviceTreeInfos": [{"componentId": "str", "serviceId": "str"}],
                                        "subscriptionLifecycleNotificationSpecifications": {
                                            "softDeleteTTL": "1 day, 0:00:00",
                                            "subscriptionStateOverrideActions": [{"action": "str", "state": "str"}],
                                        },
                                        "subscriptionStateRules": [{"allowedActions": ["str"], "state": "str"}],
                                        "swaggerSpecifications": [
                                            {"apiVersions": ["str"], "swaggerSpecFolderUri": "str"}
                                        ],
                                        "templateDeploymentOptions": {
                                            "preflightOptions": ["str"],
                                            "preflightSupported": bool,
                                        },
                                        "throttlingRules": [
                                            {
                                                "action": "str",
                                                "metrics": [{"limit": 0, "type": "str", "interval": "1 day, 0:00:00"}],
                                                "requiredFeatures": ["str"],
                                            }
                                        ],
                                    },
                                    "type": "str",
                                }
                            ],
                            "restOfTheWorldGroupOne": {"regions": ["str"], "waitDuration": "1 day, 0:00:00"},
                            "restOfTheWorldGroupTwo": {"regions": ["str"], "waitDuration": "1 day, 0:00:00"},
                        },
                        "status": {
                            "completedRegions": ["str"],
                            "failedOrSkippedRegions": {
                                "str": {
                                    "additionalInfo": [{"type": "str", "info": {}}],
                                    "code": "str",
                                    "details": [...],
                                    "message": "str",
                                    "target": "str",
                                }
                            },
                            "nextTrafficRegion": "str",
                            "nextTrafficRegionScheduledTime": "2020-02-20 00:00:00",
                            "subscriptionReregistrationResult": "str",
                        },
                    },
                    "type": "str",
                },
                api_version="2020-11-20",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_default_rollouts_list_by_provider_registration(self, resource_group):
        response = self.client.default_rollouts.list_by_provider_registration(
            provider_namespace="str",
            api_version="2020-11-20",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_default_rollouts_stop(self, resource_group):
        response = await self.client.default_rollouts.stop(
            provider_namespace="str",
            rollout_name="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...
