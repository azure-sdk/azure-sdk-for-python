# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.providerhub import ProviderHub

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestProviderHubSkusOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ProviderHub)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.skus.get(
            provider_namespace="str",
            resource_type="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.skus.create_or_update(
            provider_namespace="str",
            resource_type="str",
            sku="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {
                    "skuSettings": [
                        {
                            "name": "str",
                            "capabilities": [{"name": "str", "value": "str"}],
                            "capacity": {"minimum": 0, "default": 0, "maximum": 0, "scaleType": "str"},
                            "costs": [{"meterId": "str", "extendedUnit": "str", "quantity": 0}],
                            "family": "str",
                            "kind": "str",
                            "locationInfo": [
                                {
                                    "location": "str",
                                    "extendedLocations": ["str"],
                                    "type": "str",
                                    "zoneDetails": [
                                        {"capabilities": [{"name": "str", "value": "str"}], "name": ["str"]}
                                    ],
                                    "zones": ["str"],
                                }
                            ],
                            "locations": ["str"],
                            "requiredFeatures": ["str"],
                            "requiredQuotaIds": ["str"],
                            "size": "str",
                            "tier": "str",
                        }
                    ],
                    "provisioningState": "str",
                },
                "type": "str",
            },
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.skus.delete(
            provider_namespace="str",
            resource_type="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_nested_resource_type_first(self, resource_group):
        response = self.client.skus.get_nested_resource_type_first(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update_nested_resource_type_first(self, resource_group):
        response = self.client.skus.create_or_update_nested_resource_type_first(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            sku="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {
                    "skuSettings": [
                        {
                            "name": "str",
                            "capabilities": [{"name": "str", "value": "str"}],
                            "capacity": {"minimum": 0, "default": 0, "maximum": 0, "scaleType": "str"},
                            "costs": [{"meterId": "str", "extendedUnit": "str", "quantity": 0}],
                            "family": "str",
                            "kind": "str",
                            "locationInfo": [
                                {
                                    "location": "str",
                                    "extendedLocations": ["str"],
                                    "type": "str",
                                    "zoneDetails": [
                                        {"capabilities": [{"name": "str", "value": "str"}], "name": ["str"]}
                                    ],
                                    "zones": ["str"],
                                }
                            ],
                            "locations": ["str"],
                            "requiredFeatures": ["str"],
                            "requiredQuotaIds": ["str"],
                            "size": "str",
                            "tier": "str",
                        }
                    ],
                    "provisioningState": "str",
                },
                "type": "str",
            },
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete_nested_resource_type_first(self, resource_group):
        response = self.client.skus.delete_nested_resource_type_first(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_nested_resource_type_second(self, resource_group):
        response = self.client.skus.get_nested_resource_type_second(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update_nested_resource_type_second(self, resource_group):
        response = self.client.skus.create_or_update_nested_resource_type_second(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            sku="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {
                    "skuSettings": [
                        {
                            "name": "str",
                            "capabilities": [{"name": "str", "value": "str"}],
                            "capacity": {"minimum": 0, "default": 0, "maximum": 0, "scaleType": "str"},
                            "costs": [{"meterId": "str", "extendedUnit": "str", "quantity": 0}],
                            "family": "str",
                            "kind": "str",
                            "locationInfo": [
                                {
                                    "location": "str",
                                    "extendedLocations": ["str"],
                                    "type": "str",
                                    "zoneDetails": [
                                        {"capabilities": [{"name": "str", "value": "str"}], "name": ["str"]}
                                    ],
                                    "zones": ["str"],
                                }
                            ],
                            "locations": ["str"],
                            "requiredFeatures": ["str"],
                            "requiredQuotaIds": ["str"],
                            "size": "str",
                            "tier": "str",
                        }
                    ],
                    "provisioningState": "str",
                },
                "type": "str",
            },
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete_nested_resource_type_second(self, resource_group):
        response = self.client.skus.delete_nested_resource_type_second(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_nested_resource_type_third(self, resource_group):
        response = self.client.skus.get_nested_resource_type_third(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            nested_resource_type_third="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update_nested_resource_type_third(self, resource_group):
        response = self.client.skus.create_or_update_nested_resource_type_third(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            nested_resource_type_third="str",
            sku="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {
                    "skuSettings": [
                        {
                            "name": "str",
                            "capabilities": [{"name": "str", "value": "str"}],
                            "capacity": {"minimum": 0, "default": 0, "maximum": 0, "scaleType": "str"},
                            "costs": [{"meterId": "str", "extendedUnit": "str", "quantity": 0}],
                            "family": "str",
                            "kind": "str",
                            "locationInfo": [
                                {
                                    "location": "str",
                                    "extendedLocations": ["str"],
                                    "type": "str",
                                    "zoneDetails": [
                                        {"capabilities": [{"name": "str", "value": "str"}], "name": ["str"]}
                                    ],
                                    "zones": ["str"],
                                }
                            ],
                            "locations": ["str"],
                            "requiredFeatures": ["str"],
                            "requiredQuotaIds": ["str"],
                            "size": "str",
                            "tier": "str",
                        }
                    ],
                    "provisioningState": "str",
                },
                "type": "str",
            },
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete_nested_resource_type_third(self, resource_group):
        response = self.client.skus.delete_nested_resource_type_third(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            nested_resource_type_third="str",
            sku="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_type_registrations(self, resource_group):
        response = self.client.skus.list_by_resource_type_registrations(
            provider_namespace="str",
            resource_type="str",
            api_version="2020-11-20",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_type_registrations_nested_resource_type_first(self, resource_group):
        response = self.client.skus.list_by_resource_type_registrations_nested_resource_type_first(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            api_version="2020-11-20",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_type_registrations_nested_resource_type_second(self, resource_group):
        response = self.client.skus.list_by_resource_type_registrations_nested_resource_type_second(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            api_version="2020-11-20",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_type_registrations_nested_resource_type_third(self, resource_group):
        response = self.client.skus.list_by_resource_type_registrations_nested_resource_type_third(
            provider_namespace="str",
            resource_type="str",
            nested_resource_type_first="str",
            nested_resource_type_second="str",
            nested_resource_type_third="str",
            api_version="2020-11-20",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
