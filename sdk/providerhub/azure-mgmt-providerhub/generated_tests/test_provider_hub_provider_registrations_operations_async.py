# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.providerhub.aio import ProviderHub

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestProviderHubProviderRegistrationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ProviderHub, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_registrations_get(self, resource_group):
        response = await self.client.provider_registrations.get(
            provider_namespace="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_registrations_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.provider_registrations.begin_create_or_update(
                provider_namespace="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "capabilities": [{"effect": "str", "quotaId": "str", "requiredFeatures": ["str"]}],
                        "featuresRule": {"requiredFeaturesPolicy": "str"},
                        "management": {
                            "incidentContactEmail": "str",
                            "incidentRoutingService": "str",
                            "incidentRoutingTeam": "str",
                            "manifestOwners": ["str"],
                            "resourceAccessPolicy": "str",
                            "resourceAccessRoles": [{}],
                            "schemaOwners": ["str"],
                            "serviceTreeInfos": [{"componentId": "str", "serviceId": "str"}],
                        },
                        "metadata": {},
                        "namespace": "str",
                        "providerAuthentication": {"allowedAudiences": ["str"]},
                        "providerAuthorizations": [
                            {"applicationId": "str", "managedByRoleDefinitionId": "str", "roleDefinitionId": "str"}
                        ],
                        "providerHubMetadata": {
                            "providerAuthentication": {"allowedAudiences": ["str"]},
                            "providerAuthorizations": [
                                {"applicationId": "str", "managedByRoleDefinitionId": "str", "roleDefinitionId": "str"}
                            ],
                            "thirdPartyProviderAuthorization": {
                                "authorizations": [{"principalId": "str", "roleDefinitionId": "str"}],
                                "managedByTenantId": "str",
                            },
                        },
                        "providerType": "str",
                        "providerVersion": "str",
                        "provisioningState": "str",
                        "requestHeaderOptions": {"optInHeaders": "str"},
                        "requiredFeatures": ["str"],
                        "subscriptionLifecycleNotificationSpecifications": {
                            "softDeleteTTL": "1 day, 0:00:00",
                            "subscriptionStateOverrideActions": [{"action": "str", "state": "str"}],
                        },
                        "templateDeploymentOptions": {"preflightOptions": ["str"], "preflightSupported": bool},
                    },
                    "type": "str",
                },
                api_version="2020-11-20",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_registrations_delete(self, resource_group):
        response = await self.client.provider_registrations.delete(
            provider_namespace="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_registrations_list(self, resource_group):
        response = self.client.provider_registrations.list(
            api_version="2020-11-20",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_registrations_generate_operations(self, resource_group):
        response = await self.client.provider_registrations.generate_operations(
            provider_namespace="str",
            api_version="2020-11-20",
        )

        # please add some check logic here by yourself
        # ...
