# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential
from azure.mgmt.providerhub import ProviderHub

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-providerhub
# USAGE
    python skus_create_or_update_nested_resource_type_second.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = ProviderHub(
        credential=DefaultAzureCredential(),
        subscription_id="ab7a8701-f7ef-471a-a2f4-d0ebbf494f77",
    )

    response = client.skus.create_or_update_nested_resource_type_second(
        provider_namespace="Microsoft.Contoso",
        resource_type="testResourceType",
        nested_resource_type_first="nestedResourceTypeFirst",
        nested_resource_type_second="nestedResourceTypeSecond",
        sku="testSku",
        properties={
            "properties": {
                "skuSettings": [
                    {"kind": "Standard", "name": "freeSku", "tier": "Tier1"},
                    {"costs": [{"meterId": "xxx"}], "kind": "Premium", "name": "premiumSku", "tier": "Tier2"},
                ]
            }
        },
    )
    print(response)


# x-ms-original-file: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2020-11-20/examples/Skus_CreateOrUpdateNestedResourceTypeSecond.json
if __name__ == "__main__":
    main()
