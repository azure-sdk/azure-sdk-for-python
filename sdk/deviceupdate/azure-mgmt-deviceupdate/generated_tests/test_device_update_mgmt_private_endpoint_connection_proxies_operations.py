# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.deviceupdate import DeviceUpdateMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDeviceUpdateMgmtPrivateEndpointConnectionProxiesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DeviceUpdateMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_account(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.list_by_account(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2023-07-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_validate(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.validate(
            resource_group_name=resource_group.name,
            account_name="str",
            private_endpoint_connection_proxy_id="str",
            private_endpoint_connection_proxy={
                "eTag": "str",
                "id": "str",
                "name": "str",
                "provisioningState": "str",
                "remotePrivateEndpoint": {
                    "connectionDetails": [
                        {
                            "groupId": "str",
                            "id": "str",
                            "linkIdentifier": "str",
                            "memberName": "str",
                            "privateIpAddress": "str",
                        }
                    ],
                    "id": "str",
                    "immutableResourceId": "str",
                    "immutableSubscriptionId": "str",
                    "location": "str",
                    "manualPrivateLinkServiceConnections": [
                        {"groupIds": ["str"], "name": "str", "requestMessage": "str"}
                    ],
                    "privateLinkServiceConnections": [{"groupIds": ["str"], "name": "str", "requestMessage": "str"}],
                    "privateLinkServiceProxies": [
                        {
                            "groupConnectivityInformation": [
                                {
                                    "customerVisibleFqdns": ["str"],
                                    "groupId": "str",
                                    "internalFqdn": "str",
                                    "memberName": "str",
                                    "privateLinkServiceArmRegion": "str",
                                    "redirectMapId": "str",
                                }
                            ],
                            "id": "str",
                            "remotePrivateEndpointConnection": {"id": "str"},
                            "remotePrivateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                        }
                    ],
                    "vnetTrafficTag": "str",
                },
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2023-07-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update_private_endpoint_properties(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.update_private_endpoint_properties(
            resource_group_name=resource_group.name,
            account_name="str",
            private_endpoint_connection_proxy_id="str",
            private_endpoint_update={
                "id": "str",
                "immutableResourceId": "str",
                "immutableSubscriptionId": "str",
                "location": "str",
                "vnetTrafficTag": "str",
            },
            api_version="2023-07-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.get(
            resource_group_name=resource_group.name,
            account_name="str",
            private_endpoint_connection_proxy_id="str",
            api_version="2023-07-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.begin_create_or_update(
            resource_group_name=resource_group.name,
            account_name="str",
            private_endpoint_connection_proxy_id="str",
            private_endpoint_connection_proxy={
                "eTag": "str",
                "id": "str",
                "name": "str",
                "provisioningState": "str",
                "remotePrivateEndpoint": {
                    "connectionDetails": [
                        {
                            "groupId": "str",
                            "id": "str",
                            "linkIdentifier": "str",
                            "memberName": "str",
                            "privateIpAddress": "str",
                        }
                    ],
                    "id": "str",
                    "immutableResourceId": "str",
                    "immutableSubscriptionId": "str",
                    "location": "str",
                    "manualPrivateLinkServiceConnections": [
                        {"groupIds": ["str"], "name": "str", "requestMessage": "str"}
                    ],
                    "privateLinkServiceConnections": [{"groupIds": ["str"], "name": "str", "requestMessage": "str"}],
                    "privateLinkServiceProxies": [
                        {
                            "groupConnectivityInformation": [
                                {
                                    "customerVisibleFqdns": ["str"],
                                    "groupId": "str",
                                    "internalFqdn": "str",
                                    "memberName": "str",
                                    "privateLinkServiceArmRegion": "str",
                                    "redirectMapId": "str",
                                }
                            ],
                            "id": "str",
                            "remotePrivateEndpointConnection": {"id": "str"},
                            "remotePrivateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                        }
                    ],
                    "vnetTrafficTag": "str",
                },
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2023-07-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.private_endpoint_connection_proxies.begin_delete(
            resource_group_name=resource_group.name,
            account_name="str",
            private_endpoint_connection_proxy_id="str",
            api_version="2023-07-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
