# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient
from azure.mgmt.core.policies import AsyncARMAutoResourceProviderRegistrationPolicy

from .._serialization import Deserializer, Serializer
from ._configuration import AppComplianceAutomationClientConfiguration
from .operations import (
    EvidenceResourcesOperations,
    Operations,
    ProviderActionsOperations,
    ReportResourcesOperations,
    ScopingConfigurationResourcesOperations,
    SnapshotResourcesOperations,
    WebhookResourcesOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class AppComplianceAutomationClient:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """App Compliance Automation Tool for Microsoft 365 API spec.

    :ivar report_resources: ReportResourcesOperations operations
    :vartype report_resources:
     azure.mgmt.appcomplianceautomation.aio.operations.ReportResourcesOperations
    :ivar webhook_resources: WebhookResourcesOperations operations
    :vartype webhook_resources:
     azure.mgmt.appcomplianceautomation.aio.operations.WebhookResourcesOperations
    :ivar snapshot_resources: SnapshotResourcesOperations operations
    :vartype snapshot_resources:
     azure.mgmt.appcomplianceautomation.aio.operations.SnapshotResourcesOperations
    :ivar scoping_configuration_resources: ScopingConfigurationResourcesOperations operations
    :vartype scoping_configuration_resources:
     azure.mgmt.appcomplianceautomation.aio.operations.ScopingConfigurationResourcesOperations
    :ivar evidence_resources: EvidenceResourcesOperations operations
    :vartype evidence_resources:
     azure.mgmt.appcomplianceautomation.aio.operations.EvidenceResourcesOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.appcomplianceautomation.aio.operations.Operations
    :ivar provider_actions: ProviderActionsOperations operations
    :vartype provider_actions:
     azure.mgmt.appcomplianceautomation.aio.operations.ProviderActionsOperations
    :param credential: Credential used to authenticate requests to the service. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param base_url: Service host. Default value is "https://management.azure.com".
    :type base_url: str
    :keyword api_version: The API version to use for this operation. Default value is "2024-06-27".
     Note that overriding this default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self, credential: "AsyncTokenCredential", base_url: str = "https://management.azure.com", **kwargs: Any
    ) -> None:
        self._config = AppComplianceAutomationClientConfiguration(credential=credential, **kwargs)
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                AsyncARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncARMPipelineClient = AsyncARMPipelineClient(base_url=base_url, policies=_policies, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.report_resources = ReportResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.webhook_resources = WebhookResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.snapshot_resources = SnapshotResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.scoping_configuration_resources = ScopingConfigurationResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.evidence_resources = EvidenceResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)
        self.provider_actions = ProviderActionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )

    def send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AppComplianceAutomationClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
