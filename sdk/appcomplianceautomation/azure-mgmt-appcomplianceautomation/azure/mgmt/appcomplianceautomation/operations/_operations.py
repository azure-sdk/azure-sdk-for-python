# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, Type, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_report_get_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_create_or_update_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_update_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_delete_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_list_by_tenant_request(
    *,
    skip_token: Optional[str] = None,
    top: Optional[int] = None,
    select: Optional[str] = None,
    filter: Optional[str] = None,
    orderby: Optional[str] = None,
    offer_guid: Optional[str] = None,
    report_creator_tenant_id: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if skip_token is not None:
        _params["$skipToken"] = _SERIALIZER.query("skip_token", skip_token, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if select is not None:
        _params["$select"] = _SERIALIZER.query("select", select, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if orderby is not None:
        _params["$orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if offer_guid is not None:
        _params["offerGuid"] = _SERIALIZER.query("offer_guid", offer_guid, "str")
    if report_creator_tenant_id is not None:
        _params["reportCreatorTenantId"] = _SERIALIZER.query(
            "report_creator_tenant_id", report_creator_tenant_id, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_sync_cert_record_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/syncCertRecord"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_check_name_availability_request(  # pylint: disable=name-too-long
    report_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/checkNameAvailability"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_fix_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/fix"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_get_scoping_questions_request(  # pylint: disable=name-too-long
    report_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/getScopingQuestions"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_report_verify_request(report_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/verify"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_webhook_get_request(report_name: str, webhook_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "webhookName": _SERIALIZER.url("webhook_name", webhook_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_webhook_create_or_update_request(report_name: str, webhook_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "webhookName": _SERIALIZER.url("webhook_name", webhook_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_webhook_update_request(report_name: str, webhook_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "webhookName": _SERIALIZER.url("webhook_name", webhook_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_webhook_delete_request(report_name: str, webhook_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks/{webhookName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "webhookName": _SERIALIZER.url("webhook_name", webhook_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_webhook_list_by_report_resource_request(  # pylint: disable=name-too-long
    report_name: str,
    *,
    skip_token: Optional[str] = None,
    top: Optional[int] = None,
    select: Optional[str] = None,
    filter: Optional[str] = None,
    orderby: Optional[str] = None,
    offer_guid: Optional[str] = None,
    report_creator_tenant_id: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/webhooks"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if skip_token is not None:
        _params["$skipToken"] = _SERIALIZER.query("skip_token", skip_token, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if select is not None:
        _params["$select"] = _SERIALIZER.query("select", select, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if orderby is not None:
        _params["$orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if offer_guid is not None:
        _params["offerGuid"] = _SERIALIZER.query("offer_guid", offer_guid, "str")
    if report_creator_tenant_id is not None:
        _params["reportCreatorTenantId"] = _SERIALIZER.query(
            "report_creator_tenant_id", report_creator_tenant_id, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_snapshot_get_request(report_name: str, snapshot_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "snapshotName": _SERIALIZER.url("snapshot_name", snapshot_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_snapshot_list_by_report_resource_request(  # pylint: disable=name-too-long
    report_name: str,
    *,
    skip_token: Optional[str] = None,
    top: Optional[int] = None,
    select: Optional[str] = None,
    filter: Optional[str] = None,
    orderby: Optional[str] = None,
    offer_guid: Optional[str] = None,
    report_creator_tenant_id: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if skip_token is not None:
        _params["$skipToken"] = _SERIALIZER.query("skip_token", skip_token, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if select is not None:
        _params["$select"] = _SERIALIZER.query("select", select, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if orderby is not None:
        _params["$orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if offer_guid is not None:
        _params["offerGuid"] = _SERIALIZER.query("offer_guid", offer_guid, "str")
    if report_creator_tenant_id is not None:
        _params["reportCreatorTenantId"] = _SERIALIZER.query(
            "report_creator_tenant_id", report_creator_tenant_id, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_snapshot_download_request(report_name: str, snapshot_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}/download"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "snapshotName": _SERIALIZER.url("snapshot_name", snapshot_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_scoping_configuration_get_request(
    report_name: str, scoping_configuration_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "scopingConfigurationName": _SERIALIZER.url("scoping_configuration_name", scoping_configuration_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_scoping_configuration_create_or_update_request(  # pylint: disable=name-too-long
    report_name: str, scoping_configuration_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "scopingConfigurationName": _SERIALIZER.url("scoping_configuration_name", scoping_configuration_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_scoping_configuration_delete_request(  # pylint: disable=name-too-long
    report_name: str, scoping_configuration_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations/{scopingConfigurationName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "scopingConfigurationName": _SERIALIZER.url("scoping_configuration_name", scoping_configuration_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_scoping_configuration_list_by_report_resource_request(  # pylint: disable=name-too-long
    report_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/scopingConfigurations"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_evidence_get_request(report_name: str, evidence_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "evidenceName": _SERIALIZER.url("evidence_name", evidence_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_evidence_create_or_update_request(
    report_name: str,
    evidence_name: str,
    *,
    offer_guid: Optional[str] = None,
    report_creator_tenant_id: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "evidenceName": _SERIALIZER.url("evidence_name", evidence_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if offer_guid is not None:
        _params["offerGuid"] = _SERIALIZER.query("offer_guid", offer_guid, "str")
    if report_creator_tenant_id is not None:
        _params["reportCreatorTenantId"] = _SERIALIZER.query(
            "report_creator_tenant_id", report_creator_tenant_id, "str"
        )

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_evidence_delete_request(report_name: str, evidence_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "evidenceName": _SERIALIZER.url("evidence_name", evidence_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_evidence_list_by_report_resource_request(  # pylint: disable=name-too-long
    report_name: str,
    *,
    skip_token: Optional[str] = None,
    top: Optional[int] = None,
    select: Optional[str] = None,
    filter: Optional[str] = None,
    orderby: Optional[str] = None,
    offer_guid: Optional[str] = None,
    report_creator_tenant_id: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if skip_token is not None:
        _params["$skipToken"] = _SERIALIZER.query("skip_token", skip_token, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if select is not None:
        _params["$select"] = _SERIALIZER.query("select", select, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if orderby is not None:
        _params["$orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if offer_guid is not None:
        _params["offerGuid"] = _SERIALIZER.query("offer_guid", offer_guid, "str")
    if report_creator_tenant_id is not None:
        _params["reportCreatorTenantId"] = _SERIALIZER.query(
            "report_creator_tenant_id", report_creator_tenant_id, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_evidence_download_request(report_name: str, evidence_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/evidences/{evidenceName}/download"
    path_format_arguments = {
        "reportName": _SERIALIZER.url("report_name", report_name, "str"),
        "evidenceName": _SERIALIZER.url("evidence_name", evidence_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_check_name_availability_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/checkNameAvailability"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_get_collection_count_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/getCollectionCount"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_get_overview_status_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/getOverviewStatus"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_onboard_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/onboard"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_trigger_evaluation_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/triggerEvaluation"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_provider_actions_list_in_use_storage_accounts_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-06-27"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.AppComplianceAutomation/listInUseStorageAccounts"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class ReportOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`report` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, report_name: str, **kwargs: Any) -> _models.ReportResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation report and its properties.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: ReportResource. The ReportResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ReportResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ReportResource] = kwargs.pop("cls", None)

        _request = build_report_get_request(
            report_name=report_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ReportResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _create_or_update_initial(
        self, report_name: str, parameters: Union[_models.ReportResource, JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _content = json.dumps(parameters, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_report_create_or_update_request(
            report_name=report_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create_or_update(
        self,
        report_name: str,
        parameters: _models.ReportResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation
        report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.ReportResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self, report_name: str, parameters: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation
        report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self, report_name: str, parameters: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation
        report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create_or_update(
        self, report_name: str, parameters: Union[_models.ReportResource, JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation report or update an exiting AppComplianceAutomation
        report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param parameters: Parameters for the create or update operation. Is one of the following
         types: ReportResource, JSON, IO[bytes] Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.ReportResource or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ReportResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_update_initial(
                report_name=report_name,
                parameters=parameters,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs,
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.ReportResource, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ReportResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ReportResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _update_initial(
        self, report_name: str, properties: Union[_models.ReportResourcePatch, JSON, IO[bytes]], **kwargs: Any
    ) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _content = json.dumps(properties, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_report_update_request(
            report_name=report_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_update(
        self,
        report_name: str,
        properties: _models.ReportResourcePatch,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: ~azure.mgmt.appcomplianceautomation.models.ReportResourcePatch
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str",  # Optional. Report's tenant id.
                        "timeZone": "str",  # Optional. Report collection trigger time's time
                          zone, the available list can be obtained by executing "Get-TimeZone
                          -ListAvailable" in PowerShell. An example of valid timezone id is "Pacific
                          Standard Time".
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. Report collection
                          trigger time.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self, report_name: str, properties: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self, report_name: str, properties: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_update(
        self, report_name: str, properties: Union[_models.ReportResourcePatch, JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[_models.ReportResource]:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param properties: Parameters for the create or update operation. Is one of the following
         types: ReportResourcePatch, JSON, IO[bytes] Required.
        :type properties: ~azure.mgmt.appcomplianceautomation.models.ReportResourcePatch or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns ReportResource. The ReportResource is compatible
         with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str",  # Optional. Report's tenant id.
                        "timeZone": "str",  # Optional. Report collection trigger time's time
                          zone, the available list can be obtained by executing "Get-TimeZone
                          -ListAvailable" in PowerShell. An example of valid timezone id is "Pacific
                          Standard Time".
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. Report collection
                          trigger time.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ReportResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                report_name=report_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs,
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.ReportResource, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ReportResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ReportResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, report_name: str, **kwargs: Any
    ) -> None:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_report_delete_request(
            report_name=report_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete(self, report_name: str, **kwargs: Any) -> LROPoller[None]:
        """Delete an AppComplianceAutomation report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                report_name=report_name, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_by_tenant(
        self,
        *,
        skip_token: Optional[str] = None,
        top: Optional[int] = None,
        select: Optional[str] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        **kwargs: Any,
    ) -> Iterable["_models.ReportResource"]:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation report list for the tenant.

        :keyword skip_token: Skip over when retrieving results. Default value is None.
        :paramtype skip_token: str
        :keyword top: Number of elements to return when retrieving results. Default value is None.
        :paramtype top: int
        :keyword select: OData Select statement. Limits the properties on each entry to just those
         requested, e.g. ?$select=reportName,id. Default value is None.
        :paramtype select: str
        :keyword filter: The filter to apply on the operation. Default value is None.
        :paramtype filter: str
        :keyword orderby: OData order by query option. Default value is None.
        :paramtype orderby: str
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :return: An iterator like instance of ReportResource
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.ReportResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "resources": [
                            {
                                "resourceId": "str",  # Resource Id - e.g.
                                  "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                  Required.
                                "accountId": "str",  # Optional. Account Id. For
                                  example - the AWS account id.
                                "resourceKind": "str",  # Optional. Resource kind.
                                "resourceOrigin": "str",  # Optional. Resource
                                  Origin. Known values are: "Azure", "AWS", and "GCP".
                                "resourceType": "str"  # Optional. Resource type.
                                  e.g. "Microsoft.Compute/virtualMachines".
                            }
                        ],
                        "timeZone": "str",  # Report collection trigger time's time zone, the
                          available list can be obtained by executing "Get-TimeZone -ListAvailable" in
                          PowerShell. An example of valid timezone id is "Pacific Standard Time".
                          Required.
                        "triggerTime": "2020-02-20 00:00:00",  # Report collection trigger
                          time. Required.
                        "certRecords": [
                            {
                                "certificationStatus": "str",  # Optional. Indicates
                                  the status of certification process.
                                "controls": [
                                    {
                                        "controlId": "str",  # Optional. The
                                          Id of the control. e.g. "Operational_Security_10".
                                        "controlStatus": "str"  # Optional.
                                          Control status synchronized from app compliance.
                                    }
                                ],
                                "ingestionStatus": "str",  # Optional. Indicates the
                                  status of compliance process.
                                "offerGuid": "str"  # Optional. The offerGuid which
                                  mapping to the reports.
                            }
                        ],
                        "complianceStatus": {
                            "m365": {
                                "failedCount": 0,  # Optional. The count of all
                                  failed control.
                                "manualCount": 0,  # Optional. The count of all
                                  manual control.
                                "notApplicableCount": 0,  # Optional. The count of
                                  all not applicable control.
                                "passedCount": 0,  # Optional. The count of all
                                  passed control.
                                "pendingCount": 0  # Optional. The count of all
                                  pending for approval control.
                            }
                        },
                        "errors": [
                            "str"  # Optional. List of report error codes.
                        ],
                        "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report last
                          collection trigger time.
                        "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report next
                          collection trigger time.
                        "offerGuid": "str",  # Optional. A list of comma-separated offerGuids
                          indicates a series of offerGuids that map to the report. For example,
                          "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                          and "00000000-0000-0000-0000-000000000003".
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "status": "str",  # Optional. Report status. Known values are:
                          "Active", "Failed", "Reviewing", and "Disabled".
                        "storageInfo": {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        },
                        "subscriptions": [
                            "str"  # Optional. List of subscription Ids.
                        ],
                        "tenantId": "str"  # Optional. Report's tenant id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.ReportResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_report_list_by_tenant_request(
                    skip_token=skip_token,
                    top=top,
                    select=select,
                    filter=filter,
                    orderby=orderby,
                    offer_guid=offer_guid,
                    report_creator_tenant_id=report_creator_tenant_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ReportResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    def _sync_cert_record_initial(
        self, report_name: str, body: Union[_models.SyncCertRecordRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_report_sync_cert_record_request(
            report_name=report_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_sync_cert_record(
        self,
        report_name: str,
        body: _models.SyncCertRecordRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> LROPoller[_models.SyncCertRecordResponse]:
        """Synchronize attestation record from app compliance.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: Parameters for synchronize certification record operation. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.SyncCertRecordRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SyncCertRecordResponse. The
         SyncCertRecordResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.SyncCertRecordResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }

                # response body for status code(s): 202, 200
                response == {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }
        """

    @overload
    def begin_sync_cert_record(
        self, report_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.SyncCertRecordResponse]:
        """Synchronize attestation record from app compliance.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: Parameters for synchronize certification record operation. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SyncCertRecordResponse. The
         SyncCertRecordResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.SyncCertRecordResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }
        """

    @overload
    def begin_sync_cert_record(
        self, report_name: str, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.SyncCertRecordResponse]:
        """Synchronize attestation record from app compliance.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: Parameters for synchronize certification record operation. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SyncCertRecordResponse. The
         SyncCertRecordResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.SyncCertRecordResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }
        """

    @distributed_trace
    def begin_sync_cert_record(
        self, report_name: str, body: Union[_models.SyncCertRecordRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[_models.SyncCertRecordResponse]:
        """Synchronize attestation record from app compliance.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: Parameters for synchronize certification record operation. Is one of the following
         types: SyncCertRecordRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.SyncCertRecordRequest or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns SyncCertRecordResponse. The
         SyncCertRecordResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.SyncCertRecordResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }

                # response body for status code(s): 202, 200
                response == {
                    "certRecord": {
                        "certificationStatus": "str",  # Optional. Indicates the status of
                          certification process.
                        "controls": [
                            {
                                "controlId": "str",  # Optional. The Id of the
                                  control. e.g. "Operational_Security_10".
                                "controlStatus": "str"  # Optional. Control status
                                  synchronized from app compliance.
                            }
                        ],
                        "ingestionStatus": "str",  # Optional. Indicates the status of
                          compliance process.
                        "offerGuid": "str"  # Optional. The offerGuid which mapping to the
                          reports.
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SyncCertRecordResponse] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._sync_cert_record_initial(
                report_name=report_name,
                body=body,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs,
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(_models.SyncCertRecordResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SyncCertRecordResponse].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SyncCertRecordResponse](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def check_name_availability(
        self,
        report_name: str,
        body: _models.CheckNameAvailabilityRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Checks the report's nested resource name availability, e.g: Webhooks, Evidences, Snapshots.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: NameAvailabilityRequest object. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Optional. The name of the resource for which availability
                      needs to be checked.
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @overload
    def check_name_availability(
        self, report_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Checks the report's nested resource name availability, e.g: Webhooks, Evidences, Snapshots.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: NameAvailabilityRequest object. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @overload
    def check_name_availability(
        self, report_name: str, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Checks the report's nested resource name availability, e.g: Webhooks, Evidences, Snapshots.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: NameAvailabilityRequest object. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @distributed_trace
    def check_name_availability(
        self, report_name: str, body: Union[_models.CheckNameAvailabilityRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Checks the report's nested resource name availability, e.g: Webhooks, Evidences, Snapshots.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param body: NameAvailabilityRequest object. Is one of the following types:
         CheckNameAvailabilityRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityRequest or JSON or
         IO[bytes]
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Optional. The name of the resource for which availability
                      needs to be checked.
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CheckNameAvailabilityResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_report_check_name_availability_request(
            report_name=report_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.CheckNameAvailabilityResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _fix_initial(self, report_name: str, **kwargs: Any) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        _request = build_report_fix_request(
            report_name=report_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def begin_fix(self, report_name: str, **kwargs: Any) -> LROPoller[_models.ReportFixResult]:
        # pylint: disable=line-too-long
        """Fix the AppComplianceAutomation report error. e.g: App Compliance Automation Tool service
        unregistered, automation removed.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: An instance of LROPoller that returns ReportFixResult. The ReportFixResult is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportFixResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "reason": "str",  # Optional. If the report fix action failed, to indicate
                      the detailed failed reason.
                    "result": "str"  # Optional. Indicates whether the fix action is Succeeded or
                      Failed. Known values are: "Succeeded" and "Failed".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ReportFixResult] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._fix_initial(
                report_name=report_name, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(_models.ReportFixResult, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ReportFixResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ReportFixResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace
    def get_scoping_questions(self, report_name: str, **kwargs: Any) -> _models.ScopingQuestions:
        # pylint: disable=line-too-long
        """Fix the AppComplianceAutomation report error. e.g: App Compliance Automation Tool service
        unregistered, automation removed.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: ScopingQuestions. The ScopingQuestions is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingQuestions
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "questions": [
                        {
                            "inputType": "str",  # Input type of the question answer.
                              Required. Known values are: "None", "Text", "Email", "MultilineText",
                              "Url", "Number", "Boolean", "Telephone", "YesNoNa", "Date", "YearPicker",
                              "SingleSelection", "SingleSelectDropdown", "MultiSelectCheckbox",
                              "MultiSelectDropdown", "MultiSelectDropdownCustom", "Group", and
                              "Upload".
                            "optionIds": [
                                "str"  # Option id list. Required.
                            ],
                            "questionId": "str",  # Question id. Required.
                            "rules": [
                                "str"  # The rule of the question. Required.
                            ],
                            "showSubQuestionsValue": "str",  # Optional. The answer value
                              to show the sub questions.
                            "superiorQuestionId": "str"  # Optional. Superior question
                              id.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ScopingQuestions] = kwargs.pop("cls", None)

        _request = build_report_get_scoping_questions_request(
            report_name=report_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ScopingQuestions, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _verify_initial(self, report_name: str, **kwargs: Any) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        _request = build_report_verify_request(
            report_name=report_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def begin_verify(self, report_name: str, **kwargs: Any) -> LROPoller[_models.ReportVerificationResult]:
        # pylint: disable=line-too-long
        """Verify the AppComplianceAutomation report health status.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: An instance of LROPoller that returns ReportVerificationResult. The
         ReportVerificationResult is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.ReportVerificationResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "reason": "str",  # Optional. If the report verification action failed, to
                      indicate the detailed failed reason.
                    "result": "str"  # Optional. Indicates whether the report verification action
                      is Succeeded or Failed. Known values are: "Succeeded" and "Failed".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ReportVerificationResult] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._verify_initial(
                report_name=report_name, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(_models.ReportVerificationResult, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ReportVerificationResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ReportVerificationResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )


class WebhookOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`webhook` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, report_name: str, webhook_name: str, **kwargs: Any) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation webhook and its properties.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.WebhookResource] = kwargs.pop("cls", None)

        _request = build_webhook_get_request(
            report_name=report_name,
            webhook_name=webhook_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.WebhookResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        report_name: str,
        webhook_name: str,
        parameters: _models.WebhookResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation
        webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        webhook_name: str,
        parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation
        webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        webhook_name: str,
        parameters: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation
        webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        report_name: str,
        webhook_name: str,
        parameters: Union[_models.WebhookResource, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Create a new AppComplianceAutomation webhook or update an exiting AppComplianceAutomation
        webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param parameters: Parameters for the create or update operation. Is one of the following
         types: WebhookResource, JSON, IO[bytes] Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.WebhookResource or JSON or
         IO[bytes]
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.WebhookResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _content = json.dumps(parameters, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_webhook_create_or_update_request(
            report_name=report_name,
            webhook_name=webhook_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.WebhookResource, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.WebhookResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update(
        self,
        report_name: str,
        webhook_name: str,
        properties: _models.WebhookResourcePatch,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: ~azure.mgmt.appcomplianceautomation.models.WebhookResourcePatch
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    }
                }

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def update(
        self,
        report_name: str,
        webhook_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def update(
        self,
        report_name: str,
        webhook_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param properties: Parameters for the create or update operation. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def update(
        self,
        report_name: str,
        webhook_name: str,
        properties: Union[_models.WebhookResourcePatch, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> _models.WebhookResource:
        # pylint: disable=line-too-long
        """Update an exiting AppComplianceAutomation webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :param properties: Parameters for the create or update operation. Is one of the following
         types: WebhookResourcePatch, JSON, IO[bytes] Required.
        :type properties: ~azure.mgmt.appcomplianceautomation.models.WebhookResourcePatch or JSON or
         IO[bytes]
        :return: WebhookResource. The WebhookResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.WebhookResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    }
                }

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.WebhookResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _content = json.dumps(properties, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_webhook_update_request(
            report_name=report_name,
            webhook_name=webhook_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.WebhookResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, report_name: str, webhook_name: str, **kwargs: Any
    ) -> None:
        """Delete an AppComplianceAutomation webhook.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param webhook_name: Webhook Name. Required.
        :type webhook_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_webhook_delete_request(
            report_name=report_name,
            webhook_name=webhook_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_by_report_resource(
        self,
        report_name: str,
        *,
        skip_token: Optional[str] = None,
        top: Optional[int] = None,
        select: Optional[str] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        **kwargs: Any,
    ) -> Iterable["_models.WebhookResource"]:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation webhook list.

        :param report_name: Report Name. Required.
        :type report_name: str
        :keyword skip_token: Skip over when retrieving results. Default value is None.
        :paramtype skip_token: str
        :keyword top: Number of elements to return when retrieving results. Default value is None.
        :paramtype top: int
        :keyword select: OData Select statement. Limits the properties on each entry to just those
         requested, e.g. ?$select=reportName,id. Default value is None.
        :paramtype select: str
        :keyword filter: The filter to apply on the operation. Default value is None.
        :paramtype filter: str
        :keyword orderby: OData order by query option. Default value is None.
        :paramtype orderby: str
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :return: An iterator like instance of WebhookResource
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.WebhookResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "contentType": "str",  # Optional. content type. "application/json"
                        "deliveryStatus": "str",  # Optional. webhook deliveryStatus. Known
                          values are: "Succeeded", "Failed", and "NotStarted".
                        "enableSslVerification": "str",  # Optional. whether to enable ssl
                          verification. Known values are: "true" and "false".
                        "events": [
                            "str"  # Optional. under which event notification should be
                              sent.
                        ],
                        "payloadUrl": "str",  # Optional. webhook payload url.
                        "provisioningState": "str",  # Optional. Azure Resource Provisioning
                          State. Known values are: "Succeeded", "Failed", "Canceled", "Creating",
                          "Deleting", "Fixing", "Verifying", and "Updating".
                        "sendAllEvents": "str",  # Optional. whether to send notification
                          under any event. Known values are: "true" and "false".
                        "status": "str",  # Optional. Webhook status. Known values are:
                          "Enabled" and "Disabled".
                        "tenantId": "str",  # Optional. Tenant id.
                        "updateWebhookKey": "str",  # Optional. whether to update webhookKey.
                          Known values are: "true" and "false".
                        "webhookId": "str",  # Optional. Webhook id in database.
                        "webhookKey": "str",  # Optional. webhook secret token. If not set,
                          this field value is null; otherwise, please set a string value.
                        "webhookKeyEnabled": "str"  # Optional. whether webhookKey is
                          enabled. Known values are: "true" and "false".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.WebhookResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_webhook_list_by_report_resource_request(
                    report_name=report_name,
                    skip_token=skip_token,
                    top=top,
                    select=select,
                    filter=filter,
                    orderby=orderby,
                    offer_guid=offer_guid,
                    report_creator_tenant_id=report_creator_tenant_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.WebhookResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class SnapshotOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`snapshot` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, report_name: str, snapshot_name: str, **kwargs: Any) -> _models.SnapshotResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation snapshot and its properties.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param snapshot_name: Snapshot Name. Required.
        :type snapshot_name: str
        :return: SnapshotResource. The SnapshotResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.SnapshotResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "complianceResults": [
                            {
                                "categories": [
                                    {
                                        "categoryName": "str",  # Optional.
                                          The name of the compliance category. e.g. "Operational
                                          Security".
                                        "categoryStatus": "str",  # Optional.
                                          Category status. Known values are: "Passed", "Failed",
                                          "NotApplicable", and "PendingApproval".
                                        "controlFamilies": [
                                            {
                                                "controlFamilyName":
                                                  "str",  # Optional. The name of the control family.
                                                  e.g. "Malware Protection - Anti-Virus".
                "controlFamilyStatus": "str",  # Optional. The
                                                  control family status. Known values are: "Passed",
                                                  "Failed", "NotApplicable", and "PendingApproval".
                                                "controls": [
                                                    {
                "controlDescription": "str",  # Optional. The
                                                          control's description.
                "controlDescriptionHyperLink": "str",  #
                                                          Optional. The hyper link to the control's
                                                          description'.
                "controlFullName": "str",  # Optional. The
                                                          full name of the control. e.g. "Validate that
                                                          unsupported operating systems and software
                                                          components are not in use.".
                "controlId": "str",  # Optional. The Id of
                                                          the control. e.g. "Operational_Security_10".
                "controlName": "str",  # Optional. The name
                                                          of the control. e.g. "Unsupported OS and
                                                          Software.".
                "controlStatus": "str",  # Optional. Control
                                                          status. Known values are: "Passed", "Failed",
                                                          "NotApplicable", and "PendingApproval".
                "responsibilities": [
                {
                "evidenceFiles": [
                "str"  # Optional. List of
                                                                      evidence file url.
                ],
                "failedResourceCount": 0,  #
                                                                  Optional. The count of all failed
                                                                  resources.
                "guidance": "str",  # Optional. The
                                                                  evidence upload guidance description.
                "justification": "str",  # Optional.
                                                                  The justification given by the user
                                                                  to clarify the reason.
                "recommendationList": [
                {
                "recommendationId": "str",  #
                                                                          Optional. The Id of the
                                                                          recommendation.
                "recommendationShortName":
                                                                          "str",  # Optional. The short
                                                                          name of the recommendation.
                                                                          e.g. "Invalid TLS config".
                "recommendationSolutions": [
                {
                "isRecommendSolution":
                                                                                  "str",  # Optional.
                                                                                  Indicates whether
                                                                                  this solution is the
                                                                                  recommended. Known
                                                                                  values are: "true"
                                                                                  and "false".
                "recommendationSolutionContent":
                                                                                  "str",  # Optional.
                                                                                  The detail steps of
                                                                                  the recommendation
                                                                                  solution.
                "recommendationSolutionIndex":
                                                                                  "str"  # Optional.
                                                                                  The index of the
                                                                                  recommendation
                                                                                  solution.
                }
                ]
                }
                ],
                "resourceList": [
                {
                "accountId": "str",  #
                                                                          Optional. Account Id. For
                                                                          example - AWS account Id.
                "recommendationIds": [
                "str"  # Optional. List
                                                                              of recommendation id.
                ],
                "resourceId": "str",  #
                                                                          Optional. The Id of the
                                                                          resource.
                "resourceOrigin": "str",  #
                                                                          Optional. Resource origin.
                                                                          Known values are: "Azure",
                                                                          "AWS", and "GCP".
                "resourceStatus": "str",  #
                                                                          Optional. Resource status.
                                                                          Known values are: "Healthy"
                                                                          and "Unhealthy".
                "resourceStatusChangeDate":
                                                                          "2020-02-20 00:00:00",  #
                                                                          Optional. The status change
                                                                          date for the resource.
                "resourceType": "str"  #
                                                                          Optional. The type of the
                                                                          resource. e.g.
                                                                          "Microsoft.SignalRService/SignalR".
                }
                ],
                "responsibilityDescription": "str",
                                                                  # Optional. The description of the
                                                                  customer responsibility.
                "responsibilityEnvironment": "str",
                                                                  # Optional. The supported cloud
                                                                  environment of this customer
                                                                  responsibility. Known values are:
                                                                  "Azure", "AWS", "GCP", and "General".
                "responsibilityId": "str",  #
                                                                  Optional. The id of the customer
                                                                  responsibility.
                "responsibilitySeverity": "str",  #
                                                                  Optional. The severity level of this
                                                                  customer responsibility. Known values
                                                                  are: "High", "Medium", and "Low".
                "responsibilityStatus": "str",  #
                                                                  Optional. The status of this customer
                                                                  responsibility. Known values are:
                                                                  "Passed", "Failed", "NotApplicable",
                                                                  and "PendingApproval".
                "responsibilityTitle": "str",  #
                                                                  Optional. The title of the customer
                                                                  responsibility.
                "responsibilityType": "str",  #
                                                                  Optional. The type of customer
                                                                  responsibility. Known values are:
                                                                  "Automated", "ScopedManual", and
                                                                  "Manual".
                "totalResourceCount": 0  # Optional.
                                                                  The count of all resources.
                }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "complianceName": "str"  # Optional. The name of the
                                  compliance. e.g. "M365".
                            }
                        ],
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "reportProperties": {
                            "resources": [
                                {
                                    "resourceId": "str",  # Resource Id - e.g.
                                      "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                      Required.
                                    "accountId": "str",  # Optional. Account Id.
                                      For example - the AWS account id.
                                    "resourceKind": "str",  # Optional. Resource
                                      kind.
                                    "resourceOrigin": "str",  # Optional.
                                      Resource Origin. Known values are: "Azure", "AWS", and "GCP".
                                    "resourceType": "str"  # Optional. Resource
                                      type. e.g. "Microsoft.Compute/virtualMachines".
                                }
                            ],
                            "timeZone": "str",  # Report collection trigger time's time
                              zone, the available list can be obtained by executing "Get-TimeZone
                              -ListAvailable" in PowerShell. An example of valid timezone id is
                              "Pacific Standard Time". Required.
                            "triggerTime": "2020-02-20 00:00:00",  # Report collection
                              trigger time. Required.
                            "certRecords": [
                                {
                                    "certificationStatus": "str",  # Optional.
                                      Indicates the status of certification process.
                                    "controls": [
                                        {
                                            "controlId": "str",  #
                                              Optional. The Id of the control. e.g.
                                              "Operational_Security_10".
                                            "controlStatus": "str"  #
                                              Optional. Control status synchronized from app
                                              compliance.
                                        }
                                    ],
                                    "ingestionStatus": "str",  # Optional.
                                      Indicates the status of compliance process.
                                    "offerGuid": "str"  # Optional. The offerGuid
                                      which mapping to the reports.
                                }
                            ],
                            "complianceStatus": {
                                "m365": {
                                    "failedCount": 0,  # Optional. The count of
                                      all failed control.
                                    "manualCount": 0,  # Optional. The count of
                                      all manual control.
                                    "notApplicableCount": 0,  # Optional. The
                                      count of all not applicable control.
                                    "passedCount": 0,  # Optional. The count of
                                      all passed control.
                                    "pendingCount": 0  # Optional. The count of
                                      all pending for approval control.
                                }
                            },
                            "errors": [
                                "str"  # Optional. List of report error codes.
                            ],
                            "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report
                              last collection trigger time.
                            "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report
                              next collection trigger time.
                            "offerGuid": "str",  # Optional. A list of comma-separated
                              offerGuids indicates a series of offerGuids that map to the report. For
                              example,
                              "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                              and "00000000-0000-0000-0000-000000000003".
                            "provisioningState": "str",  # Optional. Azure lifecycle
                              management. Known values are: "Succeeded", "Failed", "Canceled",
                              "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
                            "status": "str",  # Optional. Report status. Known values
                              are: "Active", "Failed", "Reviewing", and "Disabled".
                            "storageInfo": {
                                "accountName": "str",  # Optional. 'bring your own
                                  storage' account name.
                                "location": "str",  # Optional. The region of 'bring
                                  your own storage' account.
                                "resourceGroup": "str",  # Optional. The
                                  resourceGroup which 'bring your own storage' account belongs to.
                                "subscriptionId": "str"  # Optional. The subscription
                                  id which 'bring your own storage' account belongs to.
                            },
                            "subscriptions": [
                                "str"  # Optional. List of subscription Ids.
                            ],
                            "tenantId": "str"  # Optional. Report's tenant id.
                        },
                        "reportSystemData": {
                            "createdAt": "2020-02-20",  # Optional. The type of identity
                              that created the resource.
                            "createdBy": "str",  # Optional. The identity that created
                              the resource.
                            "createdByType": "str",  # Optional. The type of identity
                              that created the resource. Known values are: "User", "Application",
                              "ManagedIdentity", and "Key".
                            "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                              resource last modification (UTC).
                            "lastModifiedBy": "str",  # Optional. The identity that last
                              modified the resource.
                            "lastModifiedByType": "str"  # Optional. The type of identity
                              that last modified the resource. Known values are: "User", "Application",
                              "ManagedIdentity", and "Key".
                        },
                        "snapshotName": "str"  # Optional. Snapshot name.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SnapshotResource] = kwargs.pop("cls", None)

        _request = build_snapshot_get_request(
            report_name=report_name,
            snapshot_name=snapshot_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SnapshotResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_report_resource(
        self,
        report_name: str,
        *,
        skip_token: Optional[str] = None,
        top: Optional[int] = None,
        select: Optional[str] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        **kwargs: Any,
    ) -> Iterable["_models.SnapshotResource"]:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation snapshot list.

        :param report_name: Report Name. Required.
        :type report_name: str
        :keyword skip_token: Skip over when retrieving results. Default value is None.
        :paramtype skip_token: str
        :keyword top: Number of elements to return when retrieving results. Default value is None.
        :paramtype top: int
        :keyword select: OData Select statement. Limits the properties on each entry to just those
         requested, e.g. ?$select=reportName,id. Default value is None.
        :paramtype select: str
        :keyword filter: The filter to apply on the operation. Default value is None.
        :paramtype filter: str
        :keyword orderby: OData order by query option. Default value is None.
        :paramtype orderby: str
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :return: An iterator like instance of SnapshotResource
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.SnapshotResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "complianceResults": [
                            {
                                "categories": [
                                    {
                                        "categoryName": "str",  # Optional.
                                          The name of the compliance category. e.g. "Operational
                                          Security".
                                        "categoryStatus": "str",  # Optional.
                                          Category status. Known values are: "Passed", "Failed",
                                          "NotApplicable", and "PendingApproval".
                                        "controlFamilies": [
                                            {
                                                "controlFamilyName":
                                                  "str",  # Optional. The name of the control family.
                                                  e.g. "Malware Protection - Anti-Virus".
                "controlFamilyStatus": "str",  # Optional. The
                                                  control family status. Known values are: "Passed",
                                                  "Failed", "NotApplicable", and "PendingApproval".
                                                "controls": [
                                                    {
                "controlDescription": "str",  # Optional. The
                                                          control's description.
                "controlDescriptionHyperLink": "str",  #
                                                          Optional. The hyper link to the control's
                                                          description'.
                "controlFullName": "str",  # Optional. The
                                                          full name of the control. e.g. "Validate that
                                                          unsupported operating systems and software
                                                          components are not in use.".
                "controlId": "str",  # Optional. The Id of
                                                          the control. e.g. "Operational_Security_10".
                "controlName": "str",  # Optional. The name
                                                          of the control. e.g. "Unsupported OS and
                                                          Software.".
                "controlStatus": "str",  # Optional. Control
                                                          status. Known values are: "Passed", "Failed",
                                                          "NotApplicable", and "PendingApproval".
                "responsibilities": [
                {
                "evidenceFiles": [
                "str"  # Optional. List of
                                                                      evidence file url.
                ],
                "failedResourceCount": 0,  #
                                                                  Optional. The count of all failed
                                                                  resources.
                "guidance": "str",  # Optional. The
                                                                  evidence upload guidance description.
                "justification": "str",  # Optional.
                                                                  The justification given by the user
                                                                  to clarify the reason.
                "recommendationList": [
                {
                "recommendationId": "str",  #
                                                                          Optional. The Id of the
                                                                          recommendation.
                "recommendationShortName":
                                                                          "str",  # Optional. The short
                                                                          name of the recommendation.
                                                                          e.g. "Invalid TLS config".
                "recommendationSolutions": [
                {
                "isRecommendSolution":
                                                                                  "str",  # Optional.
                                                                                  Indicates whether
                                                                                  this solution is the
                                                                                  recommended. Known
                                                                                  values are: "true"
                                                                                  and "false".
                "recommendationSolutionContent":
                                                                                  "str",  # Optional.
                                                                                  The detail steps of
                                                                                  the recommendation
                                                                                  solution.
                "recommendationSolutionIndex":
                                                                                  "str"  # Optional.
                                                                                  The index of the
                                                                                  recommendation
                                                                                  solution.
                }
                ]
                }
                ],
                "resourceList": [
                {
                "accountId": "str",  #
                                                                          Optional. Account Id. For
                                                                          example - AWS account Id.
                "recommendationIds": [
                "str"  # Optional. List
                                                                              of recommendation id.
                ],
                "resourceId": "str",  #
                                                                          Optional. The Id of the
                                                                          resource.
                "resourceOrigin": "str",  #
                                                                          Optional. Resource origin.
                                                                          Known values are: "Azure",
                                                                          "AWS", and "GCP".
                "resourceStatus": "str",  #
                                                                          Optional. Resource status.
                                                                          Known values are: "Healthy"
                                                                          and "Unhealthy".
                "resourceStatusChangeDate":
                                                                          "2020-02-20 00:00:00",  #
                                                                          Optional. The status change
                                                                          date for the resource.
                "resourceType": "str"  #
                                                                          Optional. The type of the
                                                                          resource. e.g.
                                                                          "Microsoft.SignalRService/SignalR".
                }
                ],
                "responsibilityDescription": "str",
                                                                  # Optional. The description of the
                                                                  customer responsibility.
                "responsibilityEnvironment": "str",
                                                                  # Optional. The supported cloud
                                                                  environment of this customer
                                                                  responsibility. Known values are:
                                                                  "Azure", "AWS", "GCP", and "General".
                "responsibilityId": "str",  #
                                                                  Optional. The id of the customer
                                                                  responsibility.
                "responsibilitySeverity": "str",  #
                                                                  Optional. The severity level of this
                                                                  customer responsibility. Known values
                                                                  are: "High", "Medium", and "Low".
                "responsibilityStatus": "str",  #
                                                                  Optional. The status of this customer
                                                                  responsibility. Known values are:
                                                                  "Passed", "Failed", "NotApplicable",
                                                                  and "PendingApproval".
                "responsibilityTitle": "str",  #
                                                                  Optional. The title of the customer
                                                                  responsibility.
                "responsibilityType": "str",  #
                                                                  Optional. The type of customer
                                                                  responsibility. Known values are:
                                                                  "Automated", "ScopedManual", and
                                                                  "Manual".
                "totalResourceCount": 0  # Optional.
                                                                  The count of all resources.
                }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "complianceName": "str"  # Optional. The name of the
                                  compliance. e.g. "M365".
                            }
                        ],
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "reportProperties": {
                            "resources": [
                                {
                                    "resourceId": "str",  # Resource Id - e.g.
                                      "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                                      Required.
                                    "accountId": "str",  # Optional. Account Id.
                                      For example - the AWS account id.
                                    "resourceKind": "str",  # Optional. Resource
                                      kind.
                                    "resourceOrigin": "str",  # Optional.
                                      Resource Origin. Known values are: "Azure", "AWS", and "GCP".
                                    "resourceType": "str"  # Optional. Resource
                                      type. e.g. "Microsoft.Compute/virtualMachines".
                                }
                            ],
                            "timeZone": "str",  # Report collection trigger time's time
                              zone, the available list can be obtained by executing "Get-TimeZone
                              -ListAvailable" in PowerShell. An example of valid timezone id is
                              "Pacific Standard Time". Required.
                            "triggerTime": "2020-02-20 00:00:00",  # Report collection
                              trigger time. Required.
                            "certRecords": [
                                {
                                    "certificationStatus": "str",  # Optional.
                                      Indicates the status of certification process.
                                    "controls": [
                                        {
                                            "controlId": "str",  #
                                              Optional. The Id of the control. e.g.
                                              "Operational_Security_10".
                                            "controlStatus": "str"  #
                                              Optional. Control status synchronized from app
                                              compliance.
                                        }
                                    ],
                                    "ingestionStatus": "str",  # Optional.
                                      Indicates the status of compliance process.
                                    "offerGuid": "str"  # Optional. The offerGuid
                                      which mapping to the reports.
                                }
                            ],
                            "complianceStatus": {
                                "m365": {
                                    "failedCount": 0,  # Optional. The count of
                                      all failed control.
                                    "manualCount": 0,  # Optional. The count of
                                      all manual control.
                                    "notApplicableCount": 0,  # Optional. The
                                      count of all not applicable control.
                                    "passedCount": 0,  # Optional. The count of
                                      all passed control.
                                    "pendingCount": 0  # Optional. The count of
                                      all pending for approval control.
                                }
                            },
                            "errors": [
                                "str"  # Optional. List of report error codes.
                            ],
                            "lastTriggerTime": "2020-02-20 00:00:00",  # Optional. Report
                              last collection trigger time.
                            "nextTriggerTime": "2020-02-20 00:00:00",  # Optional. Report
                              next collection trigger time.
                            "offerGuid": "str",  # Optional. A list of comma-separated
                              offerGuids indicates a series of offerGuids that map to the report. For
                              example,
                              "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002"
                              and "00000000-0000-0000-0000-000000000003".
                            "provisioningState": "str",  # Optional. Azure lifecycle
                              management. Known values are: "Succeeded", "Failed", "Canceled",
                              "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
                            "status": "str",  # Optional. Report status. Known values
                              are: "Active", "Failed", "Reviewing", and "Disabled".
                            "storageInfo": {
                                "accountName": "str",  # Optional. 'bring your own
                                  storage' account name.
                                "location": "str",  # Optional. The region of 'bring
                                  your own storage' account.
                                "resourceGroup": "str",  # Optional. The
                                  resourceGroup which 'bring your own storage' account belongs to.
                                "subscriptionId": "str"  # Optional. The subscription
                                  id which 'bring your own storage' account belongs to.
                            },
                            "subscriptions": [
                                "str"  # Optional. List of subscription Ids.
                            ],
                            "tenantId": "str"  # Optional. Report's tenant id.
                        },
                        "reportSystemData": {
                            "createdAt": "2020-02-20",  # Optional. The type of identity
                              that created the resource.
                            "createdBy": "str",  # Optional. The identity that created
                              the resource.
                            "createdByType": "str",  # Optional. The type of identity
                              that created the resource. Known values are: "User", "Application",
                              "ManagedIdentity", and "Key".
                            "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                              resource last modification (UTC).
                            "lastModifiedBy": "str",  # Optional. The identity that last
                              modified the resource.
                            "lastModifiedByType": "str"  # Optional. The type of identity
                              that last modified the resource. Known values are: "User", "Application",
                              "ManagedIdentity", and "Key".
                        },
                        "snapshotName": "str"  # Optional. Snapshot name.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.SnapshotResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_snapshot_list_by_report_resource_request(
                    report_name=report_name,
                    skip_token=skip_token,
                    top=top,
                    select=select,
                    filter=filter,
                    orderby=orderby,
                    offer_guid=offer_guid,
                    report_creator_tenant_id=report_creator_tenant_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.SnapshotResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    def _download_initial(
        self,
        report_name: str,
        snapshot_name: str,
        body: Union[_models.SnapshotDownloadRequest, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_snapshot_download_request(
            report_name=report_name,
            snapshot_name=snapshot_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_download(
        self,
        report_name: str,
        snapshot_name: str,
        body: _models.SnapshotDownloadRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> LROPoller[_models.DownloadResponse]:
        # pylint: disable=line-too-long
        """Download compliance needs from snapshot, like: Compliance Report, Resource List.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param snapshot_name: Snapshot Name. Required.
        :type snapshot_name: str
        :param body: Parameters for the query operation. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.SnapshotDownloadRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DownloadResponse. The DownloadResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.DownloadResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "downloadType": "str",  # Indicates the download type. Required. Known values
                      are: "ComplianceReport", "CompliancePdfReport", "ComplianceDetailedPdfReport",
                      and "ResourceList".
                    "offerGuid": "str",  # Optional. The offerGuid which mapping to the reports.
                    "reportCreatorTenantId": "str"  # Optional. Tenant id.
                }

                # response body for status code(s): 202, 200
                response == {
                    "complianceDetailedPdfReport": {
                        "sasUri": "str"  # Optional. The uri of detailed compliance pdf
                          report.
                    },
                    "compliancePdfReport": {
                        "sasUri": "str"  # Optional. The uri of compliance pdf report.
                    },
                    "complianceReport": [
                        {
                            "categoryName": "str",  # Optional. The category name.
                            "controlFamilyName": "str",  # Optional. The control family
                              name.
                            "controlId": "str",  # Optional. The control Id - e.g. "1".
                            "controlName": "str",  # Optional. The control name.
                            "controlStatus": "str",  # Optional. Control status. Known
                              values are: "Passed", "Failed", "NotApplicable", and "PendingApproval".
                            "resourceId": "str",  # Optional. The Id of the resource.
                            "resourceOrigin": "str",  # Optional. Resource origin. Known
                              values are: "Azure", "AWS", and "GCP".
                            "resourceStatus": "str",  # Optional. Resource status. Known
                              values are: "Healthy" and "Unhealthy".
                            "resourceStatusChangeDate": "2020-02-20 00:00:00",  #
                              Optional. The status change date for the resource.
                            "resourceType": "str",  # Optional. The type of the resource.
                              e.g. "Microsoft.SignalRService/SignalR".
                            "responsibilityDescription": "str",  # Optional. The
                              description of the customer responsibility.
                            "responsibilityTitle": "str"  # Optional. The title of the
                              customer responsibility.
                        }
                    ],
                    "resourceList": [
                        {
                            "resourceGroup": "str",  # Optional. The resource group name
                              of this resource.
                            "resourceId": "str",  # Optional. The resource Id - e.g.
                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                            "resourceType": "str",  # Optional. The resource type of this
                              resource. e.g. "Microsoft.SignalRService/SignalR".
                            "subscriptionId": "str"  # Optional. The subscription Id of
                              this resource.
                        }
                    ]
                }
        """

    @overload
    def begin_download(
        self, report_name: str, snapshot_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.DownloadResponse]:
        # pylint: disable=line-too-long
        """Download compliance needs from snapshot, like: Compliance Report, Resource List.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param snapshot_name: Snapshot Name. Required.
        :type snapshot_name: str
        :param body: Parameters for the query operation. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DownloadResponse. The DownloadResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.DownloadResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "complianceDetailedPdfReport": {
                        "sasUri": "str"  # Optional. The uri of detailed compliance pdf
                          report.
                    },
                    "compliancePdfReport": {
                        "sasUri": "str"  # Optional. The uri of compliance pdf report.
                    },
                    "complianceReport": [
                        {
                            "categoryName": "str",  # Optional. The category name.
                            "controlFamilyName": "str",  # Optional. The control family
                              name.
                            "controlId": "str",  # Optional. The control Id - e.g. "1".
                            "controlName": "str",  # Optional. The control name.
                            "controlStatus": "str",  # Optional. Control status. Known
                              values are: "Passed", "Failed", "NotApplicable", and "PendingApproval".
                            "resourceId": "str",  # Optional. The Id of the resource.
                            "resourceOrigin": "str",  # Optional. Resource origin. Known
                              values are: "Azure", "AWS", and "GCP".
                            "resourceStatus": "str",  # Optional. Resource status. Known
                              values are: "Healthy" and "Unhealthy".
                            "resourceStatusChangeDate": "2020-02-20 00:00:00",  #
                              Optional. The status change date for the resource.
                            "resourceType": "str",  # Optional. The type of the resource.
                              e.g. "Microsoft.SignalRService/SignalR".
                            "responsibilityDescription": "str",  # Optional. The
                              description of the customer responsibility.
                            "responsibilityTitle": "str"  # Optional. The title of the
                              customer responsibility.
                        }
                    ],
                    "resourceList": [
                        {
                            "resourceGroup": "str",  # Optional. The resource group name
                              of this resource.
                            "resourceId": "str",  # Optional. The resource Id - e.g.
                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                            "resourceType": "str",  # Optional. The resource type of this
                              resource. e.g. "Microsoft.SignalRService/SignalR".
                            "subscriptionId": "str"  # Optional. The subscription Id of
                              this resource.
                        }
                    ]
                }
        """

    @overload
    def begin_download(
        self,
        report_name: str,
        snapshot_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> LROPoller[_models.DownloadResponse]:
        # pylint: disable=line-too-long
        """Download compliance needs from snapshot, like: Compliance Report, Resource List.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param snapshot_name: Snapshot Name. Required.
        :type snapshot_name: str
        :param body: Parameters for the query operation. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DownloadResponse. The DownloadResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.DownloadResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202, 200
                response == {
                    "complianceDetailedPdfReport": {
                        "sasUri": "str"  # Optional. The uri of detailed compliance pdf
                          report.
                    },
                    "compliancePdfReport": {
                        "sasUri": "str"  # Optional. The uri of compliance pdf report.
                    },
                    "complianceReport": [
                        {
                            "categoryName": "str",  # Optional. The category name.
                            "controlFamilyName": "str",  # Optional. The control family
                              name.
                            "controlId": "str",  # Optional. The control Id - e.g. "1".
                            "controlName": "str",  # Optional. The control name.
                            "controlStatus": "str",  # Optional. Control status. Known
                              values are: "Passed", "Failed", "NotApplicable", and "PendingApproval".
                            "resourceId": "str",  # Optional. The Id of the resource.
                            "resourceOrigin": "str",  # Optional. Resource origin. Known
                              values are: "Azure", "AWS", and "GCP".
                            "resourceStatus": "str",  # Optional. Resource status. Known
                              values are: "Healthy" and "Unhealthy".
                            "resourceStatusChangeDate": "2020-02-20 00:00:00",  #
                              Optional. The status change date for the resource.
                            "resourceType": "str",  # Optional. The type of the resource.
                              e.g. "Microsoft.SignalRService/SignalR".
                            "responsibilityDescription": "str",  # Optional. The
                              description of the customer responsibility.
                            "responsibilityTitle": "str"  # Optional. The title of the
                              customer responsibility.
                        }
                    ],
                    "resourceList": [
                        {
                            "resourceGroup": "str",  # Optional. The resource group name
                              of this resource.
                            "resourceId": "str",  # Optional. The resource Id - e.g.
                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                            "resourceType": "str",  # Optional. The resource type of this
                              resource. e.g. "Microsoft.SignalRService/SignalR".
                            "subscriptionId": "str"  # Optional. The subscription Id of
                              this resource.
                        }
                    ]
                }
        """

    @distributed_trace
    def begin_download(
        self,
        report_name: str,
        snapshot_name: str,
        body: Union[_models.SnapshotDownloadRequest, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> LROPoller[_models.DownloadResponse]:
        # pylint: disable=line-too-long
        """Download compliance needs from snapshot, like: Compliance Report, Resource List.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param snapshot_name: Snapshot Name. Required.
        :type snapshot_name: str
        :param body: Parameters for the query operation. Is one of the following types:
         SnapshotDownloadRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.SnapshotDownloadRequest or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns DownloadResponse. The DownloadResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.DownloadResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "downloadType": "str",  # Indicates the download type. Required. Known values
                      are: "ComplianceReport", "CompliancePdfReport", "ComplianceDetailedPdfReport",
                      and "ResourceList".
                    "offerGuid": "str",  # Optional. The offerGuid which mapping to the reports.
                    "reportCreatorTenantId": "str"  # Optional. Tenant id.
                }

                # response body for status code(s): 202, 200
                response == {
                    "complianceDetailedPdfReport": {
                        "sasUri": "str"  # Optional. The uri of detailed compliance pdf
                          report.
                    },
                    "compliancePdfReport": {
                        "sasUri": "str"  # Optional. The uri of compliance pdf report.
                    },
                    "complianceReport": [
                        {
                            "categoryName": "str",  # Optional. The category name.
                            "controlFamilyName": "str",  # Optional. The control family
                              name.
                            "controlId": "str",  # Optional. The control Id - e.g. "1".
                            "controlName": "str",  # Optional. The control name.
                            "controlStatus": "str",  # Optional. Control status. Known
                              values are: "Passed", "Failed", "NotApplicable", and "PendingApproval".
                            "resourceId": "str",  # Optional. The Id of the resource.
                            "resourceOrigin": "str",  # Optional. Resource origin. Known
                              values are: "Azure", "AWS", and "GCP".
                            "resourceStatus": "str",  # Optional. Resource status. Known
                              values are: "Healthy" and "Unhealthy".
                            "resourceStatusChangeDate": "2020-02-20 00:00:00",  #
                              Optional. The status change date for the resource.
                            "resourceType": "str",  # Optional. The type of the resource.
                              e.g. "Microsoft.SignalRService/SignalR".
                            "responsibilityDescription": "str",  # Optional. The
                              description of the customer responsibility.
                            "responsibilityTitle": "str"  # Optional. The title of the
                              customer responsibility.
                        }
                    ],
                    "resourceList": [
                        {
                            "resourceGroup": "str",  # Optional. The resource group name
                              of this resource.
                            "resourceId": "str",  # Optional. The resource Id - e.g.
                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
                            "resourceType": "str",  # Optional. The resource type of this
                              resource. e.g. "Microsoft.SignalRService/SignalR".
                            "subscriptionId": "str"  # Optional. The subscription Id of
                              this resource.
                        }
                    ]
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DownloadResponse] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._download_initial(
                report_name=report_name,
                snapshot_name=snapshot_name,
                body=body,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs,
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(_models.DownloadResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.DownloadResponse].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.DownloadResponse](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )


class ScopingConfigurationOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`scoping_configuration` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(
        self, report_name: str, scoping_configuration_name: str, **kwargs: Any
    ) -> _models.ScopingConfigurationResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :return: ScopingConfigurationResource. The ScopingConfigurationResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ScopingConfigurationResource] = kwargs.pop("cls", None)

        _request = build_scoping_configuration_get_request(
            report_name=report_name,
            scoping_configuration_name=scoping_configuration_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ScopingConfigurationResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        report_name: str,
        scoping_configuration_name: str,
        parameters: _models.ScopingConfigurationResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.ScopingConfigurationResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :param parameters: Parameters for the create or update operation, this is a singleton resource,
         so please make sure you're using 'default' as the name. Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ScopingConfigurationResource. The ScopingConfigurationResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        scoping_configuration_name: str,
        parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.ScopingConfigurationResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :param parameters: Parameters for the create or update operation, this is a singleton resource,
         so please make sure you're using 'default' as the name. Required.
        :type parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ScopingConfigurationResource. The ScopingConfigurationResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        scoping_configuration_name: str,
        parameters: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.ScopingConfigurationResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :param parameters: Parameters for the create or update operation, this is a singleton resource,
         so please make sure you're using 'default' as the name. Required.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ScopingConfigurationResource. The ScopingConfigurationResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        report_name: str,
        scoping_configuration_name: str,
        parameters: Union[_models.ScopingConfigurationResource, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> _models.ScopingConfigurationResource:
        # pylint: disable=line-too-long
        """Get the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :param parameters: Parameters for the create or update operation, this is a singleton resource,
         so please make sure you're using 'default' as the name. Is one of the following types:
         ScopingConfigurationResource, JSON, IO[bytes] Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource or
         JSON or IO[bytes]
        :return: ScopingConfigurationResource. The ScopingConfigurationResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ScopingConfigurationResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _content = json.dumps(parameters, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_scoping_configuration_create_or_update_request(
            report_name=report_name,
            scoping_configuration_name=scoping_configuration_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.ScopingConfigurationResource, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.ScopingConfigurationResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, report_name: str, scoping_configuration_name: str, **kwargs: Any
    ) -> None:
        """Clean the AppComplianceAutomation scoping configuration of the specific report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param scoping_configuration_name: The scoping configuration of the specific report. Required.
        :type scoping_configuration_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_scoping_configuration_delete_request(
            report_name=report_name,
            scoping_configuration_name=scoping_configuration_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_by_report_resource(
        self, report_name: str, **kwargs: Any
    ) -> Iterable["_models.ScopingConfigurationResource"]:
        # pylint: disable=line-too-long
        """Returns a list format of the singleton scopingConfiguration for a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :return: An iterator like instance of ScopingConfigurationResource
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "answers": [
                            {
                                "answers": [
                                    "str"  # Question answer value list.
                                      Required.
                                ],
                                "questionId": "str"  # Question id. Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.ScopingConfigurationResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_scoping_configuration_list_by_report_resource_request(
                    report_name=report_name,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ScopingConfigurationResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class EvidenceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`evidence` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, report_name: str, evidence_name: str, **kwargs: Any) -> _models.EvidenceResource:
        # pylint: disable=line-too-long
        """Get the evidence metadata.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :return: EvidenceResource. The EvidenceResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.EvidenceResource] = kwargs.pop("cls", None)

        _request = build_evidence_get_request(
            report_name=report_name,
            evidence_name=evidence_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.EvidenceResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        report_name: str,
        evidence_name: str,
        parameters: _models.EvidenceResource,
        *,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.EvidenceResource:
        # pylint: disable=line-too-long
        """Create or Update an evidence a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceResource. The EvidenceResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        evidence_name: str,
        parameters: JSON,
        *,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.EvidenceResource:
        # pylint: disable=line-too-long
        """Create or Update an evidence a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: JSON
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceResource. The EvidenceResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        report_name: str,
        evidence_name: str,
        parameters: IO[bytes],
        *,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.EvidenceResource:
        # pylint: disable=line-too-long
        """Create or Update an evidence a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param parameters: Parameters for the create or update operation. Required.
        :type parameters: IO[bytes]
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceResource. The EvidenceResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        report_name: str,
        evidence_name: str,
        parameters: Union[_models.EvidenceResource, JSON, IO[bytes]],
        *,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        **kwargs: Any,
    ) -> _models.EvidenceResource:
        # pylint: disable=line-too-long
        """Create or Update an evidence a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param parameters: Parameters for the create or update operation. Is one of the following
         types: EvidenceResource, JSON, IO[bytes] Required.
        :type parameters: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource or JSON or
         IO[bytes]
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :return: EvidenceResource. The EvidenceResource is compatible with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.EvidenceResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _content = json.dumps(parameters, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_evidence_create_or_update_request(
            report_name=report_name,
            evidence_name=evidence_name,
            offer_guid=offer_guid,
            report_creator_tenant_id=report_creator_tenant_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.EvidenceResource, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.EvidenceResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, report_name: str, evidence_name: str, **kwargs: Any
    ) -> None:
        """Delete an existent evidence from a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_evidence_delete_request(
            report_name=report_name,
            evidence_name=evidence_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_by_report_resource(
        self,
        report_name: str,
        *,
        skip_token: Optional[str] = None,
        top: Optional[int] = None,
        select: Optional[str] = None,
        filter: Optional[str] = None,
        orderby: Optional[str] = None,
        offer_guid: Optional[str] = None,
        report_creator_tenant_id: Optional[str] = None,
        **kwargs: Any,
    ) -> Iterable["_models.EvidenceResource"]:
        # pylint: disable=line-too-long
        """Returns a paginated list of evidences for a specified report.

        :param report_name: Report Name. Required.
        :type report_name: str
        :keyword skip_token: Skip over when retrieving results. Default value is None.
        :paramtype skip_token: str
        :keyword top: Number of elements to return when retrieving results. Default value is None.
        :paramtype top: int
        :keyword select: OData Select statement. Limits the properties on each entry to just those
         requested, e.g. ?$select=reportName,id. Default value is None.
        :paramtype select: str
        :keyword filter: The filter to apply on the operation. Default value is None.
        :paramtype filter: str
        :keyword orderby: OData order by query option. Default value is None.
        :paramtype orderby: str
        :keyword offer_guid: The offerGuid which mapping to the reports. Default value is None.
        :paramtype offer_guid: str
        :keyword report_creator_tenant_id: The tenant id of the report creator. Default value is None.
        :paramtype report_creator_tenant_id: str
        :return: An iterator like instance of EvidenceResource
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.EvidenceResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "filePath": "str",  # The path of the file in storage. Required.
                        "controlId": "str",  # Optional. Control id.
                        "evidenceType": "str",  # Optional. Evidence type. Known values are:
                          "File", "AutoCollectedEvidence", and "Data".
                        "extraData": "str",  # Optional. Extra data considered as evidence.
                        "provisioningState": "str",  # Optional. Azure lifecycle management.
                          Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Deleting",
                          "Fixing", "Verifying", and "Updating".
                        "responsibilityId": "str"  # Optional. Responsibility id.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.EvidenceResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_evidence_list_by_report_resource_request(
                    report_name=report_name,
                    skip_token=skip_token,
                    top=top,
                    select=select,
                    filter=filter,
                    orderby=orderby,
                    offer_guid=offer_guid,
                    report_creator_tenant_id=report_creator_tenant_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.EvidenceResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def download(
        self,
        report_name: str,
        evidence_name: str,
        body: _models.EvidenceFileDownloadRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.EvidenceFileDownloadResponse:
        """Download evidence file.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param body: Parameters for the query operation. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceFileDownloadResponse. The EvidenceFileDownloadResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "offerGuid": "str",  # Optional. The offerGuid which mapping to the reports.
                    "reportCreatorTenantId": "str"  # Optional. Tenant id.
                }

                # response body for status code(s): 200
                response == {
                    "evidenceFile": {
                        "url": "str"  # Optional. The url of evidence file.
                    }
                }
        """

    @overload
    def download(
        self, report_name: str, evidence_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.EvidenceFileDownloadResponse:
        """Download evidence file.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param body: Parameters for the query operation. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceFileDownloadResponse. The EvidenceFileDownloadResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "evidenceFile": {
                        "url": "str"  # Optional. The url of evidence file.
                    }
                }
        """

    @overload
    def download(
        self,
        report_name: str,
        evidence_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> _models.EvidenceFileDownloadResponse:
        """Download evidence file.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param body: Parameters for the query operation. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: EvidenceFileDownloadResponse. The EvidenceFileDownloadResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "evidenceFile": {
                        "url": "str"  # Optional. The url of evidence file.
                    }
                }
        """

    @distributed_trace
    def download(
        self,
        report_name: str,
        evidence_name: str,
        body: Union[_models.EvidenceFileDownloadRequest, JSON, IO[bytes]],
        **kwargs: Any,
    ) -> _models.EvidenceFileDownloadResponse:
        """Download evidence file.

        :param report_name: Report Name. Required.
        :type report_name: str
        :param evidence_name: The evidence name. Required.
        :type evidence_name: str
        :param body: Parameters for the query operation. Is one of the following types:
         EvidenceFileDownloadRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadRequest or JSON or
         IO[bytes]
        :return: EvidenceFileDownloadResponse. The EvidenceFileDownloadResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "offerGuid": "str",  # Optional. The offerGuid which mapping to the reports.
                    "reportCreatorTenantId": "str"  # Optional. Tenant id.
                }

                # response body for status code(s): 200
                response == {
                    "evidenceFile": {
                        "url": "str"  # Optional. The url of evidence file.
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.EvidenceFileDownloadResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_evidence_download_request(
            report_name=report_name,
            evidence_name=evidence_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.EvidenceFileDownloadResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable["_models.Operation"]:
        # pylint: disable=line-too-long
        """List the operations for the provider.

        :return: An iterator like instance of Operation
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.appcomplianceautomation.models.Operation]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # Optional. Extensible enum. Indicates the action type.
                      "Internal" refers to actions that are for internal only APIs. "Internal"
                    "display": {
                        "description": "str",  # Optional. The short, localized friendly
                          description of the operation; suitable for tool tips and detailed views.
                        "operation": "str",  # Optional. The concise, localized friendly name
                          for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
                          Machine", "Restart Virtual Machine".
                        "provider": "str",  # Optional. The localized friendly form of the
                          resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
                          Compute".
                        "resource": "str"  # Optional. The localized friendly name of the
                          resource type related to this operation. E.g. "Virtual Machines" or "Job
                          Schedule Collections".
                    },
                    "isDataAction": bool,  # Optional. Whether the operation applies to
                      data-plane. This is "true" for data-plane operations and "false" for Azure
                      Resource Manager/control-plane operations.
                    "name": "str",  # Optional. The name of the operation, as per Resource-Based
                      Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
                      "Microsoft.Compute/virtualMachines/capture/action".
                    "origin": "str"  # Optional. The intended executor of the operation; as in
                      Resource Based Access Control (RBAC) and audit logs UX. Default value is
                      "user,system". Known values are: "user", "system", and "user,system".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Operation]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Operation], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class ProviderActionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.appcomplianceautomation.AppComplianceAutomationClient`'s
        :attr:`provider_actions` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def check_name_availability(
        self, body: _models.CheckNameAvailabilityRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Check if the given name is available for a report.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Optional. The name of the resource for which availability
                      needs to be checked.
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @overload
    def check_name_availability(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Check if the given name is available for a report.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @overload
    def check_name_availability(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Check if the given name is available for a report.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """

    @distributed_trace
    def check_name_availability(
        self, body: Union[_models.CheckNameAvailabilityRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        # pylint: disable=line-too-long
        """Check if the given name is available for a report.

        :param body: The content of the action request. Is one of the following types:
         CheckNameAvailabilityRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityRequest or JSON or
         IO[bytes]
        :return: CheckNameAvailabilityResponse. The CheckNameAvailabilityResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "name": "str",  # Optional. The name of the resource for which availability
                      needs to be checked.
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "message": "str",  # Optional. Detailed reason why the given name is not
                      available.
                    "nameAvailable": bool,  # Optional. Indicates if the resource name is
                      available.
                    "reason": "str"  # Optional. The reason why the given name is not available.
                      Known values are: "Invalid" and "AlreadyExists".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CheckNameAvailabilityResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_check_name_availability_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.CheckNameAvailabilityResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def get_collection_count(
        self, body: _models.GetCollectionCountRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetCollectionCountResponse:
        """Get the count of reports.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetCollectionCountResponse. The GetCollectionCountResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "count": 0  # Optional. The count of the specified resource.
                }
        """

    @overload
    def get_collection_count(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetCollectionCountResponse:
        """Get the count of reports.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetCollectionCountResponse. The GetCollectionCountResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "count": 0  # Optional. The count of the specified resource.
                }
        """

    @overload
    def get_collection_count(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetCollectionCountResponse:
        """Get the count of reports.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetCollectionCountResponse. The GetCollectionCountResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "count": 0  # Optional. The count of the specified resource.
                }
        """

    @distributed_trace
    def get_collection_count(
        self, body: Union[_models.GetCollectionCountRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.GetCollectionCountResponse:
        """Get the count of reports.

        :param body: The content of the action request. Is one of the following types:
         GetCollectionCountRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountRequest or JSON or
         IO[bytes]
        :return: GetCollectionCountResponse. The GetCollectionCountResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetCollectionCountResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "count": 0  # Optional. The count of the specified resource.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetCollectionCountResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_get_collection_count_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.GetCollectionCountResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def get_overview_status(
        self, body: _models.GetOverviewStatusRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetOverviewStatusResponse:
        """Get the resource overview status.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOverviewStatusResponse. The GetOverviewStatusResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "statusList": [
                        {
                            "statusName": "str",  # Optional. Status name - e.g.
                              "Active", "Failed".
                            "statusValue": "str"  # Optional. Status value. e.g. "100",
                              or "100%".
                        }
                    ]
                }
        """

    @overload
    def get_overview_status(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetOverviewStatusResponse:
        """Get the resource overview status.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOverviewStatusResponse. The GetOverviewStatusResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "statusList": [
                        {
                            "statusName": "str",  # Optional. Status name - e.g.
                              "Active", "Failed".
                            "statusValue": "str"  # Optional. Status value. e.g. "100",
                              or "100%".
                        }
                    ]
                }
        """

    @overload
    def get_overview_status(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GetOverviewStatusResponse:
        """Get the resource overview status.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: GetOverviewStatusResponse. The GetOverviewStatusResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "statusList": [
                        {
                            "statusName": "str",  # Optional. Status name - e.g.
                              "Active", "Failed".
                            "statusValue": "str"  # Optional. Status value. e.g. "100",
                              or "100%".
                        }
                    ]
                }
        """

    @distributed_trace
    def get_overview_status(
        self, body: Union[_models.GetOverviewStatusRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.GetOverviewStatusResponse:
        """Get the resource overview status.

        :param body: The content of the action request. Is one of the following types:
         GetOverviewStatusRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusRequest or JSON or
         IO[bytes]
        :return: GetOverviewStatusResponse. The GetOverviewStatusResponse is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.GetOverviewStatusResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "type": "str"  # Optional. The resource type.
                }

                # response body for status code(s): 200
                response == {
                    "statusList": [
                        {
                            "statusName": "str",  # Optional. Status name - e.g.
                              "Active", "Failed".
                            "statusValue": "str"  # Optional. Status value. e.g. "100",
                              or "100%".
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetOverviewStatusResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_get_overview_status_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.GetOverviewStatusResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _onboard_initial(self, body: Union[_models.OnboardRequest, JSON, IO[bytes]], **kwargs: Any) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_onboard_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_onboard(
        self, body: _models.OnboardRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.OnboardResponse]:
        """Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.OnboardRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns OnboardResponse. The OnboardResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.OnboardResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "subscriptionIds": [
                        "str"  # List of subscription ids to be onboarded. Required.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids that are onboarded.
                    ]
                }
        """

    @overload
    def begin_onboard(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.OnboardResponse]:
        """Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns OnboardResponse. The OnboardResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.OnboardResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids that are onboarded.
                    ]
                }
        """

    @overload
    def begin_onboard(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.OnboardResponse]:
        """Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns OnboardResponse. The OnboardResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.OnboardResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids that are onboarded.
                    ]
                }
        """

    @distributed_trace
    def begin_onboard(
        self, body: Union[_models.OnboardRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[_models.OnboardResponse]:
        """Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.

        :param body: The content of the action request. Is one of the following types: OnboardRequest,
         JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.OnboardRequest or JSON or IO[bytes]
        :return: An instance of LROPoller that returns OnboardResponse. The OnboardResponse is
         compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.OnboardResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "subscriptionIds": [
                        "str"  # List of subscription ids to be onboarded. Required.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids that are onboarded.
                    ]
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._onboard_initial(
                body=body, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.OnboardResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.OnboardResponse].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.OnboardResponse](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _trigger_evaluation_initial(
        self, body: Union[_models.TriggerEvaluationRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_trigger_evaluation_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_trigger_evaluation(
        self, body: _models.TriggerEvaluationRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.TriggerEvaluationResponse]:
        # pylint: disable=line-too-long
        """Trigger quick evaluation for the given subscriptions.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns TriggerEvaluationResponse. The
         TriggerEvaluationResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "resourceIds": [
                        "str"  # List of resource ids to be evaluated. Required.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "evaluationEndTime": "2020-02-20 00:00:00",  # Optional. The time
                          when the evaluation is end.
                        "quickAssessments": [
                            {
                                "description": "str",  # Optional. Quick assessment
                                  display name.
                                "displayName": "str",  # Optional. Quick assessment
                                  display name.
                                "remediationLink": "str",  # Optional. Link to
                                  remediation steps for this quick assessment.
                                "resourceId": "str",  # Optional. Resource id.
                                "resourceStatus": "str",  # Optional. Quick
                                  assessment status. Known values are: "Healthy" and "Unhealthy".
                                "responsibilityId": "str",  # Optional.
                                  Responsibility id.
                                "timestamp": "2020-02-20 00:00:00"  # Optional. The
                                  timestamp of resource creation (UTC).
                            }
                        ],
                        "resourceIds": [
                            "str"  # Optional. List of resource ids to be evaluated.
                        ],
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. The time when the
                          evaluation is triggered.
                    }
                }
        """

    @overload
    def begin_trigger_evaluation(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.TriggerEvaluationResponse]:
        # pylint: disable=line-too-long
        """Trigger quick evaluation for the given subscriptions.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns TriggerEvaluationResponse. The
         TriggerEvaluationResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "evaluationEndTime": "2020-02-20 00:00:00",  # Optional. The time
                          when the evaluation is end.
                        "quickAssessments": [
                            {
                                "description": "str",  # Optional. Quick assessment
                                  display name.
                                "displayName": "str",  # Optional. Quick assessment
                                  display name.
                                "remediationLink": "str",  # Optional. Link to
                                  remediation steps for this quick assessment.
                                "resourceId": "str",  # Optional. Resource id.
                                "resourceStatus": "str",  # Optional. Quick
                                  assessment status. Known values are: "Healthy" and "Unhealthy".
                                "responsibilityId": "str",  # Optional.
                                  Responsibility id.
                                "timestamp": "2020-02-20 00:00:00"  # Optional. The
                                  timestamp of resource creation (UTC).
                            }
                        ],
                        "resourceIds": [
                            "str"  # Optional. List of resource ids to be evaluated.
                        ],
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. The time when the
                          evaluation is triggered.
                    }
                }
        """

    @overload
    def begin_trigger_evaluation(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.TriggerEvaluationResponse]:
        # pylint: disable=line-too-long
        """Trigger quick evaluation for the given subscriptions.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns TriggerEvaluationResponse. The
         TriggerEvaluationResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "evaluationEndTime": "2020-02-20 00:00:00",  # Optional. The time
                          when the evaluation is end.
                        "quickAssessments": [
                            {
                                "description": "str",  # Optional. Quick assessment
                                  display name.
                                "displayName": "str",  # Optional. Quick assessment
                                  display name.
                                "remediationLink": "str",  # Optional. Link to
                                  remediation steps for this quick assessment.
                                "resourceId": "str",  # Optional. Resource id.
                                "resourceStatus": "str",  # Optional. Quick
                                  assessment status. Known values are: "Healthy" and "Unhealthy".
                                "responsibilityId": "str",  # Optional.
                                  Responsibility id.
                                "timestamp": "2020-02-20 00:00:00"  # Optional. The
                                  timestamp of resource creation (UTC).
                            }
                        ],
                        "resourceIds": [
                            "str"  # Optional. List of resource ids to be evaluated.
                        ],
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. The time when the
                          evaluation is triggered.
                    }
                }
        """

    @distributed_trace
    def begin_trigger_evaluation(
        self, body: Union[_models.TriggerEvaluationRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[_models.TriggerEvaluationResponse]:
        # pylint: disable=line-too-long
        """Trigger quick evaluation for the given subscriptions.

        :param body: The content of the action request. Is one of the following types:
         TriggerEvaluationRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationRequest or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns TriggerEvaluationResponse. The
         TriggerEvaluationResponse is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.appcomplianceautomation.models.TriggerEvaluationResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "resourceIds": [
                        "str"  # List of resource ids to be evaluated. Required.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "properties": {
                        "evaluationEndTime": "2020-02-20 00:00:00",  # Optional. The time
                          when the evaluation is end.
                        "quickAssessments": [
                            {
                                "description": "str",  # Optional. Quick assessment
                                  display name.
                                "displayName": "str",  # Optional. Quick assessment
                                  display name.
                                "remediationLink": "str",  # Optional. Link to
                                  remediation steps for this quick assessment.
                                "resourceId": "str",  # Optional. Resource id.
                                "resourceStatus": "str",  # Optional. Quick
                                  assessment status. Known values are: "Healthy" and "Unhealthy".
                                "responsibilityId": "str",  # Optional.
                                  Responsibility id.
                                "timestamp": "2020-02-20 00:00:00"  # Optional. The
                                  timestamp of resource creation (UTC).
                            }
                        ],
                        "resourceIds": [
                            "str"  # Optional. List of resource ids to be evaluated.
                        ],
                        "triggerTime": "2020-02-20 00:00:00"  # Optional. The time when the
                          evaluation is triggered.
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._trigger_evaluation_initial(
                body=body, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.TriggerEvaluationResponse, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.TriggerEvaluationResponse].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.TriggerEvaluationResponse](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def list_in_use_storage_accounts(
        self, body: _models.ListInUseStorageAccountsRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ListInUseStorageAccountsResponse:
        # pylint: disable=line-too-long
        """List the storage accounts which are in use by related reports.

        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ListInUseStorageAccountsResponse. The ListInUseStorageAccountsResponse is compatible
         with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids to be query. If the list
                          is null or empty, the API will query all the subscriptions of the user.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "storageAccountList": [
                        {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        }
                    ]
                }
        """

    @overload
    def list_in_use_storage_accounts(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ListInUseStorageAccountsResponse:
        """List the storage accounts which are in use by related reports.

        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ListInUseStorageAccountsResponse. The ListInUseStorageAccountsResponse is compatible
         with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageAccountList": [
                        {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        }
                    ]
                }
        """

    @overload
    def list_in_use_storage_accounts(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ListInUseStorageAccountsResponse:
        """List the storage accounts which are in use by related reports.

        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ListInUseStorageAccountsResponse. The ListInUseStorageAccountsResponse is compatible
         with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageAccountList": [
                        {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        }
                    ]
                }
        """

    @distributed_trace
    def list_in_use_storage_accounts(
        self, body: Union[_models.ListInUseStorageAccountsRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.ListInUseStorageAccountsResponse:
        # pylint: disable=line-too-long
        """List the storage accounts which are in use by related reports.

        :param body: The content of the action request. Is one of the following types:
         ListInUseStorageAccountsRequest, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsRequest or JSON
         or IO[bytes]
        :return: ListInUseStorageAccountsResponse. The ListInUseStorageAccountsResponse is compatible
         with MutableMapping
        :rtype: ~azure.mgmt.appcomplianceautomation.models.ListInUseStorageAccountsResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "subscriptionIds": [
                        "str"  # Optional. List of subscription ids to be query. If the list
                          is null or empty, the API will query all the subscriptions of the user.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "storageAccountList": [
                        {
                            "accountName": "str",  # Optional. 'bring your own storage'
                              account name.
                            "location": "str",  # Optional. The region of 'bring your own
                              storage' account.
                            "resourceGroup": "str",  # Optional. The resourceGroup which
                              'bring your own storage' account belongs to.
                            "subscriptionId": "str"  # Optional. The subscription id
                              which 'bring your own storage' account belongs to.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ListInUseStorageAccountsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_provider_actions_list_in_use_storage_accounts_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ListInUseStorageAccountsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
