# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Category(_model_base.Model):
    """A class represent the compliance category.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar category_name: The name of the compliance category. e.g. "Operational Security".
    :vartype category_name: str
    :ivar category_status: Category status. Known values are: "Passed", "Failed", "NotApplicable",
     and "PendingApproval".
    :vartype category_status: str or ~azure.mgmt.appcomplianceautomation.models.CategoryStatus
    :ivar control_families: List of control families.
    :vartype control_families: list[~azure.mgmt.appcomplianceautomation.models.ControlFamily]
    """

    category_name: Optional[str] = rest_field(name="categoryName", visibility=["read"])
    """The name of the compliance category. e.g. \"Operational Security\"."""
    category_status: Optional[Union[str, "_models.CategoryStatus"]] = rest_field(
        name="categoryStatus", visibility=["read"]
    )
    """Category status. Known values are: \"Passed\", \"Failed\", \"NotApplicable\", and
     \"PendingApproval\"."""
    control_families: Optional[List["_models.ControlFamily"]] = rest_field(name="controlFamilies", visibility=["read"])
    """List of control families."""


class CertSyncRecord(_model_base.Model):
    """A class represent the certification record synchronized from app compliance.

    :ivar offer_guid: The offerGuid which mapping to the reports.
    :vartype offer_guid: str
    :ivar certification_status: Indicates the status of certification process.
    :vartype certification_status: str
    :ivar ingestion_status: Indicates the status of compliance process.
    :vartype ingestion_status: str
    :ivar controls: The control records list to be synchronized.
    :vartype controls: list[~azure.mgmt.appcomplianceautomation.models.ControlSyncRecord]
    """

    offer_guid: Optional[str] = rest_field(name="offerGuid", visibility=["read", "create", "update", "delete", "query"])
    """The offerGuid which mapping to the reports."""
    certification_status: Optional[str] = rest_field(
        name="certificationStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates the status of certification process."""
    ingestion_status: Optional[str] = rest_field(
        name="ingestionStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates the status of compliance process."""
    controls: Optional[List["_models.ControlSyncRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The control records list to be synchronized."""

    @overload
    def __init__(
        self,
        *,
        offer_guid: Optional[str] = None,
        certification_status: Optional[str] = None,
        ingestion_status: Optional[str] = None,
        controls: Optional[List["_models.ControlSyncRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityRequest(_model_base.Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the resource for which availability needs to be checked."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityResponse(_model_base.Model):
    """The check availability result.

    :ivar name_available: Indicates if the resource name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the given name is not available. Known values are: "Invalid" and
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.appcomplianceautomation.models.CheckNameAvailabilityReason
    :ivar message: Detailed reason why the given name is not available.
    :vartype message: str
    """

    name_available: Optional[bool] = rest_field(
        name="nameAvailable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates if the resource name is available."""
    reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The reason why the given name is not available. Known values are: \"Invalid\" and
     \"AlreadyExists\"."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Detailed reason why the given name is not available."""

    @overload
    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComplianceReportItem(_model_base.Model):
    """Object that includes all the content for single compliance result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar category_name: The category name.
    :vartype category_name: str
    :ivar control_family_name: The control family name.
    :vartype control_family_name: str
    :ivar control_id: The control Id - e.g. "1".
    :vartype control_id: str
    :ivar control_name: The control name.
    :vartype control_name: str
    :ivar control_status: Control status. Known values are: "Passed", "Failed", "NotApplicable",
     and "PendingApproval".
    :vartype control_status: str or ~azure.mgmt.appcomplianceautomation.models.ControlStatus
    :ivar responsibility_title: The title of the customer responsibility.
    :vartype responsibility_title: str
    :ivar responsibility_description: The description of the customer responsibility.
    :vartype responsibility_description: str
    :ivar resource_id: The Id of the resource.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource.  e.g. "Microsoft.SignalRService/SignalR".
    :vartype resource_type: str
    :ivar resource_origin: Resource origin. Known values are: "Azure", "AWS", and "GCP".
    :vartype resource_origin: str or ~azure.mgmt.appcomplianceautomation.models.ResourceOrigin
    :ivar resource_status: Resource status. Known values are: "Healthy" and "Unhealthy".
    :vartype resource_status: str or ~azure.mgmt.appcomplianceautomation.models.ResourceStatus
    :ivar resource_status_change_date: The status change date for the resource.
    :vartype resource_status_change_date: ~datetime.datetime
    """

    category_name: Optional[str] = rest_field(name="categoryName", visibility=["read"])
    """The category name."""
    control_family_name: Optional[str] = rest_field(name="controlFamilyName", visibility=["read"])
    """The control family name."""
    control_id: Optional[str] = rest_field(name="controlId", visibility=["read"])
    """The control Id - e.g. \"1\"."""
    control_name: Optional[str] = rest_field(name="controlName", visibility=["read"])
    """The control name."""
    control_status: Optional[Union[str, "_models.ControlStatus"]] = rest_field(
        name="controlStatus", visibility=["read"]
    )
    """Control status. Known values are: \"Passed\", \"Failed\", \"NotApplicable\", and
     \"PendingApproval\"."""
    responsibility_title: Optional[str] = rest_field(name="responsibilityTitle", visibility=["read"])
    """The title of the customer responsibility."""
    responsibility_description: Optional[str] = rest_field(name="responsibilityDescription", visibility=["read"])
    """The description of the customer responsibility."""
    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """The Id of the resource."""
    resource_type: Optional[str] = rest_field(name="resourceType", visibility=["read"])
    """The type of the resource.  e.g. \"Microsoft.SignalRService/SignalR\"."""
    resource_origin: Optional[Union[str, "_models.ResourceOrigin"]] = rest_field(
        name="resourceOrigin", visibility=["read"]
    )
    """Resource origin. Known values are: \"Azure\", \"AWS\", and \"GCP\"."""
    resource_status: Optional[Union[str, "_models.ResourceStatus"]] = rest_field(
        name="resourceStatus", visibility=["read"]
    )
    """Resource status. Known values are: \"Healthy\" and \"Unhealthy\"."""
    resource_status_change_date: Optional[datetime.datetime] = rest_field(
        name="resourceStatusChangeDate", visibility=["read"], format="rfc3339"
    )
    """The status change date for the resource."""


class ComplianceResult(_model_base.Model):
    """A class represent the compliance result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar compliance_name: The name of the compliance. e.g. "M365".
    :vartype compliance_name: str
    :ivar categories: List of categories.
    :vartype categories: list[~azure.mgmt.appcomplianceautomation.models.Category]
    """

    compliance_name: Optional[str] = rest_field(name="complianceName", visibility=["read"])
    """The name of the compliance. e.g. \"M365\"."""
    categories: Optional[List["_models.Category"]] = rest_field(visibility=["read"])
    """List of categories."""


class Control(_model_base.Model):
    """A class represent the control.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar control_id: The Id of the control. e.g. "Operational_Security_10".
    :vartype control_id: str
    :ivar control_name: The name of the control. e.g. "Unsupported OS and Software.".
    :vartype control_name: str
    :ivar control_full_name: The full name of the control. e.g. "Validate that unsupported
     operating systems and software components are not in use.".
    :vartype control_full_name: str
    :ivar control_description: The control's description.
    :vartype control_description: str
    :ivar control_description_hyper_link: The hyper link to the control's description'.
    :vartype control_description_hyper_link: str
    :ivar control_status: Control status. Known values are: "Passed", "Failed", "NotApplicable",
     and "PendingApproval".
    :vartype control_status: str or ~azure.mgmt.appcomplianceautomation.models.ControlStatus
    :ivar responsibilities: List of customer responsibility.
    :vartype responsibilities: list[~azure.mgmt.appcomplianceautomation.models.Responsibility]
    """

    control_id: Optional[str] = rest_field(name="controlId", visibility=["read"])
    """The Id of the control. e.g. \"Operational_Security_10\"."""
    control_name: Optional[str] = rest_field(name="controlName", visibility=["read"])
    """The name of the control. e.g. \"Unsupported OS and Software.\"."""
    control_full_name: Optional[str] = rest_field(name="controlFullName", visibility=["read"])
    """The full name of the control. e.g. \"Validate that unsupported operating systems and software
     components are not in use.\"."""
    control_description: Optional[str] = rest_field(name="controlDescription", visibility=["read"])
    """The control's description."""
    control_description_hyper_link: Optional[str] = rest_field(name="controlDescriptionHyperLink", visibility=["read"])
    """The hyper link to the control's description'."""
    control_status: Optional[Union[str, "_models.ControlStatus"]] = rest_field(
        name="controlStatus", visibility=["read"]
    )
    """Control status. Known values are: \"Passed\", \"Failed\", \"NotApplicable\", and
     \"PendingApproval\"."""
    responsibilities: Optional[List["_models.Responsibility"]] = rest_field(visibility=["read"])
    """List of customer responsibility."""


class ControlFamily(_model_base.Model):
    """A class represent the control family.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar control_family_name: The name of the control family. e.g. "Malware Protection -
     Anti-Virus".
    :vartype control_family_name: str
    :ivar control_family_status: The control family status. Known values are: "Passed", "Failed",
     "NotApplicable", and "PendingApproval".
    :vartype control_family_status: str or
     ~azure.mgmt.appcomplianceautomation.models.ControlFamilyStatus
    :ivar controls: List of controls.
    :vartype controls: list[~azure.mgmt.appcomplianceautomation.models.Control]
    """

    control_family_name: Optional[str] = rest_field(name="controlFamilyName", visibility=["read"])
    """The name of the control family. e.g. \"Malware Protection - Anti-Virus\"."""
    control_family_status: Optional[Union[str, "_models.ControlFamilyStatus"]] = rest_field(
        name="controlFamilyStatus", visibility=["read"]
    )
    """The control family status. Known values are: \"Passed\", \"Failed\", \"NotApplicable\", and
     \"PendingApproval\"."""
    controls: Optional[List["_models.Control"]] = rest_field(visibility=["read"])
    """List of controls."""


class ControlSyncRecord(_model_base.Model):
    """A class represent the control record synchronized from app compliance.

    :ivar control_id: The Id of the control. e.g. "Operational_Security_10".
    :vartype control_id: str
    :ivar control_status: Control status synchronized from app compliance.
    :vartype control_status: str
    """

    control_id: Optional[str] = rest_field(name="controlId", visibility=["read", "create", "update", "delete", "query"])
    """The Id of the control. e.g. \"Operational_Security_10\"."""
    control_status: Optional[str] = rest_field(
        name="controlStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Control status synchronized from app compliance."""

    @overload
    def __init__(
        self,
        *,
        control_id: Optional[str] = None,
        control_status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DownloadResponse(_model_base.Model):
    """Object that includes all the possible response for the download operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_list: Resource list of the report.
    :vartype resource_list: list[~azure.mgmt.appcomplianceautomation.models.ResourceItem]
    :ivar compliance_report: List of the compliance result.
    :vartype compliance_report:
     list[~azure.mgmt.appcomplianceautomation.models.ComplianceReportItem]
    :ivar compliance_pdf_report: Compliance pdf report.
    :vartype compliance_pdf_report:
     ~azure.mgmt.appcomplianceautomation.models.DownloadResponseCompliancePdfReport
    :ivar compliance_detailed_pdf_report: The detailed compliance pdf report.
    :vartype compliance_detailed_pdf_report:
     ~azure.mgmt.appcomplianceautomation.models.DownloadResponseComplianceDetailedPdfReport
    """

    resource_list: Optional[List["_models.ResourceItem"]] = rest_field(name="resourceList", visibility=["read"])
    """Resource list of the report."""
    compliance_report: Optional[List["_models.ComplianceReportItem"]] = rest_field(
        name="complianceReport", visibility=["read"]
    )
    """List of the compliance result."""
    compliance_pdf_report: Optional["_models.DownloadResponseCompliancePdfReport"] = rest_field(
        name="compliancePdfReport", visibility=["read"]
    )
    """Compliance pdf report."""
    compliance_detailed_pdf_report: Optional["_models.DownloadResponseComplianceDetailedPdfReport"] = rest_field(
        name="complianceDetailedPdfReport", visibility=["read"]
    )
    """The detailed compliance pdf report."""


class DownloadResponseComplianceDetailedPdfReport(_model_base.Model):  # pylint: disable=name-too-long
    """The detailed compliance pdf report.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar sas_uri: The uri of detailed compliance pdf report.
    :vartype sas_uri: str
    """

    sas_uri: Optional[str] = rest_field(name="sasUri", visibility=["read"])
    """The uri of detailed compliance pdf report."""


class DownloadResponseCompliancePdfReport(_model_base.Model):
    """Compliance pdf report.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar sas_uri: The uri of compliance pdf report.
    :vartype sas_uri: str
    """

    sas_uri: Optional[str] = rest_field(name="sasUri", visibility=["read"])
    """The uri of compliance pdf report."""


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.appcomplianceautomation.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.appcomplianceautomation.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.appcomplianceautomation.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvidenceFileDownloadRequest(_model_base.Model):
    """Evidence file's download request.

    :ivar report_creator_tenant_id: Tenant id.
    :vartype report_creator_tenant_id: str
    :ivar offer_guid: The offerGuid which mapping to the reports.
    :vartype offer_guid: str
    """

    report_creator_tenant_id: Optional[str] = rest_field(
        name="reportCreatorTenantId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tenant id."""
    offer_guid: Optional[str] = rest_field(name="offerGuid", visibility=["read", "create", "update", "delete", "query"])
    """The offerGuid which mapping to the reports."""

    @overload
    def __init__(
        self,
        *,
        report_creator_tenant_id: Optional[str] = None,
        offer_guid: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvidenceFileDownloadResponse(_model_base.Model):
    """Object that includes all the possible response for the evidence file download operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar evidence_file: The uri of evidence file.
    :vartype evidence_file:
     ~azure.mgmt.appcomplianceautomation.models.EvidenceFileDownloadResponseEvidenceFile
    """

    evidence_file: Optional["_models.EvidenceFileDownloadResponseEvidenceFile"] = rest_field(
        name="evidenceFile", visibility=["read"]
    )
    """The uri of evidence file."""


class EvidenceFileDownloadResponseEvidenceFile(_model_base.Model):
    """The uri of evidence file.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar url: The url of evidence file.
    :vartype url: str
    """

    url: Optional[str] = rest_field(visibility=["read"])
    """The url of evidence file."""


class EvidenceProperties(_model_base.Model):
    """Evidence's properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar evidence_type: Evidence type. Known values are: "File", "AutoCollectedEvidence", and
     "Data".
    :vartype evidence_type: str or ~azure.mgmt.appcomplianceautomation.models.EvidenceType
    :ivar file_path: The path of the file in storage. Required.
    :vartype file_path: str
    :ivar extra_data: Extra data considered as evidence.
    :vartype extra_data: str
    :ivar control_id: Control id.
    :vartype control_id: str
    :ivar responsibility_id: Responsibility id.
    :vartype responsibility_id: str
    :ivar provisioning_state: Azure lifecycle management. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    """

    evidence_type: Optional[Union[str, "_models.EvidenceType"]] = rest_field(
        name="evidenceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Evidence type. Known values are: \"File\", \"AutoCollectedEvidence\", and \"Data\"."""
    file_path: str = rest_field(name="filePath", visibility=["read", "create", "update", "delete", "query"])
    """The path of the file in storage. Required."""
    extra_data: Optional[str] = rest_field(name="extraData", visibility=["read", "create", "update", "delete", "query"])
    """Extra data considered as evidence."""
    control_id: Optional[str] = rest_field(name="controlId", visibility=["read", "create", "update", "delete", "query"])
    """Control id."""
    responsibility_id: Optional[str] = rest_field(
        name="responsibilityId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Responsibility id."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure lifecycle management. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        file_path: str,
        evidence_type: Optional[Union[str, "_models.EvidenceType"]] = None,
        extra_data: Optional[str] = None,
        control_id: Optional[str] = None,
        responsibility_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    """


class EvidenceResource(ProxyResource):
    """A class represent an AppComplianceAutomation evidence resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar properties: Evidence property. Required.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.EvidenceProperties
    """

    properties: "_models.EvidenceProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Evidence property. Required."""

    __flattened_items = [
        "evidence_type",
        "file_path",
        "extra_data",
        "control_id",
        "responsibility_id",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.EvidenceProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GetCollectionCountRequest(_model_base.Model):
    """Get collection count's request object.

    :ivar type: The resource type.
    :vartype type: str
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetCollectionCountResponse(_model_base.Model):
    """The get collection count response.

    :ivar count: The count of the specified resource.
    :vartype count: int
    """

    count: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The count of the specified resource."""

    @overload
    def __init__(
        self,
        *,
        count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetOverviewStatusRequest(_model_base.Model):
    """Get overview status request object.

    :ivar type: The resource type.
    :vartype type: str
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GetOverviewStatusResponse(_model_base.Model):
    """The get overview status response.

    :ivar status_list: List of different status items.
    :vartype status_list: list[~azure.mgmt.appcomplianceautomation.models.StatusItem]
    """

    status_list: Optional[List["_models.StatusItem"]] = rest_field(
        name="statusList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of different status items."""

    @overload
    def __init__(
        self,
        *,
        status_list: Optional[List["_models.StatusItem"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListInUseStorageAccountsRequest(_model_base.Model):
    """Parameters for listing in use storage accounts operation. If subscription list is null, it will
    check the user's all subscriptions.

    :ivar subscription_ids: List of subscription ids to be query. If the list is null or empty, the
     API will query all the subscriptions of the user.
    :vartype subscription_ids: list[str]
    """

    subscription_ids: Optional[List[str]] = rest_field(
        name="subscriptionIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of subscription ids to be query. If the list is null or empty, the API will query all the
     subscriptions of the user."""

    @overload
    def __init__(
        self,
        *,
        subscription_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListInUseStorageAccountsResponse(_model_base.Model):
    """Parameters for listing in use storage accounts operation. If subscription list is null, it will
    check the user's all subscriptions.

    :ivar storage_account_list: The storage account list which in use in related reports.
    :vartype storage_account_list: list[~azure.mgmt.appcomplianceautomation.models.StorageInfo]
    """

    storage_account_list: Optional[List["_models.StorageInfo"]] = rest_field(
        name="storageAccountList", visibility=["read", "create", "update", "delete", "query"]
    )
    """The storage account list which in use in related reports."""

    @overload
    def __init__(
        self,
        *,
        storage_account_list: Optional[List["_models.StorageInfo"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OnboardRequest(_model_base.Model):
    """Parameters for onboard operation.

    All required parameters must be populated in order to send to server.

    :ivar subscription_ids: List of subscription ids to be onboarded. Required.
    :vartype subscription_ids: list[str]
    """

    subscription_ids: List[str] = rest_field(
        name="subscriptionIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of subscription ids to be onboarded. Required."""

    @overload
    def __init__(
        self,
        *,
        subscription_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.appcomplianceautomation.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.appcomplianceautomation.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.appcomplianceautomation.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OverviewStatus(_model_base.Model):
    """The overview of the compliance result for one report.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar passed_count: The count of all passed control.
    :vartype passed_count: int
    :ivar failed_count: The count of all failed control.
    :vartype failed_count: int
    :ivar manual_count: The count of all manual control.
    :vartype manual_count: int
    :ivar not_applicable_count: The count of all not applicable control.
    :vartype not_applicable_count: int
    :ivar pending_count: The count of all pending for approval control.
    :vartype pending_count: int
    """

    passed_count: Optional[int] = rest_field(name="passedCount", visibility=["read"])
    """The count of all passed control."""
    failed_count: Optional[int] = rest_field(name="failedCount", visibility=["read"])
    """The count of all failed control."""
    manual_count: Optional[int] = rest_field(name="manualCount", visibility=["read"])
    """The count of all manual control."""
    not_applicable_count: Optional[int] = rest_field(name="notApplicableCount", visibility=["read"])
    """The count of all not applicable control."""
    pending_count: Optional[int] = rest_field(name="pendingCount", visibility=["read"])
    """The count of all pending for approval control."""


class Recommendation(_model_base.Model):
    """A class represent the recommendation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar recommendation_id: The Id of the recommendation.
    :vartype recommendation_id: str
    :ivar recommendation_short_name: The short name of the recommendation. e.g. "Invalid TLS
     config".
    :vartype recommendation_short_name: str
    :ivar recommendation_solutions: List of recommendation solutions.
    :vartype recommendation_solutions:
     list[~azure.mgmt.appcomplianceautomation.models.RecommendationSolution]
    """

    recommendation_id: Optional[str] = rest_field(name="recommendationId", visibility=["read"])
    """The Id of the recommendation."""
    recommendation_short_name: Optional[str] = rest_field(name="recommendationShortName", visibility=["read"])
    """The short name of the recommendation. e.g. \"Invalid TLS config\"."""
    recommendation_solutions: Optional[List["_models.RecommendationSolution"]] = rest_field(
        name="recommendationSolutions", visibility=["read"]
    )
    """List of recommendation solutions."""


class RecommendationSolution(_model_base.Model):
    """A class represent the recommendation solution.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar recommendation_solution_index: The index of the recommendation solution.
    :vartype recommendation_solution_index: str
    :ivar recommendation_solution_content: The detail steps of the recommendation solution.
    :vartype recommendation_solution_content: str
    :ivar is_recommend_solution: Indicates whether this solution is the recommended. Known values
     are: "true" and "false".
    :vartype is_recommend_solution: str or
     ~azure.mgmt.appcomplianceautomation.models.IsRecommendSolution
    """

    recommendation_solution_index: Optional[str] = rest_field(name="recommendationSolutionIndex", visibility=["read"])
    """The index of the recommendation solution."""
    recommendation_solution_content: Optional[str] = rest_field(
        name="recommendationSolutionContent", visibility=["read"]
    )
    """The detail steps of the recommendation solution."""
    is_recommend_solution: Optional[Union[str, "_models.IsRecommendSolution"]] = rest_field(
        name="isRecommendSolution", visibility=["read"]
    )
    """Indicates whether this solution is the recommended. Known values are: \"true\" and \"false\"."""


class ReportComplianceStatus(_model_base.Model):
    """A list which includes all the compliance result for one report.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar m365: The Microsoft 365 certification name.
    :vartype m365: ~azure.mgmt.appcomplianceautomation.models.OverviewStatus
    """

    m365: Optional["_models.OverviewStatus"] = rest_field(visibility=["read"])
    """The Microsoft 365 certification name."""


class ReportFixResult(_model_base.Model):
    """Report fix result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar result: Indicates whether the fix action is Succeeded or Failed. Known values are:
     "Succeeded" and "Failed".
    :vartype result: str or ~azure.mgmt.appcomplianceautomation.models.Result
    :ivar reason: If the report fix action failed, to indicate the detailed failed reason.
    :vartype reason: str
    """

    result: Optional[Union[str, "_models.Result"]] = rest_field(visibility=["read"])
    """Indicates whether the fix action is Succeeded or Failed. Known values are: \"Succeeded\" and
     \"Failed\"."""
    reason: Optional[str] = rest_field(visibility=["read"])
    """If the report fix action failed, to indicate the detailed failed reason."""


class ReportPatchProperties(_model_base.Model):
    """Patch Report's properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar trigger_time: Report collection trigger time.
    :vartype trigger_time: ~datetime.datetime
    :ivar time_zone: Report collection trigger time's time zone, the available list can be obtained
     by executing "Get-TimeZone -ListAvailable" in PowerShell.
     An example of valid timezone id is "Pacific Standard Time".
    :vartype time_zone: str
    :ivar resources: List of resource data.
    :vartype resources: list[~azure.mgmt.appcomplianceautomation.models.ResourceMetadata]
    :ivar status: Report status. Known values are: "Active", "Failed", "Reviewing", and "Disabled".
    :vartype status: str or ~azure.mgmt.appcomplianceautomation.models.ReportStatus
    :ivar errors: List of report error codes.
    :vartype errors: list[str]
    :ivar tenant_id: Report's tenant id.
    :vartype tenant_id: str
    :ivar offer_guid: A list of comma-separated offerGuids indicates a series of offerGuids that
     map to the report. For example,
     "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002" and
     "00000000-0000-0000-0000-000000000003".
    :vartype offer_guid: str
    :ivar next_trigger_time: Report next collection trigger time.
    :vartype next_trigger_time: ~datetime.datetime
    :ivar last_trigger_time: Report last collection trigger time.
    :vartype last_trigger_time: ~datetime.datetime
    :ivar subscriptions: List of subscription Ids.
    :vartype subscriptions: list[str]
    :ivar compliance_status: Report compliance status.
    :vartype compliance_status: ~azure.mgmt.appcomplianceautomation.models.ReportComplianceStatus
    :ivar storage_info: The information of 'bring your own storage' binding to the report.
    :vartype storage_info: ~azure.mgmt.appcomplianceautomation.models.StorageInfo
    :ivar cert_records: List of synchronized certification records.
    :vartype cert_records: list[~azure.mgmt.appcomplianceautomation.models.CertSyncRecord]
    :ivar provisioning_state: Azure lifecycle management. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    """

    trigger_time: Optional[datetime.datetime] = rest_field(
        name="triggerTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Report collection trigger time."""
    time_zone: Optional[str] = rest_field(name="timeZone", visibility=["read", "create", "update", "delete", "query"])
    """Report collection trigger time's time zone, the available list can be obtained by executing
     \"Get-TimeZone -ListAvailable\" in PowerShell.
     An example of valid timezone id is \"Pacific Standard Time\"."""
    resources: Optional[List["_models.ResourceMetadata"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of resource data."""
    status: Optional[Union[str, "_models.ReportStatus"]] = rest_field(visibility=["read"])
    """Report status. Known values are: \"Active\", \"Failed\", \"Reviewing\", and \"Disabled\"."""
    errors: Optional[List[str]] = rest_field(visibility=["read"])
    """List of report error codes."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """Report's tenant id."""
    offer_guid: Optional[str] = rest_field(name="offerGuid", visibility=["read", "create", "update", "delete", "query"])
    """A list of comma-separated offerGuids indicates a series of offerGuids that map to the report.
     For example, \"00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002\" and
     \"00000000-0000-0000-0000-000000000003\"."""
    next_trigger_time: Optional[datetime.datetime] = rest_field(
        name="nextTriggerTime", visibility=["read"], format="rfc3339"
    )
    """Report next collection trigger time."""
    last_trigger_time: Optional[datetime.datetime] = rest_field(
        name="lastTriggerTime", visibility=["read"], format="rfc3339"
    )
    """Report last collection trigger time."""
    subscriptions: Optional[List[str]] = rest_field(visibility=["read"])
    """List of subscription Ids."""
    compliance_status: Optional["_models.ReportComplianceStatus"] = rest_field(
        name="complianceStatus", visibility=["read"]
    )
    """Report compliance status."""
    storage_info: Optional["_models.StorageInfo"] = rest_field(
        name="storageInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """The information of 'bring your own storage' binding to the report."""
    cert_records: Optional[List["_models.CertSyncRecord"]] = rest_field(name="certRecords", visibility=["read"])
    """List of synchronized certification records."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure lifecycle management. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        trigger_time: Optional[datetime.datetime] = None,
        time_zone: Optional[str] = None,
        resources: Optional[List["_models.ResourceMetadata"]] = None,
        offer_guid: Optional[str] = None,
        storage_info: Optional["_models.StorageInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReportProperties(_model_base.Model):
    """Create Report's properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar trigger_time: Report collection trigger time. Required.
    :vartype trigger_time: ~datetime.datetime
    :ivar time_zone: Report collection trigger time's time zone, the available list can be obtained
     by executing "Get-TimeZone -ListAvailable" in PowerShell.
     An example of valid timezone id is "Pacific Standard Time". Required.
    :vartype time_zone: str
    :ivar resources: List of resource data. Required.
    :vartype resources: list[~azure.mgmt.appcomplianceautomation.models.ResourceMetadata]
    :ivar status: Report status. Known values are: "Active", "Failed", "Reviewing", and "Disabled".
    :vartype status: str or ~azure.mgmt.appcomplianceautomation.models.ReportStatus
    :ivar errors: List of report error codes.
    :vartype errors: list[str]
    :ivar tenant_id: Report's tenant id.
    :vartype tenant_id: str
    :ivar offer_guid: A list of comma-separated offerGuids indicates a series of offerGuids that
     map to the report. For example,
     "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002" and
     "00000000-0000-0000-0000-000000000003".
    :vartype offer_guid: str
    :ivar next_trigger_time: Report next collection trigger time.
    :vartype next_trigger_time: ~datetime.datetime
    :ivar last_trigger_time: Report last collection trigger time.
    :vartype last_trigger_time: ~datetime.datetime
    :ivar subscriptions: List of subscription Ids.
    :vartype subscriptions: list[str]
    :ivar compliance_status: Report compliance status.
    :vartype compliance_status: ~azure.mgmt.appcomplianceautomation.models.ReportComplianceStatus
    :ivar storage_info: The information of 'bring your own storage' binding to the report.
    :vartype storage_info: ~azure.mgmt.appcomplianceautomation.models.StorageInfo
    :ivar cert_records: List of synchronized certification records.
    :vartype cert_records: list[~azure.mgmt.appcomplianceautomation.models.CertSyncRecord]
    :ivar provisioning_state: Azure lifecycle management. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    """

    trigger_time: datetime.datetime = rest_field(
        name="triggerTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Report collection trigger time. Required."""
    time_zone: str = rest_field(name="timeZone", visibility=["read", "create", "update", "delete", "query"])
    """Report collection trigger time's time zone, the available list can be obtained by executing
     \"Get-TimeZone -ListAvailable\" in PowerShell.
     An example of valid timezone id is \"Pacific Standard Time\". Required."""
    resources: List["_models.ResourceMetadata"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of resource data. Required."""
    status: Optional[Union[str, "_models.ReportStatus"]] = rest_field(visibility=["read"])
    """Report status. Known values are: \"Active\", \"Failed\", \"Reviewing\", and \"Disabled\"."""
    errors: Optional[List[str]] = rest_field(visibility=["read"])
    """List of report error codes."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """Report's tenant id."""
    offer_guid: Optional[str] = rest_field(name="offerGuid", visibility=["read", "create", "update", "delete", "query"])
    """A list of comma-separated offerGuids indicates a series of offerGuids that map to the report.
     For example, \"00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002\" and
     \"00000000-0000-0000-0000-000000000003\"."""
    next_trigger_time: Optional[datetime.datetime] = rest_field(
        name="nextTriggerTime", visibility=["read"], format="rfc3339"
    )
    """Report next collection trigger time."""
    last_trigger_time: Optional[datetime.datetime] = rest_field(
        name="lastTriggerTime", visibility=["read"], format="rfc3339"
    )
    """Report last collection trigger time."""
    subscriptions: Optional[List[str]] = rest_field(visibility=["read"])
    """List of subscription Ids."""
    compliance_status: Optional["_models.ReportComplianceStatus"] = rest_field(
        name="complianceStatus", visibility=["read"]
    )
    """Report compliance status."""
    storage_info: Optional["_models.StorageInfo"] = rest_field(
        name="storageInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """The information of 'bring your own storage' binding to the report."""
    cert_records: Optional[List["_models.CertSyncRecord"]] = rest_field(name="certRecords", visibility=["read"])
    """List of synchronized certification records."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure lifecycle management. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        trigger_time: datetime.datetime,
        time_zone: str,
        resources: List["_models.ResourceMetadata"],
        offer_guid: Optional[str] = None,
        storage_info: Optional["_models.StorageInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReportResource(ProxyResource):
    """A class represent an AppComplianceAutomation report resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar properties: Report property. Required.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.ReportProperties
    """

    properties: "_models.ReportProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Report property. Required."""

    __flattened_items = [
        "trigger_time",
        "time_zone",
        "resources",
        "status",
        "errors",
        "tenant_id",
        "offer_guid",
        "next_trigger_time",
        "last_trigger_time",
        "subscriptions",
        "compliance_status",
        "storage_info",
        "cert_records",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ReportProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ReportResourcePatch(_model_base.Model):
    """A class represent a AppComplianceAutomation report resource update properties.

    :ivar properties: Report property.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.ReportPatchProperties
    """

    properties: Optional["_models.ReportPatchProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Report property."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ReportPatchProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReportVerificationResult(_model_base.Model):
    """Report health status verification result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar result: Indicates whether the report verification action is Succeeded or Failed. Known
     values are: "Succeeded" and "Failed".
    :vartype result: str or ~azure.mgmt.appcomplianceautomation.models.Result
    :ivar reason: If the report verification action failed, to indicate the detailed failed reason.
    :vartype reason: str
    """

    result: Optional[Union[str, "_models.Result"]] = rest_field(visibility=["read"])
    """Indicates whether the report verification action is Succeeded or Failed. Known values are:
     \"Succeeded\" and \"Failed\"."""
    reason: Optional[str] = rest_field(visibility=["read"])
    """If the report verification action failed, to indicate the detailed failed reason."""


class ResourceItem(_model_base.Model):
    """Resource Id.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar subscription_id: The subscription Id of this resource.
    :vartype subscription_id: str
    :ivar resource_group: The resource group name of this resource.
    :vartype resource_group: str
    :ivar resource_type: The resource type of this resource. e.g.
     "Microsoft.SignalRService/SignalR".
    :vartype resource_type: str
    :ivar resource_id: The resource Id - e.g.
     "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
    :vartype resource_id: str
    """

    subscription_id: Optional[str] = rest_field(name="subscriptionId", visibility=["read"])
    """The subscription Id of this resource."""
    resource_group: Optional[str] = rest_field(name="resourceGroup", visibility=["read"])
    """The resource group name of this resource."""
    resource_type: Optional[str] = rest_field(name="resourceType", visibility=["read"])
    """The resource type of this resource. e.g. \"Microsoft.SignalRService/SignalR\"."""
    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """The resource Id - e.g.
     \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1\"."""


class ResourceMetadata(_model_base.Model):
    """Single resource Id's metadata.


    :ivar resource_id: Resource Id - e.g.
     "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1".
     Required.
    :vartype resource_id: str
    :ivar resource_type: Resource type. e.g. "Microsoft.Compute/virtualMachines".
    :vartype resource_type: str
    :ivar resource_kind: Resource kind.
    :vartype resource_kind: str
    :ivar resource_origin: Resource Origin. Known values are: "Azure", "AWS", and "GCP".
    :vartype resource_origin: str or ~azure.mgmt.appcomplianceautomation.models.ResourceOrigin
    :ivar account_id: Account Id. For example - the AWS account id.
    :vartype account_id: str
    """

    resource_id: str = rest_field(name="resourceId", visibility=["read", "create", "update", "delete", "query"])
    """Resource Id - e.g.
     \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1\".
     Required."""
    resource_type: Optional[str] = rest_field(
        name="resourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource type. e.g. \"Microsoft.Compute/virtualMachines\"."""
    resource_kind: Optional[str] = rest_field(
        name="resourceKind", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource kind."""
    resource_origin: Optional[Union[str, "_models.ResourceOrigin"]] = rest_field(
        name="resourceOrigin", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource Origin. Known values are: \"Azure\", \"AWS\", and \"GCP\"."""
    account_id: Optional[str] = rest_field(name="accountId", visibility=["read", "create", "update", "delete", "query"])
    """Account Id. For example - the AWS account id."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        resource_type: Optional[str] = None,
        resource_kind: Optional[str] = None,
        resource_origin: Optional[Union[str, "_models.ResourceOrigin"]] = None,
        account_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Responsibility(_model_base.Model):
    """A class represent the customer responsibility.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar responsibility_id: The id of the customer responsibility.
    :vartype responsibility_id: str
    :ivar responsibility_title: The title of the customer responsibility.
    :vartype responsibility_title: str
    :ivar responsibility_description: The description of the customer responsibility.
    :vartype responsibility_description: str
    :ivar responsibility_type: The type of customer responsibility. Known values are: "Automated",
     "ScopedManual", and "Manual".
    :vartype responsibility_type: str or
     ~azure.mgmt.appcomplianceautomation.models.ResponsibilityType
    :ivar responsibility_severity: The severity level of this customer responsibility. Known values
     are: "High", "Medium", and "Low".
    :vartype responsibility_severity: str or
     ~azure.mgmt.appcomplianceautomation.models.ResponsibilitySeverity
    :ivar responsibility_status: The status of this customer responsibility. Known values are:
     "Passed", "Failed", "NotApplicable", and "PendingApproval".
    :vartype responsibility_status: str or
     ~azure.mgmt.appcomplianceautomation.models.ResponsibilityStatus
    :ivar responsibility_environment: The supported cloud environment of this customer
     responsibility. Known values are: "Azure", "AWS", "GCP", and "General".
    :vartype responsibility_environment: str or
     ~azure.mgmt.appcomplianceautomation.models.ResponsibilityEnvironment
    :ivar failed_resource_count: The count of all failed resources.
    :vartype failed_resource_count: int
    :ivar total_resource_count: The count of all resources.
    :vartype total_resource_count: int
    :ivar resource_list: List of resource.
    :vartype resource_list: list[~azure.mgmt.appcomplianceautomation.models.ResponsibilityResource]
    :ivar recommendation_list: List of recommendation.
    :vartype recommendation_list: list[~azure.mgmt.appcomplianceautomation.models.Recommendation]
    :ivar guidance: The evidence upload guidance description.
    :vartype guidance: str
    :ivar justification: The justification given by the user to clarify the reason.
    :vartype justification: str
    :ivar evidence_files: List of evidence file url.
    :vartype evidence_files: list[str]
    """

    responsibility_id: Optional[str] = rest_field(name="responsibilityId", visibility=["read"])
    """The id of the customer responsibility."""
    responsibility_title: Optional[str] = rest_field(name="responsibilityTitle", visibility=["read"])
    """The title of the customer responsibility."""
    responsibility_description: Optional[str] = rest_field(name="responsibilityDescription", visibility=["read"])
    """The description of the customer responsibility."""
    responsibility_type: Optional[Union[str, "_models.ResponsibilityType"]] = rest_field(
        name="responsibilityType", visibility=["read"]
    )
    """The type of customer responsibility. Known values are: \"Automated\", \"ScopedManual\", and
     \"Manual\"."""
    responsibility_severity: Optional[Union[str, "_models.ResponsibilitySeverity"]] = rest_field(
        name="responsibilitySeverity", visibility=["read"]
    )
    """The severity level of this customer responsibility. Known values are: \"High\", \"Medium\", and
     \"Low\"."""
    responsibility_status: Optional[Union[str, "_models.ResponsibilityStatus"]] = rest_field(
        name="responsibilityStatus", visibility=["read"]
    )
    """The status of this customer responsibility. Known values are: \"Passed\", \"Failed\",
     \"NotApplicable\", and \"PendingApproval\"."""
    responsibility_environment: Optional[Union[str, "_models.ResponsibilityEnvironment"]] = rest_field(
        name="responsibilityEnvironment", visibility=["read"]
    )
    """The supported cloud environment of this customer responsibility. Known values are: \"Azure\",
     \"AWS\", \"GCP\", and \"General\"."""
    failed_resource_count: Optional[int] = rest_field(
        name="failedResourceCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The count of all failed resources."""
    total_resource_count: Optional[int] = rest_field(
        name="totalResourceCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The count of all resources."""
    resource_list: Optional[List["_models.ResponsibilityResource"]] = rest_field(
        name="resourceList", visibility=["read"]
    )
    """List of resource."""
    recommendation_list: Optional[List["_models.Recommendation"]] = rest_field(
        name="recommendationList", visibility=["read"]
    )
    """List of recommendation."""
    guidance: Optional[str] = rest_field(visibility=["read"])
    """The evidence upload guidance description."""
    justification: Optional[str] = rest_field(visibility=["read"])
    """The justification given by the user to clarify the reason."""
    evidence_files: Optional[List[str]] = rest_field(
        name="evidenceFiles", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of evidence file url."""

    @overload
    def __init__(
        self,
        *,
        failed_resource_count: Optional[int] = None,
        total_resource_count: Optional[int] = None,
        evidence_files: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResponsibilityResource(_model_base.Model):
    """A class represent the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_id: The Id of the resource.
    :vartype resource_id: str
    :ivar account_id: Account Id. For example - AWS account Id.
    :vartype account_id: str
    :ivar resource_type: The type of the resource. e.g. "Microsoft.SignalRService/SignalR".
    :vartype resource_type: str
    :ivar resource_origin: Resource origin. Known values are: "Azure", "AWS", and "GCP".
    :vartype resource_origin: str or ~azure.mgmt.appcomplianceautomation.models.ResourceOrigin
    :ivar resource_status: Resource status. Known values are: "Healthy" and "Unhealthy".
    :vartype resource_status: str or ~azure.mgmt.appcomplianceautomation.models.ResourceStatus
    :ivar resource_status_change_date: The status change date for the resource.
    :vartype resource_status_change_date: ~datetime.datetime
    :ivar recommendation_ids: List of recommendation id.
    :vartype recommendation_ids: list[str]
    """

    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """The Id of the resource."""
    account_id: Optional[str] = rest_field(name="accountId", visibility=["read"])
    """Account Id. For example - AWS account Id."""
    resource_type: Optional[str] = rest_field(name="resourceType", visibility=["read"])
    """The type of the resource. e.g. \"Microsoft.SignalRService/SignalR\"."""
    resource_origin: Optional[Union[str, "_models.ResourceOrigin"]] = rest_field(
        name="resourceOrigin", visibility=["read"]
    )
    """Resource origin. Known values are: \"Azure\", \"AWS\", and \"GCP\"."""
    resource_status: Optional[Union[str, "_models.ResourceStatus"]] = rest_field(
        name="resourceStatus", visibility=["read"]
    )
    """Resource status. Known values are: \"Healthy\" and \"Unhealthy\"."""
    resource_status_change_date: Optional[datetime.datetime] = rest_field(
        name="resourceStatusChangeDate", visibility=["read"], format="rfc3339"
    )
    """The status change date for the resource."""
    recommendation_ids: Optional[List[str]] = rest_field(
        name="recommendationIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of recommendation id."""

    @overload
    def __init__(
        self,
        *,
        recommendation_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScopingAnswer(_model_base.Model):
    """Scoping answer.


    :ivar question_id: Question id. Required.
    :vartype question_id: str
    :ivar answers: Question answer value list. Required.
    :vartype answers: list[str]
    """

    question_id: str = rest_field(name="questionId", visibility=["read", "create", "update", "delete", "query"])
    """Question id. Required."""
    answers: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Question answer value list. Required."""

    @overload
    def __init__(
        self,
        *,
        question_id: str,
        answers: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScopingConfigurationProperties(_model_base.Model):
    """ScopingConfiguration's properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar answers: List of scoping question answers.
    :vartype answers: list[~azure.mgmt.appcomplianceautomation.models.ScopingAnswer]
    :ivar provisioning_state: Azure lifecycle management. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    """

    answers: Optional[List["_models.ScopingAnswer"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of scoping question answers."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure lifecycle management. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        answers: Optional[List["_models.ScopingAnswer"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScopingConfigurationResource(ProxyResource):
    """A class represent an AppComplianceAutomation scoping configuration resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar properties: ScopingConfiguration property. Required.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.ScopingConfigurationProperties
    """

    properties: "_models.ScopingConfigurationProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """ScopingConfiguration property. Required."""

    __flattened_items = ["answers", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ScopingConfigurationProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ScopingQuestion(_model_base.Model):
    """The definition of a scoping question.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar question_id: Question id. Required.
    :vartype question_id: str
    :ivar superior_question_id: Superior question id.
    :vartype superior_question_id: str
    :ivar input_type: Input type of the question answer. Required. Known values are: "None",
     "Text", "Email", "MultilineText", "Url", "Number", "Boolean", "Telephone", "YesNoNa", "Date",
     "YearPicker", "SingleSelection", "SingleSelectDropdown", "MultiSelectCheckbox",
     "MultiSelectDropdown", "MultiSelectDropdownCustom", "Group", and "Upload".
    :vartype input_type: str or ~azure.mgmt.appcomplianceautomation.models.InputType
    :ivar option_ids: Option id list. Required.
    :vartype option_ids: list[str]
    :ivar rules: The rule of the question. Required.
    :vartype rules: list[str or ~azure.mgmt.appcomplianceautomation.models.Rule]
    :ivar show_sub_questions_value: The answer value to show the sub questions.
    :vartype show_sub_questions_value: str
    """

    question_id: str = rest_field(name="questionId", visibility=["read"])
    """Question id. Required."""
    superior_question_id: Optional[str] = rest_field(name="superiorQuestionId", visibility=["read"])
    """Superior question id."""
    input_type: Union[str, "_models.InputType"] = rest_field(name="inputType", visibility=["read"])
    """Input type of the question answer. Required. Known values are: \"None\", \"Text\", \"Email\",
     \"MultilineText\", \"Url\", \"Number\", \"Boolean\", \"Telephone\", \"YesNoNa\", \"Date\",
     \"YearPicker\", \"SingleSelection\", \"SingleSelectDropdown\", \"MultiSelectCheckbox\",
     \"MultiSelectDropdown\", \"MultiSelectDropdownCustom\", \"Group\", and \"Upload\"."""
    option_ids: List[str] = rest_field(name="optionIds", visibility=["read"])
    """Option id list. Required."""
    rules: List[Union[str, "_models.Rule"]] = rest_field(visibility=["read"])
    """The rule of the question. Required."""
    show_sub_questions_value: Optional[str] = rest_field(name="showSubQuestionsValue", visibility=["read"])
    """The answer value to show the sub questions."""


class ScopingQuestions(_model_base.Model):
    """Scoping question list.

    :ivar questions: List of scoping questions.
    :vartype questions: list[~azure.mgmt.appcomplianceautomation.models.ScopingQuestion]
    """

    questions: Optional[List["_models.ScopingQuestion"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of scoping questions."""

    @overload
    def __init__(
        self,
        *,
        questions: Optional[List["_models.ScopingQuestion"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SnapshotDownloadRequest(_model_base.Model):
    """Snapshot's download request.

    All required parameters must be populated in order to send to server.

    :ivar report_creator_tenant_id: Tenant id.
    :vartype report_creator_tenant_id: str
    :ivar download_type: Indicates the download type. Required. Known values are:
     "ComplianceReport", "CompliancePdfReport", "ComplianceDetailedPdfReport", and "ResourceList".
    :vartype download_type: str or ~azure.mgmt.appcomplianceautomation.models.DownloadType
    :ivar offer_guid: The offerGuid which mapping to the reports.
    :vartype offer_guid: str
    """

    report_creator_tenant_id: Optional[str] = rest_field(
        name="reportCreatorTenantId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tenant id."""
    download_type: Union[str, "_models.DownloadType"] = rest_field(
        name="downloadType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates the download type. Required. Known values are: \"ComplianceReport\",
     \"CompliancePdfReport\", \"ComplianceDetailedPdfReport\", and \"ResourceList\"."""
    offer_guid: Optional[str] = rest_field(name="offerGuid", visibility=["read", "create", "update", "delete", "query"])
    """The offerGuid which mapping to the reports."""

    @overload
    def __init__(
        self,
        *,
        download_type: Union[str, "_models.DownloadType"],
        report_creator_tenant_id: Optional[str] = None,
        offer_guid: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SnapshotProperties(_model_base.Model):
    """Snapshot's properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar snapshot_name: Snapshot name.
    :vartype snapshot_name: str
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar provisioning_state: Azure lifecycle management. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    :ivar report_properties: The report essential info.
    :vartype report_properties: ~azure.mgmt.appcomplianceautomation.models.ReportProperties
    :ivar report_system_data: Metadata pertaining to creation and last modification of the
     resource.
    :vartype report_system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar compliance_results: List of compliance results.
    :vartype compliance_results: list[~azure.mgmt.appcomplianceautomation.models.ComplianceResult]
    """

    snapshot_name: Optional[str] = rest_field(name="snapshotName", visibility=["read"])
    """Snapshot name."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure lifecycle management. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""
    report_properties: Optional["_models.ReportProperties"] = rest_field(name="reportProperties", visibility=["read"])
    """The report essential info."""
    report_system_data: Optional["_models.SystemData"] = rest_field(name="reportSystemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""
    compliance_results: Optional[List["_models.ComplianceResult"]] = rest_field(
        name="complianceResults", visibility=["read"]
    )
    """List of compliance results."""


class SnapshotResource(ProxyResource):
    """A class represent a AppComplianceAutomation snapshot resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar properties: Snapshot's property.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.SnapshotProperties
    """

    properties: Optional["_models.SnapshotProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Snapshot's property."""

    __flattened_items = [
        "snapshot_name",
        "created_at",
        "provisioning_state",
        "report_properties",
        "report_system_data",
        "compliance_results",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SnapshotProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class StatusItem(_model_base.Model):
    """Single status.

    :ivar status_name: Status name - e.g. "Active", "Failed".
    :vartype status_name: str
    :ivar status_value: Status value. e.g. "100", or "100%".
    :vartype status_value: str
    """

    status_name: Optional[str] = rest_field(
        name="statusName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Status name - e.g. \"Active\", \"Failed\"."""
    status_value: Optional[str] = rest_field(
        name="statusValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """Status value. e.g. \"100\", or \"100%\"."""

    @overload
    def __init__(
        self,
        *,
        status_name: Optional[str] = None,
        status_value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageInfo(_model_base.Model):
    """The information of 'bring your own storage' account binding to the report.

    :ivar subscription_id: The subscription id which 'bring your own storage' account belongs to.
    :vartype subscription_id: str
    :ivar resource_group: The resourceGroup which 'bring your own storage' account belongs to.
    :vartype resource_group: str
    :ivar account_name: 'bring your own storage' account name.
    :vartype account_name: str
    :ivar location: The region of 'bring your own storage' account.
    :vartype location: str
    """

    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The subscription id which 'bring your own storage' account belongs to."""
    resource_group: Optional[str] = rest_field(
        name="resourceGroup", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resourceGroup which 'bring your own storage' account belongs to."""
    account_name: Optional[str] = rest_field(
        name="accountName", visibility=["read", "create", "update", "delete", "query"]
    )
    """'bring your own storage' account name."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The region of 'bring your own storage' account."""

    @overload
    def __init__(
        self,
        *,
        subscription_id: Optional[str] = None,
        resource_group: Optional[str] = None,
        account_name: Optional[str] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SyncCertRecordRequest(_model_base.Model):
    """Synchronize certification record request.

    All required parameters must be populated in order to send to server.

    :ivar cert_record: certification record to be synchronized. Required.
    :vartype cert_record: ~azure.mgmt.appcomplianceautomation.models.CertSyncRecord
    """

    cert_record: "_models.CertSyncRecord" = rest_field(
        name="certRecord", visibility=["read", "create", "update", "delete", "query"]
    )
    """certification record to be synchronized. Required."""

    @overload
    def __init__(
        self,
        *,
        cert_record: "_models.CertSyncRecord",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SyncCertRecordResponse(_model_base.Model):
    """Synchronize certification record response.

    :ivar cert_record: certification record synchronized.
    :vartype cert_record: ~azure.mgmt.appcomplianceautomation.models.CertSyncRecord
    """

    cert_record: Optional["_models.CertSyncRecord"] = rest_field(
        name="certRecord", visibility=["read", "create", "update", "delete", "query"]
    )
    """certification record synchronized."""

    @overload
    def __init__(
        self,
        *,
        cert_record: Optional["_models.CertSyncRecord"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.appcomplianceautomation.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.appcomplianceautomation.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TriggerEvaluationRequest(_model_base.Model):
    """Trigger evaluation request.

    All required parameters must be populated in order to send to server.

    :ivar resource_ids: List of resource ids to be evaluated. Required.
    :vartype resource_ids: list[str]
    """

    resource_ids: List[str] = rest_field(name="resourceIds", visibility=["read", "create", "update", "delete", "query"])
    """List of resource ids to be evaluated. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebhookProperties(_model_base.Model):
    """Webhook properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar webhook_id: Webhook id in database.
    :vartype webhook_id: str
    :ivar status: Webhook status. Known values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.appcomplianceautomation.models.WebhookStatus
    :ivar tenant_id: Tenant id.
    :vartype tenant_id: str
    :ivar send_all_events: whether to send notification under any event. Known values are: "true"
     and "false".
    :vartype send_all_events: str or ~azure.mgmt.appcomplianceautomation.models.SendAllEvents
    :ivar events: under which event notification should be sent.
    :vartype events: list[str or ~azure.mgmt.appcomplianceautomation.models.NotificationEvent]
    :ivar payload_url: webhook payload url.
    :vartype payload_url: str
    :ivar content_type: content type. "application/json"
    :vartype content_type: str or ~azure.mgmt.appcomplianceautomation.models.ContentType
    :ivar webhook_key: webhook secret token. If not set, this field value is null; otherwise,
     please set a string value.
    :vartype webhook_key: str
    :ivar update_webhook_key: whether to update webhookKey. Known values are: "true" and "false".
    :vartype update_webhook_key: str or ~azure.mgmt.appcomplianceautomation.models.UpdateWebhookKey
    :ivar webhook_key_enabled: whether webhookKey is enabled. Known values are: "true" and "false".
    :vartype webhook_key_enabled: str or
     ~azure.mgmt.appcomplianceautomation.models.WebhookKeyEnabled
    :ivar enable_ssl_verification: whether to enable ssl verification. Known values are: "true" and
     "false".
    :vartype enable_ssl_verification: str or
     ~azure.mgmt.appcomplianceautomation.models.EnableSslVerification
    :ivar delivery_status: webhook deliveryStatus. Known values are: "Succeeded", "Failed", and
     "NotStarted".
    :vartype delivery_status: str or ~azure.mgmt.appcomplianceautomation.models.DeliveryStatus
    :ivar provisioning_state: Azure Resource Provisioning State. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Fixing", "Verifying", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.appcomplianceautomation.models.ProvisioningState
    """

    webhook_id: Optional[str] = rest_field(name="webhookId", visibility=["read"])
    """Webhook id in database."""
    status: Optional[Union[str, "_models.WebhookStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Webhook status. Known values are: \"Enabled\" and \"Disabled\"."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """Tenant id."""
    send_all_events: Optional[Union[str, "_models.SendAllEvents"]] = rest_field(
        name="sendAllEvents", visibility=["read", "create", "update", "delete", "query"]
    )
    """whether to send notification under any event. Known values are: \"true\" and \"false\"."""
    events: Optional[List[Union[str, "_models.NotificationEvent"]]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """under which event notification should be sent."""
    payload_url: Optional[str] = rest_field(
        name="payloadUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """webhook payload url."""
    content_type: Optional[Union[str, "_models.ContentType"]] = rest_field(
        name="contentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """content type. \"application/json\""""
    webhook_key: Optional[str] = rest_field(
        name="webhookKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """webhook secret token. If not set, this field value is null; otherwise, please set a string
     value."""
    update_webhook_key: Optional[Union[str, "_models.UpdateWebhookKey"]] = rest_field(
        name="updateWebhookKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """whether to update webhookKey. Known values are: \"true\" and \"false\"."""
    webhook_key_enabled: Optional[Union[str, "_models.WebhookKeyEnabled"]] = rest_field(
        name="webhookKeyEnabled", visibility=["read"]
    )
    """whether webhookKey is enabled. Known values are: \"true\" and \"false\"."""
    enable_ssl_verification: Optional[Union[str, "_models.EnableSslVerification"]] = rest_field(
        name="enableSslVerification", visibility=["read", "create", "update", "delete", "query"]
    )
    """whether to enable ssl verification. Known values are: \"true\" and \"false\"."""
    delivery_status: Optional[Union[str, "_models.DeliveryStatus"]] = rest_field(
        name="deliveryStatus", visibility=["read"]
    )
    """webhook deliveryStatus. Known values are: \"Succeeded\", \"Failed\", and \"NotStarted\"."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Azure Resource Provisioning State. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Deleting\", \"Fixing\", \"Verifying\", and \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.WebhookStatus"]] = None,
        send_all_events: Optional[Union[str, "_models.SendAllEvents"]] = None,
        events: Optional[List[Union[str, "_models.NotificationEvent"]]] = None,
        payload_url: Optional[str] = None,
        content_type: Optional[Union[str, "_models.ContentType"]] = None,
        webhook_key: Optional[str] = None,
        update_webhook_key: Optional[Union[str, "_models.UpdateWebhookKey"]] = None,
        enable_ssl_verification: Optional[Union[str, "_models.EnableSslVerification"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebhookResource(ProxyResource):
    """A class represent an AppComplianceAutomation webhook resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.appcomplianceautomation.models.SystemData
    :ivar properties: Webhook property. Required.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.WebhookProperties
    """

    properties: "_models.WebhookProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Webhook property. Required."""

    __flattened_items = [
        "webhook_id",
        "status",
        "tenant_id",
        "send_all_events",
        "events",
        "payload_url",
        "content_type",
        "webhook_key",
        "update_webhook_key",
        "webhook_key_enabled",
        "enable_ssl_verification",
        "delivery_status",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.WebhookProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class WebhookResourcePatch(_model_base.Model):
    """A class represent a AppComplianceAutomation webhook resource update properties.

    :ivar properties: Webhook property.
    :vartype properties: ~azure.mgmt.appcomplianceautomation.models.WebhookProperties
    """

    properties: Optional["_models.WebhookProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Webhook property."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.WebhookProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
