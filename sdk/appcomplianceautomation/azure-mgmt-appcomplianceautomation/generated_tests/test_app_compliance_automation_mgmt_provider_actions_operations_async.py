# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from microsoft.appcomplianceautomation.aio import AppComplianceAutomationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAppComplianceAutomationMgmtProviderActionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AppComplianceAutomationMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_check_name_availability(self, resource_group):
        response = await self.client.provider_actions.check_name_availability(
            body={"name": "str", "type": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_get_collection_count(self, resource_group):
        response = await self.client.provider_actions.get_collection_count(
            body={"type": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_get_overview_status(self, resource_group):
        response = await self.client.provider_actions.get_overview_status(
            body={"type": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_begin_onboard(self, resource_group):
        response = await (
            await self.client.provider_actions.begin_onboard(
                body={"subscriptionIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_begin_trigger_evaluation(self, resource_group):
        response = await (
            await self.client.provider_actions.begin_trigger_evaluation(
                body={"resourceIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_provider_actions_list_in_use_storage_accounts(self, resource_group):
        response = await self.client.provider_actions.list_in_use_storage_accounts(
            body={"subscriptionIds": ["str"]},
        )

        # please add some check logic here by yourself
        # ...
