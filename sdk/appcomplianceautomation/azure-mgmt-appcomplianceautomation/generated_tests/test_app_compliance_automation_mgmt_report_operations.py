# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.appcomplianceautomation import AppComplianceAutomationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAppComplianceAutomationMgmtReportOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AppComplianceAutomationMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_list(self, resource_group):
        response = self.client.report.list(
            api_version="2024-06-27",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_get(self, resource_group):
        response = self.client.report.get(
            report_name="str",
            api_version="2024-06-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_create_or_update(self, resource_group):
        response = self.client.report.begin_create_or_update(
            report_name="str",
            properties={
                "properties": {
                    "resources": [
                        {
                            "resourceId": "str",
                            "accountId": "str",
                            "resourceKind": "str",
                            "resourceOrigin": "str",
                            "resourceType": "str",
                        }
                    ],
                    "timeZone": "str",
                    "triggerTime": "2020-02-20 00:00:00",
                    "certRecords": [
                        {
                            "certificationStatus": "str",
                            "controls": [{"controlId": "str", "controlStatus": "str"}],
                            "ingestionStatus": "str",
                            "offerGuid": "str",
                        }
                    ],
                    "complianceStatus": {
                        "m365": {
                            "failedCount": 0,
                            "manualCount": 0,
                            "notApplicableCount": 0,
                            "passedCount": 0,
                            "pendingCount": 0,
                        }
                    },
                    "errors": ["str"],
                    "lastTriggerTime": "2020-02-20 00:00:00",
                    "nextTriggerTime": "2020-02-20 00:00:00",
                    "offerGuid": "str",
                    "provisioningState": "str",
                    "status": "str",
                    "storageInfo": {
                        "accountName": "str",
                        "location": "str",
                        "resourceGroup": "str",
                        "subscriptionId": "str",
                    },
                    "subscriptions": ["str"],
                    "tenantId": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_update(self, resource_group):
        response = self.client.report.begin_update(
            report_name="str",
            properties={
                "properties": {
                    "certRecords": [
                        {
                            "certificationStatus": "str",
                            "controls": [{"controlId": "str", "controlStatus": "str"}],
                            "ingestionStatus": "str",
                            "offerGuid": "str",
                        }
                    ],
                    "complianceStatus": {
                        "m365": {
                            "failedCount": 0,
                            "manualCount": 0,
                            "notApplicableCount": 0,
                            "passedCount": 0,
                            "pendingCount": 0,
                        }
                    },
                    "errors": ["str"],
                    "lastTriggerTime": "2020-02-20 00:00:00",
                    "nextTriggerTime": "2020-02-20 00:00:00",
                    "offerGuid": "str",
                    "provisioningState": "str",
                    "resources": [
                        {
                            "resourceId": "str",
                            "accountId": "str",
                            "resourceKind": "str",
                            "resourceOrigin": "str",
                            "resourceType": "str",
                        }
                    ],
                    "status": "str",
                    "storageInfo": {
                        "accountName": "str",
                        "location": "str",
                        "resourceGroup": "str",
                        "subscriptionId": "str",
                    },
                    "subscriptions": ["str"],
                    "tenantId": "str",
                    "timeZone": "str",
                    "triggerTime": "2020-02-20 00:00:00",
                }
            },
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_delete(self, resource_group):
        response = self.client.report.begin_delete(
            report_name="str",
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_nested_resource_check_name_availability(self, resource_group):
        response = self.client.report.nested_resource_check_name_availability(
            report_name="str",
            body={"name": "str", "type": "str"},
            api_version="2024-06-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_fix(self, resource_group):
        response = self.client.report.begin_fix(
            report_name="str",
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_get_scoping_questions(self, resource_group):
        response = self.client.report.get_scoping_questions(
            report_name="str",
            api_version="2024-06-27",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_sync_cert_record(self, resource_group):
        response = self.client.report.begin_sync_cert_record(
            report_name="str",
            body={
                "certRecord": {
                    "certificationStatus": "str",
                    "controls": [{"controlId": "str", "controlStatus": "str"}],
                    "ingestionStatus": "str",
                    "offerGuid": "str",
                }
            },
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_report_begin_verify(self, resource_group):
        response = self.client.report.begin_verify(
            report_name="str",
            api_version="2024-06-27",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
