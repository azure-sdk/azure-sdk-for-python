# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementProfilesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.profiles.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-02-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.profiles.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.profiles.begin_create(
            resource_group_name=resource_group.name,
            profile_name="str",
            profile={
                "location": "str",
                "sku": {"name": "str"},
                "extendedProperties": {"str": "str"},
                "frontDoorId": "str",
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "kind": "str",
                "logScrubbing": {
                    "scrubbingRules": [
                        {"matchVariable": "str", "selectorMatchOperator": "str", "selector": "str", "state": "str"}
                    ],
                    "state": "str",
                },
                "name": "str",
                "originResponseTimeoutSeconds": 0,
                "provisioningState": "str",
                "resourceState": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.profiles.begin_update(
            resource_group_name=resource_group.name,
            profile_name="str",
            profile_update_parameters={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "logScrubbing": {
                    "scrubbingRules": [
                        {"matchVariable": "str", "selectorMatchOperator": "str", "selector": "str", "state": "str"}
                    ],
                    "state": "str",
                },
                "originResponseTimeoutSeconds": 0,
                "tags": {"str": "str"},
            },
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.profiles.begin_delete(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_can_migrate(self, resource_group):
        response = self.client.profiles.begin_can_migrate(
            resource_group_name=resource_group.name,
            can_migrate_parameters={"classicResourceReference": {"id": "str"}},
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_migrate(self, resource_group):
        response = self.client.profiles.begin_migrate(
            resource_group_name=resource_group.name,
            migration_parameters={
                "classicResourceReference": {"id": "str"},
                "profileName": "str",
                "sku": {"name": "str"},
                "migrationWebApplicationFirewallMappings": [
                    {"migratedFrom": {"id": "str"}, "migratedTo": {"id": "str"}}
                ],
            },
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_migration_commit(self, resource_group):
        response = self.client.profiles.begin_migration_commit(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_generate_sso_uri(self, resource_group):
        response = self.client.profiles.generate_sso_uri(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_supported_optimization_types(self, resource_group):
        response = self.client.profiles.list_supported_optimization_types(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_resource_usage(self, resource_group):
        response = self.client.profiles.list_resource_usage(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
