# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementEndpointsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_profile(self, resource_group):
        response = self.client.endpoints.list_by_profile(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-09-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.endpoints.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.endpoints.begin_create(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            endpoint={
                "location": "str",
                "contentTypesToCompress": ["str"],
                "customDomains": [{"name": "str", "hostName": "str", "validationData": "str"}],
                "defaultOriginGroup": {"id": "str"},
                "deliveryPolicy": {
                    "rules": [
                        {
                            "actions": ["delivery_rule_action"],
                            "order": 0,
                            "conditions": ["delivery_rule_condition"],
                            "name": "str",
                        }
                    ],
                    "description": "str",
                },
                "geoFilters": [{"action": "str", "countryCodes": ["str"], "relativePath": "str"}],
                "hostName": "str",
                "id": "str",
                "isCompressionEnabled": bool,
                "isHttpAllowed": True,
                "isHttpsAllowed": True,
                "name": "str",
                "optimizationType": "str",
                "originGroups": [
                    {
                        "name": "str",
                        "healthProbeSettings": {
                            "probeIntervalInSeconds": 0,
                            "probePath": "str",
                            "probeProtocol": "str",
                            "probeRequestType": "str",
                        },
                        "origins": [{"id": "str"}],
                        "responseBasedOriginErrorDetectionSettings": {
                            "httpErrorRanges": [{"begin": 0, "end": 0}],
                            "responseBasedDetectedErrorTypes": "str",
                            "responseBasedFailoverThresholdPercentage": 0,
                        },
                        "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": 0,
                    }
                ],
                "originHostHeader": "str",
                "originPath": "str",
                "origins": [
                    {
                        "name": "str",
                        "enabled": bool,
                        "hostName": "str",
                        "httpPort": 0,
                        "httpsPort": 0,
                        "originHostHeader": "str",
                        "priority": 0,
                        "privateEndpointStatus": "str",
                        "privateLinkAlias": "str",
                        "privateLinkApprovalMessage": "str",
                        "privateLinkLocation": "str",
                        "privateLinkResourceId": "str",
                        "weight": 0,
                    }
                ],
                "probePath": "str",
                "provisioningState": "str",
                "queryStringCachingBehavior": "str",
                "resourceState": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "urlSigningKeys": [
                    {
                        "keyId": "str",
                        "keySourceParameters": {
                            "resourceGroupName": "str",
                            "secretName": "str",
                            "secretVersion": "str",
                            "subscriptionId": "str",
                            "typeName": "str",
                            "vaultName": "str",
                        },
                    }
                ],
                "webApplicationFirewallPolicyLink": {"id": "str"},
            },
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.endpoints.begin_update(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            endpoint_update_properties={
                "contentTypesToCompress": ["str"],
                "defaultOriginGroup": {"id": "str"},
                "deliveryPolicy": {
                    "rules": [
                        {
                            "actions": ["delivery_rule_action"],
                            "order": 0,
                            "conditions": ["delivery_rule_condition"],
                            "name": "str",
                        }
                    ],
                    "description": "str",
                },
                "geoFilters": [{"action": "str", "countryCodes": ["str"], "relativePath": "str"}],
                "isCompressionEnabled": bool,
                "isHttpAllowed": True,
                "isHttpsAllowed": True,
                "optimizationType": "str",
                "originHostHeader": "str",
                "originPath": "str",
                "probePath": "str",
                "queryStringCachingBehavior": "str",
                "tags": {"str": "str"},
                "urlSigningKeys": [
                    {
                        "keyId": "str",
                        "keySourceParameters": {
                            "resourceGroupName": "str",
                            "secretName": "str",
                            "secretVersion": "str",
                            "subscriptionId": "str",
                            "typeName": "str",
                            "vaultName": "str",
                        },
                    }
                ],
                "webApplicationFirewallPolicyLink": {"id": "str"},
            },
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.endpoints.begin_delete(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_start(self, resource_group):
        response = self.client.endpoints.begin_start(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_stop(self, resource_group):
        response = self.client.endpoints.begin_stop(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_purge_content(self, resource_group):
        response = self.client.endpoints.begin_purge_content(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            content_file_paths={"contentPaths": ["str"]},
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_load_content(self, resource_group):
        response = self.client.endpoints.begin_load_content(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            content_file_paths={"contentPaths": ["str"]},
            api_version="2024-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_validate_custom_domain(self, resource_group):
        response = self.client.endpoints.validate_custom_domain(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            custom_domain_properties={"hostName": "str"},
            api_version="2024-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_resource_usage(self, resource_group):
        response = self.client.endpoints.list_resource_usage(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
