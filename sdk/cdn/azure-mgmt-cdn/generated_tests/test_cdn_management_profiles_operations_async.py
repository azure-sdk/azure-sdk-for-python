# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn.aio import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementProfilesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list(self, resource_group):
        response = self.client.profiles.list(
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list_by_resource_group(self, resource_group):
        response = self.client.profiles.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_get(self, resource_group):
        response = await self.client.profiles.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_create(self, resource_group):
        response = await (
            await self.client.profiles.begin_create(
                resource_group_name=resource_group.name,
                profile_name="str",
                profile={
                    "location": "str",
                    "sku": {"name": "str"},
                    "extendedProperties": {"str": "str"},
                    "frontDoorId": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "kind": "str",
                    "logScrubbing": {
                        "scrubbingRules": [
                            {"matchVariable": "str", "selectorMatchOperator": "str", "selector": "str", "state": "str"}
                        ],
                        "state": "str",
                    },
                    "name": "str",
                    "originResponseTimeoutSeconds": 0,
                    "provisioningState": "str",
                    "resourceState": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_update(self, resource_group):
        response = await (
            await self.client.profiles.begin_update(
                resource_group_name=resource_group.name,
                profile_name="str",
                profile_update_parameters={
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "logScrubbing": {
                        "scrubbingRules": [
                            {"matchVariable": "str", "selectorMatchOperator": "str", "selector": "str", "state": "str"}
                        ],
                        "state": "str",
                    },
                    "originResponseTimeoutSeconds": 0,
                    "tags": {"str": "str"},
                },
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_delete(self, resource_group):
        response = await (
            await self.client.profiles.begin_delete(
                resource_group_name=resource_group.name,
                profile_name="str",
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_can_migrate(self, resource_group):
        response = await (
            await self.client.profiles.begin_can_migrate(
                resource_group_name=resource_group.name,
                can_migrate_parameters={"classicResourceReference": {"id": "str"}},
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_migrate(self, resource_group):
        response = await (
            await self.client.profiles.begin_migrate(
                resource_group_name=resource_group.name,
                migration_parameters={
                    "classicResourceReference": {"id": "str"},
                    "profileName": "str",
                    "sku": {"name": "str"},
                    "migrationWebApplicationFirewallMappings": [
                        {"migratedFrom": {"id": "str"}, "migratedTo": {"id": "str"}}
                    ],
                },
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_migration_commit(self, resource_group):
        response = await (
            await self.client.profiles.begin_migration_commit(
                resource_group_name=resource_group.name,
                profile_name="str",
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_generate_sso_uri(self, resource_group):
        response = await self.client.profiles.generate_sso_uri(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list_supported_optimization_types(self, resource_group):
        response = await self.client.profiles.list_supported_optimization_types(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list_resource_usage(self, resource_group):
        response = self.client.profiles.list_resource_usage(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_cdn_can_migrate_to_afd(self, resource_group):
        response = await (
            await self.client.profiles.begin_cdn_can_migrate_to_afd(
                resource_group_name=resource_group.name,
                profile_name="str",
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_cdn_migrate_to_afd(self, resource_group):
        response = await (
            await self.client.profiles.begin_cdn_migrate_to_afd(
                resource_group_name=resource_group.name,
                profile_name="str",
                migration_parameters={
                    "sku": {"name": "str"},
                    "migrationEndpointMappings": [{"migratedFrom": "str", "migratedTo": "str"}],
                },
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_begin_migration_abort(self, resource_group):
        response = await (
            await self.client.profiles.begin_migration_abort(
                resource_group_name=resource_group.name,
                profile_name="str",
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
