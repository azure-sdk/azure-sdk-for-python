# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn.aio import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementLogAnalyticsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_log_analytics_metrics(self, resource_group):
        response = await self.client.log_analytics.get_log_analytics_metrics(
            resource_group_name=resource_group.name,
            profile_name="str",
            metrics=["str"],
            date_time_begin="2020-02-20 00:00:00",
            date_time_end="2020-02-20 00:00:00",
            granularity="str",
            custom_domains=["str"],
            protocols=["str"],
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_log_analytics_rankings(self, resource_group):
        response = await self.client.log_analytics.get_log_analytics_rankings(
            resource_group_name=resource_group.name,
            profile_name="str",
            rankings=["str"],
            metrics=["str"],
            max_ranking=0,
            date_time_begin="2020-02-20 00:00:00",
            date_time_end="2020-02-20 00:00:00",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_log_analytics_locations(self, resource_group):
        response = await self.client.log_analytics.get_log_analytics_locations(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_log_analytics_resources(self, resource_group):
        response = await self.client.log_analytics.get_log_analytics_resources(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_waf_log_analytics_metrics(self, resource_group):
        response = await self.client.log_analytics.get_waf_log_analytics_metrics(
            resource_group_name=resource_group.name,
            profile_name="str",
            metrics=["str"],
            date_time_begin="2020-02-20 00:00:00",
            date_time_end="2020-02-20 00:00:00",
            granularity="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_log_analytics_get_waf_log_analytics_rankings(self, resource_group):
        response = await self.client.log_analytics.get_waf_log_analytics_rankings(
            resource_group_name=resource_group.name,
            profile_name="str",
            metrics=["str"],
            date_time_begin="2020-02-20 00:00:00",
            date_time_end="2020-02-20 00:00:00",
            max_ranking=0,
            rankings=["str"],
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...
