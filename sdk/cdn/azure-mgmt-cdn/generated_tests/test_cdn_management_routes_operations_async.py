# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn.aio import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementRoutesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_endpoint(self, resource_group):
        response = self.client.routes.list_by_endpoint(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            api_version="2024-09-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.routes.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_name="str",
            route_name="str",
            api_version="2024-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create(self, resource_group):
        response = await (
            await self.client.routes.begin_create(
                resource_group_name=resource_group.name,
                profile_name="str",
                endpoint_name="str",
                route_name="str",
                route={
                    "cacheConfiguration": {
                        "compressionSettings": {"contentTypesToCompress": ["str"], "isCompressionEnabled": bool},
                        "queryParameters": "str",
                        "queryStringCachingBehavior": "str",
                    },
                    "customDomains": [{"id": "str", "isActive": bool}],
                    "deploymentStatus": "str",
                    "enabledState": "str",
                    "endpointName": "str",
                    "forwardingProtocol": "str",
                    "httpsRedirect": "Disabled",
                    "id": "str",
                    "linkToDefaultDomain": "Disabled",
                    "name": "str",
                    "originGroup": {"id": "str"},
                    "originPath": "str",
                    "patternsToMatch": ["str"],
                    "provisioningState": "str",
                    "ruleSets": [{"id": "str"}],
                    "supportedProtocols": [["Http", "Https"]],
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
                api_version="2024-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update(self, resource_group):
        response = await (
            await self.client.routes.begin_update(
                resource_group_name=resource_group.name,
                profile_name="str",
                endpoint_name="str",
                route_name="str",
                route_update_properties={
                    "cacheConfiguration": {
                        "compressionSettings": {"contentTypesToCompress": ["str"], "isCompressionEnabled": bool},
                        "queryParameters": "str",
                        "queryStringCachingBehavior": "str",
                    },
                    "customDomains": [{"id": "str", "isActive": bool}],
                    "enabledState": "str",
                    "endpointName": "str",
                    "forwardingProtocol": "str",
                    "httpsRedirect": "Disabled",
                    "linkToDefaultDomain": "Disabled",
                    "originGroup": {"id": "str"},
                    "originPath": "str",
                    "patternsToMatch": ["str"],
                    "ruleSets": [{"id": "str"}],
                    "supportedProtocols": [["Http", "Https"]],
                },
                api_version="2024-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.routes.begin_delete(
                resource_group_name=resource_group.name,
                profile_name="str",
                endpoint_name="str",
                route_name="str",
                api_version="2024-09-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
