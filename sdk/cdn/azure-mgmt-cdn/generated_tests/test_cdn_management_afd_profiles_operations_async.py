# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cdn.aio import CdnManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCdnManagementAFDProfilesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CdnManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_endpoint_name_availability(self, resource_group):
        response = await self.client.afd_profiles.check_endpoint_name_availability(
            resource_group_name=resource_group.name,
            profile_name="str",
            check_endpoint_name_availability_input={
                "name": "str",
                "type": "str",
                "autoGeneratedDomainNameLabelScope": "str",
            },
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_resource_usage(self, resource_group):
        response = self.client.afd_profiles.list_resource_usage(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2024-02-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_host_name_availability(self, resource_group):
        response = await self.client.afd_profiles.check_host_name_availability(
            resource_group_name=resource_group.name,
            profile_name="str",
            check_host_name_availability_input={"hostName": "str"},
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_validate_secret(self, resource_group):
        response = await self.client.afd_profiles.validate_secret(
            resource_group_name=resource_group.name,
            profile_name="str",
            validate_secret_input={"secretSource": {"id": "str"}, "secretType": "str", "secretVersion": "str"},
            api_version="2024-02-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_upgrade(self, resource_group):
        response = await (
            await self.client.afd_profiles.begin_upgrade(
                resource_group_name=resource_group.name,
                profile_name="str",
                profile_upgrade_parameters={
                    "wafMappingList": [{"changeToWafPolicy": {"id": "str"}, "securityPolicyName": "str"}]
                },
                api_version="2024-02-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
