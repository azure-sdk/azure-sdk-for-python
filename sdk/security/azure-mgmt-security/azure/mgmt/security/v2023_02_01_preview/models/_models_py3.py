# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from ... import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class EnvironmentData(_serialization.Model):
    """The security connector environment data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AwsEnvironmentData, AzureDevOpsScopeEnvironmentData, GcpProjectEnvironmentData,
    GithubScopeEnvironmentData, GitlabScopeEnvironmentData

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    """

    _validation = {
        "environment_type": {"required": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
    }

    _subtype_map = {
        "environment_type": {
            "AwsAccount": "AwsEnvironmentData",
            "AzureDevOpsScope": "AzureDevOpsScopeEnvironmentData",
            "GcpProject": "GcpProjectEnvironmentData",
            "GithubScope": "GithubScopeEnvironmentData",
            "GitlabScope": "GitlabScopeEnvironmentData",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.environment_type: Optional[str] = None


class AwsEnvironmentData(EnvironmentData):
    """The AWS connector environment data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    :ivar organizational_data: The AWS account's organizational data.
    :vartype organizational_data:
     ~azure.mgmt.security.v2023_02_01_preview.models.AwsOrganizationalData
    :ivar regions: list of regions to scan.
    :vartype regions: list[str]
    :ivar account_name: The AWS account name.
    :vartype account_name: str
    """

    _validation = {
        "environment_type": {"required": True},
        "account_name": {"readonly": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
        "organizational_data": {"key": "organizationalData", "type": "AwsOrganizationalData"},
        "regions": {"key": "regions", "type": "[str]"},
        "account_name": {"key": "accountName", "type": "str"},
    }

    def __init__(
        self,
        *,
        organizational_data: Optional["_models.AwsOrganizationalData"] = None,
        regions: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword organizational_data: The AWS account's organizational data.
        :paramtype organizational_data:
         ~azure.mgmt.security.v2023_02_01_preview.models.AwsOrganizationalData
        :keyword regions: list of regions to scan.
        :paramtype regions: list[str]
        """
        super().__init__(**kwargs)
        self.environment_type: str = "AwsAccount"
        self.organizational_data = organizational_data
        self.regions = regions
        self.account_name = None


class AwsOrganizationalData(_serialization.Model):
    """The AWS Organization data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AwsOrganizationalDataMember, AwsOrganizationalDataMaster

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    """

    _validation = {
        "organization_membership_type": {"required": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
    }

    _subtype_map = {
        "organization_membership_type": {
            "Member": "AwsOrganizationalDataMember",
            "Organization": "AwsOrganizationalDataMaster",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.organization_membership_type: Optional[str] = None


class AwsOrganizationalDataMaster(AwsOrganizationalData):
    """The AWS Organization data for the master account.

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    :ivar stackset_name: If the multi cloud account is of membership type organization, this will
     be the name of the onboarding stackset.
    :vartype stackset_name: str
    :ivar excluded_account_ids: If the multi cloud account is of membership type organization, list
     of accounts excluded from offering.
    :vartype excluded_account_ids: list[str]
    """

    _validation = {
        "organization_membership_type": {"required": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
        "stackset_name": {"key": "stacksetName", "type": "str"},
        "excluded_account_ids": {"key": "excludedAccountIds", "type": "[str]"},
    }

    def __init__(
        self, *, stackset_name: Optional[str] = None, excluded_account_ids: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword stackset_name: If the multi cloud account is of membership type organization, this
         will be the name of the onboarding stackset.
        :paramtype stackset_name: str
        :keyword excluded_account_ids: If the multi cloud account is of membership type organization,
         list of accounts excluded from offering.
        :paramtype excluded_account_ids: list[str]
        """
        super().__init__(**kwargs)
        self.organization_membership_type: str = "Organization"
        self.stackset_name = stackset_name
        self.excluded_account_ids = excluded_account_ids


class AwsOrganizationalDataMember(AwsOrganizationalData):
    """The AWS Organization data for the member account.

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    :ivar parent_hierarchy_id: If the multi cloud account is not of membership type organization,
     this will be the ID of the account's parent.
    :vartype parent_hierarchy_id: str
    """

    _validation = {
        "organization_membership_type": {"required": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
        "parent_hierarchy_id": {"key": "parentHierarchyId", "type": "str"},
    }

    def __init__(self, *, parent_hierarchy_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword parent_hierarchy_id: If the multi cloud account is not of membership type
         organization, this will be the ID of the account's parent.
        :paramtype parent_hierarchy_id: str
        """
        super().__init__(**kwargs)
        self.organization_membership_type: str = "Member"
        self.parent_hierarchy_id = parent_hierarchy_id


class AzureDevOpsScopeEnvironmentData(EnvironmentData):
    """The AzureDevOps scope connector's environment data.

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    """

    _validation = {
        "environment_type": {"required": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.environment_type: str = "AzureDevOpsScope"


class AzureTrackedResourceLocation(_serialization.Model):
    """Describes an Azure resource with location.

    :ivar location: Location where the resource is stored.
    :vartype location: str
    """

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword location: Location where the resource is stored.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.location = location


class Baseline(_serialization.Model):
    """Baseline details.

    :ivar expected_results: Expected results.
    :vartype expected_results: list[list[str]]
    :ivar updated_time: Baseline update time (UTC).
    :vartype updated_time: ~datetime.datetime
    """

    _attribute_map = {
        "expected_results": {"key": "expectedResults", "type": "[[str]]"},
        "updated_time": {"key": "updatedTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        expected_results: Optional[List[List[str]]] = None,
        updated_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword expected_results: Expected results.
        :paramtype expected_results: list[list[str]]
        :keyword updated_time: Baseline update time (UTC).
        :paramtype updated_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.expected_results = expected_results
        self.updated_time = updated_time


class BaselineAdjustedResult(_serialization.Model):
    """The rule result adjusted with baseline.

    :ivar baseline: Baseline details.
    :vartype baseline: ~azure.mgmt.security.v2023_02_01_preview.models.Baseline
    :ivar status: The rule result status. Known values are: "NonFinding", "Finding", and
     "InternalError".
    :vartype status: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleStatus
    :ivar results_not_in_baseline: Results the are not in baseline.
    :vartype results_not_in_baseline: list[list[str]]
    :ivar results_only_in_baseline: Results the are in baseline.
    :vartype results_only_in_baseline: list[list[str]]
    """

    _attribute_map = {
        "baseline": {"key": "baseline", "type": "Baseline"},
        "status": {"key": "status", "type": "str"},
        "results_not_in_baseline": {"key": "resultsNotInBaseline", "type": "[[str]]"},
        "results_only_in_baseline": {"key": "resultsOnlyInBaseline", "type": "[[str]]"},
    }

    def __init__(
        self,
        *,
        baseline: Optional["_models.Baseline"] = None,
        status: Optional[Union[str, "_models.RuleStatus"]] = None,
        results_not_in_baseline: Optional[List[List[str]]] = None,
        results_only_in_baseline: Optional[List[List[str]]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword baseline: Baseline details.
        :paramtype baseline: ~azure.mgmt.security.v2023_02_01_preview.models.Baseline
        :keyword status: The rule result status. Known values are: "NonFinding", "Finding", and
         "InternalError".
        :paramtype status: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleStatus
        :keyword results_not_in_baseline: Results the are not in baseline.
        :paramtype results_not_in_baseline: list[list[str]]
        :keyword results_only_in_baseline: Results the are in baseline.
        :paramtype results_only_in_baseline: list[list[str]]
        """
        super().__init__(**kwargs)
        self.baseline = baseline
        self.status = status
        self.results_not_in_baseline = results_not_in_baseline
        self.results_only_in_baseline = results_only_in_baseline


class BenchmarkReference(_serialization.Model):
    """The benchmark references.

    :ivar benchmark: The benchmark name.
    :vartype benchmark: str
    :ivar reference: The benchmark reference.
    :vartype reference: str
    """

    _attribute_map = {
        "benchmark": {"key": "benchmark", "type": "str"},
        "reference": {"key": "reference", "type": "str"},
    }

    def __init__(self, *, benchmark: Optional[str] = None, reference: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword benchmark: The benchmark name.
        :paramtype benchmark: str
        :keyword reference: The benchmark reference.
        :paramtype reference: str
        """
        super().__init__(**kwargs)
        self.benchmark = benchmark
        self.reference = reference


class CloudErrorBody(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.security.v2023_02_01_preview.models.CloudErrorBody]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.security.v2023_02_01_preview.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[CloudErrorBody]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class CloudOffering(_serialization.Model):
    """The security offering details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CspmMonitorAwsOffering, CspmMonitorAzureDevOpsOffering, CspmMonitorGcpOffering,
    CspmMonitorGitLab, CspmMonitorGithubOffering, DefenderCspmAwsOffering, DefenderCspmGcpOffering,
    DefenderForContainersAwsOffering, DefenderForContainersGcpOffering,
    DefenderFoDatabasesAwsOffering, DefenderForDatabasesGcpOffering,
    DefenderForDevOpsAzureDevOpsOffering, DefenderForDevOpsGitLabOffering,
    DefenderForDevOpsGithubOffering, DefenderForServersAwsOffering, DefenderForServersGcpOffering,
    InformationProtectionAwsOffering

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    _subtype_map = {
        "offering_type": {
            "CspmMonitorAws": "CspmMonitorAwsOffering",
            "CspmMonitorAzureDevOps": "CspmMonitorAzureDevOpsOffering",
            "CspmMonitorGcp": "CspmMonitorGcpOffering",
            "CspmMonitorGitLab": "CspmMonitorGitLab",
            "CspmMonitorGithub": "CspmMonitorGithubOffering",
            "DefenderCspmAws": "DefenderCspmAwsOffering",
            "DefenderCspmGcp": "DefenderCspmGcpOffering",
            "DefenderForContainersAws": "DefenderForContainersAwsOffering",
            "DefenderForContainersGcp": "DefenderForContainersGcpOffering",
            "DefenderForDatabasesAws": "DefenderFoDatabasesAwsOffering",
            "DefenderForDatabasesGcp": "DefenderForDatabasesGcpOffering",
            "DefenderForDevOpsAzureDevOps": "DefenderForDevOpsAzureDevOpsOffering",
            "DefenderForDevOpsGitLab": "DefenderForDevOpsGitLabOffering",
            "DefenderForDevOpsGithub": "DefenderForDevOpsGithubOffering",
            "DefenderForServersAws": "DefenderForServersAwsOffering",
            "DefenderForServersGcp": "DefenderForServersGcpOffering",
            "InformationProtectionAws": "InformationProtectionAwsOffering",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: Optional[str] = None
        self.description = None


class CspmMonitorAwsOffering(CloudOffering):
    """The CSPM monitoring for AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar native_cloud_connection: The native cloud connection configuration.
    :vartype native_cloud_connection:
     ~azure.mgmt.security.v2023_02_01_preview.models.CspmMonitorAwsOfferingNativeCloudConnection
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "native_cloud_connection": {
            "key": "nativeCloudConnection",
            "type": "CspmMonitorAwsOfferingNativeCloudConnection",
        },
    }

    def __init__(
        self,
        *,
        native_cloud_connection: Optional["_models.CspmMonitorAwsOfferingNativeCloudConnection"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword native_cloud_connection: The native cloud connection configuration.
        :paramtype native_cloud_connection:
         ~azure.mgmt.security.v2023_02_01_preview.models.CspmMonitorAwsOfferingNativeCloudConnection
        """
        super().__init__(**kwargs)
        self.offering_type: str = "CspmMonitorAws"
        self.native_cloud_connection = native_cloud_connection


class CspmMonitorAwsOfferingNativeCloudConnection(_serialization.Model):
    """The native cloud connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class CspmMonitorAzureDevOpsOffering(CloudOffering):
    """The CSPM monitoring for AzureDevOps offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "CspmMonitorAzureDevOps"


class CspmMonitorGcpOffering(CloudOffering):
    """The CSPM monitoring for GCP offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar native_cloud_connection: The native cloud connection configuration.
    :vartype native_cloud_connection:
     ~azure.mgmt.security.v2023_02_01_preview.models.CspmMonitorGcpOfferingNativeCloudConnection
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "native_cloud_connection": {
            "key": "nativeCloudConnection",
            "type": "CspmMonitorGcpOfferingNativeCloudConnection",
        },
    }

    def __init__(
        self,
        *,
        native_cloud_connection: Optional["_models.CspmMonitorGcpOfferingNativeCloudConnection"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword native_cloud_connection: The native cloud connection configuration.
        :paramtype native_cloud_connection:
         ~azure.mgmt.security.v2023_02_01_preview.models.CspmMonitorGcpOfferingNativeCloudConnection
        """
        super().__init__(**kwargs)
        self.offering_type: str = "CspmMonitorGcp"
        self.native_cloud_connection = native_cloud_connection


class CspmMonitorGcpOfferingNativeCloudConnection(_serialization.Model):
    """The native cloud connection configuration.

    :ivar workload_identity_provider_id: The GCP workload identity provider id for the offering.
    :vartype workload_identity_provider_id: str
    :ivar service_account_email_address: The service account email address in GCP for this
     offering.
    :vartype service_account_email_address: str
    """

    _attribute_map = {
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
    }

    def __init__(
        self,
        *,
        workload_identity_provider_id: Optional[str] = None,
        service_account_email_address: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workload_identity_provider_id: The GCP workload identity provider id for the offering.
        :paramtype workload_identity_provider_id: str
        :keyword service_account_email_address: The service account email address in GCP for this
         offering.
        :paramtype service_account_email_address: str
        """
        super().__init__(**kwargs)
        self.workload_identity_provider_id = workload_identity_provider_id
        self.service_account_email_address = service_account_email_address


class CspmMonitorGithubOffering(CloudOffering):
    """The CSPM monitoring for github offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "CspmMonitorGithub"


class CspmMonitorGitLab(CloudOffering):
    """The CSPM monitoring for gitlab offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "CspmMonitorGitLab"


class DefenderCspmAwsOffering(CloudOffering):
    """The CSPM P1 for AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar vm_scanners: The Microsoft Defender for Server VM scanning configuration.
    :vartype vm_scanners:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingVmScanners
    :ivar data_sensitivity_discovery: The Microsoft Defender Data Sensitivity discovery
     configuration.
    :vartype data_sensitivity_discovery:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingDataSensitivityDiscovery
    :ivar databases_dspm: The databases DSPM configuration.
    :vartype databases_dspm:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingDatabasesDspm
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "vm_scanners": {"key": "vmScanners", "type": "DefenderCspmAwsOfferingVmScanners"},
        "data_sensitivity_discovery": {
            "key": "dataSensitivityDiscovery",
            "type": "DefenderCspmAwsOfferingDataSensitivityDiscovery",
        },
        "databases_dspm": {"key": "databasesDspm", "type": "DefenderCspmAwsOfferingDatabasesDspm"},
    }

    def __init__(
        self,
        *,
        vm_scanners: Optional["_models.DefenderCspmAwsOfferingVmScanners"] = None,
        data_sensitivity_discovery: Optional["_models.DefenderCspmAwsOfferingDataSensitivityDiscovery"] = None,
        databases_dspm: Optional["_models.DefenderCspmAwsOfferingDatabasesDspm"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword vm_scanners: The Microsoft Defender for Server VM scanning configuration.
        :paramtype vm_scanners:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingVmScanners
        :keyword data_sensitivity_discovery: The Microsoft Defender Data Sensitivity discovery
         configuration.
        :paramtype data_sensitivity_discovery:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingDataSensitivityDiscovery
        :keyword databases_dspm: The databases DSPM configuration.
        :paramtype databases_dspm:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingDatabasesDspm
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderCspmAws"
        self.vm_scanners = vm_scanners
        self.data_sensitivity_discovery = data_sensitivity_discovery
        self.databases_dspm = databases_dspm


class DefenderCspmAwsOfferingDatabasesDspm(_serialization.Model):
    """The databases DSPM configuration.

    :ivar enabled: Is databases DSPM protection enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is databases DSPM protection enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn


class DefenderCspmAwsOfferingDataSensitivityDiscovery(_serialization.Model):
    """The Microsoft Defender Data Sensitivity discovery configuration.

    :ivar enabled: Is Microsoft Defender Data Sensitivity discovery is enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is Microsoft Defender Data Sensitivity discovery is enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn


class DefenderCspmAwsOfferingVmScanners(_serialization.Model):
    """The Microsoft Defender for Server VM scanning configuration.

    :ivar enabled: Is Microsoft Defender for Server VM scanning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Microsoft Defender for Server VM scanning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingVmScannersConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "DefenderCspmAwsOfferingVmScannersConfiguration"},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderCspmAwsOfferingVmScannersConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is Microsoft Defender for Server VM scanning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Microsoft Defender for Server VM scanning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderCspmAwsOfferingVmScannersConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderCspmAwsOfferingVmScannersConfiguration(_serialization.Model):
    """configuration for Microsoft Defender for Server VM scanning.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    :ivar scanning_mode: The scanning mode for the VM scan. "Default"
    :vartype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
    :ivar exclusion_tags: VM tags that indicates that VM should not be scanned.
    :vartype exclusion_tags: dict[str, str]
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
        "scanning_mode": {"key": "scanningMode", "type": "str"},
        "exclusion_tags": {"key": "exclusionTags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        cloud_role_arn: Optional[str] = None,
        scanning_mode: Optional[Union[str, "_models.ScanningMode"]] = None,
        exclusion_tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        :keyword scanning_mode: The scanning mode for the VM scan. "Default"
        :paramtype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
        :keyword exclusion_tags: VM tags that indicates that VM should not be scanned.
        :paramtype exclusion_tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn
        self.scanning_mode = scanning_mode
        self.exclusion_tags = exclusion_tags


class DefenderCspmGcpOffering(CloudOffering):
    """The CSPM P1 for GCP offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderCspmGcp"


class DefenderFoDatabasesAwsOffering(CloudOffering):
    """The Defender for Databases AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar arc_auto_provisioning: The ARC autoprovisioning configuration.
    :vartype arc_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingArcAutoProvisioning
    :ivar rds: The RDS configuration.
    :vartype rds: ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingRds
    :ivar databases_dspm: The databases DSPM configuration.
    :vartype databases_dspm:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingDatabasesDspm
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "arc_auto_provisioning": {
            "key": "arcAutoProvisioning",
            "type": "DefenderFoDatabasesAwsOfferingArcAutoProvisioning",
        },
        "rds": {"key": "rds", "type": "DefenderFoDatabasesAwsOfferingRds"},
        "databases_dspm": {"key": "databasesDspm", "type": "DefenderFoDatabasesAwsOfferingDatabasesDspm"},
    }

    def __init__(
        self,
        *,
        arc_auto_provisioning: Optional["_models.DefenderFoDatabasesAwsOfferingArcAutoProvisioning"] = None,
        rds: Optional["_models.DefenderFoDatabasesAwsOfferingRds"] = None,
        databases_dspm: Optional["_models.DefenderFoDatabasesAwsOfferingDatabasesDspm"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword arc_auto_provisioning: The ARC autoprovisioning configuration.
        :paramtype arc_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingArcAutoProvisioning
        :keyword rds: The RDS configuration.
        :paramtype rds:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingRds
        :keyword databases_dspm: The databases DSPM configuration.
        :paramtype databases_dspm:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingDatabasesDspm
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForDatabasesAws"
        self.arc_auto_provisioning = arc_auto_provisioning
        self.rds = rds
        self.databases_dspm = databases_dspm


class DefenderFoDatabasesAwsOfferingArcAutoProvisioning(_serialization.Model):
    """The ARC autoprovisioning configuration.

    :ivar enabled: Is arc auto provisioning enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    :ivar configuration: Configuration for servers Arc auto provisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingArcAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderFoDatabasesAwsOfferingArcAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        cloud_role_arn: Optional[str] = None,
        configuration: Optional["_models.DefenderFoDatabasesAwsOfferingArcAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is arc auto provisioning enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        :keyword configuration: Configuration for servers Arc auto provisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderFoDatabasesAwsOfferingArcAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn
        self.configuration = configuration


class DefenderFoDatabasesAwsOfferingArcAutoProvisioningConfiguration(_serialization.Model):
    """Configuration for servers Arc auto provisioning.

    :ivar proxy: Optional http proxy endpoint to use for the Arc agent.
    :vartype proxy: str
    :ivar private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
    :vartype private_link_scope: str
    """

    _attribute_map = {
        "proxy": {"key": "proxy", "type": "str"},
        "private_link_scope": {"key": "privateLinkScope", "type": "str"},
    }

    def __init__(self, *, proxy: Optional[str] = None, private_link_scope: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword proxy: Optional http proxy endpoint to use for the Arc agent.
        :paramtype proxy: str
        :keyword private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
        :paramtype private_link_scope: str
        """
        super().__init__(**kwargs)
        self.proxy = proxy
        self.private_link_scope = private_link_scope


class DefenderFoDatabasesAwsOfferingDatabasesDspm(_serialization.Model):
    """The databases DSPM configuration.

    :ivar enabled: Is databases DSPM protection enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is databases DSPM protection enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn


class DefenderFoDatabasesAwsOfferingRds(_serialization.Model):
    """The RDS configuration.

    :ivar enabled: Is RDS protection enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is RDS protection enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOffering(CloudOffering):  # pylint: disable=too-many-instance-attributes
    """The Defender for Containers AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar kubernetes_service: The kubernetes service connection configuration.
    :vartype kubernetes_service:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKubernetesService
    :ivar kubernetes_scuba_reader: The kubernetes to scuba connection configuration.
    :vartype kubernetes_scuba_reader:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKubernetesScubaReader
    :ivar cloud_watch_to_kinesis: The cloudwatch to kinesis connection configuration.
    :vartype cloud_watch_to_kinesis:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingCloudWatchToKinesis
    :ivar kinesis_to_s3: The kinesis to s3 connection configuration.
    :vartype kinesis_to_s3:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKinesisToS3
    :ivar container_vulnerability_assessment: The container vulnerability assessment configuration.
    :vartype container_vulnerability_assessment:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessment
    :ivar container_vulnerability_assessment_task: The container vulnerability assessment task
     configuration.
    :vartype container_vulnerability_assessment_task:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessmentTask
    :ivar enable_container_vulnerability_assessment: Enable container vulnerability assessment
     feature.
    :vartype enable_container_vulnerability_assessment: bool
    :ivar auto_provisioning: Is audit logs pipeline auto provisioning enabled.
    :vartype auto_provisioning: bool
    :ivar kube_audit_retention_time: The retention time in days of kube audit logs set on the
     CloudWatch log group.
    :vartype kube_audit_retention_time: int
    :ivar scuba_external_id: The externalId used by the data reader to prevent the confused deputy
     attack.
    :vartype scuba_external_id: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "kubernetes_service": {"key": "kubernetesService", "type": "DefenderForContainersAwsOfferingKubernetesService"},
        "kubernetes_scuba_reader": {
            "key": "kubernetesScubaReader",
            "type": "DefenderForContainersAwsOfferingKubernetesScubaReader",
        },
        "cloud_watch_to_kinesis": {
            "key": "cloudWatchToKinesis",
            "type": "DefenderForContainersAwsOfferingCloudWatchToKinesis",
        },
        "kinesis_to_s3": {"key": "kinesisToS3", "type": "DefenderForContainersAwsOfferingKinesisToS3"},
        "container_vulnerability_assessment": {
            "key": "containerVulnerabilityAssessment",
            "type": "DefenderForContainersAwsOfferingContainerVulnerabilityAssessment",
        },
        "container_vulnerability_assessment_task": {
            "key": "containerVulnerabilityAssessmentTask",
            "type": "DefenderForContainersAwsOfferingContainerVulnerabilityAssessmentTask",
        },
        "enable_container_vulnerability_assessment": {"key": "enableContainerVulnerabilityAssessment", "type": "bool"},
        "auto_provisioning": {"key": "autoProvisioning", "type": "bool"},
        "kube_audit_retention_time": {"key": "kubeAuditRetentionTime", "type": "int"},
        "scuba_external_id": {"key": "scubaExternalId", "type": "str"},
    }

    def __init__(
        self,
        *,
        kubernetes_service: Optional["_models.DefenderForContainersAwsOfferingKubernetesService"] = None,
        kubernetes_scuba_reader: Optional["_models.DefenderForContainersAwsOfferingKubernetesScubaReader"] = None,
        cloud_watch_to_kinesis: Optional["_models.DefenderForContainersAwsOfferingCloudWatchToKinesis"] = None,
        kinesis_to_s3: Optional["_models.DefenderForContainersAwsOfferingKinesisToS3"] = None,
        container_vulnerability_assessment: Optional[
            "_models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessment"
        ] = None,
        container_vulnerability_assessment_task: Optional[
            "_models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessmentTask"
        ] = None,
        enable_container_vulnerability_assessment: Optional[bool] = None,
        auto_provisioning: Optional[bool] = None,
        kube_audit_retention_time: Optional[int] = None,
        scuba_external_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kubernetes_service: The kubernetes service connection configuration.
        :paramtype kubernetes_service:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKubernetesService
        :keyword kubernetes_scuba_reader: The kubernetes to scuba connection configuration.
        :paramtype kubernetes_scuba_reader:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKubernetesScubaReader
        :keyword cloud_watch_to_kinesis: The cloudwatch to kinesis connection configuration.
        :paramtype cloud_watch_to_kinesis:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingCloudWatchToKinesis
        :keyword kinesis_to_s3: The kinesis to s3 connection configuration.
        :paramtype kinesis_to_s3:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingKinesisToS3
        :keyword container_vulnerability_assessment: The container vulnerability assessment
         configuration.
        :paramtype container_vulnerability_assessment:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessment
        :keyword container_vulnerability_assessment_task: The container vulnerability assessment task
         configuration.
        :paramtype container_vulnerability_assessment_task:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersAwsOfferingContainerVulnerabilityAssessmentTask
        :keyword enable_container_vulnerability_assessment: Enable container vulnerability assessment
         feature.
        :paramtype enable_container_vulnerability_assessment: bool
        :keyword auto_provisioning: Is audit logs pipeline auto provisioning enabled.
        :paramtype auto_provisioning: bool
        :keyword kube_audit_retention_time: The retention time in days of kube audit logs set on the
         CloudWatch log group.
        :paramtype kube_audit_retention_time: int
        :keyword scuba_external_id: The externalId used by the data reader to prevent the confused
         deputy attack.
        :paramtype scuba_external_id: str
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForContainersAws"
        self.kubernetes_service = kubernetes_service
        self.kubernetes_scuba_reader = kubernetes_scuba_reader
        self.cloud_watch_to_kinesis = cloud_watch_to_kinesis
        self.kinesis_to_s3 = kinesis_to_s3
        self.container_vulnerability_assessment = container_vulnerability_assessment
        self.container_vulnerability_assessment_task = container_vulnerability_assessment_task
        self.enable_container_vulnerability_assessment = enable_container_vulnerability_assessment
        self.auto_provisioning = auto_provisioning
        self.kube_audit_retention_time = kube_audit_retention_time
        self.scuba_external_id = scuba_external_id


class DefenderForContainersAwsOfferingCloudWatchToKinesis(_serialization.Model):
    """The cloudwatch to kinesis connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS used by CloudWatch to transfer data into
     Kinesis.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS used by CloudWatch to transfer data into
         Kinesis.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOfferingContainerVulnerabilityAssessment(_serialization.Model):
    """The container vulnerability assessment configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOfferingContainerVulnerabilityAssessmentTask(_serialization.Model):
    """The container vulnerability assessment task configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOfferingKinesisToS3(_serialization.Model):
    """The kinesis to s3 connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS used by Kinesis to transfer data into S3.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS used by Kinesis to transfer data into S3.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOfferingKubernetesScubaReader(_serialization.Model):
    """The kubernetes to scuba connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature used for reading data.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature used for reading data.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersAwsOfferingKubernetesService(_serialization.Model):
    """The kubernetes service connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature used for provisioning
     resources.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature used for provisioning
         resources.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForContainersGcpOffering(CloudOffering):
    """The containers GCP offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar native_cloud_connection: The native cloud connection configuration.
    :vartype native_cloud_connection:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersGcpOfferingNativeCloudConnection
    :ivar data_pipeline_native_cloud_connection: The native cloud connection configuration.
    :vartype data_pipeline_native_cloud_connection:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection
    :ivar audit_logs_auto_provisioning_flag: Is audit logs data collection enabled.
    :vartype audit_logs_auto_provisioning_flag: bool
    :ivar defender_agent_auto_provisioning_flag: Is Microsoft Defender for Cloud Kubernetes agent
     auto provisioning enabled.
    :vartype defender_agent_auto_provisioning_flag: bool
    :ivar policy_agent_auto_provisioning_flag: Is Policy Kubernetes agent auto provisioning
     enabled.
    :vartype policy_agent_auto_provisioning_flag: bool
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "native_cloud_connection": {
            "key": "nativeCloudConnection",
            "type": "DefenderForContainersGcpOfferingNativeCloudConnection",
        },
        "data_pipeline_native_cloud_connection": {
            "key": "dataPipelineNativeCloudConnection",
            "type": "DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection",
        },
        "audit_logs_auto_provisioning_flag": {"key": "auditLogsAutoProvisioningFlag", "type": "bool"},
        "defender_agent_auto_provisioning_flag": {"key": "defenderAgentAutoProvisioningFlag", "type": "bool"},
        "policy_agent_auto_provisioning_flag": {"key": "policyAgentAutoProvisioningFlag", "type": "bool"},
    }

    def __init__(
        self,
        *,
        native_cloud_connection: Optional["_models.DefenderForContainersGcpOfferingNativeCloudConnection"] = None,
        data_pipeline_native_cloud_connection: Optional[
            "_models.DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection"
        ] = None,
        audit_logs_auto_provisioning_flag: Optional[bool] = None,
        defender_agent_auto_provisioning_flag: Optional[bool] = None,
        policy_agent_auto_provisioning_flag: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword native_cloud_connection: The native cloud connection configuration.
        :paramtype native_cloud_connection:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersGcpOfferingNativeCloudConnection
        :keyword data_pipeline_native_cloud_connection: The native cloud connection configuration.
        :paramtype data_pipeline_native_cloud_connection:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection
        :keyword audit_logs_auto_provisioning_flag: Is audit logs data collection enabled.
        :paramtype audit_logs_auto_provisioning_flag: bool
        :keyword defender_agent_auto_provisioning_flag: Is Microsoft Defender for Cloud Kubernetes
         agent auto provisioning enabled.
        :paramtype defender_agent_auto_provisioning_flag: bool
        :keyword policy_agent_auto_provisioning_flag: Is Policy Kubernetes agent auto provisioning
         enabled.
        :paramtype policy_agent_auto_provisioning_flag: bool
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForContainersGcp"
        self.native_cloud_connection = native_cloud_connection
        self.data_pipeline_native_cloud_connection = data_pipeline_native_cloud_connection
        self.audit_logs_auto_provisioning_flag = audit_logs_auto_provisioning_flag
        self.defender_agent_auto_provisioning_flag = defender_agent_auto_provisioning_flag
        self.policy_agent_auto_provisioning_flag = policy_agent_auto_provisioning_flag


class DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection(_serialization.Model):
    """The native cloud connection configuration.

    :ivar service_account_email_address: The data collection service account email address in GCP
     for this offering.
    :vartype service_account_email_address: str
    :ivar workload_identity_provider_id: The data collection GCP workload identity provider id for
     this offering.
    :vartype workload_identity_provider_id: str
    """

    _attribute_map = {
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
    }

    def __init__(
        self,
        *,
        service_account_email_address: Optional[str] = None,
        workload_identity_provider_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword service_account_email_address: The data collection service account email address in
         GCP for this offering.
        :paramtype service_account_email_address: str
        :keyword workload_identity_provider_id: The data collection GCP workload identity provider id
         for this offering.
        :paramtype workload_identity_provider_id: str
        """
        super().__init__(**kwargs)
        self.service_account_email_address = service_account_email_address
        self.workload_identity_provider_id = workload_identity_provider_id


class DefenderForContainersGcpOfferingNativeCloudConnection(_serialization.Model):
    """The native cloud connection configuration.

    :ivar service_account_email_address: The service account email address in GCP for this
     offering.
    :vartype service_account_email_address: str
    :ivar workload_identity_provider_id: The GCP workload identity provider id for this offering.
    :vartype workload_identity_provider_id: str
    """

    _attribute_map = {
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
    }

    def __init__(
        self,
        *,
        service_account_email_address: Optional[str] = None,
        workload_identity_provider_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword service_account_email_address: The service account email address in GCP for this
         offering.
        :paramtype service_account_email_address: str
        :keyword workload_identity_provider_id: The GCP workload identity provider id for this
         offering.
        :paramtype workload_identity_provider_id: str
        """
        super().__init__(**kwargs)
        self.service_account_email_address = service_account_email_address
        self.workload_identity_provider_id = workload_identity_provider_id


class DefenderForDatabasesGcpOffering(CloudOffering):
    """The Defender for Databases GCP offering configurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar arc_auto_provisioning: The ARC autoprovisioning configuration.
    :vartype arc_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingArcAutoProvisioning
    :ivar defender_for_databases_arc_auto_provisioning: The native cloud connection configuration.
    :vartype defender_for_databases_arc_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "arc_auto_provisioning": {
            "key": "arcAutoProvisioning",
            "type": "DefenderForDatabasesGcpOfferingArcAutoProvisioning",
        },
        "defender_for_databases_arc_auto_provisioning": {
            "key": "defenderForDatabasesArcAutoProvisioning",
            "type": "DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning",
        },
    }

    def __init__(
        self,
        *,
        arc_auto_provisioning: Optional["_models.DefenderForDatabasesGcpOfferingArcAutoProvisioning"] = None,
        defender_for_databases_arc_auto_provisioning: Optional[
            "_models.DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning"
        ] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword arc_auto_provisioning: The ARC autoprovisioning configuration.
        :paramtype arc_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingArcAutoProvisioning
        :keyword defender_for_databases_arc_auto_provisioning: The native cloud connection
         configuration.
        :paramtype defender_for_databases_arc_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForDatabasesGcp"
        self.arc_auto_provisioning = arc_auto_provisioning
        self.defender_for_databases_arc_auto_provisioning = defender_for_databases_arc_auto_provisioning


class DefenderForDatabasesGcpOfferingArcAutoProvisioning(_serialization.Model):
    """The ARC autoprovisioning configuration.

    :ivar enabled: Is arc auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: Configuration for servers Arc auto provisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingArcAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderForDatabasesGcpOfferingArcAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForDatabasesGcpOfferingArcAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is arc auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: Configuration for servers Arc auto provisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForDatabasesGcpOfferingArcAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForDatabasesGcpOfferingArcAutoProvisioningConfiguration(_serialization.Model):
    """Configuration for servers Arc auto provisioning.

    :ivar proxy: Optional http proxy endpoint to use for the Arc agent.
    :vartype proxy: str
    :ivar private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
    :vartype private_link_scope: str
    """

    _attribute_map = {
        "proxy": {"key": "proxy", "type": "str"},
        "private_link_scope": {"key": "privateLinkScope", "type": "str"},
    }

    def __init__(self, *, proxy: Optional[str] = None, private_link_scope: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword proxy: Optional http proxy endpoint to use for the Arc agent.
        :paramtype proxy: str
        :keyword private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
        :paramtype private_link_scope: str
        """
        super().__init__(**kwargs)
        self.proxy = proxy
        self.private_link_scope = private_link_scope


class DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning(_serialization.Model):
    """The native cloud connection configuration.

    :ivar service_account_email_address: The service account email address in GCP for this
     offering.
    :vartype service_account_email_address: str
    :ivar workload_identity_provider_id: The GCP workload identity provider id for this offering.
    :vartype workload_identity_provider_id: str
    """

    _attribute_map = {
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
    }

    def __init__(
        self,
        *,
        service_account_email_address: Optional[str] = None,
        workload_identity_provider_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword service_account_email_address: The service account email address in GCP for this
         offering.
        :paramtype service_account_email_address: str
        :keyword workload_identity_provider_id: The GCP workload identity provider id for this
         offering.
        :paramtype workload_identity_provider_id: str
        """
        super().__init__(**kwargs)
        self.service_account_email_address = service_account_email_address
        self.workload_identity_provider_id = workload_identity_provider_id


class DefenderForDevOpsAzureDevOpsOffering(CloudOffering):
    """The Defender for DevOps for Azure DevOps offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForDevOpsAzureDevOps"


class DefenderForDevOpsGithubOffering(CloudOffering):
    """The Defender for DevOps for Github offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForDevOpsGithub"


class DefenderForDevOpsGitLabOffering(CloudOffering):
    """The Defender for DevOps for Gitlab offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForDevOpsGitLab"


class DefenderForServersAwsOffering(CloudOffering):
    """The Defender for Servers AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar defender_for_servers: The Defender for servers connection configuration.
    :vartype defender_for_servers:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingDefenderForServers
    :ivar arc_auto_provisioning: The ARC autoprovisioning configuration.
    :vartype arc_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingArcAutoProvisioning
    :ivar va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration.
    :vartype va_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVaAutoProvisioning
    :ivar mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning
     configuration.
    :vartype mde_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingMdeAutoProvisioning
    :ivar sub_plan: configuration for the servers offering subPlan.
    :vartype sub_plan:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingSubPlan
    :ivar vm_scanners: The Microsoft Defender for Server VM scanning configuration.
    :vartype vm_scanners:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVmScanners
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "defender_for_servers": {
            "key": "defenderForServers",
            "type": "DefenderForServersAwsOfferingDefenderForServers",
        },
        "arc_auto_provisioning": {
            "key": "arcAutoProvisioning",
            "type": "DefenderForServersAwsOfferingArcAutoProvisioning",
        },
        "va_auto_provisioning": {
            "key": "vaAutoProvisioning",
            "type": "DefenderForServersAwsOfferingVaAutoProvisioning",
        },
        "mde_auto_provisioning": {
            "key": "mdeAutoProvisioning",
            "type": "DefenderForServersAwsOfferingMdeAutoProvisioning",
        },
        "sub_plan": {"key": "subPlan", "type": "DefenderForServersAwsOfferingSubPlan"},
        "vm_scanners": {"key": "vmScanners", "type": "DefenderForServersAwsOfferingVmScanners"},
    }

    def __init__(
        self,
        *,
        defender_for_servers: Optional["_models.DefenderForServersAwsOfferingDefenderForServers"] = None,
        arc_auto_provisioning: Optional["_models.DefenderForServersAwsOfferingArcAutoProvisioning"] = None,
        va_auto_provisioning: Optional["_models.DefenderForServersAwsOfferingVaAutoProvisioning"] = None,
        mde_auto_provisioning: Optional["_models.DefenderForServersAwsOfferingMdeAutoProvisioning"] = None,
        sub_plan: Optional["_models.DefenderForServersAwsOfferingSubPlan"] = None,
        vm_scanners: Optional["_models.DefenderForServersAwsOfferingVmScanners"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword defender_for_servers: The Defender for servers connection configuration.
        :paramtype defender_for_servers:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingDefenderForServers
        :keyword arc_auto_provisioning: The ARC autoprovisioning configuration.
        :paramtype arc_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingArcAutoProvisioning
        :keyword va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration.
        :paramtype va_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVaAutoProvisioning
        :keyword mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning
         configuration.
        :paramtype mde_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingMdeAutoProvisioning
        :keyword sub_plan: configuration for the servers offering subPlan.
        :paramtype sub_plan:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingSubPlan
        :keyword vm_scanners: The Microsoft Defender for Server VM scanning configuration.
        :paramtype vm_scanners:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVmScanners
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForServersAws"
        self.defender_for_servers = defender_for_servers
        self.arc_auto_provisioning = arc_auto_provisioning
        self.va_auto_provisioning = va_auto_provisioning
        self.mde_auto_provisioning = mde_auto_provisioning
        self.sub_plan = sub_plan
        self.vm_scanners = vm_scanners


class DefenderForServersAwsOfferingArcAutoProvisioning(_serialization.Model):
    """The ARC autoprovisioning configuration.

    :ivar enabled: Is arc auto provisioning enabled.
    :vartype enabled: bool
    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    :ivar configuration: Configuration for servers Arc auto provisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingArcAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderForServersAwsOfferingArcAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        cloud_role_arn: Optional[str] = None,
        configuration: Optional["_models.DefenderForServersAwsOfferingArcAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is arc auto provisioning enabled.
        :paramtype enabled: bool
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        :keyword configuration: Configuration for servers Arc auto provisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingArcAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.cloud_role_arn = cloud_role_arn
        self.configuration = configuration


class DefenderForServersAwsOfferingArcAutoProvisioningConfiguration(_serialization.Model):
    """Configuration for servers Arc auto provisioning.

    :ivar proxy: Optional HTTP proxy endpoint to use for the Arc agent.
    :vartype proxy: str
    :ivar private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
    :vartype private_link_scope: str
    """

    _attribute_map = {
        "proxy": {"key": "proxy", "type": "str"},
        "private_link_scope": {"key": "privateLinkScope", "type": "str"},
    }

    def __init__(self, *, proxy: Optional[str] = None, private_link_scope: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword proxy: Optional HTTP proxy endpoint to use for the Arc agent.
        :paramtype proxy: str
        :keyword private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
        :paramtype private_link_scope: str
        """
        super().__init__(**kwargs)
        self.proxy = proxy
        self.private_link_scope = private_link_scope


class DefenderForServersAwsOfferingDefenderForServers(_serialization.Model):
    """The Defender for servers connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class DefenderForServersAwsOfferingMdeAutoProvisioning(_serialization.Model):
    """The Microsoft Defender for Endpoint autoprovisioning configuration.

    :ivar enabled: Is Microsoft Defender for Endpoint auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Microsoft Defender for Endpoint autoprovisioning.
    :vartype configuration: JSON
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "object"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, configuration: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is Microsoft Defender for Endpoint auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Microsoft Defender for Endpoint autoprovisioning.
        :paramtype configuration: JSON
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersAwsOfferingSubPlan(_serialization.Model):
    """configuration for the servers offering subPlan.

    :ivar type: The available sub plans. Known values are: "P1" and "P2".
    :vartype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.SubPlan
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Optional[Union[str, "_models.SubPlan"]] = None, **kwargs: Any) -> None:
        """
        :keyword type: The available sub plans. Known values are: "P1" and "P2".
        :paramtype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.SubPlan
        """
        super().__init__(**kwargs)
        self.type = type


class DefenderForServersAwsOfferingVaAutoProvisioning(_serialization.Model):
    """The Vulnerability Assessment autoprovisioning configuration.

    :ivar enabled: Is Vulnerability Assessment auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Vulnerability Assessment autoprovisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVaAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderForServersAwsOfferingVaAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForServersAwsOfferingVaAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is Vulnerability Assessment auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Vulnerability Assessment autoprovisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVaAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersAwsOfferingVaAutoProvisioningConfiguration(_serialization.Model):
    """configuration for Vulnerability Assessment autoprovisioning.

    :ivar type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or
     'Qualys'. Known values are: "Qualys" and "TVM".
    :vartype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.Type
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Optional[Union[str, "_models.Type"]] = None, **kwargs: Any) -> None:
        """
        :keyword type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or
         'Qualys'. Known values are: "Qualys" and "TVM".
        :paramtype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.Type
        """
        super().__init__(**kwargs)
        self.type = type


class DefenderForServersAwsOfferingVmScanners(_serialization.Model):
    """The Microsoft Defender for Server VM scanning configuration.

    :ivar enabled: Is Microsoft Defender for Server VM scanning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Microsoft Defender for Server VM scanning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVmScannersConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "DefenderForServersAwsOfferingVmScannersConfiguration"},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForServersAwsOfferingVmScannersConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is Microsoft Defender for Server VM scanning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Microsoft Defender for Server VM scanning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersAwsOfferingVmScannersConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersAwsOfferingVmScannersConfiguration(_serialization.Model):
    """configuration for Microsoft Defender for Server VM scanning.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    :ivar scanning_mode: The scanning mode for the VM scan. "Default"
    :vartype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
    :ivar exclusion_tags: VM tags that indicates that VM should not be scanned.
    :vartype exclusion_tags: dict[str, str]
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
        "scanning_mode": {"key": "scanningMode", "type": "str"},
        "exclusion_tags": {"key": "exclusionTags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        cloud_role_arn: Optional[str] = None,
        scanning_mode: Optional[Union[str, "_models.ScanningMode"]] = None,
        exclusion_tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        :keyword scanning_mode: The scanning mode for the VM scan. "Default"
        :paramtype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
        :keyword exclusion_tags: VM tags that indicates that VM should not be scanned.
        :paramtype exclusion_tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn
        self.scanning_mode = scanning_mode
        self.exclusion_tags = exclusion_tags


class DefenderForServersGcpOffering(CloudOffering):
    """The Defender for Servers GCP offering configurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar defender_for_servers: The Defender for servers connection configuration.
    :vartype defender_for_servers:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingDefenderForServers
    :ivar arc_auto_provisioning: The ARC autoprovisioning configuration.
    :vartype arc_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingArcAutoProvisioning
    :ivar va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration.
    :vartype va_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVaAutoProvisioning
    :ivar mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning
     configuration.
    :vartype mde_auto_provisioning:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingMdeAutoProvisioning
    :ivar sub_plan: configuration for the servers offering subPlan.
    :vartype sub_plan:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingSubPlan
    :ivar vm_scanners: The Microsoft Defender for Server VM scanning configuration.
    :vartype vm_scanners:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVmScanners
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "defender_for_servers": {
            "key": "defenderForServers",
            "type": "DefenderForServersGcpOfferingDefenderForServers",
        },
        "arc_auto_provisioning": {
            "key": "arcAutoProvisioning",
            "type": "DefenderForServersGcpOfferingArcAutoProvisioning",
        },
        "va_auto_provisioning": {
            "key": "vaAutoProvisioning",
            "type": "DefenderForServersGcpOfferingVaAutoProvisioning",
        },
        "mde_auto_provisioning": {
            "key": "mdeAutoProvisioning",
            "type": "DefenderForServersGcpOfferingMdeAutoProvisioning",
        },
        "sub_plan": {"key": "subPlan", "type": "DefenderForServersGcpOfferingSubPlan"},
        "vm_scanners": {"key": "vmScanners", "type": "DefenderForServersGcpOfferingVmScanners"},
    }

    def __init__(
        self,
        *,
        defender_for_servers: Optional["_models.DefenderForServersGcpOfferingDefenderForServers"] = None,
        arc_auto_provisioning: Optional["_models.DefenderForServersGcpOfferingArcAutoProvisioning"] = None,
        va_auto_provisioning: Optional["_models.DefenderForServersGcpOfferingVaAutoProvisioning"] = None,
        mde_auto_provisioning: Optional["_models.DefenderForServersGcpOfferingMdeAutoProvisioning"] = None,
        sub_plan: Optional["_models.DefenderForServersGcpOfferingSubPlan"] = None,
        vm_scanners: Optional["_models.DefenderForServersGcpOfferingVmScanners"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword defender_for_servers: The Defender for servers connection configuration.
        :paramtype defender_for_servers:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingDefenderForServers
        :keyword arc_auto_provisioning: The ARC autoprovisioning configuration.
        :paramtype arc_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingArcAutoProvisioning
        :keyword va_auto_provisioning: The Vulnerability Assessment autoprovisioning configuration.
        :paramtype va_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVaAutoProvisioning
        :keyword mde_auto_provisioning: The Microsoft Defender for Endpoint autoprovisioning
         configuration.
        :paramtype mde_auto_provisioning:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingMdeAutoProvisioning
        :keyword sub_plan: configuration for the servers offering subPlan.
        :paramtype sub_plan:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingSubPlan
        :keyword vm_scanners: The Microsoft Defender for Server VM scanning configuration.
        :paramtype vm_scanners:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVmScanners
        """
        super().__init__(**kwargs)
        self.offering_type: str = "DefenderForServersGcp"
        self.defender_for_servers = defender_for_servers
        self.arc_auto_provisioning = arc_auto_provisioning
        self.va_auto_provisioning = va_auto_provisioning
        self.mde_auto_provisioning = mde_auto_provisioning
        self.sub_plan = sub_plan
        self.vm_scanners = vm_scanners


class DefenderForServersGcpOfferingArcAutoProvisioning(_serialization.Model):
    """The ARC autoprovisioning configuration.

    :ivar enabled: Is arc auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: Configuration for servers Arc auto provisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingArcAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderForServersGcpOfferingArcAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForServersGcpOfferingArcAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is arc auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: Configuration for servers Arc auto provisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingArcAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersGcpOfferingArcAutoProvisioningConfiguration(_serialization.Model):
    """Configuration for servers Arc auto provisioning.

    :ivar proxy: Optional http proxy endpoint to use for the Arc agent.
    :vartype proxy: str
    :ivar private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
    :vartype private_link_scope: str
    """

    _attribute_map = {
        "proxy": {"key": "proxy", "type": "str"},
        "private_link_scope": {"key": "privateLinkScope", "type": "str"},
    }

    def __init__(self, *, proxy: Optional[str] = None, private_link_scope: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword proxy: Optional http proxy endpoint to use for the Arc agent.
        :paramtype proxy: str
        :keyword private_link_scope: Optional Arc private link scope resource id to link the Arc agent.
        :paramtype private_link_scope: str
        """
        super().__init__(**kwargs)
        self.proxy = proxy
        self.private_link_scope = private_link_scope


class DefenderForServersGcpOfferingDefenderForServers(_serialization.Model):
    """The Defender for servers connection configuration.

    :ivar workload_identity_provider_id: The workload identity provider id in GCP for this feature.
    :vartype workload_identity_provider_id: str
    :ivar service_account_email_address: The service account email address in GCP for this feature.
    :vartype service_account_email_address: str
    """

    _attribute_map = {
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
    }

    def __init__(
        self,
        *,
        workload_identity_provider_id: Optional[str] = None,
        service_account_email_address: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workload_identity_provider_id: The workload identity provider id in GCP for this
         feature.
        :paramtype workload_identity_provider_id: str
        :keyword service_account_email_address: The service account email address in GCP for this
         feature.
        :paramtype service_account_email_address: str
        """
        super().__init__(**kwargs)
        self.workload_identity_provider_id = workload_identity_provider_id
        self.service_account_email_address = service_account_email_address


class DefenderForServersGcpOfferingMdeAutoProvisioning(_serialization.Model):
    """The Microsoft Defender for Endpoint autoprovisioning configuration.

    :ivar enabled: Is Microsoft Defender for Endpoint auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Microsoft Defender for Endpoint autoprovisioning.
    :vartype configuration: JSON
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "object"},
    }

    def __init__(self, *, enabled: Optional[bool] = None, configuration: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword enabled: Is Microsoft Defender for Endpoint auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Microsoft Defender for Endpoint autoprovisioning.
        :paramtype configuration: JSON
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersGcpOfferingSubPlan(_serialization.Model):
    """configuration for the servers offering subPlan.

    :ivar type: The available sub plans. Known values are: "P1" and "P2".
    :vartype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.SubPlan
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Optional[Union[str, "_models.SubPlan"]] = None, **kwargs: Any) -> None:
        """
        :keyword type: The available sub plans. Known values are: "P1" and "P2".
        :paramtype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.SubPlan
        """
        super().__init__(**kwargs)
        self.type = type


class DefenderForServersGcpOfferingVaAutoProvisioning(_serialization.Model):
    """The Vulnerability Assessment autoprovisioning configuration.

    :ivar enabled: Is Vulnerability Assessment auto provisioning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Vulnerability Assessment autoprovisioning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVaAutoProvisioningConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {
            "key": "configuration",
            "type": "DefenderForServersGcpOfferingVaAutoProvisioningConfiguration",
        },
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForServersGcpOfferingVaAutoProvisioningConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is Vulnerability Assessment auto provisioning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Vulnerability Assessment autoprovisioning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVaAutoProvisioningConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersGcpOfferingVaAutoProvisioningConfiguration(_serialization.Model):
    """configuration for Vulnerability Assessment autoprovisioning.

    :ivar type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or
     'Qualys'. Known values are: "Qualys" and "TVM".
    :vartype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.Type
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Optional[Union[str, "_models.Type"]] = None, **kwargs: Any) -> None:
        """
        :keyword type: The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or
         'Qualys'. Known values are: "Qualys" and "TVM".
        :paramtype type: str or ~azure.mgmt.security.v2023_02_01_preview.models.Type
        """
        super().__init__(**kwargs)
        self.type = type


class DefenderForServersGcpOfferingVmScanners(_serialization.Model):
    """The Microsoft Defender for Server VM scanning configuration.

    :ivar enabled: Is Microsoft Defender for Server VM scanning enabled.
    :vartype enabled: bool
    :ivar configuration: configuration for Microsoft Defender for Server VM scanning.
    :vartype configuration:
     ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVmScannersConfiguration
    """

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "DefenderForServersGcpOfferingVmScannersConfiguration"},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        configuration: Optional["_models.DefenderForServersGcpOfferingVmScannersConfiguration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: Is Microsoft Defender for Server VM scanning enabled.
        :paramtype enabled: bool
        :keyword configuration: configuration for Microsoft Defender for Server VM scanning.
        :paramtype configuration:
         ~azure.mgmt.security.v2023_02_01_preview.models.DefenderForServersGcpOfferingVmScannersConfiguration
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class DefenderForServersGcpOfferingVmScannersConfiguration(_serialization.Model):
    """configuration for Microsoft Defender for Server VM scanning.

    :ivar scanning_mode: The scanning mode for the VM scan. "Default"
    :vartype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
    :ivar exclusion_tags: VM tags that indicates that VM should not be scanned.
    :vartype exclusion_tags: dict[str, str]
    """

    _attribute_map = {
        "scanning_mode": {"key": "scanningMode", "type": "str"},
        "exclusion_tags": {"key": "exclusionTags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        scanning_mode: Optional[Union[str, "_models.ScanningMode"]] = None,
        exclusion_tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword scanning_mode: The scanning mode for the VM scan. "Default"
        :paramtype scanning_mode: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanningMode
        :keyword exclusion_tags: VM tags that indicates that VM should not be scanned.
        :paramtype exclusion_tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.scanning_mode = scanning_mode
        self.exclusion_tags = exclusion_tags


class EnvironmentDetails(_serialization.Model):
    """The environment details of the resource.

    :ivar native_resource_id: The native resource id of the resource (in case of Azure - the
     resource Id, in case of MC - the native resource id).
    :vartype native_resource_id: str
    :ivar environment_hierarchy_id: The hierarchy id of the connector (in case of Azure - the
     subscription Id, in case of MC - the hierarchyId id).
    :vartype environment_hierarchy_id: str
    :ivar organizational_hierarchy_id: The organizational hierarchy id of the connector (in case of
     Azure - the subscription Id, in case of MC - the organizational hierarchyId id).
    :vartype organizational_hierarchy_id: str
    :ivar subscription_id: The subscription Id.
    :vartype subscription_id: str
    :ivar tenant_id: The tenant Id.
    :vartype tenant_id: str
    """

    _attribute_map = {
        "native_resource_id": {"key": "nativeResourceId", "type": "str"},
        "environment_hierarchy_id": {"key": "environmentHierarchyId", "type": "str"},
        "organizational_hierarchy_id": {"key": "organizationalHierarchyId", "type": "str"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
    }

    def __init__(
        self,
        *,
        native_resource_id: Optional[str] = None,
        environment_hierarchy_id: Optional[str] = None,
        organizational_hierarchy_id: Optional[str] = None,
        subscription_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword native_resource_id: The native resource id of the resource (in case of Azure - the
         resource Id, in case of MC - the native resource id).
        :paramtype native_resource_id: str
        :keyword environment_hierarchy_id: The hierarchy id of the connector (in case of Azure - the
         subscription Id, in case of MC - the hierarchyId id).
        :paramtype environment_hierarchy_id: str
        :keyword organizational_hierarchy_id: The organizational hierarchy id of the connector (in case
         of Azure - the subscription Id, in case of MC - the organizational hierarchyId id).
        :paramtype organizational_hierarchy_id: str
        :keyword subscription_id: The subscription Id.
        :paramtype subscription_id: str
        :keyword tenant_id: The tenant Id.
        :paramtype tenant_id: str
        """
        super().__init__(**kwargs)
        self.native_resource_id = native_resource_id
        self.environment_hierarchy_id = environment_hierarchy_id
        self.organizational_hierarchy_id = organizational_hierarchy_id
        self.subscription_id = subscription_id
        self.tenant_id = tenant_id


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.security.v2023_02_01_preview.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.security.v2023_02_01_preview.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.security.v2023_02_01_preview.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.security.v2023_02_01_preview.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ETag(_serialization.Model):
    """Entity tag is used for comparing two or more entities from the same requested resource.

    :ivar etag: Entity tag is used for comparing two or more entities from the same requested
     resource.
    :vartype etag: str
    """

    _attribute_map = {
        "etag": {"key": "etag", "type": "str"},
    }

    def __init__(self, *, etag: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword etag: Entity tag is used for comparing two or more entities from the same requested
         resource.
        :paramtype etag: str
        """
        super().__init__(**kwargs)
        self.etag = etag


class GcpOrganizationalData(_serialization.Model):
    """The gcpOrganization data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    GcpOrganizationalDataMember, GcpOrganizationalDataOrganization

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    """

    _validation = {
        "organization_membership_type": {"required": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
    }

    _subtype_map = {
        "organization_membership_type": {
            "Member": "GcpOrganizationalDataMember",
            "Organization": "GcpOrganizationalDataOrganization",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.organization_membership_type: Optional[str] = None


class GcpOrganizationalDataMember(GcpOrganizationalData):
    """The gcpOrganization data for the member account.

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    :ivar parent_hierarchy_id: If the multi cloud account is not of membership type organization,
     this will be the ID of the project's parent.
    :vartype parent_hierarchy_id: str
    :ivar management_project_number: The GCP management project number from organizational
     onboarding.
    :vartype management_project_number: str
    """

    _validation = {
        "organization_membership_type": {"required": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
        "parent_hierarchy_id": {"key": "parentHierarchyId", "type": "str"},
        "management_project_number": {"key": "managementProjectNumber", "type": "str"},
    }

    def __init__(
        self,
        *,
        parent_hierarchy_id: Optional[str] = None,
        management_project_number: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword parent_hierarchy_id: If the multi cloud account is not of membership type
         organization, this will be the ID of the project's parent.
        :paramtype parent_hierarchy_id: str
        :keyword management_project_number: The GCP management project number from organizational
         onboarding.
        :paramtype management_project_number: str
        """
        super().__init__(**kwargs)
        self.organization_membership_type: str = "Member"
        self.parent_hierarchy_id = parent_hierarchy_id
        self.management_project_number = management_project_number


class GcpOrganizationalDataOrganization(GcpOrganizationalData):
    """The gcpOrganization data for the parent account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar organization_membership_type: The multi cloud account's membership type in the
     organization. Required. Known values are: "Member" and "Organization".
    :vartype organization_membership_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.OrganizationMembershipType
    :ivar excluded_project_numbers: If the multi cloud account is of membership type organization,
     list of accounts excluded from offering.
    :vartype excluded_project_numbers: list[str]
    :ivar service_account_email_address: The service account email address which represents the
     organization level permissions container.
    :vartype service_account_email_address: str
    :ivar workload_identity_provider_id: The GCP workload identity provider id which represents the
     permissions required to auto provision security connectors.
    :vartype workload_identity_provider_id: str
    :ivar organization_name: GCP organization name.
    :vartype organization_name: str
    """

    _validation = {
        "organization_membership_type": {"required": True},
        "organization_name": {"readonly": True},
    }

    _attribute_map = {
        "organization_membership_type": {"key": "organizationMembershipType", "type": "str"},
        "excluded_project_numbers": {"key": "excludedProjectNumbers", "type": "[str]"},
        "service_account_email_address": {"key": "serviceAccountEmailAddress", "type": "str"},
        "workload_identity_provider_id": {"key": "workloadIdentityProviderId", "type": "str"},
        "organization_name": {"key": "organizationName", "type": "str"},
    }

    def __init__(
        self,
        *,
        excluded_project_numbers: Optional[List[str]] = None,
        service_account_email_address: Optional[str] = None,
        workload_identity_provider_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword excluded_project_numbers: If the multi cloud account is of membership type
         organization, list of accounts excluded from offering.
        :paramtype excluded_project_numbers: list[str]
        :keyword service_account_email_address: The service account email address which represents the
         organization level permissions container.
        :paramtype service_account_email_address: str
        :keyword workload_identity_provider_id: The GCP workload identity provider id which represents
         the permissions required to auto provision security connectors.
        :paramtype workload_identity_provider_id: str
        """
        super().__init__(**kwargs)
        self.organization_membership_type: str = "Organization"
        self.excluded_project_numbers = excluded_project_numbers
        self.service_account_email_address = service_account_email_address
        self.workload_identity_provider_id = workload_identity_provider_id
        self.organization_name = None


class GcpProjectDetails(_serialization.Model):
    """The details about the project represented by the security connector.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar project_number: The unique GCP Project number.
    :vartype project_number: str
    :ivar project_id: The GCP Project id.
    :vartype project_id: str
    :ivar workload_identity_pool_id: The GCP workload identity federation pool id.
    :vartype workload_identity_pool_id: str
    :ivar project_name: GCP project name.
    :vartype project_name: str
    """

    _validation = {
        "workload_identity_pool_id": {"readonly": True},
        "project_name": {"readonly": True},
    }

    _attribute_map = {
        "project_number": {"key": "projectNumber", "type": "str"},
        "project_id": {"key": "projectId", "type": "str"},
        "workload_identity_pool_id": {"key": "workloadIdentityPoolId", "type": "str"},
        "project_name": {"key": "projectName", "type": "str"},
    }

    def __init__(
        self, *, project_number: Optional[str] = None, project_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword project_number: The unique GCP Project number.
        :paramtype project_number: str
        :keyword project_id: The GCP Project id.
        :paramtype project_id: str
        """
        super().__init__(**kwargs)
        self.project_number = project_number
        self.project_id = project_id
        self.workload_identity_pool_id = None
        self.project_name = None


class GcpProjectEnvironmentData(EnvironmentData):
    """The GCP project connector environment data.

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    :ivar organizational_data: The Gcp project's organizational data.
    :vartype organizational_data:
     ~azure.mgmt.security.v2023_02_01_preview.models.GcpOrganizationalData
    :ivar project_details: The Gcp project's details.
    :vartype project_details: ~azure.mgmt.security.v2023_02_01_preview.models.GcpProjectDetails
    """

    _validation = {
        "environment_type": {"required": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
        "organizational_data": {"key": "organizationalData", "type": "GcpOrganizationalData"},
        "project_details": {"key": "projectDetails", "type": "GcpProjectDetails"},
    }

    def __init__(
        self,
        *,
        organizational_data: Optional["_models.GcpOrganizationalData"] = None,
        project_details: Optional["_models.GcpProjectDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword organizational_data: The Gcp project's organizational data.
        :paramtype organizational_data:
         ~azure.mgmt.security.v2023_02_01_preview.models.GcpOrganizationalData
        :keyword project_details: The Gcp project's details.
        :paramtype project_details: ~azure.mgmt.security.v2023_02_01_preview.models.GcpProjectDetails
        """
        super().__init__(**kwargs)
        self.environment_type: str = "GcpProject"
        self.organizational_data = organizational_data
        self.project_details = project_details


class GithubScopeEnvironmentData(EnvironmentData):
    """The github scope connector's environment data.

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    """

    _validation = {
        "environment_type": {"required": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.environment_type: str = "GithubScope"


class GitlabScopeEnvironmentData(EnvironmentData):
    """The gitlab scope connector's environment data.

    All required parameters must be populated in order to send to Azure.

    :ivar environment_type: The type of the environment data. Required. Known values are:
     "AwsAccount", "GcpProject", "GithubScope", "AzureDevOpsScope", and "GitlabScope".
    :vartype environment_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentType
    """

    _validation = {
        "environment_type": {"required": True},
    }

    _attribute_map = {
        "environment_type": {"key": "environmentType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.environment_type: str = "GitlabScope"


class HealthDataClassification(_serialization.Model):
    """The classification of the health report.

    :ivar component: The component describes the name of the agent/service that scans the issue.
    :vartype component: str
    :ivar scenario: The scenario describes the health scenario issue of the component.
    :vartype scenario: str
    :ivar scope: The resource scope of the health report. Known values are: "Connectors",
     "Clusters", "VirtualMachines", and "Unknown".
    :vartype scope: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScopeName
    """

    _attribute_map = {
        "component": {"key": "component", "type": "str"},
        "scenario": {"key": "scenario", "type": "str"},
        "scope": {"key": "scope", "type": "str"},
    }

    def __init__(
        self,
        *,
        component: Optional[str] = None,
        scenario: Optional[str] = None,
        scope: Optional[Union[str, "_models.ScopeName"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword component: The component describes the name of the agent/service that scans the issue.
        :paramtype component: str
        :keyword scenario: The scenario describes the health scenario issue of the component.
        :paramtype scenario: str
        :keyword scope: The resource scope of the health report. Known values are: "Connectors",
         "Clusters", "VirtualMachines", and "Unknown".
        :paramtype scope: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScopeName
        """
        super().__init__(**kwargs)
        self.component = component
        self.scenario = scenario
        self.scope = scope


class Resource(_serialization.Model):
    """Describes an Azure resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class HealthReport(Resource):
    """The health report resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar resource_details: The resource details of the health report.
    :vartype resource_details: ~azure.mgmt.security.v2023_02_01_preview.models.ResourceDetails
    :ivar environment_details: The environment details of the resource.
    :vartype environment_details:
     ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentDetails
    :ivar health_data_classification: The classification of the health report.
    :vartype health_data_classification:
     ~azure.mgmt.security.v2023_02_01_preview.models.HealthDataClassification
    :ivar status: The status of the health report.
    :vartype status: ~azure.mgmt.security.v2023_02_01_preview.models.Status
    :ivar affected_defenders_plans: The affected defenders plans by unhealthy report.
    :vartype affected_defenders_plans: list[str]
    :ivar issues: A collection of the issues in the report.
    :vartype issues: list[~azure.mgmt.security.v2023_02_01_preview.models.Issue]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "resource_details": {"key": "properties.resourceDetails", "type": "ResourceDetails"},
        "environment_details": {"key": "properties.environmentDetails", "type": "EnvironmentDetails"},
        "health_data_classification": {
            "key": "properties.healthDataClassification",
            "type": "HealthDataClassification",
        },
        "status": {"key": "properties.status", "type": "Status"},
        "affected_defenders_plans": {"key": "properties.affectedDefendersPlans", "type": "[str]"},
        "issues": {"key": "properties.issues", "type": "[Issue]"},
    }

    def __init__(
        self,
        *,
        resource_details: Optional["_models.ResourceDetails"] = None,
        environment_details: Optional["_models.EnvironmentDetails"] = None,
        health_data_classification: Optional["_models.HealthDataClassification"] = None,
        status: Optional["_models.Status"] = None,
        affected_defenders_plans: Optional[List[str]] = None,
        issues: Optional[List["_models.Issue"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_details: The resource details of the health report.
        :paramtype resource_details: ~azure.mgmt.security.v2023_02_01_preview.models.ResourceDetails
        :keyword environment_details: The environment details of the resource.
        :paramtype environment_details:
         ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentDetails
        :keyword health_data_classification: The classification of the health report.
        :paramtype health_data_classification:
         ~azure.mgmt.security.v2023_02_01_preview.models.HealthDataClassification
        :keyword status: The status of the health report.
        :paramtype status: ~azure.mgmt.security.v2023_02_01_preview.models.Status
        :keyword affected_defenders_plans: The affected defenders plans by unhealthy report.
        :paramtype affected_defenders_plans: list[str]
        :keyword issues: A collection of the issues in the report.
        :paramtype issues: list[~azure.mgmt.security.v2023_02_01_preview.models.Issue]
        """
        super().__init__(**kwargs)
        self.resource_details = resource_details
        self.environment_details = environment_details
        self.health_data_classification = health_data_classification
        self.status = status
        self.affected_defenders_plans = affected_defenders_plans
        self.issues = issues


class HealthReportsList(_serialization.Model):
    """Page of health reports list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Collection of health reports in this page.
    :vartype value: list[~azure.mgmt.security.v2023_02_01_preview.models.HealthReport]
    :ivar next_link: The URI to fetch the next page.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[HealthReport]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class InformationProtectionAwsOffering(CloudOffering):
    """The information protection for AWS offering.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar offering_type: The type of the security offering. Required. Known values are:
     "CspmMonitorAws", "DefenderForContainersAws", "DefenderForServersAws",
     "DefenderForDatabasesAws", "InformationProtectionAws", "CspmMonitorGcp", "CspmMonitorGithub",
     "CspmMonitorAzureDevOps", "DefenderForServersGcp", "DefenderForContainersGcp",
     "DefenderForDatabasesGcp", "DefenderCspmAws", "DefenderCspmGcp", "DefenderForDevOpsGithub",
     "DefenderForDevOpsAzureDevOps", "CspmMonitorGitLab", and "DefenderForDevOpsGitLab".
    :vartype offering_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.OfferingType
    :ivar description: The offering description.
    :vartype description: str
    :ivar information_protection: The native cloud connection configuration.
    :vartype information_protection:
     ~azure.mgmt.security.v2023_02_01_preview.models.InformationProtectionAwsOfferingInformationProtection
    """

    _validation = {
        "offering_type": {"required": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "offering_type": {"key": "offeringType", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "information_protection": {
            "key": "informationProtection",
            "type": "InformationProtectionAwsOfferingInformationProtection",
        },
    }

    def __init__(
        self,
        *,
        information_protection: Optional["_models.InformationProtectionAwsOfferingInformationProtection"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword information_protection: The native cloud connection configuration.
        :paramtype information_protection:
         ~azure.mgmt.security.v2023_02_01_preview.models.InformationProtectionAwsOfferingInformationProtection
        """
        super().__init__(**kwargs)
        self.offering_type: str = "InformationProtectionAws"
        self.information_protection = information_protection


class InformationProtectionAwsOfferingInformationProtection(_serialization.Model):
    """The native cloud connection configuration.

    :ivar cloud_role_arn: The cloud role ARN in AWS for this feature.
    :vartype cloud_role_arn: str
    """

    _attribute_map = {
        "cloud_role_arn": {"key": "cloudRoleArn", "type": "str"},
    }

    def __init__(self, *, cloud_role_arn: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cloud_role_arn: The cloud role ARN in AWS for this feature.
        :paramtype cloud_role_arn: str
        """
        super().__init__(**kwargs)
        self.cloud_role_arn = cloud_role_arn


class Issue(_serialization.Model):
    """The issue that caused the resource to by unhealthy.

    All required parameters must be populated in order to send to Azure.

    :ivar issue_key: The unique issue key. Required.
    :vartype issue_key: str
    :ivar issue_name: The issue name.
    :vartype issue_name: str
    :ivar security_values: The affected security values that MDC offers that will be affected by
     the issue, for example: recommendations, alerts, etc.
    :vartype security_values: list[str]
    :ivar issue_description: The issue description.
    :vartype issue_description: str
    :ivar remediation_steps: Human readable description of what you should do to mitigate this
     health issue.
    :vartype remediation_steps: str
    :ivar remediation_script: The remediation script to solve this issue.
    :vartype remediation_script: str
    :ivar issue_additional_data: Additional data for the given issue. The additional data depends
     on the issue type.
    :vartype issue_additional_data: dict[str, str]
    """

    _validation = {
        "issue_key": {"required": True},
    }

    _attribute_map = {
        "issue_key": {"key": "issueKey", "type": "str"},
        "issue_name": {"key": "issueName", "type": "str"},
        "security_values": {"key": "securityValues", "type": "[str]"},
        "issue_description": {"key": "issueDescription", "type": "str"},
        "remediation_steps": {"key": "remediationSteps", "type": "str"},
        "remediation_script": {"key": "remediationScript", "type": "str"},
        "issue_additional_data": {"key": "issueAdditionalData", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        issue_key: str,
        issue_name: Optional[str] = None,
        security_values: Optional[List[str]] = None,
        issue_description: Optional[str] = None,
        remediation_steps: Optional[str] = None,
        remediation_script: Optional[str] = None,
        issue_additional_data: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword issue_key: The unique issue key. Required.
        :paramtype issue_key: str
        :keyword issue_name: The issue name.
        :paramtype issue_name: str
        :keyword security_values: The affected security values that MDC offers that will be affected by
         the issue, for example: recommendations, alerts, etc.
        :paramtype security_values: list[str]
        :keyword issue_description: The issue description.
        :paramtype issue_description: str
        :keyword remediation_steps: Human readable description of what you should do to mitigate this
         health issue.
        :paramtype remediation_steps: str
        :keyword remediation_script: The remediation script to solve this issue.
        :paramtype remediation_script: str
        :keyword issue_additional_data: Additional data for the given issue. The additional data
         depends on the issue type.
        :paramtype issue_additional_data: dict[str, str]
        """
        super().__init__(**kwargs)
        self.issue_key = issue_key
        self.issue_name = issue_name
        self.security_values = security_values
        self.issue_description = issue_description
        self.remediation_steps = remediation_steps
        self.remediation_script = remediation_script
        self.issue_additional_data = issue_additional_data


class Kind(_serialization.Model):
    """Describes an Azure resource with kind.

    :ivar kind: Kind of the resource.
    :vartype kind: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, kind: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword kind: Kind of the resource.
        :paramtype kind: str
        """
        super().__init__(**kwargs)
        self.kind = kind


class QueryCheck(_serialization.Model):
    """The rule query details.

    :ivar query: The rule query.
    :vartype query: str
    :ivar expected_result: Expected result.
    :vartype expected_result: list[list[str]]
    :ivar column_names: Column names of expected result.
    :vartype column_names: list[str]
    """

    _attribute_map = {
        "query": {"key": "query", "type": "str"},
        "expected_result": {"key": "expectedResult", "type": "[[str]]"},
        "column_names": {"key": "columnNames", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        query: Optional[str] = None,
        expected_result: Optional[List[List[str]]] = None,
        column_names: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword query: The rule query.
        :paramtype query: str
        :keyword expected_result: Expected result.
        :paramtype expected_result: list[list[str]]
        :keyword column_names: Column names of expected result.
        :paramtype column_names: list[str]
        """
        super().__init__(**kwargs)
        self.query = query
        self.expected_result = expected_result
        self.column_names = column_names


class Remediation(_serialization.Model):
    """Remediation details.

    :ivar description: Remediation description.
    :vartype description: str
    :ivar scripts: Remediation script.
    :vartype scripts: list[str]
    :ivar automated: Is remediation automated.
    :vartype automated: bool
    :ivar portal_link: Optional link to remediate in Azure Portal.
    :vartype portal_link: str
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "scripts": {"key": "scripts", "type": "[str]"},
        "automated": {"key": "automated", "type": "bool"},
        "portal_link": {"key": "portalLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        scripts: Optional[List[str]] = None,
        automated: Optional[bool] = None,
        portal_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword description: Remediation description.
        :paramtype description: str
        :keyword scripts: Remediation script.
        :paramtype scripts: list[str]
        :keyword automated: Is remediation automated.
        :paramtype automated: bool
        :keyword portal_link: Optional link to remediate in Azure Portal.
        :paramtype portal_link: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.scripts = scripts
        self.automated = automated
        self.portal_link = portal_link


class ResourceDetails(_serialization.Model):
    """The resource details of the health report.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar source: The status of the health report. Known values are: "Aws", "Gcp", and "Azure".
    :vartype source: str or ~azure.mgmt.security.v2023_02_01_preview.models.Source
    :ivar id: The azure id of the resource.
    :vartype id: str
    :ivar connector_id: The id of the connector.
    :vartype connector_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "connector_id": {"readonly": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "connector_id": {"key": "connectorId", "type": "str"},
    }

    def __init__(self, *, source: Optional[Union[str, "_models.Source"]] = None, **kwargs: Any) -> None:
        """
        :keyword source: The status of the health report. Known values are: "Aws", "Gcp", and "Azure".
        :paramtype source: str or ~azure.mgmt.security.v2023_02_01_preview.models.Source
        """
        super().__init__(**kwargs)
        self.source = source
        self.id = None
        self.connector_id = None


class RuleResults(Resource):
    """Rule results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: Rule results properties.
    :vartype properties: ~azure.mgmt.security.v2023_02_01_preview.models.RuleResultsProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "RuleResultsProperties"},
    }

    def __init__(self, *, properties: Optional["_models.RuleResultsProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: Rule results properties.
        :paramtype properties: ~azure.mgmt.security.v2023_02_01_preview.models.RuleResultsProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class RuleResultsInput(_serialization.Model):
    """Rule results input.

    :ivar latest_scan: Take results from latest scan.
    :vartype latest_scan: bool
    :ivar results: Expected results to be inserted into the baseline.
     Leave this field empty it LatestScan == true.
    :vartype results: list[list[str]]
    """

    _attribute_map = {
        "latest_scan": {"key": "latestScan", "type": "bool"},
        "results": {"key": "results", "type": "[[str]]"},
    }

    def __init__(
        self, *, latest_scan: Optional[bool] = None, results: Optional[List[List[str]]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword latest_scan: Take results from latest scan.
        :paramtype latest_scan: bool
        :keyword results: Expected results to be inserted into the baseline.
         Leave this field empty it LatestScan == true.
        :paramtype results: list[list[str]]
        """
        super().__init__(**kwargs)
        self.latest_scan = latest_scan
        self.results = results


class RuleResultsProperties(_serialization.Model):
    """Rule results properties.

    :ivar results: Expected results in the baseline.
    :vartype results: list[list[str]]
    """

    _attribute_map = {
        "results": {"key": "results", "type": "[[str]]"},
    }

    def __init__(self, *, results: Optional[List[List[str]]] = None, **kwargs: Any) -> None:
        """
        :keyword results: Expected results in the baseline.
        :paramtype results: list[list[str]]
        """
        super().__init__(**kwargs)
        self.results = results


class RulesResults(_serialization.Model):
    """A list of rules results.

    :ivar value: List of rule results.
    :vartype value: list[~azure.mgmt.security.v2023_02_01_preview.models.RuleResults]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[RuleResults]"},
    }

    def __init__(self, *, value: Optional[List["_models.RuleResults"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of rule results.
        :paramtype value: list[~azure.mgmt.security.v2023_02_01_preview.models.RuleResults]
        """
        super().__init__(**kwargs)
        self.value = value


class RulesResultsInput(_serialization.Model):
    """Rules results input.

    :ivar latest_scan: Take results from latest scan.
    :vartype latest_scan: bool
    :ivar results: Expected results to be inserted into the baseline.
     Leave this field empty it LatestScan == true.
    :vartype results: dict[str, list[list[str]]]
    """

    _attribute_map = {
        "latest_scan": {"key": "latestScan", "type": "bool"},
        "results": {"key": "results", "type": "{[[str]]}"},
    }

    def __init__(
        self, *, latest_scan: Optional[bool] = None, results: Optional[Dict[str, List[List[str]]]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword latest_scan: Take results from latest scan.
        :paramtype latest_scan: bool
        :keyword results: Expected results to be inserted into the baseline.
         Leave this field empty it LatestScan == true.
        :paramtype results: dict[str, list[list[str]]]
        """
        super().__init__(**kwargs)
        self.latest_scan = latest_scan
        self.results = results


class Scan(Resource):
    """A vulnerability assessment scan record.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: A vulnerability assessment scan record properties.
    :vartype properties: ~azure.mgmt.security.v2023_02_01_preview.models.ScanProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "ScanProperties"},
    }

    def __init__(self, *, properties: Optional["_models.ScanProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: A vulnerability assessment scan record properties.
        :paramtype properties: ~azure.mgmt.security.v2023_02_01_preview.models.ScanProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ScanProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """A vulnerability assessment scan record properties.

    :ivar trigger_type: The scan trigger type. Known values are: "OnDemand" and "Recurring".
    :vartype trigger_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanTriggerType
    :ivar state: The scan status. Known values are: "Failed", "FailedToRun", "InProgress", and
     "Passed".
    :vartype state: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanState
    :ivar server: The server name.
    :vartype server: str
    :ivar database: The database name.
    :vartype database: str
    :ivar sql_version: The SQL version.
    :vartype sql_version: str
    :ivar start_time: The scan start time (UTC).
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Scan results are valid until end time (UTC).
    :vartype end_time: ~datetime.datetime
    :ivar high_severity_failed_rules_count: The number of failed rules with high severity.
    :vartype high_severity_failed_rules_count: int
    :ivar medium_severity_failed_rules_count: The number of failed rules with medium severity.
    :vartype medium_severity_failed_rules_count: int
    :ivar low_severity_failed_rules_count: The number of failed rules with low severity.
    :vartype low_severity_failed_rules_count: int
    :ivar total_passed_rules_count: The number of total passed rules.
    :vartype total_passed_rules_count: int
    :ivar total_failed_rules_count: The number of total failed rules.
    :vartype total_failed_rules_count: int
    :ivar total_rules_count: The number of total rules assessed.
    :vartype total_rules_count: int
    :ivar is_baseline_applied: Baseline created for this database, and has one or more rules.
    :vartype is_baseline_applied: bool
    :ivar last_scan_time: Last scan time.
    :vartype last_scan_time: ~datetime.datetime
    """

    _attribute_map = {
        "trigger_type": {"key": "triggerType", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "server": {"key": "server", "type": "str"},
        "database": {"key": "database", "type": "str"},
        "sql_version": {"key": "sqlVersion", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "high_severity_failed_rules_count": {"key": "highSeverityFailedRulesCount", "type": "int"},
        "medium_severity_failed_rules_count": {"key": "mediumSeverityFailedRulesCount", "type": "int"},
        "low_severity_failed_rules_count": {"key": "lowSeverityFailedRulesCount", "type": "int"},
        "total_passed_rules_count": {"key": "totalPassedRulesCount", "type": "int"},
        "total_failed_rules_count": {"key": "totalFailedRulesCount", "type": "int"},
        "total_rules_count": {"key": "totalRulesCount", "type": "int"},
        "is_baseline_applied": {"key": "isBaselineApplied", "type": "bool"},
        "last_scan_time": {"key": "lastScanTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        trigger_type: Optional[Union[str, "_models.ScanTriggerType"]] = None,
        state: Optional[Union[str, "_models.ScanState"]] = None,
        server: Optional[str] = None,
        database: Optional[str] = None,
        sql_version: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        high_severity_failed_rules_count: Optional[int] = None,
        medium_severity_failed_rules_count: Optional[int] = None,
        low_severity_failed_rules_count: Optional[int] = None,
        total_passed_rules_count: Optional[int] = None,
        total_failed_rules_count: Optional[int] = None,
        total_rules_count: Optional[int] = None,
        is_baseline_applied: Optional[bool] = None,
        last_scan_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword trigger_type: The scan trigger type. Known values are: "OnDemand" and "Recurring".
        :paramtype trigger_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanTriggerType
        :keyword state: The scan status. Known values are: "Failed", "FailedToRun", "InProgress", and
         "Passed".
        :paramtype state: str or ~azure.mgmt.security.v2023_02_01_preview.models.ScanState
        :keyword server: The server name.
        :paramtype server: str
        :keyword database: The database name.
        :paramtype database: str
        :keyword sql_version: The SQL version.
        :paramtype sql_version: str
        :keyword start_time: The scan start time (UTC).
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Scan results are valid until end time (UTC).
        :paramtype end_time: ~datetime.datetime
        :keyword high_severity_failed_rules_count: The number of failed rules with high severity.
        :paramtype high_severity_failed_rules_count: int
        :keyword medium_severity_failed_rules_count: The number of failed rules with medium severity.
        :paramtype medium_severity_failed_rules_count: int
        :keyword low_severity_failed_rules_count: The number of failed rules with low severity.
        :paramtype low_severity_failed_rules_count: int
        :keyword total_passed_rules_count: The number of total passed rules.
        :paramtype total_passed_rules_count: int
        :keyword total_failed_rules_count: The number of total failed rules.
        :paramtype total_failed_rules_count: int
        :keyword total_rules_count: The number of total rules assessed.
        :paramtype total_rules_count: int
        :keyword is_baseline_applied: Baseline created for this database, and has one or more rules.
        :paramtype is_baseline_applied: bool
        :keyword last_scan_time: Last scan time.
        :paramtype last_scan_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.trigger_type = trigger_type
        self.state = state
        self.server = server
        self.database = database
        self.sql_version = sql_version
        self.start_time = start_time
        self.end_time = end_time
        self.high_severity_failed_rules_count = high_severity_failed_rules_count
        self.medium_severity_failed_rules_count = medium_severity_failed_rules_count
        self.low_severity_failed_rules_count = low_severity_failed_rules_count
        self.total_passed_rules_count = total_passed_rules_count
        self.total_failed_rules_count = total_failed_rules_count
        self.total_rules_count = total_rules_count
        self.is_baseline_applied = is_baseline_applied
        self.last_scan_time = last_scan_time


class ScanResult(Resource):
    """A vulnerability assessment scan result for a single rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: A vulnerability assessment scan result properties for a single rule.
    :vartype properties: ~azure.mgmt.security.v2023_02_01_preview.models.ScanResultProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "ScanResultProperties"},
    }

    def __init__(self, *, properties: Optional["_models.ScanResultProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: A vulnerability assessment scan result properties for a single rule.
        :paramtype properties: ~azure.mgmt.security.v2023_02_01_preview.models.ScanResultProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ScanResultProperties(_serialization.Model):
    """A vulnerability assessment scan result properties for a single rule.

    :ivar rule_id: The rule Id.
    :vartype rule_id: str
    :ivar status: The rule result status. Known values are: "NonFinding", "Finding", and
     "InternalError".
    :vartype status: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleStatus
    :ivar is_trimmed: Indicated whether the results specified here are trimmed.
    :vartype is_trimmed: bool
    :ivar query_results: The results of the query that was run.
    :vartype query_results: list[list[str]]
    :ivar remediation: Remediation details.
    :vartype remediation: ~azure.mgmt.security.v2023_02_01_preview.models.Remediation
    :ivar baseline_adjusted_result: The rule result adjusted with baseline.
    :vartype baseline_adjusted_result:
     ~azure.mgmt.security.v2023_02_01_preview.models.BaselineAdjustedResult
    :ivar rule_metadata: vulnerability assessment rule metadata details.
    :vartype rule_metadata: ~azure.mgmt.security.v2023_02_01_preview.models.VaRule
    """

    _attribute_map = {
        "rule_id": {"key": "ruleId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "is_trimmed": {"key": "isTrimmed", "type": "bool"},
        "query_results": {"key": "queryResults", "type": "[[str]]"},
        "remediation": {"key": "remediation", "type": "Remediation"},
        "baseline_adjusted_result": {"key": "baselineAdjustedResult", "type": "BaselineAdjustedResult"},
        "rule_metadata": {"key": "ruleMetadata", "type": "VaRule"},
    }

    def __init__(
        self,
        *,
        rule_id: Optional[str] = None,
        status: Optional[Union[str, "_models.RuleStatus"]] = None,
        is_trimmed: Optional[bool] = None,
        query_results: Optional[List[List[str]]] = None,
        remediation: Optional["_models.Remediation"] = None,
        baseline_adjusted_result: Optional["_models.BaselineAdjustedResult"] = None,
        rule_metadata: Optional["_models.VaRule"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword rule_id: The rule Id.
        :paramtype rule_id: str
        :keyword status: The rule result status. Known values are: "NonFinding", "Finding", and
         "InternalError".
        :paramtype status: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleStatus
        :keyword is_trimmed: Indicated whether the results specified here are trimmed.
        :paramtype is_trimmed: bool
        :keyword query_results: The results of the query that was run.
        :paramtype query_results: list[list[str]]
        :keyword remediation: Remediation details.
        :paramtype remediation: ~azure.mgmt.security.v2023_02_01_preview.models.Remediation
        :keyword baseline_adjusted_result: The rule result adjusted with baseline.
        :paramtype baseline_adjusted_result:
         ~azure.mgmt.security.v2023_02_01_preview.models.BaselineAdjustedResult
        :keyword rule_metadata: vulnerability assessment rule metadata details.
        :paramtype rule_metadata: ~azure.mgmt.security.v2023_02_01_preview.models.VaRule
        """
        super().__init__(**kwargs)
        self.rule_id = rule_id
        self.status = status
        self.is_trimmed = is_trimmed
        self.query_results = query_results
        self.remediation = remediation
        self.baseline_adjusted_result = baseline_adjusted_result
        self.rule_metadata = rule_metadata


class ScanResults(_serialization.Model):
    """A list of vulnerability assessment scan results.

    :ivar value: List of vulnerability assessment scan results.
    :vartype value: list[~azure.mgmt.security.v2023_02_01_preview.models.ScanResult]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[ScanResult]"},
    }

    def __init__(self, *, value: Optional[List["_models.ScanResult"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of vulnerability assessment scan results.
        :paramtype value: list[~azure.mgmt.security.v2023_02_01_preview.models.ScanResult]
        """
        super().__init__(**kwargs)
        self.value = value


class Scans(_serialization.Model):
    """A list of vulnerability assessment scan records.

    :ivar value: List of vulnerability assessment scan records.
    :vartype value: list[~azure.mgmt.security.v2023_02_01_preview.models.Scan]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Scan]"},
    }

    def __init__(self, *, value: Optional[List["_models.Scan"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of vulnerability assessment scan records.
        :paramtype value: list[~azure.mgmt.security.v2023_02_01_preview.models.Scan]
        """
        super().__init__(**kwargs)
        self.value = value


class Tags(_serialization.Model):
    """A list of key value pairs that describe the resource.

    :ivar tags: A list of key value pairs that describe the resource.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: A list of key value pairs that describe the resource.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class TrackedResource(Resource, AzureTrackedResourceLocation, Kind, ETag, Tags):
    """Describes an Azure tracked resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: A list of key value pairs that describe the resource.
    :vartype tags: dict[str, str]
    :ivar etag: Entity tag is used for comparing two or more entities from the same requested
     resource.
    :vartype etag: str
    :ivar kind: Kind of the resource.
    :vartype kind: str
    :ivar location: Location where the resource is stored.
    :vartype location: str
    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "etag": {"key": "etag", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        etag: Optional[str] = None,
        kind: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: A list of key value pairs that describe the resource.
        :paramtype tags: dict[str, str]
        :keyword etag: Entity tag is used for comparing two or more entities from the same requested
         resource.
        :paramtype etag: str
        :keyword kind: Kind of the resource.
        :paramtype kind: str
        :keyword location: Location where the resource is stored.
        :paramtype location: str
        """
        super().__init__(location=location, kind=kind, etag=etag, tags=tags, **kwargs)
        self.tags = tags
        self.etag = etag
        self.kind = kind
        self.location = location
        self.id = None
        self.name = None
        self.type = None


class SecurityConnector(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """The security connector resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: A list of key value pairs that describe the resource.
    :vartype tags: dict[str, str]
    :ivar etag: Entity tag is used for comparing two or more entities from the same requested
     resource.
    :vartype etag: str
    :ivar kind: Kind of the resource.
    :vartype kind: str
    :ivar location: Location where the resource is stored.
    :vartype location: str
    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.security.v2023_02_01_preview.models.SystemData
    :ivar hierarchy_identifier: The multi cloud resource identifier (account id in case of AWS
     connector, project number in case of GCP connector).
    :vartype hierarchy_identifier: str
    :ivar hierarchy_identifier_trial_end_date: The date on which the trial period will end, if
     applicable. Trial period exists for 30 days after upgrading to payed offerings.
    :vartype hierarchy_identifier_trial_end_date: ~datetime.datetime
    :ivar environment_name: The multi cloud resource's cloud name. Known values are: "Azure",
     "AWS", "GCP", "Github", "AzureDevOps", and "GitLab".
    :vartype environment_name: str or ~azure.mgmt.security.v2023_02_01_preview.models.CloudName
    :ivar offerings: A collection of offerings for the security connector.
    :vartype offerings: list[~azure.mgmt.security.v2023_02_01_preview.models.CloudOffering]
    :ivar environment_data: The security connector environment data.
    :vartype environment_data: ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "hierarchy_identifier_trial_end_date": {"readonly": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "etag": {"key": "etag", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "hierarchy_identifier": {"key": "properties.hierarchyIdentifier", "type": "str"},
        "hierarchy_identifier_trial_end_date": {
            "key": "properties.hierarchyIdentifierTrialEndDate",
            "type": "iso-8601",
        },
        "environment_name": {"key": "properties.environmentName", "type": "str"},
        "offerings": {"key": "properties.offerings", "type": "[CloudOffering]"},
        "environment_data": {"key": "properties.environmentData", "type": "EnvironmentData"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        etag: Optional[str] = None,
        kind: Optional[str] = None,
        location: Optional[str] = None,
        hierarchy_identifier: Optional[str] = None,
        environment_name: Optional[Union[str, "_models.CloudName"]] = None,
        offerings: Optional[List["_models.CloudOffering"]] = None,
        environment_data: Optional["_models.EnvironmentData"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: A list of key value pairs that describe the resource.
        :paramtype tags: dict[str, str]
        :keyword etag: Entity tag is used for comparing two or more entities from the same requested
         resource.
        :paramtype etag: str
        :keyword kind: Kind of the resource.
        :paramtype kind: str
        :keyword location: Location where the resource is stored.
        :paramtype location: str
        :keyword hierarchy_identifier: The multi cloud resource identifier (account id in case of AWS
         connector, project number in case of GCP connector).
        :paramtype hierarchy_identifier: str
        :keyword environment_name: The multi cloud resource's cloud name. Known values are: "Azure",
         "AWS", "GCP", "Github", "AzureDevOps", and "GitLab".
        :paramtype environment_name: str or ~azure.mgmt.security.v2023_02_01_preview.models.CloudName
        :keyword offerings: A collection of offerings for the security connector.
        :paramtype offerings: list[~azure.mgmt.security.v2023_02_01_preview.models.CloudOffering]
        :keyword environment_data: The security connector environment data.
        :paramtype environment_data: ~azure.mgmt.security.v2023_02_01_preview.models.EnvironmentData
        """
        super().__init__(tags=tags, etag=etag, kind=kind, location=location, **kwargs)
        self.system_data = None
        self.hierarchy_identifier = hierarchy_identifier
        self.hierarchy_identifier_trial_end_date = None
        self.environment_name = environment_name
        self.offerings = offerings
        self.environment_data = environment_data


class SecurityConnectorsList(_serialization.Model):
    """List of security connectors response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The list of security connectors under the given scope. Required.
    :vartype value: list[~azure.mgmt.security.v2023_02_01_preview.models.SecurityConnector]
    :ivar next_link: The URI to fetch the next page.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SecurityConnector]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.SecurityConnector"], **kwargs: Any) -> None:
        """
        :keyword value: The list of security connectors under the given scope. Required.
        :paramtype value: list[~azure.mgmt.security.v2023_02_01_preview.models.SecurityConnector]
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = None


class Status(_serialization.Model):
    """The status of the health report.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The status of the health report. Known values are: "Healthy", "NotHealthy", and
     "NotApplicable".
    :vartype code: str or ~azure.mgmt.security.v2023_02_01_preview.models.StatusName
    :ivar status_change_date: The date of when the status of the health report was changed in the
     last time.
    :vartype status_change_date: ~datetime.datetime
    :ivar first_evaluation_date: The date of when the resource of the health report was scanned in
     the first time.
    :vartype first_evaluation_date: ~datetime.datetime
    """

    _validation = {
        "status_change_date": {"readonly": True},
        "first_evaluation_date": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "status_change_date": {"key": "statusChangeDate", "type": "iso-8601"},
        "first_evaluation_date": {"key": "firstEvaluationDate", "type": "iso-8601"},
    }

    def __init__(self, *, code: Optional[Union[str, "_models.StatusName"]] = None, **kwargs: Any) -> None:
        """
        :keyword code: The status of the health report. Known values are: "Healthy", "NotHealthy", and
         "NotApplicable".
        :paramtype code: str or ~azure.mgmt.security.v2023_02_01_preview.models.StatusName
        """
        super().__init__(**kwargs)
        self.code = code
        self.status_change_date = None
        self.first_evaluation_date = None


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or
     ~azure.mgmt.security.v2023_02_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or
         ~azure.mgmt.security.v2023_02_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or
         ~azure.mgmt.security.v2023_02_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class VaRule(_serialization.Model):
    """vulnerability assessment rule metadata details.

    :ivar rule_id: The rule Id.
    :vartype rule_id: str
    :ivar severity: The rule severity. Known values are: "High", "Medium", "Low", "Informational",
     and "Obsolete".
    :vartype severity: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleSeverity
    :ivar category: The rule category.
    :vartype category: str
    :ivar rule_type: The rule type. Known values are: "Binary", "BaselineExpected", "PositiveList",
     and "NegativeList".
    :vartype rule_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleType
    :ivar title: The rule title.
    :vartype title: str
    :ivar description: The rule description.
    :vartype description: str
    :ivar rationale: The rule rationale.
    :vartype rationale: str
    :ivar query_check: The rule query details.
    :vartype query_check: ~azure.mgmt.security.v2023_02_01_preview.models.QueryCheck
    :ivar benchmark_references: The benchmark references.
    :vartype benchmark_references:
     list[~azure.mgmt.security.v2023_02_01_preview.models.BenchmarkReference]
    """

    _attribute_map = {
        "rule_id": {"key": "ruleId", "type": "str"},
        "severity": {"key": "severity", "type": "str"},
        "category": {"key": "category", "type": "str"},
        "rule_type": {"key": "ruleType", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "rationale": {"key": "rationale", "type": "str"},
        "query_check": {"key": "queryCheck", "type": "QueryCheck"},
        "benchmark_references": {"key": "benchmarkReferences", "type": "[BenchmarkReference]"},
    }

    def __init__(
        self,
        *,
        rule_id: Optional[str] = None,
        severity: Optional[Union[str, "_models.RuleSeverity"]] = None,
        category: Optional[str] = None,
        rule_type: Optional[Union[str, "_models.RuleType"]] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        rationale: Optional[str] = None,
        query_check: Optional["_models.QueryCheck"] = None,
        benchmark_references: Optional[List["_models.BenchmarkReference"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword rule_id: The rule Id.
        :paramtype rule_id: str
        :keyword severity: The rule severity. Known values are: "High", "Medium", "Low",
         "Informational", and "Obsolete".
        :paramtype severity: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleSeverity
        :keyword category: The rule category.
        :paramtype category: str
        :keyword rule_type: The rule type. Known values are: "Binary", "BaselineExpected",
         "PositiveList", and "NegativeList".
        :paramtype rule_type: str or ~azure.mgmt.security.v2023_02_01_preview.models.RuleType
        :keyword title: The rule title.
        :paramtype title: str
        :keyword description: The rule description.
        :paramtype description: str
        :keyword rationale: The rule rationale.
        :paramtype rationale: str
        :keyword query_check: The rule query details.
        :paramtype query_check: ~azure.mgmt.security.v2023_02_01_preview.models.QueryCheck
        :keyword benchmark_references: The benchmark references.
        :paramtype benchmark_references:
         list[~azure.mgmt.security.v2023_02_01_preview.models.BenchmarkReference]
        """
        super().__init__(**kwargs)
        self.rule_id = rule_id
        self.severity = severity
        self.category = category
        self.rule_type = rule_type
        self.title = title
        self.description = description
        self.rationale = rationale
        self.query_check = query_check
        self.benchmark_references = benchmark_references
