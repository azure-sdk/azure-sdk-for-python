# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.security.aio import SecurityCenter

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityCenterAssessmentsMetadataOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityCenter, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.assessments_metadata.list(
            api_version="2020-01-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.assessments_metadata.get(
            assessment_metadata_name="str",
            api_version="2020-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription(self, resource_group):
        response = self.client.assessments_metadata.list_by_subscription(
            api_version="2020-01-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_in_subscription(self, resource_group):
        response = await self.client.assessments_metadata.get_in_subscription(
            assessment_metadata_name="str",
            api_version="2020-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_in_subscription(self, resource_group):
        response = await self.client.assessments_metadata.create_in_subscription(
            assessment_metadata_name="str",
            assessment_metadata={
                "assessmentType": "str",
                "categories": ["str"],
                "description": "str",
                "displayName": "str",
                "id": "str",
                "implementationEffort": "str",
                "name": "str",
                "partnerData": {"partnerName": "str", "secret": "str", "productName": "str"},
                "policyDefinitionId": "str",
                "preview": bool,
                "remediationDescription": "str",
                "severity": "str",
                "threats": ["str"],
                "type": "str",
                "userImpact": "str",
            },
            api_version="2020-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete_in_subscription(self, resource_group):
        response = await self.client.assessments_metadata.delete_in_subscription(
            assessment_metadata_name="str",
            api_version="2020-01-01",
        )

        # please add some check logic here by yourself
        # ...
