# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConversationsPreparer
from testpreparer_async import ConversationsClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationsConversationalAnalysisAuthoringOperationsAsync(ConversationsClientTestBaseAsync):
    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_projects(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.list_projects()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_project(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_project(
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_create_project(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.create_project(
            project_name="str",
            body={
                "language": "str",
                "projectKind": "str",
                "projectName": "str",
                "description": "str",
                "multilingual": bool,
                "settings": {"confidenceThreshold": 0.0},
                "storageInputContainerName": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_delete_project(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_delete_project(
                project_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_copy_project_authorization(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.copy_project_authorization(
            project_name="str",
            body={"projectKind": "str", "allowOverwrite": bool, "storageInputContainerName": "str"},
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_copy_project(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_copy_project(
                project_name="str",
                body={
                    "accessToken": "str",
                    "expiresAt": "2020-02-20 00:00:00",
                    "projectKind": "str",
                    "targetProjectName": "str",
                    "targetResourceId": "str",
                    "targetResourceRegion": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_export(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_export(
                project_name="str",
                string_index_type="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_import_method(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_import_method(
                project_name="str",
                body={
                    "metadata": {
                        "language": "str",
                        "projectKind": "str",
                        "projectName": "str",
                        "description": "str",
                        "multilingual": bool,
                        "settings": {"confidenceThreshold": 0.0},
                        "storageInputContainerName": "str",
                    },
                    "projectFileVersion": "str",
                    "stringIndexType": "str",
                    "assets": "conversational_analysis_authoring_exported_project_assets",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_train(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_train(
                project_name="str",
                body={
                    "modelLabel": "str",
                    "trainingMode": "str",
                    "evaluationOptions": {"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
                    "trainingConfigVersion": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_copy_project_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_copy_project_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_deployments(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.list_deployments(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_swap_deployments(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_swap_deployments(
                project_name="str",
                body={"firstDeploymentName": "str", "secondDeploymentName": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_deployment(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_deployment(
            project_name="str",
            deployment_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_deploy_project(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_deploy_project(
                project_name="str",
                deployment_name="str",
                body={"trainedModelLabel": "str", "assignedResourceIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_delete_deployment(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_delete_deployment(
                project_name="str",
                deployment_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_delete_deployment_from_resources(
        self, conversations_endpoint
    ):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_delete_deployment_from_resources(
                project_name="str",
                deployment_name="str",
                body={"assignedResourceIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_deployment_delete_from_resources_status(
        self, conversations_endpoint
    ):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_deployment_delete_from_resources_status(
            project_name="str",
            deployment_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_deployment_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_deployment_status(
            project_name="str",
            deployment_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_swap_deployments_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_swap_deployments_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_export_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_export_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_import_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_import_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_trained_models(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.list_trained_models(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_trained_model(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_trained_model(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_delete_trained_model(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.delete_trained_model(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_evaluate_model(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_evaluate_model(
                project_name="str",
                trained_model_label="str",
                body={"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_load_snapshot(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_load_snapshot(
                project_name="str",
                trained_model_label="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_evaluation_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_evaluation_status(
            project_name="str",
            trained_model_label="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_model_evaluation_results(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.get_model_evaluation_results(
            project_name="str",
            trained_model_label="str",
            string_index_type="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_model_evaluation_summary(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_model_evaluation_summary(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_load_snapshot_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_load_snapshot_status(
            project_name="str",
            trained_model_label="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_deployment_resources(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.list_deployment_resources(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_assign_deployment_resources(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_assign_deployment_resources(
                project_name="str",
                body={"resourcesMetadata": [{"azureResourceId": "str", "customDomain": "str", "region": "str"}]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_unassign_deployment_resources(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_unassign_deployment_resources(
                project_name="str",
                body={"assignedResourceIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_assign_deployment_resources_status(
        self, conversations_endpoint
    ):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_assign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_unassign_deployment_resources_status(
        self, conversations_endpoint
    ):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_unassign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_training_jobs(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = client.conversational_analysis_authoring.list_training_jobs(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_training_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_training_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_begin_cancel_training_job(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await (
            await client.conversational_analysis_authoring.begin_cancel_training_job(
                project_name="str",
                job_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_project_deletion_status(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_project_deletion_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_assigned_resource_deployments(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.list_assigned_resource_deployments()

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_supported_languages(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_supported_languages(
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_get_supported_prebuilt_entities(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.get_supported_prebuilt_entities()

        # please add some check logic here by yourself
        # ...

    @ConversationsPreparer()
    @recorded_by_proxy_async
    async def test_conversational_analysis_authoring_list_training_config_versions(self, conversations_endpoint):
        client = self.create_async_client(endpoint=conversations_endpoint)
        response = await client.conversational_analysis_authoring.list_training_config_versions(
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...
