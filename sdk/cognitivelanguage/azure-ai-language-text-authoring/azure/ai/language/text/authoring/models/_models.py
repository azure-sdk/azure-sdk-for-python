# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import ProjectKind

if TYPE_CHECKING:
    from .. import models as _models


class DataGenerationConnectionInfo(_model_base.Model):
    """Represents the connection info for the Azure resource to use during data generation as part of
    training a custom model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar kind: Connection type for data generation settings. Currently only supports Azure Open
     AI. Required. Default value is "azureOpenAI".
    :vartype kind: str
    :ivar resource_id: Resource ID for the data generation resource. Looks something like
     "/subscriptions/\\ :code:`<SUBSCRIPTION-ID-GUID>`/resourceGroups/\\
     :code:`<RG-NAME>`/providers/Microsoft.CognitiveServices/accounts/\\
     :code:`<AOAI-ACCOUNT-NAME>`". Required.
    :vartype resource_id: str
    :ivar deployment_name: Deployment name of model to be used for synthetic data generation.
     Required.
    :vartype deployment_name: str
    """

    kind: Literal["azureOpenAI"] = rest_field()
    """Connection type for data generation settings. Currently only supports Azure Open AI. Required.
     Default value is \"azureOpenAI\"."""
    resource_id: str = rest_field(name="resourceId")
    """Resource ID for the data generation resource. Looks something like \"/subscriptions/\
     :code:`<SUBSCRIPTION-ID-GUID>`/resourceGroups/\
     :code:`<RG-NAME>`/providers/Microsoft.CognitiveServices/accounts/\
     :code:`<AOAI-ACCOUNT-NAME>`\". Required."""
    deployment_name: str = rest_field(name="deploymentName")
    """Deployment name of model to be used for synthetic data generation. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        deployment_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind: Literal["azureOpenAI"] = "azureOpenAI"


class DataGenerationSettings(_model_base.Model):
    """Represents the settings for using data generation as part of training a custom model.

    All required parameters must be populated in order to send to server.

    :ivar enable_data_generation: If set to true, augment customer provided training data with
     synthetic data to improve model quality. Required.
    :vartype enable_data_generation: bool
    :ivar data_generation_connection_info: Represents the connection info for the Azure resource to
     use during data generation as part of training a custom model. Required.
    :vartype data_generation_connection_info:
     ~azure.ai.language.text.authoring.models.DataGenerationConnectionInfo
    """

    enable_data_generation: bool = rest_field(name="enableDataGeneration")
    """If set to true, augment customer provided training data with synthetic data to improve model
     quality. Required."""
    data_generation_connection_info: "_models.DataGenerationConnectionInfo" = rest_field(
        name="dataGenerationConnectionInfo"
    )
    """Represents the connection info for the Azure resource to use during data generation as part of
     training a custom model. Required."""

    @overload
    def __init__(
        self,
        *,
        enable_data_generation: bool,
        data_generation_connection_info: "_models.DataGenerationConnectionInfo",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """The error object.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
     "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
     "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable",
     "Timeout", "QuotaExceeded", "Conflict", and "Warning".
    :vartype code: str or ~azure.ai.language.text.authoring.models.ErrorCode
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.text.authoring.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.text.authoring.models.InnerErrorModel
    """

    code: Union[str, "_models.ErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidArgument\", \"Unauthorized\", \"Forbidden\", \"NotFound\", \"ProjectNotFound\",
     \"OperationNotFound\", \"AzureCognitiveSearchNotFound\", \"AzureCognitiveSearchIndexNotFound\",
     \"TooManyRequests\", \"AzureCognitiveSearchThrottling\",
     \"AzureCognitiveSearchIndexLimitReached\", \"InternalServerError\", \"ServiceUnavailable\",
     \"Timeout\", \"QuotaExceeded\", \"Conflict\", and \"Warning\"."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """The target of the error."""
    details: Optional[List["_models.Error"]] = rest_field()
    """An array of details about specific errors that led to this reported error."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """Error response.

    All required parameters must be populated in order to send to server.

    :ivar error: The error object. Required.
    :vartype error: ~azure.ai.language.text.authoring.models.Error
    """

    error: "_models.Error" = rest_field()
    """The error object. Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExportedProject(_model_base.Model):
    """Represents an exported project.

    All required parameters must be populated in order to send to server.

    :ivar project_file_version: The version of the exported file. Required.
    :vartype project_file_version: str
    :ivar string_index_type: Specifies the method used to interpret string offsets. For additional
     information see https://aka.ms/text-analytics-offsets. Required. "Utf16CodeUnit"
    :vartype string_index_type: str or ~azure.ai.language.text.authoring.models.StringIndexType
    :ivar metadata: Represents the project metadata. Required.
    :vartype metadata:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringCreateProjectOptions
    :ivar assets: Represents the project assets.
    :vartype assets: ~azure.ai.language.text.authoring.models.ExportedProjectAssets
    """

    project_file_version: str = rest_field(name="projectFileVersion")
    """The version of the exported file. Required."""
    string_index_type: Union[str, "_models.StringIndexType"] = rest_field(name="stringIndexType")
    """Specifies the method used to interpret string offsets. For additional information see
     https://aka.ms/text-analytics-offsets. Required. \"Utf16CodeUnit\""""
    metadata: "_models.TextAnalysisAuthoringCreateProjectOptions" = rest_field()
    """Represents the project metadata. Required."""
    assets: Optional["_models.ExportedProjectAssets"] = rest_field()
    """Represents the project assets."""

    @overload
    def __init__(
        self,
        *,
        project_file_version: str,
        string_index_type: Union[str, "_models.StringIndexType"],
        metadata: "_models.TextAnalysisAuthoringCreateProjectOptions",
        assets: Optional["_models.ExportedProjectAssets"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExportedProjectAssets(_model_base.Model):
    """Represents the assets of an exported project.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    TextAnalysisAuthoringExportedCustomAbstractiveSummarizationProjectAssets,
    TextAnalysisAuthoringExportedCustomEntityRecognitionProjectAssets,
    TextAnalysisAuthoringExportedCustomHealthcareProjectAssets,
    TextAnalysisAuthoringExportedCustomMultiLabelClassificationProjectAssets,
    TextAnalysisAuthoringExportedCustomSingleLabelClassificationProjectAssets,
    TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets

    All required parameters must be populated in order to send to server.

    :ivar project_kind: Required. Known values are: "CustomSingleLabelClassification",
     "CustomMultiLabelClassification", "CustomEntityRecognition", "CustomAbstractiveSummarization",
     "CustomHealthcare", and "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    project_kind: str = rest_discriminator(name="projectKind")
    """Required. Known values are: \"CustomSingleLabelClassification\",
     \"CustomMultiLabelClassification\", \"CustomEntityRecognition\",
     \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and \"CustomTextSentiment\"."""

    @overload
    def __init__(
        self,
        *,
        project_kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InnerErrorModel(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure",
     "InvalidRequestBodyFormat", "EmptyRequest", "MissingInputDocuments", "InvalidDocument",
     "ModelVersionIncorrect", "InvalidDocumentBatch", "UnsupportedLanguageCode", and
     "InvalidCountryHint".
    :vartype code: str or ~azure.ai.language.text.authoring.models.InnerErrorCode
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.text.authoring.models.InnerErrorModel
    """

    code: Union[str, "_models.InnerErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidParameterValue\", \"KnowledgeBaseNotFound\", \"AzureCognitiveSearchNotFound\",
     \"AzureCognitiveSearchThrottling\", \"ExtractionFailure\", \"InvalidRequestBodyFormat\",
     \"EmptyRequest\", \"MissingInputDocuments\", \"InvalidDocument\", \"ModelVersionIncorrect\",
     \"InvalidDocumentBatch\", \"UnsupportedLanguageCode\", and \"InvalidCountryHint\"."""
    message: str = rest_field()
    """Error message. Required."""
    details: Optional[Dict[str, str]] = rest_field()
    """Error details."""
    target: Optional[str] = rest_field()
    """Error target."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProjectSettings(_model_base.Model):
    """Represents the settings used to define the project behavior.

    :ivar confidence_threshold: The threshold of the class with the highest confidence, at which
     the prediction will automatically be changed to "None". The value of the threshold should be
     between 0 and 1 inclusive.
    :vartype confidence_threshold: float
    :ivar aml_project_path: The path to the AML connected project.
    :vartype aml_project_path: str
    :ivar is_labeling_locked: Indicates whether the labeling experience can be modified or not.
    :vartype is_labeling_locked: bool
    :ivar run_gpt_predictions: Indicates whether to run GPT predictions or not.
    :vartype run_gpt_predictions: bool
    :ivar gpt_predictive_lookahead: The predictive lookahead for GPT predictions that is specified
     by the user.
    :vartype gpt_predictive_lookahead: int
    """

    confidence_threshold: Optional[float] = rest_field(name="confidenceThreshold")
    """The threshold of the class with the highest confidence, at which the prediction will
     automatically be changed to \"None\". The value of the threshold should be between 0 and 1
     inclusive."""
    aml_project_path: Optional[str] = rest_field(name="amlProjectPath")
    """The path to the AML connected project."""
    is_labeling_locked: Optional[bool] = rest_field(name="isLabelingLocked")
    """Indicates whether the labeling experience can be modified or not."""
    run_gpt_predictions: Optional[bool] = rest_field(name="runGptPredictions")
    """Indicates whether to run GPT predictions or not."""
    gpt_predictive_lookahead: Optional[int] = rest_field(name="gptPredictiveLookahead")
    """The predictive lookahead for GPT predictions that is specified by the user."""

    @overload
    def __init__(
        self,
        *,
        confidence_threshold: Optional[float] = None,
        aml_project_path: Optional[str] = None,
        is_labeling_locked: Optional[bool] = None,
        run_gpt_predictions: Optional[bool] = None,
        gpt_predictive_lookahead: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceMetadata(_model_base.Model):
    """Represents metadata for the Azure resource..

    All required parameters must be populated in order to send to server.

    :ivar azure_resource_id: Represents the Azure resource ID. Required.
    :vartype azure_resource_id: str
    :ivar custom_domain: Represents the Azure resource custom domain. Required.
    :vartype custom_domain: str
    :ivar region: Represents the Azure resource region. Required.
    :vartype region: str
    """

    azure_resource_id: str = rest_field(name="azureResourceId")
    """Represents the Azure resource ID. Required."""
    custom_domain: str = rest_field(name="customDomain")
    """Represents the Azure resource custom domain. Required."""
    region: str = rest_field()
    """Represents the Azure resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        azure_resource_id: str,
        custom_domain: str,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringAssignDeploymentResourcesJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a assign deployment resources job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringAssignDeploymentResourcesOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for assigning Azure resources to a project.

    All required parameters must be populated in order to send to server.

    :ivar resources_metadata: Represents the metadata for the resources to be assigned. Required.
    :vartype resources_metadata: list[~azure.ai.language.text.authoring.models.ResourceMetadata]
    """

    resources_metadata: List["_models.ResourceMetadata"] = rest_field(name="resourcesMetadata")
    """Represents the metadata for the resources to be assigned. Required."""

    @overload
    def __init__(
        self,
        *,
        resources_metadata: List["_models.ResourceMetadata"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringAssignedDeploymentResource(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the assigned deployment resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar azure_resource_id: The resource ID. Required.
    :vartype azure_resource_id: str
    :ivar region: The resource region. Required.
    :vartype region: str
    """

    azure_resource_id: str = rest_field(name="azureResourceId", visibility=["read"])
    """The resource ID. Required."""
    region: str = rest_field()
    """The resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringAssignedProjectDeploymentMetadata(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the metadata for an assigned deployment.


    :ivar deployment_name: Represents the deployment name. Required.
    :vartype deployment_name: str
    :ivar last_deployed_date_time: Represents deployment last deployed time. Required.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar deployment_expiration_date: Represents deployment expiration date in the runtime.
     Required.
    :vartype deployment_expiration_date: ~datetime.date
    """

    deployment_name: str = rest_field(name="deploymentName")
    """Represents the deployment name. Required."""
    last_deployed_date_time: datetime.datetime = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents deployment last deployed time. Required."""
    deployment_expiration_date: datetime.date = rest_field(name="deploymentExpirationDate")
    """Represents deployment expiration date in the runtime. Required."""

    @overload
    def __init__(
        self,
        *,
        deployment_name: str,
        last_deployed_date_time: datetime.datetime,
        deployment_expiration_date: datetime.date,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringAssignedProjectDeploymentsMetadata(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the metadata for assigned deployments for a project.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar project_name: Represents the project name. Required.
    :vartype project_name: str
    :ivar deployments_metadata: Represents the resource region. Required.
    :vartype deployments_metadata:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringAssignedProjectDeploymentMetadata]
    """

    project_name: str = rest_field(name="projectName", visibility=["read"])
    """Represents the project name. Required."""
    deployments_metadata: List["_models.TextAnalysisAuthoringAssignedProjectDeploymentMetadata"] = rest_field(
        name="deploymentsMetadata"
    )
    """Represents the resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        deployments_metadata: List["_models.TextAnalysisAuthoringAssignedProjectDeploymentMetadata"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringConfusionMatrix(_model_base.Model):
    """TextAnalysisAuthoringConfusionMatrix."""


class TextAnalysisAuthoringConfusionMatrixCell(_model_base.Model):
    """Represents a cell in a confusion matrix.


    :ivar normalized_value: Represents normalized value in percentages. Required.
    :vartype normalized_value: float
    :ivar raw_value: Represents raw value. Required.
    :vartype raw_value: float
    """

    normalized_value: float = rest_field(name="normalizedValue")
    """Represents normalized value in percentages. Required."""
    raw_value: float = rest_field(name="rawValue")
    """Represents raw value. Required."""

    @overload
    def __init__(
        self,
        *,
        normalized_value: float,
        raw_value: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringConfusionMatrixRow(_model_base.Model):
    """TextAnalysisAuthoringConfusionMatrixRow."""


class TextAnalysisAuthoringCopyProjectJobState(_model_base.Model):
    """Represents the state of a copy job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringCopyProjectOptions(_model_base.Model):
    """Represents the options for copying an existing project to another Azure resource.


    :ivar project_kind: Represents the project kind. Required. Known values are:
     "CustomSingleLabelClassification", "CustomMultiLabelClassification", "CustomEntityRecognition",
     "CustomAbstractiveSummarization", "CustomHealthcare", and "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    :ivar target_project_name: The project name to be copied-into. Required.
    :vartype target_project_name: str
    :ivar access_token: The access token. Required.
    :vartype access_token: str
    :ivar expires_at: The expiration of the access token. Required.
    :vartype expires_at: ~datetime.datetime
    :ivar target_resource_id: Represents the target Azure resource ID. Required.
    :vartype target_resource_id: str
    :ivar target_resource_region: Represents the target Azure resource region. Required.
    :vartype target_resource_region: str
    """

    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind")
    """Represents the project kind. Required. Known values are: \"CustomSingleLabelClassification\",
     \"CustomMultiLabelClassification\", \"CustomEntityRecognition\",
     \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and \"CustomTextSentiment\"."""
    target_project_name: str = rest_field(name="targetProjectName")
    """The project name to be copied-into. Required."""
    access_token: str = rest_field(name="accessToken")
    """The access token. Required."""
    expires_at: datetime.datetime = rest_field(name="expiresAt", format="rfc3339")
    """The expiration of the access token. Required."""
    target_resource_id: str = rest_field(name="targetResourceId")
    """Represents the target Azure resource ID. Required."""
    target_resource_region: str = rest_field(name="targetResourceRegion")
    """Represents the target Azure resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: Union[str, "_models.ProjectKind"],
        target_project_name: str,
        access_token: str,
        expires_at: datetime.datetime,
        target_resource_id: str,
        target_resource_region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringCreateDeploymentOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for creating or updating a project deployment.

    All required parameters must be populated in order to send to server.

    :ivar trained_model_label: Represents the trained model label. Required.
    :vartype trained_model_label: str
    :ivar assigned_resource_ids: Represents the resource IDs to be assigned to the deployment. If
     provided, the deployment will be rolled out to the resources provided here as well as the
     original resource in which the project is created.
    :vartype assigned_resource_ids: list[str]
    """

    trained_model_label: str = rest_field(name="trainedModelLabel")
    """Represents the trained model label. Required."""
    assigned_resource_ids: Optional[List[str]] = rest_field(name="assignedResourceIds")
    """Represents the resource IDs to be assigned to the deployment. If provided, the deployment will
     be rolled out to the resources provided here as well as the original resource in which the
     project is created."""

    @overload
    def __init__(
        self,
        *,
        trained_model_label: str,
        assigned_resource_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringCreateProjectOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options used to create or update a project.

    All required parameters must be populated in order to send to server.

    :ivar project_kind: The project kind. Required. Known values are:
     "CustomSingleLabelClassification", "CustomMultiLabelClassification", "CustomEntityRecognition",
     "CustomAbstractiveSummarization", "CustomHealthcare", and "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    :ivar storage_input_container_name: The storage container name. Required.
    :vartype storage_input_container_name: str
    :ivar settings: The project settings.
    :vartype settings: ~azure.ai.language.text.authoring.models.ProjectSettings
    :ivar project_name: The new project name. Required.
    :vartype project_name: str
    :ivar multilingual: Whether the project would be used for multiple languages or not.
    :vartype multilingual: bool
    :ivar description: The project description.
    :vartype description: str
    :ivar language: The project language. This is BCP-47 representation of a language. For example,
     use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    """

    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind")
    """The project kind. Required. Known values are: \"CustomSingleLabelClassification\",
     \"CustomMultiLabelClassification\", \"CustomEntityRecognition\",
     \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and \"CustomTextSentiment\"."""
    storage_input_container_name: str = rest_field(name="storageInputContainerName")
    """The storage container name. Required."""
    settings: Optional["_models.ProjectSettings"] = rest_field()
    """The project settings."""
    project_name: str = rest_field(name="projectName")
    """The new project name. Required."""
    multilingual: Optional[bool] = rest_field()
    """Whether the project would be used for multiple languages or not."""
    description: Optional[str] = rest_field()
    """The project description."""
    language: str = rest_field()
    """The project language. This is BCP-47 representation of a language. For example, use \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: Union[str, "_models.ProjectKind"],
        storage_input_container_name: str,
        project_name: str,
        language: str,
        settings: Optional["_models.ProjectSettings"] = None,
        multilingual: Optional[bool] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation result of a document.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult,
    TextAnalysisAuthoringCustomHealthcareDocumentEvaluationResult,
    TextAnalysisAuthoringCustomMultiLabelClassificationDocumentEvaluationResult,
    TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult,
    TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar project_kind: Represents the project kind. Required. Known values are:
     "CustomSingleLabelClassification", "CustomMultiLabelClassification", "CustomEntityRecognition",
     "CustomAbstractiveSummarization", "CustomHealthcare", and "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    project_kind: str = rest_discriminator(name="projectKind", visibility=["read"])
    """Represents the project kind. Required. Known values are: \"CustomSingleLabelClassification\",
     \"CustomMultiLabelClassification\", \"CustomEntityRecognition\",
     \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and \"CustomTextSentiment\"."""
    location: str = rest_field()
    """Represents the document path. Required."""
    language: str = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: str,
        location: str,
        language: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringCustomEntityRecognitionDocumentEvaluationResult(
    TextAnalysisAuthoringDocumentEvaluationResult, discriminator="CustomEntityRecognition"
):  # pylint: disable=name-too-long
    """Represents the document evaluation result for a custom entity recognition project.


    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar custom_entity_recognition_result: Represents the evaluation prediction for entity
     recognition. Required.
    :vartype custom_entity_recognition_result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult
    :ivar project_kind: Represents the project kind. Required. For building an extraction model to
     identify your domain categories using your own data.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_ENTITY_RECOGNITION
    """

    custom_entity_recognition_result: "_models.TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult" = (
        rest_field(name="customEntityRecognitionResult")
    )
    """Represents the evaluation prediction for entity recognition. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_ENTITY_RECOGNITION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project kind. Required. For building an extraction model to identify your domain
     categories using your own data."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        language: str,
        custom_entity_recognition_result: "_models.TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_ENTITY_RECOGNITION, **kwargs)


class TextAnalysisAuthoringEvaluationSummary(_model_base.Model):
    """Represents the summary for an evaluation operation.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    TextAnalysisAuthoringCustomEntityRecognitionEvaluationSummary,
    TextAnalysisAuthoringCustomHealthcareEvaluationSummary,
    TextAnalysisAuthoringCustomMultiLabelClassificationEvaluationSummary,
    TextAnalysisAuthoringCustomSingleLabelClassificationEvaluationSummary,
    TextAnalysisAuthoringCustomTextSentimentEvaluationSummary


    :ivar project_kind: Represents the project type that the evaluation ran on. Required. Known
     values are: "CustomSingleLabelClassification", "CustomMultiLabelClassification",
     "CustomEntityRecognition", "CustomAbstractiveSummarization", "CustomHealthcare", and
     "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    project_kind: str = rest_discriminator(name="projectKind")
    """Represents the project type that the evaluation ran on. Required. Known values are:
     \"CustomSingleLabelClassification\", \"CustomMultiLabelClassification\",
     \"CustomEntityRecognition\", \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and
     \"CustomTextSentiment\"."""
    evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions" = rest_field(name="evaluationOptions")
    """Represents the options used running the evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: str,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringCustomEntityRecognitionEvaluationSummary(
    TextAnalysisAuthoringEvaluationSummary, discriminator="CustomEntityRecognition"
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom entity recognition project.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar custom_entity_recognition_evaluation: Contains the data related to extraction evaluation.
     Required.
    :vartype custom_entity_recognition_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary
    :ivar project_kind: Represents the project type that the evaluation ran on. Required. For
     building an extraction model to identify your domain categories using your own data.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_ENTITY_RECOGNITION
    """

    custom_entity_recognition_evaluation: "_models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary" = (
        rest_field(name="customEntityRecognitionEvaluation")
    )
    """Contains the data related to extraction evaluation. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_ENTITY_RECOGNITION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project type that the evaluation ran on. Required. For building an extraction
     model to identify your domain categories using your own data."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        custom_entity_recognition_evaluation: "_models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_ENTITY_RECOGNITION, **kwargs)


class TextAnalysisAuthoringCustomHealthcareDocumentEvaluationResult(
    TextAnalysisAuthoringDocumentEvaluationResult, discriminator="CustomHealthcare"
):  # pylint: disable=name-too-long
    """Represents the document evaluation result for a custom entity recognition project.


    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar custom_healthcare_result: Represents the evaluation prediction for entity recognition.
     Required.
    :vartype custom_healthcare_result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentHealthcareEvaluationResult
    :ivar project_kind: Represents the project kind. Required. For building an text analytics for
     health model to identify your health domain data.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_HEALTHCARE
    """

    custom_healthcare_result: "_models.TextAnalysisAuthoringDocumentHealthcareEvaluationResult" = rest_field(
        name="customHealthcareResult"
    )
    """Represents the evaluation prediction for entity recognition. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_HEALTHCARE] = rest_discriminator(name="projectKind")  # type: ignore
    """Represents the project kind. Required. For building an text analytics for health model to
     identify your health domain data."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        language: str,
        custom_healthcare_result: "_models.TextAnalysisAuthoringDocumentHealthcareEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_HEALTHCARE, **kwargs)


class TextAnalysisAuthoringCustomHealthcareEvaluationSummary(
    TextAnalysisAuthoringEvaluationSummary, discriminator="CustomHealthcare"
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom health care project.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar custom_healthcare_evaluation: Contains the data related to health care evaluation.
     Required.
    :vartype custom_healthcare_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary
    :ivar project_kind: Represents the project type that the evaluation ran on. Required. For
     building an text analytics for health model to identify your health domain data.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_HEALTHCARE
    """

    custom_healthcare_evaluation: "_models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary" = rest_field(
        name="customHealthcareEvaluation"
    )
    """Contains the data related to health care evaluation. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_HEALTHCARE] = rest_discriminator(name="projectKind")  # type: ignore
    """Represents the project type that the evaluation ran on. Required. For building an text
     analytics for health model to identify your health domain data."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        custom_healthcare_evaluation: "_models.TextAnalysisAuthoringEntityRecognitionEvaluationSummary",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_HEALTHCARE, **kwargs)


class TextAnalysisAuthoringCustomMultiLabelClassificationDocumentEvaluationResult(
    TextAnalysisAuthoringDocumentEvaluationResult, discriminator="CustomMultiLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the document evaluation result for a custom multi-label classification project.


    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar custom_multi_label_classification_result: Represents the evaluation prediction for multi
     label classification. Required.
    :vartype custom_multi_label_classification_result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult
    :ivar project_kind: Represents the project kind. Required. For building a classification model
     to classify text using your own data. Each file can have one or many labels. For example, file
     1 is classified as A, B, and C and file 2 is classified as B and C.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_MULTI_LABEL_CLASSIFICATION
    """

    custom_multi_label_classification_result: (
        "_models.TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult"
    ) = rest_field(name="customMultiLabelClassificationResult")
    """Represents the evaluation prediction for multi label classification. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project kind. Required. For building a classification model to classify text
     using your own data. Each file can have one or many labels. For example, file 1 is classified
     as A, B, and C and file 2 is classified as B and C."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        language: str,
        custom_multi_label_classification_result: "_models.TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringCustomMultiLabelClassificationEvaluationSummary(
    TextAnalysisAuthoringEvaluationSummary, discriminator="CustomMultiLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom multi-label classification project.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar custom_multi_label_classification_evaluation: Contains the data related to multi label
     classification evaluation. Required.
    :vartype custom_multi_label_classification_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringMultiLabelClassificationEvaluationSummary
    :ivar project_kind: Represents the project type that the evaluation ran on. Required. For
     building a classification model to classify text using your own data. Each file can have one or
     many labels. For example, file 1 is classified as A, B, and C and file 2 is classified as B and
     C.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_MULTI_LABEL_CLASSIFICATION
    """

    custom_multi_label_classification_evaluation: (
        "_models.TextAnalysisAuthoringMultiLabelClassificationEvaluationSummary"
    ) = rest_field(name="customMultiLabelClassificationEvaluation")
    """Contains the data related to multi label classification evaluation. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project type that the evaluation ran on. Required. For building a classification
     model to classify text using your own data. Each file can have one or many labels. For example,
     file 1 is classified as A, B, and C and file 2 is classified as B and C."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        custom_multi_label_classification_evaluation: "_models.TextAnalysisAuthoringMultiLabelClassificationEvaluationSummary",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringCustomSingleLabelClassificationDocumentEvaluationResult(
    TextAnalysisAuthoringDocumentEvaluationResult, discriminator="CustomSingleLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the document evaluation result for a custom single-label classification project.


    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar custom_single_label_classification_result: Represents the evaluation prediction for
     single label classification. Required.
    :vartype custom_single_label_classification_result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult
    :ivar project_kind: Represents the project kind. Required. For building a classification model
     to classify text using your own data. Each file will have only one label. For example, file 1
     is classified as A and file 2 is classified as B.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_SINGLE_LABEL_CLASSIFICATION
    """

    custom_single_label_classification_result: (
        "_models.TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult"
    ) = rest_field(name="customSingleLabelClassificationResult")
    """Represents the evaluation prediction for single label classification. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project kind. Required. For building a classification model to classify text
     using your own data. Each file will have only one label. For example, file 1 is classified as A
     and file 2 is classified as B."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        language: str,
        custom_single_label_classification_result: "_models.TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringCustomSingleLabelClassificationEvaluationSummary(
    TextAnalysisAuthoringEvaluationSummary, discriminator="CustomSingleLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom single-label classification project.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar custom_single_label_classification_evaluation: Contains the data related to single label
     classification evaluation. Required.
    :vartype custom_single_label_classification_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSingleLabelClassificationEvaluationSummary
    :ivar project_kind: Represents the project type that the evaluation ran on. Required. For
     building a classification model to classify text using your own data. Each file will have only
     one label. For example, file 1 is classified as A and file 2 is classified as B.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_SINGLE_LABEL_CLASSIFICATION
    """

    custom_single_label_classification_evaluation: (
        "_models.TextAnalysisAuthoringSingleLabelClassificationEvaluationSummary"
    ) = rest_field(name="customSingleLabelClassificationEvaluation")
    """Contains the data related to single label classification evaluation. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """Represents the project type that the evaluation ran on. Required. For building a classification
     model to classify text using your own data. Each file will have only one label. For example,
     file 1 is classified as A and file 2 is classified as B."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        custom_single_label_classification_evaluation: "_models.TextAnalysisAuthoringSingleLabelClassificationEvaluationSummary",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult(
    TextAnalysisAuthoringDocumentEvaluationResult, discriminator="CustomTextSentiment"
):  # pylint: disable=name-too-long
    """Represents the document evaluation result for a custom sentiment project.


    :ivar location: Represents the document path. Required.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar custom_text_sentiment_result: Represents the evaluation prediction for text sentiment.
     Required.
    :vartype custom_text_sentiment_result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentTextSentimentEvaluationResult
    :ivar project_kind: Represents the project kind. Required. For building a sentiment models
     which are able to extract sentiment for long documents.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_TEXT_SENTIMENT
    """

    custom_text_sentiment_result: "_models.TextAnalysisAuthoringDocumentTextSentimentEvaluationResult" = rest_field(
        name="customTextSentimentResult"
    )
    """Represents the evaluation prediction for text sentiment. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_TEXT_SENTIMENT] = rest_discriminator(name="projectKind")  # type: ignore
    """Represents the project kind. Required. For building a sentiment models which are able to
     extract sentiment for long documents."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        language: str,
        custom_text_sentiment_result: "_models.TextAnalysisAuthoringDocumentTextSentimentEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_TEXT_SENTIMENT, **kwargs)


class TextAnalysisAuthoringCustomTextSentimentEvaluationSummary(
    TextAnalysisAuthoringEvaluationSummary, discriminator="CustomTextSentiment"
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom text sentiment project.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar custom_text_sentiment_evaluation: Contains the data related to custom sentiment
     evaluation. Required.
    :vartype custom_text_sentiment_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringTextSentimentEvaluationSummary
    :ivar project_kind: Represents the project type that the evaluation ran on. Required. For
     building a sentiment models which are able to extract sentiment for long documents.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_TEXT_SENTIMENT
    """

    custom_text_sentiment_evaluation: "_models.TextAnalysisAuthoringTextSentimentEvaluationSummary" = rest_field(
        name="customTextSentimentEvaluation"
    )
    """Contains the data related to custom sentiment evaluation. Required."""
    project_kind: Literal[ProjectKind.CUSTOM_TEXT_SENTIMENT] = rest_discriminator(name="projectKind")  # type: ignore
    """Represents the project type that the evaluation ran on. Required. For building a sentiment
     models which are able to extract sentiment for long documents."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        custom_text_sentiment_evaluation: "_models.TextAnalysisAuthoringTextSentimentEvaluationSummary",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_TEXT_SENTIMENT, **kwargs)


class TextAnalysisAuthoringDeleteDeploymentOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for deleting a project deployment.

    :ivar assigned_resource_ids: Represents the resource IDs to delete the deployment from. If not
     provided, the deployment will be rolled out from all the resources it is deployed to. If
     provided, it will delete the deployment only from the specified assigned resources, and leave
     it for the rest.
    :vartype assigned_resource_ids: list[str]
    """

    assigned_resource_ids: Optional[List[str]] = rest_field(name="assignedResourceIds")
    """Represents the resource IDs to delete the deployment from. If not provided, the deployment will
     be rolled out from all the resources it is deployed to. If provided, it will delete the
     deployment only from the specified assigned resources, and leave it for the rest."""

    @overload
    def __init__(
        self,
        *,
        assigned_resource_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDeploymentDeleteFromResourcesJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of an existing delete deployment from specific resources job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDeploymentJobState(_model_base.Model):
    """Represents the state of a deployment job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDeploymentResource(_model_base.Model):
    """Represents an Azure resource assigned to a deployment.


    :ivar resource_id: Represents the Azure resource Id. Required.
    :vartype resource_id: str
    :ivar region: Represents the resource region. Required.
    :vartype region: str
    """

    resource_id: str = rest_field(name="resourceId")
    """Represents the Azure resource Id. Required."""
    region: str = rest_field()
    """Represents the resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentEntityLabelEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an evaluation result entity label.


    :ivar category: Represents the entity category. Required.
    :vartype category: str
    :ivar offset: Represents the entity offset index relative to the original text. Required.
    :vartype offset: int
    :ivar length: Represents the entity length. Required.
    :vartype length: int
    """

    category: str = rest_field()
    """Represents the entity category. Required."""
    offset: int = rest_field()
    """Represents the entity offset index relative to the original text. Required."""
    length: int = rest_field()
    """Represents the entity length. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        offset: int,
        length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the entity recognition evaluation result for a document.


    :ivar entities: Represents the document labelled entities. Required.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult]
    """

    entities: List["_models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult"] = rest_field()
    """Represents the document labelled entities. Required."""

    @overload
    def __init__(
        self,
        *,
        entities: List["_models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentEntityRegionEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation comparison between the expected and predicted entities of a document
    region.


    :ivar expected_entities: Represents the region's expected entity labels. Required.
    :vartype expected_entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult]
    :ivar predicted_entities: Represents the region's predicted entity labels. Required.
    :vartype predicted_entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult]
    :ivar region_offset: Represents the region offset. Required.
    :vartype region_offset: int
    :ivar region_length: Represents the region length. Required.
    :vartype region_length: int
    """

    expected_entities: List["_models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult"] = rest_field(
        name="expectedEntities"
    )
    """Represents the region's expected entity labels. Required."""
    predicted_entities: List["_models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult"] = rest_field(
        name="predictedEntities"
    )
    """Represents the region's predicted entity labels. Required."""
    region_offset: int = rest_field(name="regionOffset")
    """Represents the region offset. Required."""
    region_length: int = rest_field(name="regionLength")
    """Represents the region length. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_entities: List["_models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult"],
        predicted_entities: List["_models.TextAnalysisAuthoringDocumentEntityLabelEvaluationResult"],
        region_offset: int,
        region_length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentHealthcareEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the healthcare evaluation result for a document.


    :ivar entities: Represents the document labelled entities. Required.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult]
    """

    entities: List["_models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult"] = rest_field()
    """Represents the document labelled entities. Required."""

    @overload
    def __init__(
        self,
        *,
        entities: List["_models.TextAnalysisAuthoringDocumentEntityRegionEvaluationResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the comparison between the expected and predicted classes that are result from the
    evaluation operation.


    :ivar expected_classes: Represents the document's expected classes. Required.
    :vartype expected_classes: list[str]
    :ivar predicted_classes: Represents the document's predicted classes. Required.
    :vartype predicted_classes: list[str]
    """

    expected_classes: List[str] = rest_field(name="expectedClasses")
    """Represents the document's expected classes. Required."""
    predicted_classes: List[str] = rest_field(name="predictedClasses")
    """Represents the document's predicted classes. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_classes: List[str],
        predicted_classes: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an evaluation result Sentiment label.


    :ivar category: Represents the sentiment category. Required. Known values are: "positive",
     "negative", and "neutral".
    :vartype category: str or ~azure.ai.language.text.authoring.models.Sentiment
    :ivar offset: Represents the sentiment offset index relative to the original text. Required.
    :vartype offset: int
    :ivar length: Represents the sentiment length. Required.
    :vartype length: int
    """

    category: Union[str, "_models.Sentiment"] = rest_field()
    """Represents the sentiment category. Required. Known values are: \"positive\", \"negative\", and
     \"neutral\"."""
    offset: int = rest_field()
    """Represents the sentiment offset index relative to the original text. Required."""
    length: int = rest_field()
    """Represents the sentiment length. Required."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.Sentiment"],
        offset: int,
        length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the comparison between the expected and predicted class that result from an
    evaluation operation.


    :ivar expected_class: Represents the document's expected class. Required.
    :vartype expected_class: str
    :ivar predicted_class: Represents the document's predicted class. Required.
    :vartype predicted_class: str
    """

    expected_class: str = rest_field(name="expectedClass")
    """Represents the document's expected class. Required."""
    predicted_class: str = rest_field(name="predictedClass")
    """Represents the document's predicted class. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_class: str,
        predicted_class: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringDocumentTextSentimentEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the comparison between the expected and predicted sentiment that result from an
    evaluation operation.


    :ivar expected_sentiment_spans: Represents the document's expected sentiment labels. Required.
    :vartype expected_sentiment_spans:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult]
    :ivar predicted_sentiment_spans: Represents the document's predicted sentiment labels.
     Required.
    :vartype predicted_sentiment_spans:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult]
    """

    expected_sentiment_spans: List["_models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult"] = rest_field(
        name="expectedSentimentSpans"
    )
    """Represents the document's expected sentiment labels. Required."""
    predicted_sentiment_spans: List["_models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult"] = rest_field(
        name="predictedSentimentSpans"
    )
    """Represents the document's predicted sentiment labels. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_sentiment_spans: List["_models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult"],
        predicted_sentiment_spans: List["_models.TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringEntityEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for an entity.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringEntityRecognitionEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom entity recognition project.


    :ivar confusion_matrix: Represents the confusion matrix between two entities (the two entities
     can be the same). The matrix is between the entity that was labelled and the entity that was
     predicted. Required.
    :vartype confusion_matrix:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringConfusionMatrix
    :ivar entities: Represents the entities evaluation. Required.
    :vartype entities: dict[str,
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEntityEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix" = rest_field(name="confusionMatrix")
    """Represents the confusion matrix between two entities (the two entities can be the same). The
     matrix is between the entity that was labelled and the entity that was predicted. Required."""
    entities: Dict[str, "_models.TextAnalysisAuthoringEntityEvaluationSummary"] = rest_field()
    """Represents the entities evaluation. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix",
        entities: Dict[str, "_models.TextAnalysisAuthoringEntityEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringEvaluationJobResult(_model_base.Model):
    """TextAnalysisAuthoringEvaluationJobResult.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar model_label: Represents trained model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. Required.
    :vartype training_config_version: str
    :ivar percent_complete: Represents progress percentage. Required.
    :vartype percent_complete: int
    """

    evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions" = rest_field(name="evaluationOptions")
    """Represents the options used running the evaluation. Required."""
    model_label: str = rest_field(name="modelLabel")
    """Represents trained model label. Required."""
    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents training config version. Required."""
    percent_complete: int = rest_field(name="percentComplete")
    """Represents progress percentage. Required."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.TextAnalysisAuthoringEvaluationOptions",
        model_label: str,
        training_config_version: str,
        percent_complete: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringEvaluationJobState(_model_base.Model):
    """Represents the state of a evaluation job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    :ivar result: Represents evaluation task detailed result. Required.
    :vartype result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationJobResult
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result: "_models.TextAnalysisAuthoringEvaluationJobResult" = rest_field()
    """Represents evaluation task detailed result. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        result: "_models.TextAnalysisAuthoringEvaluationJobResult",
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringEvaluationOptions(_model_base.Model):
    """Represents the options used running the evaluation.

    :ivar kind: Represents the evaluation kind. By default, the evaluation kind is set to
     percentage. Known values are: "percentage" and "manual".
    :vartype kind: str or ~azure.ai.language.text.authoring.models.EvaluationKind
    :ivar training_split_percentage: Represents the training dataset split percentage. Only needed
     in case the evaluation kind is percentage.
    :vartype training_split_percentage: int
    :ivar testing_split_percentage: Represents the testing dataset split percentage. Only needed in
     case the evaluation kind is percentage.
    :vartype testing_split_percentage: int
    """

    kind: Optional[Union[str, "_models.EvaluationKind"]] = rest_field()
    """Represents the evaluation kind. By default, the evaluation kind is set to percentage. Known
     values are: \"percentage\" and \"manual\"."""
    training_split_percentage: Optional[int] = rest_field(name="trainingSplitPercentage")
    """Represents the training dataset split percentage. Only needed in case the evaluation kind is
     percentage."""
    testing_split_percentage: Optional[int] = rest_field(name="testingSplitPercentage")
    """Represents the testing dataset split percentage. Only needed in case the evaluation kind is
     percentage."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.EvaluationKind"]] = None,
        training_split_percentage: Optional[int] = None,
        testing_split_percentage: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedClass(_model_base.Model):
    """Represents a class of an exported project.

    :ivar category: The class category.
    :vartype category: str
    """

    category: Optional[str] = rest_field()
    """The class category."""

    @overload
    def __init__(
        self,
        *,
        category: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCompositeEntity(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an entity in an exported project with composite entities enabled.

    :ivar composition_setting: The behavior to follow when the entity's components overlap with
     each other. Known values are: "separateComponents" and "combineComponents".
    :vartype composition_setting: str or
     ~azure.ai.language.text.authoring.models.CompositionSetting
    :ivar list: The list component of the entity.
    :vartype list: ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedEntityList
    :ivar prebuilts: The prebuilt entities components.
    :vartype prebuilts:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedPrebuiltEntity]
    :ivar category: The entity category.
    :vartype category: str
    """

    composition_setting: Optional[Union[str, "_models.CompositionSetting"]] = rest_field(name="compositionSetting")
    """The behavior to follow when the entity's components overlap with each other. Known values are:
     \"separateComponents\" and \"combineComponents\"."""
    list: Optional["_models.TextAnalysisAuthoringExportedEntityList"] = rest_field()
    """The list component of the entity."""
    prebuilts: Optional[List["_models.TextAnalysisAuthoringExportedPrebuiltEntity"]] = rest_field()
    """The prebuilt entities components."""
    category: Optional[str] = rest_field()
    """The entity category."""

    @overload
    def __init__(
        self,
        *,
        composition_setting: Optional[Union[str, "_models.CompositionSetting"]] = None,
        list: Optional["_models.TextAnalysisAuthoringExportedEntityList"] = None,
        prebuilts: Optional[List["_models.TextAnalysisAuthoringExportedPrebuiltEntity"]] = None,
        category: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomAbstractiveSummarizationDocument(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents an exported document for a custom abstractive summarization project.

    All required parameters must be populated in order to send to server.

    :ivar summary_location: Represents the summary file location in the blob store container
     associated with the project. Required.
    :vartype summary_location: str
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    summary_location: str = rest_field(name="summaryLocation")
    """Represents the summary file location in the blob store container associated with the project.
     Required."""
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        summary_location: str,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomAbstractiveSummarizationProjectAssets(
    ExportedProjectAssets, discriminator="CustomAbstractiveSummarization"
):  # pylint: disable=name-too-long
    """Represents the exported assets for an abstractive summarization project.

    All required parameters must be populated in order to send to server.

    :ivar documents: The list of documents belonging to this project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomAbstractiveSummarizationDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building an
     abstractive summarization models which are able to summarize long documents.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_ABSTRACTIVE_SUMMARIZATION
    """

    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomAbstractiveSummarizationDocument"]] = (
        rest_field()
    )
    """The list of documents belonging to this project."""
    project_kind: Literal[ProjectKind.CUSTOM_ABSTRACTIVE_SUMMARIZATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """The type of the project the assets belong to. Required. For building an abstractive
     summarization models which are able to summarize long documents."""

    @overload
    def __init__(
        self,
        *,
        documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomAbstractiveSummarizationDocument"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_ABSTRACTIVE_SUMMARIZATION, **kwargs)


class TextAnalysisAuthoringExportedCustomEntityRecognitionDocument(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported document for a custom entity recognition project.

    :ivar entities: The list of entity labels belonging to the document.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentEntityRegion]
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    entities: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityRegion"]] = rest_field()
    """The list of entity labels belonging to the document."""
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        entities: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityRegion"]] = None,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomEntityRecognitionProjectAssets(
    ExportedProjectAssets, discriminator="CustomEntityRecognition"
):  # pylint: disable=name-too-long
    """Represents the exported assets for a entity recognition project.

    All required parameters must be populated in order to send to server.

    :ivar entities: The list of entities belonging to the project.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedEntity]
    :ivar documents: The list of documents belonging to the project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomEntityRecognitionDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building an
     extraction model to identify your domain categories using your own data.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_ENTITY_RECOGNITION
    """

    entities: Optional[List["_models.TextAnalysisAuthoringExportedEntity"]] = rest_field()
    """The list of entities belonging to the project."""
    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomEntityRecognitionDocument"]] = rest_field()
    """The list of documents belonging to the project."""
    project_kind: Literal[ProjectKind.CUSTOM_ENTITY_RECOGNITION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """The type of the project the assets belong to. Required. For building an extraction model to
     identify your domain categories using your own data."""

    @overload
    def __init__(
        self,
        *,
        entities: Optional[List["_models.TextAnalysisAuthoringExportedEntity"]] = None,
        documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomEntityRecognitionDocument"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_ENTITY_RECOGNITION, **kwargs)


class TextAnalysisAuthoringExportedCustomHealthcareDocument(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported document for a CustomHealthcare project.

    :ivar entities: The list of entity labels belonging to the document.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentEntityRegion]
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    entities: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityRegion"]] = rest_field()
    """The list of entity labels belonging to the document."""
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        entities: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityRegion"]] = None,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomHealthcareProjectAssets(
    ExportedProjectAssets, discriminator="CustomHealthcare"
):  # pylint: disable=name-too-long
    """Represents the exported assets for a CustomHealthcare project.

    All required parameters must be populated in order to send to server.

    :ivar entities: The list of entities belonging to the project.
    :vartype entities:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCompositeEntity]
    :ivar documents: The list of documents belonging to the project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomHealthcareDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building an
     text analytics for health model to identify your health domain data.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_HEALTHCARE
    """

    entities: Optional[List["_models.TextAnalysisAuthoringExportedCompositeEntity"]] = rest_field()
    """The list of entities belonging to the project."""
    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomHealthcareDocument"]] = rest_field()
    """The list of documents belonging to the project."""
    project_kind: Literal[ProjectKind.CUSTOM_HEALTHCARE] = rest_discriminator(name="projectKind")  # type: ignore
    """The type of the project the assets belong to. Required. For building an text analytics for
     health model to identify your health domain data."""

    @overload
    def __init__(
        self,
        *,
        entities: Optional[List["_models.TextAnalysisAuthoringExportedCompositeEntity"]] = None,
        documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomHealthcareDocument"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_HEALTHCARE, **kwargs)


class TextAnalysisAuthoringExportedCustomMultiLabelClassificationDocument(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents an exported document of a custom multi-label classification project.

    :ivar classes: The document classes.
    :vartype classes:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentClass]
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    classes: Optional[List["_models.TextAnalysisAuthoringExportedDocumentClass"]] = rest_field()
    """The document classes."""
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        classes: Optional[List["_models.TextAnalysisAuthoringExportedDocumentClass"]] = None,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomMultiLabelClassificationProjectAssets(
    ExportedProjectAssets, discriminator="CustomMultiLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the exported assets for a custom multi-label classification project.

    All required parameters must be populated in order to send to server.

    :ivar classes: The list of classes in the project.
    :vartype classes:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedClass]
    :ivar documents: The list of documents in the project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomMultiLabelClassificationDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building a
     classification model to classify text using your own data. Each file can have one or many
     labels. For example, file 1 is classified as A, B, and C and file 2 is classified as B and C.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_MULTI_LABEL_CLASSIFICATION
    """

    classes: Optional[List["_models.TextAnalysisAuthoringExportedClass"]] = rest_field()
    """The list of classes in the project."""
    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomMultiLabelClassificationDocument"]] = (
        rest_field()
    )
    """The list of documents in the project."""
    project_kind: Literal[ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """The type of the project the assets belong to. Required. For building a classification model to
     classify text using your own data. Each file can have one or many labels. For example, file 1
     is classified as A, B, and C and file 2 is classified as B and C."""

    @overload
    def __init__(
        self,
        *,
        classes: Optional[List["_models.TextAnalysisAuthoringExportedClass"]] = None,
        documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomMultiLabelClassificationDocument"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_MULTI_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringExportedCustomSingleLabelClassificationDocument(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents an exported document for a custom single-label classification project.

    :ivar class_property: The class of the documents.
    :vartype class_property:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentClass
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    class_property: Optional["_models.TextAnalysisAuthoringExportedDocumentClass"] = rest_field(name="class")
    """The class of the documents."""
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        class_property: Optional["_models.TextAnalysisAuthoringExportedDocumentClass"] = None,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomSingleLabelClassificationProjectAssets(
    ExportedProjectAssets, discriminator="CustomSingleLabelClassification"
):  # pylint: disable=name-too-long
    """Represents the exported assets for a single-label classification project.

    All required parameters must be populated in order to send to server.

    :ivar classes: The list of classes belonging to this project.
    :vartype classes:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedClass]
    :ivar documents: The list of documents belonging to this project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomSingleLabelClassificationDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building a
     classification model to classify text using your own data. Each file will have only one label.
     For example, file 1 is classified as A and file 2 is classified as B.
    :vartype project_kind: str or
     ~azure.ai.language.text.authoring.models.CUSTOM_SINGLE_LABEL_CLASSIFICATION
    """

    classes: Optional[List["_models.TextAnalysisAuthoringExportedClass"]] = rest_field()
    """The list of classes belonging to this project."""
    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomSingleLabelClassificationDocument"]] = (
        rest_field()
    )
    """The list of documents belonging to this project."""
    project_kind: Literal[ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION] = rest_discriminator(name="projectKind")  # type: ignore # pylint: disable=line-too-long
    """The type of the project the assets belong to. Required. For building a classification model to
     classify text using your own data. Each file will have only one label. For example, file 1 is
     classified as A and file 2 is classified as B."""

    @overload
    def __init__(
        self,
        *,
        classes: Optional[List["_models.TextAnalysisAuthoringExportedClass"]] = None,
        documents: Optional[
            List["_models.TextAnalysisAuthoringExportedCustomSingleLabelClassificationDocument"]
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_SINGLE_LABEL_CLASSIFICATION, **kwargs)


class TextAnalysisAuthoringExportedCustomTextSentimentDocument(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported document for a custom text sentiment project.

    :ivar sentiment_spans:
    :vartype sentiment_spans:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentSentimentLabel]
    :ivar location: The location of the document in the storage.
    :vartype location: str
    :ivar language: Represents the document language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar dataset: The dataset for this document. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    sentiment_spans: Optional[List["_models.TextAnalysisAuthoringExportedDocumentSentimentLabel"]] = rest_field(
        name="sentimentSpans"
    )
    location: Optional[str] = rest_field()
    """The location of the document in the storage."""
    language: Optional[str] = rest_field()
    """Represents the document language. This is BCP-47 representation of a language. For example, use
     \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    dataset: Optional[str] = rest_field()
    """The dataset for this document. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        sentiment_spans: Optional[List["_models.TextAnalysisAuthoringExportedDocumentSentimentLabel"]] = None,
        location: Optional[str] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedCustomTextSentimentProjectAssets(
    ExportedProjectAssets, discriminator="CustomTextSentiment"
):  # pylint: disable=name-too-long
    """Represents the exported assets for a custom text sentiment project.

    All required parameters must be populated in order to send to server.

    :ivar documents: The list of documents belonging to the project.
    :vartype documents:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedCustomTextSentimentDocument]
    :ivar project_kind: The type of the project the assets belong to. Required. For building a
     sentiment models which are able to extract sentiment for long documents.
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.CUSTOM_TEXT_SENTIMENT
    """

    documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomTextSentimentDocument"]] = rest_field()
    """The list of documents belonging to the project."""
    project_kind: Literal[ProjectKind.CUSTOM_TEXT_SENTIMENT] = rest_discriminator(name="projectKind")  # type: ignore
    """The type of the project the assets belong to. Required. For building a sentiment models which
     are able to extract sentiment for long documents."""

    @overload
    def __init__(
        self,
        *,
        documents: Optional[List["_models.TextAnalysisAuthoringExportedCustomTextSentimentDocument"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CUSTOM_TEXT_SENTIMENT, **kwargs)


class TextAnalysisAuthoringExportedDocumentClass(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a classification label for a document.

    :ivar category:
    :vartype category: str
    """

    category: Optional[str] = rest_field()

    @overload
    def __init__(
        self,
        *,
        category: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedDocumentEntityLabel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an entity label for a document.

    :ivar category: The entity category.
    :vartype category: str
    :ivar offset: Start position for the entity text.
    :vartype offset: int
    :ivar length: Length for the entity text.
    :vartype length: int
    """

    category: Optional[str] = rest_field()
    """The entity category."""
    offset: Optional[int] = rest_field()
    """Start position for the entity text."""
    length: Optional[int] = rest_field()
    """Length for the entity text."""

    @overload
    def __init__(
        self,
        *,
        category: Optional[str] = None,
        offset: Optional[int] = None,
        length: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedDocumentEntityRegion(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a region in a document for entity labeling.

    :ivar region_offset: Start position for the region.
    :vartype region_offset: int
    :ivar region_length: Length for the region text.
    :vartype region_length: int
    :ivar labels: The list of entity labels belonging to this region.
    :vartype labels:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedDocumentEntityLabel]
    """

    region_offset: Optional[int] = rest_field(name="regionOffset")
    """Start position for the region."""
    region_length: Optional[int] = rest_field(name="regionLength")
    """Length for the region text."""
    labels: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityLabel"]] = rest_field()
    """The list of entity labels belonging to this region."""

    @overload
    def __init__(
        self,
        *,
        region_offset: Optional[int] = None,
        region_length: Optional[int] = None,
        labels: Optional[List["_models.TextAnalysisAuthoringExportedDocumentEntityLabel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedDocumentSentimentLabel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an entity label for a document.

    :ivar category: The sentiment category. Known values are: "positive", "negative", and
     "neutral".
    :vartype category: str or ~azure.ai.language.text.authoring.models.Sentiment
    :ivar offset: Start position for the sentiment text.
    :vartype offset: int
    :ivar length: Length for the sentiment text.
    :vartype length: int
    """

    category: Optional[Union[str, "_models.Sentiment"]] = rest_field()
    """The sentiment category. Known values are: \"positive\", \"negative\", and \"neutral\"."""
    offset: Optional[int] = rest_field()
    """Start position for the sentiment text."""
    length: Optional[int] = rest_field()
    """Length for the sentiment text."""

    @overload
    def __init__(
        self,
        *,
        category: Optional[Union[str, "_models.Sentiment"]] = None,
        offset: Optional[int] = None,
        length: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedEntity(_model_base.Model):
    """Represents an entity in an exported project.

    :ivar category: The entity category.
    :vartype category: str
    :ivar description: Short description for entity category. Required when enabling synthetic data
     generation.
    :vartype description: str
    """

    category: Optional[str] = rest_field()
    """The entity category."""
    description: Optional[str] = rest_field()
    """Short description for entity category. Required when enabling synthetic data generation."""

    @overload
    def __init__(
        self,
        *,
        category: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedEntityList(_model_base.Model):
    """Represents a list component of an entity.

    :ivar sublists: The sub-lists of the list component.
    :vartype sublists:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedEntitySublist]
    """

    sublists: Optional[List["_models.TextAnalysisAuthoringExportedEntitySublist"]] = rest_field()
    """The sub-lists of the list component."""

    @overload
    def __init__(
        self,
        *,
        sublists: Optional[List["_models.TextAnalysisAuthoringExportedEntitySublist"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedEntityListSynonym(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list of synonyms inside a list component.

    :ivar language: Represents the language of the synonyms. This is BCP-47 representation of a
     language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar values_property: The list of synonyms.
    :vartype values_property: list[str]
    """

    language: Optional[str] = rest_field()
    """Represents the language of the synonyms. This is BCP-47 representation of a language. For
     example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    values_property: Optional[List[str]] = rest_field(name="values")
    """The list of synonyms."""

    @overload
    def __init__(
        self,
        *,
        language: Optional[str] = None,
        values_property: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedEntitySublist(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a sub-list inside a list component.

    :ivar list_key: The key of the sub-list.
    :vartype list_key: str
    :ivar synonyms: The phrases of that correspond to the sub-list.
    :vartype synonyms:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedEntityListSynonym]
    """

    list_key: Optional[str] = rest_field(name="listKey")
    """The key of the sub-list."""
    synonyms: Optional[List["_models.TextAnalysisAuthoringExportedEntityListSynonym"]] = rest_field()
    """The phrases of that correspond to the sub-list."""

    @overload
    def __init__(
        self,
        *,
        list_key: Optional[str] = None,
        synonyms: Optional[List["_models.TextAnalysisAuthoringExportedEntityListSynonym"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedModelJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a job to create or updated an exported model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedModelManifest(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the properties for the exported model manifest.


    :ivar model_files: The model files belonging to this model. Required.
    :vartype model_files:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringModelFile]
    """

    model_files: List["_models.TextAnalysisAuthoringModelFile"] = rest_field(name="modelFiles")
    """The model files belonging to this model. Required."""

    @overload
    def __init__(
        self,
        *,
        model_files: List["_models.TextAnalysisAuthoringModelFile"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedModelOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for creating or replacing an exported model.

    All required parameters must be populated in order to send to server.

    :ivar trained_model_label: The trained model label. Required.
    :vartype trained_model_label: str
    """

    trained_model_label: str = rest_field(name="trainedModelLabel")
    """The trained model label. Required."""

    @overload
    def __init__(
        self,
        *,
        trained_model_label: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedPrebuiltEntity(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported prebuilt entity component.

    All required parameters must be populated in order to send to server.

    :ivar category: The prebuilt entity category. Required.
    :vartype category: str
    """

    category: str = rest_field()
    """The prebuilt entity category. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportedTrainedModel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported trained model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar exported_model_name: The exported model name. Required.
    :vartype exported_model_name: str
    :ivar model_id: The model ID. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: The last trained date time of the model. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_exported_model_date_time: The last exported date time of the model. Required.
    :vartype last_exported_model_date_time: ~datetime.datetime
    :ivar model_expiration_date: The model expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    :ivar model_training_config_version: The model training config version. Required.
    :vartype model_training_config_version: str
    """

    exported_model_name: str = rest_field(name="exportedModelName", visibility=["read"])
    """The exported model name. Required."""
    model_id: str = rest_field(name="modelId")
    """The model ID. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """The last trained date time of the model. Required."""
    last_exported_model_date_time: datetime.datetime = rest_field(name="lastExportedModelDateTime", format="rfc3339")
    """The last exported date time of the model. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """The model expiration date. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """The model training config version. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_exported_model_date_time: datetime.datetime,
        model_expiration_date: datetime.date,
        model_training_config_version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringExportProjectJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of an export job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    :ivar result_url: The URL to use in order to download the exported project.
    :vartype result_url: str
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result_url: Optional[str] = rest_field(name="resultUrl")
    """The URL to use in order to download the exported project."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
        result_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringImportProjectJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of an import job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringLoadSnapshotJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of loading a snapshot job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringModelFile(_model_base.Model):
    """Represents the properties for the model file.


    :ivar name: The name of the file. Required.
    :vartype name: str
    :ivar content_uri: The URI to retrieve the content of the file. Required.
    :vartype content_uri: str
    """

    name: str = rest_field()
    """The name of the file. Required."""
    content_uri: str = rest_field(name="contentUri")
    """The URI to retrieve the content of the file. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        content_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringMultiLabelClassEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary of a class in a multi-label classification project.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringMultiLabelClassificationEvaluationSummary(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a multi-label classification project.


    :ivar classes: Represents the classes evaluation. Required.
    :vartype classes: dict[str,
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringMultiLabelClassEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    classes: Dict[str, "_models.TextAnalysisAuthoringMultiLabelClassEvaluationSummary"] = rest_field()
    """Represents the classes evaluation. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        classes: Dict[str, "_models.TextAnalysisAuthoringMultiLabelClassEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringPrebuiltEntity(_model_base.Model):
    """Represents a supported prebuilt entity.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar category: The prebuilt entity category. Required.
    :vartype category: str
    :ivar description: The description. Required.
    :vartype description: str
    :ivar examples: English examples for the entity. Required.
    :vartype examples: str
    """

    category: str = rest_field(visibility=["read"])
    """The prebuilt entity category. Required."""
    description: str = rest_field()
    """The description. Required."""
    examples: str = rest_field()
    """English examples for the entity. Required."""

    @overload
    def __init__(
        self,
        *,
        description: str,
        examples: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringProjectDeletionJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a project deletion job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringProjectDeployment(_model_base.Model):
    """Represents a project deployment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar deployment_name: Represents deployment name. Required.
    :vartype deployment_name: str
    :ivar model_id: Represents deployment modelId. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: Represents deployment last trained time. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_deployed_date_time: Represents deployment last deployed time. Required.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar deployment_expiration_date: Represents deployment expiration date in the runtime.
     Required.
    :vartype deployment_expiration_date: ~datetime.date
    :ivar model_training_config_version: Represents model training config version. Required.
    :vartype model_training_config_version: str
    :ivar assigned_resources: Represents the metadata of the assigned Azure resources. Required.
    :vartype assigned_resources:
     list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringDeploymentResource]
    """

    deployment_name: str = rest_field(name="deploymentName", visibility=["read"])
    """Represents deployment name. Required."""
    model_id: str = rest_field(name="modelId")
    """Represents deployment modelId. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """Represents deployment last trained time. Required."""
    last_deployed_date_time: datetime.datetime = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents deployment last deployed time. Required."""
    deployment_expiration_date: datetime.date = rest_field(name="deploymentExpirationDate")
    """Represents deployment expiration date in the runtime. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """Represents model training config version. Required."""
    assigned_resources: List["_models.TextAnalysisAuthoringDeploymentResource"] = rest_field(name="assignedResources")
    """Represents the metadata of the assigned Azure resources. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_deployed_date_time: datetime.datetime,
        deployment_expiration_date: datetime.date,
        model_training_config_version: str,
        assigned_resources: List["_models.TextAnalysisAuthoringDeploymentResource"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringProjectMetadata(_model_base.Model):
    """Represents the metadata of a project.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar created_date_time: Represents the project creation datetime. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_modified_date_time: Represents the project last modification datetime. Required.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_trained_date_time: Represents the project last training datetime.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_deployed_date_time: Represents the project last deployment datetime.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar project_kind: The project kind. Required. Known values are:
     "CustomSingleLabelClassification", "CustomMultiLabelClassification", "CustomEntityRecognition",
     "CustomAbstractiveSummarization", "CustomHealthcare", and "CustomTextSentiment".
    :vartype project_kind: str or ~azure.ai.language.text.authoring.models.ProjectKind
    :ivar storage_input_container_name: The storage container name. Required.
    :vartype storage_input_container_name: str
    :ivar settings: The project settings.
    :vartype settings: ~azure.ai.language.text.authoring.models.ProjectSettings
    :ivar project_name: The new project name. Required.
    :vartype project_name: str
    :ivar multilingual: Whether the project would be used for multiple languages or not.
    :vartype multilingual: bool
    :ivar description: The project description.
    :vartype description: str
    :ivar language: The project language. This is BCP-47 representation of a language. For example,
     use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    """

    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Represents the project creation datetime. Required."""
    last_modified_date_time: datetime.datetime = rest_field(name="lastModifiedDateTime", format="rfc3339")
    """Represents the project last modification datetime. Required."""
    last_trained_date_time: Optional[datetime.datetime] = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """Represents the project last training datetime."""
    last_deployed_date_time: Optional[datetime.datetime] = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents the project last deployment datetime."""
    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind")
    """The project kind. Required. Known values are: \"CustomSingleLabelClassification\",
     \"CustomMultiLabelClassification\", \"CustomEntityRecognition\",
     \"CustomAbstractiveSummarization\", \"CustomHealthcare\", and \"CustomTextSentiment\"."""
    storage_input_container_name: str = rest_field(name="storageInputContainerName")
    """The storage container name. Required."""
    settings: Optional["_models.ProjectSettings"] = rest_field()
    """The project settings."""
    project_name: str = rest_field(name="projectName", visibility=["read"])
    """The new project name. Required."""
    multilingual: Optional[bool] = rest_field()
    """Whether the project would be used for multiple languages or not."""
    description: Optional[str] = rest_field()
    """The project description."""
    language: str = rest_field()
    """The project language. This is BCP-47 representation of a language. For example, use \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_modified_date_time: datetime.datetime,
        project_kind: Union[str, "_models.ProjectKind"],
        storage_input_container_name: str,
        language: str,
        last_trained_date_time: Optional[datetime.datetime] = None,
        last_deployed_date_time: Optional[datetime.datetime] = None,
        settings: Optional["_models.ProjectSettings"] = None,
        multilingual: Optional[bool] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringProjectTrainedModel(_model_base.Model):
    """Represents a trained model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar label: The trained model label. Required.
    :vartype label: str
    :ivar model_id: The model ID. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: The last trained date time of the model. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_training_duration_in_seconds: The duration of the model's last training request in
     seconds. Required.
    :vartype last_training_duration_in_seconds: int
    :ivar model_expiration_date: The model expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    :ivar model_training_config_version: The model training config version. Required.
    :vartype model_training_config_version: str
    :ivar has_snapshot: The flag to indicate if the trained model has a snapshot ready. Required.
    :vartype has_snapshot: bool
    """

    label: str = rest_field(visibility=["read"])
    """The trained model label. Required."""
    model_id: str = rest_field(name="modelId")
    """The model ID. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """The last trained date time of the model. Required."""
    last_training_duration_in_seconds: int = rest_field(name="lastTrainingDurationInSeconds")
    """The duration of the model's last training request in seconds. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """The model expiration date. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """The model training config version. Required."""
    has_snapshot: bool = rest_field(name="hasSnapshot")
    """The flag to indicate if the trained model has a snapshot ready. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_training_duration_in_seconds: int,
        model_expiration_date: datetime.date,
        model_training_config_version: str,
        has_snapshot: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSentimentEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a sentiment in a custom sentiment project.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSingleLabelClassEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a class in a single-label classification project.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSingleLabelClassificationEvaluationSummary(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom single-label classification project.


    :ivar confusion_matrix: Represents the confusion matrix between two classes (the two classes
     can be the same). The matrix is between the class that was labelled and the class that was
     predicted. Required.
    :vartype confusion_matrix:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringConfusionMatrix
    :ivar classes: Represents the classes evaluation. Required.
    :vartype classes: dict[str,
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSingleLabelClassEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix" = rest_field(name="confusionMatrix")
    """Represents the confusion matrix between two classes (the two classes can be the same). The
     matrix is between the class that was labelled and the class that was predicted. Required."""
    classes: Dict[str, "_models.TextAnalysisAuthoringSingleLabelClassEvaluationSummary"] = rest_field()
    """Represents the classes evaluation. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix",
        classes: Dict[str, "_models.TextAnalysisAuthoringSingleLabelClassEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSpanSentimentEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom sentiment project.


    :ivar confusion_matrix: Represents the confusion matrix between two sentiments (the two
     sentiments can be the same). The matrix is between the sentiment that was labelled and the
     sentiment that was predicted. Required.
    :vartype confusion_matrix:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringConfusionMatrix
    :ivar sentiments: Represents the sentiment evaluation. Required.
    :vartype sentiments: dict[str,
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSentimentEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix" = rest_field(name="confusionMatrix")
    """Represents the confusion matrix between two sentiments (the two sentiments can be the same).
     The matrix is between the sentiment that was labelled and the sentiment that was predicted.
     Required."""
    sentiments: Dict[str, "_models.TextAnalysisAuthoringSentimentEvaluationSummary"] = rest_field()
    """Represents the sentiment evaluation. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confusion_matrix: "_models.TextAnalysisAuthoringConfusionMatrix",
        sentiments: Dict[str, "_models.TextAnalysisAuthoringSentimentEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSubTrainingJobState(_model_base.Model):
    """Represents the detailed state of a training sub-operation.


    :ivar percent_complete: Represents progress percentage. Required.
    :vartype percent_complete: int
    :ivar start_date_time: Represents the start date time.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: Represents the end date time.
    :vartype end_date_time: ~datetime.datetime
    :ivar status: Represents the status of the sub-operation. Required. Known values are:
     "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling", and
     "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    """

    percent_complete: int = rest_field(name="percentComplete")
    """Represents progress percentage. Required."""
    start_date_time: Optional[datetime.datetime] = rest_field(name="startDateTime", format="rfc3339")
    """Represents the start date time."""
    end_date_time: Optional[datetime.datetime] = rest_field(name="endDateTime", format="rfc3339")
    """Represents the end date time."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """Represents the status of the sub-operation. Required. Known values are: \"notStarted\",
     \"running\", \"succeeded\", \"failed\", \"cancelled\", \"cancelling\", and
     \"partiallyCompleted\"."""

    @overload
    def __init__(
        self,
        *,
        percent_complete: int,
        status: Union[str, "_models.JobStatus"],
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSupportedLanguage(_model_base.Model):
    """Represents a supported language.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar language_name: The language name. Required.
    :vartype language_name: str
    :ivar language_code: The language code. This is BCP-47 representation of a language. For
     example, "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language_code: str
    """

    language_name: str = rest_field(name="languageName", visibility=["read"])
    """The language name. Required."""
    language_code: str = rest_field(name="languageCode")
    """The language code. This is BCP-47 representation of a language. For example, \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        language_code: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSwapDeploymentsJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a deployment job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringSwapDeploymentsOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for swapping two deployments together.

    All required parameters must be populated in order to send to server.

    :ivar first_deployment_name: Represents the first deployment name. Required.
    :vartype first_deployment_name: str
    :ivar second_deployment_name: Represents the second deployment name. Required.
    :vartype second_deployment_name: str
    """

    first_deployment_name: str = rest_field(name="firstDeploymentName")
    """Represents the first deployment name. Required."""
    second_deployment_name: str = rest_field(name="secondDeploymentName")
    """Represents the second deployment name. Required."""

    @overload
    def __init__(
        self,
        *,
        first_deployment_name: str,
        second_deployment_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringTextSentimentEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for a custom text sentiment project.


    :ivar span_sentiments_evaluation: Represents evaluation of span level sentiments. Required.
    :vartype span_sentiments_evaluation:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSpanSentimentEvaluationSummary
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    span_sentiments_evaluation: "_models.TextAnalysisAuthoringSpanSentimentEvaluationSummary" = rest_field(
        name="spanSentimentsEvaluation"
    )
    """Represents evaluation of span level sentiments. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        span_sentiments_evaluation: "_models.TextAnalysisAuthoringSpanSentimentEvaluationSummary",
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringTrainingConfigVersion(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a training config version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar training_config_version: Represents the version of the config. Required.
    :vartype training_config_version: str
    :ivar model_expiration_date: Represents the training config version expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    """

    training_config_version: str = rest_field(name="trainingConfigVersion", visibility=["read"])
    """Represents the version of the config. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """Represents the training config version expiration date. Required."""

    @overload
    def __init__(
        self,
        *,
        model_expiration_date: datetime.date,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringTrainingJobOptions(_model_base.Model):
    """Represents the options for starting a new training job.

    All required parameters must be populated in order to send to server.

    :ivar model_label: Represents the output model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. Required.
    :vartype training_config_version: str
    :ivar evaluation_options: Represents the evaluation options. By default, the evaluation kind is
     percentage, with training split percentage as 80, and testing split percentage as 20.
    :vartype evaluation_options:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions
    :ivar data_generation_settings: Represents the settings for using data generation as part of
     training a custom model.
    :vartype data_generation_settings:
     ~azure.ai.language.text.authoring.models.DataGenerationSettings
    """

    model_label: str = rest_field(name="modelLabel")
    """Represents the output model label. Required."""
    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents training config version. Required."""
    evaluation_options: Optional["_models.TextAnalysisAuthoringEvaluationOptions"] = rest_field(
        name="evaluationOptions"
    )
    """Represents the evaluation options. By default, the evaluation kind is percentage, with training
     split percentage as 80, and testing split percentage as 20."""
    data_generation_settings: Optional["_models.DataGenerationSettings"] = rest_field(name="dataGenerationSettings")
    """Represents the settings for using data generation as part of training a custom model."""

    @overload
    def __init__(
        self,
        *,
        model_label: str,
        training_config_version: str,
        evaluation_options: Optional["_models.TextAnalysisAuthoringEvaluationOptions"] = None,
        data_generation_settings: Optional["_models.DataGenerationSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringTrainingJobResult(_model_base.Model):
    """Represents the output of a training job.


    :ivar model_label: Represents trained model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. Required.
    :vartype training_config_version: str
    :ivar training_status: Represents model train status. Required.
    :vartype training_status:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSubTrainingJobState
    :ivar evaluation_status: Represents model evaluation status.
    :vartype evaluation_status:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringSubTrainingJobState
    :ivar estimated_end_date_time: Represents the estimate end date time for training and
     evaluation.
    :vartype estimated_end_date_time: ~datetime.datetime
    """

    model_label: str = rest_field(name="modelLabel")
    """Represents trained model label. Required."""
    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents training config version. Required."""
    training_status: "_models.TextAnalysisAuthoringSubTrainingJobState" = rest_field(name="trainingStatus")
    """Represents model train status. Required."""
    evaluation_status: Optional["_models.TextAnalysisAuthoringSubTrainingJobState"] = rest_field(
        name="evaluationStatus"
    )
    """Represents model evaluation status."""
    estimated_end_date_time: Optional[datetime.datetime] = rest_field(name="estimatedEndDateTime", format="rfc3339")
    """Represents the estimate end date time for training and evaluation."""

    @overload
    def __init__(
        self,
        *,
        model_label: str,
        training_config_version: str,
        training_status: "_models.TextAnalysisAuthoringSubTrainingJobState",
        evaluation_status: Optional["_models.TextAnalysisAuthoringSubTrainingJobState"] = None,
        estimated_end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringTrainingJobState(_model_base.Model):
    """Represents the state of a training job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    :ivar result: Represents training tasks detailed result. Required.
    :vartype result:
     ~azure.ai.language.text.authoring.models.TextAnalysisAuthoringTrainingJobResult
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result: "_models.TextAnalysisAuthoringTrainingJobResult" = rest_field()
    """Represents training tasks detailed result. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        result: "_models.TextAnalysisAuthoringTrainingJobResult",
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringUnassignDeploymentResourcesJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a unassign deployment resources job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.text.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.text.authoring.models.TextAnalysisAuthoringWarning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.text.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.TextAnalysisAuthoringWarning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringUnassignDeploymentResourcesOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options to unassign Azure resources from a project.

    All required parameters must be populated in order to send to server.

    :ivar assigned_resource_ids: Represents the assigned resource IDs to be unassigned. Required.
    :vartype assigned_resource_ids: list[str]
    """

    assigned_resource_ids: List[str] = rest_field(name="assignedResourceIds")
    """Represents the assigned resource IDs to be unassigned. Required."""

    @overload
    def __init__(
        self,
        *,
        assigned_resource_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextAnalysisAuthoringWarning(_model_base.Model):
    """Represents a warning that was encountered while executing the request.


    :ivar code: The warning code. Required.
    :vartype code: str
    :ivar message: The warning message. Required.
    :vartype message: str
    """

    code: str = rest_field()
    """The warning code. Required."""
    message: str = rest_field()
    """The warning message. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
