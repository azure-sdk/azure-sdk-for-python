# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.trafficmanager.aio import TrafficManagerManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTrafficManagerManagementProfilesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(TrafficManagerManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_check_traffic_manager_relative_dns_name_availability(self, resource_group):
        response = await self.client.profiles.check_traffic_manager_relative_dns_name_availability(
            parameters={"name": "str", "type": "str"},
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_check_traffic_manager_name_availability_v2(self, resource_group):
        response = await self.client.profiles.check_traffic_manager_name_availability_v2(
            parameters={"name": "str", "type": "str"},
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list_by_resource_group(self, resource_group):
        response = self.client.profiles.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2022-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_list_by_subscription(self, resource_group):
        response = self.client.profiles.list_by_subscription(
            api_version="2022-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_get(self, resource_group):
        response = await self.client.profiles.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_create_or_update(self, resource_group):
        response = await self.client.profiles.create_or_update(
            resource_group_name=resource_group.name,
            profile_name="str",
            parameters={
                "allowedEndpointRecordTypes": ["str"],
                "dnsConfig": {"fqdn": "str", "relativeName": "str", "ttl": 0},
                "endpoints": [
                    {
                        "alwaysServe": "str",
                        "customHeaders": [{"name": "str", "value": "str"}],
                        "endpointLocation": "str",
                        "endpointMonitorStatus": "str",
                        "endpointStatus": "str",
                        "geoMapping": ["str"],
                        "id": "str",
                        "minChildEndpoints": 0,
                        "minChildEndpointsIPv4": 0,
                        "minChildEndpointsIPv6": 0,
                        "name": "str",
                        "priority": 0,
                        "subnets": [{"first": "str", "last": "str", "scope": 0}],
                        "target": "str",
                        "targetResourceId": "str",
                        "type": "str",
                        "weight": 0,
                    }
                ],
                "id": "str",
                "location": "str",
                "maxReturn": 0,
                "monitorConfig": {
                    "customHeaders": [{"name": "str", "value": "str"}],
                    "expectedStatusCodeRanges": [{"max": 0, "min": 0}],
                    "intervalInSeconds": 0,
                    "path": "str",
                    "port": 0,
                    "profileMonitorStatus": "str",
                    "protocol": "str",
                    "timeoutInSeconds": 0,
                    "toleratedNumberOfFailures": 0,
                },
                "name": "str",
                "profileStatus": "str",
                "tags": {"str": "str"},
                "trafficRoutingMethod": "str",
                "trafficViewEnrollmentStatus": "str",
                "type": "str",
            },
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_delete(self, resource_group):
        response = await self.client.profiles.delete(
            resource_group_name=resource_group.name,
            profile_name="str",
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_profiles_update(self, resource_group):
        response = await self.client.profiles.update(
            resource_group_name=resource_group.name,
            profile_name="str",
            parameters={
                "allowedEndpointRecordTypes": ["str"],
                "dnsConfig": {"fqdn": "str", "relativeName": "str", "ttl": 0},
                "endpoints": [
                    {
                        "alwaysServe": "str",
                        "customHeaders": [{"name": "str", "value": "str"}],
                        "endpointLocation": "str",
                        "endpointMonitorStatus": "str",
                        "endpointStatus": "str",
                        "geoMapping": ["str"],
                        "id": "str",
                        "minChildEndpoints": 0,
                        "minChildEndpointsIPv4": 0,
                        "minChildEndpointsIPv6": 0,
                        "name": "str",
                        "priority": 0,
                        "subnets": [{"first": "str", "last": "str", "scope": 0}],
                        "target": "str",
                        "targetResourceId": "str",
                        "type": "str",
                        "weight": 0,
                    }
                ],
                "id": "str",
                "location": "str",
                "maxReturn": 0,
                "monitorConfig": {
                    "customHeaders": [{"name": "str", "value": "str"}],
                    "expectedStatusCodeRanges": [{"max": 0, "min": 0}],
                    "intervalInSeconds": 0,
                    "path": "str",
                    "port": 0,
                    "profileMonitorStatus": "str",
                    "protocol": "str",
                    "timeoutInSeconds": 0,
                    "toleratedNumberOfFailures": 0,
                },
                "name": "str",
                "profileStatus": "str",
                "tags": {"str": "str"},
                "trafficRoutingMethod": "str",
                "trafficViewEnrollmentStatus": "str",
                "type": "str",
            },
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...
