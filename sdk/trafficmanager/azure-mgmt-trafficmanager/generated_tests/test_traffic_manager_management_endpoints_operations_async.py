# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.trafficmanager.aio import TrafficManagerManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTrafficManagerManagementEndpointsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(TrafficManagerManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_endpoints_update(self, resource_group):
        response = await self.client.endpoints.update(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_type="str",
            endpoint_name="str",
            parameters={
                "alwaysServe": "str",
                "customHeaders": [{"name": "str", "value": "str"}],
                "endpointLocation": "str",
                "endpointMonitorStatus": "str",
                "endpointStatus": "str",
                "geoMapping": ["str"],
                "id": "str",
                "minChildEndpoints": 0,
                "minChildEndpointsIPv4": 0,
                "minChildEndpointsIPv6": 0,
                "name": "str",
                "priority": 0,
                "subnets": [{"first": "str", "last": "str", "scope": 0}],
                "target": "str",
                "targetResourceId": "str",
                "type": "str",
                "weight": 0,
            },
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_endpoints_get(self, resource_group):
        response = await self.client.endpoints.get(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_type="str",
            endpoint_name="str",
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_endpoints_create_or_update(self, resource_group):
        response = await self.client.endpoints.create_or_update(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_type="str",
            endpoint_name="str",
            parameters={
                "alwaysServe": "str",
                "customHeaders": [{"name": "str", "value": "str"}],
                "endpointLocation": "str",
                "endpointMonitorStatus": "str",
                "endpointStatus": "str",
                "geoMapping": ["str"],
                "id": "str",
                "minChildEndpoints": 0,
                "minChildEndpointsIPv4": 0,
                "minChildEndpointsIPv6": 0,
                "name": "str",
                "priority": 0,
                "subnets": [{"first": "str", "last": "str", "scope": 0}],
                "target": "str",
                "targetResourceId": "str",
                "type": "str",
                "weight": 0,
            },
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_endpoints_delete(self, resource_group):
        response = await self.client.endpoints.delete(
            resource_group_name=resource_group.name,
            profile_name="str",
            endpoint_type="str",
            endpoint_name="str",
            api_version="2022-04-01",
        )

        # please add some check logic here by yourself
        # ...
