# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Optional, TYPE_CHECKING, cast
from typing_extensions import Self

from azure.core.pipeline import policies
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.settings import settings
from azure.mgmt.core import ARMPipelineClient
from azure.mgmt.core.policies import ARMAutoResourceProviderRegistrationPolicy
from azure.mgmt.core.tools import get_arm_endpoints

from ._configuration import AVSClientConfiguration
from ._utils.serialization import Deserializer, Serializer
from .operations import (
    AddonsOperations,
    AuthorizationsOperations,
    CloudLinksOperations,
    ClustersOperations,
    DatastoresOperations,
    GlobalReachConnectionsOperations,
    HcxEnterpriseSitesOperations,
    IscsiPathsOperations,
    LocationsOperations,
    Operations,
    PlacementPoliciesOperations,
    PrivateCloudsOperations,
    ScriptCmdletsOperations,
    ScriptExecutionsOperations,
    ScriptPackagesOperations,
    VirtualMachinesOperations,
    WorkloadNetworkDhcpConfigurationsOperations,
    WorkloadNetworkDnsServicesOperations,
    WorkloadNetworkDnsZonesOperations,
    WorkloadNetworkGatewaysOperations,
    WorkloadNetworkPortMirroringProfilesOperations,
    WorkloadNetworkPublicIpsOperations,
    WorkloadNetworkSegmentsOperations,
    WorkloadNetworkVirtualMachinesOperations,
    WorkloadNetworkVmGroupsOperations,
    WorkloadNetworksOperations,
)

if TYPE_CHECKING:
    from azure.core.credentials import TokenCredential


class AVSClient:  # pylint: disable=too-many-instance-attributes
    """Azure VMware Solution API.

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.avs.operations.Operations
    :ivar addons: AddonsOperations operations
    :vartype addons: azure.mgmt.avs.operations.AddonsOperations
    :ivar authorizations: AuthorizationsOperations operations
    :vartype authorizations: azure.mgmt.avs.operations.AuthorizationsOperations
    :ivar cloud_links: CloudLinksOperations operations
    :vartype cloud_links: azure.mgmt.avs.operations.CloudLinksOperations
    :ivar clusters: ClustersOperations operations
    :vartype clusters: azure.mgmt.avs.operations.ClustersOperations
    :ivar datastores: DatastoresOperations operations
    :vartype datastores: azure.mgmt.avs.operations.DatastoresOperations
    :ivar global_reach_connections: GlobalReachConnectionsOperations operations
    :vartype global_reach_connections: azure.mgmt.avs.operations.GlobalReachConnectionsOperations
    :ivar hcx_enterprise_sites: HcxEnterpriseSitesOperations operations
    :vartype hcx_enterprise_sites: azure.mgmt.avs.operations.HcxEnterpriseSitesOperations
    :ivar iscsi_paths: IscsiPathsOperations operations
    :vartype iscsi_paths: azure.mgmt.avs.operations.IscsiPathsOperations
    :ivar locations: LocationsOperations operations
    :vartype locations: azure.mgmt.avs.operations.LocationsOperations
    :ivar placement_policies: PlacementPoliciesOperations operations
    :vartype placement_policies: azure.mgmt.avs.operations.PlacementPoliciesOperations
    :ivar private_clouds: PrivateCloudsOperations operations
    :vartype private_clouds: azure.mgmt.avs.operations.PrivateCloudsOperations
    :ivar script_cmdlets: ScriptCmdletsOperations operations
    :vartype script_cmdlets: azure.mgmt.avs.operations.ScriptCmdletsOperations
    :ivar script_executions: ScriptExecutionsOperations operations
    :vartype script_executions: azure.mgmt.avs.operations.ScriptExecutionsOperations
    :ivar script_packages: ScriptPackagesOperations operations
    :vartype script_packages: azure.mgmt.avs.operations.ScriptPackagesOperations
    :ivar virtual_machines: VirtualMachinesOperations operations
    :vartype virtual_machines: azure.mgmt.avs.operations.VirtualMachinesOperations
    :ivar workload_network_dhcp_configurations: WorkloadNetworkDhcpConfigurationsOperations
     operations
    :vartype workload_network_dhcp_configurations:
     azure.mgmt.avs.operations.WorkloadNetworkDhcpConfigurationsOperations
    :ivar workload_network_dns_services: WorkloadNetworkDnsServicesOperations operations
    :vartype workload_network_dns_services:
     azure.mgmt.avs.operations.WorkloadNetworkDnsServicesOperations
    :ivar workload_network_dns_zones: WorkloadNetworkDnsZonesOperations operations
    :vartype workload_network_dns_zones:
     azure.mgmt.avs.operations.WorkloadNetworkDnsZonesOperations
    :ivar workload_network_gateways: WorkloadNetworkGatewaysOperations operations
    :vartype workload_network_gateways: azure.mgmt.avs.operations.WorkloadNetworkGatewaysOperations
    :ivar workload_network_port_mirroring_profiles: WorkloadNetworkPortMirroringProfilesOperations
     operations
    :vartype workload_network_port_mirroring_profiles:
     azure.mgmt.avs.operations.WorkloadNetworkPortMirroringProfilesOperations
    :ivar workload_network_public_ips: WorkloadNetworkPublicIpsOperations operations
    :vartype workload_network_public_ips:
     azure.mgmt.avs.operations.WorkloadNetworkPublicIpsOperations
    :ivar workload_network_segments: WorkloadNetworkSegmentsOperations operations
    :vartype workload_network_segments: azure.mgmt.avs.operations.WorkloadNetworkSegmentsOperations
    :ivar workload_network_virtual_machines: WorkloadNetworkVirtualMachinesOperations operations
    :vartype workload_network_virtual_machines:
     azure.mgmt.avs.operations.WorkloadNetworkVirtualMachinesOperations
    :ivar workload_network_vm_groups: WorkloadNetworkVmGroupsOperations operations
    :vartype workload_network_vm_groups:
     azure.mgmt.avs.operations.WorkloadNetworkVmGroupsOperations
    :ivar workload_networks: WorkloadNetworksOperations operations
    :vartype workload_networks: azure.mgmt.avs.operations.WorkloadNetworksOperations
    :param credential: Credential used to authenticate requests to the service. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
    :type subscription_id: str
    :param base_url: Service host. Default value is None.
    :type base_url: str
    :keyword api_version: The API version to use for this operation. Default value is "2023-09-01".
     Note that overriding this default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self, credential: "TokenCredential", subscription_id: str, base_url: Optional[str] = None, **kwargs: Any
    ) -> None:
        _endpoint = "{endpoint}"
        _cloud = kwargs.pop("cloud_setting", None) or settings.current.azure_cloud  # type: ignore
        _endpoints = get_arm_endpoints(_cloud)
        if not base_url:
            base_url = _endpoints["resource_manager"]
        credential_scopes = kwargs.pop("credential_scopes", _endpoints["credential_scopes"])
        self._config = AVSClientConfiguration(
            credential=credential,
            subscription_id=subscription_id,
            base_url=cast(str, base_url),
            credential_scopes=credential_scopes,
            **kwargs
        )

        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                ARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: ARMPipelineClient = ARMPipelineClient(base_url=cast(str, _endpoint), policies=_policies, **kwargs)

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)
        self.addons = AddonsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.authorizations = AuthorizationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.cloud_links = CloudLinksOperations(self._client, self._config, self._serialize, self._deserialize)
        self.clusters = ClustersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.datastores = DatastoresOperations(self._client, self._config, self._serialize, self._deserialize)
        self.global_reach_connections = GlobalReachConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.hcx_enterprise_sites = HcxEnterpriseSitesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.iscsi_paths = IscsiPathsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.locations = LocationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.placement_policies = PlacementPoliciesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.private_clouds = PrivateCloudsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.script_cmdlets = ScriptCmdletsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.script_executions = ScriptExecutionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.script_packages = ScriptPackagesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.virtual_machines = VirtualMachinesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_dhcp_configurations = WorkloadNetworkDhcpConfigurationsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_dns_services = WorkloadNetworkDnsServicesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_dns_zones = WorkloadNetworkDnsZonesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_gateways = WorkloadNetworkGatewaysOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_port_mirroring_profiles = WorkloadNetworkPortMirroringProfilesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_public_ips = WorkloadNetworkPublicIpsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_segments = WorkloadNetworkSegmentsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_virtual_machines = WorkloadNetworkVirtualMachinesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_network_vm_groups = WorkloadNetworkVmGroupsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.workload_networks = WorkloadNetworksOperations(
            self._client, self._config, self._serialize, self._deserialize
        )

    def send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> HttpResponse:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = client.send_request(request)
        <HttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.HttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.base_url", self._config.base_url, "str", skip_quote=True),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    def close(self) -> None:
        self._client.close()

    def __enter__(self) -> Self:
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details: Any) -> None:
        self._client.__exit__(*exc_details)
