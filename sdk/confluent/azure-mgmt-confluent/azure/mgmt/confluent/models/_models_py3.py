# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccessCreateRoleBindingRequestModel(_serialization.Model):
    """Create role binding request model.

    :ivar principal: The principal User or Group to bind the role to.
    :vartype principal: str
    :ivar role_name: The name of the role to bind to the principal.
    :vartype role_name: str
    :ivar crn_pattern: A CRN that specifies the scope and resource patterns necessary for the role
     to bind.
    :vartype crn_pattern: str
    """

    _attribute_map = {
        "principal": {"key": "principal", "type": "str"},
        "role_name": {"key": "role_name", "type": "str"},
        "crn_pattern": {"key": "crn_pattern", "type": "str"},
    }

    def __init__(
        self,
        *,
        principal: Optional[str] = None,
        role_name: Optional[str] = None,
        crn_pattern: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword principal: The principal User or Group to bind the role to.
        :paramtype principal: str
        :keyword role_name: The name of the role to bind to the principal.
        :paramtype role_name: str
        :keyword crn_pattern: A CRN that specifies the scope and resource patterns necessary for the
         role to bind.
        :paramtype crn_pattern: str
        """
        super().__init__(**kwargs)
        self.principal = principal
        self.role_name = role_name
        self.crn_pattern = crn_pattern


class AccessInvitedUserDetails(_serialization.Model):
    """Details of the user being invited.

    :ivar invited_email: UPN/Email of the user who is being invited.
    :vartype invited_email: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    """

    _attribute_map = {
        "invited_email": {"key": "invitedEmail", "type": "str"},
        "auth_type": {"key": "auth_type", "type": "str"},
    }

    def __init__(self, *, invited_email: Optional[str] = None, auth_type: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword invited_email: UPN/Email of the user who is being invited.
        :paramtype invited_email: str
        :keyword auth_type: Auth type of the user.
        :paramtype auth_type: str
        """
        super().__init__(**kwargs)
        self.invited_email = invited_email
        self.auth_type = auth_type


class AccessInviteUserAccountModel(_serialization.Model):
    """Invite User Account model.

    :ivar organization_id: Id of the organization.
    :vartype organization_id: str
    :ivar email: Email of the logged in user.
    :vartype email: str
    :ivar upn: Upn of the logged in user.
    :vartype upn: str
    :ivar invited_user_details: Details of the user who is being invited.
    :vartype invited_user_details: ~azure.mgmt.confluent.models.AccessInvitedUserDetails
    """

    _attribute_map = {
        "organization_id": {"key": "organizationId", "type": "str"},
        "email": {"key": "email", "type": "str"},
        "upn": {"key": "upn", "type": "str"},
        "invited_user_details": {"key": "invitedUserDetails", "type": "AccessInvitedUserDetails"},
    }

    def __init__(
        self,
        *,
        organization_id: Optional[str] = None,
        email: Optional[str] = None,
        upn: Optional[str] = None,
        invited_user_details: Optional["_models.AccessInvitedUserDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword organization_id: Id of the organization.
        :paramtype organization_id: str
        :keyword email: Email of the logged in user.
        :paramtype email: str
        :keyword upn: Upn of the logged in user.
        :paramtype upn: str
        :keyword invited_user_details: Details of the user who is being invited.
        :paramtype invited_user_details: ~azure.mgmt.confluent.models.AccessInvitedUserDetails
        """
        super().__init__(**kwargs)
        self.organization_id = organization_id
        self.email = email
        self.upn = upn
        self.invited_user_details = invited_user_details


class AccessListClusterSuccessResponse(_serialization.Model):
    """Details of the clusters returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of clusters.
    :vartype data: list[~azure.mgmt.confluent.models.ClusterRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[ClusterRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.ClusterRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: List of clusters.
        :paramtype data: list[~azure.mgmt.confluent.models.ClusterRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessListEnvironmentsSuccessResponse(_serialization.Model):
    """Details of the environments returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the  environment list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Environment list data.
    :vartype data: list[~azure.mgmt.confluent.models.EnvironmentRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[EnvironmentRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.EnvironmentRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the  environment list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: Environment list data.
        :paramtype data: list[~azure.mgmt.confluent.models.EnvironmentRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessListInvitationsSuccessResponse(_serialization.Model):
    """List invitations success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the invitations list.
    :vartype data: list[~azure.mgmt.confluent.models.InvitationRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[InvitationRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.InvitationRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: Data of the invitations list.
        :paramtype data: list[~azure.mgmt.confluent.models.InvitationRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessListRoleBindingsSuccessResponse(_serialization.Model):
    """Details of the role bindings returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of role binding.
    :vartype data: list[~azure.mgmt.confluent.models.RoleBindingRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[RoleBindingRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.RoleBindingRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: List of role binding.
        :paramtype data: list[~azure.mgmt.confluent.models.RoleBindingRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessListServiceAccountsSuccessResponse(_serialization.Model):
    """List service accounts success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the service accounts list.
    :vartype data: list[~azure.mgmt.confluent.models.ServiceAccountRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[ServiceAccountRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.ServiceAccountRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: Data of the service accounts list.
        :paramtype data: list[~azure.mgmt.confluent.models.ServiceAccountRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessListUsersSuccessResponse(_serialization.Model):
    """List users success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the users list.
    :vartype data: list[~azure.mgmt.confluent.models.UserRecord]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[UserRecord]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.UserRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: Data of the users list.
        :paramtype data: list[~azure.mgmt.confluent.models.UserRecord]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class AccessRoleBindingNameListSuccessResponse(_serialization.Model):
    """Details of the role binding names returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of role binding names.
    :vartype data: list[str]
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "ConfluentListMetadata"},
        "data": {"key": "data", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of response.
        :paramtype kind: str
        :keyword metadata: Metadata of the list.
        :paramtype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
        :keyword data: List of role binding names.
        :paramtype data: list[str]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.metadata = metadata
        self.data = data


class APIKeyOwnerEntity(_serialization.Model):
    """API Key Owner details which can be a user or service account.

    :ivar id: API Key owner id.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    :ivar kind: Type of the owner service or user account.
    :vartype kind: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        kind: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: API Key owner id.
        :paramtype id: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        :keyword kind: Type of the owner service or user account.
        :paramtype kind: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.related = related
        self.resource_name = resource_name
        self.kind = kind


class APIKeyRecord(_serialization.Model):
    """Details API key.

    :ivar kind: Type of api key.
    :vartype kind: str
    :ivar id: Id of the api key.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the API Key.
    :vartype spec: ~azure.mgmt.confluent.models.APIKeySpecEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "SCMetadataEntity"},
        "spec": {"key": "properties.spec", "type": "APIKeySpecEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.APIKeySpecEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of api key.
        :paramtype kind: str
        :keyword id: Id of the api key.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
        :keyword spec: Specification of the API Key.
        :paramtype spec: ~azure.mgmt.confluent.models.APIKeySpecEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.spec = spec


class APIKeyResourceEntity(_serialization.Model):
    """API Key Resource details which can be kafka cluster or schema registry cluster.

    :ivar id: Id of the resource.
    :vartype id: str
    :ivar environment: The environment of the api key.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the api key resource object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    :ivar kind: Type of the owner which can be service or user account.
    :vartype kind: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "environment": {"key": "environment", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        kind: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Id of the resource.
        :paramtype id: str
        :keyword environment: The environment of the api key.
        :paramtype environment: str
        :keyword related: API URL for accessing or modifying the api key resource object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        :keyword kind: Type of the owner which can be service or user account.
        :paramtype kind: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.environment = environment
        self.related = related
        self.resource_name = resource_name
        self.kind = kind


class APIKeySpecEntity(_serialization.Model):
    """Spec of the API Key record.

    :ivar description: The description of the API Key.
    :vartype description: str
    :ivar name: The name of the API Key.
    :vartype name: str
    :ivar secret: API Key Secret.
    :vartype secret: str
    :ivar resource: Specification of the cluster.
    :vartype resource: ~azure.mgmt.confluent.models.APIKeyResourceEntity
    :ivar owner: Specification of the cluster.
    :vartype owner: ~azure.mgmt.confluent.models.APIKeyOwnerEntity
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "secret": {"key": "secret", "type": "str"},
        "resource": {"key": "resource", "type": "APIKeyResourceEntity"},
        "owner": {"key": "owner", "type": "APIKeyOwnerEntity"},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        name: Optional[str] = None,
        secret: Optional[str] = None,
        resource: Optional["_models.APIKeyResourceEntity"] = None,
        owner: Optional["_models.APIKeyOwnerEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword description: The description of the API Key.
        :paramtype description: str
        :keyword name: The name of the API Key.
        :paramtype name: str
        :keyword secret: API Key Secret.
        :paramtype secret: str
        :keyword resource: Specification of the cluster.
        :paramtype resource: ~azure.mgmt.confluent.models.APIKeyResourceEntity
        :keyword owner: Specification of the cluster.
        :paramtype owner: ~azure.mgmt.confluent.models.APIKeyOwnerEntity
        """
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.secret = secret
        self.resource = resource
        self.owner = owner


class ConnectorServiceTypeInfoBase(_serialization.Model):
    """The connector service type info.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureBlobStorageSinkConnectorServiceInfo, AzureBlobStorageSourceConnectorServiceInfo,
    AzureCosmosDBSinkConnectorServiceInfo, AzureCosmosDBSourceConnectorServiceInfo,
    AzureSynapseAnalyticsSinkConnectorServiceInfo

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
    }

    _subtype_map = {
        "connector_service_type": {
            "AzureBlobStorageSinkConnector": "AzureBlobStorageSinkConnectorServiceInfo",
            "AzureBlobStorageSourceConnector": "AzureBlobStorageSourceConnectorServiceInfo",
            "AzureCosmosDBSinkConnector": "AzureCosmosDBSinkConnectorServiceInfo",
            "AzureCosmosDBSourceConnector": "AzureCosmosDBSourceConnectorServiceInfo",
            "AzureSynapseAnalyticsSinkConnector": "AzureSynapseAnalyticsSinkConnectorServiceInfo",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.connector_service_type: Optional[str] = None


class AzureBlobStorageSinkConnectorServiceInfo(ConnectorServiceTypeInfoBase):
    """The authentication info when auth_type is azureBlobStorageSinkConnector.

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    :ivar storage_account_name: Azure Blob Storage Account Name.
    :vartype storage_account_name: str
    :ivar storage_account_key: Azure Blob Storage Account Key.
    :vartype storage_account_key: str
    :ivar storage_container_name: Azure Blob Storage Account Container Name.
    :vartype storage_container_name: str
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
        "storage_account_name": {"key": "storageAccountName", "type": "str"},
        "storage_account_key": {"key": "storageAccountKey", "type": "str"},
        "storage_container_name": {"key": "storageContainerName", "type": "str"},
    }

    def __init__(
        self,
        *,
        storage_account_name: Optional[str] = None,
        storage_account_key: Optional[str] = None,
        storage_container_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword storage_account_name: Azure Blob Storage Account Name.
        :paramtype storage_account_name: str
        :keyword storage_account_key: Azure Blob Storage Account Key.
        :paramtype storage_account_key: str
        :keyword storage_container_name: Azure Blob Storage Account Container Name.
        :paramtype storage_container_name: str
        """
        super().__init__(**kwargs)
        self.connector_service_type: str = "AzureBlobStorageSinkConnector"
        self.storage_account_name = storage_account_name
        self.storage_account_key = storage_account_key
        self.storage_container_name = storage_container_name


class AzureBlobStorageSourceConnectorServiceInfo(ConnectorServiceTypeInfoBase):  # pylint: disable=name-too-long
    """The connector service type is AzureBlobStorageSourceConnector.

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    :ivar storage_account_name: Azure Blob Storage Account Name.
    :vartype storage_account_name: str
    :ivar storage_account_key: Azure Blob Storage Account Key.
    :vartype storage_account_key: str
    :ivar storage_container_name: Azure Blob Storage Account Container Name.
    :vartype storage_container_name: str
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
        "storage_account_name": {"key": "storageAccountName", "type": "str"},
        "storage_account_key": {"key": "storageAccountKey", "type": "str"},
        "storage_container_name": {"key": "storageContainerName", "type": "str"},
    }

    def __init__(
        self,
        *,
        storage_account_name: Optional[str] = None,
        storage_account_key: Optional[str] = None,
        storage_container_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword storage_account_name: Azure Blob Storage Account Name.
        :paramtype storage_account_name: str
        :keyword storage_account_key: Azure Blob Storage Account Key.
        :paramtype storage_account_key: str
        :keyword storage_container_name: Azure Blob Storage Account Container Name.
        :paramtype storage_container_name: str
        """
        super().__init__(**kwargs)
        self.connector_service_type: str = "AzureBlobStorageSourceConnector"
        self.storage_account_name = storage_account_name
        self.storage_account_key = storage_account_key
        self.storage_container_name = storage_container_name


class AzureCosmosDBSinkConnectorServiceInfo(ConnectorServiceTypeInfoBase):
    """The authentication info when auth_type is AzureCosmosDBSinkConnector.

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    :ivar cosmos_database_name: Azure Cosmos Database Name.
    :vartype cosmos_database_name: str
    :ivar cosmos_master_key: Azure Cosmos Database Master Key.
    :vartype cosmos_master_key: str
    :ivar cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
    :vartype cosmos_connection_endpoint: str
    :ivar cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
    :vartype cosmos_containers_topic_mapping: str
    :ivar cosmos_id_strategy: Azure Cosmos Database Id Strategy.
    :vartype cosmos_id_strategy: str
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
        "cosmos_database_name": {"key": "cosmosDatabaseName", "type": "str"},
        "cosmos_master_key": {"key": "cosmosMasterKey", "type": "str"},
        "cosmos_connection_endpoint": {"key": "cosmosConnectionEndpoint", "type": "str"},
        "cosmos_containers_topic_mapping": {"key": "cosmosContainersTopicMapping", "type": "str"},
        "cosmos_id_strategy": {"key": "cosmosIdStrategy", "type": "str"},
    }

    def __init__(
        self,
        *,
        cosmos_database_name: Optional[str] = None,
        cosmos_master_key: Optional[str] = None,
        cosmos_connection_endpoint: Optional[str] = None,
        cosmos_containers_topic_mapping: Optional[str] = None,
        cosmos_id_strategy: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cosmos_database_name: Azure Cosmos Database Name.
        :paramtype cosmos_database_name: str
        :keyword cosmos_master_key: Azure Cosmos Database Master Key.
        :paramtype cosmos_master_key: str
        :keyword cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
        :paramtype cosmos_connection_endpoint: str
        :keyword cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
        :paramtype cosmos_containers_topic_mapping: str
        :keyword cosmos_id_strategy: Azure Cosmos Database Id Strategy.
        :paramtype cosmos_id_strategy: str
        """
        super().__init__(**kwargs)
        self.connector_service_type: str = "AzureCosmosDBSinkConnector"
        self.cosmos_database_name = cosmos_database_name
        self.cosmos_master_key = cosmos_master_key
        self.cosmos_connection_endpoint = cosmos_connection_endpoint
        self.cosmos_containers_topic_mapping = cosmos_containers_topic_mapping
        self.cosmos_id_strategy = cosmos_id_strategy


class AzureCosmosDBSourceConnectorServiceInfo(ConnectorServiceTypeInfoBase):
    """The authentication info when auth_type is AzureCosmosDBSourceConnector.

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    :ivar cosmos_database_name: Azure Cosmos Database Name.
    :vartype cosmos_database_name: str
    :ivar cosmos_master_key: Azure Cosmos Database Master Key.
    :vartype cosmos_master_key: str
    :ivar cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
    :vartype cosmos_connection_endpoint: str
    :ivar cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
    :vartype cosmos_containers_topic_mapping: str
    :ivar cosmos_message_key_enabled: Azure Cosmos Database Message Key Enabled.
    :vartype cosmos_message_key_enabled: bool
    :ivar cosmos_message_key_field: Azure Cosmos Database Message Key Field.
    :vartype cosmos_message_key_field: str
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
        "cosmos_database_name": {"key": "cosmosDatabaseName", "type": "str"},
        "cosmos_master_key": {"key": "cosmosMasterKey", "type": "str"},
        "cosmos_connection_endpoint": {"key": "cosmosConnectionEndpoint", "type": "str"},
        "cosmos_containers_topic_mapping": {"key": "cosmosContainersTopicMapping", "type": "str"},
        "cosmos_message_key_enabled": {"key": "cosmosMessageKeyEnabled", "type": "bool"},
        "cosmos_message_key_field": {"key": "cosmosMessageKeyField", "type": "str"},
    }

    def __init__(
        self,
        *,
        cosmos_database_name: Optional[str] = None,
        cosmos_master_key: Optional[str] = None,
        cosmos_connection_endpoint: Optional[str] = None,
        cosmos_containers_topic_mapping: Optional[str] = None,
        cosmos_message_key_enabled: Optional[bool] = None,
        cosmos_message_key_field: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cosmos_database_name: Azure Cosmos Database Name.
        :paramtype cosmos_database_name: str
        :keyword cosmos_master_key: Azure Cosmos Database Master Key.
        :paramtype cosmos_master_key: str
        :keyword cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
        :paramtype cosmos_connection_endpoint: str
        :keyword cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
        :paramtype cosmos_containers_topic_mapping: str
        :keyword cosmos_message_key_enabled: Azure Cosmos Database Message Key Enabled.
        :paramtype cosmos_message_key_enabled: bool
        :keyword cosmos_message_key_field: Azure Cosmos Database Message Key Field.
        :paramtype cosmos_message_key_field: str
        """
        super().__init__(**kwargs)
        self.connector_service_type: str = "AzureCosmosDBSourceConnector"
        self.cosmos_database_name = cosmos_database_name
        self.cosmos_master_key = cosmos_master_key
        self.cosmos_connection_endpoint = cosmos_connection_endpoint
        self.cosmos_containers_topic_mapping = cosmos_containers_topic_mapping
        self.cosmos_message_key_enabled = cosmos_message_key_enabled
        self.cosmos_message_key_field = cosmos_message_key_field


class AzureSynapseAnalyticsSinkConnectorServiceInfo(ConnectorServiceTypeInfoBase):  # pylint: disable=name-too-long
    """The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector.

    All required parameters must be populated in order to send to server.

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    :ivar synapse_sql_server_name: Azure Synapse Analytics SQL Server Name.
    :vartype synapse_sql_server_name: str
    :ivar synapse_sql_user: Azure Synapse SQL login details.
    :vartype synapse_sql_user: str
    :ivar synapse_sql_password: Azure Synapse SQL login details.
    :vartype synapse_sql_password: str
    :ivar synapse_sql_database_name: Azure Synapse Dedicated SQL Pool Database Name.
    :vartype synapse_sql_database_name: str
    """

    _validation = {
        "connector_service_type": {"required": True},
    }

    _attribute_map = {
        "connector_service_type": {"key": "connectorServiceType", "type": "str"},
        "synapse_sql_server_name": {"key": "synapseSqlServerName", "type": "str"},
        "synapse_sql_user": {"key": "synapseSqlUser", "type": "str"},
        "synapse_sql_password": {"key": "synapseSqlPassword", "type": "str"},
        "synapse_sql_database_name": {"key": "synapseSqlDatabaseName", "type": "str"},
    }

    def __init__(
        self,
        *,
        synapse_sql_server_name: Optional[str] = None,
        synapse_sql_user: Optional[str] = None,
        synapse_sql_password: Optional[str] = None,
        synapse_sql_database_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword synapse_sql_server_name: Azure Synapse Analytics SQL Server Name.
        :paramtype synapse_sql_server_name: str
        :keyword synapse_sql_user: Azure Synapse SQL login details.
        :paramtype synapse_sql_user: str
        :keyword synapse_sql_password: Azure Synapse SQL login details.
        :paramtype synapse_sql_password: str
        :keyword synapse_sql_database_name: Azure Synapse Dedicated SQL Pool Database Name.
        :paramtype synapse_sql_database_name: str
        """
        super().__init__(**kwargs)
        self.connector_service_type: str = "AzureSynapseAnalyticsSinkConnector"
        self.synapse_sql_server_name = synapse_sql_server_name
        self.synapse_sql_user = synapse_sql_user
        self.synapse_sql_password = synapse_sql_password
        self.synapse_sql_database_name = synapse_sql_database_name


class ClusterByokEntity(_serialization.Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resource_name", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.related = related
        self.resource_name = resource_name


class ClusterConfigEntity(_serialization.Model):
    """The configuration of the Kafka cluster.

    :ivar kind: The lifecycle phase of the cluster.
    :vartype kind: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, kind: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword kind: The lifecycle phase of the cluster.
        :paramtype kind: str
        """
        super().__init__(**kwargs)
        self.kind = kind


class ClusterEnvironmentEntity(_serialization.Model):
    """The environment to which cluster belongs.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "environment": {"key": "environment", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resource_name", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword environment: Environment of the referred resource.
        :paramtype environment: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.environment = environment
        self.related = related
        self.resource_name = resource_name


class ClusterNetworkEntity(_serialization.Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "environment": {"key": "environment", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resource_name", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword environment: Environment of the referred resource.
        :paramtype environment: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.environment = environment
        self.related = related
        self.resource_name = resource_name


class ClusterRecord(_serialization.Model):
    """Details of cluster record.

    :ivar kind: Type of cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Display name of the cluster.
    :vartype display_name: str
    :ivar spec: Specification of the cluster.
    :vartype spec: ~azure.mgmt.confluent.models.ClusterSpecEntity
    :ivar status: Specification of the cluster.
    :vartype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "display_name": {"key": "display_name", "type": "str"},
        "spec": {"key": "spec", "type": "ClusterSpecEntity"},
        "status": {"key": "status", "type": "ClusterStatusEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
        spec: Optional["_models.ClusterSpecEntity"] = None,
        status: Optional["_models.ClusterStatusEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of cluster.
        :paramtype kind: str
        :keyword id: Id of the cluster.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword display_name: Display name of the cluster.
        :paramtype display_name: str
        :keyword spec: Specification of the cluster.
        :paramtype spec: ~azure.mgmt.confluent.models.ClusterSpecEntity
        :keyword status: Specification of the cluster.
        :paramtype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.display_name = display_name
        self.spec = spec
        self.status = status


class ClusterSpecEntity(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Spec of the cluster record.

    :ivar display_name: The name of the cluster.
    :vartype display_name: str
    :ivar availability: The availability zone configuration of the cluster.
    :vartype availability: str
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    :ivar zone: type of zone availability.
    :vartype zone: str
    :ivar region: The cloud service provider region.
    :vartype region: str
    :ivar kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the
     cluster.
    :vartype kafka_bootstrap_endpoint: str
    :ivar http_endpoint: The cluster HTTP request URL.
    :vartype http_endpoint: str
    :ivar api_endpoint: The Kafka API cluster endpoint.
    :vartype api_endpoint: str
    :ivar config: Specification of the cluster.
    :vartype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
    :ivar environment: Specification of the cluster.
    :vartype environment: ~azure.mgmt.confluent.models.ClusterEnvironmentEntity
    :ivar network: Specification of the cluster.
    :vartype network: ~azure.mgmt.confluent.models.ClusterNetworkEntity
    :ivar byok: Specification of the cluster.
    :vartype byok: ~azure.mgmt.confluent.models.ClusterByokEntity
    """

    _attribute_map = {
        "display_name": {"key": "display_name", "type": "str"},
        "availability": {"key": "availability", "type": "str"},
        "cloud": {"key": "cloud", "type": "str"},
        "zone": {"key": "zone", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "kafka_bootstrap_endpoint": {"key": "kafka_bootstrap_endpoint", "type": "str"},
        "http_endpoint": {"key": "http_endpoint", "type": "str"},
        "api_endpoint": {"key": "api_endpoint", "type": "str"},
        "config": {"key": "config", "type": "ClusterConfigEntity"},
        "environment": {"key": "environment", "type": "ClusterEnvironmentEntity"},
        "network": {"key": "network", "type": "ClusterNetworkEntity"},
        "byok": {"key": "byok", "type": "ClusterByokEntity"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        availability: Optional[str] = None,
        cloud: Optional[str] = None,
        zone: Optional[str] = None,
        region: Optional[str] = None,
        kafka_bootstrap_endpoint: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        api_endpoint: Optional[str] = None,
        config: Optional["_models.ClusterConfigEntity"] = None,
        environment: Optional["_models.ClusterEnvironmentEntity"] = None,
        network: Optional["_models.ClusterNetworkEntity"] = None,
        byok: Optional["_models.ClusterByokEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The name of the cluster.
        :paramtype display_name: str
        :keyword availability: The availability zone configuration of the cluster.
        :paramtype availability: str
        :keyword cloud: The cloud service provider.
        :paramtype cloud: str
        :keyword zone: type of zone availability.
        :paramtype zone: str
        :keyword region: The cloud service provider region.
        :paramtype region: str
        :keyword kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to
         the cluster.
        :paramtype kafka_bootstrap_endpoint: str
        :keyword http_endpoint: The cluster HTTP request URL.
        :paramtype http_endpoint: str
        :keyword api_endpoint: The Kafka API cluster endpoint.
        :paramtype api_endpoint: str
        :keyword config: Specification of the cluster.
        :paramtype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
        :keyword environment: Specification of the cluster.
        :paramtype environment: ~azure.mgmt.confluent.models.ClusterEnvironmentEntity
        :keyword network: Specification of the cluster.
        :paramtype network: ~azure.mgmt.confluent.models.ClusterNetworkEntity
        :keyword byok: Specification of the cluster.
        :paramtype byok: ~azure.mgmt.confluent.models.ClusterByokEntity
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.availability = availability
        self.cloud = cloud
        self.zone = zone
        self.region = region
        self.kafka_bootstrap_endpoint = kafka_bootstrap_endpoint
        self.http_endpoint = http_endpoint
        self.api_endpoint = api_endpoint
        self.config = config
        self.environment = environment
        self.network = network
        self.byok = byok


class ClusterStatusEntity(_serialization.Model):
    """Status of the cluster record.

    :ivar phase: The lifecycle phase of the cluster.
    :vartype phase: str
    :ivar cku: The number of Confluent Kafka Units.
    :vartype cku: int
    """

    _attribute_map = {
        "phase": {"key": "phase", "type": "str"},
        "cku": {"key": "cku", "type": "int"},
    }

    def __init__(self, *, phase: Optional[str] = None, cku: Optional[int] = None, **kwargs: Any) -> None:
        """
        :keyword phase: The lifecycle phase of the cluster.
        :paramtype phase: str
        :keyword cku: The number of Confluent Kafka Units.
        :paramtype cku: int
        """
        super().__init__(**kwargs)
        self.phase = phase
        self.cku = cku


class ConfluentAgreementResource(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Agreement Terms definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM id of the resource.
    :vartype id: str
    :ivar name: The name of the agreement.
    :vartype name: str
    :ivar type: The type of the agreement.
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar publisher: Publisher identifier string.
    :vartype publisher: str
    :ivar product: Product identifier string.
    :vartype product: str
    :ivar plan: Plan identifier string.
    :vartype plan: str
    :ivar license_text_link: Link to HTML with Microsoft and Publisher terms.
    :vartype license_text_link: str
    :ivar privacy_policy_link: Link to the privacy policy of the publisher.
    :vartype privacy_policy_link: str
    :ivar retrieve_datetime: Date and time in UTC of when the terms were accepted. This is empty if
     Accepted is false.
    :vartype retrieve_datetime: ~datetime.datetime
    :ivar signature: Terms signature.
    :vartype signature: str
    :ivar accepted: If any version of the terms have been accepted, otherwise false.
    :vartype accepted: bool
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "publisher": {"key": "properties.publisher", "type": "str"},
        "product": {"key": "properties.product", "type": "str"},
        "plan": {"key": "properties.plan", "type": "str"},
        "license_text_link": {"key": "properties.licenseTextLink", "type": "str"},
        "privacy_policy_link": {"key": "properties.privacyPolicyLink", "type": "str"},
        "retrieve_datetime": {"key": "properties.retrieveDatetime", "type": "iso-8601"},
        "signature": {"key": "properties.signature", "type": "str"},
        "accepted": {"key": "properties.accepted", "type": "bool"},
    }

    def __init__(
        self,
        *,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
        plan: Optional[str] = None,
        license_text_link: Optional[str] = None,
        privacy_policy_link: Optional[str] = None,
        retrieve_datetime: Optional[datetime.datetime] = None,
        signature: Optional[str] = None,
        accepted: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword publisher: Publisher identifier string.
        :paramtype publisher: str
        :keyword product: Product identifier string.
        :paramtype product: str
        :keyword plan: Plan identifier string.
        :paramtype plan: str
        :keyword license_text_link: Link to HTML with Microsoft and Publisher terms.
        :paramtype license_text_link: str
        :keyword privacy_policy_link: Link to the privacy policy of the publisher.
        :paramtype privacy_policy_link: str
        :keyword retrieve_datetime: Date and time in UTC of when the terms were accepted. This is empty
         if Accepted is false.
        :paramtype retrieve_datetime: ~datetime.datetime
        :keyword signature: Terms signature.
        :paramtype signature: str
        :keyword accepted: If any version of the terms have been accepted, otherwise false.
        :paramtype accepted: bool
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None
        self.publisher = publisher
        self.product = product
        self.plan = plan
        self.license_text_link = license_text_link
        self.privacy_policy_link = privacy_policy_link
        self.retrieve_datetime = retrieve_datetime
        self.signature = signature
        self.accepted = accepted


class ConfluentAgreementResourceListResponse(_serialization.Model):
    """Response of a list operation.

    :ivar value: Results of a list operation.
    :vartype value: list[~azure.mgmt.confluent.models.ConfluentAgreementResource]
    :ivar next_link: Link to the next set of results, if any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[ConfluentAgreementResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ConfluentAgreementResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Results of a list operation.
        :paramtype value: list[~azure.mgmt.confluent.models.ConfluentAgreementResource]
        :keyword next_link: Link to the next set of results, if any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ConfluentListMetadata(_serialization.Model):
    """Metadata of the list.

    :ivar first: First page of the list.
    :vartype first: str
    :ivar last: Last page of the list.
    :vartype last: str
    :ivar prev: Previous page of the list.
    :vartype prev: str
    :ivar next: Next page of the list.
    :vartype next: str
    :ivar total_size: Total size of the list.
    :vartype total_size: int
    """

    _attribute_map = {
        "first": {"key": "first", "type": "str"},
        "last": {"key": "last", "type": "str"},
        "prev": {"key": "prev", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "total_size": {"key": "total_size", "type": "int"},
    }

    def __init__(
        self,
        *,
        first: Optional[str] = None,
        last: Optional[str] = None,
        prev: Optional[str] = None,
        next: Optional[str] = None,
        total_size: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword first: First page of the list.
        :paramtype first: str
        :keyword last: Last page of the list.
        :paramtype last: str
        :keyword prev: Previous page of the list.
        :paramtype prev: str
        :keyword next: Next page of the list.
        :paramtype next: str
        :keyword total_size: Total size of the list.
        :paramtype total_size: int
        """
        super().__init__(**kwargs)
        self.first = first
        self.last = last
        self.prev = prev
        self.next = next
        self.total_size = total_size


class ConnectorInfoBase(_serialization.Model):
    """Connector Info Base properties.

    :ivar connector_type: Connector Type. Known values are: "SINK" and "SOURCE".
    :vartype connector_type: str or ~azure.mgmt.confluent.models.ConnectorType
    :ivar connector_class: Connector Class. Known values are: "AZUREBLOBSOURCE" and
     "AZUREBLOBSINK".
    :vartype connector_class: str or ~azure.mgmt.confluent.models.ConnectorClass
    :ivar connector_name: Connector Name.
    :vartype connector_name: str
    :ivar connector_id: Connector Id.
    :vartype connector_id: str
    :ivar connector_state: Connector Status. Known values are: "PROVISIONING", "RUNNING", "PAUSED",
     and "FAILED".
    :vartype connector_state: str or ~azure.mgmt.confluent.models.ConnectorStatus
    """

    _attribute_map = {
        "connector_type": {"key": "connectorType", "type": "str"},
        "connector_class": {"key": "connectorClass", "type": "str"},
        "connector_name": {"key": "connectorName", "type": "str"},
        "connector_id": {"key": "connectorId", "type": "str"},
        "connector_state": {"key": "connectorState", "type": "str"},
    }

    def __init__(
        self,
        *,
        connector_type: Optional[Union[str, "_models.ConnectorType"]] = None,
        connector_class: Optional[Union[str, "_models.ConnectorClass"]] = None,
        connector_name: Optional[str] = None,
        connector_id: Optional[str] = None,
        connector_state: Optional[Union[str, "_models.ConnectorStatus"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connector_type: Connector Type. Known values are: "SINK" and "SOURCE".
        :paramtype connector_type: str or ~azure.mgmt.confluent.models.ConnectorType
        :keyword connector_class: Connector Class. Known values are: "AZUREBLOBSOURCE" and
         "AZUREBLOBSINK".
        :paramtype connector_class: str or ~azure.mgmt.confluent.models.ConnectorClass
        :keyword connector_name: Connector Name.
        :paramtype connector_name: str
        :keyword connector_id: Connector Id.
        :paramtype connector_id: str
        :keyword connector_state: Connector Status. Known values are: "PROVISIONING", "RUNNING",
         "PAUSED", and "FAILED".
        :paramtype connector_state: str or ~azure.mgmt.confluent.models.ConnectorStatus
        """
        super().__init__(**kwargs)
        self.connector_type = connector_type
        self.connector_class = connector_class
        self.connector_name = connector_name
        self.connector_id = connector_id
        self.connector_state = connector_state


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    """


class ConnectorResource(ProxyResource):
    """Details of connector record.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar connector_basic_info: Connector Info Base.
    :vartype connector_basic_info: ~azure.mgmt.confluent.models.ConnectorInfoBase
    :ivar connector_service_type_info: Connector Service type info base properties.
    :vartype connector_service_type_info: ~azure.mgmt.confluent.models.ConnectorServiceTypeInfoBase
    :ivar partner_connector_info: The connection information consumed by applications.
    :vartype partner_connector_info: ~azure.mgmt.confluent.models.PartnerInfoBase
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "connector_basic_info": {"key": "properties.connectorBasicInfo", "type": "ConnectorInfoBase"},
        "connector_service_type_info": {
            "key": "properties.connectorServiceTypeInfo",
            "type": "ConnectorServiceTypeInfoBase",
        },
        "partner_connector_info": {"key": "properties.partnerConnectorInfo", "type": "PartnerInfoBase"},
    }

    def __init__(
        self,
        *,
        connector_basic_info: Optional["_models.ConnectorInfoBase"] = None,
        connector_service_type_info: Optional["_models.ConnectorServiceTypeInfoBase"] = None,
        partner_connector_info: Optional["_models.PartnerInfoBase"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connector_basic_info: Connector Info Base.
        :paramtype connector_basic_info: ~azure.mgmt.confluent.models.ConnectorInfoBase
        :keyword connector_service_type_info: Connector Service type info base properties.
        :paramtype connector_service_type_info:
         ~azure.mgmt.confluent.models.ConnectorServiceTypeInfoBase
        :keyword partner_connector_info: The connection information consumed by applications.
        :paramtype partner_connector_info: ~azure.mgmt.confluent.models.PartnerInfoBase
        """
        super().__init__(**kwargs)
        self.connector_basic_info = connector_basic_info
        self.connector_service_type_info = connector_service_type_info
        self.partner_connector_info = partner_connector_info


class CreateAPIKeyModel(_serialization.Model):
    """Create API Key model.

    :ivar name: Name of the API Key.
    :vartype name: str
    :ivar description: Description of the API Key.
    :vartype description: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Name of the API Key.
        :paramtype name: str
        :keyword description: Description of the API Key.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description


class EnvironmentRecord(_serialization.Model):
    """Details about environment name, metadata and environment id of an environment.

    :ivar kind: Type of environment.
    :vartype kind: str
    :ivar id: Id of the environment.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Display name of the user.
    :vartype display_name: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "display_name": {"key": "display_name", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of environment.
        :paramtype kind: str
        :keyword id: Id of the environment.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword display_name: Display name of the user.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.display_name = display_name


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.confluent.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.confluent.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.confluent.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.confluent.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ErrorResponseBody(_serialization.Model):
    """Response body of Error.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar target: Error target.
    :vartype target: str
    :ivar details: Error detail.
    :vartype details: list[~azure.mgmt.confluent.models.ErrorResponseBody]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorResponseBody]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None


class GetEnvironmentsResponse(_serialization.Model):
    """Result of GET request to list Confluent operations.

    :ivar value: List of environments in a confluent organization.
    :vartype value: list[~azure.mgmt.confluent.models.SCEnvironmentRecord]
    :ivar next_link: URL to get the next set of environment records if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[SCEnvironmentRecord]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.SCEnvironmentRecord"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: List of environments in a confluent organization.
        :paramtype value: list[~azure.mgmt.confluent.models.SCEnvironmentRecord]
        :keyword next_link: URL to get the next set of environment records if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class InvitationRecord(_serialization.Model):
    """Record of the invitation.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the invitation.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar email: Email of the user.
    :vartype email: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    :ivar status: Status of the invitation.
    :vartype status: str
    :ivar accepted_at: Accepted date time of the invitation.
    :vartype accepted_at: str
    :ivar expires_at: Expiration date time of the invitation.
    :vartype expires_at: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "email": {"key": "email", "type": "str"},
        "auth_type": {"key": "auth_type", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "accepted_at": {"key": "accepted_at", "type": "str"},
        "expires_at": {"key": "expires_at", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        email: Optional[str] = None,
        auth_type: Optional[str] = None,
        status: Optional[str] = None,
        accepted_at: Optional[str] = None,
        expires_at: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of account.
        :paramtype kind: str
        :keyword id: Id of the invitation.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword email: Email of the user.
        :paramtype email: str
        :keyword auth_type: Auth type of the user.
        :paramtype auth_type: str
        :keyword status: Status of the invitation.
        :paramtype status: str
        :keyword accepted_at: Accepted date time of the invitation.
        :paramtype accepted_at: str
        :keyword expires_at: Expiration date time of the invitation.
        :paramtype expires_at: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.email = email
        self.auth_type = auth_type
        self.status = status
        self.accepted_at = accepted_at
        self.expires_at = expires_at


class PartnerInfoBase(_serialization.Model):
    """The partner info base.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    KafkaAzureBlobStorageSinkConnectorInfo, KafkaAzureBlobStorageSourceConnectorInfo,
    KafkaAzureCosmosDBSinkConnectorInfo, KafkaAzureCosmosDBSourceConnectorInfo,
    KafkaAzureSynapseAnalyticsSinkConnectorInfo

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
    }

    _subtype_map = {
        "partner_connector_type": {
            "KafkaAzureBlobStorageSink": "KafkaAzureBlobStorageSinkConnectorInfo",
            "KafkaAzureBlobStorageSource": "KafkaAzureBlobStorageSourceConnectorInfo",
            "KafkaAzureCosmosDBSink": "KafkaAzureCosmosDBSinkConnectorInfo",
            "KafkaAzureCosmosDBSource": "KafkaAzureCosmosDBSourceConnectorInfo",
            "KafkaAzureSynapseAnalyticsSink": "KafkaAzureSynapseAnalyticsSinkConnectorInfo",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.partner_connector_type: Optional[str] = None


class KafkaAzureBlobStorageSinkConnectorInfo(PartnerInfoBase):  # pylint: disable=too-many-instance-attributes
    """The partner connector type is KafkaAzureBlobStorageSink.

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
        "auth_type": {"key": "authType", "type": "str"},
        "input_format": {"key": "inputFormat", "type": "str"},
        "output_format": {"key": "outputFormat", "type": "str"},
        "api_key": {"key": "apiKey", "type": "str"},
        "api_secret": {"key": "apiSecret", "type": "str"},
        "service_account_id": {"key": "serviceAccountId", "type": "str"},
        "topics": {"key": "topics", "type": "[str]"},
        "topics_dir": {"key": "topicsDir", "type": "str"},
        "flush_size": {"key": "flushSize", "type": "str"},
        "max_tasks": {"key": "maxTasks", "type": "str"},
        "time_interval": {"key": "timeInterval", "type": "str"},
    }

    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
        :paramtype auth_type: str or ~azure.mgmt.confluent.models.AuthType
        :keyword input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword api_key: Kafka API Key.
        :paramtype api_key: str
        :keyword api_secret: Kafka API Key Secret.
        :paramtype api_secret: str
        :keyword service_account_id: Kafka Service Account Id.
        :paramtype service_account_id: str
        :keyword topics: Kafka topics list.
        :paramtype topics: list[str]
        :keyword topics_dir: Kafka topics directory.
        :paramtype topics_dir: str
        :keyword flush_size: Flush size.
        :paramtype flush_size: str
        :keyword max_tasks: Maximum Tasks.
        :paramtype max_tasks: str
        :keyword time_interval: Time Interval.
        :paramtype time_interval: str
        """
        super().__init__(**kwargs)
        self.partner_connector_type: str = "KafkaAzureBlobStorageSink"
        self.auth_type = auth_type
        self.input_format = input_format
        self.output_format = output_format
        self.api_key = api_key
        self.api_secret = api_secret
        self.service_account_id = service_account_id
        self.topics = topics
        self.topics_dir = topics_dir
        self.flush_size = flush_size
        self.max_tasks = max_tasks
        self.time_interval = time_interval


class KafkaAzureBlobStorageSourceConnectorInfo(PartnerInfoBase):
    """The partner connector type is KafkaAzureBlobStorageSource.

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topic_regex: Kafka topics Regex pattern.
    :vartype topic_regex: str
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
        "auth_type": {"key": "authType", "type": "str"},
        "input_format": {"key": "inputFormat", "type": "str"},
        "output_format": {"key": "outputFormat", "type": "str"},
        "api_key": {"key": "apiKey", "type": "str"},
        "api_secret": {"key": "apiSecret", "type": "str"},
        "service_account_id": {"key": "serviceAccountId", "type": "str"},
        "topic_regex": {"key": "topicRegex", "type": "str"},
        "topics_dir": {"key": "topicsDir", "type": "str"},
        "max_tasks": {"key": "maxTasks", "type": "str"},
    }

    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topic_regex: Optional[str] = None,
        topics_dir: Optional[str] = None,
        max_tasks: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
        :paramtype auth_type: str or ~azure.mgmt.confluent.models.AuthType
        :keyword input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword api_key: Kafka API Key.
        :paramtype api_key: str
        :keyword api_secret: Kafka API Secret.
        :paramtype api_secret: str
        :keyword service_account_id: Kafka Service Account Id.
        :paramtype service_account_id: str
        :keyword topic_regex: Kafka topics Regex pattern.
        :paramtype topic_regex: str
        :keyword topics_dir: Kafka topics directory.
        :paramtype topics_dir: str
        :keyword max_tasks: Maximum Tasks.
        :paramtype max_tasks: str
        """
        super().__init__(**kwargs)
        self.partner_connector_type: str = "KafkaAzureBlobStorageSource"
        self.auth_type = auth_type
        self.input_format = input_format
        self.output_format = output_format
        self.api_key = api_key
        self.api_secret = api_secret
        self.service_account_id = service_account_id
        self.topic_regex = topic_regex
        self.topics_dir = topics_dir
        self.max_tasks = max_tasks


class KafkaAzureCosmosDBSinkConnectorInfo(PartnerInfoBase):  # pylint: disable=too-many-instance-attributes
    """The partner connector type is KafkaAzureCosmosDBSink.

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
        "auth_type": {"key": "authType", "type": "str"},
        "input_format": {"key": "inputFormat", "type": "str"},
        "output_format": {"key": "outputFormat", "type": "str"},
        "api_key": {"key": "apiKey", "type": "str"},
        "api_secret": {"key": "apiSecret", "type": "str"},
        "service_account_id": {"key": "serviceAccountId", "type": "str"},
        "topics": {"key": "topics", "type": "[str]"},
        "topics_dir": {"key": "topicsDir", "type": "str"},
        "flush_size": {"key": "flushSize", "type": "str"},
        "max_tasks": {"key": "maxTasks", "type": "str"},
        "time_interval": {"key": "timeInterval", "type": "str"},
    }

    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
        :paramtype auth_type: str or ~azure.mgmt.confluent.models.AuthType
        :keyword input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword api_key: Kafka API Key.
        :paramtype api_key: str
        :keyword api_secret: Kafka API Key Secret.
        :paramtype api_secret: str
        :keyword service_account_id: Kafka Service Account Id.
        :paramtype service_account_id: str
        :keyword topics: Kafka topics list.
        :paramtype topics: list[str]
        :keyword topics_dir: Kafka topics directory.
        :paramtype topics_dir: str
        :keyword flush_size: Flush size.
        :paramtype flush_size: str
        :keyword max_tasks: Maximum Tasks.
        :paramtype max_tasks: str
        :keyword time_interval: Time Interval.
        :paramtype time_interval: str
        """
        super().__init__(**kwargs)
        self.partner_connector_type: str = "KafkaAzureCosmosDBSink"
        self.auth_type = auth_type
        self.input_format = input_format
        self.output_format = output_format
        self.api_key = api_key
        self.api_secret = api_secret
        self.service_account_id = service_account_id
        self.topics = topics
        self.topics_dir = topics_dir
        self.flush_size = flush_size
        self.max_tasks = max_tasks
        self.time_interval = time_interval


class KafkaAzureCosmosDBSourceConnectorInfo(PartnerInfoBase):
    """The partner connector type is KafkaAzureCosmosDBSource.

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topic_regex: Kafka topics Regex pattern.
    :vartype topic_regex: str
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
        "auth_type": {"key": "authType", "type": "str"},
        "input_format": {"key": "inputFormat", "type": "str"},
        "output_format": {"key": "outputFormat", "type": "str"},
        "api_key": {"key": "apiKey", "type": "str"},
        "api_secret": {"key": "apiSecret", "type": "str"},
        "service_account_id": {"key": "serviceAccountId", "type": "str"},
        "topic_regex": {"key": "topicRegex", "type": "str"},
        "topics_dir": {"key": "topicsDir", "type": "str"},
        "max_tasks": {"key": "maxTasks", "type": "str"},
    }

    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topic_regex: Optional[str] = None,
        topics_dir: Optional[str] = None,
        max_tasks: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
        :paramtype auth_type: str or ~azure.mgmt.confluent.models.AuthType
        :keyword input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword api_key: Kafka API Key.
        :paramtype api_key: str
        :keyword api_secret: Kafka API Secret.
        :paramtype api_secret: str
        :keyword service_account_id: Kafka Service Account Id.
        :paramtype service_account_id: str
        :keyword topic_regex: Kafka topics Regex pattern.
        :paramtype topic_regex: str
        :keyword topics_dir: Kafka topics directory.
        :paramtype topics_dir: str
        :keyword max_tasks: Maximum Tasks.
        :paramtype max_tasks: str
        """
        super().__init__(**kwargs)
        self.partner_connector_type: str = "KafkaAzureCosmosDBSource"
        self.auth_type = auth_type
        self.input_format = input_format
        self.output_format = output_format
        self.api_key = api_key
        self.api_secret = api_secret
        self.service_account_id = service_account_id
        self.topic_regex = topic_regex
        self.topics_dir = topics_dir
        self.max_tasks = max_tasks


class KafkaAzureSynapseAnalyticsSinkConnectorInfo(
    PartnerInfoBase
):  # pylint: disable=too-many-instance-attributes,name-too-long
    """The partner connector type is KafkaAzureSynapseAnalyticsSink.

    All required parameters must be populated in order to send to server.

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    """

    _validation = {
        "partner_connector_type": {"required": True},
    }

    _attribute_map = {
        "partner_connector_type": {"key": "partnerConnectorType", "type": "str"},
        "auth_type": {"key": "authType", "type": "str"},
        "input_format": {"key": "inputFormat", "type": "str"},
        "output_format": {"key": "outputFormat", "type": "str"},
        "api_key": {"key": "apiKey", "type": "str"},
        "api_secret": {"key": "apiSecret", "type": "str"},
        "service_account_id": {"key": "serviceAccountId", "type": "str"},
        "topics": {"key": "topics", "type": "[str]"},
        "topics_dir": {"key": "topicsDir", "type": "str"},
        "flush_size": {"key": "flushSize", "type": "str"},
        "max_tasks": {"key": "maxTasks", "type": "str"},
        "time_interval": {"key": "timeInterval", "type": "str"},
    }

    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
        :paramtype auth_type: str or ~azure.mgmt.confluent.models.AuthType
        :keyword input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON",
         "STRING", "BYTES", and "PROTOBUF".
        :paramtype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
        :keyword api_key: Kafka API Key.
        :paramtype api_key: str
        :keyword api_secret: Kafka API Key Secret.
        :paramtype api_secret: str
        :keyword service_account_id: Kafka Service Account Id.
        :paramtype service_account_id: str
        :keyword topics: Kafka topics list.
        :paramtype topics: list[str]
        :keyword topics_dir: Kafka topics directory.
        :paramtype topics_dir: str
        :keyword flush_size: Flush size.
        :paramtype flush_size: str
        :keyword max_tasks: Maximum Tasks.
        :paramtype max_tasks: str
        :keyword time_interval: Time Interval.
        :paramtype time_interval: str
        """
        super().__init__(**kwargs)
        self.partner_connector_type: str = "KafkaAzureSynapseAnalyticsSink"
        self.auth_type = auth_type
        self.input_format = input_format
        self.output_format = output_format
        self.api_key = api_key
        self.api_secret = api_secret
        self.service_account_id = service_account_id
        self.topics = topics
        self.topics_dir = topics_dir
        self.flush_size = flush_size
        self.max_tasks = max_tasks
        self.time_interval = time_interval


class LinkOrganization(_serialization.Model):
    """Link an existing Confluent organization.

    All required parameters must be populated in order to send to server.

    :ivar token: User auth token. Required.
    :vartype token: str
    """

    _validation = {
        "token": {"required": True},
    }

    _attribute_map = {
        "token": {"key": "token", "type": "str"},
    }

    def __init__(self, *, token: str, **kwargs: Any) -> None:
        """
        :keyword token: User auth token. Required.
        :paramtype token: str
        """
        super().__init__(**kwargs)
        self.token = token


class ListAccessRequestModel(_serialization.Model):
    """List Access Request Model.

    :ivar search_filters: Search filters for the request.
    :vartype search_filters: dict[str, str]
    """

    _attribute_map = {
        "search_filters": {"key": "searchFilters", "type": "{str}"},
    }

    def __init__(self, *, search_filters: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword search_filters: Search filters for the request.
        :paramtype search_filters: dict[str, str]
        """
        super().__init__(**kwargs)
        self.search_filters = search_filters


class ListClustersSuccessResponse(_serialization.Model):
    """Result of GET request to list clusters in the environment of a confluent organization.

    :ivar value: List of clusters in an environment of a confluent organization.
    :vartype value: list[~azure.mgmt.confluent.models.SCClusterRecord]
    :ivar next_link: URL to get the next set of cluster records if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[SCClusterRecord]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.SCClusterRecord"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: List of clusters in an environment of a confluent organization.
        :paramtype value: list[~azure.mgmt.confluent.models.SCClusterRecord]
        :keyword next_link: URL to get the next set of cluster records if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ListConnectorsSuccessResponse(_serialization.Model):
    """Result of GET request to list connectors in the cluster of a confluent organization.

    :ivar value: List of connectors in a cluster of a confluent organization.
    :vartype value: list[~azure.mgmt.confluent.models.ConnectorResource]
    :ivar next_link: URL to get the next set of connectors records if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[ConnectorResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ConnectorResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: List of connectors in a cluster of a confluent organization.
        :paramtype value: list[~azure.mgmt.confluent.models.ConnectorResource]
        :keyword next_link: URL to get the next set of connectors records if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ListRegionsSuccessResponse(_serialization.Model):
    """Result of POST request to list regions supported by confluent.

    :ivar data: List of regions supported by confluent.
    :vartype data: list[~azure.mgmt.confluent.models.RegionRecord]
    """

    _attribute_map = {
        "data": {"key": "data", "type": "[RegionRecord]"},
    }

    def __init__(self, *, data: Optional[List["_models.RegionRecord"]] = None, **kwargs: Any) -> None:
        """
        :keyword data: List of regions supported by confluent.
        :paramtype data: list[~azure.mgmt.confluent.models.RegionRecord]
        """
        super().__init__(**kwargs)
        self.data = data


class ListSchemaRegistryClustersResponse(_serialization.Model):
    """Result of GET request to list schema registry clusters in the environment of a confluent
    organization.

    :ivar value: List of schema registry clusters in an environment of a confluent organization.
    :vartype value: list[~azure.mgmt.confluent.models.SchemaRegistryClusterRecord]
    :ivar next_link: URL to get the next set of schema registry cluster records if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[SchemaRegistryClusterRecord]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.SchemaRegistryClusterRecord"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: List of schema registry clusters in an environment of a confluent organization.
        :paramtype value: list[~azure.mgmt.confluent.models.SchemaRegistryClusterRecord]
        :keyword next_link: URL to get the next set of schema registry cluster records if there are
         any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ListTopicsSuccessResponse(_serialization.Model):
    """Result of GET request to list topics in the cluster of a confluent organization.

    :ivar value: List of topics in a cluster of a confluent organization.
    :vartype value: list[~azure.mgmt.confluent.models.TopicRecord]
    :ivar next_link: URL to get the next set of topics records if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[TopicRecord]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.TopicRecord"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: List of topics in a cluster of a confluent organization.
        :paramtype value: list[~azure.mgmt.confluent.models.TopicRecord]
        :keyword next_link: URL to get the next set of topics records if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class MetadataEntity(_serialization.Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    :ivar created_at: Created Date Time.
    :vartype created_at: str
    :ivar updated_at: Updated Date time.
    :vartype updated_at: str
    :ivar deleted_at: Deleted Date time.
    :vartype deleted_at: str
    """

    _attribute_map = {
        "self_property": {"key": "self", "type": "str"},
        "resource_name": {"key": "resource_name", "type": "str"},
        "created_at": {"key": "created_at", "type": "str"},
        "updated_at": {"key": "updated_at", "type": "str"},
        "deleted_at": {"key": "deleted_at", "type": "str"},
    }

    def __init__(
        self,
        *,
        self_property: Optional[str] = None,
        resource_name: Optional[str] = None,
        created_at: Optional[str] = None,
        updated_at: Optional[str] = None,
        deleted_at: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword self_property: Self lookup url.
        :paramtype self_property: str
        :keyword resource_name: Resource name of the record.
        :paramtype resource_name: str
        :keyword created_at: Created Date Time.
        :paramtype created_at: str
        :keyword updated_at: Updated Date time.
        :paramtype updated_at: str
        :keyword deleted_at: Deleted Date time.
        :paramtype deleted_at: str
        """
        super().__init__(**kwargs)
        self.self_property = self_property
        self.resource_name = resource_name
        self.created_at = created_at
        self.updated_at = updated_at
        self.deleted_at = deleted_at


class OfferDetail(_serialization.Model):
    """Confluent Offer detail.

    All required parameters must be populated in order to send to server.

    :ivar publisher_id: Publisher Id. Required.
    :vartype publisher_id: str
    :ivar id: Offer Id. Required.
    :vartype id: str
    :ivar plan_id: Offer Plan Id. Required.
    :vartype plan_id: str
    :ivar plan_name: Offer Plan Name. Required.
    :vartype plan_name: str
    :ivar term_unit: Offer Plan Term unit. Required.
    :vartype term_unit: str
    :ivar term_id: Offer Plan Term Id.
    :vartype term_id: str
    :ivar private_offer_id: Private Offer Id.
    :vartype private_offer_id: str
    :ivar private_offer_ids: Array of Private Offer Ids.
    :vartype private_offer_ids: list[str]
    :ivar status: SaaS Offer Status. Known values are: "Started", "PendingFulfillmentStart",
     "InProgress", "Subscribed", "Suspended", "Reinstated", "Succeeded", "Failed", "Unsubscribed",
     and "Updating".
    :vartype status: str or ~azure.mgmt.confluent.models.SaaSOfferStatus
    """

    _validation = {
        "publisher_id": {"required": True, "max_length": 50},
        "id": {"required": True, "max_length": 50},
        "plan_id": {"required": True, "max_length": 200},
        "plan_name": {"required": True, "max_length": 200},
        "term_unit": {"required": True, "max_length": 25},
        "term_id": {"max_length": 50},
        "private_offer_id": {"max_length": 255},
    }

    _attribute_map = {
        "publisher_id": {"key": "publisherId", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "plan_id": {"key": "planId", "type": "str"},
        "plan_name": {"key": "planName", "type": "str"},
        "term_unit": {"key": "termUnit", "type": "str"},
        "term_id": {"key": "termId", "type": "str"},
        "private_offer_id": {"key": "privateOfferId", "type": "str"},
        "private_offer_ids": {"key": "privateOfferIds", "type": "[str]"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        publisher_id: str,
        id: str,  # pylint: disable=redefined-builtin
        plan_id: str,
        plan_name: str,
        term_unit: str,
        term_id: Optional[str] = None,
        private_offer_id: Optional[str] = None,
        private_offer_ids: Optional[List[str]] = None,
        status: Optional[Union[str, "_models.SaaSOfferStatus"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword publisher_id: Publisher Id. Required.
        :paramtype publisher_id: str
        :keyword id: Offer Id. Required.
        :paramtype id: str
        :keyword plan_id: Offer Plan Id. Required.
        :paramtype plan_id: str
        :keyword plan_name: Offer Plan Name. Required.
        :paramtype plan_name: str
        :keyword term_unit: Offer Plan Term unit. Required.
        :paramtype term_unit: str
        :keyword term_id: Offer Plan Term Id.
        :paramtype term_id: str
        :keyword private_offer_id: Private Offer Id.
        :paramtype private_offer_id: str
        :keyword private_offer_ids: Array of Private Offer Ids.
        :paramtype private_offer_ids: list[str]
        :keyword status: SaaS Offer Status. Known values are: "Started", "PendingFulfillmentStart",
         "InProgress", "Subscribed", "Suspended", "Reinstated", "Succeeded", "Failed", "Unsubscribed",
         and "Updating".
        :paramtype status: str or ~azure.mgmt.confluent.models.SaaSOfferStatus
        """
        super().__init__(**kwargs)
        self.publisher_id = publisher_id
        self.id = id
        self.plan_id = plan_id
        self.plan_name = plan_name
        self.term_unit = term_unit
        self.term_id = term_id
        self.private_offer_id = private_offer_id
        self.private_offer_ids = private_offer_ids
        self.status = status


class OperationDisplay(_serialization.Model):
    """The object that represents the operation.

    :ivar provider: Service provider: Microsoft.Confluent.
    :vartype provider: str
    :ivar resource: Type on which the operation is performed, e.g., 'clusters'.
    :vartype resource: str
    :ivar operation: Operation type, e.g., read, write, delete, etc.
    :vartype operation: str
    :ivar description: Description of the operation, e.g., 'Write confluent'.
    :vartype description: str
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword provider: Service provider: Microsoft.Confluent.
        :paramtype provider: str
        :keyword resource: Type on which the operation is performed, e.g., 'clusters'.
        :paramtype resource: str
        :keyword operation: Operation type, e.g., read, write, delete, etc.
        :paramtype operation: str
        :keyword description: Description of the operation, e.g., 'Write confluent'.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationListResult(_serialization.Model):
    """Result of GET request to list Confluent operations.

    :ivar value: List of Confluent operations supported by the Microsoft.Confluent provider.
    :vartype value: list[~azure.mgmt.confluent.models.OperationResult]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[OperationResult]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.OperationResult"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: List of Confluent operations supported by the Microsoft.Confluent provider.
        :paramtype value: list[~azure.mgmt.confluent.models.OperationResult]
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationResult(_serialization.Model):
    """An Confluent REST API operation.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The object that represents the operation.
    :vartype display: ~azure.mgmt.confluent.models.OperationDisplay
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        is_data_action: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: The object that represents the operation.
        :paramtype display: ~azure.mgmt.confluent.models.OperationDisplay
        :keyword is_data_action: Indicates whether the operation is a data action.
        :paramtype is_data_action: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.display = display
        self.is_data_action = is_data_action


class OrganizationResource(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Organization resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The ARM id of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar tags: Organization resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Location of Organization resource.
    :vartype location: str
    :ivar created_time: The creation time of the resource.
    :vartype created_time: ~datetime.datetime
    :ivar provisioning_state: Provision states for confluent RP. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.confluent.models.ProvisionState
    :ivar organization_id: Id of the Confluent organization.
    :vartype organization_id: str
    :ivar sso_url: SSO url for the Confluent organization.
    :vartype sso_url: str
    :ivar offer_detail: Confluent offer detail. Required.
    :vartype offer_detail: ~azure.mgmt.confluent.models.OfferDetail
    :ivar user_detail: Subscriber detail. Required.
    :vartype user_detail: ~azure.mgmt.confluent.models.UserDetail
    :ivar link_organization: Link an existing Confluent organization.
    :vartype link_organization: ~azure.mgmt.confluent.models.LinkOrganization
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "created_time": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "organization_id": {"readonly": True},
        "sso_url": {"readonly": True},
        "offer_detail": {"required": True},
        "user_detail": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "created_time": {"key": "properties.createdTime", "type": "iso-8601"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "organization_id": {"key": "properties.organizationId", "type": "str"},
        "sso_url": {"key": "properties.ssoUrl", "type": "str"},
        "offer_detail": {"key": "properties.offerDetail", "type": "OfferDetail"},
        "user_detail": {"key": "properties.userDetail", "type": "UserDetail"},
        "link_organization": {"key": "properties.linkOrganization", "type": "LinkOrganization"},
    }

    def __init__(
        self,
        *,
        offer_detail: "_models.OfferDetail",
        user_detail: "_models.UserDetail",
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        link_organization: Optional["_models.LinkOrganization"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Organization resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Location of Organization resource.
        :paramtype location: str
        :keyword offer_detail: Confluent offer detail. Required.
        :paramtype offer_detail: ~azure.mgmt.confluent.models.OfferDetail
        :keyword user_detail: Subscriber detail. Required.
        :paramtype user_detail: ~azure.mgmt.confluent.models.UserDetail
        :keyword link_organization: Link an existing Confluent organization.
        :paramtype link_organization: ~azure.mgmt.confluent.models.LinkOrganization
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None
        self.tags = tags
        self.location = location
        self.created_time = None
        self.provisioning_state = None
        self.organization_id = None
        self.sso_url = None
        self.offer_detail = offer_detail
        self.user_detail = user_detail
        self.link_organization = link_organization


class OrganizationResourceListResult(_serialization.Model):
    """The response of a list operation.

    :ivar value: Result of a list operation.
    :vartype value: list[~azure.mgmt.confluent.models.OrganizationResource]
    :ivar next_link: Link to the next set of results, if any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[OrganizationResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.OrganizationResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Result of a list operation.
        :paramtype value: list[~azure.mgmt.confluent.models.OrganizationResource]
        :keyword next_link: Link to the next set of results, if any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OrganizationResourceUpdate(_serialization.Model):
    """Organization Resource update.

    :ivar tags: ARM resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: ARM resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class RegionRecord(_serialization.Model):
    """Details of region record.

    :ivar kind: Kind of the cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the region.
    :vartype spec: ~azure.mgmt.confluent.models.RegionSpecEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "SCMetadataEntity"},
        "spec": {"key": "properties.spec", "type": "RegionSpecEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.RegionSpecEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Kind of the cluster.
        :paramtype kind: str
        :keyword id: Id of the cluster.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
        :keyword spec: Specification of the region.
        :paramtype spec: ~azure.mgmt.confluent.models.RegionSpecEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.spec = spec


class RegionSpecEntity(_serialization.Model):
    """Region spec details.

    :ivar name: Display Name of the region.
    :vartype name: str
    :ivar cloud: Cloud provider name.
    :vartype cloud: str
    :ivar region_name: Region name.
    :vartype region_name: str
    :ivar packages:
    :vartype packages: list[str]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "cloud": {"key": "cloud", "type": "str"},
        "region_name": {"key": "regionName", "type": "str"},
        "packages": {"key": "packages", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        cloud: Optional[str] = None,
        region_name: Optional[str] = None,
        packages: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Display Name of the region.
        :paramtype name: str
        :keyword cloud: Cloud provider name.
        :paramtype cloud: str
        :keyword region_name: Region name.
        :paramtype region_name: str
        :keyword packages:
        :paramtype packages: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.cloud = cloud
        self.region_name = region_name
        self.packages = packages


class ResourceProviderDefaultErrorResponse(_serialization.Model):
    """Default error response for resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar error: Response body of Error.
    :vartype error: ~azure.mgmt.confluent.models.ErrorResponseBody
    """

    _validation = {
        "error": {"readonly": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorResponseBody"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error = None


class RoleBindingRecord(_serialization.Model):
    """Details on principal, role name and crn pattern of a role binding.

    :ivar kind: The type of the resource.
    :vartype kind: str
    :ivar id: Id of the role binding.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar principal: The principal User or Group to bind the role to.
    :vartype principal: str
    :ivar role_name: The name of the role to bind to the principal.
    :vartype role_name: str
    :ivar crn_pattern: A CRN that specifies the scope and resource patterns necessary for the role
     to bind.
    :vartype crn_pattern: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "principal": {"key": "principal", "type": "str"},
        "role_name": {"key": "role_name", "type": "str"},
        "crn_pattern": {"key": "crn_pattern", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        principal: Optional[str] = None,
        role_name: Optional[str] = None,
        crn_pattern: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: The type of the resource.
        :paramtype kind: str
        :keyword id: Id of the role binding.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword principal: The principal User or Group to bind the role to.
        :paramtype principal: str
        :keyword role_name: The name of the role to bind to the principal.
        :paramtype role_name: str
        :keyword crn_pattern: A CRN that specifies the scope and resource patterns necessary for the
         role to bind.
        :paramtype crn_pattern: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.principal = principal
        self.role_name = role_name
        self.crn_pattern = crn_pattern


class SCClusterByokEntity(_serialization.Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.related = related
        self.resource_name = resource_name


class SCClusterNetworkEnvironmentEntity(_serialization.Model):
    """The environment or the network to which cluster belongs.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "environment": {"key": "environment", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword environment: Environment of the referred resource.
        :paramtype environment: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.environment = environment
        self.related = related
        self.resource_name = resource_name


class SCClusterRecord(_serialization.Model):
    """Details of cluster record.

    :ivar kind: Type of cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar name: Display name of the cluster.
    :vartype name: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the cluster.
    :vartype spec: ~azure.mgmt.confluent.models.SCClusterSpecEntity
    :ivar status: Specification of the cluster status.
    :vartype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "SCMetadataEntity"},
        "spec": {"key": "properties.spec", "type": "SCClusterSpecEntity"},
        "status": {"key": "properties.status", "type": "ClusterStatusEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        type: Optional[str] = None,
        name: Optional[str] = None,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.SCClusterSpecEntity"] = None,
        status: Optional["_models.ClusterStatusEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of cluster.
        :paramtype kind: str
        :keyword id: Id of the cluster.
        :paramtype id: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword name: Display name of the cluster.
        :paramtype name: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
        :keyword spec: Specification of the cluster.
        :paramtype spec: ~azure.mgmt.confluent.models.SCClusterSpecEntity
        :keyword status: Specification of the cluster status.
        :paramtype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.type = type
        self.name = name
        self.metadata = metadata
        self.spec = spec
        self.status = status


class SCClusterSpecEntity(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Spec of the cluster record.

    :ivar name: The name of the cluster.
    :vartype name: str
    :ivar availability: The availability zone configuration of the cluster.
    :vartype availability: str
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    :ivar zone: type of zone availability.
    :vartype zone: str
    :ivar package: Stream governance configuration. Known values are: "ESSENTIALS" and "ADVANCED".
    :vartype package: str or ~azure.mgmt.confluent.models.Package
    :ivar region: The cloud service provider region.
    :vartype region: str
    :ivar kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the
     cluster.
    :vartype kafka_bootstrap_endpoint: str
    :ivar http_endpoint: The cluster HTTP request URL.
    :vartype http_endpoint: str
    :ivar api_endpoint: The Kafka API cluster endpoint.
    :vartype api_endpoint: str
    :ivar config: Specification of the cluster configuration.
    :vartype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
    :ivar environment: Specification of the cluster environment.
    :vartype environment: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
    :ivar network: Specification of the cluster network.
    :vartype network: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
    :ivar byok: Specification of the cluster byok.
    :vartype byok: ~azure.mgmt.confluent.models.SCClusterByokEntity
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "availability": {"key": "availability", "type": "str"},
        "cloud": {"key": "cloud", "type": "str"},
        "zone": {"key": "zone", "type": "str"},
        "package": {"key": "package", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "kafka_bootstrap_endpoint": {"key": "kafkaBootstrapEndpoint", "type": "str"},
        "http_endpoint": {"key": "httpEndpoint", "type": "str"},
        "api_endpoint": {"key": "apiEndpoint", "type": "str"},
        "config": {"key": "config", "type": "ClusterConfigEntity"},
        "environment": {"key": "environment", "type": "SCClusterNetworkEnvironmentEntity"},
        "network": {"key": "network", "type": "SCClusterNetworkEnvironmentEntity"},
        "byok": {"key": "byok", "type": "SCClusterByokEntity"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        availability: Optional[str] = None,
        cloud: Optional[str] = None,
        zone: Optional[str] = None,
        package: Optional[Union[str, "_models.Package"]] = None,
        region: Optional[str] = None,
        kafka_bootstrap_endpoint: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        api_endpoint: Optional[str] = None,
        config: Optional["_models.ClusterConfigEntity"] = None,
        environment: Optional["_models.SCClusterNetworkEnvironmentEntity"] = None,
        network: Optional["_models.SCClusterNetworkEnvironmentEntity"] = None,
        byok: Optional["_models.SCClusterByokEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the cluster.
        :paramtype name: str
        :keyword availability: The availability zone configuration of the cluster.
        :paramtype availability: str
        :keyword cloud: The cloud service provider.
        :paramtype cloud: str
        :keyword zone: type of zone availability.
        :paramtype zone: str
        :keyword package: Stream governance configuration. Known values are: "ESSENTIALS" and
         "ADVANCED".
        :paramtype package: str or ~azure.mgmt.confluent.models.Package
        :keyword region: The cloud service provider region.
        :paramtype region: str
        :keyword kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to
         the cluster.
        :paramtype kafka_bootstrap_endpoint: str
        :keyword http_endpoint: The cluster HTTP request URL.
        :paramtype http_endpoint: str
        :keyword api_endpoint: The Kafka API cluster endpoint.
        :paramtype api_endpoint: str
        :keyword config: Specification of the cluster configuration.
        :paramtype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
        :keyword environment: Specification of the cluster environment.
        :paramtype environment: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
        :keyword network: Specification of the cluster network.
        :paramtype network: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
        :keyword byok: Specification of the cluster byok.
        :paramtype byok: ~azure.mgmt.confluent.models.SCClusterByokEntity
        """
        super().__init__(**kwargs)
        self.name = name
        self.availability = availability
        self.cloud = cloud
        self.zone = zone
        self.package = package
        self.region = region
        self.kafka_bootstrap_endpoint = kafka_bootstrap_endpoint
        self.http_endpoint = http_endpoint
        self.api_endpoint = api_endpoint
        self.config = config
        self.environment = environment
        self.network = network
        self.byok = byok


class SCConfluentListMetadata(_serialization.Model):
    """Metadata of the list.

    :ivar first: First page of the list.
    :vartype first: str
    :ivar last: Last page of the list.
    :vartype last: str
    :ivar prev: Previous page of the list.
    :vartype prev: str
    :ivar next: Next page of the list.
    :vartype next: str
    :ivar total_size: Total size of the list.
    :vartype total_size: int
    """

    _attribute_map = {
        "first": {"key": "first", "type": "str"},
        "last": {"key": "last", "type": "str"},
        "prev": {"key": "prev", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "total_size": {"key": "totalSize", "type": "int"},
    }

    def __init__(
        self,
        *,
        first: Optional[str] = None,
        last: Optional[str] = None,
        prev: Optional[str] = None,
        next: Optional[str] = None,
        total_size: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword first: First page of the list.
        :paramtype first: str
        :keyword last: Last page of the list.
        :paramtype last: str
        :keyword prev: Previous page of the list.
        :paramtype prev: str
        :keyword next: Next page of the list.
        :paramtype next: str
        :keyword total_size: Total size of the list.
        :paramtype total_size: int
        """
        super().__init__(**kwargs)
        self.first = first
        self.last = last
        self.prev = prev
        self.next = next
        self.total_size = total_size


class SCEnvironmentRecord(_serialization.Model):
    """Details about environment name, metadata and environment id of an environment.

    :ivar kind: Type of environment.
    :vartype kind: str
    :ivar id: Id of the environment.
    :vartype id: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar name: Display name of the environment.
    :vartype name: str
    :ivar stream_governance_config: Stream governance configuration.
    :vartype stream_governance_config: ~azure.mgmt.confluent.models.StreamGovernanceConfig
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "stream_governance_config": {"key": "properties.streamGovernanceConfig", "type": "StreamGovernanceConfig"},
        "metadata": {"key": "properties.metadata", "type": "SCMetadataEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        type: Optional[str] = None,
        name: Optional[str] = None,
        stream_governance_config: Optional["_models.StreamGovernanceConfig"] = None,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of environment.
        :paramtype kind: str
        :keyword id: Id of the environment.
        :paramtype id: str
        :keyword type: Type of the resource.
        :paramtype type: str
        :keyword name: Display name of the environment.
        :paramtype name: str
        :keyword stream_governance_config: Stream governance configuration.
        :paramtype stream_governance_config: ~azure.mgmt.confluent.models.StreamGovernanceConfig
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.type = type
        self.name = name
        self.stream_governance_config = stream_governance_config
        self.metadata = metadata


class SchemaRegistryClusterEnvironmentRegionEntity(_serialization.Model):  # pylint: disable=name-too-long
    """The environment associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "related": {"key": "related", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID of the referred resource.
        :paramtype id: str
        :keyword related: API URL for accessing or modifying the referred object.
        :paramtype related: str
        :keyword resource_name: CRN reference to the referred resource.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.related = related
        self.resource_name = resource_name


class SchemaRegistryClusterRecord(_serialization.Model):
    """Details of schema registry cluster record.

    :ivar kind: Kind of the cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the schema registry cluster.
    :vartype spec: ~azure.mgmt.confluent.models.SchemaRegistryClusterSpecEntity
    :ivar status: Specification of the cluster status.
    :vartype status: ~azure.mgmt.confluent.models.SchemaRegistryClusterStatusEntity
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "SCMetadataEntity"},
        "spec": {"key": "properties.spec", "type": "SchemaRegistryClusterSpecEntity"},
        "status": {"key": "properties.status", "type": "SchemaRegistryClusterStatusEntity"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.SchemaRegistryClusterSpecEntity"] = None,
        status: Optional["_models.SchemaRegistryClusterStatusEntity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Kind of the cluster.
        :paramtype kind: str
        :keyword id: Id of the cluster.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
        :keyword spec: Specification of the schema registry cluster.
        :paramtype spec: ~azure.mgmt.confluent.models.SchemaRegistryClusterSpecEntity
        :keyword status: Specification of the cluster status.
        :paramtype status: ~azure.mgmt.confluent.models.SchemaRegistryClusterStatusEntity
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.spec = spec
        self.status = status


class SchemaRegistryClusterSpecEntity(_serialization.Model):
    """Details of schema registry cluster spec.

    :ivar name: Name of the schema registry cluster.
    :vartype name: str
    :ivar http_endpoint: Http endpoint of the cluster.
    :vartype http_endpoint: str
    :ivar package: Type of the cluster package Advanced, essentials.
    :vartype package: str
    :ivar region: Region details of the schema registry cluster.
    :vartype region: ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
    :ivar environment: Environment details of the schema registry cluster.
    :vartype environment: ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "http_endpoint": {"key": "httpEndpoint", "type": "str"},
        "package": {"key": "package", "type": "str"},
        "region": {"key": "region", "type": "SchemaRegistryClusterEnvironmentRegionEntity"},
        "environment": {"key": "environment", "type": "SchemaRegistryClusterEnvironmentRegionEntity"},
        "cloud": {"key": "cloud", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        package: Optional[str] = None,
        region: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = None,
        environment: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = None,
        cloud: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the schema registry cluster.
        :paramtype name: str
        :keyword http_endpoint: Http endpoint of the cluster.
        :paramtype http_endpoint: str
        :keyword package: Type of the cluster package Advanced, essentials.
        :paramtype package: str
        :keyword region: Region details of the schema registry cluster.
        :paramtype region: ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
        :keyword environment: Environment details of the schema registry cluster.
        :paramtype environment:
         ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
        :keyword cloud: The cloud service provider.
        :paramtype cloud: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.http_endpoint = http_endpoint
        self.package = package
        self.region = region
        self.environment = environment
        self.cloud = cloud


class SchemaRegistryClusterStatusEntity(_serialization.Model):
    """Status of the schema registry cluster record.

    :ivar phase: The lifecycle phase of the cluster.
    :vartype phase: str
    """

    _attribute_map = {
        "phase": {"key": "phase", "type": "str"},
    }

    def __init__(self, *, phase: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword phase: The lifecycle phase of the cluster.
        :paramtype phase: str
        """
        super().__init__(**kwargs)
        self.phase = phase


class SCMetadataEntity(_serialization.Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    :ivar created_timestamp: Created Date Time.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Updated Date time.
    :vartype updated_timestamp: str
    :ivar deleted_timestamp: Deleted Date time.
    :vartype deleted_timestamp: str
    """

    _attribute_map = {
        "self_property": {"key": "self", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "created_timestamp": {"key": "createdTimestamp", "type": "str"},
        "updated_timestamp": {"key": "updatedTimestamp", "type": "str"},
        "deleted_timestamp": {"key": "deletedTimestamp", "type": "str"},
    }

    def __init__(
        self,
        *,
        self_property: Optional[str] = None,
        resource_name: Optional[str] = None,
        created_timestamp: Optional[str] = None,
        updated_timestamp: Optional[str] = None,
        deleted_timestamp: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword self_property: Self lookup url.
        :paramtype self_property: str
        :keyword resource_name: Resource name of the record.
        :paramtype resource_name: str
        :keyword created_timestamp: Created Date Time.
        :paramtype created_timestamp: str
        :keyword updated_timestamp: Updated Date time.
        :paramtype updated_timestamp: str
        :keyword deleted_timestamp: Deleted Date time.
        :paramtype deleted_timestamp: str
        """
        super().__init__(**kwargs)
        self.self_property = self_property
        self.resource_name = resource_name
        self.created_timestamp = created_timestamp
        self.updated_timestamp = updated_timestamp
        self.deleted_timestamp = deleted_timestamp


class ServiceAccountRecord(_serialization.Model):
    """Record of the service account.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the service account.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Name of the service account.
    :vartype display_name: str
    :ivar description: Description of the service account.
    :vartype description: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "display_name": {"key": "display_name", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of account.
        :paramtype kind: str
        :keyword id: Id of the service account.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword display_name: Name of the service account.
        :paramtype display_name: str
        :keyword description: Description of the service account.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.display_name = display_name
        self.description = description


class StreamGovernanceConfig(_serialization.Model):
    """Stream governance configuration.

    :ivar package: Stream governance configuration. Known values are: "ESSENTIALS" and "ADVANCED".
    :vartype package: str or ~azure.mgmt.confluent.models.Package
    """

    _attribute_map = {
        "package": {"key": "package", "type": "str"},
    }

    def __init__(self, *, package: Optional[Union[str, "_models.Package"]] = None, **kwargs: Any) -> None:
        """
        :keyword package: Stream governance configuration. Known values are: "ESSENTIALS" and
         "ADVANCED".
        :paramtype package: str or ~azure.mgmt.confluent.models.Package
        """
        super().__init__(**kwargs)
        self.package = package


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TopicMetadataEntity(_serialization.Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    """

    _attribute_map = {
        "self_property": {"key": "self", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
    }

    def __init__(
        self, *, self_property: Optional[str] = None, resource_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword self_property: Self lookup url.
        :paramtype self_property: str
        :keyword resource_name: Resource name of the record.
        :paramtype resource_name: str
        """
        super().__init__(**kwargs)
        self.self_property = self_property
        self.resource_name = resource_name


class TopicRecord(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Details of topic record.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM Resource Id of the Topic.
    :vartype id: str
    :ivar name: Display name of the topic.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar kind: Type of topic.
    :vartype kind: str
    :ivar topic_id: Topic Id returned by Confluent.
    :vartype topic_id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.TopicMetadataEntity
    :ivar partitions: Partition Specification of the topic.
    :vartype partitions: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar configs: Config Specification of the topic.
    :vartype configs: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar input_configs: Input Config Specification of the topic.
    :vartype input_configs: list[~azure.mgmt.confluent.models.TopicsInputConfig]
    :ivar partitions_reassignments: Partition Reassignment Specification of the topic.
    :vartype partitions_reassignments: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar partitions_count: Partition count of the topic.
    :vartype partitions_count: str
    :ivar replication_factor: Replication factor of the topic.
    :vartype replication_factor: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "properties.kind", "type": "str"},
        "topic_id": {"key": "properties.topicId", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "TopicMetadataEntity"},
        "partitions": {"key": "properties.partitions", "type": "TopicsRelatedLink"},
        "configs": {"key": "properties.configs", "type": "TopicsRelatedLink"},
        "input_configs": {"key": "properties.inputConfigs", "type": "[TopicsInputConfig]"},
        "partitions_reassignments": {"key": "properties.partitionsReassignments", "type": "TopicsRelatedLink"},
        "partitions_count": {"key": "properties.partitionsCount", "type": "str"},
        "replication_factor": {"key": "properties.replicationFactor", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        topic_id: Optional[str] = None,
        metadata: Optional["_models.TopicMetadataEntity"] = None,
        partitions: Optional["_models.TopicsRelatedLink"] = None,
        configs: Optional["_models.TopicsRelatedLink"] = None,
        input_configs: Optional[List["_models.TopicsInputConfig"]] = None,
        partitions_reassignments: Optional["_models.TopicsRelatedLink"] = None,
        partitions_count: Optional[str] = None,
        replication_factor: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of topic.
        :paramtype kind: str
        :keyword topic_id: Topic Id returned by Confluent.
        :paramtype topic_id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.TopicMetadataEntity
        :keyword partitions: Partition Specification of the topic.
        :paramtype partitions: ~azure.mgmt.confluent.models.TopicsRelatedLink
        :keyword configs: Config Specification of the topic.
        :paramtype configs: ~azure.mgmt.confluent.models.TopicsRelatedLink
        :keyword input_configs: Input Config Specification of the topic.
        :paramtype input_configs: list[~azure.mgmt.confluent.models.TopicsInputConfig]
        :keyword partitions_reassignments: Partition Reassignment Specification of the topic.
        :paramtype partitions_reassignments: ~azure.mgmt.confluent.models.TopicsRelatedLink
        :keyword partitions_count: Partition count of the topic.
        :paramtype partitions_count: str
        :keyword replication_factor: Replication factor of the topic.
        :paramtype replication_factor: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = kind
        self.topic_id = topic_id
        self.metadata = metadata
        self.partitions = partitions
        self.configs = configs
        self.input_configs = input_configs
        self.partitions_reassignments = partitions_reassignments
        self.partitions_count = partitions_count
        self.replication_factor = replication_factor


class TopicsInputConfig(_serialization.Model):
    """Topics input config.

    :ivar name: Name of the topic input config.
    :vartype name: str
    :ivar value: Value of the topic input config.
    :vartype value: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Name of the topic input config.
        :paramtype name: str
        :keyword value: Value of the topic input config.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.value = value


class TopicsRelatedLink(_serialization.Model):
    """Partition Config spec of the topic record.

    :ivar related: Relationship of the topic.
    :vartype related: str
    """

    _attribute_map = {
        "related": {"key": "related", "type": "str"},
    }

    def __init__(self, *, related: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword related: Relationship of the topic.
        :paramtype related: str
        """
        super().__init__(**kwargs)
        self.related = related


class UserDetail(_serialization.Model):
    """Subscriber detail.

    All required parameters must be populated in order to send to server.

    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    :ivar email_address: Email address. Required.
    :vartype email_address: str
    :ivar user_principal_name: User principal name.
    :vartype user_principal_name: str
    :ivar aad_email: AAD email address.
    :vartype aad_email: str
    """

    _validation = {
        "first_name": {"max_length": 50},
        "last_name": {"max_length": 50},
        "email_address": {"required": True, "pattern": r"^\S+@\S+\.\S+$"},
    }

    _attribute_map = {
        "first_name": {"key": "firstName", "type": "str"},
        "last_name": {"key": "lastName", "type": "str"},
        "email_address": {"key": "emailAddress", "type": "str"},
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
        "aad_email": {"key": "aadEmail", "type": "str"},
    }

    def __init__(
        self,
        *,
        email_address: str,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        aad_email: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword first_name: First name.
        :paramtype first_name: str
        :keyword last_name: Last name.
        :paramtype last_name: str
        :keyword email_address: Email address. Required.
        :paramtype email_address: str
        :keyword user_principal_name: User principal name.
        :paramtype user_principal_name: str
        :keyword aad_email: AAD email address.
        :paramtype aad_email: str
        """
        super().__init__(**kwargs)
        self.first_name = first_name
        self.last_name = last_name
        self.email_address = email_address
        self.user_principal_name = user_principal_name
        self.aad_email = aad_email


class UserRecord(_serialization.Model):
    """Record of the user.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the user.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar email: Email of the user.
    :vartype email: str
    :ivar full_name: Name of the user.
    :vartype full_name: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    """

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "metadata": {"key": "metadata", "type": "MetadataEntity"},
        "email": {"key": "email", "type": "str"},
        "full_name": {"key": "full_name", "type": "str"},
        "auth_type": {"key": "auth_type", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        email: Optional[str] = None,
        full_name: Optional[str] = None,
        auth_type: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of account.
        :paramtype kind: str
        :keyword id: Id of the user.
        :paramtype id: str
        :keyword metadata: Metadata of the record.
        :paramtype metadata: ~azure.mgmt.confluent.models.MetadataEntity
        :keyword email: Email of the user.
        :paramtype email: str
        :keyword full_name: Name of the user.
        :paramtype full_name: str
        :keyword auth_type: Auth type of the user.
        :paramtype auth_type: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.id = id
        self.metadata = metadata
        self.email = email
        self.full_name = full_name
        self.auth_type = auth_type


class ValidationResponse(_serialization.Model):
    """Validation response from the provider.

    :ivar info: Info from the response.
    :vartype info: dict[str, str]
    """

    _attribute_map = {
        "info": {"key": "info", "type": "{str}"},
    }

    def __init__(self, *, info: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword info: Info from the response.
        :paramtype info: dict[str, str]
        """
        super().__init__(**kwargs)
        self.info = info
