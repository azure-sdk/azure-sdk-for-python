# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from azure.profiles import KnownProfiles, ProfileDefinition
from azure.profiles.multiapiclient import MultiApiClientMixin

from .._serialization import Deserializer, Serializer
from ._configuration import ComputeManagementClientConfiguration

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

class _SDKClient(object):
    def __init__(self, *args, **kwargs):
        """This is a fake class to support current implemetation of MultiApiClientMixin."
        Will be removed in final version of multiapi azure-core based client
        """
        pass

class ComputeManagementClient(MultiApiClientMixin, _SDKClient):
    """Compute Client.

    This ready contains multiple API versions, to help you deal with all of the Azure clouds
    (Azure Stack, Azure Government, Azure China, etc.).
    By default, it uses the latest API version available on public Azure.
    For production, you should stick to a particular api-version and/or profile.
    The profile sets a mapping between an operation group and its API version.
    The api-version parameter sets the default API version if the operation
    group is not described in the profile.

    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. Required.
    :type subscription_id: str
    :param api_version: API version to use if no profile is provided, or if missing in profile.
    :type api_version: str
    :param base_url: Service URL
    :type base_url: str
    :param profile: A profile definition, from KnownProfiles to dict.
    :type profile: azure.profiles.KnownProfiles
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    DEFAULT_API_VERSION = '2023-03-01'
    _PROFILE_TAG = "azure.mgmt.computetest.ComputeManagementClient"
    LATEST_PROFILE = ProfileDefinition({
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
            'disks': '2023-01-02',
        }},
        _PROFILE_TAG + " latest"
    )

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        api_version: Optional[str] = None,
        base_url: str = "https://management.azure.com",
        profile: KnownProfiles = KnownProfiles.default,
        **kwargs: Any
    ) -> None:
        if api_version:
            kwargs.setdefault('api_version', api_version)
        self._config = ComputeManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)
        super(ComputeManagementClient, self).__init__(
            api_version=api_version,
            profile=profile
        )

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=DEFAULT_API_VERSION):
        """Module depends on the API version:

           * 2023-01-02: :mod:`v2023_01_02.models<azure.mgmt.computetest.v2023_01_02.models>`
           * 2023-03-01: :mod:`v2023_03_01.models<azure.mgmt.computetest.v2023_03_01.models>`
        """
        if api_version == '2023-01-02':
            from ..v2023_01_02 import models
            return models
        elif api_version == '2023-03-01':
            from ..v2023_03_01 import models
            return models
        raise ValueError("API version {} is not available".format(api_version))

    @property
    def disks(self):
        """Instance depends on the API version:

           * 2023-01-02: :class:`DisksOperations<azure.mgmt.computetest.v2023_01_02.aio.operations.DisksOperations>`
        """
        api_version = self._get_api_version('disks')
        if api_version == '2023-01-02':
            from ..v2023_01_02.aio.operations import DisksOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'disks'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def operations(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`Operations<azure.mgmt.computetest.v2023_03_01.aio.operations.Operations>`
        """
        api_version = self._get_api_version('operations')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import Operations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'operations'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def usage(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`UsageOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.UsageOperations>`
        """
        api_version = self._get_api_version('usage')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import UsageOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'usage'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def virtual_machine_run_commands(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`VirtualMachineRunCommandsOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.VirtualMachineRunCommandsOperations>`
        """
        api_version = self._get_api_version('virtual_machine_run_commands')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import VirtualMachineRunCommandsOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'virtual_machine_run_commands'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def virtual_machine_scale_set_vm_run_commands(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`VirtualMachineScaleSetVMRunCommandsOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.VirtualMachineScaleSetVMRunCommandsOperations>`
        """
        api_version = self._get_api_version('virtual_machine_scale_set_vm_run_commands')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import VirtualMachineScaleSetVMRunCommandsOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'virtual_machine_scale_set_vm_run_commands'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def virtual_machine_scale_set_vms(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`VirtualMachineScaleSetVMsOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.VirtualMachineScaleSetVMsOperations>`
        """
        api_version = self._get_api_version('virtual_machine_scale_set_vms')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import VirtualMachineScaleSetVMsOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'virtual_machine_scale_set_vms'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def virtual_machine_sizes(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`VirtualMachineSizesOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.VirtualMachineSizesOperations>`
        """
        api_version = self._get_api_version('virtual_machine_sizes')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import VirtualMachineSizesOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'virtual_machine_sizes'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    @property
    def virtual_machines(self):
        """Instance depends on the API version:

           * 2023-03-01: :class:`VirtualMachinesOperations<azure.mgmt.computetest.v2023_03_01.aio.operations.VirtualMachinesOperations>`
        """
        api_version = self._get_api_version('virtual_machines')
        if api_version == '2023-03-01':
            from ..v2023_03_01.aio.operations import VirtualMachinesOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'virtual_machines'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)), api_version)

    async def close(self):
        await self._client.close()
    async def __aenter__(self):
        await self._client.__aenter__()
        return self
    async def __aexit__(self, *exc_details):
        await self._client.__aexit__(*exc_details)
