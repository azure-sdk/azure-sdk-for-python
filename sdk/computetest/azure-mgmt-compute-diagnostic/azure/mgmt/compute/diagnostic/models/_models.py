# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.diagnostic.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.diagnostic.models.SystemData
    """


class ComputeDiagnosticBase(ProxyResource):
    """Contains metadata of a diagnostic type.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.diagnostic.models.SystemData
    :ivar properties: Contains additional properties of a diagnostic.
    :vartype properties: ~azure.mgmt.compute.diagnostic.models.DiagnosticProperties
    """

    properties: Optional["_models.DiagnosticProperties"] = rest_field()
    """Contains additional properties of a diagnostic."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DiagnosticProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComputeDiagnosticsOperationResult(_model_base.Model):
    """Api output result when Compute Diagnostic operation is completed.

    :ivar message: The result of the disk inspection operation.
    :vartype message: str
    :ivar response_fields: The response fields of the disk inspection operation.
    :vartype response_fields: str
    :ivar result_status: Result status of the async operation. Known values are: "Success" and
     "Failed".
    :vartype result_status: str or ~azure.mgmt.compute.diagnostic.models.ResultStatus
    :ivar error_detail: The API error details.
    :vartype error_detail: ~azure.mgmt.compute.diagnostic.models.ErrorDetail
    :ivar created_utc: The time when the disk inspection was completed.
    :vartype created_utc: ~datetime.datetime
    """

    message: Optional[str] = rest_field()
    """The result of the disk inspection operation."""
    response_fields: Optional[str] = rest_field(name="responseFields")
    """The response fields of the disk inspection operation."""
    result_status: Optional[Union[str, "_models.ResultStatus"]] = rest_field(name="resultStatus")
    """Result status of the async operation. Known values are: \"Success\" and \"Failed\"."""
    error_detail: Optional["_models.ErrorDetail"] = rest_field(name="errorDetail")
    """The API error details."""
    created_utc: Optional[datetime.datetime] = rest_field(name="createdUTC", format="rfc3339")
    """The time when the disk inspection was completed."""

    @overload
    def __init__(
        self,
        *,
        message: Optional[str] = None,
        response_fields: Optional[str] = None,
        result_status: Optional[Union[str, "_models.ResultStatus"]] = None,
        error_detail: Optional["_models.ErrorDetail"] = None,
        created_utc: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticProperties(_model_base.Model):
    """Contains additional properties of a diagnostic.

    :ivar supported_resource_types: Describes what are the supported resource types for a
     diagnostic.
    :vartype supported_resource_types: list[str]
    """

    supported_resource_types: Optional[List[str]] = rest_field(name="supportedResourceTypes")
    """Describes what are the supported resource types for a diagnostic."""

    @overload
    def __init__(
        self,
        *,
        supported_resource_types: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.compute.diagnostic.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.compute.diagnostic.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.compute.diagnostic.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PlacementScore(_model_base.Model):
    """The spot placement score for sku/region/zone combination.

    :ivar sku: The resource's CRP virtual machine SKU size.
    :vartype sku: str
    :ivar region: The region.
    :vartype region: str
    :ivar availability_zone: The availability region.
    :vartype availability_zone: str
    :ivar score: The placement score.
    :vartype score: str
    :ivar is_quota_available: Whether the desired quota is available.
    :vartype is_quota_available: bool
    """

    sku: Optional[str] = rest_field()
    """The resource's CRP virtual machine SKU size."""
    region: Optional[str] = rest_field()
    """The region."""
    availability_zone: Optional[str] = rest_field(name="availabilityZone")
    """The availability region."""
    score: Optional[str] = rest_field()
    """The placement score."""
    is_quota_available: Optional[bool] = rest_field(name="isQuotaAvailable")
    """Whether the desired quota is available."""

    @overload
    def __init__(
        self,
        *,
        sku: Optional[str] = None,
        region: Optional[str] = None,
        availability_zone: Optional[str] = None,
        score: Optional[str] = None,
        is_quota_available: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceSize(_model_base.Model):
    """SpotPlacementRecommender API response.

    :ivar sku: The resource's CRP virtual machine SKU size.
    :vartype sku: str
    """

    sku: Optional[str] = rest_field()
    """The resource's CRP virtual machine SKU size."""

    @overload
    def __init__(
        self,
        *,
        sku: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunDiskInspectionInput(_model_base.Model):
    """Data used for requesting a Disk Inspection execution.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: Qualified ID of the resource. Required.
    :vartype resource_id: str
    :ivar manifest: Name of manifest in order to trigger Disk Inspection. Required.
    :vartype manifest: str
    :ivar upload_sas_uri: SAS uri to the blob where results will be uploaded. Required.
    :vartype upload_sas_uri: str
    """

    resource_id: str = rest_field(name="resourceId")
    """Qualified ID of the resource. Required."""
    manifest: str = rest_field()
    """Name of manifest in order to trigger Disk Inspection. Required."""
    upload_sas_uri: str = rest_field(name="uploadSasUri")
    """SAS uri to the blob where results will be uploaded. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        manifest: str,
        upload_sas_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SpotPlacementRecommenderInput(_model_base.Model):
    """SpotPlacementRecommender API Input.

    :ivar desired_locations: The desired regions.
    :vartype desired_locations: list[str]
    :ivar desired_sizes: The desired resource SKUs.
    :vartype desired_sizes: list[~azure.mgmt.compute.diagnostic.models.ResourceSize]
    :ivar desired_count: Desired instance count per region/zone based on the scope.
    :vartype desired_count: int
    :ivar availability_zones: Defines if the scope is zonal or regional.
    :vartype availability_zones: bool
    """

    desired_locations: Optional[List[str]] = rest_field(name="desiredLocations")
    """The desired regions."""
    desired_sizes: Optional[List["_models.ResourceSize"]] = rest_field(name="desiredSizes")
    """The desired resource SKUs."""
    desired_count: Optional[int] = rest_field(name="desiredCount")
    """Desired instance count per region/zone based on the scope."""
    availability_zones: Optional[bool] = rest_field(name="availabilityZones")
    """Defines if the scope is zonal or regional."""

    @overload
    def __init__(
        self,
        *,
        desired_locations: Optional[List[str]] = None,
        desired_sizes: Optional[List["_models.ResourceSize"]] = None,
        desired_count: Optional[int] = None,
        availability_zones: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SpotPlacementRecommenderResponse(_model_base.Model):
    """SpotPlacementRecommender API response.

    :ivar desired_locations: The desired regions.
    :vartype desired_locations: list[str]
    :ivar desired_sizes: The desired resource SKUs.
    :vartype desired_sizes: list[~azure.mgmt.compute.diagnostic.models.ResourceSize]
    :ivar desired_count: Desired instance count per region/zone based on the scope.
    :vartype desired_count: int
    :ivar availability_zones: Defines if the scope is zonal or regional.
    :vartype availability_zones: bool
    :ivar placement_scores: The spot placement scores.
    :vartype placement_scores: list[~azure.mgmt.compute.diagnostic.models.PlacementScore]
    """

    desired_locations: Optional[List[str]] = rest_field(name="desiredLocations")
    """The desired regions."""
    desired_sizes: Optional[List["_models.ResourceSize"]] = rest_field(name="desiredSizes")
    """The desired resource SKUs."""
    desired_count: Optional[int] = rest_field(name="desiredCount")
    """Desired instance count per region/zone based on the scope."""
    availability_zones: Optional[bool] = rest_field(name="availabilityZones")
    """Defines if the scope is zonal or regional."""
    placement_scores: Optional[List["_models.PlacementScore"]] = rest_field(name="placementScores")
    """The spot placement scores."""

    @overload
    def __init__(
        self,
        *,
        desired_locations: Optional[List[str]] = None,
        desired_sizes: Optional[List["_models.ResourceSize"]] = None,
        desired_count: Optional[int] = None,
        availability_zones: Optional[bool] = None,
        placement_scores: Optional[List["_models.PlacementScore"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SpotPlacementScoresInput(_model_base.Model):
    """SpotPlacementScores API Input.

    :ivar desired_locations: The desired regions.
    :vartype desired_locations: list[str]
    :ivar desired_sizes: The desired resource SKUs.
    :vartype desired_sizes: list[~azure.mgmt.compute.diagnostic.models.ResourceSize]
    :ivar desired_count: Desired instance count per region/zone based on the scope.
    :vartype desired_count: int
    :ivar availability_zones: Defines if the scope is zonal or regional.
    :vartype availability_zones: bool
    """

    desired_locations: Optional[List[str]] = rest_field(name="desiredLocations")
    """The desired regions."""
    desired_sizes: Optional[List["_models.ResourceSize"]] = rest_field(name="desiredSizes")
    """The desired resource SKUs."""
    desired_count: Optional[int] = rest_field(name="desiredCount")
    """Desired instance count per region/zone based on the scope."""
    availability_zones: Optional[bool] = rest_field(name="availabilityZones")
    """Defines if the scope is zonal or regional."""

    @overload
    def __init__(
        self,
        *,
        desired_locations: Optional[List[str]] = None,
        desired_sizes: Optional[List["_models.ResourceSize"]] = None,
        desired_count: Optional[int] = None,
        availability_zones: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SpotPlacementScoresResponse(_model_base.Model):
    """SpotPlacementScores API response.

    :ivar desired_locations: The desired regions.
    :vartype desired_locations: list[str]
    :ivar desired_sizes: The desired resource SKUs.
    :vartype desired_sizes: list[~azure.mgmt.compute.diagnostic.models.ResourceSize]
    :ivar desired_count: Desired instance count per region/zone based on the scope.
    :vartype desired_count: int
    :ivar availability_zones: Defines if the scope is zonal or regional.
    :vartype availability_zones: bool
    :ivar placement_scores: The spot placement scores.
    :vartype placement_scores: list[~azure.mgmt.compute.diagnostic.models.PlacementScore]
    """

    desired_locations: Optional[List[str]] = rest_field(name="desiredLocations")
    """The desired regions."""
    desired_sizes: Optional[List["_models.ResourceSize"]] = rest_field(name="desiredSizes")
    """The desired resource SKUs."""
    desired_count: Optional[int] = rest_field(name="desiredCount")
    """Desired instance count per region/zone based on the scope."""
    availability_zones: Optional[bool] = rest_field(name="availabilityZones")
    """Defines if the scope is zonal or regional."""
    placement_scores: Optional[List["_models.PlacementScore"]] = rest_field(name="placementScores")
    """The spot placement scores."""

    @overload
    def __init__(
        self,
        *,
        desired_locations: Optional[List[str]] = None,
        desired_sizes: Optional[List["_models.ResourceSize"]] = None,
        desired_count: Optional[int] = None,
        availability_zones: Optional[bool] = None,
        placement_scores: Optional[List["_models.PlacementScore"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageConfigurationInput(_model_base.Model):
    """Data used for registering a Storage Account for a Subscription.

    All required parameters must be populated in order to send to server.

    :ivar storage_account_id: Fully qualified storage account Id. Example:
     "/subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Storage/storageAccounts/{storageAccountName}".
     Required.
    :vartype storage_account_id: str
    """

    storage_account_id: str = rest_field(name="storageAccountId")
    """Fully qualified storage account Id. Example:
     \"/subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Storage/storageAccounts/{storageAccountName}\".  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        storage_account_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageConfigurationResponse(_model_base.Model):
    """Api output result when there is an existing storage configuration entry.

    :ivar storage_account_id: Fully qualified storage account Id. Example:
     "/subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Storage/storageAccounts/{storageAccountName}".
    :vartype storage_account_id: str
    """

    storage_account_id: Optional[str] = rest_field(name="storageAccountId")
    """Fully qualified storage account Id. Example:
     \"/subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Storage/storageAccounts/{storageAccountName}\".  # pylint: disable=line-too-long"""

    @overload
    def __init__(
        self,
        *,
        storage_account_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.compute.diagnostic.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.compute.diagnostic.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
