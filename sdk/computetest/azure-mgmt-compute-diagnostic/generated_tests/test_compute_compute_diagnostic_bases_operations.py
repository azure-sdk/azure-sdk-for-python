# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.compute.diagnostic import ComputeClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestComputeComputeDiagnosticBasesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ComputeClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_diagnostic_bases_get(self, resource_group):
        response = self.client.compute_diagnostic_bases.get(
            location="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_diagnostic_bases_list(self, resource_group):
        response = self.client.compute_diagnostic_bases.list(
            location="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_diagnostic_bases_begin_create(self, resource_group):
        response = self.client.compute_diagnostic_bases.begin_create(
            location="str",
            body={"manifest": "str", "resourceId": "str", "uploadSasUri": "str"},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_diagnostic_bases_register(self, resource_group):
        response = self.client.compute_diagnostic_bases.register(
            location="str",
            body={"storageAccountId": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_diagnostic_bases_validate(self, resource_group):
        response = self.client.compute_diagnostic_bases.validate(
            location="str",
        )

        # please add some check logic here by yourself
        # ...
