# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.compute.gallery.aio import ComputeClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestComputeGalleryImagesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ComputeClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_gallery_images_get(self, resource_group):
        response = await self.client.gallery_images.get(
            resource_group_name=resource_group.name,
            gallery_name="str",
            gallery_image_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_gallery_images_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.gallery_images.begin_create_or_update(
                resource_group_name=resource_group.name,
                gallery_name="str",
                gallery_image_name="str",
                resource={
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "identifier": {"offer": "str", "publisher": "str", "sku": "str"},
                        "osState": "str",
                        "osType": "str",
                        "architecture": "str",
                        "description": "str",
                        "disallowed": {"diskTypes": ["str"]},
                        "endOfLifeDate": "2020-02-20 00:00:00",
                        "eula": "str",
                        "features": [{"name": "str", "value": "str"}],
                        "hyperVGeneration": "str",
                        "privacyStatementUri": "str",
                        "provisioningState": "str",
                        "purchasePlan": {"name": "str", "product": "str", "publisher": "str"},
                        "recommended": {"memory": {"max": 0, "min": 0}, "vCPUs": {"max": 0, "min": 0}},
                        "releaseNoteUri": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_gallery_images_begin_update(self, resource_group):
        response = await (
            await self.client.gallery_images.begin_update(
                resource_group_name=resource_group.name,
                gallery_name="str",
                gallery_image_name="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "identifier": {"offer": "str", "publisher": "str", "sku": "str"},
                        "osState": "str",
                        "osType": "str",
                        "architecture": "str",
                        "description": "str",
                        "disallowed": {"diskTypes": ["str"]},
                        "endOfLifeDate": "2020-02-20 00:00:00",
                        "eula": "str",
                        "features": [{"name": "str", "value": "str"}],
                        "hyperVGeneration": "str",
                        "privacyStatementUri": "str",
                        "provisioningState": "str",
                        "purchasePlan": {"name": "str", "product": "str", "publisher": "str"},
                        "recommended": {"memory": {"max": 0, "min": 0}, "vCPUs": {"max": 0, "min": 0}},
                        "releaseNoteUri": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_gallery_images_begin_delete(self, resource_group):
        response = await (
            await self.client.gallery_images.begin_delete(
                resource_group_name=resource_group.name,
                gallery_name="str",
                gallery_image_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_gallery_images_list_by_gallery(self, resource_group):
        response = self.client.gallery_images.list_by_gallery(
            resource_group_name=resource_group.name,
            gallery_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
