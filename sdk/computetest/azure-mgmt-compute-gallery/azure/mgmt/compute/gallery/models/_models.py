# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class CloudError(_model_base.Model):
    """An error response from the Compute service.

    :ivar error: Api error.
    :vartype error: ~azure.mgmt.compute.gallery.models.ApiError
    """

    error: Optional["_models.ApiError"] = rest_field()
    """Api error."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ApiError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    """


class CommunityGallery(ProxyResource):
    """Specifies information about the Community Gallery that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Describes the properties of a community gallery.
    :vartype properties: ~azure.mgmt.compute.gallery.models.CommunityGalleryProperties
    """

    properties: Optional["_models.CommunityGalleryProperties"] = rest_field()
    """Describes the properties of a community gallery."""

    __flattened_items = ["disclaimer", "artifact_tags", "community_metadata"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CommunityGalleryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CommunityGalleryImage(ProxyResource):
    """Specifies information about the gallery image definition that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Describes the properties of a gallery image definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.CommunityGalleryImageProperties
    """

    properties: Optional["_models.CommunityGalleryImageProperties"] = rest_field()
    """Describes the properties of a gallery image definition."""

    __flattened_items = [
        "os_type",
        "os_state",
        "end_of_life_date",
        "identifier",
        "recommended",
        "disallowed",
        "hyper_v_generation",
        "features",
        "purchase_plan",
        "architecture",
        "privacy_statement_uri",
        "eula",
        "disclaimer",
        "artifact_tags",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CommunityGalleryImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CommunityGalleryImageIdentifier(_model_base.Model):
    """This is the community gallery image definition identifier.

    :ivar publisher: The name of the gallery image definition publisher.
    :vartype publisher: str
    :ivar offer: The name of the gallery image definition offer.
    :vartype offer: str
    :ivar sku: The name of the gallery image definition SKU.
    :vartype sku: str
    """

    publisher: Optional[str] = rest_field()
    """The name of the gallery image definition publisher."""
    offer: Optional[str] = rest_field()
    """The name of the gallery image definition offer."""
    sku: Optional[str] = rest_field()
    """The name of the gallery image definition SKU."""

    @overload
    def __init__(
        self,
        *,
        publisher: Optional[str] = None,
        offer: Optional[str] = None,
        sku: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CommunityGalleryImageProperties(_model_base.Model):
    """Describes the properties of a gallery image definition.


    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.gallery.models.OperatingSystemTypes
    :ivar os_state: This property allows the user to specify whether the virtual machines created
     under this image are 'Generalized' or 'Specialized'. Required. Known values are: "Generalized"
     and "Specialized".
    :vartype os_state: str or ~azure.mgmt.compute.gallery.models.OperatingSystemStateTypes
    :ivar end_of_life_date: The end of life date of the gallery image definition. This property can
     be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar identifier: This is the community gallery image definition identifier. Required.
    :vartype identifier: ~azure.mgmt.compute.gallery.models.CommunityGalleryImageIdentifier
    :ivar recommended: The properties describe the recommended machine configuration for this Image
     Definition. These properties are updatable.
    :vartype recommended: ~azure.mgmt.compute.gallery.models.RecommendedMachineConfiguration
    :ivar disallowed: Describes the disallowed disk types.
    :vartype disallowed: ~azure.mgmt.compute.gallery.models.Disallowed
    :ivar hyper_v_generation: The hypervisor generation of the Virtual Machine. Applicable to OS
     disks only. Known values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.gallery.models.HyperVGeneration
    :ivar features: A list of gallery image features.
    :vartype features: list[~azure.mgmt.compute.gallery.models.GalleryImageFeature]
    :ivar purchase_plan: Describes the gallery image definition purchase plan. This is used by
     marketplace images.
    :vartype purchase_plan: ~azure.mgmt.compute.gallery.models.ImagePurchasePlan
    :ivar architecture: The architecture of the image. Applicable to OS disks only. Known values
     are: "x64" and "Arm64".
    :vartype architecture: str or ~azure.mgmt.compute.gallery.models.Architecture
    :ivar privacy_statement_uri: Privacy statement URI for the current community gallery image.
    :vartype privacy_statement_uri: str
    :ivar eula: The end-user license agreement for the current community gallery image.
    :vartype eula: str
    :ivar disclaimer: The disclaimer for a community gallery resource.
    :vartype disclaimer: str
    :ivar artifact_tags: The artifact tags of a community gallery resource.
    :vartype artifact_tags: dict[str, str]
    """

    os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk when
     creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. Required.
     Known values are: \"Windows\" and \"Linux\"."""
    os_state: Union[str, "_models.OperatingSystemStateTypes"] = rest_field(name="osState")
    """This property allows the user to specify whether the virtual machines created under this image
     are 'Generalized' or 'Specialized'. Required. Known values are: \"Generalized\" and
     \"Specialized\"."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    identifier: "_models.CommunityGalleryImageIdentifier" = rest_field()
    """This is the community gallery image definition identifier. Required."""
    recommended: Optional["_models.RecommendedMachineConfiguration"] = rest_field()
    """The properties describe the recommended machine configuration for this Image Definition. These
     properties are updatable."""
    disallowed: Optional["_models.Disallowed"] = rest_field()
    """Describes the disallowed disk types."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = rest_field(name="hyperVGeneration")
    """The hypervisor generation of the Virtual Machine. Applicable to OS disks only. Known values
     are: \"V1\" and \"V2\"."""
    features: Optional[List["_models.GalleryImageFeature"]] = rest_field()
    """A list of gallery image features."""
    purchase_plan: Optional["_models.ImagePurchasePlan"] = rest_field(name="purchasePlan")
    """Describes the gallery image definition purchase plan. This is used by marketplace images."""
    architecture: Optional[Union[str, "_models.Architecture"]] = rest_field()
    """The architecture of the image. Applicable to OS disks only. Known values are: \"x64\" and
     \"Arm64\"."""
    privacy_statement_uri: Optional[str] = rest_field(name="privacyStatementUri")
    """Privacy statement URI for the current community gallery image."""
    eula: Optional[str] = rest_field()
    """The end-user license agreement for the current community gallery image."""
    disclaimer: Optional[str] = rest_field()
    """The disclaimer for a community gallery resource."""
    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags")
    """The artifact tags of a community gallery resource."""

    @overload
    def __init__(
        self,
        *,
        os_type: Union[str, "_models.OperatingSystemTypes"],
        os_state: Union[str, "_models.OperatingSystemStateTypes"],
        identifier: "_models.CommunityGalleryImageIdentifier",
        end_of_life_date: Optional[datetime.datetime] = None,
        recommended: Optional["_models.RecommendedMachineConfiguration"] = None,
        disallowed: Optional["_models.Disallowed"] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = None,
        features: Optional[List["_models.GalleryImageFeature"]] = None,
        purchase_plan: Optional["_models.ImagePurchasePlan"] = None,
        architecture: Optional[Union[str, "_models.Architecture"]] = None,
        privacy_statement_uri: Optional[str] = None,
        eula: Optional[str] = None,
        disclaimer: Optional[str] = None,
        artifact_tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CommunityGalleryImageVersion(ProxyResource):
    """Specifies information about the gallery image version that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.CommunityGalleryImageVersionProperties
    """

    properties: Optional["_models.CommunityGalleryImageVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = [
        "published_date",
        "end_of_life_date",
        "exclude_from_latest",
        "storage_profile",
        "disclaimer",
        "artifact_tags",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CommunityGalleryImageVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CommunityGalleryImageVersionProperties(_model_base.Model):
    """Describes the properties of a gallery image version.

    :ivar published_date: The published date of the gallery image version Definition. This property
     can be used for decommissioning purposes. This property is updatable.
    :vartype published_date: ~datetime.datetime
    :ivar end_of_life_date: The end of life date of the gallery image version Definition. This
     property can be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar exclude_from_latest: If set to true, Virtual Machines deployed from the latest version of
     the Image Definition won't use this Image Version.
    :vartype exclude_from_latest: bool
    :ivar storage_profile: Describes the storage profile of the image version.
    :vartype storage_profile:
     ~azure.mgmt.compute.gallery.models.SharedGalleryImageVersionStorageProfile
    :ivar disclaimer: The disclaimer for a community gallery resource.
    :vartype disclaimer: str
    :ivar artifact_tags: The artifact tags of a community gallery resource.
    :vartype artifact_tags: dict[str, str]
    """

    published_date: Optional[datetime.datetime] = rest_field(name="publishedDate", format="rfc3339")
    """The published date of the gallery image version Definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image version Definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    exclude_from_latest: Optional[bool] = rest_field(name="excludeFromLatest")
    """If set to true, Virtual Machines deployed from the latest version of the Image Definition won't
     use this Image Version."""
    storage_profile: Optional["_models.SharedGalleryImageVersionStorageProfile"] = rest_field(name="storageProfile")
    """Describes the storage profile of the image version."""
    disclaimer: Optional[str] = rest_field()
    """The disclaimer for a community gallery resource."""
    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags")
    """The artifact tags of a community gallery resource."""

    @overload
    def __init__(
        self,
        *,
        published_date: Optional[datetime.datetime] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        exclude_from_latest: Optional[bool] = None,
        storage_profile: Optional["_models.SharedGalleryImageVersionStorageProfile"] = None,
        disclaimer: Optional[str] = None,
        artifact_tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CommunityGalleryInfo(_model_base.Model):
    """Information of community gallery if current gallery is shared to community.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar publisher_uri: The link to the publisher website. Visible to all users.
    :vartype publisher_uri: str
    :ivar publisher_contact: Community gallery publisher support email. The email address of the
     publisher. Visible to all users.
    :vartype publisher_contact: str
    :ivar eula: End-user license agreement for community gallery image.
    :vartype eula: str
    :ivar public_name_prefix: The prefix of the gallery name that will be displayed publicly.
     Visible to all users.
    :vartype public_name_prefix: str
    :ivar community_gallery_enabled: Contains info about whether community gallery sharing is
     enabled.
    :vartype community_gallery_enabled: bool
    :ivar public_names: Community gallery public name list.
    :vartype public_names: list[str]
    """

    publisher_uri: Optional[str] = rest_field(name="publisherUri")
    """The link to the publisher website. Visible to all users."""
    publisher_contact: Optional[str] = rest_field(name="publisherContact")
    """Community gallery publisher support email. The email address of the publisher. Visible to all
     users."""
    eula: Optional[str] = rest_field()
    """End-user license agreement for community gallery image."""
    public_name_prefix: Optional[str] = rest_field(name="publicNamePrefix")
    """The prefix of the gallery name that will be displayed publicly. Visible to all users."""
    community_gallery_enabled: Optional[bool] = rest_field(name="communityGalleryEnabled", visibility=["read"])
    """Contains info about whether community gallery sharing is enabled."""
    public_names: Optional[List[str]] = rest_field(name="publicNames", visibility=["read"])
    """Community gallery public name list."""

    @overload
    def __init__(
        self,
        *,
        publisher_uri: Optional[str] = None,
        publisher_contact: Optional[str] = None,
        eula: Optional[str] = None,
        public_name_prefix: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CommunityGalleryMetadata(_model_base.Model):
    """The metadata of community gallery.


    :ivar publisher_uri: The publisher URI of this community gallery.
    :vartype publisher_uri: str
    :ivar publisher_contact: The publisher email id of this community gallery. Required.
    :vartype publisher_contact: str
    :ivar eula: The end-user license agreement for this community gallery.
    :vartype eula: str
    :ivar public_names: A list of public names the gallery has. Required.
    :vartype public_names: list[str]
    :ivar privacy_statement_uri: The link for the privacy statement of this community gallery from
     the gallery publisher.
    :vartype privacy_statement_uri: str
    """

    publisher_uri: Optional[str] = rest_field(name="publisherUri")
    """The publisher URI of this community gallery."""
    publisher_contact: str = rest_field(name="publisherContact")
    """The publisher email id of this community gallery. Required."""
    eula: Optional[str] = rest_field()
    """The end-user license agreement for this community gallery."""
    public_names: List[str] = rest_field(name="publicNames")
    """A list of public names the gallery has. Required."""
    privacy_statement_uri: Optional[str] = rest_field(name="privacyStatementUri")
    """The link for the privacy statement of this community gallery from the gallery publisher."""

    @overload
    def __init__(
        self,
        *,
        publisher_contact: str,
        public_names: List[str],
        publisher_uri: Optional[str] = None,
        eula: Optional[str] = None,
        privacy_statement_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CommunityGalleryProperties(_model_base.Model):
    """Describes the properties of a community gallery.

    :ivar disclaimer: The disclaimer for a community gallery resource.
    :vartype disclaimer: str
    :ivar artifact_tags: The artifact tags of a community gallery resource.
    :vartype artifact_tags: dict[str, str]
    :ivar community_metadata: The metadata of community gallery.
    :vartype community_metadata: ~azure.mgmt.compute.gallery.models.CommunityGalleryMetadata
    """

    disclaimer: Optional[str] = rest_field()
    """The disclaimer for a community gallery resource."""
    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags")
    """The artifact tags of a community gallery resource."""
    community_metadata: Optional["_models.CommunityGalleryMetadata"] = rest_field(name="communityMetadata")
    """The metadata of community gallery."""

    @overload
    def __init__(
        self,
        *,
        disclaimer: Optional[str] = None,
        artifact_tags: Optional[Dict[str, str]] = None,
        community_metadata: Optional["_models.CommunityGalleryMetadata"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskImageEncryption(_model_base.Model):
    """This is the disk image encryption base class.

    :ivar disk_encryption_set_id: A relative URI containing the resource ID of the disk encryption
     set.
    :vartype disk_encryption_set_id: str
    """

    disk_encryption_set_id: Optional[str] = rest_field(name="diskEncryptionSetId")
    """A relative URI containing the resource ID of the disk encryption set."""

    @overload
    def __init__(
        self,
        *,
        disk_encryption_set_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDiskImageEncryption(DiskImageEncryption):
    """Contains encryption settings for a data disk image.


    :ivar disk_encryption_set_id: A relative URI containing the resource ID of the disk encryption
     set.
    :vartype disk_encryption_set_id: str
    :ivar lun: This property specifies the logical unit number of the data disk. This value is used
     to identify data disks within the Virtual Machine and therefore must be unique for each data
     disk attached to the Virtual Machine. Required.
    :vartype lun: int
    """

    lun: int = rest_field()
    """This property specifies the logical unit number of the data disk. This value is used to
     identify data disks within the Virtual Machine and therefore must be unique for each data disk
     attached to the Virtual Machine. Required."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        disk_encryption_set_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Disallowed(_model_base.Model):
    """Describes the disallowed disk types.

    :ivar disk_types: A list of disk types.
    :vartype disk_types: list[str]
    """

    disk_types: Optional[List[str]] = rest_field(name="diskTypes")
    """A list of disk types."""

    @overload
    def __init__(
        self,
        *,
        disk_types: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EncryptionImages(_model_base.Model):
    """Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in
    the gallery artifact.

    :ivar os_disk_image: Contains encryption settings for an OS disk image.
    :vartype os_disk_image: ~azure.mgmt.compute.gallery.models.OSDiskImageEncryption
    :ivar data_disk_images: A list of encryption specifications for data disk images.
    :vartype data_disk_images: list[~azure.mgmt.compute.gallery.models.DataDiskImageEncryption]
    """

    os_disk_image: Optional["_models.OSDiskImageEncryption"] = rest_field(name="osDiskImage")
    """Contains encryption settings for an OS disk image."""
    data_disk_images: Optional[List["_models.DataDiskImageEncryption"]] = rest_field(name="dataDiskImages")
    """A list of encryption specifications for data disk images."""

    @overload
    def __init__(
        self,
        *,
        os_disk_image: Optional["_models.OSDiskImageEncryption"] = None,
        data_disk_images: Optional[List["_models.DataDiskImageEncryption"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.compute.gallery.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.compute.gallery.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.compute.gallery.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Gallery(TrackedResource):
    """Specifies information about the Shared Image Gallery that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Shared Image Gallery.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryProperties
    """

    properties: Optional["_models.GalleryProperties"] = rest_field()
    """Describes the properties of a Shared Image Gallery."""

    __flattened_items = [
        "description",
        "identifier",
        "provisioning_state",
        "sharing_profile",
        "soft_delete_policy",
        "sharing_status",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryApplication(TrackedResource):
    """Specifies information about the gallery Application Definition that you want to create or
    update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a gallery Application Definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryApplicationProperties
    """

    properties: Optional["_models.GalleryApplicationProperties"] = rest_field()
    """Describes the properties of a gallery Application Definition."""

    __flattened_items = [
        "description",
        "eula",
        "privacy_statement_uri",
        "release_note_uri",
        "end_of_life_date",
        "supported_os_type",
        "custom_actions",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryApplicationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryApplicationCustomAction(_model_base.Model):
    """A custom action that can be performed with a Gallery Application Version.


    :ivar name: The name of the custom action.  Must be unique within the Gallery Application
     Version. Required.
    :vartype name: str
    :ivar script: The script to run when executing this custom action. Required.
    :vartype script: str
    :ivar description: Description to help the users understand what this custom action does.
    :vartype description: str
    :ivar parameters: The parameters that this custom action uses.
    :vartype parameters:
     list[~azure.mgmt.compute.gallery.models.GalleryApplicationCustomActionParameter]
    """

    name: str = rest_field()
    """The name of the custom action.  Must be unique within the Gallery Application Version.
     Required."""
    script: str = rest_field()
    """The script to run when executing this custom action. Required."""
    description: Optional[str] = rest_field()
    """Description to help the users understand what this custom action does."""
    parameters: Optional[List["_models.GalleryApplicationCustomActionParameter"]] = rest_field()
    """The parameters that this custom action uses."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        script: str,
        description: Optional[str] = None,
        parameters: Optional[List["_models.GalleryApplicationCustomActionParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationCustomActionParameter(_model_base.Model):
    """The definition of a parameter that can be passed to a custom action of a Gallery Application
    Version.


    :ivar name: The name of the custom action.  Must be unique within the Gallery Application
     Version. Required.
    :vartype name: str
    :ivar required: Indicates whether this parameter must be passed when running the custom action.
    :vartype required: bool
    :ivar type: Specifies the type of the custom action parameter. Possible values are: String,
     ConfigurationDataBlob or LogOutputBlob. Known values are: "String", "ConfigurationDataBlob",
     and "LogOutputBlob".
    :vartype type: str or
     ~azure.mgmt.compute.gallery.models.GalleryApplicationCustomActionParameterType
    :ivar default_value: The default value of the parameter.  Only applies to string types.
    :vartype default_value: str
    :ivar description: A description to help users understand what this parameter means.
    :vartype description: str
    """

    name: str = rest_field()
    """The name of the custom action.  Must be unique within the Gallery Application Version.
     Required."""
    required: Optional[bool] = rest_field()
    """Indicates whether this parameter must be passed when running the custom action."""
    type: Optional[Union[str, "_models.GalleryApplicationCustomActionParameterType"]] = rest_field()
    """Specifies the type of the custom action parameter. Possible values are: String,
     ConfigurationDataBlob or LogOutputBlob. Known values are: \"String\",
     \"ConfigurationDataBlob\", and \"LogOutputBlob\"."""
    default_value: Optional[str] = rest_field(name="defaultValue")
    """The default value of the parameter.  Only applies to string types."""
    description: Optional[str] = rest_field()
    """A description to help users understand what this parameter means."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        required: Optional[bool] = None,
        type: Optional[Union[str, "_models.GalleryApplicationCustomActionParameterType"]] = None,
        default_value: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationProperties(_model_base.Model):
    """Describes the properties of a gallery Application Definition.


    :ivar description: The description of this gallery Application Definition resource. This
     property is updatable.
    :vartype description: str
    :ivar eula: The Eula agreement for the gallery Application Definition.
    :vartype eula: str
    :ivar privacy_statement_uri: The privacy statement uri.
    :vartype privacy_statement_uri: str
    :ivar release_note_uri: The release note uri.
    :vartype release_note_uri: str
    :ivar end_of_life_date: The end of life date of the gallery Application Definition. This
     property can be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar supported_os_type: This property allows you to specify the supported type of the OS that
     application is built for. Possible values are: **Windows,** **Linux.**. Required. Known values
     are: "Windows" and "Linux".
    :vartype supported_os_type: str or ~azure.mgmt.compute.gallery.models.OperatingSystemTypes
    :ivar custom_actions: A list of custom actions that can be performed with all of the Gallery
     Application Versions within this Gallery Application.
    :vartype custom_actions:
     list[~azure.mgmt.compute.gallery.models.GalleryApplicationCustomAction]
    """

    description: Optional[str] = rest_field()
    """The description of this gallery Application Definition resource. This property is updatable."""
    eula: Optional[str] = rest_field()
    """The Eula agreement for the gallery Application Definition."""
    privacy_statement_uri: Optional[str] = rest_field(name="privacyStatementUri")
    """The privacy statement uri."""
    release_note_uri: Optional[str] = rest_field(name="releaseNoteUri")
    """The release note uri."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery Application Definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    supported_os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="supportedOSType")
    """This property allows you to specify the supported type of the OS that application is built for.
     Possible values are: **Windows,** **Linux.**. Required. Known values are: \"Windows\" and
     \"Linux\"."""
    custom_actions: Optional[List["_models.GalleryApplicationCustomAction"]] = rest_field(name="customActions")
    """A list of custom actions that can be performed with all of the Gallery Application Versions
     within this Gallery Application."""

    @overload
    def __init__(
        self,
        *,
        supported_os_type: Union[str, "_models.OperatingSystemTypes"],
        description: Optional[str] = None,
        eula: Optional[str] = None,
        privacy_statement_uri: Optional[str] = None,
        release_note_uri: Optional[str] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        custom_actions: Optional[List["_models.GalleryApplicationCustomAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateResourceDefinition(_model_base.Model):
    """The Update Resource model definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Resource Id."""
    name: Optional[str] = rest_field(visibility=["read"])
    """Resource name."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Resource type."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationUpdate(UpdateResourceDefinition):
    """Specifies information about the gallery Application Definition that you want to update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a gallery Application Definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryApplicationProperties
    """

    properties: Optional["_models.GalleryApplicationProperties"] = rest_field()
    """Describes the properties of a gallery Application Definition."""

    __flattened_items = [
        "description",
        "eula",
        "privacy_statement_uri",
        "release_note_uri",
        "end_of_life_date",
        "supported_os_type",
        "custom_actions",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryApplicationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryApplicationVersion(TrackedResource):
    """Specifies information about the gallery Application Version that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryApplicationVersionProperties
    """

    properties: Optional["_models.GalleryApplicationVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = ["publishing_profile", "safety_profile", "provisioning_state", "replication_status"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryApplicationVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryApplicationVersionProperties(_model_base.Model):
    """Describes the properties of a gallery image version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar publishing_profile: The publishing profile of a gallery image version. Required.
    :vartype publishing_profile:
     ~azure.mgmt.compute.gallery.models.GalleryApplicationVersionPublishingProfile
    :ivar safety_profile: The safety profile of the Gallery Application Version.
    :vartype safety_profile:
     ~azure.mgmt.compute.gallery.models.GalleryApplicationVersionSafetyProfile
    :ivar provisioning_state: The provisioning state, which only appears in the response. Known
     values are: "Creating", "Updating", "Failed", "Succeeded", "Deleting", and "Migrating".
    :vartype provisioning_state: str or ~azure.mgmt.compute.gallery.models.GalleryProvisioningState
    :ivar replication_status: This is the replication status of the gallery image version.
    :vartype replication_status: ~azure.mgmt.compute.gallery.models.ReplicationStatus
    """

    publishing_profile: "_models.GalleryApplicationVersionPublishingProfile" = rest_field(name="publishingProfile")
    """The publishing profile of a gallery image version. Required."""
    safety_profile: Optional["_models.GalleryApplicationVersionSafetyProfile"] = rest_field(name="safetyProfile")
    """The safety profile of the Gallery Application Version."""
    provisioning_state: Optional[Union[str, "_models.GalleryProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state, which only appears in the response. Known values are: \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", and \"Migrating\"."""
    replication_status: Optional["_models.ReplicationStatus"] = rest_field(
        name="replicationStatus", visibility=["read"]
    )
    """This is the replication status of the gallery image version."""

    @overload
    def __init__(
        self,
        *,
        publishing_profile: "_models.GalleryApplicationVersionPublishingProfile",
        safety_profile: Optional["_models.GalleryApplicationVersionSafetyProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryArtifactPublishingProfileBase(_model_base.Model):
    """Describes the basic gallery artifact publishing profile.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar target_regions: The target regions where the Image Version is going to be replicated to.
     This property is updatable.
    :vartype target_regions: list[~azure.mgmt.compute.gallery.models.TargetRegion]
    :ivar replica_count: The number of replicas of the Image Version to be created per region. This
     property would take effect for a region when regionalReplicaCount is not specified. This
     property is updatable.
    :vartype replica_count: int
    :ivar exclude_from_latest: If set to true, Virtual Machines deployed from the latest version of
     the Image Definition won't use this Image Version.
    :vartype exclude_from_latest: bool
    :ivar published_date: The timestamp for when the gallery image version is published.
    :vartype published_date: ~datetime.datetime
    :ivar end_of_life_date: The end of life date of the gallery image version. This property can be
     used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar storage_account_type: Specifies the storage account type to be used to store the image.
     This property is not updatable. Known values are: "Standard_LRS", "Standard_ZRS", and
     "Premium_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.gallery.models.StorageAccountType
    :ivar replication_mode: Optional parameter which specifies the mode to be used for replication.
     This property is not updatable. Known values are: "Full" and "Shallow".
    :vartype replication_mode: str or ~azure.mgmt.compute.gallery.models.ReplicationMode
    :ivar target_extended_locations: The target extended locations where the Image Version is going
     to be replicated to. This property is updatable.
    :vartype target_extended_locations:
     list[~azure.mgmt.compute.gallery.models.GalleryTargetExtendedLocation]
    """

    target_regions: Optional[List["_models.TargetRegion"]] = rest_field(name="targetRegions")
    """The target regions where the Image Version is going to be replicated to. This property is
     updatable."""
    replica_count: Optional[int] = rest_field(name="replicaCount")
    """The number of replicas of the Image Version to be created per region. This property would take
     effect for a region when regionalReplicaCount is not specified. This property is updatable."""
    exclude_from_latest: Optional[bool] = rest_field(name="excludeFromLatest")
    """If set to true, Virtual Machines deployed from the latest version of the Image Definition won't
     use this Image Version."""
    published_date: Optional[datetime.datetime] = rest_field(
        name="publishedDate", visibility=["read"], format="rfc3339"
    )
    """The timestamp for when the gallery image version is published."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image version. This property can be used for
     decommissioning purposes. This property is updatable."""
    storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = rest_field(name="storageAccountType")
    """Specifies the storage account type to be used to store the image. This property is not
     updatable. Known values are: \"Standard_LRS\", \"Standard_ZRS\", and \"Premium_LRS\"."""
    replication_mode: Optional[Union[str, "_models.ReplicationMode"]] = rest_field(name="replicationMode")
    """Optional parameter which specifies the mode to be used for replication. This property is not
     updatable. Known values are: \"Full\" and \"Shallow\"."""
    target_extended_locations: Optional[List["_models.GalleryTargetExtendedLocation"]] = rest_field(
        name="targetExtendedLocations"
    )
    """The target extended locations where the Image Version is going to be replicated to. This
     property is updatable."""

    @overload
    def __init__(
        self,
        *,
        target_regions: Optional[List["_models.TargetRegion"]] = None,
        replica_count: Optional[int] = None,
        exclude_from_latest: Optional[bool] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = None,
        replication_mode: Optional[Union[str, "_models.ReplicationMode"]] = None,
        target_extended_locations: Optional[List["_models.GalleryTargetExtendedLocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationVersionPublishingProfile(GalleryArtifactPublishingProfileBase):  # pylint: disable=name-too-long
    """The publishing profile of a gallery image version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar target_regions: The target regions where the Image Version is going to be replicated to.
     This property is updatable.
    :vartype target_regions: list[~azure.mgmt.compute.gallery.models.TargetRegion]
    :ivar replica_count: The number of replicas of the Image Version to be created per region. This
     property would take effect for a region when regionalReplicaCount is not specified. This
     property is updatable.
    :vartype replica_count: int
    :ivar exclude_from_latest: If set to true, Virtual Machines deployed from the latest version of
     the Image Definition won't use this Image Version.
    :vartype exclude_from_latest: bool
    :ivar published_date: The timestamp for when the gallery image version is published.
    :vartype published_date: ~datetime.datetime
    :ivar end_of_life_date: The end of life date of the gallery image version. This property can be
     used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar storage_account_type: Specifies the storage account type to be used to store the image.
     This property is not updatable. Known values are: "Standard_LRS", "Standard_ZRS", and
     "Premium_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.gallery.models.StorageAccountType
    :ivar replication_mode: Optional parameter which specifies the mode to be used for replication.
     This property is not updatable. Known values are: "Full" and "Shallow".
    :vartype replication_mode: str or ~azure.mgmt.compute.gallery.models.ReplicationMode
    :ivar target_extended_locations: The target extended locations where the Image Version is going
     to be replicated to. This property is updatable.
    :vartype target_extended_locations:
     list[~azure.mgmt.compute.gallery.models.GalleryTargetExtendedLocation]
    :ivar source: The source image from which the Image Version is going to be created. Required.
    :vartype source: ~azure.mgmt.compute.gallery.models.UserArtifactSource
    :ivar manage_actions:
    :vartype manage_actions: ~azure.mgmt.compute.gallery.models.UserArtifactManage
    :ivar settings: Additional settings for the VM app that contains the target package and config
     file name when it is deployed to target VM or VM scale set.
    :vartype settings: ~azure.mgmt.compute.gallery.models.UserArtifactSettings
    :ivar advanced_settings: Optional. Additional settings to pass to the vm-application-manager
     extension. For advanced use only.
    :vartype advanced_settings: dict[str, str]
    :ivar enable_health_check: Optional. Whether or not this application reports health.
    :vartype enable_health_check: bool
    :ivar custom_actions: A list of custom actions that can be performed with this Gallery
     Application Version.
    :vartype custom_actions:
     list[~azure.mgmt.compute.gallery.models.GalleryApplicationCustomAction]
    """

    source: "_models.UserArtifactSource" = rest_field()
    """The source image from which the Image Version is going to be created. Required."""
    manage_actions: Optional["_models.UserArtifactManage"] = rest_field(name="manageActions")
    settings: Optional["_models.UserArtifactSettings"] = rest_field()
    """Additional settings for the VM app that contains the target package and config file name when
     it is deployed to target VM or VM scale set."""
    advanced_settings: Optional[Dict[str, str]] = rest_field(name="advancedSettings")
    """Optional. Additional settings to pass to the vm-application-manager extension. For advanced use
     only."""
    enable_health_check: Optional[bool] = rest_field(name="enableHealthCheck")
    """Optional. Whether or not this application reports health."""
    custom_actions: Optional[List["_models.GalleryApplicationCustomAction"]] = rest_field(name="customActions")
    """A list of custom actions that can be performed with this Gallery Application Version."""

    @overload
    def __init__(
        self,
        *,
        source: "_models.UserArtifactSource",
        target_regions: Optional[List["_models.TargetRegion"]] = None,
        replica_count: Optional[int] = None,
        exclude_from_latest: Optional[bool] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = None,
        replication_mode: Optional[Union[str, "_models.ReplicationMode"]] = None,
        target_extended_locations: Optional[List["_models.GalleryTargetExtendedLocation"]] = None,
        manage_actions: Optional["_models.UserArtifactManage"] = None,
        settings: Optional["_models.UserArtifactSettings"] = None,
        advanced_settings: Optional[Dict[str, str]] = None,
        enable_health_check: Optional[bool] = None,
        custom_actions: Optional[List["_models.GalleryApplicationCustomAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryArtifactSafetyProfileBase(_model_base.Model):
    """This is the safety profile of the Gallery Artifact Version.

    :ivar allow_deletion_of_replicated_locations: Indicates whether or not removing this Gallery
     Image Version from replicated regions is allowed.
    :vartype allow_deletion_of_replicated_locations: bool
    """

    allow_deletion_of_replicated_locations: Optional[bool] = rest_field(name="allowDeletionOfReplicatedLocations")
    """Indicates whether or not removing this Gallery Image Version from replicated regions is
     allowed."""

    @overload
    def __init__(
        self,
        *,
        allow_deletion_of_replicated_locations: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationVersionSafetyProfile(GalleryArtifactSafetyProfileBase):
    """The safety profile of the Gallery Application Version.

    :ivar allow_deletion_of_replicated_locations: Indicates whether or not removing this Gallery
     Image Version from replicated regions is allowed.
    :vartype allow_deletion_of_replicated_locations: bool
    """

    @overload
    def __init__(
        self,
        *,
        allow_deletion_of_replicated_locations: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryApplicationVersionUpdate(UpdateResourceDefinition):
    """Specifies information about the gallery Application Version that you want to update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryApplicationVersionProperties
    """

    properties: Optional["_models.GalleryApplicationVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = ["publishing_profile", "safety_profile", "provisioning_state", "replication_status"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryApplicationVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryArtifactVersionSource(_model_base.Model):
    """The gallery artifact version source.

    :ivar id: The id of the gallery artifact version source.
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """The id of the gallery artifact version source."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryArtifactVersionFullSource(GalleryArtifactVersionSource):
    """The source of the gallery artifact version.

    :ivar id: The id of the gallery artifact version source.
    :vartype id: str
    :ivar community_gallery_image_id: The resource Id of the source Community Gallery Image.  Only
     required when using Community Gallery Image as a source.
    :vartype community_gallery_image_id: str
    :ivar virtual_machine_id: The resource Id of the source virtual machine.  Only required when
     capturing a virtual machine to source this Gallery Image Version.
    :vartype virtual_machine_id: str
    """

    community_gallery_image_id: Optional[str] = rest_field(name="communityGalleryImageId")
    """The resource Id of the source Community Gallery Image.  Only required when using Community
     Gallery Image as a source."""
    virtual_machine_id: Optional[str] = rest_field(name="virtualMachineId")
    """The resource Id of the source virtual machine.  Only required when capturing a virtual machine
     to source this Gallery Image Version."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        community_gallery_image_id: Optional[str] = None,
        virtual_machine_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryDiskImage(_model_base.Model):
    """This is the disk image base class.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar size_in_gb: This property indicates the size of the VHD to be created.
    :vartype size_in_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.HostCaching
    :ivar source: The source for the disk image.
    :vartype source: ~azure.mgmt.compute.gallery.models.GalleryDiskImageSource
    """

    size_in_gb: Optional[int] = rest_field(name="sizeInGB", visibility=["read"])
    """This property indicates the size of the VHD to be created."""
    host_caching: Optional[Union[str, "_models.HostCaching"]] = rest_field(name="hostCaching")
    """The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    source: Optional["_models.GalleryDiskImageSource"] = rest_field()
    """The source for the disk image."""

    @overload
    def __init__(
        self,
        *,
        host_caching: Optional[Union[str, "_models.HostCaching"]] = None,
        source: Optional["_models.GalleryDiskImageSource"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryDataDiskImage(GalleryDiskImage):
    """This is the data disk image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar size_in_gb: This property indicates the size of the VHD to be created.
    :vartype size_in_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.HostCaching
    :ivar source: The source for the disk image.
    :vartype source: ~azure.mgmt.compute.gallery.models.GalleryDiskImageSource
    :ivar lun: This property specifies the logical unit number of the data disk. This value is used
     to identify data disks within the Virtual Machine and therefore must be unique for each data
     disk attached to the Virtual Machine. Required.
    :vartype lun: int
    """

    lun: int = rest_field()
    """This property specifies the logical unit number of the data disk. This value is used to
     identify data disks within the Virtual Machine and therefore must be unique for each data disk
     attached to the Virtual Machine. Required."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        host_caching: Optional[Union[str, "_models.HostCaching"]] = None,
        source: Optional["_models.GalleryDiskImageSource"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryDiskImageSource(GalleryArtifactVersionSource):
    """The source for the disk image.

    :ivar id: The id of the gallery artifact version source.
    :vartype id: str
    :ivar uri: The uri of the gallery artifact version source. Currently used to specify vhd/blob
     source.
    :vartype uri: str
    :ivar storage_account_id: The Storage Account Id that contains the vhd blob being used as a
     source for this artifact version.
    :vartype storage_account_id: str
    """

    uri: Optional[str] = rest_field()
    """The uri of the gallery artifact version source. Currently used to specify vhd/blob source."""
    storage_account_id: Optional[str] = rest_field(name="storageAccountId")
    """The Storage Account Id that contains the vhd blob being used as a source for this artifact
     version."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        uri: Optional[str] = None,
        storage_account_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryExtendedLocation(_model_base.Model):
    """The name of the extended location.

    :ivar name:
    :vartype name: str
    :ivar type: It is type of the extended location. Known values are: "EdgeZone" and "Unknown".
    :vartype type: str or ~azure.mgmt.compute.gallery.models.GalleryExtendedLocationType
    """

    name: Optional[str] = rest_field()
    type: Optional[Union[str, "_models.GalleryExtendedLocationType"]] = rest_field()
    """It is type of the extended location. Known values are: \"EdgeZone\" and \"Unknown\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.GalleryExtendedLocationType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryIdentifier(_model_base.Model):
    """Describes the gallery unique name.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar unique_name: The unique name of the Shared Image Gallery. This name is generated
     automatically by Azure.
    :vartype unique_name: str
    """

    unique_name: Optional[str] = rest_field(name="uniqueName", visibility=["read"])
    """The unique name of the Shared Image Gallery. This name is generated automatically by Azure."""


class GalleryImage(TrackedResource):
    """Specifies information about the gallery image definition that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a gallery image definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryImageProperties
    """

    properties: Optional["_models.GalleryImageProperties"] = rest_field()
    """Describes the properties of a gallery image definition."""

    __flattened_items = [
        "description",
        "eula",
        "privacy_statement_uri",
        "release_note_uri",
        "os_type",
        "os_state",
        "hyper_v_generation",
        "end_of_life_date",
        "identifier",
        "recommended",
        "disallowed",
        "purchase_plan",
        "provisioning_state",
        "features",
        "architecture",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryImageFeature(_model_base.Model):
    """A feature for gallery image.

    :ivar name: The name of the gallery image feature.
    :vartype name: str
    :ivar value: The value of the gallery image feature.
    :vartype value: str
    """

    name: Optional[str] = rest_field()
    """The name of the gallery image feature."""
    value: Optional[str] = rest_field()
    """The value of the gallery image feature."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageIdentifier(_model_base.Model):
    """This is the gallery image definition identifier.


    :ivar publisher: The name of the gallery image definition publisher. Required.
    :vartype publisher: str
    :ivar offer: The name of the gallery image definition offer. Required.
    :vartype offer: str
    :ivar sku: The name of the gallery image definition SKU. Required.
    :vartype sku: str
    """

    publisher: str = rest_field()
    """The name of the gallery image definition publisher. Required."""
    offer: str = rest_field()
    """The name of the gallery image definition offer. Required."""
    sku: str = rest_field()
    """The name of the gallery image definition SKU. Required."""

    @overload
    def __init__(
        self,
        *,
        publisher: str,
        offer: str,
        sku: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageProperties(_model_base.Model):
    """Describes the properties of a gallery image definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar description: The description of this gallery image definition resource. This property is
     updatable.
    :vartype description: str
    :ivar eula: The Eula agreement for the gallery image definition.
    :vartype eula: str
    :ivar privacy_statement_uri: The privacy statement uri.
    :vartype privacy_statement_uri: str
    :ivar release_note_uri: The release note uri.
    :vartype release_note_uri: str
    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.gallery.models.OperatingSystemTypes
    :ivar os_state: This property allows the user to specify whether the virtual machines created
     under this image are 'Generalized' or 'Specialized'. Required. Known values are: "Generalized"
     and "Specialized".
    :vartype os_state: str or ~azure.mgmt.compute.gallery.models.OperatingSystemStateTypes
    :ivar hyper_v_generation: The hypervisor generation of the Virtual Machine. Applicable to OS
     disks only. Known values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.gallery.models.HyperVGeneration
    :ivar end_of_life_date: The end of life date of the gallery image definition. This property can
     be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar identifier: This is the gallery image definition identifier. Required.
    :vartype identifier: ~azure.mgmt.compute.gallery.models.GalleryImageIdentifier
    :ivar recommended: The properties describe the recommended machine configuration for this Image
     Definition. These properties are updatable.
    :vartype recommended: ~azure.mgmt.compute.gallery.models.RecommendedMachineConfiguration
    :ivar disallowed: Describes the disallowed disk types.
    :vartype disallowed: ~azure.mgmt.compute.gallery.models.Disallowed
    :ivar purchase_plan: Describes the gallery image definition purchase plan. This is used by
     marketplace images.
    :vartype purchase_plan: ~azure.mgmt.compute.gallery.models.ImagePurchasePlan
    :ivar provisioning_state: The provisioning state, which only appears in the response. Known
     values are: "Creating", "Updating", "Failed", "Succeeded", "Deleting", and "Migrating".
    :vartype provisioning_state: str or ~azure.mgmt.compute.gallery.models.GalleryProvisioningState
    :ivar features: A list of gallery image features.
    :vartype features: list[~azure.mgmt.compute.gallery.models.GalleryImageFeature]
    :ivar architecture: The architecture of the image. Applicable to OS disks only. Known values
     are: "x64" and "Arm64".
    :vartype architecture: str or ~azure.mgmt.compute.gallery.models.Architecture
    """

    description: Optional[str] = rest_field()
    """The description of this gallery image definition resource. This property is updatable."""
    eula: Optional[str] = rest_field()
    """The Eula agreement for the gallery image definition."""
    privacy_statement_uri: Optional[str] = rest_field(name="privacyStatementUri")
    """The privacy statement uri."""
    release_note_uri: Optional[str] = rest_field(name="releaseNoteUri")
    """The release note uri."""
    os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk when
     creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. Required.
     Known values are: \"Windows\" and \"Linux\"."""
    os_state: Union[str, "_models.OperatingSystemStateTypes"] = rest_field(name="osState")
    """This property allows the user to specify whether the virtual machines created under this image
     are 'Generalized' or 'Specialized'. Required. Known values are: \"Generalized\" and
     \"Specialized\"."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = rest_field(name="hyperVGeneration")
    """The hypervisor generation of the Virtual Machine. Applicable to OS disks only. Known values
     are: \"V1\" and \"V2\"."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    identifier: "_models.GalleryImageIdentifier" = rest_field()
    """This is the gallery image definition identifier. Required."""
    recommended: Optional["_models.RecommendedMachineConfiguration"] = rest_field()
    """The properties describe the recommended machine configuration for this Image Definition. These
     properties are updatable."""
    disallowed: Optional["_models.Disallowed"] = rest_field()
    """Describes the disallowed disk types."""
    purchase_plan: Optional["_models.ImagePurchasePlan"] = rest_field(name="purchasePlan")
    """Describes the gallery image definition purchase plan. This is used by marketplace images."""
    provisioning_state: Optional[Union[str, "_models.GalleryProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state, which only appears in the response. Known values are: \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", and \"Migrating\"."""
    features: Optional[List["_models.GalleryImageFeature"]] = rest_field()
    """A list of gallery image features."""
    architecture: Optional[Union[str, "_models.Architecture"]] = rest_field()
    """The architecture of the image. Applicable to OS disks only. Known values are: \"x64\" and
     \"Arm64\"."""

    @overload
    def __init__(
        self,
        *,
        os_type: Union[str, "_models.OperatingSystemTypes"],
        os_state: Union[str, "_models.OperatingSystemStateTypes"],
        identifier: "_models.GalleryImageIdentifier",
        description: Optional[str] = None,
        eula: Optional[str] = None,
        privacy_statement_uri: Optional[str] = None,
        release_note_uri: Optional[str] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        recommended: Optional["_models.RecommendedMachineConfiguration"] = None,
        disallowed: Optional["_models.Disallowed"] = None,
        purchase_plan: Optional["_models.ImagePurchasePlan"] = None,
        features: Optional[List["_models.GalleryImageFeature"]] = None,
        architecture: Optional[Union[str, "_models.Architecture"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageUpdate(UpdateResourceDefinition):
    """Specifies information about the gallery image definition that you want to update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a gallery image definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryImageProperties
    """

    properties: Optional["_models.GalleryImageProperties"] = rest_field()
    """Describes the properties of a gallery image definition."""

    __flattened_items = [
        "description",
        "eula",
        "privacy_statement_uri",
        "release_note_uri",
        "os_type",
        "os_state",
        "hyper_v_generation",
        "end_of_life_date",
        "identifier",
        "recommended",
        "disallowed",
        "purchase_plan",
        "provisioning_state",
        "features",
        "architecture",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryImageVersion(TrackedResource):
    """Specifies information about the gallery image version that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryImageVersionProperties
    """

    properties: Optional["_models.GalleryImageVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = [
        "publishing_profile",
        "provisioning_state",
        "storage_profile",
        "safety_profile",
        "replication_status",
        "security_profile",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryImageVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryImageVersionProperties(_model_base.Model):
    """Describes the properties of a gallery image version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar publishing_profile: The publishing profile of a gallery image Version.
    :vartype publishing_profile:
     ~azure.mgmt.compute.gallery.models.GalleryImageVersionPublishingProfile
    :ivar provisioning_state: The provisioning state, which only appears in the response. Known
     values are: "Creating", "Updating", "Failed", "Succeeded", "Deleting", and "Migrating".
    :vartype provisioning_state: str or ~azure.mgmt.compute.gallery.models.GalleryProvisioningState
    :ivar storage_profile: This is the storage profile of a Gallery Image Version. Required.
    :vartype storage_profile: ~azure.mgmt.compute.gallery.models.GalleryImageVersionStorageProfile
    :ivar safety_profile: This is the safety profile of the Gallery Image Version.
    :vartype safety_profile: ~azure.mgmt.compute.gallery.models.GalleryImageVersionSafetyProfile
    :ivar replication_status: This is the replication status of the gallery image version.
    :vartype replication_status: ~azure.mgmt.compute.gallery.models.ReplicationStatus
    :ivar security_profile: The security profile of a gallery image version.
    :vartype security_profile: ~azure.mgmt.compute.gallery.models.ImageVersionSecurityProfile
    """

    publishing_profile: Optional["_models.GalleryImageVersionPublishingProfile"] = rest_field(name="publishingProfile")
    """The publishing profile of a gallery image Version."""
    provisioning_state: Optional[Union[str, "_models.GalleryProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state, which only appears in the response. Known values are: \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", and \"Migrating\"."""
    storage_profile: "_models.GalleryImageVersionStorageProfile" = rest_field(name="storageProfile")
    """This is the storage profile of a Gallery Image Version. Required."""
    safety_profile: Optional["_models.GalleryImageVersionSafetyProfile"] = rest_field(name="safetyProfile")
    """This is the safety profile of the Gallery Image Version."""
    replication_status: Optional["_models.ReplicationStatus"] = rest_field(
        name="replicationStatus", visibility=["read"]
    )
    """This is the replication status of the gallery image version."""
    security_profile: Optional["_models.ImageVersionSecurityProfile"] = rest_field(name="securityProfile")
    """The security profile of a gallery image version."""

    @overload
    def __init__(
        self,
        *,
        storage_profile: "_models.GalleryImageVersionStorageProfile",
        publishing_profile: Optional["_models.GalleryImageVersionPublishingProfile"] = None,
        safety_profile: Optional["_models.GalleryImageVersionSafetyProfile"] = None,
        security_profile: Optional["_models.ImageVersionSecurityProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageVersionPublishingProfile(GalleryArtifactPublishingProfileBase):
    """The publishing profile of a gallery image Version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar target_regions: The target regions where the Image Version is going to be replicated to.
     This property is updatable.
    :vartype target_regions: list[~azure.mgmt.compute.gallery.models.TargetRegion]
    :ivar replica_count: The number of replicas of the Image Version to be created per region. This
     property would take effect for a region when regionalReplicaCount is not specified. This
     property is updatable.
    :vartype replica_count: int
    :ivar exclude_from_latest: If set to true, Virtual Machines deployed from the latest version of
     the Image Definition won't use this Image Version.
    :vartype exclude_from_latest: bool
    :ivar published_date: The timestamp for when the gallery image version is published.
    :vartype published_date: ~datetime.datetime
    :ivar end_of_life_date: The end of life date of the gallery image version. This property can be
     used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar storage_account_type: Specifies the storage account type to be used to store the image.
     This property is not updatable. Known values are: "Standard_LRS", "Standard_ZRS", and
     "Premium_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.gallery.models.StorageAccountType
    :ivar replication_mode: Optional parameter which specifies the mode to be used for replication.
     This property is not updatable. Known values are: "Full" and "Shallow".
    :vartype replication_mode: str or ~azure.mgmt.compute.gallery.models.ReplicationMode
    :ivar target_extended_locations: The target extended locations where the Image Version is going
     to be replicated to. This property is updatable.
    :vartype target_extended_locations:
     list[~azure.mgmt.compute.gallery.models.GalleryTargetExtendedLocation]
    """

    @overload
    def __init__(
        self,
        *,
        target_regions: Optional[List["_models.TargetRegion"]] = None,
        replica_count: Optional[int] = None,
        exclude_from_latest: Optional[bool] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = None,
        replication_mode: Optional[Union[str, "_models.ReplicationMode"]] = None,
        target_extended_locations: Optional[List["_models.GalleryTargetExtendedLocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageVersionSafetyProfile(GalleryArtifactSafetyProfileBase):
    """This is the safety profile of the Gallery Image Version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar allow_deletion_of_replicated_locations: Indicates whether or not removing this Gallery
     Image Version from replicated regions is allowed.
    :vartype allow_deletion_of_replicated_locations: bool
    :ivar reported_for_policy_violation: Indicates whether this image has been reported as
     violating Microsoft's policies.
    :vartype reported_for_policy_violation: bool
    :ivar policy_violations: A list of Policy Violations that have been reported for this Gallery
     Image Version.
    :vartype policy_violations: list[~azure.mgmt.compute.gallery.models.PolicyViolation]
    """

    reported_for_policy_violation: Optional[bool] = rest_field(name="reportedForPolicyViolation", visibility=["read"])
    """Indicates whether this image has been reported as violating Microsoft's policies."""
    policy_violations: Optional[List["_models.PolicyViolation"]] = rest_field(
        name="policyViolations", visibility=["read"]
    )
    """A list of Policy Violations that have been reported for this Gallery Image Version."""

    @overload
    def __init__(
        self,
        *,
        allow_deletion_of_replicated_locations: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageVersionStorageProfile(_model_base.Model):
    """This is the storage profile of a Gallery Image Version.

    :ivar source: The source of the gallery artifact version.
    :vartype source: ~azure.mgmt.compute.gallery.models.GalleryArtifactVersionFullSource
    :ivar os_disk_image: This is the OS disk image.
    :vartype os_disk_image: ~azure.mgmt.compute.gallery.models.GalleryOSDiskImage
    :ivar data_disk_images: A list of data disk images.
    :vartype data_disk_images: list[~azure.mgmt.compute.gallery.models.GalleryDataDiskImage]
    """

    source: Optional["_models.GalleryArtifactVersionFullSource"] = rest_field()
    """The source of the gallery artifact version."""
    os_disk_image: Optional["_models.GalleryOSDiskImage"] = rest_field(name="osDiskImage")
    """This is the OS disk image."""
    data_disk_images: Optional[List["_models.GalleryDataDiskImage"]] = rest_field(name="dataDiskImages")
    """A list of data disk images."""

    @overload
    def __init__(
        self,
        *,
        source: Optional["_models.GalleryArtifactVersionFullSource"] = None,
        os_disk_image: Optional["_models.GalleryOSDiskImage"] = None,
        data_disk_images: Optional[List["_models.GalleryDataDiskImage"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageVersionUefiSettings(_model_base.Model):
    """Contains UEFI settings for the image version.

    :ivar signature_template_names: The name of the template(s) that contains default UEFI key
     signatures that will be added to the image.
    :vartype signature_template_names: list[str or
     ~azure.mgmt.compute.gallery.models.UefiSignatureTemplateName]
    :ivar additional_signatures: Additional UEFI key signatures that will be added to the image in
     addition to the signature templates.
    :vartype additional_signatures: ~azure.mgmt.compute.gallery.models.UefiKeySignatures
    """

    signature_template_names: Optional[List[Union[str, "_models.UefiSignatureTemplateName"]]] = rest_field(
        name="signatureTemplateNames"
    )
    """The name of the template(s) that contains default UEFI key signatures that will be added to the
     image."""
    additional_signatures: Optional["_models.UefiKeySignatures"] = rest_field(name="additionalSignatures")
    """Additional UEFI key signatures that will be added to the image in addition to the signature
     templates."""

    @overload
    def __init__(
        self,
        *,
        signature_template_names: Optional[List[Union[str, "_models.UefiSignatureTemplateName"]]] = None,
        additional_signatures: Optional["_models.UefiKeySignatures"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageVersionUpdate(UpdateResourceDefinition):
    """Specifies information about the gallery image version that you want to update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryImageVersionProperties
    """

    properties: Optional["_models.GalleryImageVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = [
        "publishing_profile",
        "provisioning_state",
        "storage_profile",
        "safety_profile",
        "replication_status",
        "security_profile",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryImageVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryOSDiskImage(GalleryDiskImage):
    """This is the OS disk image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar size_in_gb: This property indicates the size of the VHD to be created.
    :vartype size_in_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.HostCaching
    :ivar source: The source for the disk image.
    :vartype source: ~azure.mgmt.compute.gallery.models.GalleryDiskImageSource
    """

    @overload
    def __init__(
        self,
        *,
        host_caching: Optional[Union[str, "_models.HostCaching"]] = None,
        source: Optional["_models.GalleryDiskImageSource"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryProperties(_model_base.Model):
    """Describes the properties of a Shared Image Gallery.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: The description of this Shared Image Gallery resource. This property is
     updatable.
    :vartype description: str
    :ivar identifier: Describes the gallery unique name.
    :vartype identifier: ~azure.mgmt.compute.gallery.models.GalleryIdentifier
    :ivar provisioning_state: The provisioning state, which only appears in the response. Known
     values are: "Creating", "Updating", "Failed", "Succeeded", "Deleting", and "Migrating".
    :vartype provisioning_state: str or ~azure.mgmt.compute.gallery.models.GalleryProvisioningState
    :ivar sharing_profile: Profile for gallery sharing to subscription or tenant.
    :vartype sharing_profile: ~azure.mgmt.compute.gallery.models.SharingProfile
    :ivar soft_delete_policy: Contains information about the soft deletion policy of the gallery.
    :vartype soft_delete_policy: ~azure.mgmt.compute.gallery.models.SoftDeletePolicy
    :ivar sharing_status: Sharing status of current gallery.
    :vartype sharing_status: ~azure.mgmt.compute.gallery.models.SharingStatus
    """

    description: Optional[str] = rest_field()
    """The description of this Shared Image Gallery resource. This property is updatable."""
    identifier: Optional["_models.GalleryIdentifier"] = rest_field()
    """Describes the gallery unique name."""
    provisioning_state: Optional[Union[str, "_models.GalleryProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state, which only appears in the response. Known values are: \"Creating\",
     \"Updating\", \"Failed\", \"Succeeded\", \"Deleting\", and \"Migrating\"."""
    sharing_profile: Optional["_models.SharingProfile"] = rest_field(name="sharingProfile")
    """Profile for gallery sharing to subscription or tenant."""
    soft_delete_policy: Optional["_models.SoftDeletePolicy"] = rest_field(name="softDeletePolicy")
    """Contains information about the soft deletion policy of the gallery."""
    sharing_status: Optional["_models.SharingStatus"] = rest_field(name="sharingStatus", visibility=["read"])
    """Sharing status of current gallery."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        identifier: Optional["_models.GalleryIdentifier"] = None,
        sharing_profile: Optional["_models.SharingProfile"] = None,
        soft_delete_policy: Optional["_models.SoftDeletePolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryTargetExtendedLocation(_model_base.Model):
    """GalleryTargetExtendedLocation.

    :ivar name: The name of the region.
    :vartype name: str
    :ivar extended_location: The name of the extended location.
    :vartype extended_location: ~azure.mgmt.compute.gallery.models.GalleryExtendedLocation
    :ivar extended_location_replica_count: The number of replicas of the Image Version to be
     created per extended location. This property is updatable.
    :vartype extended_location_replica_count: int
    :ivar storage_account_type: Specifies the storage account type to be used to store the image.
     This property is not updatable. Known values are: "Standard_LRS", "Standard_ZRS",
     "StandardSSD_LRS", and "Premium_LRS".
    :vartype storage_account_type: str or
     ~azure.mgmt.compute.gallery.models.EdgeZoneStorageAccountType
    :ivar encryption: Optional. Allows users to provide customer managed keys for encrypting the OS
     and data disks in the gallery artifact.
    :vartype encryption: ~azure.mgmt.compute.gallery.models.EncryptionImages
    """

    name: Optional[str] = rest_field()
    """The name of the region."""
    extended_location: Optional["_models.GalleryExtendedLocation"] = rest_field(name="extendedLocation")
    """The name of the extended location."""
    extended_location_replica_count: Optional[int] = rest_field(name="extendedLocationReplicaCount")
    """The number of replicas of the Image Version to be created per extended location. This property
     is updatable."""
    storage_account_type: Optional[Union[str, "_models.EdgeZoneStorageAccountType"]] = rest_field(
        name="storageAccountType"
    )
    """Specifies the storage account type to be used to store the image. This property is not
     updatable. Known values are: \"Standard_LRS\", \"Standard_ZRS\", \"StandardSSD_LRS\", and
     \"Premium_LRS\"."""
    encryption: Optional["_models.EncryptionImages"] = rest_field()
    """Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in
     the gallery artifact."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        extended_location: Optional["_models.GalleryExtendedLocation"] = None,
        extended_location_replica_count: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.EdgeZoneStorageAccountType"]] = None,
        encryption: Optional["_models.EncryptionImages"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryUpdate(UpdateResourceDefinition):
    """Specifies information about the Shared Image Gallery that you want to update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a Shared Image Gallery.
    :vartype properties: ~azure.mgmt.compute.gallery.models.GalleryProperties
    """

    properties: Optional["_models.GalleryProperties"] = rest_field()
    """Describes the properties of a Shared Image Gallery."""

    __flattened_items = [
        "description",
        "identifier",
        "provisioning_state",
        "sharing_profile",
        "soft_delete_policy",
        "sharing_status",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.GalleryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ImagePurchasePlan(_model_base.Model):
    """Describes the gallery image definition purchase plan. This is used by marketplace images.

    :ivar name: The plan ID.
    :vartype name: str
    :ivar publisher: The publisher ID.
    :vartype publisher: str
    :ivar product: The product ID.
    :vartype product: str
    """

    name: Optional[str] = rest_field()
    """The plan ID."""
    publisher: Optional[str] = rest_field()
    """The publisher ID."""
    product: Optional[str] = rest_field()
    """The product ID."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageVersionSecurityProfile(_model_base.Model):
    """The security profile of a gallery image version.

    :ivar uefi_settings: Contains UEFI settings for the image version.
    :vartype uefi_settings: ~azure.mgmt.compute.gallery.models.GalleryImageVersionUefiSettings
    """

    uefi_settings: Optional["_models.GalleryImageVersionUefiSettings"] = rest_field(name="uefiSettings")
    """Contains UEFI settings for the image version."""

    @overload
    def __init__(
        self,
        *,
        uefi_settings: Optional["_models.GalleryImageVersionUefiSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSDiskImageEncryption(DiskImageEncryption):
    """Contains encryption settings for an OS disk image.

    :ivar disk_encryption_set_id: A relative URI containing the resource ID of the disk encryption
     set.
    :vartype disk_encryption_set_id: str
    :ivar security_profile: This property specifies the security profile of an OS disk image.
    :vartype security_profile: ~azure.mgmt.compute.gallery.models.OSDiskImageSecurityProfile
    """

    security_profile: Optional["_models.OSDiskImageSecurityProfile"] = rest_field(name="securityProfile")
    """This property specifies the security profile of an OS disk image."""

    @overload
    def __init__(
        self,
        *,
        disk_encryption_set_id: Optional[str] = None,
        security_profile: Optional["_models.OSDiskImageSecurityProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSDiskImageSecurityProfile(_model_base.Model):
    """Contains security profile for an OS disk image.

    :ivar confidential_vm_encryption_type: confidential VM encryption types. Known values are:
     "EncryptedVMGuestStateOnlyWithPmk", "EncryptedWithPmk", "EncryptedWithCmk", and
     "NonPersistedTPM".
    :vartype confidential_vm_encryption_type: str or
     ~azure.mgmt.compute.gallery.models.ConfidentialVMEncryptionType
    :ivar secure_vm_disk_encryption_set_id: secure VM disk encryption set id.
    :vartype secure_vm_disk_encryption_set_id: str
    """

    confidential_vm_encryption_type: Optional[Union[str, "_models.ConfidentialVMEncryptionType"]] = rest_field(
        name="confidentialVMEncryptionType"
    )
    """confidential VM encryption types. Known values are: \"EncryptedVMGuestStateOnlyWithPmk\",
     \"EncryptedWithPmk\", \"EncryptedWithCmk\", and \"NonPersistedTPM\"."""
    secure_vm_disk_encryption_set_id: Optional[str] = rest_field(name="secureVMDiskEncryptionSetId")
    """secure VM disk encryption set id."""

    @overload
    def __init__(
        self,
        *,
        confidential_vm_encryption_type: Optional[Union[str, "_models.ConfidentialVMEncryptionType"]] = None,
        secure_vm_disk_encryption_set_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyViolation(_model_base.Model):
    """A policy violation reported against a gallery artifact.

    :ivar category: Describes the nature of the policy violation. Known values are: "Other",
     "ImageFlaggedUnsafe", "CopyrightValidation", and "IpTheft".
    :vartype category: str or ~azure.mgmt.compute.gallery.models.PolicyViolationCategory
    :ivar details: Describes specific details about why this policy violation was reported.
    :vartype details: str
    """

    category: Optional[Union[str, "_models.PolicyViolationCategory"]] = rest_field()
    """Describes the nature of the policy violation. Known values are: \"Other\",
     \"ImageFlaggedUnsafe\", \"CopyrightValidation\", and \"IpTheft\"."""
    details: Optional[str] = rest_field()
    """Describes specific details about why this policy violation was reported."""

    @overload
    def __init__(
        self,
        *,
        category: Optional[Union[str, "_models.PolicyViolationCategory"]] = None,
        details: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RecommendedMachineConfiguration(_model_base.Model):
    """The properties describe the recommended machine configuration for this Image Definition. These
    properties are updatable.

    :ivar v_cp_us: Describes the resource range.
    :vartype v_cp_us: ~azure.mgmt.compute.gallery.models.ResourceRange
    :ivar memory: Describes the resource range.
    :vartype memory: ~azure.mgmt.compute.gallery.models.ResourceRange
    """

    v_cp_us: Optional["_models.ResourceRange"] = rest_field(name="vCPUs")
    """Describes the resource range."""
    memory: Optional["_models.ResourceRange"] = rest_field()
    """Describes the resource range."""

    @overload
    def __init__(
        self,
        *,
        v_cp_us: Optional["_models.ResourceRange"] = None,
        memory: Optional["_models.ResourceRange"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegionalReplicationStatus(_model_base.Model):
    """This is the regional replication status.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar region: The region to which the gallery image version is being replicated to.
    :vartype region: str
    :ivar state: This is the regional replication state. Known values are: "Unknown",
     "Replicating", "Completed", and "Failed".
    :vartype state: str or ~azure.mgmt.compute.gallery.models.ReplicationState
    :ivar details: The details of the replication status.
    :vartype details: str
    :ivar progress: It indicates progress of the replication job.
    :vartype progress: int
    """

    region: Optional[str] = rest_field(visibility=["read"])
    """The region to which the gallery image version is being replicated to."""
    state: Optional[Union[str, "_models.ReplicationState"]] = rest_field(visibility=["read"])
    """This is the regional replication state. Known values are: \"Unknown\", \"Replicating\",
     \"Completed\", and \"Failed\"."""
    details: Optional[str] = rest_field(visibility=["read"])
    """The details of the replication status."""
    progress: Optional[int] = rest_field(visibility=["read"])
    """It indicates progress of the replication job."""


class RegionalSharingStatus(_model_base.Model):
    """Gallery regional sharing status.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar region: Region name.
    :vartype region: str
    :ivar state: Gallery sharing state in current region. Known values are: "Succeeded",
     "InProgress", "Failed", and "Unknown".
    :vartype state: str or ~azure.mgmt.compute.gallery.models.SharingState
    :ivar details: Details of gallery regional sharing failure.
    :vartype details: str
    """

    region: Optional[str] = rest_field()
    """Region name."""
    state: Optional[Union[str, "_models.SharingState"]] = rest_field(visibility=["read"])
    """Gallery sharing state in current region. Known values are: \"Succeeded\", \"InProgress\",
     \"Failed\", and \"Unknown\"."""
    details: Optional[str] = rest_field()
    """Details of gallery regional sharing failure."""

    @overload
    def __init__(
        self,
        *,
        region: Optional[str] = None,
        details: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReplicationStatus(_model_base.Model):
    """This is the replication status of the gallery image version.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar aggregated_state: This is the aggregated replication status based on all the regional
     replication status flags. Known values are: "Unknown", "InProgress", "Completed", and "Failed".
    :vartype aggregated_state: str or ~azure.mgmt.compute.gallery.models.AggregatedReplicationState
    :ivar summary: This is a summary of replication status for each region.
    :vartype summary: list[~azure.mgmt.compute.gallery.models.RegionalReplicationStatus]
    """

    aggregated_state: Optional[Union[str, "_models.AggregatedReplicationState"]] = rest_field(
        name="aggregatedState", visibility=["read"]
    )
    """This is the aggregated replication status based on all the regional replication status flags.
     Known values are: \"Unknown\", \"InProgress\", \"Completed\", and \"Failed\"."""
    summary: Optional[List["_models.RegionalReplicationStatus"]] = rest_field(visibility=["read"])
    """This is a summary of replication status for each region."""


class ResourceRange(_model_base.Model):
    """Describes the resource range.

    :ivar min: The minimum number of the resource.
    :vartype min: int
    :ivar max: The maximum number of the resource.
    :vartype max: int
    """

    min: Optional[int] = rest_field()
    """The minimum number of the resource."""
    max: Optional[int] = rest_field()
    """The maximum number of the resource."""

    @overload
    def __init__(
        self,
        *,
        min: Optional[int] = None,  # pylint: disable=redefined-builtin
        max: Optional[int] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGallery(ProxyResource):
    """Specifies information about the Shared Gallery that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Specifies the properties of a shared gallery.
    :vartype properties: ~azure.mgmt.compute.gallery.models.SharedGalleryProperties
    """

    properties: Optional["_models.SharedGalleryProperties"] = rest_field()
    """Specifies the properties of a shared gallery."""

    __flattened_items = ["artifact_tags"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SharedGalleryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SharedGalleryDiskImage(_model_base.Model):
    """This is the disk image base class.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar disk_size_gb: This property indicates the size of the VHD to be created.
    :vartype disk_size_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.SharedGalleryHostCaching
    """

    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB", visibility=["read"])
    """This property indicates the size of the VHD to be created."""
    host_caching: Optional[Union[str, "_models.SharedGalleryHostCaching"]] = rest_field(name="hostCaching")
    """The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""

    @overload
    def __init__(
        self,
        *,
        host_caching: Optional[Union[str, "_models.SharedGalleryHostCaching"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryDataDiskImage(SharedGalleryDiskImage):
    """This is the data disk image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar disk_size_gb: This property indicates the size of the VHD to be created.
    :vartype disk_size_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.SharedGalleryHostCaching
    :ivar lun: This property specifies the logical unit number of the data disk. This value is used
     to identify data disks within the Virtual Machine and therefore must be unique for each data
     disk attached to the Virtual Machine. Required.
    :vartype lun: int
    """

    lun: int = rest_field()
    """This property specifies the logical unit number of the data disk. This value is used to
     identify data disks within the Virtual Machine and therefore must be unique for each data disk
     attached to the Virtual Machine. Required."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        host_caching: Optional[Union[str, "_models.SharedGalleryHostCaching"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryImage(ProxyResource):
    """Specifies information about the gallery image definition that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Describes the properties of a gallery image definition.
    :vartype properties: ~azure.mgmt.compute.gallery.models.SharedGalleryImageProperties
    """

    properties: Optional["_models.SharedGalleryImageProperties"] = rest_field()
    """Describes the properties of a gallery image definition."""

    __flattened_items = [
        "os_type",
        "os_state",
        "end_of_life_date",
        "identifier",
        "recommended",
        "disallowed",
        "hyper_v_generation",
        "features",
        "purchase_plan",
        "architecture",
        "privacy_statement_uri",
        "eula",
        "artifact_tags",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SharedGalleryImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SharedGalleryImageProperties(_model_base.Model):
    """Describes the properties of a gallery image definition.


    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**.
     Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.gallery.models.OperatingSystemTypes
    :ivar os_state: This property allows the user to specify whether the virtual machines created
     under this image are 'Generalized' or 'Specialized'. Required. Known values are: "Generalized"
     and "Specialized".
    :vartype os_state: str or ~azure.mgmt.compute.gallery.models.OperatingSystemStateTypes
    :ivar end_of_life_date: The end of life date of the gallery image definition. This property can
     be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar identifier: This is the gallery image definition identifier. Required.
    :vartype identifier: ~azure.mgmt.compute.gallery.models.GalleryImageIdentifier
    :ivar recommended: The properties describe the recommended machine configuration for this Image
     Definition. These properties are updatable.
    :vartype recommended: ~azure.mgmt.compute.gallery.models.RecommendedMachineConfiguration
    :ivar disallowed: Describes the disallowed disk types.
    :vartype disallowed: ~azure.mgmt.compute.gallery.models.Disallowed
    :ivar hyper_v_generation: The hypervisor generation of the Virtual Machine. Applicable to OS
     disks only. Known values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.gallery.models.HyperVGeneration
    :ivar features: A list of gallery image features.
    :vartype features: list[~azure.mgmt.compute.gallery.models.GalleryImageFeature]
    :ivar purchase_plan: Describes the gallery image definition purchase plan. This is used by
     marketplace images.
    :vartype purchase_plan: ~azure.mgmt.compute.gallery.models.ImagePurchasePlan
    :ivar architecture: The architecture of the image. Applicable to OS disks only. Known values
     are: "x64" and "Arm64".
    :vartype architecture: str or ~azure.mgmt.compute.gallery.models.Architecture
    :ivar privacy_statement_uri: Privacy statement uri for the current community gallery image.
    :vartype privacy_statement_uri: str
    :ivar eula: End-user license agreement for the current community gallery image.
    :vartype eula: str
    :ivar artifact_tags: The artifact tags of a shared gallery resource.
    :vartype artifact_tags: dict[str, str]
    """

    os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk when
     creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. Required.
     Known values are: \"Windows\" and \"Linux\"."""
    os_state: Union[str, "_models.OperatingSystemStateTypes"] = rest_field(name="osState")
    """This property allows the user to specify whether the virtual machines created under this image
     are 'Generalized' or 'Specialized'. Required. Known values are: \"Generalized\" and
     \"Specialized\"."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    identifier: "_models.GalleryImageIdentifier" = rest_field()
    """This is the gallery image definition identifier. Required."""
    recommended: Optional["_models.RecommendedMachineConfiguration"] = rest_field()
    """The properties describe the recommended machine configuration for this Image Definition. These
     properties are updatable."""
    disallowed: Optional["_models.Disallowed"] = rest_field()
    """Describes the disallowed disk types."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = rest_field(name="hyperVGeneration")
    """The hypervisor generation of the Virtual Machine. Applicable to OS disks only. Known values
     are: \"V1\" and \"V2\"."""
    features: Optional[List["_models.GalleryImageFeature"]] = rest_field()
    """A list of gallery image features."""
    purchase_plan: Optional["_models.ImagePurchasePlan"] = rest_field(name="purchasePlan")
    """Describes the gallery image definition purchase plan. This is used by marketplace images."""
    architecture: Optional[Union[str, "_models.Architecture"]] = rest_field()
    """The architecture of the image. Applicable to OS disks only. Known values are: \"x64\" and
     \"Arm64\"."""
    privacy_statement_uri: Optional[str] = rest_field(name="privacyStatementUri")
    """Privacy statement uri for the current community gallery image."""
    eula: Optional[str] = rest_field()
    """End-user license agreement for the current community gallery image."""
    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags")
    """The artifact tags of a shared gallery resource."""

    @overload
    def __init__(
        self,
        *,
        os_type: Union[str, "_models.OperatingSystemTypes"],
        os_state: Union[str, "_models.OperatingSystemStateTypes"],
        identifier: "_models.GalleryImageIdentifier",
        end_of_life_date: Optional[datetime.datetime] = None,
        recommended: Optional["_models.RecommendedMachineConfiguration"] = None,
        disallowed: Optional["_models.Disallowed"] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = None,
        features: Optional[List["_models.GalleryImageFeature"]] = None,
        purchase_plan: Optional["_models.ImagePurchasePlan"] = None,
        architecture: Optional[Union[str, "_models.Architecture"]] = None,
        privacy_statement_uri: Optional[str] = None,
        eula: Optional[str] = None,
        artifact_tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryImageVersion(ProxyResource):
    """Specifies information about the gallery image version that you want to create or update.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.gallery.models.SystemData
    :ivar properties: Describes the properties of a gallery image version.
    :vartype properties: ~azure.mgmt.compute.gallery.models.SharedGalleryImageVersionProperties
    """

    properties: Optional["_models.SharedGalleryImageVersionProperties"] = rest_field()
    """Describes the properties of a gallery image version."""

    __flattened_items = [
        "published_date",
        "end_of_life_date",
        "exclude_from_latest",
        "storage_profile",
        "artifact_tags",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SharedGalleryImageVersionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SharedGalleryImageVersionProperties(_model_base.Model):
    """Describes the properties of a gallery image version.

    :ivar published_date: The published date of the gallery image version Definition. This property
     can be used for decommissioning purposes. This property is updatable.
    :vartype published_date: ~datetime.datetime
    :ivar end_of_life_date: The end of life date of the gallery image version Definition. This
     property can be used for decommissioning purposes. This property is updatable.
    :vartype end_of_life_date: ~datetime.datetime
    :ivar exclude_from_latest: If set to true, Virtual Machines deployed from the latest version of
     the Image Definition won't use this Image Version.
    :vartype exclude_from_latest: bool
    :ivar storage_profile: Describes the storage profile of the image version.
    :vartype storage_profile:
     ~azure.mgmt.compute.gallery.models.SharedGalleryImageVersionStorageProfile
    :ivar artifact_tags: The artifact tags of a shared gallery resource.
    :vartype artifact_tags: dict[str, str]
    """

    published_date: Optional[datetime.datetime] = rest_field(name="publishedDate", format="rfc3339")
    """The published date of the gallery image version Definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    end_of_life_date: Optional[datetime.datetime] = rest_field(name="endOfLifeDate", format="rfc3339")
    """The end of life date of the gallery image version Definition. This property can be used for
     decommissioning purposes. This property is updatable."""
    exclude_from_latest: Optional[bool] = rest_field(name="excludeFromLatest")
    """If set to true, Virtual Machines deployed from the latest version of the Image Definition won't
     use this Image Version."""
    storage_profile: Optional["_models.SharedGalleryImageVersionStorageProfile"] = rest_field(name="storageProfile")
    """Describes the storage profile of the image version."""
    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags")
    """The artifact tags of a shared gallery resource."""

    @overload
    def __init__(
        self,
        *,
        published_date: Optional[datetime.datetime] = None,
        end_of_life_date: Optional[datetime.datetime] = None,
        exclude_from_latest: Optional[bool] = None,
        storage_profile: Optional["_models.SharedGalleryImageVersionStorageProfile"] = None,
        artifact_tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryImageVersionStorageProfile(_model_base.Model):
    """This is the storage profile of a Gallery Image Version.

    :ivar os_disk_image: This is the OS disk image.
    :vartype os_disk_image: ~azure.mgmt.compute.gallery.models.SharedGalleryOSDiskImage
    :ivar data_disk_images: A list of data disk images.
    :vartype data_disk_images: list[~azure.mgmt.compute.gallery.models.SharedGalleryDataDiskImage]
    """

    os_disk_image: Optional["_models.SharedGalleryOSDiskImage"] = rest_field(name="osDiskImage")
    """This is the OS disk image."""
    data_disk_images: Optional[List["_models.SharedGalleryDataDiskImage"]] = rest_field(name="dataDiskImages")
    """A list of data disk images."""

    @overload
    def __init__(
        self,
        *,
        os_disk_image: Optional["_models.SharedGalleryOSDiskImage"] = None,
        data_disk_images: Optional[List["_models.SharedGalleryDataDiskImage"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryOSDiskImage(SharedGalleryDiskImage):
    """This is the OS disk image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar disk_size_gb: This property indicates the size of the VHD to be created.
    :vartype disk_size_gb: int
    :ivar host_caching: The host caching of the disk. Valid values are 'None', 'ReadOnly', and
     'ReadWrite'. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.compute.gallery.models.SharedGalleryHostCaching
    """

    @overload
    def __init__(
        self,
        *,
        host_caching: Optional[Union[str, "_models.SharedGalleryHostCaching"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedGalleryProperties(_model_base.Model):
    """Specifies the properties of a shared gallery.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar artifact_tags: The artifact tags of a shared gallery resource.
    :vartype artifact_tags: dict[str, str]
    """

    artifact_tags: Optional[Dict[str, str]] = rest_field(name="artifactTags", visibility=["read"])
    """The artifact tags of a shared gallery resource."""


class SharingProfile(_model_base.Model):
    """Profile for gallery sharing to subscription or tenant.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar permissions: This property allows you to specify the permission of sharing gallery.
     Possible values are: **Private,** **Groups,** **Community.**. Known values are: "Private",
     "Groups", and "Community".
    :vartype permissions: str or ~azure.mgmt.compute.gallery.models.GallerySharingPermissionTypes
    :ivar groups: A list of sharing profile groups.
    :vartype groups: list[~azure.mgmt.compute.gallery.models.SharingProfileGroup]
    :ivar community_gallery_info: Information of community gallery if current gallery is shared to
     community.
    :vartype community_gallery_info: ~azure.mgmt.compute.gallery.models.CommunityGalleryInfo
    """

    permissions: Optional[Union[str, "_models.GallerySharingPermissionTypes"]] = rest_field()
    """This property allows you to specify the permission of sharing gallery. Possible values are:
     **Private,** **Groups,** **Community.**. Known values are: \"Private\", \"Groups\", and
     \"Community\"."""
    groups: Optional[List["_models.SharingProfileGroup"]] = rest_field(visibility=["read"])
    """A list of sharing profile groups."""
    community_gallery_info: Optional["_models.CommunityGalleryInfo"] = rest_field(name="communityGalleryInfo")
    """Information of community gallery if current gallery is shared to community."""

    @overload
    def __init__(
        self,
        *,
        permissions: Optional[Union[str, "_models.GallerySharingPermissionTypes"]] = None,
        community_gallery_info: Optional["_models.CommunityGalleryInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharingProfileGroup(_model_base.Model):
    """Group of the gallery sharing profile.

    :ivar type: This property allows you to specify the type of sharing group. Possible values are:
     **Subscriptions,** **AADTenants.**. Known values are: "Subscriptions" and "AADTenants".
    :vartype type: str or ~azure.mgmt.compute.gallery.models.SharingProfileGroupTypes
    :ivar ids: A list of subscription/tenant ids the gallery is aimed to be shared to.
    :vartype ids: list[str]
    """

    type: Optional[Union[str, "_models.SharingProfileGroupTypes"]] = rest_field()
    """This property allows you to specify the type of sharing group. Possible values are:
     **Subscriptions,** **AADTenants.**. Known values are: \"Subscriptions\" and \"AADTenants\"."""
    ids: Optional[List[str]] = rest_field()
    """A list of subscription/tenant ids the gallery is aimed to be shared to."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.SharingProfileGroupTypes"]] = None,
        ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharingStatus(_model_base.Model):
    """Sharing status of current gallery.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar aggregated_state: Aggregated sharing state of current gallery. Known values are:
     "Succeeded", "InProgress", "Failed", and "Unknown".
    :vartype aggregated_state: str or ~azure.mgmt.compute.gallery.models.SharingState
    :ivar summary: Summary of all regional sharing status.
    :vartype summary: list[~azure.mgmt.compute.gallery.models.RegionalSharingStatus]
    """

    aggregated_state: Optional[Union[str, "_models.SharingState"]] = rest_field(
        name="aggregatedState", visibility=["read"]
    )
    """Aggregated sharing state of current gallery. Known values are: \"Succeeded\", \"InProgress\",
     \"Failed\", and \"Unknown\"."""
    summary: Optional[List["_models.RegionalSharingStatus"]] = rest_field()
    """Summary of all regional sharing status."""

    @overload
    def __init__(
        self,
        *,
        summary: Optional[List["_models.RegionalSharingStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharingUpdate(_model_base.Model):
    """Specifies information about the gallery sharing profile update.


    :ivar operation_type: This property allows you to specify the operation type of gallery sharing
     update. Possible values are: **Add,** **Remove,** **Reset.**. Required. Known values are:
     "Add", "Remove", "Reset", and "EnableCommunity".
    :vartype operation_type: str or ~azure.mgmt.compute.gallery.models.SharingUpdateOperationTypes
    :ivar groups: A list of sharing profile groups.
    :vartype groups: list[~azure.mgmt.compute.gallery.models.SharingProfileGroup]
    """

    operation_type: Union[str, "_models.SharingUpdateOperationTypes"] = rest_field(name="operationType")
    """This property allows you to specify the operation type of gallery sharing update. Possible
     values are: **Add,** **Remove,** **Reset.**. Required. Known values are: \"Add\", \"Remove\",
     \"Reset\", and \"EnableCommunity\"."""
    groups: Optional[List["_models.SharingProfileGroup"]] = rest_field()
    """A list of sharing profile groups."""

    @overload
    def __init__(
        self,
        *,
        operation_type: Union[str, "_models.SharingUpdateOperationTypes"],
        groups: Optional[List["_models.SharingProfileGroup"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SoftDeletePolicy(_model_base.Model):
    """Contains information about the soft deletion policy of the gallery.

    :ivar is_soft_delete_enabled: Enables soft-deletion for resources in this gallery, allowing
     them to be recovered within retention time.
    :vartype is_soft_delete_enabled: bool
    """

    is_soft_delete_enabled: Optional[bool] = rest_field(name="isSoftDeleteEnabled")
    """Enables soft-deletion for resources in this gallery, allowing them to be recovered within
     retention time."""

    @overload
    def __init__(
        self,
        *,
        is_soft_delete_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.compute.gallery.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.compute.gallery.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetRegion(_model_base.Model):
    """Describes the target region information.


    :ivar name: The name of the region. Required.
    :vartype name: str
    :ivar regional_replica_count: The number of replicas of the Image Version to be created per
     region. This property is updatable.
    :vartype regional_replica_count: int
    :ivar storage_account_type: Specifies the storage account type to be used to store the image.
     This property is not updatable. Known values are: "Standard_LRS", "Standard_ZRS", and
     "Premium_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.gallery.models.StorageAccountType
    :ivar encryption: Optional. Allows users to provide customer managed keys for encrypting the OS
     and data disks in the gallery artifact.
    :vartype encryption: ~azure.mgmt.compute.gallery.models.EncryptionImages
    :ivar exclude_from_latest: Contains the flag setting to hide an image when users specify
     version='latest'.
    :vartype exclude_from_latest: bool
    """

    name: str = rest_field()
    """The name of the region. Required."""
    regional_replica_count: Optional[int] = rest_field(name="regionalReplicaCount")
    """The number of replicas of the Image Version to be created per region. This property is
     updatable."""
    storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = rest_field(name="storageAccountType")
    """Specifies the storage account type to be used to store the image. This property is not
     updatable. Known values are: \"Standard_LRS\", \"Standard_ZRS\", and \"Premium_LRS\"."""
    encryption: Optional["_models.EncryptionImages"] = rest_field()
    """Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in
     the gallery artifact."""
    exclude_from_latest: Optional[bool] = rest_field(name="excludeFromLatest")
    """Contains the flag setting to hide an image when users specify version='latest'."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        regional_replica_count: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = None,
        encryption: Optional["_models.EncryptionImages"] = None,
        exclude_from_latest: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UefiKey(_model_base.Model):
    """A UEFI key signature.

    :ivar type: The type of key signature. Known values are: "sha256" and "x509".
    :vartype type: str or ~azure.mgmt.compute.gallery.models.UefiKeyType
    :ivar value: The value of the key signature.
    :vartype value: list[str]
    """

    type: Optional[Union[str, "_models.UefiKeyType"]] = rest_field()
    """The type of key signature. Known values are: \"sha256\" and \"x509\"."""
    value: Optional[List[str]] = rest_field()
    """The value of the key signature."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.UefiKeyType"]] = None,
        value: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UefiKeySignatures(_model_base.Model):
    """Additional UEFI key signatures that will be added to the image in addition to the signature
    templates.

    :ivar pk: The Platform Key of this image version.
    :vartype pk: ~azure.mgmt.compute.gallery.models.UefiKey
    :ivar kek: The Key Encryption Keys of this image version.
    :vartype kek: list[~azure.mgmt.compute.gallery.models.UefiKey]
    :ivar db: The database of UEFI keys for this image version.
    :vartype db: list[~azure.mgmt.compute.gallery.models.UefiKey]
    :ivar dbx: The database of revoked UEFI keys for this image version.
    :vartype dbx: list[~azure.mgmt.compute.gallery.models.UefiKey]
    """

    pk: Optional["_models.UefiKey"] = rest_field()
    """The Platform Key of this image version."""
    kek: Optional[List["_models.UefiKey"]] = rest_field()
    """The Key Encryption Keys of this image version."""
    db: Optional[List["_models.UefiKey"]] = rest_field()
    """The database of UEFI keys for this image version."""
    dbx: Optional[List["_models.UefiKey"]] = rest_field()
    """The database of revoked UEFI keys for this image version."""

    @overload
    def __init__(
        self,
        *,
        pk: Optional["_models.UefiKey"] = None,
        kek: Optional[List["_models.UefiKey"]] = None,
        db: Optional[List["_models.UefiKey"]] = None,
        dbx: Optional[List["_models.UefiKey"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserArtifactManage(_model_base.Model):
    """UserArtifactManage.


    :ivar install: Required. The path and arguments to install the gallery application. This is
     limited to 4096 characters. Required.
    :vartype install: str
    :ivar remove: Required. The path and arguments to remove the gallery application. This is
     limited to 4096 characters. Required.
    :vartype remove: str
    :ivar update_property: Optional. The path and arguments to update the gallery application. If
     not present, then update operation will invoke remove command on the previous version and
     install command on the current version of the gallery application. This is limited to 4096
     characters.
    :vartype update_property: str
    """

    install: str = rest_field()
    """Required. The path and arguments to install the gallery application. This is limited to 4096
     characters. Required."""
    remove: str = rest_field()
    """Required. The path and arguments to remove the gallery application. This is limited to 4096
     characters. Required."""
    update_property: Optional[str] = rest_field(name="update")
    """Optional. The path and arguments to update the gallery application. If not present, then update
     operation will invoke remove command on the previous version and install command on the current
     version of the gallery application. This is limited to 4096 characters."""

    @overload
    def __init__(
        self,
        *,
        install: str,
        remove: str,
        update_property: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserArtifactSettings(_model_base.Model):
    """Additional settings for the VM app that contains the target package and config file name when
    it is deployed to target VM or VM scale set.

    :ivar package_file_name: Optional. The name to assign the downloaded package file on the VM.
     This is limited to 4096 characters. If not specified, the package file will be named the same
     as the Gallery Application name.
    :vartype package_file_name: str
    :ivar config_file_name: Optional. The name to assign the downloaded config file on the VM. This
     is limited to 4096 characters. If not specified, the config file will be named the Gallery
     Application name appended with "_config".
    :vartype config_file_name: str
    """

    package_file_name: Optional[str] = rest_field(name="packageFileName")
    """Optional. The name to assign the downloaded package file on the VM. This is limited to 4096
     characters. If not specified, the package file will be named the same as the Gallery
     Application name."""
    config_file_name: Optional[str] = rest_field(name="configFileName")
    """Optional. The name to assign the downloaded config file on the VM. This is limited to 4096
     characters. If not specified, the config file will be named the Gallery Application name
     appended with \"_config\"."""

    @overload
    def __init__(
        self,
        *,
        package_file_name: Optional[str] = None,
        config_file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserArtifactSource(_model_base.Model):
    """The source image from which the Image Version is going to be created.


    :ivar media_link: Required. The mediaLink of the artifact, must be a readable storage page
     blob. Required.
    :vartype media_link: str
    :ivar default_configuration_link: Optional. The defaultConfigurationLink of the artifact, must
     be a readable storage page blob.
    :vartype default_configuration_link: str
    """

    media_link: str = rest_field(name="mediaLink")
    """Required. The mediaLink of the artifact, must be a readable storage page blob. Required."""
    default_configuration_link: Optional[str] = rest_field(name="defaultConfigurationLink")
    """Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob."""

    @overload
    def __init__(
        self,
        *,
        media_link: str,
        default_configuration_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
