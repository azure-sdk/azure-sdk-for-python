# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.support.aio import MicrosoftSupport

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftSupportSupportTicketsNoSubscriptionOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MicrosoftSupport, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_support_tickets_no_subscription_check_name_availability(self, resource_group):
        response = await self.client.support_tickets_no_subscription.check_name_availability(
            check_name_availability_input={"name": "str", "type": "str"},
            api_version="2023-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_support_tickets_no_subscription_list(self, resource_group):
        response = self.client.support_tickets_no_subscription.list(
            api_version="2023-06-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_support_tickets_no_subscription_get(self, resource_group):
        response = await self.client.support_tickets_no_subscription.get(
            support_ticket_name="str",
            api_version="2023-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_support_tickets_no_subscription_update(self, resource_group):
        response = await self.client.support_tickets_no_subscription.update(
            support_ticket_name="str",
            update_support_ticket={
                "advancedDiagnosticConsent": "str",
                "contactDetails": {
                    "additionalEmailAddresses": ["str"],
                    "country": "str",
                    "firstName": "str",
                    "lastName": "str",
                    "phoneNumber": "str",
                    "preferredContactMethod": "str",
                    "preferredSupportLanguage": "str",
                    "preferredTimeZone": "str",
                    "primaryEmailAddress": "str",
                },
                "secondaryConsent": [{"type": "str", "userConsent": "str"}],
                "severity": "str",
                "status": "str",
            },
            api_version="2023-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_support_tickets_no_subscription_begin_create(self, resource_group):
        response = await (
            await self.client.support_tickets_no_subscription.begin_create(
                support_ticket_name="str",
                create_support_ticket_parameters={
                    "advancedDiagnosticConsent": "str",
                    "contactDetails": {
                        "country": "str",
                        "firstName": "str",
                        "lastName": "str",
                        "preferredContactMethod": "str",
                        "preferredSupportLanguage": "str",
                        "preferredTimeZone": "str",
                        "primaryEmailAddress": "str",
                        "additionalEmailAddresses": ["str"],
                        "phoneNumber": "str",
                    },
                    "createdDate": "2020-02-20 00:00:00",
                    "description": "str",
                    "enrollmentId": "str",
                    "fileWorkspaceName": "str",
                    "id": "str",
                    "isTemporaryTicket": "str",
                    "modifiedDate": "2020-02-20 00:00:00",
                    "name": "str",
                    "problemClassificationDisplayName": "str",
                    "problemClassificationId": "str",
                    "problemScopingQuestions": "str",
                    "problemStartTime": "2020-02-20 00:00:00",
                    "quotaTicketDetails": {
                        "quotaChangeRequestSubType": "str",
                        "quotaChangeRequestVersion": "str",
                        "quotaChangeRequests": [{"payload": "str", "region": "str"}],
                    },
                    "require24X7Response": bool,
                    "secondaryConsent": [{"type": "str", "userConsent": "str"}],
                    "serviceDisplayName": "str",
                    "serviceId": "str",
                    "serviceLevelAgreement": {
                        "expirationTime": "2020-02-20 00:00:00",
                        "slaMinutes": 0,
                        "startTime": "2020-02-20 00:00:00",
                    },
                    "severity": "str",
                    "status": "str",
                    "supportEngineer": {"emailAddress": "str"},
                    "supportPlanDisplayName": "str",
                    "supportPlanId": "str",
                    "supportPlanType": "str",
                    "supportTicketId": "str",
                    "technicalTicketDetails": {"resourceId": "str"},
                    "title": "str",
                    "type": "str",
                },
                api_version="2023-06-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
