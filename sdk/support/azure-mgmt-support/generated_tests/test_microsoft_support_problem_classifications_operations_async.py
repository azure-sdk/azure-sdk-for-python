# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.support.aio import MicrosoftSupport

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftSupportProblemClassificationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MicrosoftSupport, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_problem_classifications_classify_problems(self, resource_group):
        response = await self.client.problem_classifications.classify_problems(
            problem_service_name="str",
            problem_classifications_classification_input={"issueSummary": "str", "resourceId": "str"},
            api_version="2023-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_problem_classifications_list(self, resource_group):
        response = self.client.problem_classifications.list(
            service_name="str",
            api_version="2023-06-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_problem_classifications_get(self, resource_group):
        response = await self.client.problem_classifications.get(
            service_name="str",
            problem_classification_name="str",
            api_version="2023-06-01-preview",
        )

        # please add some check logic here by yourself
        # ...
