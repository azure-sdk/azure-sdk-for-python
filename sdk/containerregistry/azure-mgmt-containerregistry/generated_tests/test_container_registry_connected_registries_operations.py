# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.containerregistry import ContainerRegistryClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContainerRegistryConnectedRegistriesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ContainerRegistryClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_get(self, resource_group):
        response = self.client.connected_registries.get(
            resource_group_name=resource_group.name,
            registry_name="str",
            connected_registry_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_begin_create(self, resource_group):
        response = self.client.connected_registries.begin_create(
            resource_group_name=resource_group.name,
            registry_name="str",
            connected_registry_name="str",
            connected_registry_create_parameters={
                "id": "str",
                "name": "str",
                "properties": {
                    "mode": "str",
                    "parent": {
                        "syncProperties": {
                            "messageTtl": "1 day, 0:00:00",
                            "tokenId": "str",
                            "gatewayEndpoint": "str",
                            "lastSyncTime": "2020-02-20 00:00:00",
                            "schedule": "str",
                            "syncWindow": "1 day, 0:00:00",
                        },
                        "id": "str",
                    },
                    "activation": {"status": "str"},
                    "clientTokenIds": ["str"],
                    "connectionState": "str",
                    "garbageCollection": {"enabled": bool, "schedule": "str"},
                    "lastActivityTime": "2020-02-20 00:00:00",
                    "logging": {"auditLogStatus": "str", "logLevel": "str"},
                    "loginServer": {
                        "host": "str",
                        "tls": {"certificate": {"location": "str", "type": "str"}, "status": "str"},
                    },
                    "notificationsList": ["str"],
                    "provisioningState": "str",
                    "statusDetails": [
                        {
                            "code": "str",
                            "correlationId": "str",
                            "description": "str",
                            "timestamp": "2020-02-20 00:00:00",
                            "type": "str",
                        }
                    ],
                    "version": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_begin_update(self, resource_group):
        response = self.client.connected_registries.begin_update(
            resource_group_name=resource_group.name,
            registry_name="str",
            connected_registry_name="str",
            connected_registry_update_parameters={
                "properties": {
                    "clientTokenIds": ["str"],
                    "garbageCollection": {"enabled": bool, "schedule": "str"},
                    "logging": {"auditLogStatus": "str", "logLevel": "str"},
                    "notificationsList": ["str"],
                    "syncProperties": {
                        "messageTtl": "1 day, 0:00:00",
                        "schedule": "str",
                        "syncWindow": "1 day, 0:00:00",
                    },
                }
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_begin_delete(self, resource_group):
        response = self.client.connected_registries.begin_delete(
            resource_group_name=resource_group.name,
            registry_name="str",
            connected_registry_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_list(self, resource_group):
        response = self.client.connected_registries.list(
            resource_group_name=resource_group.name,
            registry_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_connected_registries_begin_deactivate(self, resource_group):
        response = self.client.connected_registries.begin_deactivate(
            resource_group_name=resource_group.name,
            registry_name="str",
            connected_registry_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
