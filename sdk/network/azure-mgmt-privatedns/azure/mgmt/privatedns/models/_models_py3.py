# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .._utils import serialization as _serialization

if TYPE_CHECKING:
    from .. import models as _models


class AaaaRecord(_serialization.Model):
    """An AAAA record.

    :ivar ipv6_address: The IPv6 address of this AAAA record.
    :vartype ipv6_address: str
    """

    _attribute_map = {
        "ipv6_address": {"key": "ipv6Address", "type": "str"},
    }

    def __init__(self, *, ipv6_address: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword ipv6_address: The IPv6 address of this AAAA record.
        :paramtype ipv6_address: str
        """
        super().__init__(**kwargs)
        self.ipv6_address = ipv6_address


class ARecord(_serialization.Model):
    """An A record.

    :ivar ipv4_address: The IPv4 address of this A record.
    :vartype ipv4_address: str
    """

    _attribute_map = {
        "ipv4_address": {"key": "ipv4Address", "type": "str"},
    }

    def __init__(self, *, ipv4_address: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword ipv4_address: The IPv4 address of this A record.
        :paramtype ipv4_address: str
        """
        super().__init__(**kwargs)
        self.ipv4_address = ipv4_address


class CnameRecord(_serialization.Model):
    """A CNAME record.

    :ivar cname: The canonical name for this CNAME record.
    :vartype cname: str
    """

    _attribute_map = {
        "cname": {"key": "cname", "type": "str"},
    }

    def __init__(self, *, cname: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword cname: The canonical name for this CNAME record.
        :paramtype cname: str
        """
        super().__init__(**kwargs)
        self.cname = cname


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.info: Optional[JSON] = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.privatedns.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.privatedns.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code: Optional[str] = None
        self.message: Optional[str] = None
        self.target: Optional[str] = None
        self.details: Optional[List["_models.ErrorDetail"]] = None
        self.additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.privatedns.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.privatedns.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class MxRecord(_serialization.Model):
    """An MX record.

    :ivar preference: The preference value for this MX record.
    :vartype preference: int
    :ivar exchange: The domain name of the mail host for this MX record.
    :vartype exchange: str
    """

    _attribute_map = {
        "preference": {"key": "preference", "type": "int"},
        "exchange": {"key": "exchange", "type": "str"},
    }

    def __init__(self, *, preference: Optional[int] = None, exchange: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword preference: The preference value for this MX record.
        :paramtype preference: int
        :keyword exchange: The domain name of the mail host for this MX record.
        :paramtype exchange: str
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.exchange = exchange


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.type: Optional[str] = None
        self.system_data: Optional["_models.SystemData"] = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class PrivateZone(TrackedResource):
    """Describes a Private DNS zone.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar etag: The ETag of the zone.
    :vartype etag: str
    :ivar max_number_of_record_sets: The maximum number of record sets that can be created in this
     Private DNS zone. This is a read-only property and any attempt to set this value will be
     ignored.
    :vartype max_number_of_record_sets: int
    :ivar number_of_record_sets: The current number of record sets in this Private DNS zone. This
     is a read-only property and any attempt to set this value will be ignored.
    :vartype number_of_record_sets: int
    :ivar max_number_of_virtual_network_links: The maximum number of virtual networks that can be
     linked to this Private DNS zone. This is a read-only property and any attempt to set this value
     will be ignored.
    :vartype max_number_of_virtual_network_links: int
    :ivar number_of_virtual_network_links: The current number of virtual networks that are linked
     to this Private DNS zone. This is a read-only property and any attempt to set this value will
     be ignored.
    :vartype number_of_virtual_network_links: int
    :ivar max_number_of_virtual_network_links_with_registration: The maximum number of virtual
     networks that can be linked to this Private DNS zone with registration enabled. This is a
     read-only property and any attempt to set this value will be ignored.
    :vartype max_number_of_virtual_network_links_with_registration: int
    :ivar number_of_virtual_network_links_with_registration: The current number of virtual networks
     that are linked to this Private DNS zone with registration enabled. This is a read-only
     property and any attempt to set this value will be ignored.
    :vartype number_of_virtual_network_links_with_registration: int
    :ivar provisioning_state: The provisioning state of the resource. This is a read-only property
     and any attempt to set this value will be ignored. Known values are: "Creating", "Updating",
     "Deleting", "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.privatedns.models.ProvisioningState
    :ivar internal_id: Private zone internal Id.
    :vartype internal_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "max_number_of_record_sets": {"readonly": True},
        "number_of_record_sets": {"readonly": True},
        "max_number_of_virtual_network_links": {"readonly": True},
        "number_of_virtual_network_links": {"readonly": True},
        "max_number_of_virtual_network_links_with_registration": {"readonly": True},
        "number_of_virtual_network_links_with_registration": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "internal_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "max_number_of_record_sets": {"key": "properties.maxNumberOfRecordSets", "type": "int"},
        "number_of_record_sets": {"key": "properties.numberOfRecordSets", "type": "int"},
        "max_number_of_virtual_network_links": {"key": "properties.maxNumberOfVirtualNetworkLinks", "type": "int"},
        "number_of_virtual_network_links": {"key": "properties.numberOfVirtualNetworkLinks", "type": "int"},
        "max_number_of_virtual_network_links_with_registration": {
            "key": "properties.maxNumberOfVirtualNetworkLinksWithRegistration",
            "type": "int",
        },
        "number_of_virtual_network_links_with_registration": {
            "key": "properties.numberOfVirtualNetworkLinksWithRegistration",
            "type": "int",
        },
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "internal_id": {"key": "properties.internalId", "type": "str"},
    }

    def __init__(
        self, *, location: str, tags: Optional[Dict[str, str]] = None, etag: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword etag: The ETag of the zone.
        :paramtype etag: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.etag = etag
        self.max_number_of_record_sets: Optional[int] = None
        self.number_of_record_sets: Optional[int] = None
        self.max_number_of_virtual_network_links: Optional[int] = None
        self.number_of_virtual_network_links: Optional[int] = None
        self.max_number_of_virtual_network_links_with_registration: Optional[int] = None
        self.number_of_virtual_network_links_with_registration: Optional[int] = None
        self.provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None
        self.internal_id: Optional[str] = None


class PrivateZoneListResult(_serialization.Model):
    """The response of a PrivateZone list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The PrivateZone items on this page. Required.
    :vartype value: list[~azure.mgmt.privatedns.models.PrivateZone]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateZone]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.PrivateZone"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The PrivateZone items on this page. Required.
        :paramtype value: list[~azure.mgmt.privatedns.models.PrivateZone]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    """


class PtrRecord(_serialization.Model):
    """A PTR record.

    :ivar ptrdname: The PTR target domain name for this PTR record.
    :vartype ptrdname: str
    """

    _attribute_map = {
        "ptrdname": {"key": "ptrdname", "type": "str"},
    }

    def __init__(self, *, ptrdname: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword ptrdname: The PTR target domain name for this PTR record.
        :paramtype ptrdname: str
        """
        super().__init__(**kwargs)
        self.ptrdname = ptrdname


class RecordSet(ProxyResource):
    """Describes a DNS record set (a collection of DNS records with the same name and type) in a
    Private DNS zone.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    :ivar etag: The ETag of the record set.
    :vartype etag: str
    :ivar metadata: The metadata attached to the record set.
    :vartype metadata: dict[str, str]
    :ivar ttl: The TTL (time-to-live) of the records in the record set.
    :vartype ttl: int
    :ivar fqdn: Fully qualified domain name of the record set.
    :vartype fqdn: str
    :ivar is_auto_registered: Is the record set auto-registered in the Private DNS zone through a
     virtual network link?.
    :vartype is_auto_registered: bool
    :ivar a_records: The list of A records in the record set.
    :vartype a_records: list[~azure.mgmt.privatedns.models.ARecord]
    :ivar aaaa_records: The list of AAAA records in the record set.
    :vartype aaaa_records: list[~azure.mgmt.privatedns.models.AaaaRecord]
    :ivar cname_record: The CNAME record in the record set.
    :vartype cname_record: ~azure.mgmt.privatedns.models.CnameRecord
    :ivar mx_records: The list of MX records in the record set.
    :vartype mx_records: list[~azure.mgmt.privatedns.models.MxRecord]
    :ivar ptr_records: The list of PTR records in the record set.
    :vartype ptr_records: list[~azure.mgmt.privatedns.models.PtrRecord]
    :ivar soa_record: The SOA record in the record set.
    :vartype soa_record: ~azure.mgmt.privatedns.models.SoaRecord
    :ivar srv_records: The list of SRV records in the record set.
    :vartype srv_records: list[~azure.mgmt.privatedns.models.SrvRecord]
    :ivar txt_records: The list of TXT records in the record set.
    :vartype txt_records: list[~azure.mgmt.privatedns.models.TxtRecord]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "fqdn": {"readonly": True},
        "is_auto_registered": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "etag": {"key": "etag", "type": "str"},
        "metadata": {"key": "properties.metadata", "type": "{str}"},
        "ttl": {"key": "properties.ttl", "type": "int"},
        "fqdn": {"key": "properties.fqdn", "type": "str"},
        "is_auto_registered": {"key": "properties.isAutoRegistered", "type": "bool"},
        "a_records": {"key": "properties.aRecords", "type": "[ARecord]"},
        "aaaa_records": {"key": "properties.aaaaRecords", "type": "[AaaaRecord]"},
        "cname_record": {"key": "properties.cnameRecord", "type": "CnameRecord"},
        "mx_records": {"key": "properties.mxRecords", "type": "[MxRecord]"},
        "ptr_records": {"key": "properties.ptrRecords", "type": "[PtrRecord]"},
        "soa_record": {"key": "properties.soaRecord", "type": "SoaRecord"},
        "srv_records": {"key": "properties.srvRecords", "type": "[SrvRecord]"},
        "txt_records": {"key": "properties.txtRecords", "type": "[TxtRecord]"},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        ttl: Optional[int] = None,
        a_records: Optional[List["_models.ARecord"]] = None,
        aaaa_records: Optional[List["_models.AaaaRecord"]] = None,
        cname_record: Optional["_models.CnameRecord"] = None,
        mx_records: Optional[List["_models.MxRecord"]] = None,
        ptr_records: Optional[List["_models.PtrRecord"]] = None,
        soa_record: Optional["_models.SoaRecord"] = None,
        srv_records: Optional[List["_models.SrvRecord"]] = None,
        txt_records: Optional[List["_models.TxtRecord"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword etag: The ETag of the record set.
        :paramtype etag: str
        :keyword metadata: The metadata attached to the record set.
        :paramtype metadata: dict[str, str]
        :keyword ttl: The TTL (time-to-live) of the records in the record set.
        :paramtype ttl: int
        :keyword a_records: The list of A records in the record set.
        :paramtype a_records: list[~azure.mgmt.privatedns.models.ARecord]
        :keyword aaaa_records: The list of AAAA records in the record set.
        :paramtype aaaa_records: list[~azure.mgmt.privatedns.models.AaaaRecord]
        :keyword cname_record: The CNAME record in the record set.
        :paramtype cname_record: ~azure.mgmt.privatedns.models.CnameRecord
        :keyword mx_records: The list of MX records in the record set.
        :paramtype mx_records: list[~azure.mgmt.privatedns.models.MxRecord]
        :keyword ptr_records: The list of PTR records in the record set.
        :paramtype ptr_records: list[~azure.mgmt.privatedns.models.PtrRecord]
        :keyword soa_record: The SOA record in the record set.
        :paramtype soa_record: ~azure.mgmt.privatedns.models.SoaRecord
        :keyword srv_records: The list of SRV records in the record set.
        :paramtype srv_records: list[~azure.mgmt.privatedns.models.SrvRecord]
        :keyword txt_records: The list of TXT records in the record set.
        :paramtype txt_records: list[~azure.mgmt.privatedns.models.TxtRecord]
        """
        super().__init__(**kwargs)
        self.etag = etag
        self.metadata = metadata
        self.ttl = ttl
        self.fqdn: Optional[str] = None
        self.is_auto_registered: Optional[bool] = None
        self.a_records = a_records
        self.aaaa_records = aaaa_records
        self.cname_record = cname_record
        self.mx_records = mx_records
        self.ptr_records = ptr_records
        self.soa_record = soa_record
        self.srv_records = srv_records
        self.txt_records = txt_records


class RecordSetListResult(_serialization.Model):
    """The response of a RecordSet list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The RecordSet items on this page. Required.
    :vartype value: list[~azure.mgmt.privatedns.models.RecordSet]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[RecordSet]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.RecordSet"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The RecordSet items on this page. Required.
        :paramtype value: list[~azure.mgmt.privatedns.models.RecordSet]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SoaRecord(_serialization.Model):
    """An SOA record.

    :ivar host: The domain name of the authoritative name server for this SOA record.
    :vartype host: str
    :ivar email: The email contact for this SOA record.
    :vartype email: str
    :ivar serial_number: The serial number for this SOA record.
    :vartype serial_number: int
    :ivar refresh_time: The refresh value for this SOA record.
    :vartype refresh_time: int
    :ivar retry_time: The retry time for this SOA record.
    :vartype retry_time: int
    :ivar expire_time: The expire time for this SOA record.
    :vartype expire_time: int
    :ivar minimum_ttl: The minimum value for this SOA record. By convention this is used to
     determine the negative caching duration.
    :vartype minimum_ttl: int
    """

    _attribute_map = {
        "host": {"key": "host", "type": "str"},
        "email": {"key": "email", "type": "str"},
        "serial_number": {"key": "serialNumber", "type": "int"},
        "refresh_time": {"key": "refreshTime", "type": "int"},
        "retry_time": {"key": "retryTime", "type": "int"},
        "expire_time": {"key": "expireTime", "type": "int"},
        "minimum_ttl": {"key": "minimumTtl", "type": "int"},
    }

    def __init__(
        self,
        *,
        host: Optional[str] = None,
        email: Optional[str] = None,
        serial_number: Optional[int] = None,
        refresh_time: Optional[int] = None,
        retry_time: Optional[int] = None,
        expire_time: Optional[int] = None,
        minimum_ttl: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword host: The domain name of the authoritative name server for this SOA record.
        :paramtype host: str
        :keyword email: The email contact for this SOA record.
        :paramtype email: str
        :keyword serial_number: The serial number for this SOA record.
        :paramtype serial_number: int
        :keyword refresh_time: The refresh value for this SOA record.
        :paramtype refresh_time: int
        :keyword retry_time: The retry time for this SOA record.
        :paramtype retry_time: int
        :keyword expire_time: The expire time for this SOA record.
        :paramtype expire_time: int
        :keyword minimum_ttl: The minimum value for this SOA record. By convention this is used to
         determine the negative caching duration.
        :paramtype minimum_ttl: int
        """
        super().__init__(**kwargs)
        self.host = host
        self.email = email
        self.serial_number = serial_number
        self.refresh_time = refresh_time
        self.retry_time = retry_time
        self.expire_time = expire_time
        self.minimum_ttl = minimum_ttl


class SrvRecord(_serialization.Model):
    """An SRV record.

    :ivar priority: The priority value for this SRV record.
    :vartype priority: int
    :ivar weight: The weight value for this SRV record.
    :vartype weight: int
    :ivar port: The port value for this SRV record.
    :vartype port: int
    :ivar target: The target domain name for this SRV record.
    :vartype target: str
    """

    _attribute_map = {
        "priority": {"key": "priority", "type": "int"},
        "weight": {"key": "weight", "type": "int"},
        "port": {"key": "port", "type": "int"},
        "target": {"key": "target", "type": "str"},
    }

    def __init__(
        self,
        *,
        priority: Optional[int] = None,
        weight: Optional[int] = None,
        port: Optional[int] = None,
        target: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword priority: The priority value for this SRV record.
        :paramtype priority: int
        :keyword weight: The weight value for this SRV record.
        :paramtype weight: int
        :keyword port: The port value for this SRV record.
        :paramtype port: int
        :keyword target: The target domain name for this SRV record.
        :paramtype target: str
        """
        super().__init__(**kwargs)
        self.priority = priority
        self.weight = weight
        self.port = port
        self.target = target


class SubResource(_serialization.Model):
    """Reference to another subresource.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, id: Optional[str] = None, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.privatedns.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.privatedns.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.privatedns.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.privatedns.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TxtRecord(_serialization.Model):
    """A TXT record.

    :ivar value: The text value of this TXT record.
    :vartype value: list[str]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[str]"},
    }

    def __init__(self, *, value: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword value: The text value of this TXT record.
        :paramtype value: list[str]
        """
        super().__init__(**kwargs)
        self.value = value


class VirtualNetworkLink(TrackedResource):
    """Describes a link to virtual network for a Private DNS zone.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.privatedns.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar etag: The ETag of the virtual network link.
    :vartype etag: str
    :ivar virtual_network: The reference of the virtual network.
    :vartype virtual_network: ~azure.mgmt.privatedns.models.SubResource
    :ivar registration_enabled: Is auto-registration of virtual machine records in the virtual
     network in the Private DNS zone enabled?.
    :vartype registration_enabled: bool
    :ivar resolution_policy: The resolution policy on the virtual network link. Only applicable for
     virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to
     'NxDomainRedirect', Azure DNS resolver falls back to public resolution if private dns query
     resolution results in non-existent domain response. Known values are: "Default" and
     "NxDomainRedirect".
    :vartype resolution_policy: str or ~azure.mgmt.privatedns.models.ResolutionPolicy
    :ivar virtual_network_link_state: The status of the virtual network link to the Private DNS
     zone. Possible values are 'InProgress' and 'Done'. This is a read-only property and any attempt
     to set this value will be ignored. Known values are: "InProgress" and "Completed".
    :vartype virtual_network_link_state: str or
     ~azure.mgmt.privatedns.models.VirtualNetworkLinkState
    :ivar provisioning_state: The provisioning state of the resource. This is a read-only property
     and any attempt to set this value will be ignored. Known values are: "Creating", "Updating",
     "Deleting", "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.privatedns.models.ProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "virtual_network_link_state": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "virtual_network": {"key": "properties.virtualNetwork", "type": "SubResource"},
        "registration_enabled": {"key": "properties.registrationEnabled", "type": "bool"},
        "resolution_policy": {"key": "properties.resolutionPolicy", "type": "str"},
        "virtual_network_link_state": {"key": "properties.virtualNetworkLinkState", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        etag: Optional[str] = None,
        virtual_network: Optional["_models.SubResource"] = None,
        registration_enabled: Optional[bool] = None,
        resolution_policy: Optional[Union[str, "_models.ResolutionPolicy"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword etag: The ETag of the virtual network link.
        :paramtype etag: str
        :keyword virtual_network: The reference of the virtual network.
        :paramtype virtual_network: ~azure.mgmt.privatedns.models.SubResource
        :keyword registration_enabled: Is auto-registration of virtual machine records in the virtual
         network in the Private DNS zone enabled?.
        :paramtype registration_enabled: bool
        :keyword resolution_policy: The resolution policy on the virtual network link. Only applicable
         for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to
         'NxDomainRedirect', Azure DNS resolver falls back to public resolution if private dns query
         resolution results in non-existent domain response. Known values are: "Default" and
         "NxDomainRedirect".
        :paramtype resolution_policy: str or ~azure.mgmt.privatedns.models.ResolutionPolicy
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.etag = etag
        self.virtual_network = virtual_network
        self.registration_enabled = registration_enabled
        self.resolution_policy = resolution_policy
        self.virtual_network_link_state: Optional[Union[str, "_models.VirtualNetworkLinkState"]] = None
        self.provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None


class VirtualNetworkLinkListResult(_serialization.Model):
    """The response of a VirtualNetworkLink list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The VirtualNetworkLink items on this page. Required.
    :vartype value: list[~azure.mgmt.privatedns.models.VirtualNetworkLink]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[VirtualNetworkLink]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.VirtualNetworkLink"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The VirtualNetworkLink items on this page. Required.
        :paramtype value: list[~azure.mgmt.privatedns.models.VirtualNetworkLink]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link
