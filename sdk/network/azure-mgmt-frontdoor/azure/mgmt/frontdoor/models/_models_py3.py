# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, TYPE_CHECKING, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class AzureAsyncOperationResult(msrest.serialization.Model):
    """The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.

    :ivar status: Status of the Azure async operation. Known values are: "InProgress", "Succeeded",
     "Failed".
    :vartype status: str or ~azure.mgmt.frontdoor.models.NetworkOperationStatus
    :ivar error:
    :vartype error: ~azure.mgmt.frontdoor.models.Error
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.NetworkOperationStatus"]] = None,
        error: Optional["_models.Error"] = None,
        **kwargs
    ):
        """
        :keyword status: Status of the Azure async operation. Known values are: "InProgress",
         "Succeeded", "Failed".
        :paramtype status: str or ~azure.mgmt.frontdoor.models.NetworkOperationStatus
        :keyword error:
        :paramtype error: ~azure.mgmt.frontdoor.models.Error
        """
        super(AzureAsyncOperationResult, self).__init__(**kwargs)
        self.status = status
        self.error = error


class CustomRule(msrest.serialization.Model):
    """Defines contents of a web application rule.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Describes the name of the rule.
    :vartype name: str
    :ivar priority: Required. Describes priority of the rule. Rules with a lower value will be
     evaluated before rules with a higher value.
    :vartype priority: int
    :ivar enabled_state: Describes if the custom rule is in enabled or disabled state. Defaults to
     Enabled if not specified. Known values are: "Disabled", "Enabled".
    :vartype enabled_state: str or ~azure.mgmt.frontdoor.models.CustomRuleEnabledState
    :ivar rule_type: Required. Describes type of rule. Known values are: "MatchRule",
     "RateLimitRule".
    :vartype rule_type: str or ~azure.mgmt.frontdoor.models.RuleType
    :ivar rate_limit_duration_in_minutes: Time window for resetting the rate limit count. Default
     is 1 minute.
    :vartype rate_limit_duration_in_minutes: int
    :ivar rate_limit_threshold: Number of allowed requests per client within the time window.
    :vartype rate_limit_threshold: int
    :ivar match_conditions: Required. List of match conditions.
    :vartype match_conditions: list[~azure.mgmt.frontdoor.models.MatchCondition]
    :ivar action: Required. Describes what action to be applied when rule matches. Known values
     are: "Allow", "Block", "Log", "Redirect".
    :vartype action: str or ~azure.mgmt.frontdoor.models.ActionType
    """

    _validation = {
        'name': {'max_length': 128, 'min_length': 0},
        'priority': {'required': True},
        'rule_type': {'required': True},
        'rate_limit_duration_in_minutes': {'maximum': 5, 'minimum': 0},
        'rate_limit_threshold': {'minimum': 0},
        'match_conditions': {'required': True},
        'action': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'enabled_state': {'key': 'enabledState', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'rate_limit_duration_in_minutes': {'key': 'rateLimitDurationInMinutes', 'type': 'int'},
        'rate_limit_threshold': {'key': 'rateLimitThreshold', 'type': 'int'},
        'match_conditions': {'key': 'matchConditions', 'type': '[MatchCondition]'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        priority: int,
        rule_type: Union[str, "_models.RuleType"],
        match_conditions: List["_models.MatchCondition"],
        action: Union[str, "_models.ActionType"],
        name: Optional[str] = None,
        enabled_state: Optional[Union[str, "_models.CustomRuleEnabledState"]] = None,
        rate_limit_duration_in_minutes: Optional[int] = None,
        rate_limit_threshold: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword name: Describes the name of the rule.
        :paramtype name: str
        :keyword priority: Required. Describes priority of the rule. Rules with a lower value will be
         evaluated before rules with a higher value.
        :paramtype priority: int
        :keyword enabled_state: Describes if the custom rule is in enabled or disabled state. Defaults
         to Enabled if not specified. Known values are: "Disabled", "Enabled".
        :paramtype enabled_state: str or ~azure.mgmt.frontdoor.models.CustomRuleEnabledState
        :keyword rule_type: Required. Describes type of rule. Known values are: "MatchRule",
         "RateLimitRule".
        :paramtype rule_type: str or ~azure.mgmt.frontdoor.models.RuleType
        :keyword rate_limit_duration_in_minutes: Time window for resetting the rate limit count.
         Default is 1 minute.
        :paramtype rate_limit_duration_in_minutes: int
        :keyword rate_limit_threshold: Number of allowed requests per client within the time window.
        :paramtype rate_limit_threshold: int
        :keyword match_conditions: Required. List of match conditions.
        :paramtype match_conditions: list[~azure.mgmt.frontdoor.models.MatchCondition]
        :keyword action: Required. Describes what action to be applied when rule matches. Known values
         are: "Allow", "Block", "Log", "Redirect".
        :paramtype action: str or ~azure.mgmt.frontdoor.models.ActionType
        """
        super(CustomRule, self).__init__(**kwargs)
        self.name = name
        self.priority = priority
        self.enabled_state = enabled_state
        self.rule_type = rule_type
        self.rate_limit_duration_in_minutes = rate_limit_duration_in_minutes
        self.rate_limit_threshold = rate_limit_threshold
        self.match_conditions = match_conditions
        self.action = action


class CustomRuleList(msrest.serialization.Model):
    """Defines contents of custom rules.

    :ivar rules: List of rules.
    :vartype rules: list[~azure.mgmt.frontdoor.models.CustomRule]
    """

    _attribute_map = {
        'rules': {'key': 'rules', 'type': '[CustomRule]'},
    }

    def __init__(
        self,
        *,
        rules: Optional[List["_models.CustomRule"]] = None,
        **kwargs
    ):
        """
        :keyword rules: List of rules.
        :paramtype rules: list[~azure.mgmt.frontdoor.models.CustomRule]
        """
        super(CustomRuleList, self).__init__(**kwargs)
        self.rules = rules


class Error(msrest.serialization.Model):
    """Error.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    :ivar target:
    :vartype target: str
    :ivar details:
    :vartype details: list[~azure.mgmt.frontdoor.models.ErrorDetails]
    :ivar inner_error:
    :vartype inner_error: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.ErrorDetails"]] = None,
        inner_error: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        :keyword target:
        :paramtype target: str
        :keyword details:
        :paramtype details: list[~azure.mgmt.frontdoor.models.ErrorDetails]
        :keyword inner_error:
        :paramtype inner_error: str
        """
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.inner_error = inner_error


class ErrorDetails(msrest.serialization.Model):
    """ErrorDetails.

    :ivar code:
    :vartype code: str
    :ivar target:
    :vartype target: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        target: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code:
        :paramtype code: str
        :keyword target:
        :paramtype target: str
        :keyword message:
        :paramtype message: str
        """
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.target = target
        self.message = message


class ErrorResponse(msrest.serialization.Model):
    """Error response indicates Front Door service is not able to process the incoming request. The reason is provided in the error message.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message indicating why the operation failed.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None


class FrontendEndpointLink(msrest.serialization.Model):
    """Defines the Resource ID for a Frontend Endpoint.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(FrontendEndpointLink, self).__init__(**kwargs)
        self.id = id


class ManagedRuleDefinition(msrest.serialization.Model):
    """Describes a managed rule definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar rule_id: Identifier for the managed rule.
    :vartype rule_id: str
    :ivar default_state: Describes the default state for the managed rule. Known values are:
     "Disabled", "Enabled".
    :vartype default_state: str or ~azure.mgmt.frontdoor.models.ManagedRuleEnabledState
    :ivar default_action: Describes the default action to be applied when the managed rule matches.
     Known values are: "Allow", "Block", "Log", "Redirect".
    :vartype default_action: str or ~azure.mgmt.frontdoor.models.ActionType
    :ivar description: Describes the functionality of the managed rule.
    :vartype description: str
    """

    _validation = {
        'rule_id': {'readonly': True},
        'default_state': {'readonly': True},
        'default_action': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'str'},
        'default_state': {'key': 'defaultState', 'type': 'str'},
        'default_action': {'key': 'defaultAction', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ManagedRuleDefinition, self).__init__(**kwargs)
        self.rule_id = None
        self.default_state = None
        self.default_action = None
        self.description = None


class ManagedRuleExclusion(msrest.serialization.Model):
    """Exclude variables from managed rule evaluation.

    All required parameters must be populated in order to send to Azure.

    :ivar match_variable: Required. The variable type to be excluded. Known values are:
     "RequestHeaderNames", "RequestCookieNames", "QueryStringArgNames", "RequestBodyPostArgNames",
     "RequestBodyJsonArgNames".
    :vartype match_variable: str or ~azure.mgmt.frontdoor.models.ManagedRuleExclusionMatchVariable
    :ivar selector_match_operator: Required. Comparison operator to apply to the selector when
     specifying which elements in the collection this exclusion applies to. Known values are:
     "Equals", "Contains", "StartsWith", "EndsWith", "EqualsAny".
    :vartype selector_match_operator: str or
     ~azure.mgmt.frontdoor.models.ManagedRuleExclusionSelectorMatchOperator
    :ivar selector: Required. Selector value for which elements in the collection this exclusion
     applies to.
    :vartype selector: str
    """

    _validation = {
        'match_variable': {'required': True},
        'selector_match_operator': {'required': True},
        'selector': {'required': True},
    }

    _attribute_map = {
        'match_variable': {'key': 'matchVariable', 'type': 'str'},
        'selector_match_operator': {'key': 'selectorMatchOperator', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        match_variable: Union[str, "_models.ManagedRuleExclusionMatchVariable"],
        selector_match_operator: Union[str, "_models.ManagedRuleExclusionSelectorMatchOperator"],
        selector: str,
        **kwargs
    ):
        """
        :keyword match_variable: Required. The variable type to be excluded. Known values are:
         "RequestHeaderNames", "RequestCookieNames", "QueryStringArgNames", "RequestBodyPostArgNames",
         "RequestBodyJsonArgNames".
        :paramtype match_variable: str or
         ~azure.mgmt.frontdoor.models.ManagedRuleExclusionMatchVariable
        :keyword selector_match_operator: Required. Comparison operator to apply to the selector when
         specifying which elements in the collection this exclusion applies to. Known values are:
         "Equals", "Contains", "StartsWith", "EndsWith", "EqualsAny".
        :paramtype selector_match_operator: str or
         ~azure.mgmt.frontdoor.models.ManagedRuleExclusionSelectorMatchOperator
        :keyword selector: Required. Selector value for which elements in the collection this exclusion
         applies to.
        :paramtype selector: str
        """
        super(ManagedRuleExclusion, self).__init__(**kwargs)
        self.match_variable = match_variable
        self.selector_match_operator = selector_match_operator
        self.selector = selector


class ManagedRuleGroupDefinition(msrest.serialization.Model):
    """Describes a managed rule group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar rule_group_name: Name of the managed rule group.
    :vartype rule_group_name: str
    :ivar description: Description of the managed rule group.
    :vartype description: str
    :ivar rules: List of rules within the managed rule group.
    :vartype rules: list[~azure.mgmt.frontdoor.models.ManagedRuleDefinition]
    """

    _validation = {
        'rule_group_name': {'readonly': True},
        'description': {'readonly': True},
        'rules': {'readonly': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[ManagedRuleDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ManagedRuleGroupDefinition, self).__init__(**kwargs)
        self.rule_group_name = None
        self.description = None
        self.rules = None


class ManagedRuleGroupOverride(msrest.serialization.Model):
    """Defines a managed rule group override setting.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_group_name: Required. Describes the managed rule group to override.
    :vartype rule_group_name: str
    :ivar exclusions: Describes the exclusions that are applied to all rules in the group.
    :vartype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
    :ivar rules: List of rules that will be disabled. If none specified, all rules in the group
     will be disabled.
    :vartype rules: list[~azure.mgmt.frontdoor.models.ManagedRuleOverride]
    """

    _validation = {
        'rule_group_name': {'required': True},
    }

    _attribute_map = {
        'rule_group_name': {'key': 'ruleGroupName', 'type': 'str'},
        'exclusions': {'key': 'exclusions', 'type': '[ManagedRuleExclusion]'},
        'rules': {'key': 'rules', 'type': '[ManagedRuleOverride]'},
    }

    def __init__(
        self,
        *,
        rule_group_name: str,
        exclusions: Optional[List["_models.ManagedRuleExclusion"]] = None,
        rules: Optional[List["_models.ManagedRuleOverride"]] = None,
        **kwargs
    ):
        """
        :keyword rule_group_name: Required. Describes the managed rule group to override.
        :paramtype rule_group_name: str
        :keyword exclusions: Describes the exclusions that are applied to all rules in the group.
        :paramtype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
        :keyword rules: List of rules that will be disabled. If none specified, all rules in the group
         will be disabled.
        :paramtype rules: list[~azure.mgmt.frontdoor.models.ManagedRuleOverride]
        """
        super(ManagedRuleGroupOverride, self).__init__(**kwargs)
        self.rule_group_name = rule_group_name
        self.exclusions = exclusions
        self.rules = rules


class ManagedRuleOverride(msrest.serialization.Model):
    """Defines a managed rule group override setting.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_id: Required. Identifier for the managed rule.
    :vartype rule_id: str
    :ivar enabled_state: Describes if the managed rule is in enabled or disabled state. Defaults to
     Disabled if not specified. Known values are: "Disabled", "Enabled".
    :vartype enabled_state: str or ~azure.mgmt.frontdoor.models.ManagedRuleEnabledState
    :ivar action: Describes the override action to be applied when rule matches. Known values are:
     "Allow", "Block", "Log", "Redirect".
    :vartype action: str or ~azure.mgmt.frontdoor.models.ActionType
    :ivar exclusions: Describes the exclusions that are applied to this specific rule.
    :vartype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
    """

    _validation = {
        'rule_id': {'required': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'str'},
        'enabled_state': {'key': 'enabledState', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'exclusions': {'key': 'exclusions', 'type': '[ManagedRuleExclusion]'},
    }

    def __init__(
        self,
        *,
        rule_id: str,
        enabled_state: Optional[Union[str, "_models.ManagedRuleEnabledState"]] = None,
        action: Optional[Union[str, "_models.ActionType"]] = None,
        exclusions: Optional[List["_models.ManagedRuleExclusion"]] = None,
        **kwargs
    ):
        """
        :keyword rule_id: Required. Identifier for the managed rule.
        :paramtype rule_id: str
        :keyword enabled_state: Describes if the managed rule is in enabled or disabled state. Defaults
         to Disabled if not specified. Known values are: "Disabled", "Enabled".
        :paramtype enabled_state: str or ~azure.mgmt.frontdoor.models.ManagedRuleEnabledState
        :keyword action: Describes the override action to be applied when rule matches. Known values
         are: "Allow", "Block", "Log", "Redirect".
        :paramtype action: str or ~azure.mgmt.frontdoor.models.ActionType
        :keyword exclusions: Describes the exclusions that are applied to this specific rule.
        :paramtype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
        """
        super(ManagedRuleOverride, self).__init__(**kwargs)
        self.rule_id = rule_id
        self.enabled_state = enabled_state
        self.action = action
        self.exclusions = exclusions


class ManagedRuleSet(msrest.serialization.Model):
    """Defines a managed rule set.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_set_type: Required. Defines the rule set type to use.
    :vartype rule_set_type: str
    :ivar rule_set_version: Required. Defines the version of the rule set to use.
    :vartype rule_set_version: str
    :ivar rule_set_action: Defines the rule set action. Known values are: "Block", "Log",
     "Redirect".
    :vartype rule_set_action: str or ~azure.mgmt.frontdoor.models.ManagedRuleSetActionType
    :ivar exclusions: Describes the exclusions that are applied to all rules in the set.
    :vartype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
    :ivar rule_group_overrides: Defines the rule group overrides to apply to the rule set.
    :vartype rule_group_overrides: list[~azure.mgmt.frontdoor.models.ManagedRuleGroupOverride]
    """

    _validation = {
        'rule_set_type': {'required': True},
        'rule_set_version': {'required': True},
    }

    _attribute_map = {
        'rule_set_type': {'key': 'ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'ruleSetVersion', 'type': 'str'},
        'rule_set_action': {'key': 'ruleSetAction', 'type': 'str'},
        'exclusions': {'key': 'exclusions', 'type': '[ManagedRuleExclusion]'},
        'rule_group_overrides': {'key': 'ruleGroupOverrides', 'type': '[ManagedRuleGroupOverride]'},
    }

    def __init__(
        self,
        *,
        rule_set_type: str,
        rule_set_version: str,
        rule_set_action: Optional[Union[str, "_models.ManagedRuleSetActionType"]] = None,
        exclusions: Optional[List["_models.ManagedRuleExclusion"]] = None,
        rule_group_overrides: Optional[List["_models.ManagedRuleGroupOverride"]] = None,
        **kwargs
    ):
        """
        :keyword rule_set_type: Required. Defines the rule set type to use.
        :paramtype rule_set_type: str
        :keyword rule_set_version: Required. Defines the version of the rule set to use.
        :paramtype rule_set_version: str
        :keyword rule_set_action: Defines the rule set action. Known values are: "Block", "Log",
         "Redirect".
        :paramtype rule_set_action: str or ~azure.mgmt.frontdoor.models.ManagedRuleSetActionType
        :keyword exclusions: Describes the exclusions that are applied to all rules in the set.
        :paramtype exclusions: list[~azure.mgmt.frontdoor.models.ManagedRuleExclusion]
        :keyword rule_group_overrides: Defines the rule group overrides to apply to the rule set.
        :paramtype rule_group_overrides: list[~azure.mgmt.frontdoor.models.ManagedRuleGroupOverride]
        """
        super(ManagedRuleSet, self).__init__(**kwargs)
        self.rule_set_type = rule_set_type
        self.rule_set_version = rule_set_version
        self.rule_set_action = rule_set_action
        self.exclusions = exclusions
        self.rule_group_overrides = rule_group_overrides


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class ManagedRuleSetDefinition(Resource):
    """Describes the a managed rule set definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: Provisioning state of the managed rule set.
    :vartype provisioning_state: str
    :ivar rule_set_id: Id of the managed rule set.
    :vartype rule_set_id: str
    :ivar rule_set_type: Type of the managed rule set.
    :vartype rule_set_type: str
    :ivar rule_set_version: Version of the managed rule set type.
    :vartype rule_set_version: str
    :ivar rule_groups: Rule groups of the managed rule set.
    :vartype rule_groups: list[~azure.mgmt.frontdoor.models.ManagedRuleGroupDefinition]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'rule_set_id': {'readonly': True},
        'rule_set_type': {'readonly': True},
        'rule_set_version': {'readonly': True},
        'rule_groups': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'rule_set_id': {'key': 'properties.ruleSetId', 'type': 'str'},
        'rule_set_type': {'key': 'properties.ruleSetType', 'type': 'str'},
        'rule_set_version': {'key': 'properties.ruleSetVersion', 'type': 'str'},
        'rule_groups': {'key': 'properties.ruleGroups', 'type': '[ManagedRuleGroupDefinition]'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ManagedRuleSetDefinition, self).__init__(location=location, tags=tags, **kwargs)
        self.provisioning_state = None
        self.rule_set_id = None
        self.rule_set_type = None
        self.rule_set_version = None
        self.rule_groups = None


class ManagedRuleSetDefinitionList(msrest.serialization.Model):
    """List of managed rule set definitions available for use in a policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of managed rule set definitions.
    :vartype value: list[~azure.mgmt.frontdoor.models.ManagedRuleSetDefinition]
    :ivar next_link: URL to retrieve next set of managed rule set definitions.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ManagedRuleSetDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword next_link: URL to retrieve next set of managed rule set definitions.
        :paramtype next_link: str
        """
        super(ManagedRuleSetDefinitionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class ManagedRuleSetList(msrest.serialization.Model):
    """Defines the list of managed rule sets for the policy.

    :ivar managed_rule_sets: List of rule sets.
    :vartype managed_rule_sets: list[~azure.mgmt.frontdoor.models.ManagedRuleSet]
    """

    _attribute_map = {
        'managed_rule_sets': {'key': 'managedRuleSets', 'type': '[ManagedRuleSet]'},
    }

    def __init__(
        self,
        *,
        managed_rule_sets: Optional[List["_models.ManagedRuleSet"]] = None,
        **kwargs
    ):
        """
        :keyword managed_rule_sets: List of rule sets.
        :paramtype managed_rule_sets: list[~azure.mgmt.frontdoor.models.ManagedRuleSet]
        """
        super(ManagedRuleSetList, self).__init__(**kwargs)
        self.managed_rule_sets = managed_rule_sets


class MatchCondition(msrest.serialization.Model):
    """Define a match condition.

    All required parameters must be populated in order to send to Azure.

    :ivar match_variable: Required. Request variable to compare with. Known values are:
     "RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader",
     "RequestBody", "Cookies", "SocketAddr".
    :vartype match_variable: str or ~azure.mgmt.frontdoor.models.MatchVariable
    :ivar selector: Match against a specific key from the QueryString, PostArgs, RequestHeader or
     Cookies variables. Default is null.
    :vartype selector: str
    :ivar operator: Required. Comparison type to use for matching with the variable value. Known
     values are: "Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan",
     "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith", "RegEx".
    :vartype operator: str or ~azure.mgmt.frontdoor.models.Operator
    :ivar negate_condition: Describes if the result of this condition should be negated.
    :vartype negate_condition: bool
    :ivar match_value: Required. List of possible match values.
    :vartype match_value: list[str]
    :ivar transforms: List of transforms.
    :vartype transforms: list[str or ~azure.mgmt.frontdoor.models.TransformType]
    """

    _validation = {
        'match_variable': {'required': True},
        'operator': {'required': True},
        'match_value': {'required': True},
    }

    _attribute_map = {
        'match_variable': {'key': 'matchVariable', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'str'},
        'negate_condition': {'key': 'negateCondition', 'type': 'bool'},
        'match_value': {'key': 'matchValue', 'type': '[str]'},
        'transforms': {'key': 'transforms', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        match_variable: Union[str, "_models.MatchVariable"],
        operator: Union[str, "_models.Operator"],
        match_value: List[str],
        selector: Optional[str] = None,
        negate_condition: Optional[bool] = None,
        transforms: Optional[List[Union[str, "_models.TransformType"]]] = None,
        **kwargs
    ):
        """
        :keyword match_variable: Required. Request variable to compare with. Known values are:
         "RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader",
         "RequestBody", "Cookies", "SocketAddr".
        :paramtype match_variable: str or ~azure.mgmt.frontdoor.models.MatchVariable
        :keyword selector: Match against a specific key from the QueryString, PostArgs, RequestHeader
         or Cookies variables. Default is null.
        :paramtype selector: str
        :keyword operator: Required. Comparison type to use for matching with the variable value. Known
         values are: "Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan",
         "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith", "RegEx".
        :paramtype operator: str or ~azure.mgmt.frontdoor.models.Operator
        :keyword negate_condition: Describes if the result of this condition should be negated.
        :paramtype negate_condition: bool
        :keyword match_value: Required. List of possible match values.
        :paramtype match_value: list[str]
        :keyword transforms: List of transforms.
        :paramtype transforms: list[str or ~azure.mgmt.frontdoor.models.TransformType]
        """
        super(MatchCondition, self).__init__(**kwargs)
        self.match_variable = match_variable
        self.selector = selector
        self.operator = operator
        self.negate_condition = negate_condition
        self.match_value = match_value
        self.transforms = transforms


class PolicySettings(msrest.serialization.Model):
    """Defines top-level WebApplicationFirewallPolicy configuration settings.

    :ivar enabled_state: Describes if the policy is in enabled or disabled state. Defaults to
     Enabled if not specified. Known values are: "Disabled", "Enabled".
    :vartype enabled_state: str or ~azure.mgmt.frontdoor.models.PolicyEnabledState
    :ivar mode: Describes if it is in detection mode or prevention mode at policy level. Known
     values are: "Prevention", "Detection".
    :vartype mode: str or ~azure.mgmt.frontdoor.models.PolicyMode
    :ivar redirect_url: If action type is redirect, this field represents redirect URL for the
     client.
    :vartype redirect_url: str
    :ivar custom_block_response_status_code: If the action type is block, customer can override the
     response status code.
    :vartype custom_block_response_status_code: int
    :ivar custom_block_response_body: If the action type is block, customer can override the
     response body. The body must be specified in base64 encoding.
    :vartype custom_block_response_body: str
    :ivar request_body_check: Describes if policy managed rules will inspect the request body
     content. Known values are: "Disabled", "Enabled".
    :vartype request_body_check: str or ~azure.mgmt.frontdoor.models.PolicyRequestBodyCheck
    """

    _validation = {
        'custom_block_response_body': {'pattern': r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$'},
    }

    _attribute_map = {
        'enabled_state': {'key': 'enabledState', 'type': 'str'},
        'mode': {'key': 'mode', 'type': 'str'},
        'redirect_url': {'key': 'redirectUrl', 'type': 'str'},
        'custom_block_response_status_code': {'key': 'customBlockResponseStatusCode', 'type': 'int'},
        'custom_block_response_body': {'key': 'customBlockResponseBody', 'type': 'str'},
        'request_body_check': {'key': 'requestBodyCheck', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled_state: Optional[Union[str, "_models.PolicyEnabledState"]] = None,
        mode: Optional[Union[str, "_models.PolicyMode"]] = None,
        redirect_url: Optional[str] = None,
        custom_block_response_status_code: Optional[int] = None,
        custom_block_response_body: Optional[str] = None,
        request_body_check: Optional[Union[str, "_models.PolicyRequestBodyCheck"]] = None,
        **kwargs
    ):
        """
        :keyword enabled_state: Describes if the policy is in enabled or disabled state. Defaults to
         Enabled if not specified. Known values are: "Disabled", "Enabled".
        :paramtype enabled_state: str or ~azure.mgmt.frontdoor.models.PolicyEnabledState
        :keyword mode: Describes if it is in detection mode or prevention mode at policy level. Known
         values are: "Prevention", "Detection".
        :paramtype mode: str or ~azure.mgmt.frontdoor.models.PolicyMode
        :keyword redirect_url: If action type is redirect, this field represents redirect URL for the
         client.
        :paramtype redirect_url: str
        :keyword custom_block_response_status_code: If the action type is block, customer can override
         the response status code.
        :paramtype custom_block_response_status_code: int
        :keyword custom_block_response_body: If the action type is block, customer can override the
         response body. The body must be specified in base64 encoding.
        :paramtype custom_block_response_body: str
        :keyword request_body_check: Describes if policy managed rules will inspect the request body
         content. Known values are: "Disabled", "Enabled".
        :paramtype request_body_check: str or ~azure.mgmt.frontdoor.models.PolicyRequestBodyCheck
        """
        super(PolicySettings, self).__init__(**kwargs)
        self.enabled_state = enabled_state
        self.mode = mode
        self.redirect_url = redirect_url
        self.custom_block_response_status_code = custom_block_response_status_code
        self.custom_block_response_body = custom_block_response_body
        self.request_body_check = request_body_check


class RoutingRuleLink(msrest.serialization.Model):
    """Defines the Resource ID for a Routing Rule.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(RoutingRuleLink, self).__init__(**kwargs)
        self.id = id


class SecurityPolicyLink(msrest.serialization.Model):
    """Defines the Resource ID for a Security Policy.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(SecurityPolicyLink, self).__init__(**kwargs)
        self.id = id


class Sku(msrest.serialization.Model):
    """The pricing tier of the web application firewall policy.

    :ivar name: Name of the pricing tier. Known values are: "Classic_AzureFrontDoor",
     "Standard_AzureFrontDoor", "Premium_AzureFrontDoor".
    :vartype name: str or ~azure.mgmt.frontdoor.models.SkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[Union[str, "_models.SkuName"]] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the pricing tier. Known values are: "Classic_AzureFrontDoor",
         "Standard_AzureFrontDoor", "Premium_AzureFrontDoor".
        :paramtype name: str or ~azure.mgmt.frontdoor.models.SkuName
        """
        super(Sku, self).__init__(**kwargs)
        self.name = name


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(SubResource, self).__init__(**kwargs)
        self.id = id


class TagsObject(msrest.serialization.Model):
    """Tags object for patch operations.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(TagsObject, self).__init__(**kwargs)
        self.tags = tags


class WebApplicationFirewallPolicy(Resource):
    """Defines web application firewall policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: Gets a unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar sku: The pricing tier of web application firewall policy. Defaults to
     Classic_AzureFrontDoor if not specified.
    :vartype sku: ~azure.mgmt.frontdoor.models.Sku
    :ivar policy_settings: Describes settings for the policy.
    :vartype policy_settings: ~azure.mgmt.frontdoor.models.PolicySettings
    :ivar custom_rules: Describes custom rules inside the policy.
    :vartype custom_rules: ~azure.mgmt.frontdoor.models.CustomRuleList
    :ivar managed_rules: Describes managed rules inside the policy.
    :vartype managed_rules: ~azure.mgmt.frontdoor.models.ManagedRuleSetList
    :ivar frontend_endpoint_links: Describes Frontend Endpoints associated with this Web
     Application Firewall policy.
    :vartype frontend_endpoint_links: list[~azure.mgmt.frontdoor.models.FrontendEndpointLink]
    :ivar routing_rule_links: Describes Routing Rules associated with this Web Application Firewall
     policy.
    :vartype routing_rule_links: list[~azure.mgmt.frontdoor.models.RoutingRuleLink]
    :ivar security_policy_links: Describes Security Policy associated with this Web Application
     Firewall policy.
    :vartype security_policy_links: list[~azure.mgmt.frontdoor.models.SecurityPolicyLink]
    :ivar provisioning_state: Provisioning state of the policy.
    :vartype provisioning_state: str
    :ivar resource_state: Resource status of the policy. Known values are: "Creating", "Enabling",
     "Enabled", "Disabling", "Disabled", "Deleting".
    :vartype resource_state: str or ~azure.mgmt.frontdoor.models.PolicyResourceState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'frontend_endpoint_links': {'readonly': True},
        'routing_rule_links': {'readonly': True},
        'security_policy_links': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'policy_settings': {'key': 'properties.policySettings', 'type': 'PolicySettings'},
        'custom_rules': {'key': 'properties.customRules', 'type': 'CustomRuleList'},
        'managed_rules': {'key': 'properties.managedRules', 'type': 'ManagedRuleSetList'},
        'frontend_endpoint_links': {'key': 'properties.frontendEndpointLinks', 'type': '[FrontendEndpointLink]'},
        'routing_rule_links': {'key': 'properties.routingRuleLinks', 'type': '[RoutingRuleLink]'},
        'security_policy_links': {'key': 'properties.securityPolicyLinks', 'type': '[SecurityPolicyLink]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_state': {'key': 'properties.resourceState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        etag: Optional[str] = None,
        sku: Optional["_models.Sku"] = None,
        policy_settings: Optional["_models.PolicySettings"] = None,
        custom_rules: Optional["_models.CustomRuleList"] = None,
        managed_rules: Optional["_models.ManagedRuleSetList"] = None,
        **kwargs
    ):
        """
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword etag: Gets a unique read-only string that changes whenever the resource is updated.
        :paramtype etag: str
        :keyword sku: The pricing tier of web application firewall policy. Defaults to
         Classic_AzureFrontDoor if not specified.
        :paramtype sku: ~azure.mgmt.frontdoor.models.Sku
        :keyword policy_settings: Describes settings for the policy.
        :paramtype policy_settings: ~azure.mgmt.frontdoor.models.PolicySettings
        :keyword custom_rules: Describes custom rules inside the policy.
        :paramtype custom_rules: ~azure.mgmt.frontdoor.models.CustomRuleList
        :keyword managed_rules: Describes managed rules inside the policy.
        :paramtype managed_rules: ~azure.mgmt.frontdoor.models.ManagedRuleSetList
        """
        super(WebApplicationFirewallPolicy, self).__init__(location=location, tags=tags, **kwargs)
        self.etag = etag
        self.sku = sku
        self.policy_settings = policy_settings
        self.custom_rules = custom_rules
        self.managed_rules = managed_rules
        self.frontend_endpoint_links = None
        self.routing_rule_links = None
        self.security_policy_links = None
        self.provisioning_state = None
        self.resource_state = None


class WebApplicationFirewallPolicyList(msrest.serialization.Model):
    """Defines a list of WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of WebApplicationFirewallPolicies within a resource group.
    :vartype value: list[~azure.mgmt.frontdoor.models.WebApplicationFirewallPolicy]
    :ivar next_link: URL to get the next set of WebApplicationFirewallPolicy objects if there are
     any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[WebApplicationFirewallPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword next_link: URL to get the next set of WebApplicationFirewallPolicy objects if there
         are any.
        :paramtype next_link: str
        """
        super(WebApplicationFirewallPolicyList, self).__init__(**kwargs)
        self.value = None
        self.next_link = next_link
