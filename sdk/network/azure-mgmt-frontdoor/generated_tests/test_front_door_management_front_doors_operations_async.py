# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.frontdoor.aio import FrontDoorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFrontDoorManagementFrontDoorsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(FrontDoorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_list(self, resource_group):
        response = self.client.front_doors.list(
            api_version="2021-06-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_list_by_resource_group(self, resource_group):
        response = self.client.front_doors.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2021-06-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_get(self, resource_group):
        response = await self.client.front_doors.get(
            resource_group_name=resource_group.name,
            front_door_name="str",
            api_version="2021-06-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.front_doors.begin_create_or_update(
                resource_group_name=resource_group.name,
                front_door_name="str",
                front_door_parameters={
                    "backendPools": [
                        {
                            "backends": [
                                {
                                    "address": "str",
                                    "backendHostHeader": "str",
                                    "enabledState": "str",
                                    "httpPort": 0,
                                    "httpsPort": 0,
                                    "priority": 0,
                                    "privateEndpointStatus": "str",
                                    "privateLinkAlias": "str",
                                    "privateLinkApprovalMessage": "str",
                                    "privateLinkLocation": "str",
                                    "privateLinkResourceId": "str",
                                    "weight": 0,
                                }
                            ],
                            "healthProbeSettings": {"id": "str"},
                            "id": "str",
                            "loadBalancingSettings": {"id": "str"},
                            "name": "str",
                            "resourceState": "str",
                            "type": "str",
                        }
                    ],
                    "backendPoolsSettings": {"enforceCertificateNameCheck": "Enabled", "sendRecvTimeoutSeconds": 0},
                    "cname": "str",
                    "enabledState": "str",
                    "extendedProperties": {"str": "str"},
                    "friendlyName": "str",
                    "frontdoorId": "str",
                    "frontendEndpoints": [
                        {
                            "customHttpsConfiguration": {
                                "certificateSource": "str",
                                "minimumTlsVersion": "str",
                                "protocolType": "str",
                                "certificateType": "str",
                                "secretName": "str",
                                "secretVersion": "str",
                                "vault": {"id": "str"},
                            },
                            "customHttpsProvisioningState": "str",
                            "customHttpsProvisioningSubstate": "str",
                            "hostName": "str",
                            "id": "str",
                            "name": "str",
                            "resourceState": "str",
                            "sessionAffinityEnabledState": "str",
                            "sessionAffinityTtlSeconds": 0,
                            "type": "str",
                            "webApplicationFirewallPolicyLink": {"id": "str"},
                        }
                    ],
                    "healthProbeSettings": [
                        {
                            "enabledState": "str",
                            "healthProbeMethod": "HEAD",
                            "id": "str",
                            "intervalInSeconds": 0,
                            "name": "str",
                            "path": "str",
                            "protocol": "str",
                            "resourceState": "str",
                            "type": "str",
                        }
                    ],
                    "id": "str",
                    "loadBalancingSettings": [
                        {
                            "additionalLatencyMilliseconds": 0,
                            "id": "str",
                            "name": "str",
                            "resourceState": "str",
                            "sampleSize": 0,
                            "successfulSamplesRequired": 0,
                            "type": "str",
                        }
                    ],
                    "location": "str",
                    "name": "str",
                    "provisioningState": "str",
                    "resourceState": "str",
                    "routingRules": [
                        {
                            "acceptedProtocols": ["str"],
                            "enabledState": "str",
                            "frontendEndpoints": [{"id": "str"}],
                            "id": "str",
                            "name": "str",
                            "patternsToMatch": ["str"],
                            "resourceState": "str",
                            "routeConfiguration": "route_configuration",
                            "rulesEngine": {"id": "str"},
                            "type": "str",
                            "webApplicationFirewallPolicyLink": {"id": "str"},
                        }
                    ],
                    "rulesEngines": [
                        {
                            "id": "str",
                            "name": "str",
                            "resourceState": "str",
                            "rules": [
                                {
                                    "action": {
                                        "requestHeaderActions": [
                                            {"headerActionType": "str", "headerName": "str", "value": "str"}
                                        ],
                                        "responseHeaderActions": [
                                            {"headerActionType": "str", "headerName": "str", "value": "str"}
                                        ],
                                        "routeConfigurationOverride": "route_configuration",
                                    },
                                    "name": "str",
                                    "priority": 0,
                                    "matchConditions": [
                                        {
                                            "rulesEngineMatchValue": ["str"],
                                            "rulesEngineMatchVariable": "str",
                                            "rulesEngineOperator": "str",
                                            "negateCondition": bool,
                                            "selector": "str",
                                            "transforms": ["str"],
                                        }
                                    ],
                                    "matchProcessingBehavior": "str",
                                }
                            ],
                            "type": "str",
                        }
                    ],
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_begin_delete(self, resource_group):
        response = await (
            await self.client.front_doors.begin_delete(
                resource_group_name=resource_group.name,
                front_door_name="str",
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_front_doors_validate_custom_domain(self, resource_group):
        response = await self.client.front_doors.validate_custom_domain(
            resource_group_name=resource_group.name,
            front_door_name="str",
            custom_domain_properties={"hostName": "str"},
            api_version="2021-06-01",
        )

        # please add some check logic here by yourself
        # ...
