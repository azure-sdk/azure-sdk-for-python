# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.frontdoor import FrontDoorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFrontDoorManagementRulesEnginesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(FrontDoorManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_rules_engines_list_by_front_door(self, resource_group):
        response = self.client.rules_engines.list_by_front_door(
            resource_group_name=resource_group.name,
            front_door_name="str",
            api_version="2021-06-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_rules_engines_get(self, resource_group):
        response = self.client.rules_engines.get(
            resource_group_name=resource_group.name,
            front_door_name="str",
            rules_engine_name="str",
            api_version="2021-06-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_rules_engines_begin_create_or_update(self, resource_group):
        response = self.client.rules_engines.begin_create_or_update(
            resource_group_name=resource_group.name,
            front_door_name="str",
            rules_engine_name="str",
            rules_engine_parameters={
                "id": "str",
                "name": "str",
                "resourceState": "str",
                "rules": [
                    {
                        "action": {
                            "requestHeaderActions": [{"headerActionType": "str", "headerName": "str", "value": "str"}],
                            "responseHeaderActions": [{"headerActionType": "str", "headerName": "str", "value": "str"}],
                            "routeConfigurationOverride": "route_configuration",
                        },
                        "name": "str",
                        "priority": 0,
                        "matchConditions": [
                            {
                                "rulesEngineMatchValue": ["str"],
                                "rulesEngineMatchVariable": "str",
                                "rulesEngineOperator": "str",
                                "negateCondition": bool,
                                "selector": "str",
                                "transforms": ["str"],
                            }
                        ],
                        "matchProcessingBehavior": "str",
                    }
                ],
                "type": "str",
            },
            api_version="2021-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_rules_engines_begin_delete(self, resource_group):
        response = self.client.rules_engines.begin_delete(
            resource_group_name=resource_group.name,
            front_door_name="str",
            rules_engine_name="str",
            api_version="2021-06-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
