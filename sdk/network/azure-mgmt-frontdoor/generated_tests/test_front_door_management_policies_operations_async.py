# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.frontdoor.aio import FrontDoorManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFrontDoorManagementPoliciesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(FrontDoorManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_list(self, resource_group):
        response = self.client.policies.list(
            resource_group_name=resource_group.name,
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_list_by_subscription(self, resource_group):
        response = self.client.policies.list_by_subscription(
            api_version="2025-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_get(self, resource_group):
        response = await self.client.policies.get(
            resource_group_name=resource_group.name,
            policy_name="str",
            api_version="2025-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.policies.begin_create_or_update(
                resource_group_name=resource_group.name,
                policy_name="str",
                parameters={
                    "customRules": {
                        "rules": [
                            {
                                "action": "str",
                                "matchConditions": [
                                    {
                                        "matchValue": ["str"],
                                        "matchVariable": "str",
                                        "operator": "str",
                                        "negateCondition": bool,
                                        "selector": "str",
                                        "transforms": ["str"],
                                    }
                                ],
                                "priority": 0,
                                "ruleType": "str",
                                "enabledState": "str",
                                "groupBy": [{"variableName": "str"}],
                                "name": "str",
                                "rateLimitDurationInMinutes": 0,
                                "rateLimitThreshold": 0,
                            }
                        ]
                    },
                    "etag": "str",
                    "frontendEndpointLinks": [{"id": "str"}],
                    "id": "str",
                    "location": "str",
                    "managedRules": {
                        "managedRuleSets": [
                            {
                                "ruleSetType": "str",
                                "ruleSetVersion": "str",
                                "exclusions": [
                                    {"matchVariable": "str", "selector": "str", "selectorMatchOperator": "str"}
                                ],
                                "ruleGroupOverrides": [
                                    {
                                        "ruleGroupName": "str",
                                        "exclusions": [
                                            {"matchVariable": "str", "selector": "str", "selectorMatchOperator": "str"}
                                        ],
                                        "rules": [
                                            {
                                                "ruleId": "str",
                                                "action": "str",
                                                "enabledState": "str",
                                                "exclusions": [
                                                    {
                                                        "matchVariable": "str",
                                                        "selector": "str",
                                                        "selectorMatchOperator": "str",
                                                    }
                                                ],
                                            }
                                        ],
                                    }
                                ],
                                "ruleSetAction": "str",
                            }
                        ]
                    },
                    "name": "str",
                    "policySettings": {
                        "captchaExpirationInMinutes": 0,
                        "customBlockResponseBody": "str",
                        "customBlockResponseStatusCode": 0,
                        "enabledState": "str",
                        "javascriptChallengeExpirationInMinutes": 0,
                        "mode": "str",
                        "redirectUrl": "str",
                        "requestBodyCheck": "str",
                        "scrubbingRules": [
                            {"matchVariable": "str", "selectorMatchOperator": "str", "selector": "str", "state": "str"}
                        ],
                        "state": "str",
                    },
                    "provisioningState": "str",
                    "resourceState": "str",
                    "routingRuleLinks": [{"id": "str"}],
                    "securityPolicyLinks": [{"id": "str"}],
                    "sku": {"name": "str"},
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_begin_update(self, resource_group):
        response = await (
            await self.client.policies.begin_update(
                resource_group_name=resource_group.name,
                policy_name="str",
                parameters={"tags": {"str": "str"}},
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_policies_begin_delete(self, resource_group):
        response = await (
            await self.client.policies.begin_delete(
                resource_group_name=resource_group.name,
                policy_name="str",
                api_version="2025-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
