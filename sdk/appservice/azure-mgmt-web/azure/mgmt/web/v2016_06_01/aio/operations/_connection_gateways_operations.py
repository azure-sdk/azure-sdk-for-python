# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._connection_gateways_operations import (
    build_create_or_update_request,
    build_delete_request,
    build_get_request,
    build_list_by_resource_group_request,
    build_list_request,
    build_update_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ConnectionGatewaysOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.web.v2016_06_01.aio.WebSiteManagementClient`'s
        :attr:`connection_gateways` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")
        self._api_version = input_args.pop(0) if input_args else kwargs.pop("api_version")

    @distributed_trace_async
    async def list(self, subscription_id: str, **kwargs: Any) -> _models.ConnectionGatewayDefinitionCollection:
        """Lists all of the connection gateways.

        Gets a list of gateways under a subscription.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :return: ConnectionGatewayDefinitionCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinitionCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.ConnectionGatewayDefinitionCollection] = kwargs.pop("cls", None)

        _request = build_list_request(
            subscription_id=subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ConnectionGatewayDefinitionCollection", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_by_resource_group(
        self, subscription_id: str, resource_group_name: str, **kwargs: Any
    ) -> _models.ConnectionGatewayDefinitionCollection:
        """Lists all of the connection gateways.

        Gets a list of gateways under a subscription and in a specific resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :return: ConnectionGatewayDefinitionCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinitionCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.ConnectionGatewayDefinitionCollection] = kwargs.pop("cls", None)

        _request = build_list_by_resource_group_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ConnectionGatewayDefinitionCollection", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get(
        self, subscription_id: str, resource_group_name: str, connection_gateway_name: str, **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Gets a specific gateway.

        Gets a specific gateway under a subscription and in a specific resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.ConnectionGatewayDefinition] = kwargs.pop("cls", None)

        _request = build_get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            connection_gateway_name=connection_gateway_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ConnectionGatewayDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: _models.ConnectionGatewayDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Replaces a specific gateway.

        Creates or updates a specific gateway for under a subscription and in a specific resource
        group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Required.
        :type connection_gateway: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Replaces a specific gateway.

        Creates or updates a specific gateway for under a subscription and in a specific resource
        group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Required.
        :type connection_gateway: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: Union[_models.ConnectionGatewayDefinition, IO[bytes]],
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Replaces a specific gateway.

        Creates or updates a specific gateway for under a subscription and in a specific resource
        group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Is either a ConnectionGatewayDefinition type
         or a IO[bytes] type. Required.
        :type connection_gateway: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition or
         IO[bytes]
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ConnectionGatewayDefinition] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(connection_gateway, (IOBase, bytes)):
            _content = connection_gateway
        else:
            _json = self._serialize.body(connection_gateway, "ConnectionGatewayDefinition")

        _request = build_create_or_update_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            connection_gateway_name=connection_gateway_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ConnectionGatewayDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: _models.ConnectionGatewayDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Updates a specific gateway.

        Updates a connection gateway's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Required.
        :type connection_gateway: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Updates a specific gateway.

        Updates a connection gateway's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Required.
        :type connection_gateway: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        connection_gateway_name: str,
        connection_gateway: Union[_models.ConnectionGatewayDefinition, IO[bytes]],
        **kwargs: Any
    ) -> _models.ConnectionGatewayDefinition:
        """Updates a specific gateway.

        Updates a connection gateway's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :param connection_gateway: The connection gateway. Is either a ConnectionGatewayDefinition type
         or a IO[bytes] type. Required.
        :type connection_gateway: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition or
         IO[bytes]
        :return: ConnectionGatewayDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.ConnectionGatewayDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ConnectionGatewayDefinition] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(connection_gateway, (IOBase, bytes)):
            _content = connection_gateway
        else:
            _json = self._serialize.body(connection_gateway, "ConnectionGatewayDefinition")

        _request = build_update_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            connection_gateway_name=connection_gateway_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ConnectionGatewayDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete(
        self, subscription_id: str, resource_group_name: str, connection_gateway_name: str, **kwargs: Any
    ) -> None:
        """Deletes a specific gateway.

        Deletes a specific gateway for under a subscription and in a specific resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param connection_gateway_name: The connection gateway name. Required.
        :type connection_gateway_name: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            connection_gateway_name=connection_gateway_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore
