# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from ..._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_list_request(
    subscription_id: str, *, top: Optional[int] = None, skiptoken: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.Web/customApis")
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if skiptoken is not None:
        _params["skiptoken"] = _SERIALIZER.query("skiptoken", skiptoken, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_list_by_resource_group_request(
    subscription_id: str,
    resource_group_name: str,
    *,
    top: Optional[int] = None,
    skiptoken: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "int")
    if skiptoken is not None:
        _params["skiptoken"] = _SERIALIZER.query("skiptoken", skiptoken, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_request(subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "apiName": _SERIALIZER.url("api_name", api_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_create_or_update_request(
    subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "apiName": _SERIALIZER.url("api_name", api_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_update_request(subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "apiName": _SERIALIZER.url("api_name", api_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_delete_request(subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any) -> HttpRequest:
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "apiName": _SERIALIZER.url("api_name", api_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, **kwargs)


def build_move_request(subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}/move",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "apiName": _SERIALIZER.url("api_name", api_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_list_wsdl_interfaces_request(subscription_id: str, location: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/listWsdlInterfaces",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "location": _SERIALIZER.url("location", location, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_extract_api_definition_from_wsdl_request(  # pylint: disable=name-too-long
    subscription_id: str, location: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2016-06-01"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/extractApiDefinitionFromWsdl",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "location": _SERIALIZER.url("location", location, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class CustomApisOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.web.v2016_06_01.WebSiteManagementClient`'s
        :attr:`custom_apis` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")
        self._api_version = input_args.pop(0) if input_args else kwargs.pop("api_version")

    @distributed_trace
    def list(
        self, subscription_id: str, top: Optional[int] = None, skiptoken: Optional[str] = None, **kwargs: Any
    ) -> _models.CustomApiDefinitionCollection:
        """List of custom APIs.

        Gets a list of all custom APIs for a subscription id.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param top: The number of items to be included in the result. Default value is None.
        :type top: int
        :param skiptoken: Skip Token. Default value is None.
        :type skiptoken: str
        :return: CustomApiDefinitionCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinitionCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.CustomApiDefinitionCollection] = kwargs.pop("cls", None)

        _request = build_list_request(
            subscription_id=subscription_id,
            top=top,
            skiptoken=skiptoken,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CustomApiDefinitionCollection", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_resource_group(
        self,
        subscription_id: str,
        resource_group_name: str,
        top: Optional[int] = None,
        skiptoken: Optional[str] = None,
        **kwargs: Any
    ) -> _models.CustomApiDefinitionCollection:
        """List of custom APIs.

        Gets a list of all custom APIs in a subscription for a specific resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param top: The number of items to be included in the result. Default value is None.
        :type top: int
        :param skiptoken: Skip Token. Default value is None.
        :type skiptoken: str
        :return: CustomApiDefinitionCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinitionCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.CustomApiDefinitionCollection] = kwargs.pop("cls", None)

        _request = build_list_by_resource_group_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            top=top,
            skiptoken=skiptoken,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CustomApiDefinitionCollection", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get(
        self, subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Get a custom API.

        Gets a custom API by name for a specific subscription and resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[_models.CustomApiDefinition] = kwargs.pop("cls", None)

        _request = build_get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_name=api_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CustomApiDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: _models.CustomApiDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Replaces an existing custom API.

        Creates or updates an existing custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Required.
        :type custom_api: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Replaces an existing custom API.

        Creates or updates an existing custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Required.
        :type custom_api: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: Union[_models.CustomApiDefinition, IO[bytes]],
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Replaces an existing custom API.

        Creates or updates an existing custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Is either a CustomApiDefinition type or a IO[bytes] type.
         Required.
        :type custom_api: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition or IO[bytes]
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CustomApiDefinition] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(custom_api, (IOBase, bytes)):
            _content = custom_api
        else:
            _json = self._serialize.body(custom_api, "CustomApiDefinition")

        _request = build_create_or_update_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_name=api_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CustomApiDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: _models.CustomApiDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Update an existing custom API.

        Updates an existing custom API's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Required.
        :type custom_api: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Update an existing custom API.

        Updates an existing custom API's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Required.
        :type custom_api: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api: Union[_models.CustomApiDefinition, IO[bytes]],
        **kwargs: Any
    ) -> _models.CustomApiDefinition:
        """Update an existing custom API.

        Updates an existing custom API's tags.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api: The custom API. Is either a CustomApiDefinition type or a IO[bytes] type.
         Required.
        :type custom_api: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition or IO[bytes]
        :return: CustomApiDefinition or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.CustomApiDefinition
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CustomApiDefinition] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(custom_api, (IOBase, bytes)):
            _content = custom_api
        else:
            _json = self._serialize.body(custom_api, "CustomApiDefinition")

        _request = build_update_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_name=api_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CustomApiDefinition", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, subscription_id: str, resource_group_name: str, api_name: str, **kwargs: Any
    ) -> None:
        """Delete a custom API.

        Deletes a custom API from the resource group.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_name=api_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def move(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api_reference: _models.CustomApiReference,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Moves the custom API.

        Moves a specific custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api_reference: The custom API reference. Required.
        :type custom_api_reference: ~azure.mgmt.web.v2016_06_01.models.CustomApiReference
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def move(
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api_reference: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Moves the custom API.

        Moves a specific custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api_reference: The custom API reference. Required.
        :type custom_api_reference: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def move(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        api_name: str,
        custom_api_reference: Union[_models.CustomApiReference, IO[bytes]],
        **kwargs: Any
    ) -> None:
        """Moves the custom API.

        Moves a specific custom API.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param resource_group_name: The resource group. Required.
        :type resource_group_name: str
        :param api_name: API name. Required.
        :type api_name: str
        :param custom_api_reference: The custom API reference. Is either a CustomApiReference type or a
         IO[bytes] type. Required.
        :type custom_api_reference: ~azure.mgmt.web.v2016_06_01.models.CustomApiReference or IO[bytes]
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(custom_api_reference, (IOBase, bytes)):
            _content = custom_api_reference
        else:
            _json = self._serialize.body(custom_api_reference, "CustomApiReference")

        _request = build_move_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            api_name=api_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def list_wsdl_interfaces(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: _models.WsdlDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WsdlServiceCollection:
        """Lists WSDL interfaces.

        This returns the list of interfaces in the WSDL.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Required.
        :type wsdl_definition: ~azure.mgmt.web.v2016_06_01.models.WsdlDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WsdlServiceCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.WsdlServiceCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def list_wsdl_interfaces(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.WsdlServiceCollection:
        """Lists WSDL interfaces.

        This returns the list of interfaces in the WSDL.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Required.
        :type wsdl_definition: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: WsdlServiceCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.WsdlServiceCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def list_wsdl_interfaces(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: Union[_models.WsdlDefinition, IO[bytes]],
        **kwargs: Any
    ) -> _models.WsdlServiceCollection:
        """Lists WSDL interfaces.

        This returns the list of interfaces in the WSDL.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Is either a WsdlDefinition type or a IO[bytes] type.
         Required.
        :type wsdl_definition: ~azure.mgmt.web.v2016_06_01.models.WsdlDefinition or IO[bytes]
        :return: WsdlServiceCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2016_06_01.models.WsdlServiceCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.WsdlServiceCollection] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(wsdl_definition, (IOBase, bytes)):
            _content = wsdl_definition
        else:
            _json = self._serialize.body(wsdl_definition, "WsdlDefinition")

        _request = build_list_wsdl_interfaces_request(
            subscription_id=subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("WsdlServiceCollection", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def extract_api_definition_from_wsdl(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: _models.WsdlDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Any:
        """Returns API definition from WSDL.

        Parses the specified WSDL and extracts the API definition.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Required.
        :type wsdl_definition: ~azure.mgmt.web.v2016_06_01.models.WsdlDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or the result of cls(response)
        :rtype: any
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def extract_api_definition_from_wsdl(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Any:
        """Returns API definition from WSDL.

        Parses the specified WSDL and extracts the API definition.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Required.
        :type wsdl_definition: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: any or the result of cls(response)
        :rtype: any
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def extract_api_definition_from_wsdl(
        self,
        subscription_id: str,
        location: str,
        wsdl_definition: Union[_models.WsdlDefinition, IO[bytes]],
        **kwargs: Any
    ) -> Any:
        """Returns API definition from WSDL.

        Parses the specified WSDL and extracts the API definition.

        :param subscription_id: Subscription Id. Required.
        :type subscription_id: str
        :param location: The location. Required.
        :type location: str
        :param wsdl_definition: WSDL definition. Is either a WsdlDefinition type or a IO[bytes] type.
         Required.
        :type wsdl_definition: ~azure.mgmt.web.v2016_06_01.models.WsdlDefinition or IO[bytes]
        :return: any or the result of cls(response)
        :rtype: any
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._api_version or "2016-06-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Any] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(wsdl_definition, (IOBase, bytes)):
            _content = wsdl_definition
        else:
            _json = self._serialize.body(wsdl_definition, "WsdlDefinition")

        _request = build_extract_api_definition_from_wsdl_request(
            subscription_id=subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("object", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
