# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._hci_flight_catalog_project_operations import (
    build_create_request,
    build_delete_request,
    build_get_request,
    build_solution_recommendations_request,
    build_update_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class HciFlightCatalogProjectOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.edgeorder.v2023_05_01_preview.aio.EdgeOrderManagementClient`'s
        :attr:`hci_flight_catalog_project` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")
        self._api_version = input_args.pop(0) if input_args else kwargs.pop("api_version")

    @distributed_trace_async
    async def get(self, catalog_name: str, location: str, project_name: str, **kwargs: Any) -> _models.ProjectResource:
        """Get a project.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-05-01-preview")
        )
        cls: ClsType[_models.ProjectResource] = kwargs.pop("cls", None)

        request = build_get_request(
            catalog_name=catalog_name,
            location=location,
            project_name=project_name,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ProjectResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {
        "url": "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
    }

    @overload
    async def create(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_resource: _models.ProjectResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Create a project. Existing project cannot be updated with this api and should instead be
        updated with the Update project
        API.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_resource: Project details from request body. Required.
        :type project_resource: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_resource: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Create a project. Existing project cannot be updated with this api and should instead be
        updated with the Update project
        API.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_resource: Project details from request body. Required.
        :type project_resource: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_resource: Union[_models.ProjectResource, IO],
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Create a project. Existing project cannot be updated with this api and should instead be
        updated with the Update project
        API.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_resource: Project details from request body. Is either a ProjectResource type or
         a IO type. Required.
        :type project_resource: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-05-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ProjectResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(project_resource, (IOBase, bytes)):
            _content = project_resource
        else:
            _json = self._serialize.body(project_resource, "ProjectResource")

        request = build_create_request(
            catalog_name=catalog_name,
            location=location,
            project_name=project_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize("ProjectResource", pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize("ProjectResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    create.metadata = {
        "url": "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
    }

    @overload
    async def update(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_update_parameter: _models.ProjectUpdateParameter,
        if_match: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Update the properties of an existing project.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_update_parameter: Project update parameters from request body. Required.
        :type project_update_parameter:
         ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectUpdateParameter
        :param if_match: Defines the If-Match condition. The patch will be performed only if the ETag
         of the project on the server matches this value. Default value is None.
        :type if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_update_parameter: IO,
        if_match: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Update the properties of an existing project.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_update_parameter: Project update parameters from request body. Required.
        :type project_update_parameter: IO
        :param if_match: Defines the If-Match condition. The patch will be performed only if the ETag
         of the project on the server matches this value. Default value is None.
        :type if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        catalog_name: str,
        location: str,
        project_name: str,
        project_update_parameter: Union[_models.ProjectUpdateParameter, IO],
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> _models.ProjectResource:
        """Update the properties of an existing project.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :param project_update_parameter: Project update parameters from request body. Is either a
         ProjectUpdateParameter type or a IO type. Required.
        :type project_update_parameter:
         ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectUpdateParameter or IO
        :param if_match: Defines the If-Match condition. The patch will be performed only if the ETag
         of the project on the server matches this value. Default value is None.
        :type if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProjectResource or the result of cls(response)
        :rtype: ~azure.mgmt.edgeorder.v2023_05_01_preview.models.ProjectResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-05-01-preview")
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ProjectResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(project_update_parameter, (IOBase, bytes)):
            _content = project_update_parameter
        else:
            _json = self._serialize.body(project_update_parameter, "ProjectUpdateParameter")

        request = build_update_request(
            catalog_name=catalog_name,
            location=location,
            project_name=project_name,
            if_match=if_match,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ProjectResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {
        "url": "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
    }

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, catalog_name: str, location: str, project_name: str, **kwargs: Any
    ) -> None:
        """Delete a project by id.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-05-01-preview")
        )
        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_request(
            catalog_name=catalog_name,
            location=location,
            project_name=project_name,
            api_version=api_version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {
        "url": "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}"
    }

    @distributed_trace_async
    async def solution_recommendations(
        self, catalog_name: str, location: str, project_name: str, **kwargs: Any
    ) -> List[_models.RecommendedSolution]:
        """Get solution recommendation for the Project.

        :param catalog_name: Name of HCI catalog resource. Required.
        :type catalog_name: str
        :param location: The name of Azure region. Required.
        :type location: str
        :param project_name: The name of the project Resource. project names must be between 3 and 72
         characters in length and use any alphanumeric and underscore only. Required.
        :type project_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of RecommendedSolution or the result of cls(response)
        :rtype: list[~azure.mgmt.edgeorder.v2023_05_01_preview.models.RecommendedSolution]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop(
            "api_version", _params.pop("api-version", self._api_version or "2023-05-01-preview")
        )
        cls: ClsType[List[_models.RecommendedSolution]] = kwargs.pop("cls", None)

        request = build_solution_recommendations_request(
            catalog_name=catalog_name,
            location=location,
            project_name=project_name,
            api_version=api_version,
            template_url=self.solution_recommendations.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("[RecommendedSolution]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    solution_recommendations.metadata = {
        "url": "/providers/Microsoft.EdgeOrder/hciFlightCatalog/{catalogName}/locations/{location}/projects/{projectName}/solutionRecommendations"
    }
