# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import BillingType

if TYPE_CHECKING:
    from .. import models as _models


class AdditionalConfiguration(_Model):
    """Additional Configuration details.

    :ivar hierarchy_information: Hierarchy of the product which uniquely identifies the
     configuration. Required.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar quantity: Quantity of the product. Required.
    :vartype quantity: int
    :ivar provisioning_details: List Provisioning Details for Devices in Additional Config.
    :vartype provisioning_details: list[~azure.mgmt.edgeorder.models.ProvisioningDetails]
    """

    hierarchy_information: "_models.HierarchyInformation" = rest_field(
        name="hierarchyInformation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hierarchy of the product which uniquely identifies the configuration. Required."""
    quantity: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Quantity of the product. Required."""
    provisioning_details: Optional[List["_models.ProvisioningDetails"]] = rest_field(
        name="provisioningDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """List Provisioning Details for Devices in Additional Config."""

    @overload
    def __init__(
        self,
        *,
        hierarchy_information: "_models.HierarchyInformation",
        quantity: int,
        provisioning_details: Optional[List["_models.ProvisioningDetails"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddressDetails(_Model):
    """Address details for an order item.

    :ivar forward_address: Customer address and contact details. Required.
    :vartype forward_address: ~azure.mgmt.edgeorder.models.AddressProperties
    :ivar return_address: Return shipping address.
    :vartype return_address: ~azure.mgmt.edgeorder.models.AddressProperties
    """

    forward_address: "_models.AddressProperties" = rest_field(
        name="forwardAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer address and contact details. Required."""
    return_address: Optional["_models.AddressProperties"] = rest_field(name="returnAddress", visibility=["read"])
    """Return shipping address."""

    @overload
    def __init__(
        self,
        *,
        forward_address: "_models.AddressProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddressProperties(_Model):
    """Address Properties.

    :ivar address_classification: Type of address based on its usage context. Known values are:
     "Shipping" and "Site".
    :vartype address_classification: str or ~azure.mgmt.edgeorder.models.AddressClassification
    :ivar shipping_address: Shipping details for the address.
    :vartype shipping_address: ~azure.mgmt.edgeorder.models.ShippingAddress
    :ivar contact_details: Contact details for the address.
    :vartype contact_details: ~azure.mgmt.edgeorder.models.ContactDetails
    :ivar address_validation_status: Status of address validation. Known values are: "Valid",
     "Invalid", and "Ambiguous".
    :vartype address_validation_status: str or ~azure.mgmt.edgeorder.models.AddressValidationStatus
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.edgeorder.models.ProvisioningState
    """

    address_classification: Optional[Union[str, "_models.AddressClassification"]] = rest_field(
        name="addressClassification", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of address based on its usage context. Known values are: \"Shipping\" and \"Site\"."""
    shipping_address: Optional["_models.ShippingAddress"] = rest_field(
        name="shippingAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Shipping details for the address."""
    contact_details: Optional["_models.ContactDetails"] = rest_field(
        name="contactDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Contact details for the address."""
    address_validation_status: Optional[Union[str, "_models.AddressValidationStatus"]] = rest_field(
        name="addressValidationStatus", visibility=["read"]
    )
    """Status of address validation. Known values are: \"Valid\", \"Invalid\", and \"Ambiguous\"."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"Succeeded\", \"Failed\", and
     \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        address_classification: Optional[Union[str, "_models.AddressClassification"]] = None,
        shipping_address: Optional["_models.ShippingAddress"] = None,
        contact_details: Optional["_models.ContactDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddressResource(TrackedResource):
    """Address Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of an address. Required.
    :vartype properties: ~azure.mgmt.edgeorder.models.AddressProperties
    """

    properties: "_models.AddressProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of an address. Required."""

    __flattened_items = [
        "address_classification",
        "shipping_address",
        "contact_details",
        "address_validation_status",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.AddressProperties",
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class AddressUpdateParameter(_Model):
    """The Address update parameters.

    :ivar properties: Properties of an address to be updated.
    :vartype properties: ~azure.mgmt.edgeorder.models.AddressUpdateProperties
    :ivar tags: The list of key value pairs that describe the resource. These tags can be used in
     viewing and grouping this resource (across resource groups).
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.AddressUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of an address to be updated."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of key value pairs that describe the resource. These tags can be used in viewing and
     grouping this resource (across resource groups)."""

    __flattened_items = ["shipping_address", "contact_details"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AddressUpdateProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class AddressUpdateProperties(_Model):
    """Address Update Properties.

    :ivar shipping_address: Shipping details for the address.
    :vartype shipping_address: ~azure.mgmt.edgeorder.models.ShippingAddress
    :ivar contact_details: Contact details for the address.
    :vartype contact_details: ~azure.mgmt.edgeorder.models.ContactDetails
    """

    shipping_address: Optional["_models.ShippingAddress"] = rest_field(
        name="shippingAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Shipping details for the address."""
    contact_details: Optional["_models.ContactDetails"] = rest_field(
        name="contactDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Contact details for the address."""

    @overload
    def __init__(
        self,
        *,
        shipping_address: Optional["_models.ShippingAddress"] = None,
        contact_details: Optional["_models.ContactDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AvailabilityInformation(_Model):
    """Availability information of a product system.

    :ivar availability_stage: Current availability stage of the product. Known values are:
     "Available", "Preview", "Signup", "Discoverable", "ComingSoon", "Unavailable", and
     "Deprecated".
    :vartype availability_stage: str or ~azure.mgmt.edgeorder.models.AvailabilityStage
    :ivar disabled_reason: Reason why the product is disabled. Known values are: "None", "Country",
     "Region", "Feature", "OfferType", "NoSubscriptionInfo", "NotAvailable", and "OutOfStock".
    :vartype disabled_reason: str or ~azure.mgmt.edgeorder.models.DisabledReason
    :ivar disabled_reason_message: Message for why the product is disabled.
    :vartype disabled_reason_message: str
    """

    availability_stage: Optional[Union[str, "_models.AvailabilityStage"]] = rest_field(
        name="availabilityStage", visibility=["read"]
    )
    """Current availability stage of the product. Known values are: \"Available\", \"Preview\",
     \"Signup\", \"Discoverable\", \"ComingSoon\", \"Unavailable\", and \"Deprecated\"."""
    disabled_reason: Optional[Union[str, "_models.DisabledReason"]] = rest_field(
        name="disabledReason", visibility=["read"]
    )
    """Reason why the product is disabled. Known values are: \"None\", \"Country\", \"Region\",
     \"Feature\", \"OfferType\", \"NoSubscriptionInfo\", \"NotAvailable\", and \"OutOfStock\"."""
    disabled_reason_message: Optional[str] = rest_field(name="disabledReasonMessage", visibility=["read"])
    """Message for why the product is disabled."""


class BasicInformation(_Model):
    """Basic information for any product system.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    """

    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Display Name for the product system."""
    description: Optional["_models.Description"] = rest_field(visibility=["read"])
    """Description related to the product system."""
    image_information: Optional[List["_models.ImageInformation"]] = rest_field(
        name="imageInformation", visibility=["read"]
    )
    """Image information for the product system."""
    cost_information: Optional["_models.CostInformation"] = rest_field(name="costInformation", visibility=["read"])
    """Cost information for the product system."""
    availability_information: Optional["_models.AvailabilityInformation"] = rest_field(
        name="availabilityInformation", visibility=["read"]
    )
    """Availability information of the product system."""
    hierarchy_information: Optional["_models.HierarchyInformation"] = rest_field(
        name="hierarchyInformation", visibility=["read"]
    )
    """Hierarchy information of a product."""
    fulfilled_by: Optional[Union[str, "_models.FulfillmentType"]] = rest_field(name="fulfilledBy", visibility=["read"])
    """The entity responsible for fulfillment of the item at the given hierarchy level. Known values
     are: \"Microsoft\" and \"External\"."""


class BillingMeterDetails(_Model):
    """Holds billing meter details for each type of billing.

    :ivar name: Represents Billing type name.
    :vartype name: str
    :ivar meter_details: Represents MeterDetails.
    :vartype meter_details: ~azure.mgmt.edgeorder.models.MeterDetails
    :ivar metering_type: Represents Metering type (eg one-time or recurrent). Known values are:
     "OneTime", "Recurring", and "Adhoc".
    :vartype metering_type: str or ~azure.mgmt.edgeorder.models.MeteringType
    :ivar frequency: Frequency of recurrence.
    :vartype frequency: str
    :ivar term_type_details: Represent Term Type details.
    :vartype term_type_details: ~azure.mgmt.edgeorder.models.TermTypeDetails
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Represents Billing type name."""
    meter_details: Optional["_models.MeterDetails"] = rest_field(name="meterDetails", visibility=["read"])
    """Represents MeterDetails."""
    metering_type: Optional[Union[str, "_models.MeteringType"]] = rest_field(name="meteringType", visibility=["read"])
    """Represents Metering type (eg one-time or recurrent). Known values are: \"OneTime\",
     \"Recurring\", and \"Adhoc\"."""
    frequency: Optional[str] = rest_field(visibility=["read"])
    """Frequency of recurrence."""
    term_type_details: Optional["_models.TermTypeDetails"] = rest_field(name="termTypeDetails", visibility=["read"])
    """Represent Term Type details."""


class CancellationReason(_Model):
    """Reason for cancellation.

    :ivar reason: Reason for cancellation. Required.
    :vartype reason: str
    """

    reason: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reason for cancellation. Required."""

    @overload
    def __init__(
        self,
        *,
        reason: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CategoryInformation(_Model):
    """Category related properties of a child configuration.

    :ivar category_name: Category name of the child configuration.
    :vartype category_name: str
    :ivar category_display_name: Category display name of the child configuration.
    :vartype category_display_name: str
    :ivar description: Description text for the category.
    :vartype description: str
    :ivar links: Links for the category.
    :vartype links: list[~azure.mgmt.edgeorder.models.Link]
    """

    category_name: Optional[str] = rest_field(
        name="categoryName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Category name of the child configuration."""
    category_display_name: Optional[str] = rest_field(
        name="categoryDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Category display name of the child configuration."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description text for the category."""
    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for the category."""

    @overload
    def __init__(
        self,
        *,
        category_name: Optional[str] = None,
        category_display_name: Optional[str] = None,
        description: Optional[str] = None,
        links: Optional[List["_models.Link"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChildConfiguration(_Model):
    """Child configuration object.

    :ivar properties: Properties of child configuration.
    :vartype properties: ~azure.mgmt.edgeorder.models.ChildConfigurationProperties
    """

    properties: Optional["_models.ChildConfigurationProperties"] = rest_field(visibility=["read"])
    """Properties of child configuration."""

    __flattened_items = [
        "child_configuration_type",
        "is_part_of_base_configuration",
        "minimum_quantity",
        "maximum_quantity",
        "specifications",
        "dimensions",
        "provisioning_support",
        "child_configuration_types",
        "grouped_child_configurations",
        "supported_term_commitment_durations",
        "filterable_properties",
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
    ]


class ChildConfigurationFilter(_Model):
    """Child configuration filter.

    :ivar hierarchy_informations: The list of child configuration hierarchy customer wants to
     filter for the given configuration.
    :vartype hierarchy_informations: list[~azure.mgmt.edgeorder.models.HierarchyInformation]
    :ivar child_configuration_types: Filter to fetch all child configurations belonging to the
     given list of configuration types.
    :vartype child_configuration_types: list[str or
     ~azure.mgmt.edgeorder.models.ChildConfigurationType]
    """

    hierarchy_informations: Optional[List["_models.HierarchyInformation"]] = rest_field(
        name="hierarchyInformations", visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of child configuration hierarchy customer wants to filter for the given configuration."""
    child_configuration_types: Optional[List[Union[str, "_models.ChildConfigurationType"]]] = rest_field(
        name="childConfigurationTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter to fetch all child configurations belonging to the given list of configuration types."""

    @overload
    def __init__(
        self,
        *,
        hierarchy_informations: Optional[List["_models.HierarchyInformation"]] = None,
        child_configuration_types: Optional[List[Union[str, "_models.ChildConfigurationType"]]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChildConfigurationProperties(_Model):
    """Properties of child configuration.

    :ivar child_configuration_type: Child configuration type. Known values are:
     "DeviceConfiguration" and "AdditionalConfiguration".
    :vartype child_configuration_type: str or ~azure.mgmt.edgeorder.models.ChildConfigurationType
    :ivar is_part_of_base_configuration: Flag to indicate if the child configuration is part of the
     base configuration, which means the customer need not pass this configuration in
     OptInAdditionalConfigurations while placing an order, it will be shipped by default.
    :vartype is_part_of_base_configuration: bool
    :ivar minimum_quantity: Minimum quantity a customer can order while choosing this
     configuration.
    :vartype minimum_quantity: int
    :ivar maximum_quantity: Maximum quantity a customer can order while choosing this
     configuration.
    :vartype maximum_quantity: int
    :ivar specifications: Specifications of the configuration.
    :vartype specifications: list[~azure.mgmt.edgeorder.models.Specification]
    :ivar dimensions: Dimensions of the configuration.
    :vartype dimensions: ~azure.mgmt.edgeorder.models.Dimensions
    :ivar provisioning_support: Determining nature of provisioning that the configuration supports.
     Known values are: "CloudBased" and "Manual".
    :vartype provisioning_support: str or ~azure.mgmt.edgeorder.models.ProvisioningSupport
    :ivar child_configuration_types: Different types of child configurations which exist for this
     configuration, these can be used to populate the child configuration filter.
    :vartype child_configuration_types: list[str or
     ~azure.mgmt.edgeorder.models.ChildConfigurationType]
    :ivar grouped_child_configurations: Child configurations present for the configuration after
     applying child configuration filter, grouped by the category name of the child configuration.
    :vartype grouped_child_configurations:
     list[~azure.mgmt.edgeorder.models.GroupedChildConfigurations]
    :ivar supported_term_commitment_durations: The Term Commitment Durations that are supported for
     a configuration.
    :vartype supported_term_commitment_durations: list[~datetime.timedelta]
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    """

    child_configuration_type: Optional[Union[str, "_models.ChildConfigurationType"]] = rest_field(
        name="childConfigurationType", visibility=["read"]
    )
    """Child configuration type. Known values are: \"DeviceConfiguration\" and
     \"AdditionalConfiguration\"."""
    is_part_of_base_configuration: Optional[bool] = rest_field(name="isPartOfBaseConfiguration", visibility=["read"])
    """Flag to indicate if the child configuration is part of the base configuration, which means the
     customer need not pass this configuration in OptInAdditionalConfigurations while placing an
     order, it will be shipped by default."""
    minimum_quantity: Optional[int] = rest_field(name="minimumQuantity", visibility=["read"])
    """Minimum quantity a customer can order while choosing this configuration."""
    maximum_quantity: Optional[int] = rest_field(name="maximumQuantity", visibility=["read"])
    """Maximum quantity a customer can order while choosing this configuration."""
    specifications: Optional[List["_models.Specification"]] = rest_field(visibility=["read"])
    """Specifications of the configuration."""
    dimensions: Optional["_models.Dimensions"] = rest_field(visibility=["read"])
    """Dimensions of the configuration."""
    provisioning_support: Optional[Union[str, "_models.ProvisioningSupport"]] = rest_field(
        name="provisioningSupport", visibility=["read"]
    )
    """Determining nature of provisioning that the configuration supports. Known values are:
     \"CloudBased\" and \"Manual\"."""
    child_configuration_types: Optional[List[Union[str, "_models.ChildConfigurationType"]]] = rest_field(
        name="childConfigurationTypes", visibility=["read"]
    )
    """Different types of child configurations which exist for this configuration, these can be used
     to populate the child configuration filter."""
    grouped_child_configurations: Optional[List["_models.GroupedChildConfigurations"]] = rest_field(
        name="groupedChildConfigurations", visibility=["read"]
    )
    """Child configurations present for the configuration after applying child configuration filter,
     grouped by the category name of the child configuration."""
    supported_term_commitment_durations: Optional[List[datetime.timedelta]] = rest_field(
        name="supportedTermCommitmentDurations", visibility=["read"]
    )
    """The Term Commitment Durations that are supported for a configuration."""
    filterable_properties: Optional[List["_models.FilterableProperty"]] = rest_field(
        name="filterableProperties", visibility=["read"]
    )
    """List of filters supported for a product."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Display Name for the product system."""
    description: Optional["_models.Description"] = rest_field(visibility=["read"])
    """Description related to the product system."""
    image_information: Optional[List["_models.ImageInformation"]] = rest_field(
        name="imageInformation", visibility=["read"]
    )
    """Image information for the product system."""
    cost_information: Optional["_models.CostInformation"] = rest_field(name="costInformation", visibility=["read"])
    """Cost information for the product system."""
    availability_information: Optional["_models.AvailabilityInformation"] = rest_field(
        name="availabilityInformation", visibility=["read"]
    )
    """Availability information of the product system."""
    hierarchy_information: Optional["_models.HierarchyInformation"] = rest_field(
        name="hierarchyInformation", visibility=["read"]
    )
    """Hierarchy information of a product."""
    fulfilled_by: Optional[Union[str, "_models.FulfillmentType"]] = rest_field(name="fulfilledBy", visibility=["read"])
    """The entity responsible for fulfillment of the item at the given hierarchy level. Known values
     are: \"Microsoft\" and \"External\"."""


class CommonProperties(BasicInformation):
    """Represents common properties across product hierarchy.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    """

    filterable_properties: Optional[List["_models.FilterableProperty"]] = rest_field(
        name="filterableProperties", visibility=["read"]
    )
    """List of filters supported for a product."""


class Configuration(_Model):
    """Configuration object.

    :ivar properties: Properties of configuration.
    :vartype properties: ~azure.mgmt.edgeorder.models.ConfigurationProperties
    """

    properties: Optional["_models.ConfigurationProperties"] = rest_field(visibility=["read"])
    """Properties of configuration."""

    __flattened_items = [
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
        "filterable_properties",
        "specifications",
        "dimensions",
        "provisioning_support",
        "child_configuration_types",
        "grouped_child_configurations",
        "supported_term_commitment_durations",
    ]


class ConfigurationDeviceDetails(_Model):
    """Device details for configuration.

    :ivar display_info: Display details of the product.
    :vartype display_info: ~azure.mgmt.edgeorder.models.DisplayInfo
    :ivar hierarchy_information: Hierarchy of the product which uniquely identifies the
     configuration.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar quantity: Quantity of the product.
    :vartype quantity: int
    :ivar identification_type: Identification type of the configuration. Known values are:
     "NotSupported" and "SerialNumber".
    :vartype identification_type: str or ~azure.mgmt.edgeorder.models.IdentificationType
    :ivar device_details: List of device details.
    :vartype device_details: list[~azure.mgmt.edgeorder.models.DeviceDetails]
    :ivar term_commitment_information: Term Commitment Information of the Device.
    :vartype term_commitment_information: ~azure.mgmt.edgeorder.models.TermCommitmentInformation
    """

    display_info: Optional["_models.DisplayInfo"] = rest_field(
        name="displayInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display details of the product."""
    hierarchy_information: Optional["_models.HierarchyInformation"] = rest_field(
        name="hierarchyInformation", visibility=["read"]
    )
    """Hierarchy of the product which uniquely identifies the configuration."""
    quantity: Optional[int] = rest_field(visibility=["read"])
    """Quantity of the product."""
    identification_type: Optional[Union[str, "_models.IdentificationType"]] = rest_field(
        name="identificationType", visibility=["read"]
    )
    """Identification type of the configuration. Known values are: \"NotSupported\" and
     \"SerialNumber\"."""
    device_details: Optional[List["_models.DeviceDetails"]] = rest_field(name="deviceDetails", visibility=["read"])
    """List of device details."""
    term_commitment_information: Optional["_models.TermCommitmentInformation"] = rest_field(
        name="termCommitmentInformation", visibility=["read"]
    )
    """Term Commitment Information of the Device."""

    @overload
    def __init__(
        self,
        *,
        display_info: Optional["_models.DisplayInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfigurationFilter(_Model):
    """Configuration filters.

    :ivar hierarchy_information: Product hierarchy information. Required.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar filterable_property: Filters specific to product.
    :vartype filterable_property: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar child_configuration_filter: Filter to fetch specific child configurations that exist in
     the configuration. This must be passed to either fetch a list of specific child configurations,
     or all child configurations of specific types of child configurations.
    :vartype child_configuration_filter: ~azure.mgmt.edgeorder.models.ChildConfigurationFilter
    """

    hierarchy_information: "_models.HierarchyInformation" = rest_field(
        name="hierarchyInformation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Product hierarchy information. Required."""
    filterable_property: Optional[List["_models.FilterableProperty"]] = rest_field(
        name="filterableProperty", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filters specific to product."""
    child_configuration_filter: Optional["_models.ChildConfigurationFilter"] = rest_field(
        name="childConfigurationFilter", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter to fetch specific child configurations that exist in the configuration. This must be
     passed to either fetch a list of specific child configurations, or all child configurations of
     specific types of child configurations."""

    @overload
    def __init__(
        self,
        *,
        hierarchy_information: "_models.HierarchyInformation",
        filterable_property: Optional[List["_models.FilterableProperty"]] = None,
        child_configuration_filter: Optional["_models.ChildConfigurationFilter"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfigurationProperties(CommonProperties):
    """Properties of configuration.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar specifications: Specifications of the configuration.
    :vartype specifications: list[~azure.mgmt.edgeorder.models.Specification]
    :ivar dimensions: Dimensions of the configuration.
    :vartype dimensions: ~azure.mgmt.edgeorder.models.Dimensions
    :ivar provisioning_support: Determining nature of provisioning that the configuration supports.
     Known values are: "CloudBased" and "Manual".
    :vartype provisioning_support: str or ~azure.mgmt.edgeorder.models.ProvisioningSupport
    :ivar child_configuration_types: Different types of child configurations which exist for this
     configuration, these can be used to populate the child configuration filter.
    :vartype child_configuration_types: list[str or
     ~azure.mgmt.edgeorder.models.ChildConfigurationType]
    :ivar grouped_child_configurations: Child configurations present for the configuration after
     applying child configuration filter, grouped by the category name of the child configuration.
    :vartype grouped_child_configurations:
     list[~azure.mgmt.edgeorder.models.GroupedChildConfigurations]
    :ivar supported_term_commitment_durations: The Term Commitment Durations that are supported for
     a configuration.
    :vartype supported_term_commitment_durations: list[~datetime.timedelta]
    """

    specifications: Optional[List["_models.Specification"]] = rest_field(visibility=["read"])
    """Specifications of the configuration."""
    dimensions: Optional["_models.Dimensions"] = rest_field(visibility=["read"])
    """Dimensions of the configuration."""
    provisioning_support: Optional[Union[str, "_models.ProvisioningSupport"]] = rest_field(
        name="provisioningSupport", visibility=["read"]
    )
    """Determining nature of provisioning that the configuration supports. Known values are:
     \"CloudBased\" and \"Manual\"."""
    child_configuration_types: Optional[List[Union[str, "_models.ChildConfigurationType"]]] = rest_field(
        name="childConfigurationTypes", visibility=["read"]
    )
    """Different types of child configurations which exist for this configuration, these can be used
     to populate the child configuration filter."""
    grouped_child_configurations: Optional[List["_models.GroupedChildConfigurations"]] = rest_field(
        name="groupedChildConfigurations", visibility=["read"]
    )
    """Child configurations present for the configuration after applying child configuration filter,
     grouped by the category name of the child configuration."""
    supported_term_commitment_durations: Optional[List[datetime.timedelta]] = rest_field(
        name="supportedTermCommitmentDurations", visibility=["read"]
    )
    """The Term Commitment Durations that are supported for a configuration."""


class ConfigurationsRequest(_Model):
    """Configuration request object.

    :ivar configuration_filter: Holds details about product hierarchy information and filterable
     property.
    :vartype configuration_filter: ~azure.mgmt.edgeorder.models.ConfigurationFilter
    :ivar customer_subscription_details: Customer subscription properties. Clients can display
     available products to unregistered customers by explicitly passing subscription details.
    :vartype customer_subscription_details:
     ~azure.mgmt.edgeorder.models.CustomerSubscriptionDetails
    """

    configuration_filter: Optional["_models.ConfigurationFilter"] = rest_field(
        name="configurationFilter", visibility=["read", "create", "update", "delete", "query"]
    )
    """Holds details about product hierarchy information and filterable property."""
    customer_subscription_details: Optional["_models.CustomerSubscriptionDetails"] = rest_field(
        name="customerSubscriptionDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer subscription properties. Clients can display available products to unregistered
     customers by explicitly passing subscription details."""

    @overload
    def __init__(
        self,
        *,
        configuration_filter: Optional["_models.ConfigurationFilter"] = None,
        customer_subscription_details: Optional["_models.CustomerSubscriptionDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContactDetails(_Model):
    """Contact Details.

    :ivar contact_name: Contact name of the person.
    :vartype contact_name: str
    :ivar phone: Phone number of the contact person.
    :vartype phone: str
    :ivar phone_extension: Phone extension number of the contact person.
    :vartype phone_extension: str
    :ivar mobile: Mobile number of the contact person.
    :vartype mobile: str
    :ivar email_list: List of Email-ids to be notified about job progress.
    :vartype email_list: list[str]
    """

    contact_name: Optional[str] = rest_field(
        name="contactName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Contact name of the person."""
    phone: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Phone number of the contact person."""
    phone_extension: Optional[str] = rest_field(
        name="phoneExtension", visibility=["read", "create", "update", "delete", "query"]
    )
    """Phone extension number of the contact person."""
    mobile: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Mobile number of the contact person."""
    email_list: Optional[List[str]] = rest_field(
        name="emailList", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Email-ids to be notified about job progress."""

    @overload
    def __init__(
        self,
        *,
        contact_name: Optional[str] = None,
        phone: Optional[str] = None,
        phone_extension: Optional[str] = None,
        mobile: Optional[str] = None,
        email_list: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CostInformation(_Model):
    """Cost information for the product system.

    :ivar billing_meter_details: Details on the various billing aspects for the product system.
    :vartype billing_meter_details: list[~azure.mgmt.edgeorder.models.BillingMeterDetails]
    :ivar billing_info_url: Default url to display billing information.
    :vartype billing_info_url: str
    """

    billing_meter_details: Optional[List["_models.BillingMeterDetails"]] = rest_field(
        name="billingMeterDetails", visibility=["read"]
    )
    """Details on the various billing aspects for the product system."""
    billing_info_url: Optional[str] = rest_field(name="billingInfoUrl", visibility=["read"])
    """Default url to display billing information."""


class CustomerSubscriptionDetails(_Model):
    """Holds Customer subscription details. Clients can display available products to unregistered
    customers by explicitly passing subscription details.

    :ivar registered_features: List of registered feature flags for subscription.
    :vartype registered_features:
     list[~azure.mgmt.edgeorder.models.CustomerSubscriptionRegisteredFeatures]
    :ivar location_placement_id: Location placement Id of a subscription.
    :vartype location_placement_id: str
    :ivar quota_id: Quota ID of a subscription. Required.
    :vartype quota_id: str
    """

    registered_features: Optional[List["_models.CustomerSubscriptionRegisteredFeatures"]] = rest_field(
        name="registeredFeatures", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of registered feature flags for subscription."""
    location_placement_id: Optional[str] = rest_field(
        name="locationPlacementId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Location placement Id of a subscription."""
    quota_id: str = rest_field(name="quotaId", visibility=["read", "create", "update", "delete", "query"])
    """Quota ID of a subscription. Required."""

    @overload
    def __init__(
        self,
        *,
        quota_id: str,
        registered_features: Optional[List["_models.CustomerSubscriptionRegisteredFeatures"]] = None,
        location_placement_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomerSubscriptionRegisteredFeatures(_Model):
    """Represents subscription registered features.

    :ivar name: Name of subscription registered feature.
    :vartype name: str
    :ivar state: State of subscription registered feature.
    :vartype state: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of subscription registered feature."""
    state: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """State of subscription registered feature."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        state: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Description(_Model):
    """Description related properties of a product system.

    :ivar description_type: Type of description. "Base"
    :vartype description_type: str or ~azure.mgmt.edgeorder.models.DescriptionType
    :ivar short_description: Short description of the product system.
    :vartype short_description: str
    :ivar long_description: Long description of the product system.
    :vartype long_description: str
    :ivar keywords: Keywords for the product system.
    :vartype keywords: list[str]
    :ivar attributes: Attributes for the product system.
    :vartype attributes: list[str]
    :ivar links: Links for the product system.
    :vartype links: list[~azure.mgmt.edgeorder.models.Link]
    """

    description_type: Optional[Union[str, "_models.DescriptionType"]] = rest_field(
        name="descriptionType", visibility=["read"]
    )
    """Type of description. \"Base\""""
    short_description: Optional[str] = rest_field(name="shortDescription", visibility=["read"])
    """Short description of the product system."""
    long_description: Optional[str] = rest_field(name="longDescription", visibility=["read"])
    """Long description of the product system."""
    keywords: Optional[List[str]] = rest_field(visibility=["read"])
    """Keywords for the product system."""
    attributes: Optional[List[str]] = rest_field(visibility=["read"])
    """Attributes for the product system."""
    links: Optional[List["_models.Link"]] = rest_field(visibility=["read"])
    """Links for the product system."""


class DeviceDetails(_Model):
    """Device details.

    :ivar serial_number: Device serial number.
    :vartype serial_number: str
    :ivar display_serial_number: Device serial number to be displayed.
    :vartype display_serial_number: str
    :ivar management_resource_id: Management Resource Id.
    :vartype management_resource_id: str
    :ivar management_resource_tenant_id: Management Resource Tenant ID.
    :vartype management_resource_tenant_id: str
    :ivar provisioning_support: Determining nature of provisioning that the configuration supports.
     Known values are: "CloudBased" and "Manual".
    :vartype provisioning_support: str or ~azure.mgmt.edgeorder.models.ProvisioningSupport
    :ivar provisioning_details: Provisioning Details for the device.
    :vartype provisioning_details: ~azure.mgmt.edgeorder.models.ProvisioningDetails
    """

    serial_number: Optional[str] = rest_field(name="serialNumber", visibility=["read"])
    """Device serial number."""
    display_serial_number: Optional[str] = rest_field(name="displaySerialNumber", visibility=["read"])
    """Device serial number to be displayed."""
    management_resource_id: Optional[str] = rest_field(name="managementResourceId", visibility=["read"])
    """Management Resource Id."""
    management_resource_tenant_id: Optional[str] = rest_field(name="managementResourceTenantId", visibility=["read"])
    """Management Resource Tenant ID."""
    provisioning_support: Optional[Union[str, "_models.ProvisioningSupport"]] = rest_field(
        name="provisioningSupport", visibility=["read"]
    )
    """Determining nature of provisioning that the configuration supports. Known values are:
     \"CloudBased\" and \"Manual\"."""
    provisioning_details: Optional["_models.ProvisioningDetails"] = rest_field(
        name="provisioningDetails", visibility=["read"]
    )
    """Provisioning Details for the device."""


class DevicePresenceVerificationDetails(_Model):
    """Proof of possession details.

    :ivar status: Proof of possession status. Known values are: "NotInitiated" and "Completed".
    :vartype status: str or ~azure.mgmt.edgeorder.models.DevicePresenceVerificationStatus
    :ivar message: Insights on current status.
    :vartype message: str
    """

    status: Optional[Union[str, "_models.DevicePresenceVerificationStatus"]] = rest_field(visibility=["read"])
    """Proof of possession status. Known values are: \"NotInitiated\" and \"Completed\"."""
    message: Optional[str] = rest_field(visibility=["read"])
    """Insights on current status."""


class Dimensions(_Model):
    """Dimensions of a configuration.

    :ivar length: Length of the device.
    :vartype length: float
    :ivar height: Height of the device.
    :vartype height: float
    :ivar width: Width of the device.
    :vartype width: float
    :ivar length_height_unit: Unit for the dimensions of length, height and width. Known values
     are: "IN" and "CM".
    :vartype length_height_unit: str or ~azure.mgmt.edgeorder.models.LengthHeightUnit
    :ivar weight: Weight of the device.
    :vartype weight: float
    :ivar depth: Depth of the device.
    :vartype depth: float
    :ivar weight_unit: Unit for the dimensions of weight. Known values are: "LBS" and "KGS".
    :vartype weight_unit: str or ~azure.mgmt.edgeorder.models.WeightMeasurementUnit
    """

    length: Optional[float] = rest_field(visibility=["read"])
    """Length of the device."""
    height: Optional[float] = rest_field(visibility=["read"])
    """Height of the device."""
    width: Optional[float] = rest_field(visibility=["read"])
    """Width of the device."""
    length_height_unit: Optional[Union[str, "_models.LengthHeightUnit"]] = rest_field(
        name="lengthHeightUnit", visibility=["read"]
    )
    """Unit for the dimensions of length, height and width. Known values are: \"IN\" and \"CM\"."""
    weight: Optional[float] = rest_field(visibility=["read"])
    """Weight of the device."""
    depth: Optional[float] = rest_field(visibility=["read"])
    """Depth of the device."""
    weight_unit: Optional[Union[str, "_models.WeightMeasurementUnit"]] = rest_field(
        name="weightUnit", visibility=["read"]
    )
    """Unit for the dimensions of weight. Known values are: \"LBS\" and \"KGS\"."""


class DisplayInfo(_Model):
    """Describes product display information.

    :ivar product_family_display_name: Product family display name.
    :vartype product_family_display_name: str
    :ivar configuration_display_name: Configuration display name.
    :vartype configuration_display_name: str
    """

    product_family_display_name: Optional[str] = rest_field(name="productFamilyDisplayName", visibility=["read"])
    """Product family display name."""
    configuration_display_name: Optional[str] = rest_field(name="configurationDisplayName", visibility=["read"])
    """Configuration display name."""


class EncryptionPreferences(_Model):
    """Preferences related to the double encryption.

    :ivar double_encryption_status: Double encryption status as entered by the customer. It is
     compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured. Known
     values are: "Disabled" and "Enabled".
    :vartype double_encryption_status: str or ~azure.mgmt.edgeorder.models.DoubleEncryptionStatus
    """

    double_encryption_status: Optional[Union[str, "_models.DoubleEncryptionStatus"]] = rest_field(
        name="doubleEncryptionStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Double encryption status as entered by the customer. It is compulsory to give this parameter if
     the 'Deny' or 'Disabled' policy is configured. Known values are: \"Disabled\" and \"Enabled\"."""

    @overload
    def __init__(
        self,
        *,
        double_encryption_status: Optional[Union[str, "_models.DoubleEncryptionStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.edgeorder.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.edgeorder.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.edgeorder.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterableProperty(_Model):
    """Different types of filters supported and its values.

    :ivar type: Type of product filter. Required. Known values are: "ShipToCountries" and
     "DoubleEncryptionStatus".
    :vartype type: str or ~azure.mgmt.edgeorder.models.SupportedFilterTypes
    :ivar supported_values: Values to be filtered. Required.
    :vartype supported_values: list[str]
    """

    type: Union[str, "_models.SupportedFilterTypes"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of product filter. Required. Known values are: \"ShipToCountries\" and
     \"DoubleEncryptionStatus\"."""
    supported_values: List[str] = rest_field(
        name="supportedValues", visibility=["read", "create", "update", "delete", "query"]
    )
    """Values to be filtered. Required."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.SupportedFilterTypes"],
        supported_values: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ForwardShippingDetails(_Model):
    """Forward shipment details.

    :ivar carrier_name: Name of the carrier.
    :vartype carrier_name: str
    :ivar carrier_display_name: Carrier Name for display purpose. Not to be used for any
     processing.
    :vartype carrier_display_name: str
    :ivar tracking_id: TrackingId of the package.
    :vartype tracking_id: str
    :ivar tracking_url: TrackingUrl of the package.
    :vartype tracking_url: str
    """

    carrier_name: Optional[str] = rest_field(name="carrierName", visibility=["read"])
    """Name of the carrier."""
    carrier_display_name: Optional[str] = rest_field(name="carrierDisplayName", visibility=["read"])
    """Carrier Name for display purpose. Not to be used for any processing."""
    tracking_id: Optional[str] = rest_field(name="trackingId", visibility=["read"])
    """TrackingId of the package."""
    tracking_url: Optional[str] = rest_field(name="trackingUrl", visibility=["read"])
    """TrackingUrl of the package."""


class GroupedChildConfigurations(_Model):
    """Grouped child configuration object.

    :ivar category_information: Category information.
    :vartype category_information: ~azure.mgmt.edgeorder.models.CategoryInformation
    :ivar child_configurations: List of child configurations.
    :vartype child_configurations: list[~azure.mgmt.edgeorder.models.ChildConfiguration]
    """

    category_information: Optional["_models.CategoryInformation"] = rest_field(
        name="categoryInformation", visibility=["read"]
    )
    """Category information."""
    child_configurations: Optional[List["_models.ChildConfiguration"]] = rest_field(
        name="childConfigurations", visibility=["read"]
    )
    """List of child configurations."""


class HierarchyInformation(_Model):
    """Holds details about product hierarchy information.

    :ivar product_family_name: Represents product family name that uniquely identifies product
     family.
    :vartype product_family_name: str
    :ivar product_line_name: Represents product line name that uniquely identifies product line.
    :vartype product_line_name: str
    :ivar product_name: Represents product name that uniquely identifies product.
    :vartype product_name: str
    :ivar configuration_name: Represents configuration name that uniquely identifies configuration.
    :vartype configuration_name: str
    :ivar configuration_id_display_name: Represents Model Display Name.
    :vartype configuration_id_display_name: str
    """

    product_family_name: Optional[str] = rest_field(
        name="productFamilyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents product family name that uniquely identifies product family."""
    product_line_name: Optional[str] = rest_field(
        name="productLineName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents product line name that uniquely identifies product line."""
    product_name: Optional[str] = rest_field(
        name="productName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents product name that uniquely identifies product."""
    configuration_name: Optional[str] = rest_field(
        name="configurationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents configuration name that uniquely identifies configuration."""
    configuration_id_display_name: Optional[str] = rest_field(
        name="configurationIdDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents Model Display Name."""

    @overload
    def __init__(
        self,
        *,
        product_family_name: Optional[str] = None,
        product_line_name: Optional[str] = None,
        product_name: Optional[str] = None,
        configuration_name: Optional[str] = None,
        configuration_id_display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageInformation(_Model):
    """Image for the product.

    :ivar image_type: Type of the image. Known values are: "MainImage", "BulletImage", and
     "GenericImage".
    :vartype image_type: str or ~azure.mgmt.edgeorder.models.ImageType
    :ivar image_url: Url of the image.
    :vartype image_url: str
    """

    image_type: Optional[Union[str, "_models.ImageType"]] = rest_field(name="imageType", visibility=["read"])
    """Type of the image. Known values are: \"MainImage\", \"BulletImage\", and \"GenericImage\"."""
    image_url: Optional[str] = rest_field(name="imageUrl", visibility=["read"])
    """Url of the image."""


class Link(_Model):
    """Returns link related to the product.

    :ivar link_type: Type of link. Known values are: "Generic", "TermsAndConditions",
     "Specification", "Documentation", "KnowMore", "SignUp", and "Discoverable".
    :vartype link_type: str or ~azure.mgmt.edgeorder.models.LinkType
    :ivar link_url: Url of the link.
    :vartype link_url: str
    """

    link_type: Optional[Union[str, "_models.LinkType"]] = rest_field(name="linkType", visibility=["read"])
    """Type of link. Known values are: \"Generic\", \"TermsAndConditions\", \"Specification\",
     \"Documentation\", \"KnowMore\", \"SignUp\", and \"Discoverable\"."""
    link_url: Optional[str] = rest_field(name="linkUrl", visibility=["read"])
    """Url of the link."""


class ManagementResourcePreferences(_Model):
    """Management resource preference to link device.

    :ivar preferred_management_resource_id: Customer preferred Management resource ARM ID.
    :vartype preferred_management_resource_id: str
    """

    preferred_management_resource_id: Optional[str] = rest_field(
        name="preferredManagementResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer preferred Management resource ARM ID."""

    @overload
    def __init__(
        self,
        *,
        preferred_management_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MeterDetails(_Model):
    """Holds details about billing type and its meter guids.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Pav2MeterDetails, PurchaseMeterDetails

    :ivar billing_type: Represents billing type. Required. Known values are: "Pav2" and "Purchase".
    :vartype billing_type: str or ~azure.mgmt.edgeorder.models.BillingType
    :ivar multiplier: Billing unit applicable for Pav2 billing.
    :vartype multiplier: float
    :ivar charging_type: Charging type. Known values are: "PerOrder" and "PerDevice".
    :vartype charging_type: str or ~azure.mgmt.edgeorder.models.ChargingType
    """

    __mapping__: Dict[str, _Model] = {}
    billing_type: str = rest_discriminator(
        name="billingType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents billing type. Required. Known values are: \"Pav2\" and \"Purchase\"."""
    multiplier: Optional[float] = rest_field(visibility=["read"])
    """Billing unit applicable for Pav2 billing."""
    charging_type: Optional[Union[str, "_models.ChargingType"]] = rest_field(name="chargingType", visibility=["read"])
    """Charging type. Known values are: \"PerOrder\" and \"PerDevice\"."""

    @overload
    def __init__(
        self,
        *,
        billing_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationPreference(_Model):
    """Notification preference for a job stage.

    :ivar stage_name: Name of the stage. Required. Known values are: "Shipped" and "Delivered".
    :vartype stage_name: str or ~azure.mgmt.edgeorder.models.NotificationStageName
    :ivar send_notification: Notification is required or not. Required.
    :vartype send_notification: bool
    """

    stage_name: Union[str, "_models.NotificationStageName"] = rest_field(
        name="stageName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the stage. Required. Known values are: \"Shipped\" and \"Delivered\"."""
    send_notification: bool = rest_field(
        name="sendNotification", visibility=["read", "create", "update", "delete", "query"]
    )
    """Notification is required or not. Required."""

    @overload
    def __init__(
        self,
        *,
        stage_name: Union[str, "_models.NotificationStageName"],
        send_notification: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OkResponse(_Model):
    """The request has succeeded."""


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.edgeorder.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.edgeorder.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.edgeorder.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OrderItemDetails(_Model):
    """Order item details.

    :ivar product_details: Represents product details. Required.
    :vartype product_details: ~azure.mgmt.edgeorder.models.ProductDetails
    :ivar order_item_type: Order item type. Required. Known values are: "Purchase", "Rental", and
     "External".
    :vartype order_item_type: str or ~azure.mgmt.edgeorder.models.OrderItemType
    :ivar order_item_mode: Defines the mode of the Order item. Known values are: "Default" and
     "DoNotFulfill".
    :vartype order_item_mode: str or ~azure.mgmt.edgeorder.models.OrderMode
    :ivar site_details: Site Related Details.
    :vartype site_details: ~azure.mgmt.edgeorder.models.SiteDetails
    :ivar current_stage: Current Order item Status.
    :vartype current_stage: ~azure.mgmt.edgeorder.models.StageDetails
    :ivar order_item_stage_history: Order item status history.
    :vartype order_item_stage_history: list[~azure.mgmt.edgeorder.models.StageDetails]
    :ivar preferences: Customer notification Preferences.
    :vartype preferences: ~azure.mgmt.edgeorder.models.Preferences
    :ivar forward_shipping_details: Forward Package Shipping details.
    :vartype forward_shipping_details: ~azure.mgmt.edgeorder.models.ForwardShippingDetails
    :ivar reverse_shipping_details: Reverse Package Shipping details.
    :vartype reverse_shipping_details: ~azure.mgmt.edgeorder.models.ReverseShippingDetails
    :ivar notification_email_list: Additional notification email list.
    :vartype notification_email_list: list[str]
    :ivar cancellation_reason: Cancellation reason.
    :vartype cancellation_reason: str
    :ivar cancellation_status: Describes whether the order item is cancellable or not. Known values
     are: "Cancellable", "CancellableWithFee", and "NotCancellable".
    :vartype cancellation_status: str or ~azure.mgmt.edgeorder.models.OrderItemCancellationEnum
    :ivar deletion_status: Describes whether the order item is deletable or not. Known values are:
     "Allowed" and "NotAllowed".
    :vartype deletion_status: str or ~azure.mgmt.edgeorder.models.ActionStatusEnum
    :ivar return_reason: Return reason.
    :vartype return_reason: str
    :ivar return_status: Describes whether the order item is returnable or not. Known values are:
     "Returnable", "ReturnableWithFee", and "NotReturnable".
    :vartype return_status: str or ~azure.mgmt.edgeorder.models.OrderItemReturnEnum
    :ivar management_rp_details_list: List of parent RP details supported for configuration.
    :vartype management_rp_details_list: list[~azure.mgmt.edgeorder.models.ResourceProviderDetails]
    :ivar error: Top level error for the job.
    :vartype error: ~azure.mgmt.edgeorder.models.ErrorDetail
    """

    product_details: "_models.ProductDetails" = rest_field(
        name="productDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents product details. Required."""
    order_item_type: Union[str, "_models.OrderItemType"] = rest_field(
        name="orderItemType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Order item type. Required. Known values are: \"Purchase\", \"Rental\", and \"External\"."""
    order_item_mode: Optional[Union[str, "_models.OrderMode"]] = rest_field(
        name="orderItemMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Defines the mode of the Order item. Known values are: \"Default\" and \"DoNotFulfill\"."""
    site_details: Optional["_models.SiteDetails"] = rest_field(
        name="siteDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Site Related Details."""
    current_stage: Optional["_models.StageDetails"] = rest_field(name="currentStage", visibility=["read"])
    """Current Order item Status."""
    order_item_stage_history: Optional[List["_models.StageDetails"]] = rest_field(
        name="orderItemStageHistory", visibility=["read"]
    )
    """Order item status history."""
    preferences: Optional["_models.Preferences"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer notification Preferences."""
    forward_shipping_details: Optional["_models.ForwardShippingDetails"] = rest_field(
        name="forwardShippingDetails", visibility=["read"]
    )
    """Forward Package Shipping details."""
    reverse_shipping_details: Optional["_models.ReverseShippingDetails"] = rest_field(
        name="reverseShippingDetails", visibility=["read"]
    )
    """Reverse Package Shipping details."""
    notification_email_list: Optional[List[str]] = rest_field(
        name="notificationEmailList", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional notification email list."""
    cancellation_reason: Optional[str] = rest_field(name="cancellationReason", visibility=["read"])
    """Cancellation reason."""
    cancellation_status: Optional[Union[str, "_models.OrderItemCancellationEnum"]] = rest_field(
        name="cancellationStatus", visibility=["read"]
    )
    """Describes whether the order item is cancellable or not. Known values are: \"Cancellable\",
     \"CancellableWithFee\", and \"NotCancellable\"."""
    deletion_status: Optional[Union[str, "_models.ActionStatusEnum"]] = rest_field(
        name="deletionStatus", visibility=["read"]
    )
    """Describes whether the order item is deletable or not. Known values are: \"Allowed\" and
     \"NotAllowed\"."""
    return_reason: Optional[str] = rest_field(name="returnReason", visibility=["read"])
    """Return reason."""
    return_status: Optional[Union[str, "_models.OrderItemReturnEnum"]] = rest_field(
        name="returnStatus", visibility=["read"]
    )
    """Describes whether the order item is returnable or not. Known values are: \"Returnable\",
     \"ReturnableWithFee\", and \"NotReturnable\"."""
    management_rp_details_list: Optional[List["_models.ResourceProviderDetails"]] = rest_field(
        name="managementRpDetailsList", visibility=["read"]
    )
    """List of parent RP details supported for configuration."""
    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Top level error for the job."""

    @overload
    def __init__(
        self,
        *,
        product_details: "_models.ProductDetails",
        order_item_type: Union[str, "_models.OrderItemType"],
        order_item_mode: Optional[Union[str, "_models.OrderMode"]] = None,
        site_details: Optional["_models.SiteDetails"] = None,
        preferences: Optional["_models.Preferences"] = None,
        notification_email_list: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrderItemDetailsUpdateParameter(_Model):
    """Order item details Patchable Properties.

    :ivar product_details: Represents product details.
    :vartype product_details: ~azure.mgmt.edgeorder.models.ProductDetailsUpdateParameter
    :ivar site_details: Site Related Details.
    :vartype site_details: ~azure.mgmt.edgeorder.models.SiteDetails
    """

    product_details: Optional["_models.ProductDetailsUpdateParameter"] = rest_field(
        name="productDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents product details."""
    site_details: Optional["_models.SiteDetails"] = rest_field(
        name="siteDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Site Related Details."""

    @overload
    def __init__(
        self,
        *,
        product_details: Optional["_models.ProductDetailsUpdateParameter"] = None,
        site_details: Optional["_models.SiteDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrderItemProperties(_Model):
    """Represents order item properties.

    :ivar order_item_details: Represents order item details. Required.
    :vartype order_item_details: ~azure.mgmt.edgeorder.models.OrderItemDetails
    :ivar address_details: Represents shipping and return address for order item.
    :vartype address_details: ~azure.mgmt.edgeorder.models.AddressDetails
    :ivar start_time: Start time of order item.
    :vartype start_time: ~datetime.datetime
    :ivar order_id: Id of the order to which order item belongs to. Required.
    :vartype order_id: str
    :ivar provisioning_state: Provisioning state. Known values are: "Creating", "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.edgeorder.models.ProvisioningState
    """

    order_item_details: "_models.OrderItemDetails" = rest_field(
        name="orderItemDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents order item details. Required."""
    address_details: Optional["_models.AddressDetails"] = rest_field(
        name="addressDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents shipping and return address for order item."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Start time of order item."""
    order_id: str = rest_field(name="orderId", visibility=["read", "create", "update", "delete", "query"])
    """Id of the order to which order item belongs to. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state. Known values are: \"Creating\", \"Succeeded\", \"Failed\", and
     \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        order_item_details: "_models.OrderItemDetails",
        order_id: str,
        address_details: Optional["_models.AddressDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrderItemResource(TrackedResource):
    """Represents order item resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Order item properties. Required.
    :vartype properties: ~azure.mgmt.edgeorder.models.OrderItemProperties
    :ivar identity: Msi identity of the resource.
    :vartype identity: ~azure.mgmt.edgeorder.models.ResourceIdentity
    """

    properties: "_models.OrderItemProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Order item properties. Required."""
    identity: Optional["_models.ResourceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Msi identity of the resource."""

    __flattened_items = ["order_item_details", "address_details", "start_time", "order_id", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.OrderItemProperties",
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OrderItemUpdateParameter(_Model):
    """Updates order item parameters.

    :ivar properties: Order item update properties.
    :vartype properties: ~azure.mgmt.edgeorder.models.OrderItemUpdateProperties
    :ivar tags: The list of key value pairs that describe the resource. These tags can be used in
     viewing and grouping this resource (across resource groups).
    :vartype tags: dict[str, str]
    :ivar identity: Msi identity of the resource.
    :vartype identity: ~azure.mgmt.edgeorder.models.ResourceIdentity
    """

    properties: Optional["_models.OrderItemUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Order item update properties."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of key value pairs that describe the resource. These tags can be used in viewing and
     grouping this resource (across resource groups)."""
    identity: Optional["_models.ResourceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Msi identity of the resource."""

    __flattened_items = ["forward_address", "preferences", "notification_email_list", "order_item_details"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.OrderItemUpdateProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OrderItemUpdateProperties(_Model):
    """Order item update properties.

    :ivar forward_address: Updates forward shipping address and contact details.
    :vartype forward_address: ~azure.mgmt.edgeorder.models.AddressProperties
    :ivar preferences: Customer preference.
    :vartype preferences: ~azure.mgmt.edgeorder.models.Preferences
    :ivar notification_email_list: Additional notification email list.
    :vartype notification_email_list: list[str]
    :ivar order_item_details: Represents order item details.
    :vartype order_item_details: ~azure.mgmt.edgeorder.models.OrderItemDetailsUpdateParameter
    """

    forward_address: Optional["_models.AddressProperties"] = rest_field(
        name="forwardAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Updates forward shipping address and contact details."""
    preferences: Optional["_models.Preferences"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer preference."""
    notification_email_list: Optional[List[str]] = rest_field(
        name="notificationEmailList", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional notification email list."""
    order_item_details: Optional["_models.OrderItemDetailsUpdateParameter"] = rest_field(
        name="orderItemDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents order item details."""

    @overload
    def __init__(
        self,
        *,
        forward_address: Optional["_models.AddressProperties"] = None,
        preferences: Optional["_models.Preferences"] = None,
        notification_email_list: Optional[List[str]] = None,
        order_item_details: Optional["_models.OrderItemDetailsUpdateParameter"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrderProperties(_Model):
    """Represents order details.

    :ivar order_item_ids: List of order item ARM Ids which are part of an order.
    :vartype order_item_ids: list[str]
    :ivar current_stage: Order current status.
    :vartype current_stage: ~azure.mgmt.edgeorder.models.StageDetails
    :ivar order_stage_history: Order status history.
    :vartype order_stage_history: list[~azure.mgmt.edgeorder.models.StageDetails]
    :ivar order_mode: Order mode. Known values are: "Default" and "DoNotFulfill".
    :vartype order_mode: str or ~azure.mgmt.edgeorder.models.OrderMode
    """

    order_item_ids: Optional[List[str]] = rest_field(name="orderItemIds", visibility=["read"])
    """List of order item ARM Ids which are part of an order."""
    current_stage: Optional["_models.StageDetails"] = rest_field(name="currentStage", visibility=["read"])
    """Order current status."""
    order_stage_history: Optional[List["_models.StageDetails"]] = rest_field(
        name="orderStageHistory", visibility=["read"]
    )
    """Order status history."""
    order_mode: Optional[Union[str, "_models.OrderMode"]] = rest_field(name="orderMode", visibility=["read"])
    """Order mode. Known values are: \"Default\" and \"DoNotFulfill\"."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    """


class OrderResource(ProxyResource):
    """Specifies the properties or parameters for an order. Order is a grouping of one or more order
    items.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.edgeorder.models.SystemData
    :ivar properties: Order properties. Required.
    :vartype properties: ~azure.mgmt.edgeorder.models.OrderProperties
    """

    properties: "_models.OrderProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Order properties. Required."""

    __flattened_items = ["order_item_ids", "current_stage", "order_stage_history", "order_mode"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.OrderProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Pav2MeterDetails(MeterDetails, discriminator="Pav2"):
    """Billing type PAV2 meter details.

    :ivar multiplier: Billing unit applicable for Pav2 billing.
    :vartype multiplier: float
    :ivar charging_type: Charging type. Known values are: "PerOrder" and "PerDevice".
    :vartype charging_type: str or ~azure.mgmt.edgeorder.models.ChargingType
    :ivar meter_guid: Validation status of requested data center and transport.
    :vartype meter_guid: str
    :ivar billing_type: Represents billing type. Required. PaV2 billing.
    :vartype billing_type: str or ~azure.mgmt.edgeorder.models.PAV2
    """

    meter_guid: Optional[str] = rest_field(name="meterGuid", visibility=["read"])
    """Validation status of requested data center and transport."""
    billing_type: Literal[BillingType.PAV2] = rest_discriminator(name="billingType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Represents billing type. Required. PaV2 billing."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, billing_type=BillingType.PAV2, **kwargs)


class Preferences(_Model):
    """Preferences related to the order.

    :ivar notification_preferences: Notification preferences.
    :vartype notification_preferences: list[~azure.mgmt.edgeorder.models.NotificationPreference]
    :ivar transport_preferences: Preferences related to the shipment logistics of the order.
    :vartype transport_preferences: ~azure.mgmt.edgeorder.models.TransportPreferences
    :ivar encryption_preferences: Preferences related to the Encryption.
    :vartype encryption_preferences: ~azure.mgmt.edgeorder.models.EncryptionPreferences
    :ivar management_resource_preferences: Preferences related to the Management resource.
    :vartype management_resource_preferences:
     ~azure.mgmt.edgeorder.models.ManagementResourcePreferences
    :ivar term_commitment_preferences: Preferences related to the Term commitment.
    :vartype term_commitment_preferences: ~azure.mgmt.edgeorder.models.TermCommitmentPreferences
    """

    notification_preferences: Optional[List["_models.NotificationPreference"]] = rest_field(
        name="notificationPreferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """Notification preferences."""
    transport_preferences: Optional["_models.TransportPreferences"] = rest_field(
        name="transportPreferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """Preferences related to the shipment logistics of the order."""
    encryption_preferences: Optional["_models.EncryptionPreferences"] = rest_field(
        name="encryptionPreferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """Preferences related to the Encryption."""
    management_resource_preferences: Optional["_models.ManagementResourcePreferences"] = rest_field(
        name="managementResourcePreferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """Preferences related to the Management resource."""
    term_commitment_preferences: Optional["_models.TermCommitmentPreferences"] = rest_field(
        name="termCommitmentPreferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """Preferences related to the Term commitment."""

    @overload
    def __init__(
        self,
        *,
        notification_preferences: Optional[List["_models.NotificationPreference"]] = None,
        transport_preferences: Optional["_models.TransportPreferences"] = None,
        encryption_preferences: Optional["_models.EncryptionPreferences"] = None,
        management_resource_preferences: Optional["_models.ManagementResourcePreferences"] = None,
        term_commitment_preferences: Optional["_models.TermCommitmentPreferences"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Product(_Model):
    """Represents a product.

    :ivar properties: Properties of product.
    :vartype properties: ~azure.mgmt.edgeorder.models.ProductProperties
    """

    properties: Optional["_models.ProductProperties"] = rest_field(visibility=["read"])
    """Properties of product."""

    __flattened_items = [
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
        "filterable_properties",
        "configurations",
    ]


class ProductDetails(_Model):
    """Represents product details.

    :ivar display_info: Display details of the product.
    :vartype display_info: ~azure.mgmt.edgeorder.models.DisplayInfo
    :ivar hierarchy_information: Hierarchy of the product which uniquely identifies the product.
     Required.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar product_double_encryption_status: Double encryption status of the configuration.
     Read-only field. Known values are: "Disabled" and "Enabled".
    :vartype product_double_encryption_status: str or
     ~azure.mgmt.edgeorder.models.DoubleEncryptionStatus
    :ivar identification_type: Identification type of the configuration. Known values are:
     "NotSupported" and "SerialNumber".
    :vartype identification_type: str or ~azure.mgmt.edgeorder.models.IdentificationType
    :ivar parent_device_details: Device details of the parent configuration.
    :vartype parent_device_details: ~azure.mgmt.edgeorder.models.DeviceDetails
    :ivar parent_provisioning_details: Device Provisioning Details for Parent.
    :vartype parent_provisioning_details: ~azure.mgmt.edgeorder.models.ProvisioningDetails
    :ivar opt_in_additional_configurations: List of additional configurations customer wants in the
     order item apart from the ones included in the base configuration.
    :vartype opt_in_additional_configurations:
     list[~azure.mgmt.edgeorder.models.AdditionalConfiguration]
    :ivar child_configuration_device_details: Details of all child configurations that are part of
     the order item.
    :vartype child_configuration_device_details:
     list[~azure.mgmt.edgeorder.models.ConfigurationDeviceDetails]
    :ivar term_commitment_information: Term Commitment Information of the Device.
    :vartype term_commitment_information: ~azure.mgmt.edgeorder.models.TermCommitmentInformation
    """

    display_info: Optional["_models.DisplayInfo"] = rest_field(
        name="displayInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display details of the product."""
    hierarchy_information: "_models.HierarchyInformation" = rest_field(
        name="hierarchyInformation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hierarchy of the product which uniquely identifies the product. Required."""
    product_double_encryption_status: Optional[Union[str, "_models.DoubleEncryptionStatus"]] = rest_field(
        name="productDoubleEncryptionStatus", visibility=["read"]
    )
    """Double encryption status of the configuration. Read-only field. Known values are: \"Disabled\"
     and \"Enabled\"."""
    identification_type: Optional[Union[str, "_models.IdentificationType"]] = rest_field(
        name="identificationType", visibility=["read"]
    )
    """Identification type of the configuration. Known values are: \"NotSupported\" and
     \"SerialNumber\"."""
    parent_device_details: Optional["_models.DeviceDetails"] = rest_field(
        name="parentDeviceDetails", visibility=["read"]
    )
    """Device details of the parent configuration."""
    parent_provisioning_details: Optional["_models.ProvisioningDetails"] = rest_field(
        name="parentProvisioningDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Device Provisioning Details for Parent."""
    opt_in_additional_configurations: Optional[List["_models.AdditionalConfiguration"]] = rest_field(
        name="optInAdditionalConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of additional configurations customer wants in the order item apart from the ones included
     in the base configuration."""
    child_configuration_device_details: Optional[List["_models.ConfigurationDeviceDetails"]] = rest_field(
        name="childConfigurationDeviceDetails", visibility=["read"]
    )
    """Details of all child configurations that are part of the order item."""
    term_commitment_information: Optional["_models.TermCommitmentInformation"] = rest_field(
        name="termCommitmentInformation", visibility=["read"]
    )
    """Term Commitment Information of the Device."""

    @overload
    def __init__(
        self,
        *,
        hierarchy_information: "_models.HierarchyInformation",
        display_info: Optional["_models.DisplayInfo"] = None,
        parent_provisioning_details: Optional["_models.ProvisioningDetails"] = None,
        opt_in_additional_configurations: Optional[List["_models.AdditionalConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProductDetailsUpdateParameter(_Model):
    """Represents product details patchable properties.

    :ivar parent_provisioning_details: Device Provisioning Details for Parent.
    :vartype parent_provisioning_details: ~azure.mgmt.edgeorder.models.ProvisioningDetails
    """

    parent_provisioning_details: Optional["_models.ProvisioningDetails"] = rest_field(
        name="parentProvisioningDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Device Provisioning Details for Parent."""

    @overload
    def __init__(
        self,
        *,
        parent_provisioning_details: Optional["_models.ProvisioningDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProductFamiliesMetadataDetails(_Model):
    """Product families metadata details.

    :ivar properties: Product family properties.
    :vartype properties: ~azure.mgmt.edgeorder.models.ProductFamilyProperties
    """

    properties: Optional["_models.ProductFamilyProperties"] = rest_field(visibility=["read"])
    """Product family properties."""

    __flattened_items = [
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
        "filterable_properties",
        "product_lines",
        "resource_provider_details",
    ]


class ProductFamiliesRequest(_Model):
    """The filters for showing the product families.

    :ivar filterable_properties: Dictionary of filterable properties on product family. Required.
    :vartype filterable_properties: dict[str,
     list[~azure.mgmt.edgeorder.models.FilterableProperty]]
    :ivar customer_subscription_details: Customer subscription properties. Clients can display
     available products to unregistered customers by explicitly passing subscription details.
    :vartype customer_subscription_details:
     ~azure.mgmt.edgeorder.models.CustomerSubscriptionDetails
    """

    filterable_properties: Dict[str, List["_models.FilterableProperty"]] = rest_field(
        name="filterableProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Dictionary of filterable properties on product family. Required."""
    customer_subscription_details: Optional["_models.CustomerSubscriptionDetails"] = rest_field(
        name="customerSubscriptionDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer subscription properties. Clients can display available products to unregistered
     customers by explicitly passing subscription details."""

    @overload
    def __init__(
        self,
        *,
        filterable_properties: Dict[str, List["_models.FilterableProperty"]],
        customer_subscription_details: Optional["_models.CustomerSubscriptionDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProductFamily(_Model):
    """Product Family.

    :ivar properties: Properties of product family.
    :vartype properties: ~azure.mgmt.edgeorder.models.ProductFamilyProperties
    """

    properties: Optional["_models.ProductFamilyProperties"] = rest_field(visibility=["read"])
    """Properties of product family."""

    __flattened_items = [
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
        "filterable_properties",
        "product_lines",
        "resource_provider_details",
    ]


class ProductFamilyProperties(CommonProperties):
    """Properties of product family.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar product_lines: List of product lines supported in the product family.
    :vartype product_lines: list[~azure.mgmt.edgeorder.models.ProductLine]
    :ivar resource_provider_details: Contains details related to resource provider.
    :vartype resource_provider_details: list[~azure.mgmt.edgeorder.models.ResourceProviderDetails]
    """

    product_lines: Optional[List["_models.ProductLine"]] = rest_field(name="productLines", visibility=["read"])
    """List of product lines supported in the product family."""
    resource_provider_details: Optional[List["_models.ResourceProviderDetails"]] = rest_field(
        name="resourceProviderDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Contains details related to resource provider."""

    @overload
    def __init__(
        self,
        *,
        resource_provider_details: Optional[List["_models.ResourceProviderDetails"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProductLine(_Model):
    """Product line.

    :ivar properties: Properties of product line.
    :vartype properties: ~azure.mgmt.edgeorder.models.ProductLineProperties
    """

    properties: Optional["_models.ProductLineProperties"] = rest_field(visibility=["read"])
    """Properties of product line."""

    __flattened_items = [
        "display_name",
        "description",
        "image_information",
        "cost_information",
        "availability_information",
        "hierarchy_information",
        "fulfilled_by",
        "filterable_properties",
        "products",
    ]


class ProductLineProperties(CommonProperties):
    """Properties of product line.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar products: List of products in the product line.
    :vartype products: list[~azure.mgmt.edgeorder.models.Product]
    """

    products: Optional[List["_models.Product"]] = rest_field(visibility=["read"])
    """List of products in the product line."""


class ProductProperties(CommonProperties):
    """Properties of product.

    :ivar display_name: Display Name for the product system.
    :vartype display_name: str
    :ivar description: Description related to the product system.
    :vartype description: ~azure.mgmt.edgeorder.models.Description
    :ivar image_information: Image information for the product system.
    :vartype image_information: list[~azure.mgmt.edgeorder.models.ImageInformation]
    :ivar cost_information: Cost information for the product system.
    :vartype cost_information: ~azure.mgmt.edgeorder.models.CostInformation
    :ivar availability_information: Availability information of the product system.
    :vartype availability_information: ~azure.mgmt.edgeorder.models.AvailabilityInformation
    :ivar hierarchy_information: Hierarchy information of a product.
    :vartype hierarchy_information: ~azure.mgmt.edgeorder.models.HierarchyInformation
    :ivar fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy
     level. Known values are: "Microsoft" and "External".
    :vartype fulfilled_by: str or ~azure.mgmt.edgeorder.models.FulfillmentType
    :ivar filterable_properties: List of filters supported for a product.
    :vartype filterable_properties: list[~azure.mgmt.edgeorder.models.FilterableProperty]
    :ivar configurations: List of configurations for the product.
    :vartype configurations: list[~azure.mgmt.edgeorder.models.Configuration]
    """

    configurations: Optional[List["_models.Configuration"]] = rest_field(visibility=["read"])
    """List of configurations for the product."""


class ProvisioningDetails(_Model):
    """Details Related To Provision Resource.

    :ivar quantity: Quantity of the devices.
    :vartype quantity: int
    :ivar provisioning_arm_id: Provisioning Resource Arm ID.
    :vartype provisioning_arm_id: str
    :ivar provisioning_end_point: Provisioning End Point.
    :vartype provisioning_end_point: str
    :ivar serial_number: Serial Number for the Device.
    :vartype serial_number: str
    :ivar vendor_name: Vendor Name for the Device , (for 1P devices - Microsoft).
    :vartype vendor_name: str
    :ivar ready_to_connect_arm_id: Arc Enabled Resource Arm id.
    :vartype ready_to_connect_arm_id: str
    :ivar management_resource_arm_id: Management Resource ArmId.
    :vartype management_resource_arm_id: str
    :ivar unique_device_identifier: Unique Identity for a Device.
    :vartype unique_device_identifier: str
    :ivar auto_provisioning_status: Auto Provisioning Details. Known values are: "Enabled" and
     "Disabled".
    :vartype auto_provisioning_status: str or ~azure.mgmt.edgeorder.models.AutoProvisioningStatus
    :ivar device_presence_verification: Proof of possession details.
    :vartype device_presence_verification:
     ~azure.mgmt.edgeorder.models.DevicePresenceVerificationDetails
    """

    quantity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Quantity of the devices."""
    provisioning_arm_id: Optional[str] = rest_field(
        name="provisioningArmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Provisioning Resource Arm ID."""
    provisioning_end_point: Optional[str] = rest_field(
        name="provisioningEndPoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Provisioning End Point."""
    serial_number: Optional[str] = rest_field(
        name="serialNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Serial Number for the Device."""
    vendor_name: Optional[str] = rest_field(
        name="vendorName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Vendor Name for the Device , (for 1P devices - Microsoft)."""
    ready_to_connect_arm_id: Optional[str] = rest_field(
        name="readyToConnectArmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Arc Enabled Resource Arm id."""
    management_resource_arm_id: Optional[str] = rest_field(
        name="managementResourceArmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Management Resource ArmId."""
    unique_device_identifier: Optional[str] = rest_field(name="uniqueDeviceIdentifier", visibility=["read"])
    """Unique Identity for a Device."""
    auto_provisioning_status: Optional[Union[str, "_models.AutoProvisioningStatus"]] = rest_field(
        name="autoProvisioningStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Auto Provisioning Details. Known values are: \"Enabled\" and \"Disabled\"."""
    device_presence_verification: Optional["_models.DevicePresenceVerificationDetails"] = rest_field(
        name="devicePresenceVerification", visibility=["read", "create", "update", "delete", "query"]
    )
    """Proof of possession details."""

    @overload
    def __init__(
        self,
        *,
        quantity: Optional[int] = None,
        provisioning_arm_id: Optional[str] = None,
        provisioning_end_point: Optional[str] = None,
        serial_number: Optional[str] = None,
        vendor_name: Optional[str] = None,
        ready_to_connect_arm_id: Optional[str] = None,
        management_resource_arm_id: Optional[str] = None,
        auto_provisioning_status: Optional[Union[str, "_models.AutoProvisioningStatus"]] = None,
        device_presence_verification: Optional["_models.DevicePresenceVerificationDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PurchaseMeterDetails(MeterDetails, discriminator="Purchase"):
    """Billing type Purchase meter details.

    :ivar multiplier: Billing unit applicable for Pav2 billing.
    :vartype multiplier: float
    :ivar charging_type: Charging type. Known values are: "PerOrder" and "PerDevice".
    :vartype charging_type: str or ~azure.mgmt.edgeorder.models.ChargingType
    :ivar product_id: Product Id.
    :vartype product_id: str
    :ivar sku_id: Sku Id.
    :vartype sku_id: str
    :ivar term_id: Term Id.
    :vartype term_id: str
    :ivar billing_type: Represents billing type. Required. Purchase billing.
    :vartype billing_type: str or ~azure.mgmt.edgeorder.models.PURCHASE
    """

    product_id: Optional[str] = rest_field(name="productId", visibility=["read"])
    """Product Id."""
    sku_id: Optional[str] = rest_field(name="skuId", visibility=["read"])
    """Sku Id."""
    term_id: Optional[str] = rest_field(name="termId", visibility=["read"])
    """Term Id."""
    billing_type: Literal[BillingType.PURCHASE] = rest_discriminator(name="billingType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Represents billing type. Required. Purchase billing."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, billing_type=BillingType.PURCHASE, **kwargs)


class ResourceIdentity(_Model):
    """Msi identity details of the resource.

    :ivar type: Identity type.
    :vartype type: str
    :ivar principal_id: Service Principal Id backing the Msi.
    :vartype principal_id: str
    :ivar tenant_id: Home Tenant Id.
    :vartype tenant_id: str
    :ivar user_assigned_identities: User Assigned Identities.
    :vartype user_assigned_identities: dict[str, ~azure.mgmt.edgeorder.models.UserAssignedIdentity]
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Identity type."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """Service Principal Id backing the Msi."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """Home Tenant Id."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """User Assigned Identities."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceProviderDetails(_Model):
    """Management RP details.

    :ivar resource_provider_namespace: Resource provider namespace.
    :vartype resource_provider_namespace: str
    """

    resource_provider_namespace: Optional[str] = rest_field(name="resourceProviderNamespace", visibility=["read"])
    """Resource provider namespace."""


class ReturnOrderItemDetails(_Model):
    """Return order item request body.

    :ivar return_address: Customer return address.
    :vartype return_address: ~azure.mgmt.edgeorder.models.AddressProperties
    :ivar return_reason: Return Reason. Required.
    :vartype return_reason: str
    :ivar service_tag: Service tag (located on the bottom-right corner of the device).
    :vartype service_tag: str
    :ivar shipping_box_required: Shipping Box required.
    :vartype shipping_box_required: bool
    """

    return_address: Optional["_models.AddressProperties"] = rest_field(
        name="returnAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer return address."""
    return_reason: str = rest_field(name="returnReason", visibility=["read", "create", "update", "delete", "query"])
    """Return Reason. Required."""
    service_tag: Optional[str] = rest_field(
        name="serviceTag", visibility=["read", "create", "update", "delete", "query"]
    )
    """Service tag (located on the bottom-right corner of the device)."""
    shipping_box_required: Optional[bool] = rest_field(
        name="shippingBoxRequired", visibility=["read", "create", "update", "delete", "query"]
    )
    """Shipping Box required."""

    @overload
    def __init__(
        self,
        *,
        return_reason: str,
        return_address: Optional["_models.AddressProperties"] = None,
        service_tag: Optional[str] = None,
        shipping_box_required: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReverseShippingDetails(_Model):
    """Reverse shipment details.

    :ivar sas_key_for_label: SAS key to download the reverse shipment label of the package.
    :vartype sas_key_for_label: str
    :ivar carrier_name: Name of the carrier.
    :vartype carrier_name: str
    :ivar carrier_display_name: Carrier Name for display purpose. Not to be used for any
     processing.
    :vartype carrier_display_name: str
    :ivar tracking_id: TrackingId of the package.
    :vartype tracking_id: str
    :ivar tracking_url: TrackingUrl of the package.
    :vartype tracking_url: str
    """

    sas_key_for_label: Optional[str] = rest_field(name="sasKeyForLabel", visibility=["read"])
    """SAS key to download the reverse shipment label of the package."""
    carrier_name: Optional[str] = rest_field(name="carrierName", visibility=["read"])
    """Name of the carrier."""
    carrier_display_name: Optional[str] = rest_field(name="carrierDisplayName", visibility=["read"])
    """Carrier Name for display purpose. Not to be used for any processing."""
    tracking_id: Optional[str] = rest_field(name="trackingId", visibility=["read"])
    """TrackingId of the package."""
    tracking_url: Optional[str] = rest_field(name="trackingUrl", visibility=["read"])
    """TrackingUrl of the package."""


class ShippingAddress(_Model):
    """Shipping address where customer wishes to receive the device.

    :ivar street_address1: Street Address line 1.
    :vartype street_address1: str
    :ivar street_address2: Street Address line 2.
    :vartype street_address2: str
    :ivar street_address3: Street Address line 3.
    :vartype street_address3: str
    :ivar city: Name of the City.
    :vartype city: str
    :ivar state_or_province: Name of the State or Province.
    :vartype state_or_province: str
    :ivar country: Name of the Country. Required.
    :vartype country: str
    :ivar postal_code: Postal code.
    :vartype postal_code: str
    :ivar zip_extended_code: Extended Zip Code.
    :vartype zip_extended_code: str
    :ivar company_name: Name of the company.
    :vartype company_name: str
    :ivar address_type: Type of address. Known values are: "None", "Residential", and "Commercial".
    :vartype address_type: str or ~azure.mgmt.edgeorder.models.AddressType
    """

    street_address1: Optional[str] = rest_field(
        name="streetAddress1", visibility=["read", "create", "update", "delete", "query"]
    )
    """Street Address line 1."""
    street_address2: Optional[str] = rest_field(
        name="streetAddress2", visibility=["read", "create", "update", "delete", "query"]
    )
    """Street Address line 2."""
    street_address3: Optional[str] = rest_field(
        name="streetAddress3", visibility=["read", "create", "update", "delete", "query"]
    )
    """Street Address line 3."""
    city: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the City."""
    state_or_province: Optional[str] = rest_field(
        name="stateOrProvince", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the State or Province."""
    country: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the Country. Required."""
    postal_code: Optional[str] = rest_field(
        name="postalCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Postal code."""
    zip_extended_code: Optional[str] = rest_field(
        name="zipExtendedCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Extended Zip Code."""
    company_name: Optional[str] = rest_field(
        name="companyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the company."""
    address_type: Optional[Union[str, "_models.AddressType"]] = rest_field(
        name="addressType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of address. Known values are: \"None\", \"Residential\", and \"Commercial\"."""

    @overload
    def __init__(
        self,
        *,
        country: str,
        street_address1: Optional[str] = None,
        street_address2: Optional[str] = None,
        street_address3: Optional[str] = None,
        city: Optional[str] = None,
        state_or_province: Optional[str] = None,
        postal_code: Optional[str] = None,
        zip_extended_code: Optional[str] = None,
        company_name: Optional[str] = None,
        address_type: Optional[Union[str, "_models.AddressType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SiteDetails(_Model):
    """Represents Site Related Details.

    :ivar site_id: Unique Id, Identifying A Site. Required.
    :vartype site_id: str
    """

    site_id: str = rest_field(name="siteId", visibility=["read", "create", "update", "delete", "query"])
    """Unique Id, Identifying A Site. Required."""

    @overload
    def __init__(
        self,
        *,
        site_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Specification(_Model):
    """Specification of the configurations.

    :ivar name: Name of the specification.
    :vartype name: str
    :ivar value: Value of the specification.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Name of the specification."""
    value: Optional[str] = rest_field(visibility=["read"])
    """Value of the specification."""


class StageDetails(_Model):
    """Resource stage details.

    :ivar stage_status: Stage status. Known values are: "None", "InProgress", "Succeeded",
     "Failed", "Cancelled", and "Cancelling".
    :vartype stage_status: str or ~azure.mgmt.edgeorder.models.StageStatus
    :ivar stage_name: Stage name. Known values are: "Placed", "InReview", "Confirmed",
     "ReadyToShip", "Shipped", "Delivered", "ReadyToSetup", "InUse", "ReturnInitiated",
     "ReturnPickedUp", "ReturnedToMicrosoft", "ReturnCompleted", and "Cancelled".
    :vartype stage_name: str or ~azure.mgmt.edgeorder.models.StageName
    :ivar display_name: Display name of the resource stage.
    :vartype display_name: str
    :ivar start_time: Stage start time.
    :vartype start_time: ~datetime.datetime
    """

    stage_status: Optional[Union[str, "_models.StageStatus"]] = rest_field(name="stageStatus", visibility=["read"])
    """Stage status. Known values are: \"None\", \"InProgress\", \"Succeeded\", \"Failed\",
     \"Cancelled\", and \"Cancelling\"."""
    stage_name: Optional[Union[str, "_models.StageName"]] = rest_field(name="stageName", visibility=["read"])
    """Stage name. Known values are: \"Placed\", \"InReview\", \"Confirmed\", \"ReadyToShip\",
     \"Shipped\", \"Delivered\", \"ReadyToSetup\", \"InUse\", \"ReturnInitiated\",
     \"ReturnPickedUp\", \"ReturnedToMicrosoft\", \"ReturnCompleted\", and \"Cancelled\"."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Display name of the resource stage."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Stage start time."""


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.edgeorder.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.edgeorder.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TermCommitmentInformation(_Model):
    """Term Commitment Information.

    :ivar term_commitment_type: Term Commitment Type. Required. Known values are: "None", "Trial",
     and "Timed".
    :vartype term_commitment_type: str or ~azure.mgmt.edgeorder.models.TermCommitmentType
    :ivar term_commitment_type_duration: Term Commitment Duration. Currently Supporting P365D,
     P1095D.
    :vartype term_commitment_type_duration: ~datetime.timedelta
    :ivar pending_days_for_term: Number of Days Pending for Term Commitment.
    :vartype pending_days_for_term: int
    """

    term_commitment_type: Union[str, "_models.TermCommitmentType"] = rest_field(
        name="termCommitmentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Term Commitment Type. Required. Known values are: \"None\", \"Trial\", and \"Timed\"."""
    term_commitment_type_duration: Optional[datetime.timedelta] = rest_field(
        name="termCommitmentTypeDuration", visibility=["read"]
    )
    """Term Commitment Duration. Currently Supporting P365D, P1095D."""
    pending_days_for_term: Optional[int] = rest_field(name="pendingDaysForTerm", visibility=["read"])
    """Number of Days Pending for Term Commitment."""

    @overload
    def __init__(
        self,
        *,
        term_commitment_type: Union[str, "_models.TermCommitmentType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TermCommitmentPreferences(_Model):
    """Term Commitment preference received from customer.

    :ivar preferred_term_commitment_type: Term Commitment Type. Required. Known values are: "None",
     "Trial", and "Timed".
    :vartype preferred_term_commitment_type: str or ~azure.mgmt.edgeorder.models.TermCommitmentType
    :ivar preferred_term_commitment_duration: Customer preferred Term Duration.
    :vartype preferred_term_commitment_duration: ~datetime.timedelta
    """

    preferred_term_commitment_type: Union[str, "_models.TermCommitmentType"] = rest_field(
        name="preferredTermCommitmentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Term Commitment Type. Required. Known values are: \"None\", \"Trial\", and \"Timed\"."""
    preferred_term_commitment_duration: Optional[datetime.timedelta] = rest_field(
        name="preferredTermCommitmentDuration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Customer preferred Term Duration."""

    @overload
    def __init__(
        self,
        *,
        preferred_term_commitment_type: Union[str, "_models.TermCommitmentType"],
        preferred_term_commitment_duration: Optional[datetime.timedelta] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TermTypeDetails(_Model):
    """Holds details about term type and duration.

    :ivar term_type: Term Commitment Type. Required. Known values are: "None", "Trial", and
     "Timed".
    :vartype term_type: str or ~azure.mgmt.edgeorder.models.TermCommitmentType
    :ivar term_type_duration: Duration for the term type. Required.
    :vartype term_type_duration: ~datetime.timedelta
    """

    term_type: Union[str, "_models.TermCommitmentType"] = rest_field(
        name="termType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Term Commitment Type. Required. Known values are: \"None\", \"Trial\", and \"Timed\"."""
    term_type_duration: datetime.timedelta = rest_field(
        name="termTypeDuration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Duration for the term type. Required."""

    @overload
    def __init__(
        self,
        *,
        term_type: Union[str, "_models.TermCommitmentType"],
        term_type_duration: datetime.timedelta,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TransportPreferences(_Model):
    """Preferences related to the shipment logistics of the sku.

    :ivar preferred_shipment_type: Indicates Shipment Logistics type that the customer preferred.
     Required. Known values are: "CustomerManaged" and "MicrosoftManaged".
    :vartype preferred_shipment_type: str or ~azure.mgmt.edgeorder.models.TransportShipmentTypes
    """

    preferred_shipment_type: Union[str, "_models.TransportShipmentTypes"] = rest_field(
        name="preferredShipmentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates Shipment Logistics type that the customer preferred. Required. Known values are:
     \"CustomerManaged\" and \"MicrosoftManaged\"."""

    @overload
    def __init__(
        self,
        *,
        preferred_shipment_type: Union[str, "_models.TransportShipmentTypes"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_Model):
    """User assigned identity properties.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""
