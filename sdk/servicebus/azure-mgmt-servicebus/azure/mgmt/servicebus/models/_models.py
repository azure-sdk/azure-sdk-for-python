# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AccessKeys(_Model):
    """Namespace/ServiceBus Connection String.

    :ivar primary_connection_string: Primary connection string of the created namespace
     authorization rule.
    :vartype primary_connection_string: str
    :ivar secondary_connection_string: Secondary connection string of the created namespace
     authorization rule.
    :vartype secondary_connection_string: str
    :ivar alias_primary_connection_string: Primary connection string of the alias if GEO DR is
     enabled.
    :vartype alias_primary_connection_string: str
    :ivar alias_secondary_connection_string: Secondary  connection string of the alias if GEO DR is
     enabled.
    :vartype alias_secondary_connection_string: str
    :ivar primary_key: A base64-encoded 256-bit primary key for signing and validating the SAS
     token.
    :vartype primary_key: str
    :ivar secondary_key: A base64-encoded 256-bit primary key for signing and validating the SAS
     token.
    :vartype secondary_key: str
    :ivar key_name: A string that describes the authorization rule.
    :vartype key_name: str
    """

    primary_connection_string: Optional[str] = rest_field(name="primaryConnectionString", visibility=["read"])
    """Primary connection string of the created namespace authorization rule."""
    secondary_connection_string: Optional[str] = rest_field(name="secondaryConnectionString", visibility=["read"])
    """Secondary connection string of the created namespace authorization rule."""
    alias_primary_connection_string: Optional[str] = rest_field(
        name="aliasPrimaryConnectionString", visibility=["read"]
    )
    """Primary connection string of the alias if GEO DR is enabled."""
    alias_secondary_connection_string: Optional[str] = rest_field(
        name="aliasSecondaryConnectionString", visibility=["read"]
    )
    """Secondary  connection string of the alias if GEO DR is enabled."""
    primary_key: Optional[str] = rest_field(name="primaryKey", visibility=["read"])
    """A base64-encoded 256-bit primary key for signing and validating the SAS token."""
    secondary_key: Optional[str] = rest_field(name="secondaryKey", visibility=["read"])
    """A base64-encoded 256-bit primary key for signing and validating the SAS token."""
    key_name: Optional[str] = rest_field(name="keyName", visibility=["read"])
    """A string that describes the authorization rule."""


class Action(_Model):
    """Represents the filter actions which are allowed for the transformation of a message that have
    been matched by a filter expression.

    :ivar sql_expression: SQL expression. e.g. MyProperty='ABC'.
    :vartype sql_expression: str
    :ivar compatibility_level: This property is reserved for future use. An integer value showing
     the compatibility level, currently hard-coded to 20.
    :vartype compatibility_level: int
    :ivar requires_preprocessing: Value that indicates whether the rule action requires
     preprocessing.
    :vartype requires_preprocessing: bool
    """

    sql_expression: Optional[str] = rest_field(
        name="sqlExpression", visibility=["read", "create", "update", "delete", "query"]
    )
    """SQL expression. e.g. MyProperty='ABC'."""
    compatibility_level: Optional[int] = rest_field(
        name="compatibilityLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """This property is reserved for future use. An integer value showing the compatibility level,
     currently hard-coded to 20."""
    requires_preprocessing: Optional[bool] = rest_field(
        name="requiresPreprocessing", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the rule action requires preprocessing."""

    @overload
    def __init__(
        self,
        *,
        sql_expression: Optional[str] = None,
        compatibility_level: Optional[int] = None,
        requires_preprocessing: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    """


class ArmDisasterRecovery(ProxyResource):
    """Single item in List or Get Alias(Disaster Recovery configuration) operation.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties required to the Create Or Update Alias(Disaster Recovery
     configurations).
    :vartype properties: ~azure.mgmt.servicebus.models.ArmDisasterRecoveryProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.ArmDisasterRecoveryProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties required to the Create Or Update Alias(Disaster Recovery configurations)."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "provisioning_state",
        "pending_replication_operations_count",
        "partner_namespace",
        "alternate_name",
        "role",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ArmDisasterRecoveryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ArmDisasterRecoveryProperties(_Model):
    """Properties required to the Create Or Update Alias(Disaster Recovery configurations).

    :ivar provisioning_state: Provisioning state of the Alias(Disaster Recovery configuration) -
     possible values 'Accepted' or 'Succeeded' or 'Failed'. Known values are: "Accepted",
     "Succeeded", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.servicebus.models.ProvisioningStateDR
    :ivar pending_replication_operations_count: Number of entities pending to be replicated.
    :vartype pending_replication_operations_count: int
    :ivar partner_namespace: ARM Id of the Primary/Secondary eventhub namespace name, which is part
     of GEO DR pairing.
    :vartype partner_namespace: str
    :ivar alternate_name: Primary/Secondary eventhub namespace name, which is part of GEO DR
     pairing.
    :vartype alternate_name: str
    :ivar role: role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating'
     or 'Secondary'. Known values are: "Primary", "PrimaryNotReplicating", and "Secondary".
    :vartype role: str or ~azure.mgmt.servicebus.models.RoleDisasterRecovery
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningStateDR"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted'
     or 'Succeeded' or 'Failed'. Known values are: \"Accepted\", \"Succeeded\", and \"Failed\"."""
    pending_replication_operations_count: Optional[int] = rest_field(
        name="pendingReplicationOperationsCount", visibility=["read"]
    )
    """Number of entities pending to be replicated."""
    partner_namespace: Optional[str] = rest_field(
        name="partnerNamespace", visibility=["read", "create", "update", "delete", "query"]
    )
    """ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing."""
    alternate_name: Optional[str] = rest_field(
        name="alternateName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Primary/Secondary eventhub namespace name, which is part of GEO DR pairing."""
    role: Optional[Union[str, "_models.RoleDisasterRecovery"]] = rest_field(visibility=["read"])
    """role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or
     'Secondary'. Known values are: \"Primary\", \"PrimaryNotReplicating\", and \"Secondary\"."""

    @overload
    def __init__(
        self,
        *,
        partner_namespace: Optional[str] = None,
        alternate_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailability(_Model):
    """Description of a Check Name availability request properties.

    :ivar name: The Name to check the namespace name availability and The namespace name can
     contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must
     end with a letter or number. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Name to check the namespace name availability and The namespace name can contain only
     letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a
     letter or number. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityResult(_Model):
    """Description of a Check Name availability request properties.

    :ivar message: The detailed info regarding the reason associated with the namespace.
    :vartype message: str
    :ivar name_available: Value indicating namespace is availability, true if the namespace is
     available; otherwise, false.
    :vartype name_available: bool
    :ivar reason: The reason for unavailability of a namespace. Known values are: "None",
     "InvalidName", "SubscriptionIsDisabled", "NameInUse", "NameInLockdown", and
     "TooManyNamespaceInCurrentSubscription".
    :vartype reason: str or ~azure.mgmt.servicebus.models.UnavailableReason
    """

    message: Optional[str] = rest_field(visibility=["read"])
    """The detailed info regarding the reason associated with the namespace."""
    name_available: Optional[bool] = rest_field(
        name="nameAvailable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value indicating namespace is availability, true if the namespace is available; otherwise,
     false."""
    reason: Optional[Union[str, "_models.UnavailableReason"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The reason for unavailability of a namespace. Known values are: \"None\", \"InvalidName\",
     \"SubscriptionIsDisabled\", \"NameInUse\", \"NameInLockdown\", and
     \"TooManyNamespaceInCurrentSubscription\"."""

    @overload
    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.UnavailableReason"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfidentialCompute(_Model):
    """ConfidentialCompute.

    :ivar mode: Setting to Enable or Disable Confidential Compute. Known values are: "Disabled" and
     "Enabled".
    :vartype mode: str or ~azure.mgmt.servicebus.models.Mode
    """

    mode: Optional[Union[str, "_models.Mode"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Setting to Enable or Disable Confidential Compute. Known values are: \"Disabled\" and
     \"Enabled\"."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.Mode"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectionState(_Model):
    """ConnectionState information.

    :ivar status: Status of the connection. Known values are: "Pending", "Approved", "Rejected",
     and "Disconnected".
    :vartype status: str or ~azure.mgmt.servicebus.models.PrivateLinkConnectionStatus
    :ivar description: Description of the connection state.
    :vartype description: str
    """

    status: Optional[Union[str, "_models.PrivateLinkConnectionStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of the connection. Known values are: \"Pending\", \"Approved\", \"Rejected\", and
     \"Disconnected\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the connection state."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateLinkConnectionStatus"]] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CorrelationFilter(_Model):
    """Represents the correlation filter expression.

    :ivar properties: dictionary object for custom filters.
    :vartype properties: dict[str, str]
    :ivar correlation_id: Identifier of the correlation.
    :vartype correlation_id: str
    :ivar message_id: Identifier of the message.
    :vartype message_id: str
    :ivar to: Address to send to.
    :vartype to: str
    :ivar reply_to: Address of the queue to reply to.
    :vartype reply_to: str
    :ivar label: Application specific label.
    :vartype label: str
    :ivar session_id: Session identifier.
    :vartype session_id: str
    :ivar reply_to_session_id: Session identifier to reply to.
    :vartype reply_to_session_id: str
    :ivar content_type: Content type of the message.
    :vartype content_type: str
    :ivar requires_preprocessing: Value that indicates whether the rule action requires
     preprocessing.
    :vartype requires_preprocessing: bool
    """

    properties: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """dictionary object for custom filters."""
    correlation_id: Optional[str] = rest_field(
        name="correlationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Identifier of the correlation."""
    message_id: Optional[str] = rest_field(name="messageId", visibility=["read", "create", "update", "delete", "query"])
    """Identifier of the message."""
    to: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Address to send to."""
    reply_to: Optional[str] = rest_field(name="replyTo", visibility=["read", "create", "update", "delete", "query"])
    """Address of the queue to reply to."""
    label: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Application specific label."""
    session_id: Optional[str] = rest_field(name="sessionId", visibility=["read", "create", "update", "delete", "query"])
    """Session identifier."""
    reply_to_session_id: Optional[str] = rest_field(
        name="replyToSessionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Session identifier to reply to."""
    content_type: Optional[str] = rest_field(
        name="contentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Content type of the message."""
    requires_preprocessing: Optional[bool] = rest_field(
        name="requiresPreprocessing", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the rule action requires preprocessing."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional[dict[str, str]] = None,
        correlation_id: Optional[str] = None,
        message_id: Optional[str] = None,
        to: Optional[str] = None,
        reply_to: Optional[str] = None,
        label: Optional[str] = None,
        session_id: Optional[str] = None,
        reply_to_session_id: Optional[str] = None,
        content_type: Optional[str] = None,
        requires_preprocessing: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Encryption(_Model):
    """Properties to configure Encryption.

    :ivar key_vault_properties: Properties of KeyVault.
    :vartype key_vault_properties: list[~azure.mgmt.servicebus.models.KeyVaultProperties]
    :ivar key_source: Enumerates the possible value of keySource for Encryption. Default value is
     "Microsoft.KeyVault".
    :vartype key_source: str
    :ivar require_infrastructure_encryption: Enable Infrastructure Encryption (Double Encryption).
    :vartype require_infrastructure_encryption: bool
    """

    key_vault_properties: Optional[list["_models.KeyVaultProperties"]] = rest_field(
        name="keyVaultProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of KeyVault."""
    key_source: Optional[Literal["Microsoft.KeyVault"]] = rest_field(
        name="keySource", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enumerates the possible value of keySource for Encryption. Default value is
     \"Microsoft.KeyVault\"."""
    require_infrastructure_encryption: Optional[bool] = rest_field(
        name="requireInfrastructureEncryption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable Infrastructure Encryption (Double Encryption)."""

    @overload
    def __init__(
        self,
        *,
        key_vault_properties: Optional[list["_models.KeyVaultProperties"]] = None,
        key_source: Optional[Literal["Microsoft.KeyVault"]] = None,
        require_infrastructure_encryption: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorResponse(_Model):
    """The resource management error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.servicebus.models.ErrorResponseError
    """

    error: Optional["_models.ErrorResponseError"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorResponseError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponseError(_Model):
    """The error object.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.servicebus.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.servicebus.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[list["_models.ErrorResponse"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[list["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class FailOver(_Model):
    """FailOver.

    :ivar properties:
    :vartype properties: ~azure.mgmt.servicebus.models.FailOverProperties
    """

    properties: Optional["_models.FailOverProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    __flattened_items = ["primary_location", "force"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FailOverProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FailoverProperties(_Model):
    """Safe failover is to indicate the service should wait for pending replication to finish before
    switching to the secondary.

    :ivar properties: Safe failover is to indicate the service should wait for pending replication
     to finish before switching to the secondary.
    :vartype properties: ~azure.mgmt.servicebus.models.FailoverPropertiesProperties
    """

    properties: Optional["_models.FailoverPropertiesProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Safe failover is to indicate the service should wait for pending replication to finish before
     switching to the secondary."""

    __flattened_items = ["is_safe_failover"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.FailoverPropertiesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FailOverProperties(_Model):
    """FailOverProperties.

    :ivar primary_location: Query parameter for the new primary location after failover.
    :vartype primary_location: str
    :ivar force: If Force is false then graceful failover is attempted after ensuring no data loss.
     If Force flag is set to true, Forced failover is attempted with possible data loss.
    :vartype force: bool
    """

    primary_location: Optional[str] = rest_field(
        name="primaryLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Query parameter for the new primary location after failover."""
    force: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """If Force is false then graceful failover is attempted after ensuring no data loss. If Force
     flag is set to true, Forced failover is attempted with possible data loss."""

    @overload
    def __init__(
        self,
        *,
        primary_location: Optional[str] = None,
        force: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FailoverPropertiesProperties(_Model):
    """Safe failover is to indicate the service should wait for pending replication to finish before
    switching to the secondary.

    :ivar is_safe_failover: Safe failover is to indicate the service should wait for pending
     replication to finish before switching to the secondary.
    :vartype is_safe_failover: bool
    """

    is_safe_failover: Optional[bool] = rest_field(
        name="IsSafeFailover", visibility=["read", "create", "update", "delete", "query"]
    )
    """Safe failover is to indicate the service should wait for pending replication to finish before
     switching to the secondary."""

    @overload
    def __init__(
        self,
        *,
        is_safe_failover: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GeoDataReplicationProperties(_Model):
    """GeoDR Replication properties.

    :ivar max_replication_lag_duration_in_seconds: The maximum acceptable lag for data replication
     operations from the primary replica to a quorum of secondary replicas.  When the lag exceeds
     the configured amount, operations on the primary replica will be failed. The allowed values are
     0 and 5 minutes to 1 day.
    :vartype max_replication_lag_duration_in_seconds: int
    :ivar locations: A list of regions where replicas of the namespace are maintained.
    :vartype locations: list[~azure.mgmt.servicebus.models.NamespaceReplicaLocation]
    """

    max_replication_lag_duration_in_seconds: Optional[int] = rest_field(
        name="maxReplicationLagDurationInSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum acceptable lag for data replication operations from the primary replica to a quorum
     of secondary replicas.  When the lag exceeds the configured amount, operations on the primary
     replica will be failed. The allowed values are 0 and 5 minutes to 1 day."""
    locations: Optional[list["_models.NamespaceReplicaLocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of regions where replicas of the namespace are maintained."""

    @overload
    def __init__(
        self,
        *,
        max_replication_lag_duration_in_seconds: Optional[int] = None,
        locations: Optional[list["_models.NamespaceReplicaLocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Identity(_Model):
    """Properties to configure User Assigned Identities for Bring your Own Keys.

    :ivar principal_id: ObjectId from the KeyVault.
    :vartype principal_id: str
    :ivar tenant_id: TenantId from the KeyVault.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity. Known values are: "SystemAssigned",
     "UserAssigned", "SystemAssigned, UserAssigned", and "None".
    :vartype type: str or ~azure.mgmt.servicebus.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: Properties for User Assigned Identities.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.servicebus.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """ObjectId from the KeyVault."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """TenantId from the KeyVault."""
    type: Optional[Union[str, "_models.ManagedServiceIdentityType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of managed service identity. Known values are: \"SystemAssigned\", \"UserAssigned\",
     \"SystemAssigned, UserAssigned\", and \"None\"."""
    user_assigned_identities: Optional[dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties for User Assigned Identities."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedServiceIdentityType"]] = None,
        user_assigned_identities: Optional[dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyVaultProperties(_Model):
    """Properties to configure keyVault Properties.

    :ivar key_name: Name of the Key from KeyVault.
    :vartype key_name: str
    :ivar key_vault_uri: Uri of KeyVault.
    :vartype key_vault_uri: str
    :ivar key_version: Version of KeyVault.
    :vartype key_version: str
    :ivar identity:
    :vartype identity: ~azure.mgmt.servicebus.models.UserAssignedIdentityProperties
    """

    key_name: Optional[str] = rest_field(name="keyName", visibility=["read", "create", "update", "delete", "query"])
    """Name of the Key from KeyVault."""
    key_vault_uri: Optional[str] = rest_field(
        name="keyVaultUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """Uri of KeyVault."""
    key_version: Optional[str] = rest_field(
        name="keyVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Version of KeyVault."""
    identity: Optional["_models.UserAssignedIdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        key_name: Optional[str] = None,
        key_vault_uri: Optional[str] = None,
        key_version: Optional[str] = None,
        identity: Optional["_models.UserAssignedIdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageCountDetails(_Model):
    """Message Count Details.

    :ivar active_message_count: Number of active messages in the queue, topic, or subscription.
    :vartype active_message_count: int
    :ivar dead_letter_message_count: Number of messages that are dead lettered.
    :vartype dead_letter_message_count: int
    :ivar scheduled_message_count: Number of scheduled messages.
    :vartype scheduled_message_count: int
    :ivar transfer_message_count: Number of messages transferred to another queue, topic, or
     subscription.
    :vartype transfer_message_count: int
    :ivar transfer_dead_letter_message_count: Number of messages transferred into dead letters.
    :vartype transfer_dead_letter_message_count: int
    """

    active_message_count: Optional[int] = rest_field(name="activeMessageCount", visibility=["read"])
    """Number of active messages in the queue, topic, or subscription."""
    dead_letter_message_count: Optional[int] = rest_field(name="deadLetterMessageCount", visibility=["read"])
    """Number of messages that are dead lettered."""
    scheduled_message_count: Optional[int] = rest_field(name="scheduledMessageCount", visibility=["read"])
    """Number of scheduled messages."""
    transfer_message_count: Optional[int] = rest_field(name="transferMessageCount", visibility=["read"])
    """Number of messages transferred to another queue, topic, or subscription."""
    transfer_dead_letter_message_count: Optional[int] = rest_field(
        name="transferDeadLetterMessageCount", visibility=["read"]
    )
    """Number of messages transferred into dead letters."""


class MigrationConfigProperties(ProxyResource):
    """Single item in List or Get Migration Config operation.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties required to the Create Migration Configuration.
    :vartype properties: ~azure.mgmt.servicebus.models.MigrationConfigPropertiesProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.MigrationConfigPropertiesProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties required to the Create Migration Configuration."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "provisioning_state",
        "pending_replication_operations_count",
        "target_namespace",
        "post_migration_name",
        "migration_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.MigrationConfigPropertiesProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MigrationConfigPropertiesProperties(_Model):
    """Properties required to the Create Migration Configuration.

    :ivar provisioning_state: Provisioning state of Migration ConfigurationProvisioning state of
     Migration Configuration.
    :vartype provisioning_state: str
    :ivar pending_replication_operations_count: Number of entities pending to be replicated.
    :vartype pending_replication_operations_count: int
    :ivar target_namespace: Existing premium Namespace ARM Id name which has no entities, will be
     used for migration. Required.
    :vartype target_namespace: str
    :ivar post_migration_name: Name to access Standard Namespace after migration. Required.
    :vartype post_migration_name: str
    :ivar migration_state: State in which Standard to Premium Migration is, possible values :
     Unknown, Reverting, Completing, Initiating, Syncing, Active.
    :vartype migration_state: str
    """

    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """Provisioning state of Migration ConfigurationProvisioning state of Migration Configuration."""
    pending_replication_operations_count: Optional[int] = rest_field(
        name="pendingReplicationOperationsCount", visibility=["read"]
    )
    """Number of entities pending to be replicated."""
    target_namespace: str = rest_field(
        name="targetNamespace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Existing premium Namespace ARM Id name which has no entities, will be used for migration.
     Required."""
    post_migration_name: str = rest_field(
        name="postMigrationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name to access Standard Namespace after migration. Required."""
    migration_state: Optional[str] = rest_field(name="migrationState", visibility=["read"])
    """State in which Standard to Premium Migration is, possible values : Unknown, Reverting,
     Completing, Initiating, Syncing, Active."""

    @overload
    def __init__(
        self,
        *,
        target_namespace: str,
        post_migration_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NamespaceReplicaLocation(_Model):
    """Namespace replication properties.

    :ivar location_name: Azure regions where a replica of the namespace is maintained.
    :vartype location_name: str
    :ivar role_type: GeoDR Role Types. Known values are: "Primary" and "Secondary".
    :vartype role_type: str or ~azure.mgmt.servicebus.models.GeoDRRoleType
    :ivar cluster_arm_id: Optional property that denotes the ARM ID of the Cluster. This is
     required, if a namespace replica should be placed in a Dedicated Event Hub Cluster.
    :vartype cluster_arm_id: str
    """

    location_name: Optional[str] = rest_field(
        name="locationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure regions where a replica of the namespace is maintained."""
    role_type: Optional[Union[str, "_models.GeoDRRoleType"]] = rest_field(
        name="roleType", visibility=["read", "create", "update", "delete", "query"]
    )
    """GeoDR Role Types. Known values are: \"Primary\" and \"Secondary\"."""
    cluster_arm_id: Optional[str] = rest_field(
        name="clusterArmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional property that denotes the ARM ID of the Cluster. This is required, if a namespace
     replica should be placed in a Dedicated Event Hub Cluster."""

    @overload
    def __init__(
        self,
        *,
        location_name: Optional[str] = None,
        role_type: Optional[Union[str, "_models.GeoDRRoleType"]] = None,
        cluster_arm_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkRuleSet(ProxyResource):
    """Description of NetworkRuleSet resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: NetworkRuleSet properties.
    :vartype properties: ~azure.mgmt.servicebus.models.NetworkRuleSetProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.NetworkRuleSetProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """NetworkRuleSet properties."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "trusted_service_access_enabled",
        "default_action",
        "virtual_network_rules",
        "ip_rules",
        "public_network_access",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NetworkRuleSetProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NetworkRuleSetProperties(_Model):
    """NetworkRuleSet properties.

    :ivar trusted_service_access_enabled: Value that indicates whether Trusted Service Access is
     Enabled or not.
    :vartype trusted_service_access_enabled: bool
    :ivar default_action: Default Action for Network Rule Set. Known values are: "Allow" and
     "Deny".
    :vartype default_action: str or ~azure.mgmt.servicebus.models.DefaultAction
    :ivar virtual_network_rules: List VirtualNetwork Rules.
    :vartype virtual_network_rules:
     list[~azure.mgmt.servicebus.models.NWRuleSetVirtualNetworkRules]
    :ivar ip_rules: List of IpRules.
    :vartype ip_rules: list[~azure.mgmt.servicebus.models.NWRuleSetIpRules]
    :ivar public_network_access: This determines if traffic is allowed over public network. By
     default it is enabled. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.servicebus.models.PublicNetworkAccessFlag
    """

    trusted_service_access_enabled: Optional[bool] = rest_field(
        name="trustedServiceAccessEnabled", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether Trusted Service Access is Enabled or not."""
    default_action: Optional[Union[str, "_models.DefaultAction"]] = rest_field(
        name="defaultAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Default Action for Network Rule Set. Known values are: \"Allow\" and \"Deny\"."""
    virtual_network_rules: Optional[list["_models.NWRuleSetVirtualNetworkRules"]] = rest_field(
        name="virtualNetworkRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """List VirtualNetwork Rules."""
    ip_rules: Optional[list["_models.NWRuleSetIpRules"]] = rest_field(
        name="ipRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of IpRules."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccessFlag"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create", "update", "delete", "query"]
    )
    """This determines if traffic is allowed over public network. By default it is enabled. Known
     values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        trusted_service_access_enabled: Optional[bool] = None,
        default_action: Optional[Union[str, "_models.DefaultAction"]] = None,
        virtual_network_rules: Optional[list["_models.NWRuleSetVirtualNetworkRules"]] = None,
        ip_rules: Optional[list["_models.NWRuleSetIpRules"]] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccessFlag"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkSecurityPerimeter(_Model):
    """NetworkSecurityPerimeter related information.

    :ivar id: Fully qualified identifier of the resource.
    :vartype id: str
    :ivar perimeter_guid: Guid of the resource.
    :vartype perimeter_guid: str
    :ivar location: Location of the resource.
    :vartype location: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Fully qualified identifier of the resource."""
    perimeter_guid: Optional[str] = rest_field(
        name="perimeterGuid", visibility=["read", "create", "update", "delete", "query"]
    )
    """Guid of the resource."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Location of the resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        perimeter_guid: Optional[str] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkSecurityPerimeterConfiguration(ProxyResource):
    """Network Security Perimeter related configurations of a given namespace.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties of the Network Security Perimeter Configuration.
    :vartype properties:
     ~azure.mgmt.servicebus.models.NetworkSecurityPerimeterConfigurationProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.NetworkSecurityPerimeterConfigurationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the Network Security Perimeter Configuration."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "provisioning_state",
        "provisioning_issues",
        "network_security_perimeter",
        "resource_association",
        "profile",
        "is_backing_resource",
        "applicable_features",
        "parent_association_name",
        "source_resource_id",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NetworkSecurityPerimeterConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NetworkSecurityPerimeterConfigurationProperties(_Model):  # pylint: disable=name-too-long
    """Properties of NetworkSecurityPerimeterConfiguration.

    :ivar provisioning_state: Provisioning state of NetworkSecurityPerimeter configuration
     propagation. Known values are: "Unknown", "Creating", "Updating", "Accepted",
     "InvalidResponse", "Succeeded", "SucceededWithIssues", "Failed", "Deleting", "Deleted", and
     "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.servicebus.models.NetworkSecurityPerimeterConfigurationProvisioningState
    :ivar provisioning_issues: List of Provisioning Issues if any.
    :vartype provisioning_issues: list[~azure.mgmt.servicebus.models.ProvisioningIssue]
    :ivar network_security_perimeter: NetworkSecurityPerimeter related information.
    :vartype network_security_perimeter: ~azure.mgmt.servicebus.models.NetworkSecurityPerimeter
    :ivar resource_association: Information about resource association.
    :vartype resource_association:
     ~azure.mgmt.servicebus.models.NetworkSecurityPerimeterConfigurationPropertiesResourceAssociation
    :ivar profile: Information about current network profile.
    :vartype profile:
     ~azure.mgmt.servicebus.models.NetworkSecurityPerimeterConfigurationPropertiesProfile
    :ivar is_backing_resource: True if the ServiceBus namespace is backed by another Azure resource
     and not visible to end users.
    :vartype is_backing_resource: bool
    :ivar applicable_features: Indicates that the NSP controls related to backing association are
     only applicable to a specific feature in backing resource's data plane.
    :vartype applicable_features: list[str]
    :ivar parent_association_name: Source Resource Association name.
    :vartype parent_association_name: str
    :ivar source_resource_id: ARM Id of source resource.
    :vartype source_resource_id: str
    """

    provisioning_state: Optional[Union[str, "_models.NetworkSecurityPerimeterConfigurationProvisioningState"]] = (
        rest_field(name="provisioningState", visibility=["read"])
    )
    """Provisioning state of NetworkSecurityPerimeter configuration propagation. Known values are:
     \"Unknown\", \"Creating\", \"Updating\", \"Accepted\", \"InvalidResponse\", \"Succeeded\",
     \"SucceededWithIssues\", \"Failed\", \"Deleting\", \"Deleted\", and \"Canceled\"."""
    provisioning_issues: Optional[list["_models.ProvisioningIssue"]] = rest_field(
        name="provisioningIssues", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Provisioning Issues if any."""
    network_security_perimeter: Optional["_models.NetworkSecurityPerimeter"] = rest_field(
        name="networkSecurityPerimeter", visibility=["read", "create", "update", "delete", "query"]
    )
    """NetworkSecurityPerimeter related information."""
    resource_association: Optional["_models.NetworkSecurityPerimeterConfigurationPropertiesResourceAssociation"] = (
        rest_field(name="resourceAssociation", visibility=["read"])
    )
    """Information about resource association."""
    profile: Optional["_models.NetworkSecurityPerimeterConfigurationPropertiesProfile"] = rest_field(
        visibility=["read"]
    )
    """Information about current network profile."""
    is_backing_resource: Optional[bool] = rest_field(name="isBackingResource", visibility=["read"])
    """True if the ServiceBus namespace is backed by another Azure resource and not visible to end
     users."""
    applicable_features: Optional[list[str]] = rest_field(name="applicableFeatures", visibility=["read"])
    """Indicates that the NSP controls related to backing association are only applicable to a
     specific feature in backing resource's data plane."""
    parent_association_name: Optional[str] = rest_field(name="parentAssociationName", visibility=["read"])
    """Source Resource Association name."""
    source_resource_id: Optional[str] = rest_field(name="sourceResourceId", visibility=["read"])
    """ARM Id of source resource."""

    @overload
    def __init__(
        self,
        *,
        provisioning_issues: Optional[list["_models.ProvisioningIssue"]] = None,
        network_security_perimeter: Optional["_models.NetworkSecurityPerimeter"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkSecurityPerimeterConfigurationPropertiesProfile(_Model):  # pylint: disable=name-too-long
    """Information about current network profile.

    :ivar name: Name of the resource.
    :vartype name: str
    :ivar access_rules_version: Current access rules version.
    :vartype access_rules_version: str
    :ivar access_rules: List of Access Rules.
    :vartype access_rules: list[~azure.mgmt.servicebus.models.NspAccessRule]
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the resource."""
    access_rules_version: Optional[str] = rest_field(
        name="accessRulesVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current access rules version."""
    access_rules: Optional[list["_models.NspAccessRule"]] = rest_field(
        name="accessRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Access Rules."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        access_rules_version: Optional[str] = None,
        access_rules: Optional[list["_models.NspAccessRule"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkSecurityPerimeterConfigurationPropertiesResourceAssociation(_Model):  # pylint: disable=name-too-long
    """Information about resource association.

    :ivar name: Name of the resource association.
    :vartype name: str
    :ivar access_mode: Access Mode of the resource association. Known values are:
     "NoAssociationMode", "EnforcedMode", "LearningMode", "AuditMode", and "UnspecifiedMode".
    :vartype access_mode: str or ~azure.mgmt.servicebus.models.ResourceAssociationAccessMode
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the resource association."""
    access_mode: Optional[Union[str, "_models.ResourceAssociationAccessMode"]] = rest_field(
        name="accessMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Access Mode of the resource association. Known values are: \"NoAssociationMode\",
     \"EnforcedMode\", \"LearningMode\", \"AuditMode\", and \"UnspecifiedMode\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        access_mode: Optional[Union[str, "_models.ResourceAssociationAccessMode"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NspAccessRule(_Model):
    """Information of Access Rule in Network Profile.

    :ivar id: Fully qualified identifier of the resource.
    :vartype id: str
    :ivar name: Name of the resource.
    :vartype name: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar properties: Properties of Access Rule.
    :vartype properties: ~azure.mgmt.servicebus.models.NspAccessRuleProperties
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Fully qualified identifier of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the resource."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the resource."""
    properties: Optional["_models.NspAccessRuleProperties"] = rest_field(visibility=["read"])
    """Properties of Access Rule."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NspAccessRuleProperties(_Model):
    """Properties of Access Rule.

    :ivar direction: Direction of Access Rule. Known values are: "Inbound" and "Outbound".
    :vartype direction: str or ~azure.mgmt.servicebus.models.NspAccessRuleDirection
    :ivar address_prefixes: Address prefixes in the CIDR format for inbound rules.
    :vartype address_prefixes: list[str]
    :ivar subscriptions: Subscriptions for inbound rules.
    :vartype subscriptions:
     list[~azure.mgmt.servicebus.models.NspAccessRulePropertiesSubscriptionsItem]
    :ivar network_security_perimeters: NetworkSecurityPerimeters for inbound rules.
    :vartype network_security_perimeters:
     list[~azure.mgmt.servicebus.models.NetworkSecurityPerimeter]
    :ivar fully_qualified_domain_names: FQDN for outbound rules.
    :vartype fully_qualified_domain_names: list[str]
    """

    direction: Optional[Union[str, "_models.NspAccessRuleDirection"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Direction of Access Rule. Known values are: \"Inbound\" and \"Outbound\"."""
    address_prefixes: Optional[list[str]] = rest_field(
        name="addressPrefixes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Address prefixes in the CIDR format for inbound rules."""
    subscriptions: Optional[list["_models.NspAccessRulePropertiesSubscriptionsItem"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscriptions for inbound rules."""
    network_security_perimeters: Optional[list["_models.NetworkSecurityPerimeter"]] = rest_field(
        name="networkSecurityPerimeters", visibility=["read"]
    )
    """NetworkSecurityPerimeters for inbound rules."""
    fully_qualified_domain_names: Optional[list[str]] = rest_field(
        name="fullyQualifiedDomainNames", visibility=["read"]
    )
    """FQDN for outbound rules."""

    @overload
    def __init__(
        self,
        *,
        direction: Optional[Union[str, "_models.NspAccessRuleDirection"]] = None,
        address_prefixes: Optional[list[str]] = None,
        subscriptions: Optional[list["_models.NspAccessRulePropertiesSubscriptionsItem"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NspAccessRulePropertiesSubscriptionsItem(_Model):
    """Subscription for inbound rule.

    :ivar id: Fully qualified identifier of subscription.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Fully qualified identifier of subscription."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NWRuleSetIpRules(_Model):
    """Description of NetWorkRuleSet - IpRules resource.

    :ivar ip_mask: IP Mask.
    :vartype ip_mask: str
    :ivar action: The IP Filter Action. "Allow"
    :vartype action: str or ~azure.mgmt.servicebus.models.NetworkRuleIPAction
    """

    ip_mask: Optional[str] = rest_field(name="ipMask", visibility=["read", "create", "update", "delete", "query"])
    """IP Mask."""
    action: Optional[Union[str, "_models.NetworkRuleIPAction"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The IP Filter Action. \"Allow\""""

    @overload
    def __init__(
        self,
        *,
        ip_mask: Optional[str] = None,
        action: Optional[Union[str, "_models.NetworkRuleIPAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NWRuleSetVirtualNetworkRules(_Model):
    """Description of VirtualNetworkRules - NetworkRules resource.

    :ivar subnet: Subnet properties.
    :vartype subnet: ~azure.mgmt.servicebus.models.Subnet
    :ivar ignore_missing_vnet_service_endpoint: Value that indicates whether to ignore missing VNet
     Service Endpoint.
    :vartype ignore_missing_vnet_service_endpoint: bool
    """

    subnet: Optional["_models.Subnet"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Subnet properties."""
    ignore_missing_vnet_service_endpoint: Optional[bool] = rest_field(
        name="ignoreMissingVnetServiceEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether to ignore missing VNet Service Endpoint."""

    @overload
    def __init__(
        self,
        *,
        subnet: Optional["_models.Subnet"] = None,
        ignore_missing_vnet_service_endpoint: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """A Service Bus REST API operation.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar display: Display of the operation.
    :vartype display: ~azure.mgmt.servicebus.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar properties: Properties of the operation.
    :vartype properties: any
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Operation name: {provider}/{resource}/{operation}."""
    is_data_action: Optional[bool] = rest_field(
        name="isDataAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the operation is a data action."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Display of the operation."""
    origin: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Origin of the operation."""
    properties: Optional[Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of the operation."""

    __flattened_items = [""]

    @overload
    def __init__(
        self,
        *,
        is_data_action: Optional[bool] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        properties: Optional[Any] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OperationDisplay(_Model):
    """Operation display payload.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource of the operation.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """Resource provider of the operation."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """Resource of the operation."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """Localized friendly name for the operation."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Localized friendly description for the operation."""


class PlatformCapabilities(_Model):
    """PlatformCapabilities.

    :ivar confidential_compute:
    :vartype confidential_compute: ~azure.mgmt.servicebus.models.ConfidentialCompute
    """

    confidential_compute: Optional["_models.ConfidentialCompute"] = rest_field(
        name="confidentialCompute", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        confidential_compute: Optional["_models.ConfidentialCompute"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpoint(_Model):
    """PrivateEndpoint information.

    :ivar id: The ARM identifier for Private Endpoint.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ARM identifier for Private Endpoint."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnection(ProxyResource):
    """Properties of the PrivateEndpointConnection.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties of the PrivateEndpointConnection.
    :vartype properties: ~azure.mgmt.servicebus.models.PrivateEndpointConnectionProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.PrivateEndpointConnectionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the PrivateEndpointConnection."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = ["private_endpoint", "private_link_service_connection_state", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateEndpointConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PrivateEndpointConnectionProperties(_Model):
    """Properties of the private endpoint connection resource.

    :ivar private_endpoint: The Private Endpoint resource for this Connection.
    :vartype private_endpoint: ~azure.mgmt.servicebus.models.PrivateEndpoint
    :ivar private_link_service_connection_state: Details about the state of the connection.
    :vartype private_link_service_connection_state: ~azure.mgmt.servicebus.models.ConnectionState
    :ivar provisioning_state: Provisioning state of the Private Endpoint Connection. Known values
     are: "Creating", "Updating", "Deleting", "Succeeded", "Canceled", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.servicebus.models.EndPointProvisioningState
    """

    private_endpoint: Optional["_models.PrivateEndpoint"] = rest_field(
        name="privateEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Private Endpoint resource for this Connection."""
    private_link_service_connection_state: Optional["_models.ConnectionState"] = rest_field(
        name="privateLinkServiceConnectionState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details about the state of the connection."""
    provisioning_state: Optional[Union[str, "_models.EndPointProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Provisioning state of the Private Endpoint Connection. Known values are: \"Creating\",
     \"Updating\", \"Deleting\", \"Succeeded\", \"Canceled\", and \"Failed\"."""

    @overload
    def __init__(
        self,
        *,
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
        private_link_service_connection_state: Optional["_models.ConnectionState"] = None,
        provisioning_state: Optional[Union[str, "_models.EndPointProvisioningState"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResource(_Model):
    """Information of the private link resource.

    :ivar properties: Properties of the private link resource.
    :vartype properties: ~azure.mgmt.servicebus.models.PrivateLinkResourceProperties
    :ivar id: Fully qualified identifier of the resource.
    :vartype id: str
    :ivar name: Name of the resource.
    :vartype name: str
    :ivar type: Type of the resource.
    :vartype type: str
    """

    properties: Optional["_models.PrivateLinkResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the private link resource."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Fully qualified identifier of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the resource."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the resource."""

    __flattened_items = ["group_id", "required_members", "required_zone_names"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateLinkResourceProperties"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PrivateLinkResourceProperties(_Model):
    """Properties of PrivateLinkResource.

    :ivar group_id:
    :vartype group_id: str
    :ivar required_members: Required Members.
    :vartype required_members: list[str]
    :ivar required_zone_names: Required Zone Names.
    :vartype required_zone_names: list[str]
    """

    group_id: Optional[str] = rest_field(name="groupId", visibility=["read", "create", "update", "delete", "query"])
    required_members: Optional[list[str]] = rest_field(
        name="requiredMembers", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required Members."""
    required_zone_names: Optional[list[str]] = rest_field(
        name="requiredZoneNames", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required Zone Names."""

    @overload
    def __init__(
        self,
        *,
        group_id: Optional[str] = None,
        required_members: Optional[list[str]] = None,
        required_zone_names: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResourcesListResult(_Model):
    """The response of a PrivateLinkResource list operation.

    :ivar value: The PrivateLinkResource items on this page. Required.
    :vartype value: list[~azure.mgmt.servicebus.models.PrivateLinkResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: list["_models.PrivateLinkResource"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The PrivateLinkResource items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: list["_models.PrivateLinkResource"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProvisioningIssue(_Model):
    """Describes Provisioning issue for given NetworkSecurityPerimeterConfiguration.

    :ivar name: Name of the issue.
    :vartype name: str
    :ivar properties: Properties of Provisioning Issue.
    :vartype properties: ~azure.mgmt.servicebus.models.ProvisioningIssueProperties
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the issue."""
    properties: Optional["_models.ProvisioningIssueProperties"] = rest_field(visibility=["read"])
    """Properties of Provisioning Issue."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProvisioningIssueProperties(_Model):
    """Properties of Provisioning Issue.

    :ivar issue_type: Type of Issue.
    :vartype issue_type: str
    :ivar description: Description of the issue.
    :vartype description: str
    """

    issue_type: Optional[str] = rest_field(name="issueType", visibility=["read", "create", "update", "delete", "query"])
    """Type of Issue."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the issue."""

    @overload
    def __init__(
        self,
        *,
        issue_type: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegenerateAccessKeyParameters(_Model):
    """Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs
    to be reset.

    :ivar key_type: The access key to regenerate. Required. Known values are: "PrimaryKey" and
     "SecondaryKey".
    :vartype key_type: str or ~azure.mgmt.servicebus.models.KeyType
    :ivar key: Optional, if the key value provided, is reset for KeyType value or autogenerate Key
     value set for keyType.
    :vartype key: str
    """

    key_type: Union[str, "_models.KeyType"] = rest_field(
        name="keyType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The access key to regenerate. Required. Known values are: \"PrimaryKey\" and \"SecondaryKey\"."""
    key: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set
     for keyType."""

    @overload
    def __init__(
        self,
        *,
        key_type: Union[str, "_models.KeyType"],
        key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceNamespacePatch(Resource):
    """The Resource definition.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource location."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Rule(ProxyResource):
    """Description of Rule Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties of Rule resource.
    :vartype properties: ~azure.mgmt.servicebus.models.Ruleproperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.Ruleproperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of Rule resource."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = ["action", "filter_type", "sql_filter", "correlation_filter"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.Ruleproperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Ruleproperties(_Model):
    """Description of Rule Resource.

    :ivar action: Represents the filter actions which are allowed for the transformation of a
     message that have been matched by a filter expression.
    :vartype action: ~azure.mgmt.servicebus.models.Action
    :ivar filter_type: Filter type that is evaluated against a BrokeredMessage. Known values are:
     "SqlFilter" and "CorrelationFilter".
    :vartype filter_type: str or ~azure.mgmt.servicebus.models.FilterType
    :ivar sql_filter: Properties of sqlFilter.
    :vartype sql_filter: ~azure.mgmt.servicebus.models.SqlFilter
    :ivar correlation_filter: Properties of correlationFilter.
    :vartype correlation_filter: ~azure.mgmt.servicebus.models.CorrelationFilter
    """

    action: Optional["_models.Action"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represents the filter actions which are allowed for the transformation of a message that have
     been matched by a filter expression."""
    filter_type: Optional[Union[str, "_models.FilterType"]] = rest_field(
        name="filterType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter type that is evaluated against a BrokeredMessage. Known values are: \"SqlFilter\" and
     \"CorrelationFilter\"."""
    sql_filter: Optional["_models.SqlFilter"] = rest_field(
        name="sqlFilter", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of sqlFilter."""
    correlation_filter: Optional["_models.CorrelationFilter"] = rest_field(
        name="correlationFilter", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of correlationFilter."""

    @overload
    def __init__(
        self,
        *,
        action: Optional["_models.Action"] = None,
        filter_type: Optional[Union[str, "_models.FilterType"]] = None,
        sql_filter: Optional["_models.SqlFilter"] = None,
        correlation_filter: Optional["_models.CorrelationFilter"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBAuthorizationRule(ProxyResource):
    """Description of a namespace authorization rule.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: AuthorizationRule properties.
    :vartype properties: ~azure.mgmt.servicebus.models.SBAuthorizationRuleProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.SBAuthorizationRuleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """AuthorizationRule properties."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = ["rights"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SBAuthorizationRuleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBAuthorizationRuleProperties(_Model):
    """AuthorizationRule properties.

    :ivar rights: The rights associated with the rule. Required.
    :vartype rights: list[str or ~azure.mgmt.servicebus.models.AccessRights]
    """

    rights: list[Union[str, "_models.AccessRights"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The rights associated with the rule. Required."""

    @overload
    def __init__(
        self,
        *,
        rights: list[Union[str, "_models.AccessRights"]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBClientAffineProperties(_Model):
    """Properties specific to client affine subscriptions.

    :ivar client_id: Indicates the Client ID of the application that created the client-affine
     subscription.
    :vartype client_id: str
    :ivar is_durable: For client-affine subscriptions, this value indicates whether the
     subscription is durable or not.
    :vartype is_durable: bool
    :ivar is_shared: For client-affine subscriptions, this value indicates whether the subscription
     is shared or not.
    :vartype is_shared: bool
    """

    client_id: Optional[str] = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """Indicates the Client ID of the application that created the client-affine subscription."""
    is_durable: Optional[bool] = rest_field(
        name="isDurable", visibility=["read", "create", "update", "delete", "query"]
    )
    """For client-affine subscriptions, this value indicates whether the subscription is durable or
     not."""
    is_shared: Optional[bool] = rest_field(name="isShared", visibility=["read", "create", "update", "delete", "query"])
    """For client-affine subscriptions, this value indicates whether the subscription is shared or
     not."""

    @overload
    def __init__(
        self,
        *,
        client_id: Optional[str] = None,
        is_durable: Optional[bool] = None,
        is_shared: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBNamespace(TrackedResource):
    """Description of a namespace resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of the namespace.
    :vartype properties: ~azure.mgmt.servicebus.models.SBNamespaceProperties
    :ivar sku: Properties of SKU.
    :vartype sku: ~azure.mgmt.servicebus.models.SBSku
    :ivar identity: Properties of BYOK Identity description.
    :vartype identity: ~azure.mgmt.servicebus.models.Identity
    """

    properties: Optional["_models.SBNamespaceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the namespace."""
    sku: Optional["_models.SBSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of SKU."""
    identity: Optional["_models.Identity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of BYOK Identity description."""

    __flattened_items = [
        "minimum_tls_version",
        "provisioning_state",
        "status",
        "created_at",
        "updated_at",
        "service_bus_endpoint",
        "metric_id",
        "zone_redundant",
        "encryption",
        "private_endpoint_connections",
        "disable_local_auth",
        "alternate_name",
        "public_network_access",
        "premium_messaging_partitions",
        "platform_capabilities",
        "geo_data_replication",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
        properties: Optional["_models.SBNamespaceProperties"] = None,
        sku: Optional["_models.SBSku"] = None,
        identity: Optional["_models.Identity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBNamespaceProperties(_Model):
    """Properties of the namespace.

    :ivar minimum_tls_version: The minimum TLS version for the cluster to support, e.g. '1.2'.
     Known values are: "1.0", "1.1", and "1.2".
    :vartype minimum_tls_version: str or ~azure.mgmt.servicebus.models.TlsVersion
    :ivar provisioning_state: Provisioning state of the namespace.
    :vartype provisioning_state: str
    :ivar status: Status of the namespace.
    :vartype status: str
    :ivar created_at: The time the namespace was created.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: The time the namespace was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar service_bus_endpoint: Endpoint you can use to perform Service Bus operations.
    :vartype service_bus_endpoint: str
    :ivar metric_id: Identifier for Azure Insights metrics.
    :vartype metric_id: str
    :ivar zone_redundant: Enabling this property creates a Premium Service Bus Namespace in regions
     supported availability zones.
    :vartype zone_redundant: bool
    :ivar encryption: Properties of BYOK Encryption description.
    :vartype encryption: ~azure.mgmt.servicebus.models.Encryption
    :ivar private_endpoint_connections: List of private endpoint connections.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.servicebus.models.PrivateEndpointConnection]
    :ivar disable_local_auth: This property disables SAS authentication for the Service Bus
     namespace.
    :vartype disable_local_auth: bool
    :ivar alternate_name: Alternate name for namespace.
    :vartype alternate_name: str
    :ivar public_network_access: This determines if traffic is allowed over public network. By
     default it is enabled. Known values are: "Enabled", "Disabled", and "SecuredByPerimeter".
    :vartype public_network_access: str or ~azure.mgmt.servicebus.models.PublicNetworkAccess
    :ivar premium_messaging_partitions: The number of partitions of a Service Bus namespace. This
     property is only applicable to Premium SKU namespaces. The default value is 1 and possible
     values are 1, 2 and 4.
    :vartype premium_messaging_partitions: int
    :ivar platform_capabilities:
    :vartype platform_capabilities: ~azure.mgmt.servicebus.models.PlatformCapabilities
    :ivar geo_data_replication: Geo Data Replication settings for the namespace.
    :vartype geo_data_replication: ~azure.mgmt.servicebus.models.GeoDataReplicationProperties
    """

    minimum_tls_version: Optional[Union[str, "_models.TlsVersion"]] = rest_field(
        name="minimumTlsVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The minimum TLS version for the cluster to support, e.g. '1.2'. Known values are: \"1.0\",
     \"1.1\", and \"1.2\"."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """Provisioning state of the namespace."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Status of the namespace."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The time the namespace was created."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """The time the namespace was updated."""
    service_bus_endpoint: Optional[str] = rest_field(name="serviceBusEndpoint", visibility=["read"])
    """Endpoint you can use to perform Service Bus operations."""
    metric_id: Optional[str] = rest_field(name="metricId", visibility=["read"])
    """Identifier for Azure Insights metrics."""
    zone_redundant: Optional[bool] = rest_field(name="zoneRedundant", visibility=["read", "create"])
    """Enabling this property creates a Premium Service Bus Namespace in regions supported
     availability zones."""
    encryption: Optional["_models.Encryption"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of BYOK Encryption description."""
    private_endpoint_connections: Optional[list["_models.PrivateEndpointConnection"]] = rest_field(
        name="privateEndpointConnections", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of private endpoint connections."""
    disable_local_auth: Optional[bool] = rest_field(
        name="disableLocalAuth", visibility=["read", "create", "update", "delete", "query"]
    )
    """This property disables SAS authentication for the Service Bus namespace."""
    alternate_name: Optional[str] = rest_field(
        name="alternateName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Alternate name for namespace."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create", "update", "delete", "query"]
    )
    """This determines if traffic is allowed over public network. By default it is enabled. Known
     values are: \"Enabled\", \"Disabled\", and \"SecuredByPerimeter\"."""
    premium_messaging_partitions: Optional[int] = rest_field(
        name="premiumMessagingPartitions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The number of partitions of a Service Bus namespace. This property is only applicable to
     Premium SKU namespaces. The default value is 1 and possible values are 1, 2 and 4."""
    platform_capabilities: Optional["_models.PlatformCapabilities"] = rest_field(
        name="platformCapabilities", visibility=["read", "create", "update", "delete", "query"]
    )
    geo_data_replication: Optional["_models.GeoDataReplicationProperties"] = rest_field(
        name="geoDataReplication", visibility=["read", "create", "update", "delete", "query"]
    )
    """Geo Data Replication settings for the namespace."""

    @overload
    def __init__(
        self,
        *,
        minimum_tls_version: Optional[Union[str, "_models.TlsVersion"]] = None,
        zone_redundant: Optional[bool] = None,
        encryption: Optional["_models.Encryption"] = None,
        private_endpoint_connections: Optional[list["_models.PrivateEndpointConnection"]] = None,
        disable_local_auth: Optional[bool] = None,
        alternate_name: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
        premium_messaging_partitions: Optional[int] = None,
        platform_capabilities: Optional["_models.PlatformCapabilities"] = None,
        geo_data_replication: Optional["_models.GeoDataReplicationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBNamespaceUpdateParameters(ResourceNamespacePatch):
    """Description of a namespace resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: Properties of SKU.
    :vartype sku: ~azure.mgmt.servicebus.models.SBSku
    :ivar properties: Properties of the namespace.
    :vartype properties: ~azure.mgmt.servicebus.models.SBNamespaceUpdateProperties
    :ivar identity: Properties of BYOK Identity description.
    :vartype identity: ~azure.mgmt.servicebus.models.Identity
    """

    sku: Optional["_models.SBSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of SKU."""
    properties: Optional["_models.SBNamespaceUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the namespace."""
    identity: Optional["_models.Identity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of BYOK Identity description."""

    __flattened_items = [
        "provisioning_state",
        "status",
        "created_at",
        "updated_at",
        "service_bus_endpoint",
        "metric_id",
        "encryption",
        "private_endpoint_connections",
        "disable_local_auth",
        "alternate_name",
    ]

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[dict[str, str]] = None,
        sku: Optional["_models.SBSku"] = None,
        properties: Optional["_models.SBNamespaceUpdateProperties"] = None,
        identity: Optional["_models.Identity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBNamespaceUpdateProperties(_Model):
    """Properties of the namespace.

    :ivar provisioning_state: Provisioning state of the namespace.
    :vartype provisioning_state: str
    :ivar status: Status of the namespace.
    :vartype status: str
    :ivar created_at: The time the namespace was created.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: The time the namespace was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar service_bus_endpoint: Endpoint you can use to perform Service Bus operations.
    :vartype service_bus_endpoint: str
    :ivar metric_id: Identifier for Azure Insights metrics.
    :vartype metric_id: str
    :ivar encryption: Properties of BYOK Encryption description.
    :vartype encryption: ~azure.mgmt.servicebus.models.Encryption
    :ivar private_endpoint_connections: List of private endpoint connections.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.servicebus.models.PrivateEndpointConnection]
    :ivar disable_local_auth: This property disables SAS authentication for the Service Bus
     namespace.
    :vartype disable_local_auth: bool
    :ivar alternate_name: Alternate name for namespace.
    :vartype alternate_name: str
    """

    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """Provisioning state of the namespace."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Status of the namespace."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The time the namespace was created."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """The time the namespace was updated."""
    service_bus_endpoint: Optional[str] = rest_field(name="serviceBusEndpoint", visibility=["read"])
    """Endpoint you can use to perform Service Bus operations."""
    metric_id: Optional[str] = rest_field(name="metricId", visibility=["read"])
    """Identifier for Azure Insights metrics."""
    encryption: Optional["_models.Encryption"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties of BYOK Encryption description."""
    private_endpoint_connections: Optional[list["_models.PrivateEndpointConnection"]] = rest_field(
        name="privateEndpointConnections", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of private endpoint connections."""
    disable_local_auth: Optional[bool] = rest_field(
        name="disableLocalAuth", visibility=["read", "create", "update", "delete", "query"]
    )
    """This property disables SAS authentication for the Service Bus namespace."""
    alternate_name: Optional[str] = rest_field(
        name="alternateName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Alternate name for namespace."""

    @overload
    def __init__(
        self,
        *,
        encryption: Optional["_models.Encryption"] = None,
        private_endpoint_connections: Optional[list["_models.PrivateEndpointConnection"]] = None,
        disable_local_auth: Optional[bool] = None,
        alternate_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBQueue(ProxyResource):
    """Description of queue Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Queue Properties.
    :vartype properties: ~azure.mgmt.servicebus.models.SBQueueProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.SBQueueProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Queue Properties."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "count_details",
        "created_at",
        "updated_at",
        "accessed_at",
        "size_in_bytes",
        "message_count",
        "lock_duration",
        "max_size_in_megabytes",
        "max_message_size_in_kilobytes",
        "requires_duplicate_detection",
        "requires_session",
        "default_message_time_to_live",
        "dead_lettering_on_message_expiration",
        "duplicate_detection_history_time_window",
        "max_delivery_count",
        "status",
        "enable_batched_operations",
        "auto_delete_on_idle",
        "enable_partitioning",
        "enable_express",
        "forward_to",
        "forward_dead_lettered_messages_to",
        "user_metadata",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SBQueueProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBQueueProperties(_Model):
    """The Queue Properties definition.

    :ivar count_details: Message Count Details.
    :vartype count_details: ~azure.mgmt.servicebus.models.MessageCountDetails
    :ivar created_at: The exact time the message was created.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: The exact time the message was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar accessed_at: Last time a message was sent, or the last time there was a receive request
     to this queue.
    :vartype accessed_at: ~datetime.datetime
    :ivar size_in_bytes: The size of the queue, in bytes.
    :vartype size_in_bytes: int
    :ivar message_count: The number of messages in the queue.
    :vartype message_count: int
    :ivar lock_duration: ISO 8601 timespan duration of a peek-lock; that is, the amount of time
     that the message is locked for other receivers. The maximum value for LockDuration is 5
     minutes; the default value is 1 minute.
    :vartype lock_duration: ~datetime.timedelta
    :ivar max_size_in_megabytes: The maximum size of the queue in megabytes, which is the size of
     memory allocated for the queue. Default is 1024.
    :vartype max_size_in_megabytes: int
    :ivar max_message_size_in_kilobytes: Maximum size (in KB) of the message payload that can be
     accepted by the queue. This property is only used in Premium today and default is 1024.
    :vartype max_message_size_in_kilobytes: int
    :ivar requires_duplicate_detection: A value indicating if this queue requires duplicate
     detection.
    :vartype requires_duplicate_detection: bool
    :ivar requires_session: A value that indicates whether the queue supports the concept of
     sessions.
    :vartype requires_session: bool
    :ivar default_message_time_to_live: ISO 8601 default message timespan to live value. This is
     the duration after which the message expires, starting from when the message is sent to Service
     Bus. This is the default value used when TimeToLive is not set on a message itself.
    :vartype default_message_time_to_live: ~datetime.timedelta
    :ivar dead_lettering_on_message_expiration: A value that indicates whether this queue has dead
     letter support when a message expires.
    :vartype dead_lettering_on_message_expiration: bool
    :ivar duplicate_detection_history_time_window: ISO 8601 timeSpan structure that defines the
     duration of the duplicate detection history. The default value is 10 minutes.
    :vartype duplicate_detection_history_time_window: ~datetime.timedelta
    :ivar max_delivery_count: The maximum delivery count. A message is automatically deadlettered
     after this number of deliveries. default value is 10.
    :vartype max_delivery_count: int
    :ivar status: Enumerates the possible values for the status of a messaging entity. Known values
     are: "Active", "Disabled", "Restoring", "SendDisabled", "ReceiveDisabled", "Creating",
     "Deleting", "Renaming", and "Unknown".
    :vartype status: str or ~azure.mgmt.servicebus.models.EntityStatus
    :ivar enable_batched_operations: Value that indicates whether server-side batched operations
     are enabled.
    :vartype enable_batched_operations: bool
    :ivar auto_delete_on_idle: ISO 8061 timeSpan idle interval after which the queue is
     automatically deleted. The minimum duration is 5 minutes.
    :vartype auto_delete_on_idle: ~datetime.timedelta
    :ivar enable_partitioning: A value that indicates whether the queue is to be partitioned across
     multiple message brokers.
    :vartype enable_partitioning: bool
    :ivar enable_express: A value that indicates whether Express Entities are enabled. An express
     queue holds a message in memory temporarily before writing it to persistent storage.
    :vartype enable_express: bool
    :ivar forward_to: Queue/Topic name to forward the messages.
    :vartype forward_to: str
    :ivar forward_dead_lettered_messages_to: Queue/Topic name to forward the Dead Letter message.
    :vartype forward_dead_lettered_messages_to: str
    :ivar user_metadata: Gets and Sets Metadata of User.
    :vartype user_metadata: str
    """

    count_details: Optional["_models.MessageCountDetails"] = rest_field(name="countDetails", visibility=["read"])
    """Message Count Details."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The exact time the message was created."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """The exact time the message was updated."""
    accessed_at: Optional[datetime.datetime] = rest_field(name="accessedAt", visibility=["read"], format="rfc3339")
    """Last time a message was sent, or the last time there was a receive request to this queue."""
    size_in_bytes: Optional[int] = rest_field(name="sizeInBytes", visibility=["read"])
    """The size of the queue, in bytes."""
    message_count: Optional[int] = rest_field(name="messageCount", visibility=["read"])
    """The number of messages in the queue."""
    lock_duration: Optional[datetime.timedelta] = rest_field(
        name="lockDuration", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is
     locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value
     is 1 minute."""
    max_size_in_megabytes: Optional[int] = rest_field(
        name="maxSizeInMegabytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum size of the queue in megabytes, which is the size of memory allocated for the
     queue. Default is 1024."""
    max_message_size_in_kilobytes: Optional[int] = rest_field(
        name="maxMessageSizeInKilobytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Maximum size (in KB) of the message payload that can be accepted by the queue. This property is
     only used in Premium today and default is 1024."""
    requires_duplicate_detection: Optional[bool] = rest_field(
        name="requiresDuplicateDetection", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value indicating if this queue requires duplicate detection."""
    requires_session: Optional[bool] = rest_field(
        name="requiresSession", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value that indicates whether the queue supports the concept of sessions."""
    default_message_time_to_live: Optional[datetime.timedelta] = rest_field(
        name="defaultMessageTimeToLive", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 default message timespan to live value. This is the duration after which the message
     expires, starting from when the message is sent to Service Bus. This is the default value used
     when TimeToLive is not set on a message itself."""
    dead_lettering_on_message_expiration: Optional[bool] = rest_field(
        name="deadLetteringOnMessageExpiration", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value that indicates whether this queue has dead letter support when a message expires."""
    duplicate_detection_history_time_window: Optional[datetime.timedelta] = rest_field(
        name="duplicateDetectionHistoryTimeWindow", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The
     default value is 10 minutes."""
    max_delivery_count: Optional[int] = rest_field(
        name="maxDeliveryCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum delivery count. A message is automatically deadlettered after this number of
     deliveries. default value is 10."""
    status: Optional[Union[str, "_models.EntityStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enumerates the possible values for the status of a messaging entity. Known values are:
     \"Active\", \"Disabled\", \"Restoring\", \"SendDisabled\", \"ReceiveDisabled\", \"Creating\",
     \"Deleting\", \"Renaming\", and \"Unknown\"."""
    enable_batched_operations: Optional[bool] = rest_field(
        name="enableBatchedOperations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether server-side batched operations are enabled."""
    auto_delete_on_idle: Optional[datetime.timedelta] = rest_field(
        name="autoDeleteOnIdle", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum
     duration is 5 minutes."""
    enable_partitioning: Optional[bool] = rest_field(
        name="enablePartitioning", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value that indicates whether the queue is to be partitioned across multiple message brokers."""
    enable_express: Optional[bool] = rest_field(
        name="enableExpress", visibility=["read", "create", "update", "delete", "query"]
    )
    """A value that indicates whether Express Entities are enabled. An express queue holds a message
     in memory temporarily before writing it to persistent storage."""
    forward_to: Optional[str] = rest_field(name="forwardTo", visibility=["read", "create", "update", "delete", "query"])
    """Queue/Topic name to forward the messages."""
    forward_dead_lettered_messages_to: Optional[str] = rest_field(
        name="forwardDeadLetteredMessagesTo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Queue/Topic name to forward the Dead Letter message."""
    user_metadata: Optional[str] = rest_field(
        name="userMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets and Sets Metadata of User."""

    @overload
    def __init__(
        self,
        *,
        lock_duration: Optional[datetime.timedelta] = None,
        max_size_in_megabytes: Optional[int] = None,
        max_message_size_in_kilobytes: Optional[int] = None,
        requires_duplicate_detection: Optional[bool] = None,
        requires_session: Optional[bool] = None,
        default_message_time_to_live: Optional[datetime.timedelta] = None,
        dead_lettering_on_message_expiration: Optional[bool] = None,
        duplicate_detection_history_time_window: Optional[datetime.timedelta] = None,
        max_delivery_count: Optional[int] = None,
        status: Optional[Union[str, "_models.EntityStatus"]] = None,
        enable_batched_operations: Optional[bool] = None,
        auto_delete_on_idle: Optional[datetime.timedelta] = None,
        enable_partitioning: Optional[bool] = None,
        enable_express: Optional[bool] = None,
        forward_to: Optional[str] = None,
        forward_dead_lettered_messages_to: Optional[str] = None,
        user_metadata: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBSku(_Model):
    """SKU of the namespace.

    :ivar name: Name of this SKU. Required. Known values are: "Basic", "Standard", and "Premium".
    :vartype name: str or ~azure.mgmt.servicebus.models.SkuName
    :ivar tier: The billing tier of this particular SKU. Known values are: "Basic", "Standard", and
     "Premium".
    :vartype tier: str or ~azure.mgmt.servicebus.models.SkuTier
    :ivar capacity: Messaging units for your service bus premium namespace. Valid capacities are
     {1, 2, 4, 8, 16} multiples of your properties.premiumMessagingPartitions setting. For example,
     If properties.premiumMessagingPartitions is 1 then possible capacity values are 1, 2, 4, 8, and
     16. If properties.premiumMessagingPartitions is 4 then possible capacity values are 4, 8, 16,
     32 and 64.
    :vartype capacity: int
    """

    name: Union[str, "_models.SkuName"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of this SKU. Required. Known values are: \"Basic\", \"Standard\", and \"Premium\"."""
    tier: Optional[Union[str, "_models.SkuTier"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The billing tier of this particular SKU. Known values are: \"Basic\", \"Standard\", and
     \"Premium\"."""
    capacity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Messaging units for your service bus premium namespace. Valid capacities are {1, 2, 4, 8, 16}
     multiples of your properties.premiumMessagingPartitions setting. For example, If
     properties.premiumMessagingPartitions is 1 then possible capacity values are 1, 2, 4, 8, and
     16. If properties.premiumMessagingPartitions is 4 then possible capacity values are 4, 8, 16,
     32 and 64."""

    @overload
    def __init__(
        self,
        *,
        name: Union[str, "_models.SkuName"],
        tier: Optional[Union[str, "_models.SkuTier"]] = None,
        capacity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBSubscription(ProxyResource):
    """Description of subscription resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties of subscriptions resource.
    :vartype properties: ~azure.mgmt.servicebus.models.SBSubscriptionProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.SBSubscriptionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of subscriptions resource."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "message_count",
        "created_at",
        "accessed_at",
        "updated_at",
        "count_details",
        "lock_duration",
        "requires_session",
        "default_message_time_to_live",
        "dead_lettering_on_filter_evaluation_exceptions",
        "dead_lettering_on_message_expiration",
        "duplicate_detection_history_time_window",
        "max_delivery_count",
        "status",
        "enable_batched_operations",
        "auto_delete_on_idle",
        "forward_to",
        "forward_dead_lettered_messages_to",
        "is_client_affine",
        "user_metadata",
        "client_affine_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SBSubscriptionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBSubscriptionProperties(_Model):
    """Description of Subscription Resource.

    :ivar message_count: Number of messages.
    :vartype message_count: int
    :ivar created_at: Exact time the message was created.
    :vartype created_at: ~datetime.datetime
    :ivar accessed_at: Last time there was a receive request to this subscription.
    :vartype accessed_at: ~datetime.datetime
    :ivar updated_at: The exact time the message was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar count_details: Message count details.
    :vartype count_details: ~azure.mgmt.servicebus.models.MessageCountDetails
    :ivar lock_duration: ISO 8061 lock duration timespan for the subscription. The default value is
     1 minute.
    :vartype lock_duration: ~datetime.timedelta
    :ivar requires_session: Value indicating if a subscription supports the concept of sessions.
    :vartype requires_session: bool
    :ivar default_message_time_to_live: ISO 8061 Default message timespan to live value. This is
     the duration after which the message expires, starting from when the message is sent to Service
     Bus. This is the default value used when TimeToLive is not set on a message itself.
    :vartype default_message_time_to_live: ~datetime.timedelta
    :ivar dead_lettering_on_filter_evaluation_exceptions: Value that indicates whether a
     subscription has dead letter support on filter evaluation exceptions.
    :vartype dead_lettering_on_filter_evaluation_exceptions: bool
    :ivar dead_lettering_on_message_expiration: Value that indicates whether a subscription has
     dead letter support when a message expires.
    :vartype dead_lettering_on_message_expiration: bool
    :ivar duplicate_detection_history_time_window: ISO 8601 timeSpan structure that defines the
     duration of the duplicate detection history. The default value is 10 minutes.
    :vartype duplicate_detection_history_time_window: ~datetime.timedelta
    :ivar max_delivery_count: Number of maximum deliveries.
    :vartype max_delivery_count: int
    :ivar status: Enumerates the possible values for the status of a messaging entity. Known values
     are: "Active", "Disabled", "Restoring", "SendDisabled", "ReceiveDisabled", "Creating",
     "Deleting", "Renaming", and "Unknown".
    :vartype status: str or ~azure.mgmt.servicebus.models.EntityStatus
    :ivar enable_batched_operations: Value that indicates whether server-side batched operations
     are enabled.
    :vartype enable_batched_operations: bool
    :ivar auto_delete_on_idle: ISO 8061 timeSpan idle interval after which the topic is
     automatically deleted. The minimum duration is 5 minutes.
    :vartype auto_delete_on_idle: ~datetime.timedelta
    :ivar forward_to: Queue/Topic name to forward the messages.
    :vartype forward_to: str
    :ivar forward_dead_lettered_messages_to: Queue/Topic name to forward the Dead Letter message.
    :vartype forward_dead_lettered_messages_to: str
    :ivar is_client_affine: Value that indicates whether the subscription has an affinity to the
     client id.
    :vartype is_client_affine: bool
    :ivar user_metadata: Gets and Sets Metadata of User.
    :vartype user_metadata: str
    :ivar client_affine_properties: Properties specific to client affine subscriptions.
    :vartype client_affine_properties: ~azure.mgmt.servicebus.models.SBClientAffineProperties
    """

    message_count: Optional[int] = rest_field(name="messageCount", visibility=["read"])
    """Number of messages."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """Exact time the message was created."""
    accessed_at: Optional[datetime.datetime] = rest_field(name="accessedAt", visibility=["read"], format="rfc3339")
    """Last time there was a receive request to this subscription."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """The exact time the message was updated."""
    count_details: Optional["_models.MessageCountDetails"] = rest_field(name="countDetails", visibility=["read"])
    """Message count details."""
    lock_duration: Optional[datetime.timedelta] = rest_field(
        name="lockDuration", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8061 lock duration timespan for the subscription. The default value is 1 minute."""
    requires_session: Optional[bool] = rest_field(
        name="requiresSession", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value indicating if a subscription supports the concept of sessions."""
    default_message_time_to_live: Optional[datetime.timedelta] = rest_field(
        name="defaultMessageTimeToLive", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8061 Default message timespan to live value. This is the duration after which the message
     expires, starting from when the message is sent to Service Bus. This is the default value used
     when TimeToLive is not set on a message itself."""
    dead_lettering_on_filter_evaluation_exceptions: Optional[bool] = rest_field(
        name="deadLetteringOnFilterEvaluationExceptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether a subscription has dead letter support on filter evaluation
     exceptions."""
    dead_lettering_on_message_expiration: Optional[bool] = rest_field(
        name="deadLetteringOnMessageExpiration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether a subscription has dead letter support when a message expires."""
    duplicate_detection_history_time_window: Optional[datetime.timedelta] = rest_field(
        name="duplicateDetectionHistoryTimeWindow", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The
     default value is 10 minutes."""
    max_delivery_count: Optional[int] = rest_field(
        name="maxDeliveryCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """Number of maximum deliveries."""
    status: Optional[Union[str, "_models.EntityStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enumerates the possible values for the status of a messaging entity. Known values are:
     \"Active\", \"Disabled\", \"Restoring\", \"SendDisabled\", \"ReceiveDisabled\", \"Creating\",
     \"Deleting\", \"Renaming\", and \"Unknown\"."""
    enable_batched_operations: Optional[bool] = rest_field(
        name="enableBatchedOperations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether server-side batched operations are enabled."""
    auto_delete_on_idle: Optional[datetime.timedelta] = rest_field(
        name="autoDeleteOnIdle", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum
     duration is 5 minutes."""
    forward_to: Optional[str] = rest_field(name="forwardTo", visibility=["read", "create", "update", "delete", "query"])
    """Queue/Topic name to forward the messages."""
    forward_dead_lettered_messages_to: Optional[str] = rest_field(
        name="forwardDeadLetteredMessagesTo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Queue/Topic name to forward the Dead Letter message."""
    is_client_affine: Optional[bool] = rest_field(
        name="isClientAffine", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the subscription has an affinity to the client id."""
    user_metadata: Optional[str] = rest_field(
        name="userMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets and Sets Metadata of User."""
    client_affine_properties: Optional["_models.SBClientAffineProperties"] = rest_field(
        name="clientAffineProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to client affine subscriptions."""

    @overload
    def __init__(
        self,
        *,
        lock_duration: Optional[datetime.timedelta] = None,
        requires_session: Optional[bool] = None,
        default_message_time_to_live: Optional[datetime.timedelta] = None,
        dead_lettering_on_filter_evaluation_exceptions: Optional[bool] = None,
        dead_lettering_on_message_expiration: Optional[bool] = None,
        duplicate_detection_history_time_window: Optional[datetime.timedelta] = None,
        max_delivery_count: Optional[int] = None,
        status: Optional[Union[str, "_models.EntityStatus"]] = None,
        enable_batched_operations: Optional[bool] = None,
        auto_delete_on_idle: Optional[datetime.timedelta] = None,
        forward_to: Optional[str] = None,
        forward_dead_lettered_messages_to: Optional[str] = None,
        is_client_affine: Optional[bool] = None,
        user_metadata: Optional[str] = None,
        client_affine_properties: Optional["_models.SBClientAffineProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SBTopic(ProxyResource):
    """Description of topic resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.servicebus.models.SystemData
    :ivar properties: Properties of topic resource.
    :vartype properties: ~azure.mgmt.servicebus.models.SBTopicProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.SBTopicProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of topic resource."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The geo-location where the resource lives."""

    __flattened_items = [
        "size_in_bytes",
        "created_at",
        "updated_at",
        "accessed_at",
        "subscription_count",
        "count_details",
        "default_message_time_to_live",
        "max_size_in_megabytes",
        "max_message_size_in_kilobytes",
        "requires_duplicate_detection",
        "duplicate_detection_history_time_window",
        "enable_batched_operations",
        "status",
        "support_ordering",
        "auto_delete_on_idle",
        "enable_partitioning",
        "enable_express",
        "user_metadata",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SBTopicProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SBTopicProperties(_Model):
    """The Topic Properties definition.

    :ivar size_in_bytes: Size of the topic, in bytes.
    :vartype size_in_bytes: int
    :ivar created_at: Exact time the message was created.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: The exact time the message was updated.
    :vartype updated_at: ~datetime.datetime
    :ivar accessed_at: Last time the message was sent, or a request was received, for this topic.
    :vartype accessed_at: ~datetime.datetime
    :ivar subscription_count: Number of subscriptions.
    :vartype subscription_count: int
    :ivar count_details: Message count details.
    :vartype count_details: ~azure.mgmt.servicebus.models.MessageCountDetails
    :ivar default_message_time_to_live: ISO 8601 Default message timespan to live value. This is
     the duration after which the message expires, starting from when the message is sent to Service
     Bus. This is the default value used when TimeToLive is not set on a message itself.
    :vartype default_message_time_to_live: ~datetime.timedelta
    :ivar max_size_in_megabytes: Maximum size of the topic in megabytes, which is the size of the
     memory allocated for the topic. Default is 1024.
    :vartype max_size_in_megabytes: int
    :ivar max_message_size_in_kilobytes: Maximum size (in KB) of the message payload that can be
     accepted by the topic. This property is only used in Premium today and default is 1024.
    :vartype max_message_size_in_kilobytes: int
    :ivar requires_duplicate_detection: Value indicating if this topic requires duplicate
     detection.
    :vartype requires_duplicate_detection: bool
    :ivar duplicate_detection_history_time_window: ISO8601 timespan structure that defines the
     duration of the duplicate detection history. The default value is 10 minutes.
    :vartype duplicate_detection_history_time_window: ~datetime.timedelta
    :ivar enable_batched_operations: Value that indicates whether server-side batched operations
     are enabled.
    :vartype enable_batched_operations: bool
    :ivar status: Enumerates the possible values for the status of a messaging entity. Known values
     are: "Active", "Disabled", "Restoring", "SendDisabled", "ReceiveDisabled", "Creating",
     "Deleting", "Renaming", and "Unknown".
    :vartype status: str or ~azure.mgmt.servicebus.models.EntityStatus
    :ivar support_ordering: Value that indicates whether the topic supports ordering.
    :vartype support_ordering: bool
    :ivar auto_delete_on_idle: ISO 8601 timespan idle interval after which the topic is
     automatically deleted. The minimum duration is 5 minutes.
    :vartype auto_delete_on_idle: ~datetime.timedelta
    :ivar enable_partitioning: Value that indicates whether the topic to be partitioned across
     multiple message brokers is enabled.
    :vartype enable_partitioning: bool
    :ivar enable_express: Value that indicates whether Express Entities are enabled. An express
     topic holds a message in memory temporarily before writing it to persistent storage.
    :vartype enable_express: bool
    :ivar user_metadata: Gets and Sets Metadata of User.
    :vartype user_metadata: str
    """

    size_in_bytes: Optional[int] = rest_field(name="sizeInBytes", visibility=["read"])
    """Size of the topic, in bytes."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """Exact time the message was created."""
    updated_at: Optional[datetime.datetime] = rest_field(name="updatedAt", visibility=["read"], format="rfc3339")
    """The exact time the message was updated."""
    accessed_at: Optional[datetime.datetime] = rest_field(name="accessedAt", visibility=["read"], format="rfc3339")
    """Last time the message was sent, or a request was received, for this topic."""
    subscription_count: Optional[int] = rest_field(name="subscriptionCount", visibility=["read"])
    """Number of subscriptions."""
    count_details: Optional["_models.MessageCountDetails"] = rest_field(name="countDetails", visibility=["read"])
    """Message count details."""
    default_message_time_to_live: Optional[datetime.timedelta] = rest_field(
        name="defaultMessageTimeToLive", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 Default message timespan to live value. This is the duration after which the message
     expires, starting from when the message is sent to Service Bus. This is the default value used
     when TimeToLive is not set on a message itself."""
    max_size_in_megabytes: Optional[int] = rest_field(
        name="maxSizeInMegabytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Maximum size of the topic in megabytes, which is the size of the memory allocated for the
     topic. Default is 1024."""
    max_message_size_in_kilobytes: Optional[int] = rest_field(
        name="maxMessageSizeInKilobytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Maximum size (in KB) of the message payload that can be accepted by the topic. This property is
     only used in Premium today and default is 1024."""
    requires_duplicate_detection: Optional[bool] = rest_field(
        name="requiresDuplicateDetection", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value indicating if this topic requires duplicate detection."""
    duplicate_detection_history_time_window: Optional[datetime.timedelta] = rest_field(
        name="duplicateDetectionHistoryTimeWindow", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO8601 timespan structure that defines the duration of the duplicate detection history. The
     default value is 10 minutes."""
    enable_batched_operations: Optional[bool] = rest_field(
        name="enableBatchedOperations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether server-side batched operations are enabled."""
    status: Optional[Union[str, "_models.EntityStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enumerates the possible values for the status of a messaging entity. Known values are:
     \"Active\", \"Disabled\", \"Restoring\", \"SendDisabled\", \"ReceiveDisabled\", \"Creating\",
     \"Deleting\", \"Renaming\", and \"Unknown\"."""
    support_ordering: Optional[bool] = rest_field(
        name="supportOrdering", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the topic supports ordering."""
    auto_delete_on_idle: Optional[datetime.timedelta] = rest_field(
        name="autoDeleteOnIdle", visibility=["read", "create", "update", "delete", "query"]
    )
    """ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum
     duration is 5 minutes."""
    enable_partitioning: Optional[bool] = rest_field(
        name="enablePartitioning", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the topic to be partitioned across multiple message brokers is
     enabled."""
    enable_express: Optional[bool] = rest_field(
        name="enableExpress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether Express Entities are enabled. An express topic holds a message in
     memory temporarily before writing it to persistent storage."""
    user_metadata: Optional[str] = rest_field(
        name="userMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets and Sets Metadata of User."""

    @overload
    def __init__(
        self,
        *,
        default_message_time_to_live: Optional[datetime.timedelta] = None,
        max_size_in_megabytes: Optional[int] = None,
        max_message_size_in_kilobytes: Optional[int] = None,
        requires_duplicate_detection: Optional[bool] = None,
        duplicate_detection_history_time_window: Optional[datetime.timedelta] = None,
        enable_batched_operations: Optional[bool] = None,
        status: Optional[Union[str, "_models.EntityStatus"]] = None,
        support_ordering: Optional[bool] = None,
        auto_delete_on_idle: Optional[datetime.timedelta] = None,
        enable_partitioning: Optional[bool] = None,
        enable_express: Optional[bool] = None,
        user_metadata: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SqlFilter(_Model):
    """Represents a filter which is a composition of an expression and an action that is executed in
    the pub/sub pipeline.

    :ivar sql_expression: The SQL expression. e.g. MyProperty='ABC'.
    :vartype sql_expression: str
    :ivar compatibility_level: This property is reserved for future use. An integer value showing
     the compatibility level, currently hard-coded to 20.
    :vartype compatibility_level: int
    :ivar requires_preprocessing: Value that indicates whether the rule action requires
     preprocessing.
    :vartype requires_preprocessing: bool
    """

    sql_expression: Optional[str] = rest_field(
        name="sqlExpression", visibility=["read", "create", "update", "delete", "query"]
    )
    """The SQL expression. e.g. MyProperty='ABC'."""
    compatibility_level: Optional[int] = rest_field(
        name="compatibilityLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """This property is reserved for future use. An integer value showing the compatibility level,
     currently hard-coded to 20."""
    requires_preprocessing: Optional[bool] = rest_field(
        name="requiresPreprocessing", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value that indicates whether the rule action requires preprocessing."""

    @overload
    def __init__(
        self,
        *,
        sql_expression: Optional[str] = None,
        compatibility_level: Optional[int] = None,
        requires_preprocessing: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Subnet(_Model):
    """Properties supplied for Subnet.

    :ivar id: Resource ID of Virtual Network Subnet. Required.
    :vartype id: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource ID of Virtual Network Subnet. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.servicebus.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.servicebus.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_Model):
    """Recognized Dictionary value.

    :ivar principal_id: Principal Id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: Client Id of user assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """Principal Id of user assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """Client Id of user assigned identity."""


class UserAssignedIdentityProperties(_Model):
    """UserAssignedIdentityProperties.

    :ivar user_assigned_identity: ARM ID of user Identity selected for encryption.
    :vartype user_assigned_identity: str
    """

    user_assigned_identity: Optional[str] = rest_field(
        name="userAssignedIdentity", visibility=["read", "create", "update", "delete", "query"]
    )
    """ARM ID of user Identity selected for encryption."""

    @overload
    def __init__(
        self,
        *,
        user_assigned_identity: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
