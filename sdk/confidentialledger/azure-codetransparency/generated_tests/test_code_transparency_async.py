# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import CodeTransparencyPreparer
from testpreparer_async import CodeTransparencyClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCodeTransparencyAsync(CodeTransparencyClientTestBaseAsync):
    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_create_entry(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.create_entry(
            body=bytes("bytes", encoding="utf-8"),
            content_type="str",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_entry_status(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_entry_status(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_list_entry_statuses(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.list_entry_statuses()

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_entry(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_entry(
            entry_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_entry_receipt(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_entry_receipt(
            entry_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_list_entry_ids(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = client.list_entry_ids()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_parameters(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_parameters()

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_did_config(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_did_config()

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_code_transparency_config(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_code_transparency_config()

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_code_transparency_version(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_code_transparency_version()

        # please add some check logic here by yourself
        # ...
