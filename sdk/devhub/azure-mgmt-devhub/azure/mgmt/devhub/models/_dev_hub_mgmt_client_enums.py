# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs."""

    INTERNAL = "Internal"


class AuthorizationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines the authorization status of requests."""

    AUTHORIZED = "Authorized"
    """Requests authorized successfully"""
    NOT_FOUND = "NotFound"
    """Requests returned NotFound response"""
    ERROR = "Error"
    """Requests returned other error response"""


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class DockerfileGenerationMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The mode of generation to be used for generating Dockerfiles."""

    ENABLED = "enabled"
    """Dockerfiles will be generated"""
    DISABLED = "disabled"
    """Dockerfiles will not be generated"""


class GenerationLanguage(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The programming language used."""

    CLOJURE = "clojure"
    """clojure language"""
    CSHARP = "csharp"
    """csharp language"""
    ERLANG = "erlang"
    """erlang language"""
    GO = "go"
    """go language"""
    GOMODULE = "gomodule"
    """gomodule language"""
    GRADLE = "gradle"
    """gradle language"""
    JAVA = "java"
    """java language"""
    JAVASCRIPT = "javascript"
    """javascript language"""
    PHP = "php"
    """php language"""
    PYTHON = "python"
    """python language"""
    RUBY = "ruby"
    """ruby language"""
    RUST = "rust"
    """rust language"""
    SWIFT = "swift"
    """swift language"""


class GenerationManifestType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines the type of manifests to be generated."""

    HELM = "helm"
    """Helm manifests"""
    KUBE = "kube"
    """Kubernetes manifests"""


class ManifestGenerationMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The mode of generation to be used for generating Manifest."""

    ENABLED = "enabled"
    """Manifests will be generated"""
    DISABLED = "disabled"
    """Manifests will not be generated"""


class ManifestType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines the type of manifests within the repository."""

    HELM = "helm"
    """Repositories using helm"""
    KUBE = "kube"
    """Repositories using kubernetes manifests"""


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system".
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"


class ParameterKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the template parameter."""

    AZURE_CONTAINER_REGISTRY = "azureContainerRegistry"
    """azure container registry name"""
    AZURE_KEYVAULT_URI = "azureKeyvaultUri"
    """azure keyvault uri"""
    AZURE_MANAGED_CLUSTER = "azureManagedCluster"
    """azure managed cluster name"""
    AZURE_RESOURCE_GROUP = "azureResourceGroup"
    """azure resource group"""
    AZURE_SERVICE_CONNECTION = "azureServiceConnection"
    """azure service connection"""
    CONTAINER_IMAGE_NAME = "containerImageName"
    """container image name"""
    CONTAINER_IMAGE_VERSION = "containerImageVersion"
    """container image version"""
    CLUSTER_RESOURCE_TYPE = "clusterResourceType"
    """cluster resource type"""
    DIR_PATH = "dirPath"
    """directory path"""
    DOCKER_FILE_NAME = "dockerFileName"
    """dockerfile name"""
    ENV_VAR_MAP = "envVarMap"
    """environment variables in the form of a json object"""
    FILE_PATH = "filePath"
    """file path"""
    FLAG = "flag"
    """boolean flag"""
    HELM_CHART_OVERRIDES = "helmChartOverrides"
    """helm overrides in the form of a string key1=value1,key2=value2"""
    IMAGE_PULL_POLICY = "imagePullPolicy"
    """kubernetes deployment image pull policy"""
    INGRESS_HOST_NAME = "ingressHostName"
    """kubernetes ingress host name"""
    KUBERNETES_NAMESPACE = "kubernetesNamespace"
    """kubernetes namespace"""
    KUBERNETES_PROBE_HTTP_PATH = "kubernetesProbeHttpPath"
    """kubernetes probe http path"""
    KUBERNETES_PROBE_PERIOD = "kubernetesProbePeriod"
    """kubernetes probe period"""
    KUBERNETES_PROBE_TIMEOUT = "kubernetesProbeTimeout"
    """kubernetes probe timeout"""
    KUBERNETES_PROBE_THRESHOLD = "kubernetesProbeThreshold"
    """kubernetes probe threshold"""
    KUBERNETES_PROBE_TYPE = "kubernetesProbeType"
    """kubernetes probe type"""
    KUBERNETES_PROBE_DELAY = "kubernetesProbeDelay"
    """kubernetes probe delay"""
    KUBERNETES_RESOURCE_LIMIT = "kubernetesResourceLimit"
    """kubernetes resource limit"""
    KUBERNETES_RESOURCE_NAME = "kubernetesResourceName"
    """kubernetes resource name"""
    KUBERNETES_RESOURCE_REQUEST = "kubernetesResourceRequest"
    """kubernetes resource request"""
    LABEL = "label"
    """kubernetes label value"""
    PORT = "port"
    """service port"""
    REPOSITORY_BRANCH = "repositoryBranch"
    """repository branch name"""
    WORKFLOW_NAME = "workflowName"
    """workflow name"""
    REPLICA_COUNT = "replicaCount"
    """kubernetes replica count"""
    SCALING_RESOURCE_TYPE = "scalingResourceType"
    """kubernetes scaling resource type"""
    SCALING_RESOURCE_UTILIZATION = "scalingResourceUtilization"
    """kubernetes resource utilization type"""
    RESOURCE_LIMIT = "resourceLimit"
    """kubernetes resource limit"""
    WORKFLOW_AUTH_TYPE = "workflowAuthType"
    """workflow authentication type"""


class ParameterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the template parameter."""

    STRING = "string"
    """string parameter type."""
    BOOL = "bool"
    """boolean parameter type."""
    INT = "int"
    """int parameter type."""
    FLOAT = "float"
    """float parameter type."""
    OBJECT = "object"
    """object parameter type."""
    INT_ENUM = "int"
    """int parameter type."""


class PullRequestStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the Pull Request submitted against the users repository."""

    UNKNOWN = "unknown"
    """Pull Request state unknown."""
    SUBMITTED = "submitted"
    """Pull Request submitted to repository."""
    MERGED = "merged"
    """Pull Request merged into repository."""
    REMOVED = "removed"
    """Workflow no longer found within repository."""


class QuickStartTemplateType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines the authorization status of requests."""

    NONE = "None"
    """The template has not use quick start template"""
    HCI = "HCI"
    """The template use quick start template of HCI"""
    HCIAKS = "HCIAKS"
    """The template use quick start template of HCI and AKS"""
    HCIARCVM = "HCIARCVM"
    """The template use quick start template of HCI and ArcVM"""


class RepositoryProviderType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the Pull Request submitted against the users repository."""

    GITHUB = "github"
    """GitHub repository provider type."""
    ADO = "ado"
    """ADO repository provider type."""


class TemplateType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the template."""

    DEPLOYMENT = "deployment"
    """Deployment template type."""
    MANIFEST = "manifest"
    """Manifest template type."""
    WORKFLOW = "workflow"
    """Workflow template type."""
    DOCKERFILE = "dockerfile"
    """Dockerfile template type."""


class WorkflowRunStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes the status of the workflow run."""

    QUEUED = "queued"
    """Workflow run is queued"""
    INPROGRESS = "inprogress"
    """Workflow run is inprogress"""
    COMPLETED = "completed"
    """Workflow run is completed"""
