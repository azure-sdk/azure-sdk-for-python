# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devhub.aio import DevHubMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevHubMgmtWorkflowOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevHubMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.workflow.list(
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.workflow.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-08-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.workflow.get(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.workflow.create_or_update(
            resource_group_name=resource_group.name,
            workflow_name="str",
            parameters={
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "artifactGenerationProperties": {
                        "appName": "str",
                        "builderVersion": "str",
                        "dockerfileGenerationMode": "str",
                        "dockerfileOutputDirectory": "str",
                        "generationLanguage": "str",
                        "imageName": "str",
                        "imageTag": "str",
                        "languageVersion": "str",
                        "manifestGenerationMode": "str",
                        "manifestOutputDirectory": "str",
                        "manifestType": "str",
                        "namespace": "str",
                        "port": "str",
                    },
                    "azurePipelineProfile": {
                        "acr": "str",
                        "armServiceConnection": "str",
                        "authStatus": "str",
                        "build": {"dockerBuildContext": "str", "dockerfile": "str"},
                        "clusterId": "str",
                        "deployment": {
                            "helmChartPath": "str",
                            "helmValues": "str",
                            "kubeManifestLocations": ["str"],
                            "manifestType": "str",
                            "overrides": {"str": "str"},
                        },
                        "lastWorkflowRun": {
                            "lastRunAt": "2020-02-20 00:00:00",
                            "succeeded": bool,
                            "workflowRunStatus": "str",
                            "workflowRunURL": "str",
                        },
                        "namespace": "str",
                        "pullRequest": {"prStatus": "str", "prURL": "str", "pullNumber": 0},
                        "repository": {
                            "adoOrganization": "str",
                            "branchName": "str",
                            "projectName": "str",
                            "repositoryName": "str",
                            "repositoryOwner": "str",
                        },
                    },
                    "githubWorkflowProfile": {
                        "acr": {
                            "acrRegistryName": "str",
                            "acrRepositoryName": "str",
                            "acrResourceGroup": "str",
                            "acrSubscriptionId": "str",
                        },
                        "aksResourceId": "str",
                        "authStatus": "str",
                        "branchName": "str",
                        "deploymentProperties": {
                            "helmChartPath": "str",
                            "helmValues": "str",
                            "kubeManifestLocations": ["str"],
                            "manifestType": "str",
                            "overrides": {"str": "str"},
                        },
                        "dockerBuildContext": "str",
                        "dockerfile": "str",
                        "lastWorkflowRun": {
                            "lastRunAt": "2020-02-20 00:00:00",
                            "succeeded": bool,
                            "workflowRunStatus": "str",
                            "workflowRunURL": "str",
                        },
                        "namespace": "str",
                        "oidcCredentials": {"azureClientId": "str", "azureTenantId": "str"},
                        "prStatus": "str",
                        "prURL": "str",
                        "pullNumber": 0,
                        "repositoryName": "str",
                        "repositoryOwner": "str",
                    },
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.workflow.delete(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update_tags(self, resource_group):
        response = await self.client.workflow.update_tags(
            resource_group_name=resource_group.name,
            workflow_name="str",
            parameters={"tags": {"str": "str"}},
            api_version="2024-08-01-preview",
        )

        # please add some check logic here by yourself
        # ...
