# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AddRemoveDbNode(_serialization.Model):
    """Add/Remove (Virtual Machine) DbNode model.

    All required parameters must be populated in order to send to Azure.

    :ivar db_servers: Db servers ocids. Required.
    :vartype db_servers: list[str]
    """

    _validation = {
        "db_servers": {"required": True},
    }

    _attribute_map = {
        "db_servers": {"key": "dbServers", "type": "[str]"},
    }

    def __init__(self, *, db_servers: List[str], **kwargs: Any) -> None:
        """
        :keyword db_servers: Db servers ocids. Required.
        :paramtype db_servers: list[str]
        """
        super().__init__(**kwargs)
        self.db_servers = db_servers


class CloudAccountDetails(_serialization.Model):
    """Cloud Account Details model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar cloud_account_name: Cloud Account name.
    :vartype cloud_account_name: str
    :ivar cloud_account_home_region: Cloud Account Home region.
    :vartype cloud_account_home_region: str
    """

    _validation = {
        "cloud_account_name": {"readonly": True},
        "cloud_account_home_region": {"readonly": True},
    }

    _attribute_map = {
        "cloud_account_name": {"key": "cloudAccountName", "type": "str"},
        "cloud_account_home_region": {"key": "cloudAccountHomeRegion", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.cloud_account_name = None
        self.cloud_account_home_region = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class CloudExadataInfrastructure(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """CloudExadataInfrastructure resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar zones: CloudExadataInfrastructure zones. Required.
    :vartype zones: list[str]
    :ivar ocid: Exadata infra ocid.
    :vartype ocid: str
    :ivar compute_count: The number of compute servers for the cloud Exadata infrastructure.
    :vartype compute_count: int
    :ivar storage_count: The number of storage servers for the cloud Exadata infrastructure.
    :vartype storage_count: int
    :ivar total_storage_size_in_gbs: The total storage allocated to the cloud Exadata
     infrastructure resource, in gigabytes (GB).
    :vartype total_storage_size_in_gbs: int
    :ivar available_storage_size_in_gbs: The available storage can be allocated to the cloud
     Exadata infrastructure resource, in gigabytes (GB).
    :vartype available_storage_size_in_gbs: int
    :ivar time_created: The date and time the cloud Exadata infrastructure resource was created.
    :vartype time_created: str
    :ivar lifecycle_details: Additional information about the current lifecycle state.
    :vartype lifecycle_details: str
    :ivar maintenance_window: maintenanceWindow property.
    :vartype maintenance_window: ~azure.mgmt.oracledatabase.models.MaintenanceWindow
    :ivar estimated_patching_time: The estimated total time required in minutes for all patching
     operations (database server, storage server, and network switch patching).
    :vartype estimated_patching_time: ~azure.mgmt.oracledatabase.models.EstimatedPatchingTime
    :ivar customer_contacts: The list of customer email addresses that receive information from
     Oracle about the specified OCI Database service resource. Oracle uses these email addresses to
     send notifications about planned and unplanned software maintenance updates, information about
     system hardware, and other information needed by administrators. Up to 10 email addresses can
     be added to the customer contacts for a cloud Exadata infrastructure instance.
    :vartype customer_contacts: list[~azure.mgmt.oracledatabase.models.CustomerContact]
    :ivar provisioning_state: CloudExadataInfrastructure provisioning state. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Available", "Updating", "Terminating",
     "Terminated", and "MaintenanceInProgress".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.CloudExadataInfrastructureProvisioningState
    :ivar shape: The model name of the cloud Exadata infrastructure resource.
    :vartype shape: str
    :ivar oci_url: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
    :vartype oci_url: str
    :ivar cpu_count: The total number of CPU cores allocated.
    :vartype cpu_count: int
    :ivar max_cpu_count: The total number of CPU cores available.
    :vartype max_cpu_count: int
    :ivar memory_size_in_gbs: The memory allocated in GBs.
    :vartype memory_size_in_gbs: int
    :ivar max_memory_in_gbs: The total memory available in GBs.
    :vartype max_memory_in_gbs: int
    :ivar db_node_storage_size_in_gbs: The local node storage to be allocated in GBs.
    :vartype db_node_storage_size_in_gbs: int
    :ivar max_db_node_storage_size_in_gbs: The total local node storage available in GBs.
    :vartype max_db_node_storage_size_in_gbs: int
    :ivar data_storage_size_in_tbs: The quantity of data in the database, in terabytes.
    :vartype data_storage_size_in_tbs: int
    :ivar max_data_storage_in_tbs: The total available DATA disk group size.
    :vartype max_data_storage_in_tbs: float
    :ivar db_server_version: The software version of the database servers (dom0) in the Exadata
     infrastructure.
    :vartype db_server_version: str
    :ivar storage_server_version: The software version of the storage servers (cells) in the
     Exadata infrastructure.
    :vartype storage_server_version: str
    :ivar activated_storage_count: The requested number of additional storage servers activated for
     the Exadata infrastructure.
    :vartype activated_storage_count: int
    :ivar additional_storage_count: The requested number of additional storage servers for the
     Exadata infrastructure.
    :vartype additional_storage_count: int
    :ivar display_name: The name for the Exadata infrastructure.
    :vartype display_name: str
    :ivar last_maintenance_run_id: The OCID of the last maintenance run.
    :vartype last_maintenance_run_id: str
    :ivar next_maintenance_run_id: The OCID of the next maintenance run.
    :vartype next_maintenance_run_id: str
    :ivar monthly_db_server_version: Monthly Db Server version.
    :vartype monthly_db_server_version: str
    :ivar monthly_storage_server_version: Monthly Storage Server version.
    :vartype monthly_storage_server_version: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "zones": {"required": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "total_storage_size_in_gbs": {"readonly": True},
        "available_storage_size_in_gbs": {"readonly": True},
        "time_created": {"readonly": True},
        "lifecycle_details": {"readonly": True},
        "estimated_patching_time": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "oci_url": {"readonly": True},
        "cpu_count": {"readonly": True},
        "max_cpu_count": {"readonly": True},
        "memory_size_in_gbs": {"readonly": True},
        "max_memory_in_gbs": {"readonly": True},
        "db_node_storage_size_in_gbs": {"readonly": True},
        "max_db_node_storage_size_in_gbs": {"readonly": True},
        "data_storage_size_in_tbs": {"readonly": True},
        "max_data_storage_in_tbs": {"readonly": True},
        "db_server_version": {"readonly": True},
        "storage_server_version": {"readonly": True},
        "activated_storage_count": {"readonly": True},
        "additional_storage_count": {"readonly": True},
        "display_name": {"max_length": 255, "min_length": 1},
        "last_maintenance_run_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "next_maintenance_run_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "monthly_db_server_version": {"readonly": True},
        "monthly_storage_server_version": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "zones": {"key": "zones", "type": "[str]"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "compute_count": {"key": "properties.computeCount", "type": "int"},
        "storage_count": {"key": "properties.storageCount", "type": "int"},
        "total_storage_size_in_gbs": {"key": "properties.totalStorageSizeInGbs", "type": "int"},
        "available_storage_size_in_gbs": {"key": "properties.availableStorageSizeInGbs", "type": "int"},
        "time_created": {"key": "properties.timeCreated", "type": "str"},
        "lifecycle_details": {"key": "properties.lifecycleDetails", "type": "str"},
        "maintenance_window": {"key": "properties.maintenanceWindow", "type": "MaintenanceWindow"},
        "estimated_patching_time": {"key": "properties.estimatedPatchingTime", "type": "EstimatedPatchingTime"},
        "customer_contacts": {"key": "properties.customerContacts", "type": "[CustomerContact]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "shape": {"key": "properties.shape", "type": "str"},
        "oci_url": {"key": "properties.ociUrl", "type": "str"},
        "cpu_count": {"key": "properties.cpuCount", "type": "int"},
        "max_cpu_count": {"key": "properties.maxCpuCount", "type": "int"},
        "memory_size_in_gbs": {"key": "properties.memorySizeInGbs", "type": "int"},
        "max_memory_in_gbs": {"key": "properties.maxMemoryInGbs", "type": "int"},
        "db_node_storage_size_in_gbs": {"key": "properties.dbNodeStorageSizeInGbs", "type": "int"},
        "max_db_node_storage_size_in_gbs": {"key": "properties.maxDbNodeStorageSizeInGbs", "type": "int"},
        "data_storage_size_in_tbs": {"key": "properties.dataStorageSizeInTbs", "type": "int"},
        "max_data_storage_in_tbs": {"key": "properties.maxDataStorageInTbs", "type": "float"},
        "db_server_version": {"key": "properties.dbServerVersion", "type": "str"},
        "storage_server_version": {"key": "properties.storageServerVersion", "type": "str"},
        "activated_storage_count": {"key": "properties.activatedStorageCount", "type": "int"},
        "additional_storage_count": {"key": "properties.additionalStorageCount", "type": "int"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "last_maintenance_run_id": {"key": "properties.lastMaintenanceRunId", "type": "str"},
        "next_maintenance_run_id": {"key": "properties.nextMaintenanceRunId", "type": "str"},
        "monthly_db_server_version": {"key": "properties.monthlyDbServerVersion", "type": "str"},
        "monthly_storage_server_version": {"key": "properties.monthlyStorageServerVersion", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        location: str,
        zones: List[str],
        tags: Optional[Dict[str, str]] = None,
        compute_count: Optional[int] = None,
        storage_count: Optional[int] = None,
        maintenance_window: Optional["_models.MaintenanceWindow"] = None,
        customer_contacts: Optional[List["_models.CustomerContact"]] = None,
        shape: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword zones: CloudExadataInfrastructure zones. Required.
        :paramtype zones: list[str]
        :keyword compute_count: The number of compute servers for the cloud Exadata infrastructure.
        :paramtype compute_count: int
        :keyword storage_count: The number of storage servers for the cloud Exadata infrastructure.
        :paramtype storage_count: int
        :keyword maintenance_window: maintenanceWindow property.
        :paramtype maintenance_window: ~azure.mgmt.oracledatabase.models.MaintenanceWindow
        :keyword customer_contacts: The list of customer email addresses that receive information from
         Oracle about the specified OCI Database service resource. Oracle uses these email addresses to
         send notifications about planned and unplanned software maintenance updates, information about
         system hardware, and other information needed by administrators. Up to 10 email addresses can
         be added to the customer contacts for a cloud Exadata infrastructure instance.
        :paramtype customer_contacts: list[~azure.mgmt.oracledatabase.models.CustomerContact]
        :keyword shape: The model name of the cloud Exadata infrastructure resource.
        :paramtype shape: str
        :keyword display_name: The name for the Exadata infrastructure.
        :paramtype display_name: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.zones = zones
        self.ocid = None
        self.compute_count = compute_count
        self.storage_count = storage_count
        self.total_storage_size_in_gbs = None
        self.available_storage_size_in_gbs = None
        self.time_created = None
        self.lifecycle_details = None
        self.maintenance_window = maintenance_window
        self.estimated_patching_time = None
        self.customer_contacts = customer_contacts
        self.provisioning_state = None
        self.shape = shape
        self.oci_url = None
        self.cpu_count = None
        self.max_cpu_count = None
        self.memory_size_in_gbs = None
        self.max_memory_in_gbs = None
        self.db_node_storage_size_in_gbs = None
        self.max_db_node_storage_size_in_gbs = None
        self.data_storage_size_in_tbs = None
        self.max_data_storage_in_tbs = None
        self.db_server_version = None
        self.storage_server_version = None
        self.activated_storage_count = None
        self.additional_storage_count = None
        self.display_name = display_name
        self.last_maintenance_run_id = None
        self.next_maintenance_run_id = None
        self.monthly_db_server_version = None
        self.monthly_storage_server_version = None


class CloudExadataInfrastructureListResult(_serialization.Model):
    """The response of a CloudExadataInfrastructure list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The CloudExadataInfrastructure items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.CloudExadataInfrastructure]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[CloudExadataInfrastructure]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.CloudExadataInfrastructure"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The CloudExadataInfrastructure items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.CloudExadataInfrastructure]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CloudExadataInfrastructureUpdate(_serialization.Model):
    """The type used for update operations of the CloudExadataInfrastructure.

    :ivar zones: CloudExadataInfrastructure zones.
    :vartype zones: list[str]
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "zones": {"key": "zones", "type": "[str]"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self, *, zones: Optional[List[str]] = None, tags: Optional[Dict[str, str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword zones: CloudExadataInfrastructure zones.
        :paramtype zones: list[str]
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.zones = zones
        self.tags = tags


class CloudVmCluster(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """CloudVmCluster resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar ocid: Cloud VM Cluster ocid.
    :vartype ocid: str
    :ivar listener_port: The port number configured for the listener on the cloud VM cluster.
    :vartype listener_port: int
    :ivar node_count: The number of nodes in the cloud VM cluster.
    :vartype node_count: int
    :ivar storage_size_in_gbs: The data disk group size to be allocated in GBs per VM.
    :vartype storage_size_in_gbs: int
    :ivar data_storage_size_in_tbs: The data disk group size to be allocated in TBs.
    :vartype data_storage_size_in_tbs: float
    :ivar db_node_storage_size_in_gbs: The local node storage to be allocated in GBs.
    :vartype db_node_storage_size_in_gbs: int
    :ivar memory_size_in_gbs: The memory to be allocated in GBs.
    :vartype memory_size_in_gbs: int
    :ivar time_created: The date and time that the cloud VM cluster was created.
    :vartype time_created: ~datetime.datetime
    :ivar lifecycle_details: Additional information about the current lifecycle state.
    :vartype lifecycle_details: str
    :ivar time_zone: The time zone of the cloud VM cluster. For details, see `Exadata
     Infrastructure Time Zones </Content/Database/References/timezones.htm>`_.
    :vartype time_zone: str
    :ivar zone_id: The OCID of the zone the cloud VM cluster is associated with.
    :vartype zone_id: str
    :ivar hostname: The hostname for the cloud VM cluster.
    :vartype hostname: str
    :ivar domain: The domain name for the cloud VM cluster.
    :vartype domain: str
    :ivar cpu_core_count: The number of CPU cores enabled on the cloud VM cluster.
    :vartype cpu_core_count: int
    :ivar ocpu_count: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal
     place is allowed for the fractional part.
    :vartype ocpu_count: float
    :ivar cluster_name: The cluster name for cloud VM cluster. The cluster name must begin with an
     alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
     cluster name can be no longer than 11 characters and is not case sensitive.
    :vartype cluster_name: str
    :ivar data_storage_percentage: The percentage assigned to DATA storage (user data and database
     files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs,
     and recovery manager backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent
     assigned to DATA storage. See `Storage Configuration
     </Content/Database/Concepts/exaoverview.htm#Exadata>`_ in the Exadata documentation for details
     on the impact of the configuration settings on storage.
    :vartype data_storage_percentage: int
    :ivar is_local_backup_enabled: If true, database backup on local Exadata storage is configured
     for the cloud VM cluster. If false, database backup on local Exadata storage is not available
     in the cloud VM cluster.
    :vartype is_local_backup_enabled: bool
    :ivar cloud_exadata_infrastructure_id: Cloud Exadata Infrastructure ID.
    :vartype cloud_exadata_infrastructure_id: str
    :ivar is_sparse_diskgroup_enabled: If true, sparse disk group is configured for the cloud VM
     cluster. If false, sparse disk group is not created.
    :vartype is_sparse_diskgroup_enabled: bool
    :ivar system_version: Operating system version of the image.
    :vartype system_version: str
    :ivar ssh_public_keys: The public key portion of one or more key pairs used for SSH access to
     the cloud VM cluster.
    :vartype ssh_public_keys: list[str]
    :ivar license_model: The Oracle license model that applies to the cloud VM cluster. The default
     is LICENSE_INCLUDED. Known values are: "LicenseIncluded" and "BringYourOwnLicense".
    :vartype license_model: str or ~azure.mgmt.oracledatabase.models.LicenseModel
    :ivar disk_redundancy: The type of redundancy configured for the cloud Vm cluster. NORMAL is
     2-way redundancy. HIGH is 3-way redundancy. Known values are: "High" and "Normal".
    :vartype disk_redundancy: str or ~azure.mgmt.oracledatabase.models.DiskRedundancy
    :ivar scan_ip_ids: The Single Client Access Name (SCAN) IP addresses associated with the cloud
     VM cluster. SCAN IP addresses are typically used for load balancing and are not assigned to any
     interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster.
     **Note:** For a single-node DB system, this list is empty.
    :vartype scan_ip_ids: list[str]
    :ivar vip_ids: The virtual IP (VIP) addresses associated with the cloud VM cluster. The Cluster
     Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud
     Service instance to enable failover. If one node fails, the VIP is reassigned to another active
     node in the cluster.  **Note:** For a single-node DB system, this list is empty.
    :vartype vip_ids: list[str]
    :ivar scan_dns_name: The FQDN of the DNS record for the SCAN IP addresses that are associated
     with the cloud VM cluster.
    :vartype scan_dns_name: str
    :ivar scan_listener_port_tcp: The TCP Single Client Access Name (SCAN) port. The default port
     is 1521.
    :vartype scan_listener_port_tcp: int
    :ivar scan_listener_port_tcp_ssl: The TCPS Single Client Access Name (SCAN) port. The default
     port is 2484.
    :vartype scan_listener_port_tcp_ssl: int
    :ivar scan_dns_record_id: The OCID of the DNS record for the SCAN IP addresses that are
     associated with the cloud VM cluster.
    :vartype scan_dns_record_id: str
    :ivar shape: The model name of the Exadata hardware running the cloud VM cluster.
    :vartype shape: str
    :ivar provisioning_state: CloudVmCluster provisioning state. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Available", "Updating", "Terminating", "Terminated", and
     "MaintenanceInProgress".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.CloudVmClusterProvisioningState
    :ivar vnet_id: VNET for network connectivity.
    :vartype vnet_id: str
    :ivar gi_version: Oracle Grid Infrastructure (GI) software version.
    :vartype gi_version: str
    :ivar oci_url: HTTPS link to OCI resources exposed to Azure Customer via Azure Interface.
    :vartype oci_url: str
    :ivar subnet_id: Client subnet.
    :vartype subnet_id: str
    :ivar backup_subnet_cidr: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
    :vartype backup_subnet_cidr: str
    :ivar data_collection_options: Indicates user preferences for the various diagnostic collection
     options for the VM cluster/Cloud VM cluster/VMBM DBCS.
    :vartype data_collection_options: ~azure.mgmt.oracledatabase.models.DataCollectionOptions
    :ivar display_name: Display Name.
    :vartype display_name: str
    :ivar compute_nodes: The list of compute servers to be added to the cloud VM cluster.
    :vartype compute_nodes: list[str]
    :ivar iorm_config_cache: iormConfigCache details for cloud VM cluster.
    :vartype iorm_config_cache: ~azure.mgmt.oracledatabase.models.ExadataIormConfig
    :ivar last_update_history_entry_id: The OCID of the last maintenance update history entry.
    :vartype last_update_history_entry_id: str
    :ivar db_servers: The list of DB servers.
    :vartype db_servers: list[str]
    :ivar compartment_id: Cluster compartmentId.
    :vartype compartment_id: str
    :ivar subnet_ocid: Cluster subnet ocid.
    :vartype subnet_ocid: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "listener_port": {"readonly": True},
        "node_count": {"readonly": True},
        "time_created": {"readonly": True},
        "lifecycle_details": {"readonly": True},
        "time_zone": {"max_length": 255, "min_length": 1},
        "zone_id": {"max_length": 255, "min_length": 1},
        "cluster_name": {"max_length": 11, "min_length": 1},
        "system_version": {"readonly": True, "max_length": 255, "min_length": 1},
        "disk_redundancy": {"readonly": True},
        "scan_ip_ids": {"readonly": True},
        "vip_ids": {"readonly": True},
        "scan_dns_name": {"readonly": True, "max_length": 72, "min_length": 1},
        "scan_dns_record_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "shape": {"readonly": True, "max_length": 255, "min_length": 1},
        "provisioning_state": {"readonly": True},
        "oci_url": {"readonly": True},
        "backup_subnet_cidr": {"max_length": 32, "min_length": 1},
        "display_name": {"max_length": 255, "min_length": 1},
        "iorm_config_cache": {"readonly": True},
        "last_update_history_entry_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "compartment_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "subnet_ocid": {"readonly": True, "max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "listener_port": {"key": "properties.listenerPort", "type": "int"},
        "node_count": {"key": "properties.nodeCount", "type": "int"},
        "storage_size_in_gbs": {"key": "properties.storageSizeInGbs", "type": "int"},
        "data_storage_size_in_tbs": {"key": "properties.dataStorageSizeInTbs", "type": "float"},
        "db_node_storage_size_in_gbs": {"key": "properties.dbNodeStorageSizeInGbs", "type": "int"},
        "memory_size_in_gbs": {"key": "properties.memorySizeInGbs", "type": "int"},
        "time_created": {"key": "properties.timeCreated", "type": "iso-8601"},
        "lifecycle_details": {"key": "properties.lifecycleDetails", "type": "str"},
        "time_zone": {"key": "properties.timeZone", "type": "str"},
        "zone_id": {"key": "properties.zoneId", "type": "str"},
        "hostname": {"key": "properties.hostname", "type": "str"},
        "domain": {"key": "properties.domain", "type": "str"},
        "cpu_core_count": {"key": "properties.cpuCoreCount", "type": "int"},
        "ocpu_count": {"key": "properties.ocpuCount", "type": "float"},
        "cluster_name": {"key": "properties.clusterName", "type": "str"},
        "data_storage_percentage": {"key": "properties.dataStoragePercentage", "type": "int"},
        "is_local_backup_enabled": {"key": "properties.isLocalBackupEnabled", "type": "bool"},
        "cloud_exadata_infrastructure_id": {"key": "properties.cloudExadataInfrastructureId", "type": "str"},
        "is_sparse_diskgroup_enabled": {"key": "properties.isSparseDiskgroupEnabled", "type": "bool"},
        "system_version": {"key": "properties.systemVersion", "type": "str"},
        "ssh_public_keys": {"key": "properties.sshPublicKeys", "type": "[str]"},
        "license_model": {"key": "properties.licenseModel", "type": "str"},
        "disk_redundancy": {"key": "properties.diskRedundancy", "type": "str"},
        "scan_ip_ids": {"key": "properties.scanIpIds", "type": "[str]"},
        "vip_ids": {"key": "properties.vipIds", "type": "[str]"},
        "scan_dns_name": {"key": "properties.scanDnsName", "type": "str"},
        "scan_listener_port_tcp": {"key": "properties.scanListenerPortTcp", "type": "int"},
        "scan_listener_port_tcp_ssl": {"key": "properties.scanListenerPortTcpSsl", "type": "int"},
        "scan_dns_record_id": {"key": "properties.scanDnsRecordId", "type": "str"},
        "shape": {"key": "properties.shape", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "vnet_id": {"key": "properties.vnetId", "type": "str"},
        "gi_version": {"key": "properties.giVersion", "type": "str"},
        "oci_url": {"key": "properties.ociUrl", "type": "str"},
        "subnet_id": {"key": "properties.subnetId", "type": "str"},
        "backup_subnet_cidr": {"key": "properties.backupSubnetCidr", "type": "str"},
        "data_collection_options": {"key": "properties.dataCollectionOptions", "type": "DataCollectionOptions"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "compute_nodes": {"key": "properties.computeNodes", "type": "[str]"},
        "iorm_config_cache": {"key": "properties.iormConfigCache", "type": "ExadataIormConfig"},
        "last_update_history_entry_id": {"key": "properties.lastUpdateHistoryEntryId", "type": "str"},
        "db_servers": {"key": "properties.dbServers", "type": "[str]"},
        "compartment_id": {"key": "properties.compartmentId", "type": "str"},
        "subnet_ocid": {"key": "properties.subnetOcid", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        storage_size_in_gbs: Optional[int] = None,
        data_storage_size_in_tbs: Optional[float] = None,
        db_node_storage_size_in_gbs: Optional[int] = None,
        memory_size_in_gbs: Optional[int] = None,
        time_zone: Optional[str] = None,
        zone_id: Optional[str] = None,
        hostname: Optional[str] = None,
        domain: Optional[str] = None,
        cpu_core_count: Optional[int] = None,
        ocpu_count: Optional[float] = None,
        cluster_name: Optional[str] = None,
        data_storage_percentage: Optional[int] = None,
        is_local_backup_enabled: bool = False,
        cloud_exadata_infrastructure_id: Optional[str] = None,
        is_sparse_diskgroup_enabled: bool = False,
        ssh_public_keys: Optional[List[str]] = None,
        license_model: Optional[Union[str, "_models.LicenseModel"]] = None,
        scan_listener_port_tcp: Optional[int] = None,
        scan_listener_port_tcp_ssl: Optional[int] = None,
        vnet_id: Optional[str] = None,
        gi_version: Optional[str] = None,
        subnet_id: Optional[str] = None,
        backup_subnet_cidr: Optional[str] = None,
        data_collection_options: Optional["_models.DataCollectionOptions"] = None,
        display_name: Optional[str] = None,
        compute_nodes: Optional[List[str]] = None,
        db_servers: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword storage_size_in_gbs: The data disk group size to be allocated in GBs per VM.
        :paramtype storage_size_in_gbs: int
        :keyword data_storage_size_in_tbs: The data disk group size to be allocated in TBs.
        :paramtype data_storage_size_in_tbs: float
        :keyword db_node_storage_size_in_gbs: The local node storage to be allocated in GBs.
        :paramtype db_node_storage_size_in_gbs: int
        :keyword memory_size_in_gbs: The memory to be allocated in GBs.
        :paramtype memory_size_in_gbs: int
        :keyword time_zone: The time zone of the cloud VM cluster. For details, see `Exadata
         Infrastructure Time Zones </Content/Database/References/timezones.htm>`_.
        :paramtype time_zone: str
        :keyword zone_id: The OCID of the zone the cloud VM cluster is associated with.
        :paramtype zone_id: str
        :keyword hostname: The hostname for the cloud VM cluster.
        :paramtype hostname: str
        :keyword domain: The domain name for the cloud VM cluster.
        :paramtype domain: str
        :keyword cpu_core_count: The number of CPU cores enabled on the cloud VM cluster.
        :paramtype cpu_core_count: int
        :keyword ocpu_count: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal
         place is allowed for the fractional part.
        :paramtype ocpu_count: float
        :keyword cluster_name: The cluster name for cloud VM cluster. The cluster name must begin with
         an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The
         cluster name can be no longer than 11 characters and is not case sensitive.
        :paramtype cluster_name: str
        :keyword data_storage_percentage: The percentage assigned to DATA storage (user data and
         database files). The remaining percentage is assigned to RECO storage (database redo logs,
         archive logs, and recovery manager backups). Accepted values are 35, 40, 60 and 80. The default
         is 80 percent assigned to DATA storage. See `Storage Configuration
         </Content/Database/Concepts/exaoverview.htm#Exadata>`_ in the Exadata documentation for details
         on the impact of the configuration settings on storage.
        :paramtype data_storage_percentage: int
        :keyword is_local_backup_enabled: If true, database backup on local Exadata storage is
         configured for the cloud VM cluster. If false, database backup on local Exadata storage is not
         available in the cloud VM cluster.
        :paramtype is_local_backup_enabled: bool
        :keyword cloud_exadata_infrastructure_id: Cloud Exadata Infrastructure ID.
        :paramtype cloud_exadata_infrastructure_id: str
        :keyword is_sparse_diskgroup_enabled: If true, sparse disk group is configured for the cloud VM
         cluster. If false, sparse disk group is not created.
        :paramtype is_sparse_diskgroup_enabled: bool
        :keyword ssh_public_keys: The public key portion of one or more key pairs used for SSH access
         to the cloud VM cluster.
        :paramtype ssh_public_keys: list[str]
        :keyword license_model: The Oracle license model that applies to the cloud VM cluster. The
         default is LICENSE_INCLUDED. Known values are: "LicenseIncluded" and "BringYourOwnLicense".
        :paramtype license_model: str or ~azure.mgmt.oracledatabase.models.LicenseModel
        :keyword scan_listener_port_tcp: The TCP Single Client Access Name (SCAN) port. The default
         port is 1521.
        :paramtype scan_listener_port_tcp: int
        :keyword scan_listener_port_tcp_ssl: The TCPS Single Client Access Name (SCAN) port. The
         default port is 2484.
        :paramtype scan_listener_port_tcp_ssl: int
        :keyword vnet_id: VNET for network connectivity.
        :paramtype vnet_id: str
        :keyword gi_version: Oracle Grid Infrastructure (GI) software version.
        :paramtype gi_version: str
        :keyword subnet_id: Client subnet.
        :paramtype subnet_id: str
        :keyword backup_subnet_cidr: Client OCI backup subnet CIDR, default is 192.168.252.0/22.
        :paramtype backup_subnet_cidr: str
        :keyword data_collection_options: Indicates user preferences for the various diagnostic
         collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
        :paramtype data_collection_options: ~azure.mgmt.oracledatabase.models.DataCollectionOptions
        :keyword display_name: Display Name.
        :paramtype display_name: str
        :keyword compute_nodes: The list of compute servers to be added to the cloud VM cluster.
        :paramtype compute_nodes: list[str]
        :keyword db_servers: The list of DB servers.
        :paramtype db_servers: list[str]
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.ocid = None
        self.listener_port = None
        self.node_count = None
        self.storage_size_in_gbs = storage_size_in_gbs
        self.data_storage_size_in_tbs = data_storage_size_in_tbs
        self.db_node_storage_size_in_gbs = db_node_storage_size_in_gbs
        self.memory_size_in_gbs = memory_size_in_gbs
        self.time_created = None
        self.lifecycle_details = None
        self.time_zone = time_zone
        self.zone_id = zone_id
        self.hostname = hostname
        self.domain = domain
        self.cpu_core_count = cpu_core_count
        self.ocpu_count = ocpu_count
        self.cluster_name = cluster_name
        self.data_storage_percentage = data_storage_percentage
        self.is_local_backup_enabled = is_local_backup_enabled
        self.cloud_exadata_infrastructure_id = cloud_exadata_infrastructure_id
        self.is_sparse_diskgroup_enabled = is_sparse_diskgroup_enabled
        self.system_version = None
        self.ssh_public_keys = ssh_public_keys
        self.license_model = license_model
        self.disk_redundancy = None
        self.scan_ip_ids = None
        self.vip_ids = None
        self.scan_dns_name = None
        self.scan_listener_port_tcp = scan_listener_port_tcp
        self.scan_listener_port_tcp_ssl = scan_listener_port_tcp_ssl
        self.scan_dns_record_id = None
        self.shape = None
        self.provisioning_state = None
        self.vnet_id = vnet_id
        self.gi_version = gi_version
        self.oci_url = None
        self.subnet_id = subnet_id
        self.backup_subnet_cidr = backup_subnet_cidr
        self.data_collection_options = data_collection_options
        self.display_name = display_name
        self.compute_nodes = compute_nodes
        self.iorm_config_cache = None
        self.last_update_history_entry_id = None
        self.db_servers = db_servers
        self.compartment_id = None
        self.subnet_ocid = None


class CloudVmClusterListResult(_serialization.Model):
    """The response of a CloudVmCluster list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The CloudVmCluster items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.CloudVmCluster]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[CloudVmCluster]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.CloudVmCluster"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The CloudVmCluster items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.CloudVmCluster]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CloudVmClusterUpdate(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The type used for update operations of the CloudVmCluster.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar storage_size_in_gbs: The data disk group size to be allocated in GBs per VM.
    :vartype storage_size_in_gbs: int
    :ivar data_storage_size_in_tbs: The data disk group size to be allocated in TBs.
    :vartype data_storage_size_in_tbs: float
    :ivar db_node_storage_size_in_gbs: The local node storage to be allocated in GBs.
    :vartype db_node_storage_size_in_gbs: int
    :ivar memory_size_in_gbs: The memory to be allocated in GBs.
    :vartype memory_size_in_gbs: int
    :ivar cpu_core_count: The number of CPU cores enabled on the cloud VM cluster.
    :vartype cpu_core_count: int
    :ivar ocpu_count: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal
     place is allowed for the fractional part.
    :vartype ocpu_count: float
    :ivar ssh_public_keys: The public key portion of one or more key pairs used for SSH access to
     the cloud VM cluster.
    :vartype ssh_public_keys: list[str]
    :ivar license_model: The Oracle license model that applies to the cloud VM cluster. The default
     is LICENSE_INCLUDED. Known values are: "LicenseIncluded" and "BringYourOwnLicense".
    :vartype license_model: str or ~azure.mgmt.oracledatabase.models.LicenseModel
    :ivar data_collection_options: Indicates user preferences for the various diagnostic collection
     options for the VM cluster/Cloud VM cluster/VMBM DBCS.
    :vartype data_collection_options: ~azure.mgmt.oracledatabase.models.DataCollectionOptions
    :ivar display_name: Display Name.
    :vartype display_name: str
    :ivar compute_nodes: The list of compute servers to be added to the cloud VM cluster.
    :vartype compute_nodes: list[str]
    """

    _validation = {
        "display_name": {"max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "storage_size_in_gbs": {"key": "properties.storageSizeInGbs", "type": "int"},
        "data_storage_size_in_tbs": {"key": "properties.dataStorageSizeInTbs", "type": "float"},
        "db_node_storage_size_in_gbs": {"key": "properties.dbNodeStorageSizeInGbs", "type": "int"},
        "memory_size_in_gbs": {"key": "properties.memorySizeInGbs", "type": "int"},
        "cpu_core_count": {"key": "properties.cpuCoreCount", "type": "int"},
        "ocpu_count": {"key": "properties.ocpuCount", "type": "float"},
        "ssh_public_keys": {"key": "properties.sshPublicKeys", "type": "[str]"},
        "license_model": {"key": "properties.licenseModel", "type": "str"},
        "data_collection_options": {"key": "properties.dataCollectionOptions", "type": "DataCollectionOptions"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "compute_nodes": {"key": "properties.computeNodes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        storage_size_in_gbs: Optional[int] = None,
        data_storage_size_in_tbs: Optional[float] = None,
        db_node_storage_size_in_gbs: Optional[int] = None,
        memory_size_in_gbs: Optional[int] = None,
        cpu_core_count: Optional[int] = None,
        ocpu_count: Optional[float] = None,
        ssh_public_keys: Optional[List[str]] = None,
        license_model: Optional[Union[str, "_models.LicenseModel"]] = None,
        data_collection_options: Optional["_models.DataCollectionOptions"] = None,
        display_name: Optional[str] = None,
        compute_nodes: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword storage_size_in_gbs: The data disk group size to be allocated in GBs per VM.
        :paramtype storage_size_in_gbs: int
        :keyword data_storage_size_in_tbs: The data disk group size to be allocated in TBs.
        :paramtype data_storage_size_in_tbs: float
        :keyword db_node_storage_size_in_gbs: The local node storage to be allocated in GBs.
        :paramtype db_node_storage_size_in_gbs: int
        :keyword memory_size_in_gbs: The memory to be allocated in GBs.
        :paramtype memory_size_in_gbs: int
        :keyword cpu_core_count: The number of CPU cores enabled on the cloud VM cluster.
        :paramtype cpu_core_count: int
        :keyword ocpu_count: The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal
         place is allowed for the fractional part.
        :paramtype ocpu_count: float
        :keyword ssh_public_keys: The public key portion of one or more key pairs used for SSH access
         to the cloud VM cluster.
        :paramtype ssh_public_keys: list[str]
        :keyword license_model: The Oracle license model that applies to the cloud VM cluster. The
         default is LICENSE_INCLUDED. Known values are: "LicenseIncluded" and "BringYourOwnLicense".
        :paramtype license_model: str or ~azure.mgmt.oracledatabase.models.LicenseModel
        :keyword data_collection_options: Indicates user preferences for the various diagnostic
         collection options for the VM cluster/Cloud VM cluster/VMBM DBCS.
        :paramtype data_collection_options: ~azure.mgmt.oracledatabase.models.DataCollectionOptions
        :keyword display_name: Display Name.
        :paramtype display_name: str
        :keyword compute_nodes: The list of compute servers to be added to the cloud VM cluster.
        :paramtype compute_nodes: list[str]
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.storage_size_in_gbs = storage_size_in_gbs
        self.data_storage_size_in_tbs = data_storage_size_in_tbs
        self.db_node_storage_size_in_gbs = db_node_storage_size_in_gbs
        self.memory_size_in_gbs = memory_size_in_gbs
        self.cpu_core_count = cpu_core_count
        self.ocpu_count = ocpu_count
        self.ssh_public_keys = ssh_public_keys
        self.license_model = license_model
        self.data_collection_options = data_collection_options
        self.display_name = display_name
        self.compute_nodes = compute_nodes


class CustomerContact(_serialization.Model):
    """CustomerContact resource properties.

    All required parameters must be populated in order to send to Azure.

    :ivar email: The email address used by Oracle to send notifications regarding databases and
     infrastructure. Required.
    :vartype email: str
    """

    _validation = {
        "email": {"required": True, "max_length": 320, "min_length": 1},
    }

    _attribute_map = {
        "email": {"key": "email", "type": "str"},
    }

    def __init__(self, *, email: str, **kwargs: Any) -> None:
        """
        :keyword email: The email address used by Oracle to send notifications regarding databases and
         infrastructure. Required.
        :paramtype email: str
        """
        super().__init__(**kwargs)
        self.email = email


class DataCollectionOptions(_serialization.Model):
    """DataCollectionOptions resource properties.

    :ivar is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the
     VM cluster/Cloud VM cluster/VMBM DBCS.
    :vartype is_diagnostics_events_enabled: bool
    :ivar is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM
     cluster / Cloud VM cluster / VMBM DBCS.
    :vartype is_health_monitoring_enabled: bool
    :ivar is_incident_logs_enabled: Indicates whether incident logs and trace collection are
     enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
    :vartype is_incident_logs_enabled: bool
    """

    _attribute_map = {
        "is_diagnostics_events_enabled": {"key": "isDiagnosticsEventsEnabled", "type": "bool"},
        "is_health_monitoring_enabled": {"key": "isHealthMonitoringEnabled", "type": "bool"},
        "is_incident_logs_enabled": {"key": "isIncidentLogsEnabled", "type": "bool"},
    }

    def __init__(
        self,
        *,
        is_diagnostics_events_enabled: bool = False,
        is_health_monitoring_enabled: bool = False,
        is_incident_logs_enabled: bool = False,
        **kwargs: Any
    ) -> None:
        """
        :keyword is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for
         the VM cluster/Cloud VM cluster/VMBM DBCS.
        :paramtype is_diagnostics_events_enabled: bool
        :keyword is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the
         VM cluster / Cloud VM cluster / VMBM DBCS.
        :paramtype is_health_monitoring_enabled: bool
        :keyword is_incident_logs_enabled: Indicates whether incident logs and trace collection are
         enabled for the VM cluster / Cloud VM cluster / VMBM DBCS.
        :paramtype is_incident_logs_enabled: bool
        """
        super().__init__(**kwargs)
        self.is_diagnostics_events_enabled = is_diagnostics_events_enabled
        self.is_health_monitoring_enabled = is_health_monitoring_enabled
        self.is_incident_logs_enabled = is_incident_logs_enabled


class DayOfWeek(_serialization.Model):
    """DayOfWeek resource properties.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the day of the week. Required. Known values are: "Monday", "Tuesday",
     "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
    :vartype name: str or ~azure.mgmt.oracledatabase.models.DayOfWeekName
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Union[str, "_models.DayOfWeekName"], **kwargs: Any) -> None:
        """
        :keyword name: Name of the day of the week. Required. Known values are: "Monday", "Tuesday",
         "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
        :paramtype name: str or ~azure.mgmt.oracledatabase.models.DayOfWeekName
        """
        super().__init__(**kwargs)
        self.name = name


class DbIormConfig(_serialization.Model):
    """DbIormConfig for cloud vm cluster.

    :ivar db_name: The database name. For the default DbPlan, the dbName is default.
    :vartype db_name: str
    :ivar flash_cache_limit: The flash cache limit for this database. This value is internally
     configured based on the share value assigned to the database.
    :vartype flash_cache_limit: str
    :ivar share: The relative priority of this database.
    :vartype share: int
    """

    _validation = {
        "share": {"maximum": 32, "minimum": 1},
    }

    _attribute_map = {
        "db_name": {"key": "dbName", "type": "str"},
        "flash_cache_limit": {"key": "flashCacheLimit", "type": "str"},
        "share": {"key": "share", "type": "int"},
    }

    def __init__(
        self,
        *,
        db_name: Optional[str] = None,
        flash_cache_limit: Optional[str] = None,
        share: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword db_name: The database name. For the default DbPlan, the dbName is default.
        :paramtype db_name: str
        :keyword flash_cache_limit: The flash cache limit for this database. This value is internally
         configured based on the share value assigned to the database.
        :paramtype flash_cache_limit: str
        :keyword share: The relative priority of this database.
        :paramtype share: int
        """
        super().__init__(**kwargs)
        self.db_name = db_name
        self.flash_cache_limit = flash_cache_limit
        self.share = share


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class DbNode(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """The DbNode resource belonging to vmCluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar ocid: DbNode OCID.
    :vartype ocid: str
    :ivar additional_details: Additional information about the planned maintenance.
    :vartype additional_details: str
    :ivar backup_ip_id: The OCID of the backup IP address associated with the database node.
    :vartype backup_ip_id: str
    :ivar backup_vnic2_id: The OCID of the second backup VNIC.
    :vartype backup_vnic2_id: str
    :ivar backup_vnic_id: The OCID of the backup VNIC.
    :vartype backup_vnic_id: str
    :ivar cpu_core_count: The number of CPU cores enabled on the Db node.
    :vartype cpu_core_count: int
    :ivar db_node_storage_size_in_gbs: The allocated local node storage in GBs on the Db node.
    :vartype db_node_storage_size_in_gbs: int
    :ivar db_server_id: The OCID of the Exacc Db server associated with the database node.
    :vartype db_server_id: str
    :ivar db_system_id: The OCID of the DB system.
    :vartype db_system_id: str
    :ivar fault_domain: The name of the Fault Domain the instance is contained in.
    :vartype fault_domain: str
    :ivar host_ip_id: The OCID of the host IP address associated with the database node.
    :vartype host_ip_id: str
    :ivar hostname: The host name for the database node.
    :vartype hostname: str
    :ivar provisioning_state: The current state of the database node. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Available", "Updating", "Stopping",
     "Stopped", "Starting", "Terminating", and "Terminated".
    :vartype provisioning_state: str or ~azure.mgmt.oracledatabase.models.DbNodeProvisioningState
    :ivar lifecycle_details: Lifecycle details of Db Node.
    :vartype lifecycle_details: str
    :ivar maintenance_type: The type of database node maintenance. "VmdbRebootMigration"
    :vartype maintenance_type: str or ~azure.mgmt.oracledatabase.models.DbNodeMaintenanceType
    :ivar memory_size_in_gbs: The allocated memory in GBs on the Db node.
    :vartype memory_size_in_gbs: int
    :ivar software_storage_size_in_gb: The size (in GB) of the block storage volume allocation for
     the DB system. This attribute applies only for virtual machine DB systems.
    :vartype software_storage_size_in_gb: int
    :ivar time_created: The date and time that the database node was created.
    :vartype time_created: ~datetime.datetime
    :ivar time_maintenance_window_end: End date and time of maintenance window.
    :vartype time_maintenance_window_end: ~datetime.datetime
    :ivar time_maintenance_window_start: Start date and time of maintenance window.
    :vartype time_maintenance_window_start: ~datetime.datetime
    :ivar vnic2_id: The OCID of the second VNIC.
    :vartype vnic2_id: str
    :ivar vnic_id: The OCID of the VNIC.
    :vartype vnic_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "additional_details": {"readonly": True},
        "backup_ip_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "backup_vnic2_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "backup_vnic_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "cpu_core_count": {"readonly": True},
        "db_node_storage_size_in_gbs": {"readonly": True},
        "db_server_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "db_system_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "fault_domain": {"readonly": True, "max_length": 255, "min_length": 1},
        "host_ip_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "hostname": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "lifecycle_details": {"readonly": True},
        "maintenance_type": {"readonly": True},
        "memory_size_in_gbs": {"readonly": True},
        "software_storage_size_in_gb": {"readonly": True},
        "time_created": {"readonly": True},
        "time_maintenance_window_end": {"readonly": True},
        "time_maintenance_window_start": {"readonly": True},
        "vnic2_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "vnic_id": {"readonly": True, "max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "additional_details": {"key": "properties.additionalDetails", "type": "str"},
        "backup_ip_id": {"key": "properties.backupIpId", "type": "str"},
        "backup_vnic2_id": {"key": "properties.backupVnic2Id", "type": "str"},
        "backup_vnic_id": {"key": "properties.backupVnicId", "type": "str"},
        "cpu_core_count": {"key": "properties.cpuCoreCount", "type": "int"},
        "db_node_storage_size_in_gbs": {"key": "properties.dbNodeStorageSizeInGbs", "type": "int"},
        "db_server_id": {"key": "properties.dbServerId", "type": "str"},
        "db_system_id": {"key": "properties.dbSystemId", "type": "str"},
        "fault_domain": {"key": "properties.faultDomain", "type": "str"},
        "host_ip_id": {"key": "properties.hostIpId", "type": "str"},
        "hostname": {"key": "properties.hostname", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "lifecycle_details": {"key": "properties.lifecycleDetails", "type": "str"},
        "maintenance_type": {"key": "properties.maintenanceType", "type": "str"},
        "memory_size_in_gbs": {"key": "properties.memorySizeInGbs", "type": "int"},
        "software_storage_size_in_gb": {"key": "properties.softwareStorageSizeInGb", "type": "int"},
        "time_created": {"key": "properties.timeCreated", "type": "iso-8601"},
        "time_maintenance_window_end": {"key": "properties.timeMaintenanceWindowEnd", "type": "iso-8601"},
        "time_maintenance_window_start": {"key": "properties.timeMaintenanceWindowStart", "type": "iso-8601"},
        "vnic2_id": {"key": "properties.vnic2Id", "type": "str"},
        "vnic_id": {"key": "properties.vnicId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:  # pylint: disable=too-many-locals
        """ """
        super().__init__(**kwargs)
        self.ocid = None
        self.additional_details = None
        self.backup_ip_id = None
        self.backup_vnic2_id = None
        self.backup_vnic_id = None
        self.cpu_core_count = None
        self.db_node_storage_size_in_gbs = None
        self.db_server_id = None
        self.db_system_id = None
        self.fault_domain = None
        self.host_ip_id = None
        self.hostname = None
        self.provisioning_state = None
        self.lifecycle_details = None
        self.maintenance_type = None
        self.memory_size_in_gbs = None
        self.software_storage_size_in_gb = None
        self.time_created = None
        self.time_maintenance_window_end = None
        self.time_maintenance_window_start = None
        self.vnic2_id = None
        self.vnic_id = None


class DbNodeListResult(_serialization.Model):
    """The response of a DbNode list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DbNode items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.DbNode]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DbNode]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DbNode"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The DbNode items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.DbNode]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DbServer(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """DbServer resource model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar ocid: Db server name.
    :vartype ocid: str
    :ivar display_name: The name for the Db Server.
    :vartype display_name: str
    :ivar compartment_id: The OCID of the compartment.
    :vartype compartment_id: str
    :ivar exadata_infrastructure_id: The OCID of the Exadata infrastructure.
    :vartype exadata_infrastructure_id: str
    :ivar lifecycle_details: Lifecycle details of dbServer.
    :vartype lifecycle_details: str
    :ivar cpu_core_count: The number of CPU cores enabled on the Db server.
    :vartype cpu_core_count: int
    :ivar db_server_patching_details: dbServerPatching details of the Db server.
    :vartype db_server_patching_details: ~azure.mgmt.oracledatabase.models.DbServerPatchingDetails
    :ivar max_memory_in_gbs: The total memory available in GBs.
    :vartype max_memory_in_gbs: int
    :ivar db_node_storage_size_in_gbs: The allocated local node storage in GBs on the Db server.
    :vartype db_node_storage_size_in_gbs: int
    :ivar vm_cluster_ids: The OCID of the VM Clusters associated with the Db server.
    :vartype vm_cluster_ids: list[str]
    :ivar db_node_ids: The OCID of the Db nodes associated with the Db server.
    :vartype db_node_ids: list[str]
    :ivar provisioning_state: DbServer provisioning state. Known values are: "Succeeded", "Failed",
     "Canceled", "Provisioning", "Available", "Updating", "Terminating", "Terminated", and
     "MaintenanceInProgress".
    :vartype provisioning_state: str or ~azure.mgmt.oracledatabase.models.DbServerProvisioningState
    :ivar max_cpu_count: The total number of CPU cores available.
    :vartype max_cpu_count: int
    :ivar autonomous_vm_cluster_ids: The list of OCIDs of the Autonomous VM Clusters associated
     with the Db server.
    :vartype autonomous_vm_cluster_ids: list[str]
    :ivar autonomous_virtual_machine_ids: The list of OCIDs of the Autonomous Virtual Machines
     associated with the Db server.
    :vartype autonomous_virtual_machine_ids: list[str]
    :ivar max_db_node_storage_in_gbs: The total max dbNode storage in GBs.
    :vartype max_db_node_storage_in_gbs: int
    :ivar memory_size_in_gbs: The total memory size in GBs.
    :vartype memory_size_in_gbs: int
    :ivar shape: The shape of the Db server. The shape determines the amount of CPU, storage, and
     memory resources available.
    :vartype shape: str
    :ivar time_created: The date and time that the Db Server was created.
    :vartype time_created: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "display_name": {"readonly": True, "max_length": 255, "min_length": 1},
        "compartment_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "exadata_infrastructure_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "lifecycle_details": {"readonly": True},
        "cpu_core_count": {"readonly": True},
        "db_server_patching_details": {"readonly": True},
        "max_memory_in_gbs": {"readonly": True},
        "db_node_storage_size_in_gbs": {"readonly": True},
        "vm_cluster_ids": {"readonly": True},
        "db_node_ids": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "max_cpu_count": {"readonly": True},
        "autonomous_vm_cluster_ids": {"readonly": True},
        "autonomous_virtual_machine_ids": {"readonly": True},
        "max_db_node_storage_in_gbs": {"readonly": True},
        "memory_size_in_gbs": {"readonly": True},
        "shape": {"readonly": True, "max_length": 255, "min_length": 1},
        "time_created": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "compartment_id": {"key": "properties.compartmentId", "type": "str"},
        "exadata_infrastructure_id": {"key": "properties.exadataInfrastructureId", "type": "str"},
        "lifecycle_details": {"key": "properties.lifecycleDetails", "type": "str"},
        "cpu_core_count": {"key": "properties.cpuCoreCount", "type": "int"},
        "db_server_patching_details": {"key": "properties.dbServerPatchingDetails", "type": "DbServerPatchingDetails"},
        "max_memory_in_gbs": {"key": "properties.maxMemoryInGbs", "type": "int"},
        "db_node_storage_size_in_gbs": {"key": "properties.dbNodeStorageSizeInGbs", "type": "int"},
        "vm_cluster_ids": {"key": "properties.vmClusterIds", "type": "[str]"},
        "db_node_ids": {"key": "properties.dbNodeIds", "type": "[str]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "max_cpu_count": {"key": "properties.maxCpuCount", "type": "int"},
        "autonomous_vm_cluster_ids": {"key": "properties.autonomousVmClusterIds", "type": "[str]"},
        "autonomous_virtual_machine_ids": {"key": "properties.autonomousVirtualMachineIds", "type": "[str]"},
        "max_db_node_storage_in_gbs": {"key": "properties.maxDbNodeStorageInGbs", "type": "int"},
        "memory_size_in_gbs": {"key": "properties.memorySizeInGbs", "type": "int"},
        "shape": {"key": "properties.shape", "type": "str"},
        "time_created": {"key": "properties.timeCreated", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.ocid = None
        self.display_name = None
        self.compartment_id = None
        self.exadata_infrastructure_id = None
        self.lifecycle_details = None
        self.cpu_core_count = None
        self.db_server_patching_details = None
        self.max_memory_in_gbs = None
        self.db_node_storage_size_in_gbs = None
        self.vm_cluster_ids = None
        self.db_node_ids = None
        self.provisioning_state = None
        self.max_cpu_count = None
        self.autonomous_vm_cluster_ids = None
        self.autonomous_virtual_machine_ids = None
        self.max_db_node_storage_in_gbs = None
        self.memory_size_in_gbs = None
        self.shape = None
        self.time_created = None


class DbServerListResult(_serialization.Model):
    """The response of a DbServer list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DbServer items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.DbServer]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DbServer]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DbServer"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The DbServer items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.DbServer]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DbServerPatchingDetails(_serialization.Model):
    """DbServer Patching Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar estimated_patch_duration: Estimated Patch Duration.
    :vartype estimated_patch_duration: int
    :ivar patching_status: Patching Status. Known values are: "Scheduled", "MaintenanceInProgress",
     "Failed", and "Complete".
    :vartype patching_status: str or ~azure.mgmt.oracledatabase.models.DbServerPatchingStatus
    :ivar time_patching_ended: Time Patching Ended.
    :vartype time_patching_ended: ~datetime.datetime
    :ivar time_patching_started: Time Patching Started.
    :vartype time_patching_started: ~datetime.datetime
    """

    _validation = {
        "estimated_patch_duration": {"readonly": True, "maximum": 3000, "minimum": 1},
        "patching_status": {"readonly": True},
        "time_patching_ended": {"readonly": True},
        "time_patching_started": {"readonly": True},
    }

    _attribute_map = {
        "estimated_patch_duration": {"key": "estimatedPatchDuration", "type": "int"},
        "patching_status": {"key": "patchingStatus", "type": "str"},
        "time_patching_ended": {"key": "timePatchingEnded", "type": "iso-8601"},
        "time_patching_started": {"key": "timePatchingStarted", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.estimated_patch_duration = None
        self.patching_status = None
        self.time_patching_ended = None
        self.time_patching_started = None


class DbSystemShape(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """DbSystemShape resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar shape_family: The family of the shape used for the DB system.
    :vartype shape_family: str
    :ivar available_core_count: The maximum number of CPU cores that can be enabled on the DB
     system for this shape.
    :vartype available_core_count: int
    :ivar minimum_core_count: The minimum number of CPU cores that can be enabled on the DB system
     for this shape.
    :vartype minimum_core_count: int
    :ivar runtime_minimum_core_count: The runtime minimum number of CPU cores that can be enabled
     on the DB system for this shape.
    :vartype runtime_minimum_core_count: int
    :ivar core_count_increment: The discrete number by which the CPU core count for this shape can
     be increased or decreased.
    :vartype core_count_increment: int
    :ivar min_storage_count: The minimum number of Exadata storage servers available for the
     Exadata infrastructure.
    :vartype min_storage_count: int
    :ivar max_storage_count: The maximum number of Exadata storage servers available for the
     Exadata infrastructure.
    :vartype max_storage_count: int
    :ivar available_data_storage_per_server_in_tbs: The maximum data storage available per storage
     server for this shape. Only applicable to ExaCC Elastic shapes.
    :vartype available_data_storage_per_server_in_tbs: float
    :ivar available_memory_per_node_in_gbs: The maximum memory available per database node for this
     shape. Only applicable to ExaCC Elastic shapes.
    :vartype available_memory_per_node_in_gbs: int
    :ivar available_db_node_per_node_in_gbs: The maximum Db Node storage available per database
     node for this shape. Only applicable to ExaCC Elastic shapes.
    :vartype available_db_node_per_node_in_gbs: int
    :ivar min_core_count_per_node: The minimum number of CPU cores that can be enabled per node for
     this shape.
    :vartype min_core_count_per_node: int
    :ivar available_memory_in_gbs: The maximum memory that can be enabled for this shape.
    :vartype available_memory_in_gbs: int
    :ivar min_memory_per_node_in_gbs: The minimum memory that need be allocated per node for this
     shape.
    :vartype min_memory_per_node_in_gbs: int
    :ivar available_db_node_storage_in_gbs: The maximum Db Node storage that can be enabled for
     this shape.
    :vartype available_db_node_storage_in_gbs: int
    :ivar min_db_node_storage_per_node_in_gbs: The minimum Db Node storage that need be allocated
     per node for this shape.
    :vartype min_db_node_storage_per_node_in_gbs: int
    :ivar available_data_storage_in_tbs: The maximum DATA storage that can be enabled for this
     shape.
    :vartype available_data_storage_in_tbs: int
    :ivar min_data_storage_in_tbs: The minimum data storage that need be allocated for this shape.
    :vartype min_data_storage_in_tbs: int
    :ivar minimum_node_count: The minimum number of database nodes available for this shape.
    :vartype minimum_node_count: int
    :ivar maximum_node_count: The maximum number of database nodes available for this shape.
    :vartype maximum_node_count: int
    :ivar available_core_count_per_node: The maximum number of CPU cores per database node that can
     be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.
    :vartype available_core_count_per_node: int
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "shape_family": {"readonly": True, "max_length": 255, "min_length": 1},
        "available_core_count": {"readonly": True},
        "minimum_core_count": {"readonly": True},
        "runtime_minimum_core_count": {"readonly": True},
        "core_count_increment": {"readonly": True},
        "min_storage_count": {"readonly": True},
        "max_storage_count": {"readonly": True},
        "available_data_storage_per_server_in_tbs": {"readonly": True},
        "available_memory_per_node_in_gbs": {"readonly": True},
        "available_db_node_per_node_in_gbs": {"readonly": True},
        "min_core_count_per_node": {"readonly": True},
        "available_memory_in_gbs": {"readonly": True},
        "min_memory_per_node_in_gbs": {"readonly": True},
        "available_db_node_storage_in_gbs": {"readonly": True},
        "min_db_node_storage_per_node_in_gbs": {"readonly": True},
        "available_data_storage_in_tbs": {"readonly": True},
        "min_data_storage_in_tbs": {"readonly": True},
        "minimum_node_count": {"readonly": True},
        "maximum_node_count": {"readonly": True},
        "available_core_count_per_node": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "shape_family": {"key": "properties.shapeFamily", "type": "str"},
        "available_core_count": {"key": "properties.availableCoreCount", "type": "int"},
        "minimum_core_count": {"key": "properties.minimumCoreCount", "type": "int"},
        "runtime_minimum_core_count": {"key": "properties.runtimeMinimumCoreCount", "type": "int"},
        "core_count_increment": {"key": "properties.coreCountIncrement", "type": "int"},
        "min_storage_count": {"key": "properties.minStorageCount", "type": "int"},
        "max_storage_count": {"key": "properties.maxStorageCount", "type": "int"},
        "available_data_storage_per_server_in_tbs": {
            "key": "properties.availableDataStoragePerServerInTbs",
            "type": "float",
        },
        "available_memory_per_node_in_gbs": {"key": "properties.availableMemoryPerNodeInGbs", "type": "int"},
        "available_db_node_per_node_in_gbs": {"key": "properties.availableDbNodePerNodeInGbs", "type": "int"},
        "min_core_count_per_node": {"key": "properties.minCoreCountPerNode", "type": "int"},
        "available_memory_in_gbs": {"key": "properties.availableMemoryInGbs", "type": "int"},
        "min_memory_per_node_in_gbs": {"key": "properties.minMemoryPerNodeInGbs", "type": "int"},
        "available_db_node_storage_in_gbs": {"key": "properties.availableDbNodeStorageInGbs", "type": "int"},
        "min_db_node_storage_per_node_in_gbs": {"key": "properties.minDbNodeStoragePerNodeInGbs", "type": "int"},
        "available_data_storage_in_tbs": {"key": "properties.availableDataStorageInTbs", "type": "int"},
        "min_data_storage_in_tbs": {"key": "properties.minDataStorageInTbs", "type": "int"},
        "minimum_node_count": {"key": "properties.minimumNodeCount", "type": "int"},
        "maximum_node_count": {"key": "properties.maximumNodeCount", "type": "int"},
        "available_core_count_per_node": {"key": "properties.availableCoreCountPerNode", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:  # pylint: disable=too-many-locals
        """ """
        super().__init__(**kwargs)
        self.shape_family = None
        self.available_core_count = None
        self.minimum_core_count = None
        self.runtime_minimum_core_count = None
        self.core_count_increment = None
        self.min_storage_count = None
        self.max_storage_count = None
        self.available_data_storage_per_server_in_tbs = None
        self.available_memory_per_node_in_gbs = None
        self.available_db_node_per_node_in_gbs = None
        self.min_core_count_per_node = None
        self.available_memory_in_gbs = None
        self.min_memory_per_node_in_gbs = None
        self.available_db_node_storage_in_gbs = None
        self.min_db_node_storage_per_node_in_gbs = None
        self.available_data_storage_in_tbs = None
        self.min_data_storage_in_tbs = None
        self.minimum_node_count = None
        self.maximum_node_count = None
        self.available_core_count_per_node = None


class DbSystemShapeListResult(_serialization.Model):
    """The response of a DbSystemShape list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DbSystemShape items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.DbSystemShape]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DbSystemShape]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.DbSystemShape"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The DbSystemShape items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.DbSystemShape]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DnsPrivateView(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """DnsPrivateView resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar ocid: The OCID of the view.
    :vartype ocid: str
    :ivar display_name: The display name of the view resource.
    :vartype display_name: str
    :ivar is_protected: A Boolean flag indicating whether or not parts of the resource are unable
     to be explicitly managed.
    :vartype is_protected: bool
    :ivar provisioning_state: Views lifecycleState. Known values are: "Succeeded", "Failed",
     "Canceled", "Active", "Deleted", "Deleting", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.DnsPrivateViewsProvisioningState
    :ivar self_property: The canonical absolute URL of the resource.
    :vartype self_property: str
    :ivar time_created: views timeCreated.
    :vartype time_created: ~datetime.datetime
    :ivar time_updated: views timeCreated.
    :vartype time_updated: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "display_name": {"readonly": True},
        "is_protected": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "self_property": {"readonly": True},
        "time_created": {"readonly": True},
        "time_updated": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "is_protected": {"key": "properties.isProtected", "type": "bool"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "self_property": {"key": "properties.self", "type": "str"},
        "time_created": {"key": "properties.timeCreated", "type": "iso-8601"},
        "time_updated": {"key": "properties.timeUpdated", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.ocid = None
        self.display_name = None
        self.is_protected = None
        self.provisioning_state = None
        self.self_property = None
        self.time_created = None
        self.time_updated = None


class DnsPrivateViewListResult(_serialization.Model):
    """The response of a DnsPrivateView list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DnsPrivateView items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.DnsPrivateView]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DnsPrivateView]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.DnsPrivateView"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The DnsPrivateView items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.DnsPrivateView]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DnsPrivateZone(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """DnsPrivateZone resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar ocid: The OCID of the Zone.
    :vartype ocid: str
    :ivar is_protected: A Boolean flag indicating whether or not parts of the resource are unable
     to be explicitly managed.
    :vartype is_protected: bool
    :ivar provisioning_state: Zones lifecycleState. Known values are: "Succeeded", "Failed",
     "Canceled", "Active", "Creating", "Deleted", "Deleting", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.DnsPrivateZonesProvisioningState
    :ivar self_property: The canonical absolute URL of the resource.
    :vartype self_property: str
    :ivar serial: The current serial of the zone. As seen in the zone's SOA record.
    :vartype serial: int
    :ivar version: Version is the never-repeating, totally-orderable, version of the zone, from
     which the serial field of the zone's SOA record is derived.
    :vartype version: str
    :ivar view_id: The OCID of the private view containing the zone. This value will be null for
     zones in the global DNS, which are publicly resolvable and not part of a private view.
    :vartype view_id: str
    :ivar zone_type: The type of the zone. Must be either PRIMARY or SECONDARY. SECONDARY is only
     supported for GLOBAL zones. Known values are: "Primary" and "Secondary".
    :vartype zone_type: str or ~azure.mgmt.oracledatabase.models.ZoneType
    :ivar time_created: Zones timeCreated.
    :vartype time_created: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "is_protected": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "self_property": {"readonly": True},
        "serial": {"readonly": True},
        "version": {"readonly": True},
        "view_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "zone_type": {"readonly": True},
        "time_created": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "is_protected": {"key": "properties.isProtected", "type": "bool"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "self_property": {"key": "properties.self", "type": "str"},
        "serial": {"key": "properties.serial", "type": "int"},
        "version": {"key": "properties.version", "type": "str"},
        "view_id": {"key": "properties.viewId", "type": "str"},
        "zone_type": {"key": "properties.zoneType", "type": "str"},
        "time_created": {"key": "properties.timeCreated", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.ocid = None
        self.is_protected = None
        self.provisioning_state = None
        self.self_property = None
        self.serial = None
        self.version = None
        self.view_id = None
        self.zone_type = None
        self.time_created = None


class DnsPrivateZoneListResult(_serialization.Model):
    """The response of a DnsPrivateZone list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The DnsPrivateZone items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.DnsPrivateZone]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[DnsPrivateZone]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.DnsPrivateZone"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The DnsPrivateZone items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.DnsPrivateZone]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.oracledatabase.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.oracledatabase.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.oracledatabase.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.oracledatabase.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class EstimatedPatchingTime(_serialization.Model):
    """The estimated total time required in minutes for all patching operations (database server,
    storage server, and network switch patching).

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar estimated_db_server_patching_time: The estimated time required in minutes for database
     server patching.
    :vartype estimated_db_server_patching_time: int
    :ivar estimated_network_switches_patching_time: The estimated time required in minutes for
     network switch patching.
    :vartype estimated_network_switches_patching_time: int
    :ivar estimated_storage_server_patching_time: The estimated time required in minutes for
     storage server patching.
    :vartype estimated_storage_server_patching_time: int
    :ivar total_estimated_patching_time: The estimated total time required in minutes for all
     patching operations.
    :vartype total_estimated_patching_time: int
    """

    _validation = {
        "estimated_db_server_patching_time": {"readonly": True, "maximum": 3000, "minimum": 1},
        "estimated_network_switches_patching_time": {"readonly": True, "maximum": 3000, "minimum": 1},
        "estimated_storage_server_patching_time": {"readonly": True, "maximum": 3000, "minimum": 1},
        "total_estimated_patching_time": {"readonly": True, "maximum": 3000, "minimum": 1},
    }

    _attribute_map = {
        "estimated_db_server_patching_time": {"key": "estimatedDbServerPatchingTime", "type": "int"},
        "estimated_network_switches_patching_time": {"key": "estimatedNetworkSwitchesPatchingTime", "type": "int"},
        "estimated_storage_server_patching_time": {"key": "estimatedStorageServerPatchingTime", "type": "int"},
        "total_estimated_patching_time": {"key": "totalEstimatedPatchingTime", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.estimated_db_server_patching_time = None
        self.estimated_network_switches_patching_time = None
        self.estimated_storage_server_patching_time = None
        self.total_estimated_patching_time = None


class ExadataIormConfig(_serialization.Model):
    """ExadataIormConfig for cloud vm cluster.

    :ivar db_plans: An array of IORM settings for all the database in the Exadata DB system.
    :vartype db_plans: list[~azure.mgmt.oracledatabase.models.DbIormConfig]
    :ivar lifecycle_details: Additional information about the current lifecycleState.
    :vartype lifecycle_details: str
    :ivar provisioning_state: The current state of IORM configuration for the Exadata DB system.
     Known values are: "BootStrapping", "Enabled", "Disabled", "Updating", and "Failed".
    :vartype provisioning_state: str or ~azure.mgmt.oracledatabase.models.IormLifecycleState
    :ivar objective: The current value for the IORM objective. The default is AUTO. Known values
     are: "LowLatency", "HighThroughput", "Balanced", "Auto", and "Basic".
    :vartype objective: str or ~azure.mgmt.oracledatabase.models.Objective
    """

    _attribute_map = {
        "db_plans": {"key": "dbPlans", "type": "[DbIormConfig]"},
        "lifecycle_details": {"key": "lifecycleDetails", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "objective": {"key": "objective", "type": "str"},
    }

    def __init__(
        self,
        *,
        db_plans: Optional[List["_models.DbIormConfig"]] = None,
        lifecycle_details: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.IormLifecycleState"]] = None,
        objective: Optional[Union[str, "_models.Objective"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword db_plans: An array of IORM settings for all the database in the Exadata DB system.
        :paramtype db_plans: list[~azure.mgmt.oracledatabase.models.DbIormConfig]
        :keyword lifecycle_details: Additional information about the current lifecycleState.
        :paramtype lifecycle_details: str
        :keyword provisioning_state: The current state of IORM configuration for the Exadata DB system.
         Known values are: "BootStrapping", "Enabled", "Disabled", "Updating", and "Failed".
        :paramtype provisioning_state: str or ~azure.mgmt.oracledatabase.models.IormLifecycleState
        :keyword objective: The current value for the IORM objective. The default is AUTO. Known values
         are: "LowLatency", "HighThroughput", "Balanced", "Auto", and "Basic".
        :paramtype objective: str or ~azure.mgmt.oracledatabase.models.Objective
        """
        super().__init__(**kwargs)
        self.db_plans = db_plans
        self.lifecycle_details = lifecycle_details
        self.provisioning_state = provisioning_state
        self.objective = objective


class GiVersion(ProxyResource):
    """GiVersion resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar version: A valid Oracle Grid Infrastructure (GI) software version.
    :vartype version: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "version": {"readonly": True, "max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "version": {"key": "properties.version", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.version = None


class GiVersionListResult(_serialization.Model):
    """The response of a GiVersion list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The GiVersion items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.GiVersion]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[GiVersion]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.GiVersion"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The GiVersion items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.GiVersion]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Location(ProxyResource):
    """Do not use. Model to support location based path.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: JSON
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(self, *, properties: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: JSON
        """
        super().__init__(**kwargs)
        self.properties = properties


class MaintenanceRun(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """MaintenanceRun resource model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar time_scheduled: The date and time the maintenance run is scheduled to occur.
    :vartype time_scheduled: str
    :ivar patching_status: The status of the patching operation. Known values are: "Patching",
     "Waiting", and "Scheduled".
    :vartype patching_status: str or ~azure.mgmt.oracledatabase.models.PatchingStatus
    :ivar maintenance_type: Maintenance type. Known values are: "Planned" and "Unplanned".
    :vartype maintenance_type: str or ~azure.mgmt.oracledatabase.models.MaintenanceType
    :ivar target_db_server_version: The target software version for the database server patching
     operation.
    :vartype target_db_server_version: str
    :ivar target_storage_server_version: The target Cell version that is to be patched to.
    :vartype target_storage_server_version: str
    :ivar patching_mode: Cloud Exadata infrastructure node patching method. Known values are:
     "Rolling" and "NonRolling".
    :vartype patching_mode: str or ~azure.mgmt.oracledatabase.models.PatchingMode
    :ivar estimated_patching_time: The estimated total time required in minutes for all patching
     operations.
    :vartype estimated_patching_time: ~azure.mgmt.oracledatabase.models.EstimatedPatchingTime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "time_scheduled": {"readonly": True},
        "patching_status": {"readonly": True},
        "maintenance_type": {"readonly": True},
        "target_db_server_version": {"readonly": True},
        "target_storage_server_version": {"readonly": True},
        "patching_mode": {"readonly": True},
        "estimated_patching_time": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "time_scheduled": {"key": "properties.timeScheduled", "type": "str"},
        "patching_status": {"key": "properties.patchingStatus", "type": "str"},
        "maintenance_type": {"key": "properties.maintenanceType", "type": "str"},
        "target_db_server_version": {"key": "properties.targetDbServerVersion", "type": "str"},
        "target_storage_server_version": {"key": "properties.targetStorageServerVersion", "type": "str"},
        "patching_mode": {"key": "properties.patchingMode", "type": "str"},
        "estimated_patching_time": {"key": "properties.estimatedPatchingTime", "type": "EstimatedPatchingTime"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.time_scheduled = None
        self.patching_status = None
        self.maintenance_type = None
        self.target_db_server_version = None
        self.target_storage_server_version = None
        self.patching_mode = None
        self.estimated_patching_time = None


class MaintenanceWindow(_serialization.Model):
    """MaintenanceWindow resource properties.

    :ivar preference: The maintenance window scheduling preference. Known values are:
     "NoPreference" and "CustomPreference".
    :vartype preference: str or ~azure.mgmt.oracledatabase.models.Preference
    :ivar months: Months during the year when maintenance should be performed.
    :vartype months: list[~azure.mgmt.oracledatabase.models.Month]
    :ivar weeks_of_month: Weeks during the month when maintenance should be performed. Weeks start
     on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start
     and end based on calendar dates, not days of the week. For example, to allow maintenance during
     the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2.
     Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days.
     Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to
     allow you to specify specific days of the week and hours that maintenance will be performed.
    :vartype weeks_of_month: list[int]
    :ivar days_of_week: Days during the week when maintenance should be performed.
    :vartype days_of_week: list[~azure.mgmt.oracledatabase.models.DayOfWeek]
    :ivar hours_of_day: The window of hours during the day when maintenance should be performed.
     The window is a 4 hour slot. Valid values are - 0 - represents time slot 0:00 - 3:59 UTC - 4 -
     represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 -
     represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 -
     represents time slot 20:00 - 23:59 UTC.
    :vartype hours_of_day: list[int]
    :ivar lead_time_in_weeks: Lead time window allows user to set a lead time to prepare for a down
     time. The lead time is in weeks and valid value is between 1 to 4.
    :vartype lead_time_in_weeks: int
    :ivar patching_mode: Cloud Exadata infrastructure node patching method. Known values are:
     "Rolling" and "NonRolling".
    :vartype patching_mode: str or ~azure.mgmt.oracledatabase.models.PatchingMode
    :ivar custom_action_timeout_in_mins: Determines the amount of time the system will wait before
     the start of each database server patching operation. Custom action timeout is in minutes and
     valid value is between 15 to 120 (inclusive).
    :vartype custom_action_timeout_in_mins: int
    :ivar is_custom_action_timeout_enabled: If true, enables the configuration of a custom action
     timeout (waiting period) between database server patching operations.
    :vartype is_custom_action_timeout_enabled: bool
    :ivar is_monthly_patching_enabled: is Monthly Patching Enabled.
    :vartype is_monthly_patching_enabled: bool
    """

    _validation = {
        "custom_action_timeout_in_mins": {"maximum": 120, "minimum": 0},
    }

    _attribute_map = {
        "preference": {"key": "preference", "type": "str"},
        "months": {"key": "months", "type": "[Month]"},
        "weeks_of_month": {"key": "weeksOfMonth", "type": "[int]"},
        "days_of_week": {"key": "daysOfWeek", "type": "[DayOfWeek]"},
        "hours_of_day": {"key": "hoursOfDay", "type": "[int]"},
        "lead_time_in_weeks": {"key": "leadTimeInWeeks", "type": "int"},
        "patching_mode": {"key": "patchingMode", "type": "str"},
        "custom_action_timeout_in_mins": {"key": "customActionTimeoutInMins", "type": "int"},
        "is_custom_action_timeout_enabled": {"key": "isCustomActionTimeoutEnabled", "type": "bool"},
        "is_monthly_patching_enabled": {"key": "isMonthlyPatchingEnabled", "type": "bool"},
    }

    def __init__(
        self,
        *,
        preference: Optional[Union[str, "_models.Preference"]] = None,
        months: Optional[List["_models.Month"]] = None,
        weeks_of_month: Optional[List[int]] = None,
        days_of_week: Optional[List["_models.DayOfWeek"]] = None,
        hours_of_day: Optional[List[int]] = None,
        lead_time_in_weeks: Optional[int] = None,
        patching_mode: Optional[Union[str, "_models.PatchingMode"]] = None,
        custom_action_timeout_in_mins: Optional[int] = None,
        is_custom_action_timeout_enabled: Optional[bool] = None,
        is_monthly_patching_enabled: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword preference: The maintenance window scheduling preference. Known values are:
         "NoPreference" and "CustomPreference".
        :paramtype preference: str or ~azure.mgmt.oracledatabase.models.Preference
        :keyword months: Months during the year when maintenance should be performed.
        :paramtype months: list[~azure.mgmt.oracledatabase.models.Month]
        :keyword weeks_of_month: Weeks during the month when maintenance should be performed. Weeks
         start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks
         start and end based on calendar dates, not days of the week. For example, to allow maintenance
         during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value
         2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days.
         Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to
         allow you to specify specific days of the week and hours that maintenance will be performed.
        :paramtype weeks_of_month: list[int]
        :keyword days_of_week: Days during the week when maintenance should be performed.
        :paramtype days_of_week: list[~azure.mgmt.oracledatabase.models.DayOfWeek]
        :keyword hours_of_day: The window of hours during the day when maintenance should be performed.
         The window is a 4 hour slot. Valid values are - 0 - represents time slot 0:00 - 3:59 UTC - 4 -
         represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 -
         represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 -
         represents time slot 20:00 - 23:59 UTC.
        :paramtype hours_of_day: list[int]
        :keyword lead_time_in_weeks: Lead time window allows user to set a lead time to prepare for a
         down time. The lead time is in weeks and valid value is between 1 to 4.
        :paramtype lead_time_in_weeks: int
        :keyword patching_mode: Cloud Exadata infrastructure node patching method. Known values are:
         "Rolling" and "NonRolling".
        :paramtype patching_mode: str or ~azure.mgmt.oracledatabase.models.PatchingMode
        :keyword custom_action_timeout_in_mins: Determines the amount of time the system will wait
         before the start of each database server patching operation. Custom action timeout is in
         minutes and valid value is between 15 to 120 (inclusive).
        :paramtype custom_action_timeout_in_mins: int
        :keyword is_custom_action_timeout_enabled: If true, enables the configuration of a custom
         action timeout (waiting period) between database server patching operations.
        :paramtype is_custom_action_timeout_enabled: bool
        :keyword is_monthly_patching_enabled: is Monthly Patching Enabled.
        :paramtype is_monthly_patching_enabled: bool
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.months = months
        self.weeks_of_month = weeks_of_month
        self.days_of_week = days_of_week
        self.hours_of_day = hours_of_day
        self.lead_time_in_weeks = lead_time_in_weeks
        self.patching_mode = patching_mode
        self.custom_action_timeout_in_mins = custom_action_timeout_in_mins
        self.is_custom_action_timeout_enabled = is_custom_action_timeout_enabled
        self.is_monthly_patching_enabled = is_monthly_patching_enabled


class Month(_serialization.Model):
    """Month resource properties.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the month of the year. Required. Known values are: "January", "February",
     "March", "April", "May", "June", "July", "August", "September", "October", "November", and
     "December".
    :vartype name: str or ~azure.mgmt.oracledatabase.models.MonthName
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Union[str, "_models.MonthName"], **kwargs: Any) -> None:
        """
        :keyword name: Name of the month of the year. Required. Known values are: "January",
         "February", "March", "April", "May", "June", "July", "August", "September", "October",
         "November", and "December".
        :paramtype name: str or ~azure.mgmt.oracledatabase.models.MonthName
        """
        super().__init__(**kwargs)
        self.name = name


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.oracledatabase.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.oracledatabase.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.oracledatabase.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.oracledatabase.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.oracledatabase.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OracleSubscription(ProxyResource):
    """OracleSubscription resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar plan: Details of the resource plan.
    :vartype plan: ~azure.mgmt.oracledatabase.models.Plan
    :ivar provisioning_state: OracleSubscriptionProvisioningState provisioning state. Known values
     are: "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.OracleSubscriptionProvisioningState
    :ivar saas_subscription_id: SAAS subscription ID generated by Marketplace.
    :vartype saas_subscription_id: str
    :ivar cloud_account_id: Cloud Account Id.
    :vartype cloud_account_id: str
    :ivar cloud_account_state: Cloud Account provisioning state. Known values are: "Pending",
     "Provisioning", and "Available".
    :vartype cloud_account_state: str or
     ~azure.mgmt.oracledatabase.models.CloudAccountProvisioningState
    :ivar term_unit: Term Unit. P1Y, P3Y, etc, see Durations
     https://en.wikipedia.org/wiki/ISO_8601.
    :vartype term_unit: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "saas_subscription_id": {"readonly": True},
        "cloud_account_id": {"readonly": True, "max_length": 255, "min_length": 1},
        "cloud_account_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "plan": {"key": "plan", "type": "Plan"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "saas_subscription_id": {"key": "properties.saasSubscriptionId", "type": "str"},
        "cloud_account_id": {"key": "properties.cloudAccountId", "type": "str"},
        "cloud_account_state": {"key": "properties.cloudAccountState", "type": "str"},
        "term_unit": {"key": "properties.termUnit", "type": "str"},
    }

    def __init__(
        self, *, plan: Optional["_models.Plan"] = None, term_unit: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword plan: Details of the resource plan.
        :paramtype plan: ~azure.mgmt.oracledatabase.models.Plan
        :keyword term_unit: Term Unit. P1Y, P3Y, etc, see Durations
         https://en.wikipedia.org/wiki/ISO_8601.
        :paramtype term_unit: str
        """
        super().__init__(**kwargs)
        self.plan = plan
        self.provisioning_state = None
        self.saas_subscription_id = None
        self.cloud_account_id = None
        self.cloud_account_state = None
        self.term_unit = term_unit


class OracleSubscriptionListResult(_serialization.Model):
    """The response of a OracleSubscription list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The OracleSubscription items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.OracleSubscription]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[OracleSubscription]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.OracleSubscription"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The OracleSubscription items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.OracleSubscription]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OracleSubscriptionUpdate(_serialization.Model):
    """The type used for update operations of the OracleSubscription.

    :ivar plan: Details of the resource plan.
    :vartype plan: ~azure.mgmt.oracledatabase.models.Plan
    :ivar term_unit: Term Unit. P1Y, P3Y, etc, see Durations
     https://en.wikipedia.org/wiki/ISO_8601.
    :vartype term_unit: str
    """

    _attribute_map = {
        "plan": {"key": "plan", "type": "Plan"},
        "term_unit": {"key": "properties.termUnit", "type": "str"},
    }

    def __init__(
        self, *, plan: Optional["_models.Plan"] = None, term_unit: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword plan: Details of the resource plan.
        :paramtype plan: ~azure.mgmt.oracledatabase.models.Plan
        :keyword term_unit: Term Unit. P1Y, P3Y, etc, see Durations
         https://en.wikipedia.org/wiki/ISO_8601.
        :paramtype term_unit: str
        """
        super().__init__(**kwargs)
        self.plan = plan
        self.term_unit = term_unit


class Plan(_serialization.Model):
    """Plan for the resource.

    All required parameters must be populated in order to send to Azure.

    :ivar name: A user defined name of the 3rd Party Artifact that is being procured. Required.
    :vartype name: str
    :ivar publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic.
     Required.
    :vartype publisher: str
    :ivar product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
     the OfferID specified for the artifact at the time of Data Market onboarding. Required.
    :vartype product: str
    :ivar promotion_code: A publisher provided promotion code as provisioned in Data Market for the
     said product/artifact.
    :vartype promotion_code: str
    :ivar version: The version of the desired product/artifact.
    :vartype version: str
    """

    _validation = {
        "name": {"required": True},
        "publisher": {"required": True},
        "product": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "publisher": {"key": "publisher", "type": "str"},
        "product": {"key": "product", "type": "str"},
        "promotion_code": {"key": "promotionCode", "type": "str"},
        "version": {"key": "version", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        publisher: str,
        product: str,
        promotion_code: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: A user defined name of the 3rd Party Artifact that is being procured. Required.
        :paramtype name: str
        :keyword publisher: The publisher of the 3rd Party Artifact that is being bought. E.g.
         NewRelic. Required.
        :paramtype publisher: str
        :keyword product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
         the OfferID specified for the artifact at the time of Data Market onboarding. Required.
        :paramtype product: str
        :keyword promotion_code: A publisher provided promotion code as provisioned in Data Market for
         the said product/artifact.
        :paramtype promotion_code: str
        :keyword version: The version of the desired product/artifact.
        :paramtype version: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.publisher = publisher
        self.product = product
        self.promotion_code = promotion_code
        self.version = version


class PrivateIpAddressesFilter(_serialization.Model):
    """Private Ip Addresses filter.

    All required parameters must be populated in order to send to Azure.

    :ivar subnet_id: The `OCID </Content/General/Concepts/identifiers.htm>`_ of the resource.
     Required.
    :vartype subnet_id: str
    :ivar vnic_id: The `OCID </Content/General/Concepts/identifiers.htm>`_ of the resource.
     Required.
    :vartype vnic_id: str
    """

    _validation = {
        "subnet_id": {"required": True, "max_length": 255, "min_length": 1},
        "vnic_id": {"required": True, "max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "subnet_id": {"key": "subnetId", "type": "str"},
        "vnic_id": {"key": "vnicId", "type": "str"},
    }

    def __init__(self, *, subnet_id: str, vnic_id: str, **kwargs: Any) -> None:
        """
        :keyword subnet_id: The `OCID </Content/General/Concepts/identifiers.htm>`_ of the resource.
         Required.
        :paramtype subnet_id: str
        :keyword vnic_id: The `OCID </Content/General/Concepts/identifiers.htm>`_ of the resource.
         Required.
        :paramtype vnic_id: str
        """
        super().__init__(**kwargs)
        self.subnet_id = subnet_id
        self.vnic_id = vnic_id


class PrivateIpAddressProperties(_serialization.Model):
    """PrivateIpAddress resource properties.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: PrivateIpAddresses displayName. Required.
    :vartype display_name: str
    :ivar hostname_label: PrivateIpAddresses hostnameLabel. Required.
    :vartype hostname_label: str
    :ivar ocid: PrivateIpAddresses Id. Required.
    :vartype ocid: str
    :ivar ip_address: PrivateIpAddresses ipAddress. Required.
    :vartype ip_address: str
    :ivar subnet_id: PrivateIpAddresses subnetId. Required.
    :vartype subnet_id: str
    """

    _validation = {
        "display_name": {"required": True},
        "hostname_label": {"required": True},
        "ocid": {"required": True, "max_length": 255, "min_length": 1},
        "ip_address": {"required": True},
        "subnet_id": {"required": True, "max_length": 255, "min_length": 1},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "hostname_label": {"key": "hostnameLabel", "type": "str"},
        "ocid": {"key": "ocid", "type": "str"},
        "ip_address": {"key": "ipAddress", "type": "str"},
        "subnet_id": {"key": "subnetId", "type": "str"},
    }

    def __init__(
        self, *, display_name: str, hostname_label: str, ocid: str, ip_address: str, subnet_id: str, **kwargs: Any
    ) -> None:
        """
        :keyword display_name: PrivateIpAddresses displayName. Required.
        :paramtype display_name: str
        :keyword hostname_label: PrivateIpAddresses hostnameLabel. Required.
        :paramtype hostname_label: str
        :keyword ocid: PrivateIpAddresses Id. Required.
        :paramtype ocid: str
        :keyword ip_address: PrivateIpAddresses ipAddress. Required.
        :paramtype ip_address: str
        :keyword subnet_id: PrivateIpAddresses subnetId. Required.
        :paramtype subnet_id: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.hostname_label = hostname_label
        self.ocid = ocid
        self.ip_address = ip_address
        self.subnet_id = subnet_id


class SaasSubscriptionDetails(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """SaaS Subscription Details model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Purchased SaaS subscription ID.
    :vartype id: str
    :ivar subscription_name: SaaS subscription name.
    :vartype subscription_name: str
    :ivar time_created: Creation Date and Time.
    :vartype time_created: ~datetime.datetime
    :ivar offer_id: Purchased offer ID.
    :vartype offer_id: str
    :ivar plan_id: Purchased offer's plan ID.
    :vartype plan_id: str
    :ivar saas_subscription_status: Indicates the status of the Subscription.
    :vartype saas_subscription_status: str
    :ivar publisher_id: Publisher ID.
    :vartype publisher_id: str
    :ivar purchaser_email_id: Purchaser Email ID.
    :vartype purchaser_email_id: str
    :ivar purchaser_tenant_id: Purchaser Tenant ID.
    :vartype purchaser_tenant_id: str
    :ivar term_unit: Purchase Term Unit.
    :vartype term_unit: str
    :ivar is_auto_renew: AutoRenew flag.
    :vartype is_auto_renew: bool
    :ivar is_free_trial: FreeTrial flag.
    :vartype is_free_trial: bool
    """

    _validation = {
        "id": {"readonly": True},
        "subscription_name": {"readonly": True},
        "time_created": {"readonly": True},
        "offer_id": {"readonly": True},
        "plan_id": {"readonly": True},
        "saas_subscription_status": {"readonly": True},
        "publisher_id": {"readonly": True},
        "purchaser_email_id": {"readonly": True},
        "purchaser_tenant_id": {"readonly": True},
        "term_unit": {"readonly": True},
        "is_auto_renew": {"readonly": True},
        "is_free_trial": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "subscription_name": {"key": "subscriptionName", "type": "str"},
        "time_created": {"key": "timeCreated", "type": "iso-8601"},
        "offer_id": {"key": "offerId", "type": "str"},
        "plan_id": {"key": "planId", "type": "str"},
        "saas_subscription_status": {"key": "saasSubscriptionStatus", "type": "str"},
        "publisher_id": {"key": "publisherId", "type": "str"},
        "purchaser_email_id": {"key": "purchaserEmailId", "type": "str"},
        "purchaser_tenant_id": {"key": "purchaserTenantId", "type": "str"},
        "term_unit": {"key": "termUnit", "type": "str"},
        "is_auto_renew": {"key": "isAutoRenew", "type": "bool"},
        "is_free_trial": {"key": "isFreeTrial", "type": "bool"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.subscription_name = None
        self.time_created = None
        self.offer_id = None
        self.plan_id = None
        self.saas_subscription_status = None
        self.publisher_id = None
        self.purchaser_email_id = None
        self.purchaser_tenant_id = None
        self.term_unit = None
        self.is_auto_renew = None
        self.is_free_trial = None


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.oracledatabase.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.oracledatabase.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.oracledatabase.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.oracledatabase.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class ValidationError(_serialization.Model):
    """validation error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: error code. Required.
    :vartype code: str
    :ivar message: error message. Required.
    :vartype message: str
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: str, message: str, **kwargs: Any) -> None:
        """
        :keyword code: error code. Required.
        :paramtype code: str
        :keyword message: error message. Required.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class ValidationResult(_serialization.Model):
    """validation result.

    All required parameters must be populated in order to send to Azure.

    :ivar status: validation status. Required. Known values are: "Succeeded" and "Failed".
    :vartype status: str or ~azure.mgmt.oracledatabase.models.ValidationStatus
    :ivar error: validation error. Required.
    :vartype error: ~azure.mgmt.oracledatabase.models.ValidationError
    """

    _validation = {
        "status": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ValidationError"},
    }

    def __init__(
        self, *, status: Union[str, "_models.ValidationStatus"], error: "_models.ValidationError", **kwargs: Any
    ) -> None:
        """
        :keyword status: validation status. Required. Known values are: "Succeeded" and "Failed".
        :paramtype status: str or ~azure.mgmt.oracledatabase.models.ValidationStatus
        :keyword error: validation error. Required.
        :paramtype error: ~azure.mgmt.oracledatabase.models.ValidationError
        """
        super().__init__(**kwargs)
        self.status = status
        self.error = error


class VirtualNetworkAddress(ProxyResource):  # pylint: disable=too-many-instance-attributes
    """Virtual IP resource belonging to a vm cluster resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.oracledatabase.models.SystemData
    :ivar ip_address: Virtual network Address address.
    :vartype ip_address: str
    :ivar vm_ocid: Virtual Machine OCID.
    :vartype vm_ocid: str
    :ivar ocid: Application VIP OCID.
    :vartype ocid: str
    :ivar domain: Virtual network address fully qualified domain name.
    :vartype domain: str
    :ivar lifecycle_details: Additional information about the current lifecycle state of the
     application virtual IP (VIP) address.
    :vartype lifecycle_details: str
    :ivar provisioning_state: virtual network address provisioning state. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Available", "Terminating", and
     "Terminated".
    :vartype provisioning_state: str or
     ~azure.mgmt.oracledatabase.models.VirtualNetworkAddressProvisioningState
    :ivar time_assigned: The date and time when the create operation for the application virtual IP
     (VIP) address completed.
    :vartype time_assigned: ~datetime.datetime
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "vm_ocid": {"max_length": 255, "min_length": 1},
        "ocid": {"readonly": True, "max_length": 255, "min_length": 1},
        "domain": {"readonly": True},
        "lifecycle_details": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "time_assigned": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "ip_address": {"key": "properties.ipAddress", "type": "str"},
        "vm_ocid": {"key": "properties.vmOcid", "type": "str"},
        "ocid": {"key": "properties.ocid", "type": "str"},
        "domain": {"key": "properties.domain", "type": "str"},
        "lifecycle_details": {"key": "properties.lifecycleDetails", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "time_assigned": {"key": "properties.timeAssigned", "type": "iso-8601"},
    }

    def __init__(self, *, ip_address: Optional[str] = None, vm_ocid: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword ip_address: Virtual network Address address.
        :paramtype ip_address: str
        :keyword vm_ocid: Virtual Machine OCID.
        :paramtype vm_ocid: str
        """
        super().__init__(**kwargs)
        self.ip_address = ip_address
        self.vm_ocid = vm_ocid
        self.ocid = None
        self.domain = None
        self.lifecycle_details = None
        self.provisioning_state = None
        self.time_assigned = None


class VirtualNetworkAddressListResult(_serialization.Model):
    """The response of a VirtualNetworkAddress list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The VirtualNetworkAddress items on this page. Required.
    :vartype value: list[~azure.mgmt.oracledatabase.models.VirtualNetworkAddress]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[VirtualNetworkAddress]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.VirtualNetworkAddress"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The VirtualNetworkAddress items on this page. Required.
        :paramtype value: list[~azure.mgmt.oracledatabase.models.VirtualNetworkAddress]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link
