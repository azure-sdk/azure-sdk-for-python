# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.voiceservices import VoiceServicesMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestVoiceServicesMgmtCommunicationsGatewaysOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(VoiceServicesMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_subscription(self, resource_group):
        response = self.client.communications_gateways.list_by_subscription(
            api_version="2023-09-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.communications_gateways.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-09-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.communications_gateways.get(
            resource_group_name=resource_group.name,
            communications_gateway_name="str",
            api_version="2023-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.communications_gateways.begin_create_or_update(
            resource_group_name=resource_group.name,
            communications_gateway_name="str",
            resource={
                "location": "str",
                "allocatedMediaAddressPrefixes": ["str"],
                "allocatedSignalingAddressPrefixes": ["str"],
                "apiBridge": {"allowedAddressPrefixes": ["str"], "configureApiBridge": "str", "endpointFqdns": ["str"]},
                "autoGeneratedDomainNameLabel": "str",
                "autoGeneratedDomainNameLabelScope": "str",
                "codecs": ["str"],
                "connectivity": "str",
                "customSipHeaders": {"headers": [{"name": "str"}]},
                "dnsDelegations": {"delegations": [{"domain": "str", "nameServers": ["str"]}]},
                "e911Type": "str",
                "emergencyDialStrings": [["911", "933"]],
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "integratedMcpEnabled": False,
                "name": "str",
                "onPremMcpEnabled": False,
                "platforms": ["str"],
                "provisioningState": "str",
                "serviceLocations": [
                    {
                        "name": "str",
                        "primaryRegionProperties": {
                            "operatorAddresses": ["str"],
                            "allowedMediaSourceAddressPrefixes": ["str"],
                            "allowedSignalingSourceAddressPrefixes": ["str"],
                            "esrpAddresses": ["str"],
                        },
                    }
                ],
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "teamsVoicemailPilotNumber": "str",
                "type": "str",
            },
            api_version="2023-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.communications_gateways.update(
            resource_group_name=resource_group.name,
            communications_gateway_name="str",
            properties={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
            },
            api_version="2023-09-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.communications_gateways.begin_delete(
            resource_group_name=resource_group.name,
            communications_gateway_name="str",
            api_version="2023-09-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
