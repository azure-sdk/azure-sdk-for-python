# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.networkanalytics import NetworkAnalyticsMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNetworkAnalyticsMgmtDataProductsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NetworkAnalyticsMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_subscription(self, resource_group):
        response = self.client.data_products.list_by_subscription(
            api_version="2023-11-15",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.data_products.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-11-15",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.data_products.get(
            resource_group_name=resource_group.name,
            data_product_name="str",
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create(self, resource_group):
        response = self.client.data_products.begin_create(
            resource_group_name=resource_group.name,
            data_product_name="str",
            resource={
                "location": "str",
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "name": "str",
                "properties": {
                    "majorVersion": "str",
                    "product": "str",
                    "publisher": "str",
                    "availableMinorVersions": ["str"],
                    "consumptionEndpoints": {
                        "fileAccessResourceId": "str",
                        "fileAccessUrl": "str",
                        "ingestionResourceId": "str",
                        "ingestionUrl": "str",
                        "queryResourceId": "str",
                        "queryUrl": "str",
                    },
                    "currentMinorVersion": "str",
                    "customerEncryptionKey": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                    "customerManagedKeyEncryptionEnabled": "str",
                    "documentation": "str",
                    "keyVaultUrl": "str",
                    "managedResourceGroupConfiguration": {"location": "str", "name": "str"},
                    "networkacls": {
                        "allowedQueryIpRangeList": ["str"],
                        "defaultAction": "str",
                        "ipRules": [{"action": "str", "value": "str"}],
                        "virtualNetworkRule": [{"id": "str", "action": "str", "state": "str"}],
                    },
                    "owners": ["str"],
                    "privateLinksEnabled": "str",
                    "provisioningState": "str",
                    "publicNetworkAccess": "str",
                    "purviewAccount": "str",
                    "purviewCollection": "str",
                    "redundancy": "str",
                    "resourceGuid": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-11-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.data_products.begin_update(
            resource_group_name=resource_group.name,
            data_product_name="str",
            properties={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "properties": {
                    "currentMinorVersion": "str",
                    "owners": ["str"],
                    "privateLinksEnabled": "str",
                    "purviewAccount": "str",
                    "purviewCollection": "str",
                },
                "tags": {"str": "str"},
            },
            api_version="2023-11-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.data_products.begin_delete(
            resource_group_name=resource_group.name,
            data_product_name="str",
            api_version="2023-11-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_add_user_role(self, resource_group):
        response = self.client.data_products.add_user_role(
            resource_group_name=resource_group.name,
            data_product_name="str",
            body={
                "dataTypeScope": ["str"],
                "principalId": "str",
                "principalType": "str",
                "role": "str",
                "roleId": "str",
                "userName": "str",
            },
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_generate_storage_account_sas_token(self, resource_group):
        response = self.client.data_products.generate_storage_account_sas_token(
            resource_group_name=resource_group.name,
            data_product_name="str",
            body={
                "expiryTimeStamp": "2020-02-20 00:00:00",
                "ipAddress": "str",
                "startTimeStamp": "2020-02-20 00:00:00",
            },
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_roles_assignments(self, resource_group):
        response = self.client.data_products.list_roles_assignments(
            resource_group_name=resource_group.name,
            data_product_name="str",
            body={},
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_remove_user_role(self, resource_group):
        response = self.client.data_products.remove_user_role(
            resource_group_name=resource_group.name,
            data_product_name="str",
            body={
                "dataTypeScope": ["str"],
                "principalId": "str",
                "principalType": "str",
                "role": "str",
                "roleAssignmentId": "str",
                "roleId": "str",
                "userName": "str",
            },
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_rotate_key(self, resource_group):
        response = self.client.data_products.rotate_key(
            resource_group_name=resource_group.name,
            data_product_name="str",
            body={"keyVaultUrl": "str"},
            api_version="2023-11-15",
        )

        # please add some check logic here by yourself
        # ...
