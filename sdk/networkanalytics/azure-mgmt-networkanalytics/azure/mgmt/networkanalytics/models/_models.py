# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccountSas(_model_base.Model):
    """The details for storage account sas creation.

    All required parameters must be populated in order to send to server.

    :ivar start_time_stamp: Sas token start timestamp. Required.
    :vartype start_time_stamp: ~datetime.datetime
    :ivar expiry_time_stamp: Sas token expiry timestamp. Required.
    :vartype expiry_time_stamp: ~datetime.datetime
    :ivar ip_address: Ip Address. Required.
    :vartype ip_address: str
    """

    start_time_stamp: datetime.datetime = rest_field(name="startTimeStamp", format="rfc3339")
    """Sas token start timestamp. Required."""
    expiry_time_stamp: datetime.datetime = rest_field(name="expiryTimeStamp", format="rfc3339")
    """Sas token expiry timestamp. Required."""
    ip_address: str = rest_field(name="ipAddress")
    """Ip Address. Required."""

    @overload
    def __init__(
        self,
        *,
        start_time_stamp: datetime.datetime,
        expiry_time_stamp: datetime.datetime,
        ip_address: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AccountSasToken(_model_base.Model):
    """Details of storage account sas token .

    All required parameters must be populated in order to send to server.

    :ivar storage_account_sas_token: Field to specify storage account sas token. Required.
    :vartype storage_account_sas_token: str
    """

    storage_account_sas_token: str = rest_field(name="storageAccountSasToken")
    """Field to specify storage account sas token. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_account_sas_token: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ArmOperationStatus(_model_base.Model):
    """Standard Azure Resource Manager operation status response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: The operation status. Required. Known values are: "Succeeded", "Failed", and
     "Canceled".
    :vartype status: str or ~azure.mgmt.networkanalytics.models.ResourceProvisioningState
    :ivar name: The name of the  operationStatus resource.
    :vartype name: str
    :ivar start_time: Operation start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Operation complete time.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: The progress made toward completing the operation.
    :vartype percent_complete: float
    :ivar error: Errors that occurred if the operation ended with Canceled or Failed status.
    :vartype error: ~azure.mgmt.networkanalytics.models.ErrorDetail
    """

    status: Union[str, "_models.ResourceProvisioningState"] = rest_field()
    """The operation status. Required. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the  operationStatus resource."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Operation start time."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """Operation complete time."""
    percent_complete: Optional[float] = rest_field(name="percentComplete", visibility=["read"])
    """The progress made toward completing the operation."""
    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Errors that occurred if the operation ended with Canceled or Failed status."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.ResourceProvisioningState"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ArmResourceBase(_model_base.Model):
    """Base class used for type definitions."""


class ArmResource(ArmResourceBase):
    """Common properties for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    """

    id: str = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required."""
    type: str = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\". Required."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ConsumptionEndpointsProperties(_model_base.Model):
    """Details of Consumption Properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar ingestion_url: Ingestion url to upload the data.
    :vartype ingestion_url: str
    :ivar ingestion_resource_id: Resource Id of ingestion endpoint.
    :vartype ingestion_resource_id: str
    :ivar file_access_url: Url to consume file type.
    :vartype file_access_url: str
    :ivar file_access_resource_id: Resource Id of file access endpoint.
    :vartype file_access_resource_id: str
    :ivar query_url: Url to consume the processed data.
    :vartype query_url: str
    :ivar query_resource_id: Resource Id of query endpoint.
    :vartype query_resource_id: str
    """

    ingestion_url: Optional[str] = rest_field(name="ingestionUrl", visibility=["read"])
    """Ingestion url to upload the data."""
    ingestion_resource_id: Optional[str] = rest_field(name="ingestionResourceId", visibility=["read"])
    """Resource Id of ingestion endpoint."""
    file_access_url: Optional[str] = rest_field(name="fileAccessUrl", visibility=["read"])
    """Url to consume file type."""
    file_access_resource_id: Optional[str] = rest_field(name="fileAccessResourceId", visibility=["read"])
    """Resource Id of file access endpoint."""
    query_url: Optional[str] = rest_field(name="queryUrl", visibility=["read"])
    """Url to consume the processed data."""
    query_resource_id: Optional[str] = rest_field(name="queryResourceId", visibility=["read"])
    """Resource Id of query endpoint."""


class ContainerSaS(_model_base.Model):
    """The details for container sas creation.

    All required parameters must be populated in order to send to server.

    :ivar start_time_stamp: Sas token start timestamp. Required.
    :vartype start_time_stamp: ~datetime.datetime
    :ivar expiry_time_stamp: Sas token expiry timestamp. Required.
    :vartype expiry_time_stamp: ~datetime.datetime
    :ivar ip_address: Ip Address. Required.
    :vartype ip_address: str
    """

    start_time_stamp: datetime.datetime = rest_field(name="startTimeStamp", format="rfc3339")
    """Sas token start timestamp. Required."""
    expiry_time_stamp: datetime.datetime = rest_field(name="expiryTimeStamp", format="rfc3339")
    """Sas token expiry timestamp. Required."""
    ip_address: str = rest_field(name="ipAddress")
    """Ip Address. Required."""

    @overload
    def __init__(
        self,
        *,
        start_time_stamp: datetime.datetime,
        expiry_time_stamp: datetime.datetime,
        ip_address: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContainerSasToken(_model_base.Model):
    """Details of storage container account sas token .

    All required parameters must be populated in order to send to server.

    :ivar storage_container_sas_token: Field to specify storage container sas token. Required.
    :vartype storage_container_sas_token: str
    """

    storage_container_sas_token: str = rest_field(name="storageContainerSasToken")
    """Field to specify storage container sas token. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_container_sas_token: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TrackedResourceBase(ArmResource):
    """The resource model definition for an Azure Resource Manager tracked top level resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProduct(TrackedResourceBase):
    """The data product resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.networkanalytics.models.DataProductProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.networkanalytics.models.ManagedIdentityProperties
    """

    properties: Optional["_models.DataProductProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    identity: Optional["_models.ManagedIdentityProperties"] = rest_field()
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DataProductProperties"] = None,
        identity: Optional["_models.ManagedIdentityProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductInformation(_model_base.Model):
    """Data Product Information.

    All required parameters must be populated in order to send to server.

    :ivar data_product_name: Name of data product. Required.
    :vartype data_product_name: str
    :ivar description: Description about data product. Required.
    :vartype description: str
    :ivar data_product_versions: Version information of data product. Required.
    :vartype data_product_versions: list[~azure.mgmt.networkanalytics.models.DataProductVersion]
    """

    data_product_name: str = rest_field(name="dataProductName")
    """Name of data product. Required."""
    description: str = rest_field()
    """Description about data product. Required."""
    data_product_versions: List["_models.DataProductVersion"] = rest_field(name="dataProductVersions")
    """Version information of data product. Required."""

    @overload
    def __init__(
        self,
        *,
        data_product_name: str,
        description: str,
        data_product_versions: List["_models.DataProductVersion"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductNetworkAcls(_model_base.Model):
    """Data Product Network rule set.

    All required parameters must be populated in order to send to server.

    :ivar virtual_network_rule: Virtual Network Rule. Required.
    :vartype virtual_network_rule: list[~azure.mgmt.networkanalytics.models.VirtualNetworkRule]
    :ivar ip_rules: IP rule with specific IP or IP range in CIDR format. Required.
    :vartype ip_rules: list[~azure.mgmt.networkanalytics.models.IPRules]
    :ivar allowed_query_ip_range_list: The list of query ips in the format of CIDR allowed to
     connect to query/visualization endpoint. Required.
    :vartype allowed_query_ip_range_list: list[str]
    :ivar default_action: Default Action. Required. Known values are: "Allow" and "Deny".
    :vartype default_action: str or ~azure.mgmt.networkanalytics.models.DefaultAction
    """

    virtual_network_rule: List["_models.VirtualNetworkRule"] = rest_field(name="virtualNetworkRule")
    """Virtual Network Rule. Required."""
    ip_rules: List["_models.IPRules"] = rest_field(name="ipRules")
    """IP rule with specific IP or IP range in CIDR format. Required."""
    allowed_query_ip_range_list: List[str] = rest_field(name="allowedQueryIpRangeList")
    """The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
     Required."""
    default_action: Union[str, "_models.DefaultAction"] = rest_field(name="defaultAction")
    """Default Action. Required. Known values are: \"Allow\" and \"Deny\"."""

    @overload
    def __init__(
        self,
        *,
        virtual_network_rule: List["_models.VirtualNetworkRule"],
        ip_rules: List["_models.IPRules"],
        allowed_query_ip_range_list: List[str],
        default_action: Union[str, "_models.DefaultAction"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductProperties(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The data product properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_guid: The resource GUID property of the data product resource.
    :vartype resource_guid: str
    :ivar provisioning_state: Latest provisioning state  of data product. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.networkanalytics.models.ProvisioningState
    :ivar publisher: Data product publisher name. Required.
    :vartype publisher: str
    :ivar product: Product name of data product. Required.
    :vartype product: str
    :ivar major_version: Major version of data product. Required.
    :vartype major_version: str
    :ivar owners: List of name or email associated with data product resource deployment.
    :vartype owners: list[str]
    :ivar redundancy: Flag to enable or disable redundancy for data product. Known values are:
     "Enabled" and "Disabled".
    :vartype redundancy: str or ~azure.mgmt.networkanalytics.models.ControlState
    :ivar purview_account: Purview account url for data product to connect to.
    :vartype purview_account: str
    :ivar purview_collection: Purview collection url for data product to connect to.
    :vartype purview_collection: str
    :ivar private_links_enabled: Flag to enable or disable private link for data product resource.
     Known values are: "Enabled" and "Disabled".
    :vartype private_links_enabled: str or ~azure.mgmt.networkanalytics.models.ControlState
    :ivar public_network_access: Flag to enable or disable public access of data product resource.
     Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.networkanalytics.models.ControlState
    :ivar customer_managed_key_encryption_enabled: Flag to enable customer managed key encryption
     for data product. Known values are: "Enabled" and "Disabled".
    :vartype customer_managed_key_encryption_enabled: str or
     ~azure.mgmt.networkanalytics.models.ControlState
    :ivar customer_encryption_key: Customer managed encryption key details for data product.
    :vartype customer_encryption_key: ~azure.mgmt.networkanalytics.models.EncryptionKeyDetails
    :ivar networkacls: Network rule set for data product.
    :vartype networkacls: ~azure.mgmt.networkanalytics.models.DataProductNetworkAcls
    :ivar managed_resource_group_configuration: Managed resource group configuration.
    :vartype managed_resource_group_configuration:
     ~azure.mgmt.networkanalytics.models.ManagedResourceGroupConfiguration
    :ivar available_minor_versions: List of available minor versions of the data product resource.
    :vartype available_minor_versions: list[str]
    :ivar current_minor_version: Current configured minor version of the data product resource.
    :vartype current_minor_version: str
    :ivar documentation: Documentation link for the data product based on definition file.
    :vartype documentation: str
    :ivar consumption_endpoints: Resource links which exposed to the customer to query the data.
    :vartype consumption_endpoints:
     ~azure.mgmt.networkanalytics.models.ConsumptionEndpointsProperties
    :ivar key_vault_url: Key vault url.
    :vartype key_vault_url: str
    """

    resource_guid: Optional[str] = rest_field(name="resourceGuid", visibility=["read"])
    """The resource GUID property of the data product resource."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Latest provisioning state  of data product. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    publisher: str = rest_field(visibility=["read", "create"])
    """Data product publisher name. Required."""
    product: str = rest_field(visibility=["read", "create"])
    """Product name of data product. Required."""
    major_version: str = rest_field(name="majorVersion", visibility=["read", "create"])
    """Major version of data product. Required."""
    owners: Optional[List[str]] = rest_field(visibility=["read", "create", "update"])
    """List of name or email associated with data product resource deployment."""
    redundancy: Optional[Union[str, "_models.ControlState"]] = rest_field(visibility=["read", "create"])
    """Flag to enable or disable redundancy for data product. Known values are: \"Enabled\" and
     \"Disabled\"."""
    purview_account: Optional[str] = rest_field(name="purviewAccount", visibility=["read", "create", "update"])
    """Purview account url for data product to connect to."""
    purview_collection: Optional[str] = rest_field(name="purviewCollection", visibility=["read", "create", "update"])
    """Purview collection url for data product to connect to."""
    private_links_enabled: Optional[Union[str, "_models.ControlState"]] = rest_field(
        name="privateLinksEnabled", visibility=["read", "create", "update"]
    )
    """Flag to enable or disable private link for data product resource. Known values are: \"Enabled\"
     and \"Disabled\"."""
    public_network_access: Optional[Union[str, "_models.ControlState"]] = rest_field(
        name="publicNetworkAccess", visibility=["read", "create"]
    )
    """Flag to enable or disable public access of data product resource. Known values are: \"Enabled\"
     and \"Disabled\"."""
    customer_managed_key_encryption_enabled: Optional[Union[str, "_models.ControlState"]] = rest_field(
        name="customerManagedKeyEncryptionEnabled", visibility=["read", "create"]
    )
    """Flag to enable customer managed key encryption for data product. Known values are: \"Enabled\"
     and \"Disabled\"."""
    customer_encryption_key: Optional["_models.EncryptionKeyDetails"] = rest_field(
        name="customerEncryptionKey", visibility=["read", "create"]
    )
    """Customer managed encryption key details for data product."""
    networkacls: Optional["_models.DataProductNetworkAcls"] = rest_field(visibility=["read", "create"])
    """Network rule set for data product."""
    managed_resource_group_configuration: Optional["_models.ManagedResourceGroupConfiguration"] = rest_field(
        name="managedResourceGroupConfiguration", visibility=["create"]
    )
    """Managed resource group configuration."""
    available_minor_versions: Optional[List[str]] = rest_field(name="availableMinorVersions", visibility=["read"])
    """List of available minor versions of the data product resource."""
    current_minor_version: Optional[str] = rest_field(name="currentMinorVersion", visibility=["read", "update"])
    """Current configured minor version of the data product resource."""
    documentation: Optional[str] = rest_field(visibility=["read"])
    """Documentation link for the data product based on definition file."""
    consumption_endpoints: Optional["_models.ConsumptionEndpointsProperties"] = rest_field(
        name="consumptionEndpoints", visibility=["read"]
    )
    """Resource links which exposed to the customer to query the data."""
    key_vault_url: Optional[str] = rest_field(name="keyVaultUrl", visibility=["read"])
    """Key vault url."""

    @overload
    def __init__(
        self,
        *,
        publisher: str,
        product: str,
        major_version: str,
        owners: Optional[List[str]] = None,
        redundancy: Optional[Union[str, "_models.ControlState"]] = None,
        purview_account: Optional[str] = None,
        purview_collection: Optional[str] = None,
        private_links_enabled: Optional[Union[str, "_models.ControlState"]] = None,
        public_network_access: Optional[Union[str, "_models.ControlState"]] = None,
        customer_managed_key_encryption_enabled: Optional[Union[str, "_models.ControlState"]] = None,
        customer_encryption_key: Optional["_models.EncryptionKeyDetails"] = None,
        networkacls: Optional["_models.DataProductNetworkAcls"] = None,
        managed_resource_group_configuration: Optional["_models.ManagedResourceGroupConfiguration"] = None,
        current_minor_version: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProxyResourceBase(ArmResource):
    """The base proxy resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    """


class DataProductsCatalog(ProxyResourceBase):
    """The data catalog resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.networkanalytics.models.DataProductsCatalogProperties
    """

    properties: Optional["_models.DataProductsCatalogProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataProductsCatalogProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductsCatalogProperties(_model_base.Model):
    """Details for data catalog properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar provisioning_state: The data catalog provisioning state. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.networkanalytics.models.ProvisioningState
    :ivar publishers: The data product publisher information. Required.
    :vartype publishers: list[~azure.mgmt.networkanalytics.models.PublisherInformation]
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The data catalog provisioning state. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    publishers: List["_models.PublisherInformation"] = rest_field()
    """The data product publisher information. Required."""

    @overload
    def __init__(
        self,
        *,
        publishers: List["_models.PublisherInformation"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductUpdate(_model_base.Model):
    """The type used for update operations of the DataProduct.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.networkanalytics.models.ManagedIdentityProperties
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties:
    :vartype properties: ~azure.mgmt.networkanalytics.models.DataProductUpdateProperties
    """

    identity: Optional["_models.ManagedIdentityProperties"] = rest_field()
    """The managed service identities assigned to this resource."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    properties: Optional["_models.DataProductUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedIdentityProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DataProductUpdateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductUpdateProperties(_model_base.Model):
    """The updatable properties of the DataProduct.

    :ivar owners: List of name or email associated with data product resource deployment.
    :vartype owners: list[str]
    :ivar purview_account: Purview account url for data product to connect to.
    :vartype purview_account: str
    :ivar purview_collection: Purview collection url for data product to connect to.
    :vartype purview_collection: str
    :ivar private_links_enabled: Flag to enable or disable private link for data product resource.
     Known values are: "Enabled" and "Disabled".
    :vartype private_links_enabled: str or ~azure.mgmt.networkanalytics.models.ControlState
    :ivar current_minor_version: Current configured minor version of the data product resource.
    :vartype current_minor_version: str
    """

    owners: Optional[List[str]] = rest_field(visibility=["read", "create", "update"])
    """List of name or email associated with data product resource deployment."""
    purview_account: Optional[str] = rest_field(name="purviewAccount", visibility=["read", "create", "update"])
    """Purview account url for data product to connect to."""
    purview_collection: Optional[str] = rest_field(name="purviewCollection", visibility=["read", "create", "update"])
    """Purview collection url for data product to connect to."""
    private_links_enabled: Optional[Union[str, "_models.ControlState"]] = rest_field(
        name="privateLinksEnabled", visibility=["read", "create", "update"]
    )
    """Flag to enable or disable private link for data product resource. Known values are: \"Enabled\"
     and \"Disabled\"."""
    current_minor_version: Optional[str] = rest_field(name="currentMinorVersion", visibility=["read", "update"])
    """Current configured minor version of the data product resource."""

    @overload
    def __init__(
        self,
        *,
        owners: Optional[List[str]] = None,
        purview_account: Optional[str] = None,
        purview_collection: Optional[str] = None,
        private_links_enabled: Optional[Union[str, "_models.ControlState"]] = None,
        current_minor_version: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataProductVersion(_model_base.Model):
    """Data Product Version.

    All required parameters must be populated in order to send to server.

    :ivar version: Version of data product. Required.
    :vartype version: str
    """

    version: str = rest_field()
    """Version of data product. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataType(ProxyResourceBase):
    """The data type resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.networkanalytics.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.networkanalytics.models.DataTypeProperties
    """

    properties: Optional["_models.DataTypeProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataTypeProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataTypeProperties(_model_base.Model):
    """The data type properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Latest provisioning state  of data product. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.networkanalytics.models.ProvisioningState
    :ivar state: State of data type. Known values are: "Stopped" and "Running".
    :vartype state: str or ~azure.mgmt.networkanalytics.models.DataTypeState
    :ivar state_reason: Reason for the state of data type.
    :vartype state_reason: str
    :ivar storage_output_retention: Field for storage output retention in days.
    :vartype storage_output_retention: int
    :ivar database_cache_retention: Field for database cache retention in days.
    :vartype database_cache_retention: int
    :ivar database_retention: Field for database data retention in days.
    :vartype database_retention: int
    :ivar visualization_url: Url for data visualization.
    :vartype visualization_url: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Latest provisioning state  of data product. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    state: Optional[Union[str, "_models.DataTypeState"]] = rest_field(visibility=["read", "create", "update"])
    """State of data type. Known values are: \"Stopped\" and \"Running\"."""
    state_reason: Optional[str] = rest_field(name="stateReason", visibility=["read"])
    """Reason for the state of data type."""
    storage_output_retention: Optional[int] = rest_field(
        name="storageOutputRetention", visibility=["read", "create", "update"]
    )
    """Field for storage output retention in days."""
    database_cache_retention: Optional[int] = rest_field(
        name="databaseCacheRetention", visibility=["read", "create", "update"]
    )
    """Field for database cache retention in days."""
    database_retention: Optional[int] = rest_field(name="databaseRetention", visibility=["read", "create", "update"])
    """Field for database data retention in days."""
    visualization_url: Optional[str] = rest_field(name="visualizationUrl", visibility=["read"])
    """Url for data visualization."""

    @overload
    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.DataTypeState"]] = None,
        storage_output_retention: Optional[int] = None,
        database_cache_retention: Optional[int] = None,
        database_retention: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataTypeUpdate(_model_base.Model):
    """The type used for update operations of the DataType.

    :ivar properties:
    :vartype properties: ~azure.mgmt.networkanalytics.models.DataTypeUpdateProperties
    """

    properties: Optional["_models.DataTypeUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataTypeUpdateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataTypeUpdateProperties(_model_base.Model):
    """The updatable properties of the DataType.

    :ivar state: State of data type. Known values are: "Stopped" and "Running".
    :vartype state: str or ~azure.mgmt.networkanalytics.models.DataTypeState
    :ivar storage_output_retention: Field for storage output retention in days.
    :vartype storage_output_retention: int
    :ivar database_cache_retention: Field for database cache retention in days.
    :vartype database_cache_retention: int
    :ivar database_retention: Field for database data retention in days.
    :vartype database_retention: int
    """

    state: Optional[Union[str, "_models.DataTypeState"]] = rest_field(visibility=["read", "create", "update"])
    """State of data type. Known values are: \"Stopped\" and \"Running\"."""
    storage_output_retention: Optional[int] = rest_field(
        name="storageOutputRetention", visibility=["read", "create", "update"]
    )
    """Field for storage output retention in days."""
    database_cache_retention: Optional[int] = rest_field(
        name="databaseCacheRetention", visibility=["read", "create", "update"]
    )
    """Field for database cache retention in days."""
    database_retention: Optional[int] = rest_field(name="databaseRetention", visibility=["read", "create", "update"])
    """Field for database data retention in days."""

    @overload
    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.DataTypeState"]] = None,
        storage_output_retention: Optional[int] = None,
        database_cache_retention: Optional[int] = None,
        database_retention: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EncryptionKeyDetails(_model_base.Model):
    """Encryption key details.

    All required parameters must be populated in order to send to server.

    :ivar key_vault_uri: The Uri of the key vault. Required.
    :vartype key_vault_uri: str
    :ivar key_name: The name of the key vault key. Required.
    :vartype key_name: str
    :ivar key_version: The version of the key vault key. Required.
    :vartype key_version: str
    """

    key_vault_uri: str = rest_field(name="keyVaultUri")
    """The Uri of the key vault. Required."""
    key_name: str = rest_field(name="keyName")
    """The name of the key vault key. Required."""
    key_version: str = rest_field(name="keyVersion")
    """The version of the key vault key. Required."""

    @overload
    def __init__(
        self,
        *,
        key_vault_uri: str,
        key_name: str,
        key_version: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.networkanalytics.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.networkanalytics.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.networkanalytics.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IPRules(_model_base.Model):
    """IP rule with specific IP or IP range in CIDR format.

    All required parameters must be populated in order to send to server.

    :ivar value: IP Rules Value.
    :vartype value: str
    :ivar action: The action of virtual network rule. Required.
    :vartype action: str
    """

    value: Optional[str] = rest_field()
    """IP Rules Value."""
    action: str = rest_field()
    """The action of virtual network rule. Required."""

    @overload
    def __init__(
        self,
        *,
        action: str,
        value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class KeyVaultInfo(_model_base.Model):
    """Details for KeyVault.

    All required parameters must be populated in order to send to server.

    :ivar key_vault_url: key vault url. Required.
    :vartype key_vault_url: str
    """

    key_vault_url: str = rest_field(name="keyVaultUrl")
    """key vault url. Required."""

    @overload
    def __init__(
        self,
        *,
        key_vault_url: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ListRoleAssignments(_model_base.Model):
    """list role assignments.

    All required parameters must be populated in order to send to server.

    :ivar count: Count of role assignments. Required.
    :vartype count: int
    :ivar role_assignment_response: list of role assignments. Required.
    :vartype role_assignment_response:
     list[~azure.mgmt.networkanalytics.models.RoleAssignmentDetail]
    """

    count: int = rest_field()
    """Count of role assignments. Required."""
    role_assignment_response: List["_models.RoleAssignmentDetail"] = rest_field(name="roleAssignmentResponse")
    """list of role assignments. Required."""

    @overload
    def __init__(
        self,
        *,
        count: int,
        role_assignment_response: List["_models.RoleAssignmentDetail"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ManagedIdentityProperties(_model_base.Model):
    """The properties of the managed service identities assigned to this resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: The Active Directory tenant id of the principal.
    :vartype tenant_id: str
    :ivar principal_id: The active directory identifier of this principal.
    :vartype principal_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned, UserAssigned".
    :vartype type: str or ~azure.mgmt.networkanalytics.models.ManagedIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.networkanalytics.models.UserAssignedIdentity]
    """

    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The Active Directory tenant id of the principal."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The active directory identifier of this principal."""
    type: Union[str, "_models.ManagedIdentityType"] = rest_field()
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned, UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ManagedResourceGroupConfiguration(_model_base.Model):
    """ManagedResourceGroup related properties.

    All required parameters must be populated in order to send to server.

    :ivar name: Name of managed resource group. Required.
    :vartype name: str
    :ivar location: Managed Resource Group location. Required.
    :vartype location: str
    """

    name: str = rest_field()
    """Name of managed resource group. Required."""
    location: str = rest_field()
    """Managed Resource Group location. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        location: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.networkanalytics.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.networkanalytics.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.networkanalytics.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only
     APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field()
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field()
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field()
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field()
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PublisherInformation(_model_base.Model):
    """Details for Publisher Information.

    All required parameters must be populated in order to send to server.

    :ivar publisher_name: Name of the publisher. Required.
    :vartype publisher_name: str
    :ivar data_products: Data product information. Required.
    :vartype data_products: list[~azure.mgmt.networkanalytics.models.DataProductInformation]
    """

    publisher_name: str = rest_field(name="publisherName")
    """Name of the publisher. Required."""
    data_products: List["_models.DataProductInformation"] = rest_field(name="dataProducts")
    """Data product information. Required."""

    @overload
    def __init__(
        self,
        *,
        publisher_name: str,
        data_products: List["_models.DataProductInformation"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RoleAssignmentCommonProperties(_model_base.Model):
    """The details for role assignment common properties.

    All required parameters must be populated in order to send to server.

    :ivar role_id: Role Id of the Built-In Role. Required.
    :vartype role_id: str
    :ivar principal_id: Object ID of the AAD principal or security-group. Required.
    :vartype principal_id: str
    :ivar user_name: User name. Required.
    :vartype user_name: str
    :ivar data_type_scope: Data Type Scope at which the role assignment is created. Required.
    :vartype data_type_scope: list[str]
    :ivar principal_type: Type of the principal Id: User, Group or ServicePrincipal. Required.
    :vartype principal_type: str
    :ivar role: Data Product role to be assigned to a user. Required. Known values are: "Reader"
     and "SensitiveReader".
    :vartype role: str or ~azure.mgmt.networkanalytics.models.DataProductUserRole
    """

    role_id: str = rest_field(name="roleId")
    """Role Id of the Built-In Role. Required."""
    principal_id: str = rest_field(name="principalId")
    """Object ID of the AAD principal or security-group. Required."""
    user_name: str = rest_field(name="userName")
    """User name. Required."""
    data_type_scope: List[str] = rest_field(name="dataTypeScope")
    """Data Type Scope at which the role assignment is created. Required."""
    principal_type: str = rest_field(name="principalType")
    """Type of the principal Id: User, Group or ServicePrincipal. Required."""
    role: Union[str, "_models.DataProductUserRole"] = rest_field()
    """Data Product role to be assigned to a user. Required. Known values are: \"Reader\" and
     \"SensitiveReader\"."""

    @overload
    def __init__(
        self,
        *,
        role_id: str,
        principal_id: str,
        user_name: str,
        data_type_scope: List[str],
        principal_type: str,
        role: Union[str, "_models.DataProductUserRole"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RoleAssignmentDetail(_model_base.Model):
    """The details for role assignment response.

    All required parameters must be populated in order to send to server.

    :ivar role_id: Role Id of the Built-In Role. Required.
    :vartype role_id: str
    :ivar principal_id: Object ID of the AAD principal or security-group. Required.
    :vartype principal_id: str
    :ivar user_name: User name. Required.
    :vartype user_name: str
    :ivar data_type_scope: Data Type Scope at which the role assignment is created. Required.
    :vartype data_type_scope: list[str]
    :ivar principal_type: Type of the principal Id: User, Group or ServicePrincipal. Required.
    :vartype principal_type: str
    :ivar role: Data Product role to be assigned to a user. Required. Known values are: "Reader"
     and "SensitiveReader".
    :vartype role: str or ~azure.mgmt.networkanalytics.models.DataProductUserRole
    :ivar role_assignment_id: Id of role assignment request. Required.
    :vartype role_assignment_id: str
    """

    role_id: str = rest_field(name="roleId")
    """Role Id of the Built-In Role. Required."""
    principal_id: str = rest_field(name="principalId")
    """Object ID of the AAD principal or security-group. Required."""
    user_name: str = rest_field(name="userName")
    """User name. Required."""
    data_type_scope: List[str] = rest_field(name="dataTypeScope")
    """Data Type Scope at which the role assignment is created. Required."""
    principal_type: str = rest_field(name="principalType")
    """Type of the principal Id: User, Group or ServicePrincipal. Required."""
    role: Union[str, "_models.DataProductUserRole"] = rest_field()
    """Data Product role to be assigned to a user. Required. Known values are: \"Reader\" and
     \"SensitiveReader\"."""
    role_assignment_id: str = rest_field(name="roleAssignmentId")
    """Id of role assignment request. Required."""

    @overload
    def __init__(
        self,
        *,
        role_id: str,
        principal_id: str,
        user_name: str,
        data_type_scope: List[str],
        principal_type: str,
        role: Union[str, "_models.DataProductUserRole"],
        role_assignment_id: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.networkanalytics.models.CreatedByType
    :ivar created_at: The type of identity that created the resource.
    :vartype created_at: ~datetime.date
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.networkanalytics.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.date
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.date] = rest_field(name="createdAt", visibility=["read"])
    """The type of identity that created the resource."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy", visibility=["read"])
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.date] = rest_field(name="lastModifiedAt", visibility=["read"])
    """The timestamp of resource last modification (UTC)."""


class UserAssignedIdentity(_model_base.Model):
    """A managed identity assigned by the user.

    :ivar client_id: The active directory client identifier for this principal.
    :vartype client_id: str
    :ivar principal_id: The active directory identifier for this principal.
    :vartype principal_id: str
    """

    client_id: Optional[str] = rest_field(name="clientId")
    """The active directory client identifier for this principal."""
    principal_id: Optional[str] = rest_field(name="principalId")
    """The active directory identifier for this principal."""

    @overload
    def __init__(
        self,
        *,
        client_id: Optional[str] = None,
        principal_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualNetworkRule(_model_base.Model):
    """Virtual Network Rule.

    All required parameters must be populated in order to send to server.

    :ivar id: Resource ID of a subnet. Required.
    :vartype id: str
    :ivar action: The action of virtual network rule.
    :vartype action: str
    :ivar state: Gets the state of virtual network rule.
    :vartype state: str
    """

    id: str = rest_field()
    """Resource ID of a subnet. Required."""
    action: Optional[str] = rest_field()
    """The action of virtual network rule."""
    state: Optional[str] = rest_field()
    """Gets the state of virtual network rule."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        action: Optional[str] = None,
        state: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
