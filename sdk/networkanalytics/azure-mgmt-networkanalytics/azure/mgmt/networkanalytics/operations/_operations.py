# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.NetworkAnalytics/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_catalogs_get_request(
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProductsCatalogs/default"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_catalogs_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProductsCatalogs"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_catalogs_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkAnalytics/dataProductsCatalogs"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_create_request(
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_get_request(
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_update_request(
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_delete_request(
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, **kwargs)


def build_data_types_delete_data_request(
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}/deleteData"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_generate_storage_container_sas_token_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, data_type_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes/{dataTypeName}/generateStorageContainerSasToken"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
        "dataTypeName": _SERIALIZER.url("data_type_name", data_type_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_types_list_by_data_product_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/dataTypes"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_create_request(
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_get_request(
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_update_request(
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_delete_request(
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, **kwargs)


def build_data_products_generate_storage_account_sas_token_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/generateStorageAccountSasToken"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_rotate_key_request(
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/rotateKey"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_add_user_role_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/addUserRole"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_remove_user_role_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/removeUserRole"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_list_roles_assignments_request(  # pylint: disable=name-too-long
    resource_group_name: str, data_product_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/listRolesAssignments"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "dataProductName": _SERIALIZER.url("data_product_name", data_product_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_data_products_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-11-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkAnalytics/dataProducts"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.networkanalytics.NetworkAnalyticsClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable["_models.Operation"]:
        # pylint: disable=line-too-long
        """List the operations for the provider.

        :return: An iterator like instance of Operation
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.Operation]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # Optional. Enum. Indicates the action type. "Internal"
                      refers to actions that are for internal only APIs. "Internal"
                    "display": {
                        "description": "str",  # Optional. The short, localized friendly
                          description of the operation; suitable for tool tips and detailed views.
                        "operation": "str",  # Optional. The concise, localized friendly name
                          for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
                          Machine", "Restart Virtual Machine".
                        "provider": "str",  # Optional. The localized friendly form of the
                          resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
                          Compute".
                        "resource": "str"  # Optional. The localized friendly name of the
                          resource type related to this operation. E.g. "Virtual Machines" or "Job
                          Schedule Collections".
                    },
                    "isDataAction": bool,  # Optional. Whether the operation applies to
                      data-plane. This is "true" for data-plane operations and "false" for Azure
                      Resource Manager/control-plane operations.
                    "name": "str",  # Optional. The name of the operation, as per Resource-Based
                      Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
                      "Microsoft.Compute/virtualMachines/capture/action".
                    "origin": "str"  # Optional. The intended executor of the operation; as in
                      Resource Based Access Control (RBAC) and audit logs UX. Default value is
                      "user,system". Known values are: "user", "system", and "user,system".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Operation]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Operation], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class DataProductsCatalogsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.networkanalytics.NetworkAnalyticsClient`'s
        :attr:`data_products_catalogs` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, resource_group_name: str, **kwargs: Any) -> _models.DataProductsCatalog:
        # pylint: disable=line-too-long
        """Retrieve data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: DataProductsCatalog. The DataProductsCatalog is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.DataProductsCatalog
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "publishers": [
                            {
                                "dataProducts": [
                                    {
                                        "dataProductName": "str",  # Name of
                                          data product. Required.
                                        "dataProductVersions": [
                                            {
                                                "version": "str"  #
                                                  Version of data product. Required.
                                            }
                                        ],
                                        "description": "str"  # Description
                                          about data product. Required.
                                    }
                                ],
                                "publisherName": "str"  # Name of the publisher.
                                  Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. The data catalog provisioning
                          state. Known values are: "Succeeded", "Failed", "Canceled", "Provisioning",
                          "Updating", "Deleting", and "Accepted".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataProductsCatalog] = kwargs.pop("cls", None)

        _request = build_data_products_catalogs_get_request(
            resource_group_name=resource_group_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataProductsCatalog, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_resource_group(
        self, resource_group_name: str, **kwargs: Any
    ) -> Iterable["_models.DataProductsCatalog"]:
        # pylint: disable=line-too-long
        """List data catalog by resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of DataProductsCatalog
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.DataProductsCatalog]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "publishers": [
                            {
                                "dataProducts": [
                                    {
                                        "dataProductName": "str",  # Name of
                                          data product. Required.
                                        "dataProductVersions": [
                                            {
                                                "version": "str"  #
                                                  Version of data product. Required.
                                            }
                                        ],
                                        "description": "str"  # Description
                                          about data product. Required.
                                    }
                                ],
                                "publisherName": "str"  # Name of the publisher.
                                  Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. The data catalog provisioning
                          state. Known values are: "Succeeded", "Failed", "Canceled", "Provisioning",
                          "Updating", "Deleting", and "Accepted".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.DataProductsCatalog]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_data_products_catalogs_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DataProductsCatalog], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable["_models.DataProductsCatalog"]:
        # pylint: disable=line-too-long
        """List data catalog by subscription.

        :return: An iterator like instance of DataProductsCatalog
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.DataProductsCatalog]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "publishers": [
                            {
                                "dataProducts": [
                                    {
                                        "dataProductName": "str",  # Name of
                                          data product. Required.
                                        "dataProductVersions": [
                                            {
                                                "version": "str"  #
                                                  Version of data product. Required.
                                            }
                                        ],
                                        "description": "str"  # Description
                                          about data product. Required.
                                    }
                                ],
                                "publisherName": "str"  # Name of the publisher.
                                  Required.
                            }
                        ],
                        "provisioningState": "str"  # Optional. The data catalog provisioning
                          state. Known values are: "Succeeded", "Failed", "Canceled", "Provisioning",
                          "Updating", "Deleting", and "Accepted".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.DataProductsCatalog]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_data_products_catalogs_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DataProductsCatalog], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class DataTypesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.networkanalytics.NetworkAnalyticsClient`'s
        :attr:`data_types` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _create_initial(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        resource: Union[_models.DataType, JSON, IO[bytes]],
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_types_create_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        resource: _models.DataType,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Create data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param resource: Resource create parameters. Required.
        :type resource: ~azure.mgmt.networkanalytics.models.DataType
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Create data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Create data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @distributed_trace
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        resource: Union[_models.DataType, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Create data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param resource: Resource create parameters. Is one of the following types: DataType, JSON,
         IO[bytes] Required.
        :type resource: ~azure.mgmt.networkanalytics.models.DataType or JSON or IO[bytes]
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataType] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_initial(
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                data_type_name=data_type_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.DataType, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.DataType].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.DataType](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace
    def get(
        self, resource_group_name: str, data_product_name: str, data_type_name: str, **kwargs: Any
    ) -> _models.DataType:
        # pylint: disable=line-too-long
        """Retrieve data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :return: DataType. The DataType is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.DataType
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataType] = kwargs.pop("cls", None)

        _request = build_data_types_get_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataType, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _update_initial(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        properties: Union[_models.DataTypeUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _content = json.dumps(properties, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_types_update_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        properties: _models.DataTypeUpdate,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Update data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: ~azure.mgmt.networkanalytics.models.DataTypeUpdate
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "storageOutputRetention": 0  # Optional. Field for storage output
                          retention in days.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Update data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Update data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        properties: Union[_models.DataTypeUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.DataType]:
        # pylint: disable=line-too-long
        """Update data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param properties: The resource properties to be updated. Is one of the following types:
         DataTypeUpdate, JSON, IO[bytes] Required.
        :type properties: ~azure.mgmt.networkanalytics.models.DataTypeUpdate or JSON or IO[bytes]
        :return: An instance of LROPoller that returns DataType. The DataType is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "storageOutputRetention": 0  # Optional. Field for storage output
                          retention in days.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataType] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                data_type_name=data_type_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.DataType, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.DataType].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.DataType](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, data_product_name: str, data_type_name: str, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_data_types_delete_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, data_product_name: str, data_type_name: str, **kwargs: Any
    ) -> LROPoller[_models.ArmOperationStatus]:
        """Delete data type resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :return: An instance of LROPoller that returns ArmOperationStatus. The ArmOperationStatus is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.ArmOperationStatus]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # The operation status. Required. Known values are:
                      "Succeeded", "Failed", and "Canceled".
                    "endTime": "2020-02-20 00:00:00",  # Optional. Operation complete time.
                    "error": {
                        "additionalInfo": [
                            {
                                "info": {},  # Optional. The additional info.
                                "type": "str"  # Optional. The additional info type.
                            }
                        ],
                        "code": "str",  # Optional. The error code.
                        "details": [
                            ...
                        ],
                        "message": "str",  # Optional. The error message.
                        "target": "str"  # Optional. The error target.
                    },
                    "name": "str",  # Optional. The name of the  operationStatus resource.
                    "percentComplete": 0.0,  # Optional. The progress made toward completing the
                      operation.
                    "startTime": "2020-02-20 00:00:00"  # Optional. Operation start time.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ArmOperationStatus] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                data_type_name=data_type_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

            deserialized = _deserialize(_models.ArmOperationStatus, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ArmOperationStatus].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ArmOperationStatus](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_data_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, data_product_name: str, data_type_name: str, body: Any, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_types_delete_data_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete_data(
        self, resource_group_name: str, data_product_name: str, data_type_name: str, body: Any, **kwargs: Any
    ) -> LROPoller[_models.ArmOperationStatus]:
        """Delete data for data type.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param body: The content of the action request. Required.
        :type body: any
        :return: An instance of LROPoller that returns ArmOperationStatus. The ArmOperationStatus is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.ArmOperationStatus]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # The operation status. Required. Known values are:
                      "Succeeded", "Failed", and "Canceled".
                    "endTime": "2020-02-20 00:00:00",  # Optional. Operation complete time.
                    "error": {
                        "additionalInfo": [
                            {
                                "info": {},  # Optional. The additional info.
                                "type": "str"  # Optional. The additional info type.
                            }
                        ],
                        "code": "str",  # Optional. The error code.
                        "details": [
                            ...
                        ],
                        "message": "str",  # Optional. The error message.
                        "target": "str"  # Optional. The error target.
                    },
                    "name": "str",  # Optional. The name of the  operationStatus resource.
                    "percentComplete": 0.0,  # Optional. The progress made toward completing the
                      operation.
                    "startTime": "2020-02-20 00:00:00"  # Optional. Operation start time.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.ArmOperationStatus] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_data_initial(  # type: ignore
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                data_type_name=data_type_name,
                body=body,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

            deserialized = _deserialize(_models.ArmOperationStatus, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ArmOperationStatus].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ArmOperationStatus](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def generate_storage_container_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        body: _models.ContainerSaS,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ContainerSasToken:
        """Generate sas token for storage container.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.networkanalytics.models.ContainerSaS
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ContainerSasToken. The ContainerSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.ContainerSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "expiryTimeStamp": "2020-02-20 00:00:00",  # Sas token expiry timestamp.
                      Required.
                    "ipAddress": "str",  # Ip Address. Required.
                    "startTimeStamp": "2020-02-20 00:00:00"  # Sas token start timestamp.
                      Required.
                }

                # response body for status code(s): 200
                response == {
                    "storageContainerSasToken": "str"  # Field to specify storage container sas
                      token. Required.
                }
        """

    @overload
    def generate_storage_container_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ContainerSasToken:
        """Generate sas token for storage container.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ContainerSasToken. The ContainerSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.ContainerSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageContainerSasToken": "str"  # Field to specify storage container sas
                      token. Required.
                }
        """

    @overload
    def generate_storage_container_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ContainerSasToken:
        """Generate sas token for storage container.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ContainerSasToken. The ContainerSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.ContainerSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageContainerSasToken": "str"  # Field to specify storage container sas
                      token. Required.
                }
        """

    @distributed_trace
    def generate_storage_container_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        data_type_name: str,
        body: Union[_models.ContainerSaS, JSON, IO[bytes]],
        **kwargs: Any
    ) -> _models.ContainerSasToken:
        """Generate sas token for storage container.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param data_type_name: The data type name. Required.
        :type data_type_name: str
        :param body: The content of the action request. Is one of the following types: ContainerSaS,
         JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.networkanalytics.models.ContainerSaS or JSON or IO[bytes]
        :return: ContainerSasToken. The ContainerSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.ContainerSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "expiryTimeStamp": "2020-02-20 00:00:00",  # Sas token expiry timestamp.
                      Required.
                    "ipAddress": "str",  # Ip Address. Required.
                    "startTimeStamp": "2020-02-20 00:00:00"  # Sas token start timestamp.
                      Required.
                }

                # response body for status code(s): 200
                response == {
                    "storageContainerSasToken": "str"  # Field to specify storage container sas
                      token. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ContainerSasToken] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_types_generate_storage_container_sas_token_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            data_type_name=data_type_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ContainerSasToken, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_data_product(
        self, resource_group_name: str, data_product_name: str, **kwargs: Any
    ) -> Iterable["_models.DataType"]:
        # pylint: disable=line-too-long
        """List data type by parent resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :return: An iterator like instance of DataType
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.DataType]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "properties": {
                        "databaseCacheRetention": 0,  # Optional. Field for database cache
                          retention in days.
                        "databaseRetention": 0,  # Optional. Field for database data
                          retention in days.
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "state": "str",  # Optional. State of data type. Known values are:
                          "Stopped" and "Running".
                        "stateReason": "str",  # Optional. Reason for the state of data type.
                        "storageOutputRetention": 0,  # Optional. Field for storage output
                          retention in days.
                        "visualizationUrl": "str"  # Optional. Url for data visualization.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.DataType]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_data_types_list_by_data_product_request(
                    resource_group_name=resource_group_name,
                    data_product_name=data_product_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DataType], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class DataProductsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.networkanalytics.NetworkAnalyticsClient`'s
        :attr:`data_products` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _create_initial(
        self,
        resource_group_name: str,
        data_product_name: str,
        resource: Union[_models.DataProduct, JSON, IO[bytes]],
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_create_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        resource: _models.DataProduct,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Create data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param resource: Resource create parameters. Required.
        :type resource: ~azure.mgmt.networkanalytics.models.DataProduct
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Create data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Create data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @distributed_trace
    def begin_create(
        self,
        resource_group_name: str,
        data_product_name: str,
        resource: Union[_models.DataProduct, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Create data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param resource: Resource create parameters. Is one of the following types: DataProduct, JSON,
         IO[bytes] Required.
        :type resource: ~azure.mgmt.networkanalytics.models.DataProduct or JSON or IO[bytes]
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataProduct] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_initial(
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.DataProduct, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.DataProduct].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.DataProduct](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace
    def get(self, resource_group_name: str, data_product_name: str, **kwargs: Any) -> _models.DataProduct:
        # pylint: disable=line-too-long
        """Retrieve data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :return: DataProduct. The DataProduct is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.DataProduct
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataProduct] = kwargs.pop("cls", None)

        _request = build_data_products_get_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DataProduct, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _update_initial(
        self,
        resource_group_name: str,
        data_product_name: str,
        properties: Union[_models.DataProductUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _content = json.dumps(properties, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_update_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        properties: _models.DataProductUpdate,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Update data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: ~azure.mgmt.networkanalytics.models.DataProductUpdate
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str"  # Optional. Purview collection url for
                          data product to connect to.
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Update data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Update data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        data_product_name: str,
        properties: Union[_models.DataProductUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.DataProduct]:
        # pylint: disable=line-too-long
        """Update data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param properties: The resource properties to be updated. Is one of the following types:
         DataProductUpdate, JSON, IO[bytes] Required.
        :type properties: ~azure.mgmt.networkanalytics.models.DataProductUpdate or JSON or IO[bytes]
        :return: An instance of LROPoller that returns DataProduct. The DataProduct is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str"  # Optional. Purview collection url for
                          data product to connect to.
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataProduct] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.DataProduct, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.DataProduct].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.DataProduct](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, data_product_name: str, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_data_products_delete_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, data_product_name: str, **kwargs: Any
    ) -> LROPoller[_models.ArmOperationStatus]:
        """Delete data product resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :return: An instance of LROPoller that returns ArmOperationStatus. The ArmOperationStatus is
         compatible with MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.networkanalytics.models.ArmOperationStatus]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # The operation status. Required. Known values are:
                      "Succeeded", "Failed", and "Canceled".
                    "endTime": "2020-02-20 00:00:00",  # Optional. Operation complete time.
                    "error": {
                        "additionalInfo": [
                            {
                                "info": {},  # Optional. The additional info.
                                "type": "str"  # Optional. The additional info type.
                            }
                        ],
                        "code": "str",  # Optional. The error code.
                        "details": [
                            ...
                        ],
                        "message": "str",  # Optional. The error message.
                        "target": "str"  # Optional. The error target.
                    },
                    "name": "str",  # Optional. The name of the  operationStatus resource.
                    "percentComplete": 0.0,  # Optional. The progress made toward completing the
                      operation.
                    "startTime": "2020-02-20 00:00:00"  # Optional. Operation start time.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ArmOperationStatus] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                data_product_name=data_product_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))

            deserialized = _deserialize(_models.ArmOperationStatus, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.ArmOperationStatus].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.ArmOperationStatus](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @overload
    def generate_storage_account_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: _models.AccountSas,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AccountSasToken:
        """Generate sas token for storage account.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.networkanalytics.models.AccountSas
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AccountSasToken. The AccountSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.AccountSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "expiryTimeStamp": "2020-02-20 00:00:00",  # Sas token expiry timestamp.
                      Required.
                    "ipAddress": "str",  # Ip Address. Required.
                    "startTimeStamp": "2020-02-20 00:00:00"  # Sas token start timestamp.
                      Required.
                }

                # response body for status code(s): 200
                response == {
                    "storageAccountSasToken": "str"  # Field to specify storage account sas
                      token. Required.
                }
        """

    @overload
    def generate_storage_account_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AccountSasToken:
        """Generate sas token for storage account.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AccountSasToken. The AccountSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.AccountSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageAccountSasToken": "str"  # Field to specify storage account sas
                      token. Required.
                }
        """

    @overload
    def generate_storage_account_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.AccountSasToken:
        """Generate sas token for storage account.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: AccountSasToken. The AccountSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.AccountSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "storageAccountSasToken": "str"  # Field to specify storage account sas
                      token. Required.
                }
        """

    @distributed_trace
    def generate_storage_account_sas_token(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: Union[_models.AccountSas, JSON, IO[bytes]],
        **kwargs: Any
    ) -> _models.AccountSasToken:
        """Generate sas token for storage account.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Is one of the following types: AccountSas,
         JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.networkanalytics.models.AccountSas or JSON or IO[bytes]
        :return: AccountSasToken. The AccountSasToken is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.AccountSasToken
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "expiryTimeStamp": "2020-02-20 00:00:00",  # Sas token expiry timestamp.
                      Required.
                    "ipAddress": "str",  # Ip Address. Required.
                    "startTimeStamp": "2020-02-20 00:00:00"  # Sas token start timestamp.
                      Required.
                }

                # response body for status code(s): 200
                response == {
                    "storageAccountSasToken": "str"  # Field to specify storage account sas
                      token. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.AccountSasToken] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_generate_storage_account_sas_token_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.AccountSasToken, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def rotate_key(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: _models.KeyVaultInfo,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Initiate key rotation on Data Product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.networkanalytics.models.KeyVaultInfo
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "keyVaultUrl": "str"  # key vault url. Required.
                }
        """

    @overload
    def rotate_key(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Initiate key rotation on Data Product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def rotate_key(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Initiate key rotation on Data Product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def rotate_key(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: Union[_models.KeyVaultInfo, JSON, IO[bytes]],
        **kwargs: Any
    ) -> None:
        """Initiate key rotation on Data Product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Is one of the following types: KeyVaultInfo,
         JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.networkanalytics.models.KeyVaultInfo or JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "keyVaultUrl": "str"  # key vault url. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_rotate_key_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_user_role(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: _models.RoleAssignmentCommonProperties,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RoleAssignmentDetail:
        # pylint: disable=line-too-long
        """Assign role to the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.networkanalytics.models.RoleAssignmentCommonProperties
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RoleAssignmentDetail. The RoleAssignmentDetail is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }

                # response body for status code(s): 200
                response == {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """

    @overload
    def add_user_role(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RoleAssignmentDetail:
        # pylint: disable=line-too-long
        """Assign role to the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RoleAssignmentDetail. The RoleAssignmentDetail is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """

    @overload
    def add_user_role(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RoleAssignmentDetail:
        # pylint: disable=line-too-long
        """Assign role to the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RoleAssignmentDetail. The RoleAssignmentDetail is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """

    @distributed_trace
    def add_user_role(
        self,
        resource_group_name: str,
        data_product_name: str,
        body: Union[_models.RoleAssignmentCommonProperties, JSON, IO[bytes]],
        **kwargs: Any
    ) -> _models.RoleAssignmentDetail:
        # pylint: disable=line-too-long
        """Assign role to the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Is one of the following types:
         RoleAssignmentCommonProperties, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.networkanalytics.models.RoleAssignmentCommonProperties or JSON or
         IO[bytes]
        :return: RoleAssignmentDetail. The RoleAssignmentDetail is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }

                # response body for status code(s): 200
                response == {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RoleAssignmentDetail] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_add_user_role_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.RoleAssignmentDetail, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def remove_user_role(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: _models.RoleAssignmentDetail,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Remove role from the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """

    @overload
    def remove_user_role(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove role from the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def remove_user_role(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove role from the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_user_role(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        data_product_name: str,
        body: Union[_models.RoleAssignmentDetail, JSON, IO[bytes]],
        **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Remove role from the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Is one of the following types:
         RoleAssignmentDetail, JSON, IO[bytes] Required.
        :type body: ~azure.mgmt.networkanalytics.models.RoleAssignmentDetail or JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataTypeScope": [
                        "str"  # Data Type Scope at which the role assignment is created.
                          Required.
                    ],
                    "principalId": "str",  # Object ID of the AAD principal or security-group.
                      Required.
                    "principalType": "str",  # Type of the principal Id: User, Group or
                      ServicePrincipal. Required.
                    "role": "str",  # Data Product role to be assigned to a user. Required. Known
                      values are: "Reader" and "SensitiveReader".
                    "roleAssignmentId": "str",  # Id of role assignment request. Required.
                    "roleId": "str",  # Role Id of the Built-In Role. Required.
                    "userName": "str"  # User name. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_remove_user_role_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_roles_assignments(
        self, resource_group_name: str, data_product_name: str, body: Any, **kwargs: Any
    ) -> _models.ListRoleAssignments:
        # pylint: disable=line-too-long
        """List user roles associated with the data product.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param data_product_name: The data product resource name. Required.
        :type data_product_name: str
        :param body: The content of the action request. Required.
        :type body: any
        :return: ListRoleAssignments. The ListRoleAssignments is compatible with MutableMapping
        :rtype: ~azure.mgmt.networkanalytics.models.ListRoleAssignments
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "count": 0,  # Count of role assignments. Required.
                    "roleAssignmentResponse": [
                        {
                            "dataTypeScope": [
                                "str"  # Data Type Scope at which the role assignment
                                  is created. Required.
                            ],
                            "principalId": "str",  # Object ID of the AAD principal or
                              security-group. Required.
                            "principalType": "str",  # Type of the principal Id: User,
                              Group or ServicePrincipal. Required.
                            "role": "str",  # Data Product role to be assigned to a user.
                              Required. Known values are: "Reader" and "SensitiveReader".
                            "roleAssignmentId": "str",  # Id of role assignment request.
                              Required.
                            "roleId": "str",  # Role Id of the Built-In Role. Required.
                            "userName": "str"  # User name. Required.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.ListRoleAssignments] = kwargs.pop("cls", None)

        _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_data_products_list_roles_assignments_request(
            resource_group_name=resource_group_name,
            data_product_name=data_product_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ListRoleAssignments, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable["_models.DataProduct"]:
        # pylint: disable=line-too-long
        """List data products by resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of DataProduct
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.DataProduct]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_data_products_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DataProduct], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable["_models.DataProduct"]:
        # pylint: disable=line-too-long
        """List data products by subscription.

        :return: An iterator like instance of DataProduct
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.networkanalytics.models.DataProduct]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                      Required.
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "type": "str",  # The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                      Required.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {
                            "str": {
                                "clientId": "str",  # Optional. The active directory
                                  client identifier for this principal.
                                "principalId": "str"  # Optional. The active
                                  directory identifier for this principal.
                            }
                        }
                    },
                    "properties": {
                        "majorVersion": "str",  # Major version of data product. Required.
                        "product": "str",  # Product name of data product. Required.
                        "publisher": "str",  # Data product publisher name. Required.
                        "availableMinorVersions": [
                            "str"  # Optional. List of available minor versions of the
                              data product resource.
                        ],
                        "consumptionEndpoints": {
                            "fileAccessResourceId": "str",  # Optional. Resource Id of
                              file access endpoint.
                            "fileAccessUrl": "str",  # Optional. Url to consume file
                              type.
                            "ingestionResourceId": "str",  # Optional. Resource Id of
                              ingestion endpoint.
                            "ingestionUrl": "str",  # Optional. Ingestion url to upload
                              the data.
                            "queryResourceId": "str",  # Optional. Resource Id of query
                              endpoint.
                            "queryUrl": "str"  # Optional. Url to consume the processed
                              data.
                        },
                        "currentMinorVersion": "str",  # Optional. Current configured minor
                          version of the data product resource.
                        "customerEncryptionKey": {
                            "keyName": "str",  # The name of the key vault key. Required.
                            "keyVaultUri": "str",  # The Uri of the key vault. Required.
                            "keyVersion": "str"  # The version of the key vault key.
                              Required.
                        },
                        "customerManagedKeyEncryptionEnabled": "str",  # Optional. Flag to
                          enable customer managed key encryption for data product. Known values are:
                          "Enabled" and "Disabled".
                        "documentation": "str",  # Optional. Documentation link for the data
                          product based on definition file.
                        "keyVaultUrl": "str",  # Optional. Key vault url.
                        "managedResourceGroupConfiguration": {
                            "location": "str",  # Managed Resource Group location.
                              Required.
                            "name": "str"  # Name of managed resource group. Required.
                        },
                        "networkacls": {
                            "allowedQueryIpRangeList": [
                                "str"  # The list of query ips in the format of CIDR
                                  allowed to connect to query/visualization endpoint. Required.
                            ],
                            "defaultAction": "str",  # Default Action. Required. Known
                              values are: "Allow" and "Deny".
                            "ipRules": [
                                {
                                    "action": "str",  # The action of virtual
                                      network rule. Required.
                                    "value": "str"  # Optional. IP Rules Value.
                                }
                            ],
                            "virtualNetworkRule": [
                                {
                                    "id": "str",  # Resource ID of a subnet.
                                      Required.
                                    "action": "str",  # Optional. The action of
                                      virtual network rule.
                                    "state": "str"  # Optional. Gets the state of
                                      virtual network rule.
                                }
                            ]
                        },
                        "owners": [
                            "str"  # Optional. List of name or email associated with data
                              product resource deployment.
                        ],
                        "privateLinksEnabled": "str",  # Optional. Flag to enable or disable
                          private link for data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "provisioningState": "str",  # Optional. Latest provisioning state
                          of data product. Known values are: "Succeeded", "Failed", "Canceled",
                          "Provisioning", "Updating", "Deleting", and "Accepted".
                        "publicNetworkAccess": "str",  # Optional. Flag to enable or disable
                          public access of data product resource. Known values are: "Enabled" and
                          "Disabled".
                        "purviewAccount": "str",  # Optional. Purview account url for data
                          product to connect to.
                        "purviewCollection": "str",  # Optional. Purview collection url for
                          data product to connect to.
                        "redundancy": "str",  # Optional. Flag to enable or disable
                          redundancy for data product. Known values are: "Enabled" and "Disabled".
                        "resourceGuid": "str"  # Optional. The resource GUID property of the
                          data product resource.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.DataProduct]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_data_products_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DataProduct], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
