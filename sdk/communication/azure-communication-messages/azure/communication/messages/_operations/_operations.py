# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, overload
import urllib.parse
import uuid

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import MessageTemplateClientMixinABC, NotificationMessagesClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_notification_messages_post_message_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/messages/notifications/:send"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if "Repeatability-Request-ID" not in _headers:
        _headers["Repeatability-Request-ID"] = str(uuid.uuid4())
    if "Repeatability-First-Sent" not in _headers:
        _headers["Repeatability-First-Sent"] = _SERIALIZER.serialize_data(datetime.datetime.now(), "rfc-1123")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_notification_messages_get_media_request(  # pylint: disable=name-too-long
    id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/messages/streams/{id}"
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_message_template_get_templates_request(  # pylint: disable=name-too-long
    channel_id: str, *, max_page_size: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/messages/channels/{channelId}/templates"
    path_format_arguments = {
        "channelId": _SERIALIZER.url("channel_id", channel_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if max_page_size is not None:
        _params["maxPageSize"] = _SERIALIZER.query("max_page_size", max_page_size, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class NotificationMessagesClientOperationsMixin(NotificationMessagesClientMixinABC):  # pylint: disable=name-too-long
    @overload
    def post_message(
        self, body: _models.SendNotificationRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SendMessageResult:
        # pylint: disable=line-too-long
        """Sends a notification message from Business to User.

        Sends a notification message from Business to User.

        :param body: Details of the message to send. Required.
        :type body: ~azure.communication.messages.models.SendNotificationRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SendMessageResult. The SendMessageResult is compatible with MutableMapping
        :rtype: ~azure.communication.messages.models.SendMessageResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "channelRegistrationId": "str",  # The Channel Registration ID for the
                      Business Identifier. Required.
                    "to": [
                        "str"  # The native external platform user identifiers of the
                          recipient. Required.
                    ],
                    "type": "str",  # The type of message. Supports text, image, template.
                      Required. Known values are: "text", "image", and "template".
                    "content": "str",  # Optional. Message content.
                    "mediaUri": "str",  # Optional. A media url for the file. Required if the
                      type is one of the supported media types, e.g. image.
                    "template": {
                        "language": "str",  # The codes for the supported languages for
                          templates. Required.
                        "name": "str",  # Name of the template. Required.
                        "bindings": {
                            "whatsApp": {
                                "body": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ],
                                "button": [
                                    {
                                        "refValue": "str",  # The reference
                                          to the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                        "subType": "str"  # Optional. The
                                          WhatsApp button sub type. Known values are: "quickReply" and
                                          "url".
                                    }
                                ],
                                "footer": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ],
                                "header": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ]
                            }
                        },
                        "values": {
                            "str": {
                                "kind": "str",  # The template value kind. Required.
                                  Known values are: "text", "image", "document", "video", "location",
                                  and "quick_action".
                                "document": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                },
                                "image": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                },
                                "location": {
                                    "address": "str",  # Optional. The [Optional]
                                      address of the location.
                                    "latitude": 0.0,  # Optional. The latitude of
                                      the location.
                                    "longitude": 0.0,  # Optional. The longitude
                                      of the location.
                                    "name": "str"  # Optional. The [Optional]
                                      name of the location.
                                },
                                "quickAction": {
                                    "payload": "str",  # Optional. The [Optional]
                                      quick action payload.
                                    "text": "str"  # Optional. The [Optional]
                                      quick action text.
                                },
                                "text": {
                                    "text": "str"  # The text value. Required.
                                },
                                "video": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                }
                            }
                        }
                    }
                }

                # response body for status code(s): 202
                response == {
                    "receipts": [
                        {
                            "messageId": "str",  # The message id. Required.
                            "to": "str"  # The native external platform user identifier
                              of the recipient. Required.
                        }
                    ]
                }
        """

    @overload
    def post_message(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SendMessageResult:
        """Sends a notification message from Business to User.

        Sends a notification message from Business to User.

        :param body: Details of the message to send. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SendMessageResult. The SendMessageResult is compatible with MutableMapping
        :rtype: ~azure.communication.messages.models.SendMessageResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "receipts": [
                        {
                            "messageId": "str",  # The message id. Required.
                            "to": "str"  # The native external platform user identifier
                              of the recipient. Required.
                        }
                    ]
                }
        """

    @overload
    def post_message(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SendMessageResult:
        """Sends a notification message from Business to User.

        Sends a notification message from Business to User.

        :param body: Details of the message to send. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SendMessageResult. The SendMessageResult is compatible with MutableMapping
        :rtype: ~azure.communication.messages.models.SendMessageResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "receipts": [
                        {
                            "messageId": "str",  # The message id. Required.
                            "to": "str"  # The native external platform user identifier
                              of the recipient. Required.
                        }
                    ]
                }
        """

    @distributed_trace
    def post_message(
        self, body: Union[_models.SendNotificationRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.SendMessageResult:
        # pylint: disable=line-too-long
        """Sends a notification message from Business to User.

        Sends a notification message from Business to User.

        :param body: Details of the message to send. Is one of the following types:
         SendNotificationRequest, JSON, IO[bytes] Required.
        :type body: ~azure.communication.messages.models.SendNotificationRequest or JSON or IO[bytes]
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SendMessageResult. The SendMessageResult is compatible with MutableMapping
        :rtype: ~azure.communication.messages.models.SendMessageResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "channelRegistrationId": "str",  # The Channel Registration ID for the
                      Business Identifier. Required.
                    "to": [
                        "str"  # The native external platform user identifiers of the
                          recipient. Required.
                    ],
                    "type": "str",  # The type of message. Supports text, image, template.
                      Required. Known values are: "text", "image", and "template".
                    "content": "str",  # Optional. Message content.
                    "mediaUri": "str",  # Optional. A media url for the file. Required if the
                      type is one of the supported media types, e.g. image.
                    "template": {
                        "language": "str",  # The codes for the supported languages for
                          templates. Required.
                        "name": "str",  # Name of the template. Required.
                        "bindings": {
                            "whatsApp": {
                                "body": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ],
                                "button": [
                                    {
                                        "refValue": "str",  # The reference
                                          to the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                        "subType": "str"  # Optional. The
                                          WhatsApp button sub type. Known values are: "quickReply" and
                                          "url".
                                    }
                                ],
                                "footer": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ],
                                "header": [
                                    {
                                        "refValue": "str"  # The reference to
                                          the value in the
                                          Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
                                          dictionary. Required.
                                    }
                                ]
                            }
                        },
                        "values": {
                            "str": {
                                "kind": "str",  # The template value kind. Required.
                                  Known values are: "text", "image", "document", "video", "location",
                                  and "quick_action".
                                "document": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                },
                                "image": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                },
                                "location": {
                                    "address": "str",  # Optional. The [Optional]
                                      address of the location.
                                    "latitude": 0.0,  # Optional. The latitude of
                                      the location.
                                    "longitude": 0.0,  # Optional. The longitude
                                      of the location.
                                    "name": "str"  # Optional. The [Optional]
                                      name of the location.
                                },
                                "quickAction": {
                                    "payload": "str",  # Optional. The [Optional]
                                      quick action payload.
                                    "text": "str"  # Optional. The [Optional]
                                      quick action text.
                                },
                                "text": {
                                    "text": "str"  # The text value. Required.
                                },
                                "video": {
                                    "caption": "str",  # Optional. The [optional]
                                      caption of the media object.
                                    "fileName": "str",  # Optional. The
                                      [optional] filename of the media file.
                                    "url": "str"  # Optional. The (public) URL of
                                      the media.
                                }
                            }
                        }
                    }
                }

                # response body for status code(s): 202
                response == {
                    "receipts": [
                        {
                            "messageId": "str",  # The message id. Required.
                            "to": "str"  # The native external platform user identifier
                              of the recipient. Required.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SendMessageResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_notification_messages_post_message_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SendMessageResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get_media(self, id: str, **kwargs: Any) -> bytes:
        """Download the Media payload from a User to Business message.

        Download the Media payload from a User to Business message.

        :param id: The Media Identifier contained in the User to Business message event. Required.
        :type id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: bytes
        :rtype: bytes
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bytes] = kwargs.pop("cls", None)

        _request = build_notification_messages_get_media_request(
            id=id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response.read()
        deserialized = response.content

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class MessageTemplateClientOperationsMixin(MessageTemplateClientMixinABC):
    @distributed_trace
    def get_templates(
        self, channel_id: str, *, max_page_size: Optional[int] = None, **kwargs: Any
    ) -> Iterable["_models.MessageTemplateResponse"]:
        # pylint: disable=line-too-long
        """List all templates for given ACS channel.

        List all templates for given ACS channel.

        :param channel_id: The registration ID of the channel. Required.
        :type channel_id: str
        :keyword max_page_size: The max page size. Default value is None.
        :paramtype max_page_size: int
        :return: An iterator like instance of MessageTemplateResponse
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.communication.messages.models.MessageTemplateResponse]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "channelType": "str",  # Optional. The Communication Messages Channel.
                      "whatsApp"
                    "language": "str",  # Optional. Get the template's language.
                    "name": "str",  # Optional. Get the template's Name.
                    "status": "str",  # Optional. The aggregated template status. Known values
                      are: "approved", "rejected", "pending", and "paused".
                    "whatsApp": {
                        "content": {}  # Optional. WhatsApp platform's template content This
                          is the payload returned from WhatsApp API.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.MessageTemplateResponse]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_message_template_get_templates_request(
                    channel_id=channel_id,
                    max_page_size=max_page_size,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.MessageTemplateResponse], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
