# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import (
    CommunicationMessageKind,
    CommunicationMessagesChannel,
    MessageActionBindingKind,
    MessageContentKind,
    MessagePlatformKind,
    MessageTemplateBindingsKind,
    MessageTemplateValueKind,
    ParticipantKind,
)

if TYPE_CHECKING:
    from .. import models as _models


class ActionBindings(_model_base.Model):
    """Binding actions to the interactive message.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    WhatsAppButtonActionBindings, WhatsAppListActionBindings, WhatsAppUrlActionBindings

    :ivar kind: Kind of the MessageActionBinding. Required. Known values are: "whatsAppListAction",
     "whatsAppButtonAction", and "whatsAppUrlAction".
    :vartype kind: str or ~azure.communication.messages.models.MessageActionBindingKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Kind of the MessageActionBinding. Required. Known values are: \"whatsAppListAction\",
     \"whatsAppButtonAction\", and \"whatsAppUrlAction\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ActionGroup(_model_base.Model):
    """The Action Group content.

    :ivar title: Title of the ActionGroup. Required.
    :vartype title: str
    :ivar items_property: Array of items in ActionGroup. Required.
    :vartype items_property: list[~azure.communication.messages.models.ActionGroupItem]
    """

    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the ActionGroup. Required."""
    items_property: List["_models.ActionGroupItem"] = rest_field(
        name="items", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of items in ActionGroup. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        items_property: List["_models.ActionGroupItem"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageContent(_model_base.Model):
    """The message content object used to create interactive messages components.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ButtonSetContent, DocumentMessageContent, ActionGroupContent, ImageMessageContent,
    TextMessageContent, LinkContent, VideoMessageContent

    :ivar kind: Kind of MessageContent. Required. Known values are: "text", "image", "video",
     "document", "group", "buttonSet", and "url".
    :vartype kind: str or ~azure.communication.messages.models.MessageContentKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Kind of MessageContent. Required. Known values are: \"text\", \"image\", \"video\",
     \"document\", \"group\", \"buttonSet\", and \"url\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ActionGroupContent(MessageContent, discriminator="group"):
    """The action content of type ActionGroup.

    :ivar kind: Message content kind is actionGroup. Required. The ActionSet content type.
    :vartype kind: str or ~azure.communication.messages.models.GROUP
    :ivar title: Title of the actionGroup content. Required.
    :vartype title: str
    :ivar groups: Set or group of actions. Required.
    :vartype groups: list[~azure.communication.messages.models.ActionGroup]
    """

    kind: Literal[MessageContentKind.GROUP] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is actionGroup. Required. The ActionSet content type."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the actionGroup content. Required."""
    groups: List["_models.ActionGroup"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Set or group of actions. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        groups: List["_models.ActionGroup"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.GROUP, **kwargs)


class ActionGroupItem(_model_base.Model):
    """The Action group item in the content.

    :ivar id: Id of the Item. Required.
    :vartype id: str
    :ivar title: Title of the Item. Required.
    :vartype title: str
    :ivar description: Description of the Item. Required.
    :vartype description: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the Item. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the Item. Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the Item. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
        description: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddParticipantsOptions(_model_base.Model):
    """Request payload for adding participants to a conversation.

    :ivar participants: List of participants to add. Required.
    :vartype participants: list[~azure.communication.messages.models.ConversationParticipant]
    """

    participants: List["_models.ConversationParticipant"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of participants to add. Required."""

    @overload
    def __init__(
        self,
        *,
        participants: List["_models.ConversationParticipant"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddParticipantsResult(_model_base.Model):
    """Response for the add participants operation.

    :ivar invalid_participants: List of Ids with Errors if failed to be added. Required.
    :vartype invalid_participants:
     list[~azure.communication.messages.models.UpdateParticipantsResult]
    """

    invalid_participants: List["_models.UpdateParticipantsResult"] = rest_field(
        name="invalidParticipants", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Ids with Errors if failed to be added. Required."""

    @overload
    def __init__(
        self,
        *,
        invalid_participants: List["_models.UpdateParticipantsResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConversationMessageContent(_model_base.Model):
    """Details of the conversation message content.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AudioConversationMessageContent, DocumentConversationMessageContent,
    ImageConversationMessageContent, TemplateConversationMessageContent,
    TextConversationMessageContent, VideoConversationMessageContent

    :ivar kind: The type discriminator describing a message type. Required. Known values are:
     "text", "image", "image_v0", "document", "video", "audio", "template", "sticker", "reaction",
     and "interactive".
    :vartype kind: str or ~azure.communication.messages.models.CommunicationMessageKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a message type. Required. Known values are: \"text\",
     \"image\", \"image_v0\", \"document\", \"video\", \"audio\", \"template\", \"sticker\",
     \"reaction\", and \"interactive\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AudioConversationMessageContent(ConversationMessageContent, discriminator="audio"):
    """A request to send an audio conversation message.

    :ivar kind: Message notification type is audio. Required. Audio message type.
    :vartype kind: str or ~azure.communication.messages.models.AUDIO
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.AUDIO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is audio. Required. Audio message type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.AUDIO, **kwargs)


class NotificationContent(_model_base.Model):
    """Details of the message to send.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AudioNotificationContent, DocumentNotificationContent, ImageNotificationContent,
    MediaNotificationContent, InteractiveNotificationContent, ReactionNotificationContent,
    StickerNotificationContent, TemplateNotificationContent, TextNotificationContent,
    VideoNotificationContent

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: The type discriminator describing a message type. Required. Known values are:
     "text", "image", "image_v0", "document", "video", "audio", "template", "sticker", "reaction",
     and "interactive".
    :vartype kind: str or ~azure.communication.messages.models.CommunicationMessageKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    channel_registration_id: str = rest_field(
        name="channelRegistrationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Channel Registration ID for the Business Identifier. Required."""
    to: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The native external platform user identifiers of the recipient. Required."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a message type. Required. Known values are: \"text\",
     \"image\", \"image_v0\", \"document\", \"video\", \"audio\", \"template\", \"sticker\",
     \"reaction\", and \"interactive\"."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AudioNotificationContent(NotificationContent, discriminator="audio"):
    """A request to send an audio notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is audio. Required. Audio message type.
    :vartype kind: str or ~azure.communication.messages.models.AUDIO
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.AUDIO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is audio. Required. Audio message type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.AUDIO, **kwargs)


class Contact(_model_base.Model):
    """Details of an external platform contact.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BotContact, CommunicationContact, WhatsAppContact

    :ivar id: External platform identifier. Required.
    :vartype id: str
    :ivar kind: Type of message platform (e.g., WhatsApp). Required. Known values are:
     "communication", "bot", and "whatsApp".
    :vartype kind: str or ~azure.communication.messages.models.MessagePlatformKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """External platform identifier. Required."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Type of message platform (e.g., WhatsApp). Required. Known values are: \"communication\",
     \"bot\", and \"whatsApp\"."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BotContact(Contact, discriminator="bot"):
    """Bot Contact.

    :ivar id: External platform identifier. Required.
    :vartype id: str
    :ivar kind: Contact type is bot. Required. Bot platform.
    :vartype kind: str or ~azure.communication.messages.models.BOT
    :ivar bot_app_id: Bot App Id of the Bot Contact. Required.
    :vartype bot_app_id: str
    """

    kind: Literal[MessagePlatformKind.BOT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Contact type is bot. Required. Bot platform."""
    bot_app_id: str = rest_field(name="botAppId", visibility=["read", "create", "update", "delete", "query"])
    """Bot App Id of the Bot Contact. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        bot_app_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessagePlatformKind.BOT, **kwargs)


class ButtonContent(_model_base.Model):
    """The message content of type Button information.

    :ivar id: Unique Id of the button content. Required.
    :vartype id: str
    :ivar title: Title of the button content. Required.
    :vartype title: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique Id of the button content. Required."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the button content. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        title: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ButtonSetContent(MessageContent, discriminator="buttonSet"):
    """The message content of type ButtonSet/ List of buttons information.

    :ivar kind: Message content kind is Button. Required. The ButtonSet content type.
    :vartype kind: str or ~azure.communication.messages.models.BUTTON_SET
    :ivar buttons: Unique Id of the button content. Required.
    :vartype buttons: list[~azure.communication.messages.models.ButtonContent]
    """

    kind: Literal[MessageContentKind.BUTTON_SET] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is Button. Required. The ButtonSet content type."""
    buttons: List["_models.ButtonContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique Id of the button content. Required."""

    @overload
    def __init__(
        self,
        *,
        buttons: List["_models.ButtonContent"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.BUTTON_SET, **kwargs)


class CommunicationContact(Contact, discriminator="communication"):
    """Communication Contact.

    :ivar id: External platform identifier. Required.
    :vartype id: str
    :ivar kind: Contact type is communication. Required. Azure Communication platform.
    :vartype kind: str or ~azure.communication.messages.models.COMMUNICATION
    """

    kind: Literal[MessagePlatformKind.COMMUNICATION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Contact type is communication. Required. Azure Communication platform."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessagePlatformKind.COMMUNICATION, **kwargs)


class CommunicationConversation(_model_base.Model):
    """A conversation.

    :ivar id: The conversation ID. Required.
    :vartype id: str
    :ivar topic: The conversation topic.
    :vartype topic: str
    :ivar delivery_channel_ids: List of delivery channel IDs.
    :vartype delivery_channel_ids: list[str]
    :ivar outbound_delivery_strategy: Outbound delivery strategy for the conversation. Known values
     are: "internalOnly" and "allParticipants".
    :vartype outbound_delivery_strategy: str or
     ~azure.communication.messages.models.OutboundDeliveryStrategyKind
    :ivar participants: List of participants involved in the conversation.
    :vartype participants: list[~azure.communication.messages.models.ConversationParticipant]
    """

    id: str = rest_field(visibility=["read"])
    """The conversation ID. Required."""
    topic: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The conversation topic."""
    delivery_channel_ids: Optional[List[str]] = rest_field(
        name="deliveryChannelIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of delivery channel IDs."""
    outbound_delivery_strategy: Optional[Union[str, "_models.OutboundDeliveryStrategyKind"]] = rest_field(
        name="outboundDeliveryStrategy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Outbound delivery strategy for the conversation. Known values are: \"internalOnly\" and
     \"allParticipants\"."""
    participants: Optional[List["_models.ConversationParticipant"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of participants involved in the conversation."""

    @overload
    def __init__(
        self,
        *,
        topic: Optional[str] = None,
        delivery_channel_ids: Optional[List[str]] = None,
        outbound_delivery_strategy: Optional[Union[str, "_models.OutboundDeliveryStrategyKind"]] = None,
        participants: Optional[List["_models.ConversationParticipant"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConversationMessageItem(_model_base.Model):
    """The conversation message as returned from the service.

    :ivar id: Message ID. Required.
    :vartype id: str
    :ivar sequence_id: Message sequence ID.
    :vartype sequence_id: int
    :ivar message: Payload of a threaded conversation message. Required.
    :vartype message: ~azure.communication.messages.models.ConversationMessageContent
    :ivar sender_display_name: The display name of the message sender.
    :vartype sender_display_name: str
    :ivar sender_communication_identifier: The communication identifier of the message sender.
     Required.
    :vartype sender_communication_identifier: str
    :ivar created_on: Timestamp when the message is sent. Required.
    :vartype created_on: ~datetime.datetime
    """

    id: str = rest_field(visibility=["read"])
    """Message ID. Required."""
    sequence_id: Optional[int] = rest_field(
        name="sequenceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Message sequence ID."""
    message: "_models.ConversationMessageContent" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Payload of a threaded conversation message. Required."""
    sender_display_name: Optional[str] = rest_field(
        name="senderDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The display name of the message sender."""
    sender_communication_identifier: str = rest_field(
        name="senderCommunicationIdentifier", visibility=["read", "create", "update", "delete", "query"]
    )
    """The communication identifier of the message sender. Required."""
    created_on: datetime.datetime = rest_field(
        name="createdOn", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Timestamp when the message is sent. Required."""

    @overload
    def __init__(
        self,
        *,
        message: "_models.ConversationMessageContent",
        sender_communication_identifier: str,
        created_on: datetime.datetime,
        sequence_id: Optional[int] = None,
        sender_display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConversationParticipant(_model_base.Model):
    """Advanced Messaging conversation participant.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ExternalConversationParticipant, InternalConversationParticipant

    :ivar id: Participant Identifier. Required.
    :vartype id: str
    :ivar display_name: Participant display name.
    :vartype display_name: str
    :ivar kind: The type discriminator describing a participant type. Required. Known values are:
     "internal" and "external".
    :vartype kind: str or ~azure.communication.messages.models.ParticipantKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: str = rest_field(visibility=["read"])
    """Participant Identifier. Required."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Participant display name."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a participant type. Required. Known values are: \"internal\"
     and \"external\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentConversationMessageContent(ConversationMessageContent, discriminator="document"):
    """A request to send a document conversation message.

    :ivar kind: Message notification type is document. Required. Document message type.
    :vartype kind: str or ~azure.communication.messages.models.DOCUMENT
    :ivar caption: Optional text content.
    :vartype caption: str
    :ivar file_name: Optional name for the file.
    :vartype file_name: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.DOCUMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is document. Required. Document message type."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """Optional name for the file."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.DOCUMENT, **kwargs)


class DocumentMessageContent(MessageContent, discriminator="document"):
    """The message content of type document information.

    :ivar kind: Message content kind is document. Required. The document content type.
    :vartype kind: str or ~azure.communication.messages.models.DOCUMENT
    :ivar media_uri: MediaUri of the media content. Required.
    :vartype media_uri: str
    """

    kind: Literal[MessageContentKind.DOCUMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is document. Required. The document content type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """MediaUri of the media content. Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.DOCUMENT, **kwargs)


class DocumentNotificationContent(NotificationContent, discriminator="document"):
    """A request to send a document notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is document. Required. Document message type.
    :vartype kind: str or ~azure.communication.messages.models.DOCUMENT
    :ivar caption: Optional text content.
    :vartype caption: str
    :ivar file_name: Optional name for the file.
    :vartype file_name: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.DOCUMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is document. Required. Document message type."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """Optional name for the file."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.DOCUMENT, **kwargs)


class ExternalConversationParticipant(ConversationParticipant, discriminator="external"):
    """External conversation participant.

    :ivar id: Participant Identifier. Required.
    :vartype id: str
    :ivar display_name: Participant display name.
    :vartype display_name: str
    :ivar kind: Participant type is external. Required. A participant on other platforms
    :vartype kind: str or ~azure.communication.messages.models.EXTERNAL
    :ivar contacts: List of external platform identifiers for the participant. Required.
    :vartype contacts: list[~azure.communication.messages.models.Contact]
    """

    kind: Literal[ParticipantKind.EXTERNAL] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Participant type is external. Required. A participant on other platforms"""
    contacts: List["_models.Contact"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of external platform identifiers for the participant. Required."""

    @overload
    def __init__(
        self,
        *,
        contacts: List["_models.Contact"],
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=ParticipantKind.EXTERNAL, **kwargs)


class GetConversationThreadAnalysisResult(_model_base.Model):
    """Result of the get conversation messages AI Analysis operation.

    :ivar summary: The AI summary of the conversation messages. Required.
    :vartype summary: str
    """

    summary: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The AI summary of the conversation messages. Required."""

    @overload
    def __init__(
        self,
        *,
        summary: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageConversationMessageContent(ConversationMessageContent, discriminator="image"):
    """A request to send an image conversation message.

    :ivar kind: Message notification type is image. Required. Image message type.
    :vartype kind: str or ~azure.communication.messages.models.IMAGE
    :ivar content: Optional text content.
    :vartype content: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.IMAGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is image. Required. Image message type."""
    content: Optional[str] = rest_field(name="caption", visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
        content: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.IMAGE, **kwargs)


class ImageMessageContent(MessageContent, discriminator="image"):
    """The message content of type image information.

    :ivar kind: Message content kind is image. Required. The image content type.
    :vartype kind: str or ~azure.communication.messages.models.IMAGE
    :ivar media_uri: MediaUri of the media content. Required.
    :vartype media_uri: str
    """

    kind: Literal[MessageContentKind.IMAGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is image. Required. The image content type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """MediaUri of the media content. Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.IMAGE, **kwargs)


class ImageNotificationContent(NotificationContent, discriminator="image"):
    """A request to send an image notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is image. Required. Image message type.
    :vartype kind: str or ~azure.communication.messages.models.IMAGE
    :ivar content: Optional text content.
    :vartype content: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.IMAGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is image. Required. Image message type."""
    content: Optional[str] = rest_field(name="caption", visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
        content: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.IMAGE, **kwargs)


class InteractiveMessage(_model_base.Model):
    """The Interactive message content to which user can read and respond.

    :ivar header: Gets or Sets Header content. Supports the following types:text, images etc.
    :vartype header: ~azure.communication.messages.models.MessageContent
    :ivar body: Gets or Sets Message body content. Emojis, markdown, and links are supported.
     Required.
    :vartype body: ~azure.communication.messages.models.TextMessageContent
    :ivar footer: Gets or Sets Message footer content. Emojis, markdown, and links are supported.
    :vartype footer: ~azure.communication.messages.models.TextMessageContent
    :ivar action: The binding object to get or set Action which describes options user have to
     respond to message. Required.
    :vartype action: ~azure.communication.messages.models.ActionBindings
    """

    header: Optional["_models.MessageContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or Sets Header content. Supports the following types:text, images etc."""
    body: "_models.TextMessageContent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or Sets Message body content. Emojis, markdown, and links are supported. Required."""
    footer: Optional["_models.TextMessageContent"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or Sets Message footer content. Emojis, markdown, and links are supported."""
    action: "_models.ActionBindings" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The binding object to get or set Action which describes options user have to respond to
     message. Required."""

    @overload
    def __init__(
        self,
        *,
        body: "_models.TextMessageContent",
        action: "_models.ActionBindings",
        header: Optional["_models.MessageContent"] = None,
        footer: Optional["_models.TextMessageContent"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InteractiveNotificationContent(NotificationContent, discriminator="interactive"):
    """A request to send an Interactive message notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is Interactive. Required. Interactive Actionable message
     type.
    :vartype kind: str or ~azure.communication.messages.models.INTERACTIVE
    :ivar interactive_message: The interactive message content. Required.
    :vartype interactive_message: ~azure.communication.messages.models.InteractiveMessage
    """

    kind: Literal[CommunicationMessageKind.INTERACTIVE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is Interactive. Required. Interactive Actionable message type."""
    interactive_message: "_models.InteractiveMessage" = rest_field(
        name="interactiveMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """The interactive message content. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        interactive_message: "_models.InteractiveMessage",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.INTERACTIVE, **kwargs)


class InternalConversationParticipant(ConversationParticipant, discriminator="internal"):
    """Internal conversation participant.

    :ivar id: Participant Identifier. Required.
    :vartype id: str
    :ivar display_name: Participant display name.
    :vartype display_name: str
    :ivar kind: Participant type is internal. Required. A participant internal to Azure
     Communication Services.
    :vartype kind: str or ~azure.communication.messages.models.INTERNAL
    :ivar contact: The internal platform identifiers for the participant. Required.
    :vartype contact: ~azure.communication.messages.models.Contact
    """

    kind: Literal[ParticipantKind.INTERNAL] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Participant type is internal. Required. A participant internal to Azure Communication Services."""
    contact: "_models.Contact" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The internal platform identifiers for the participant. Required."""

    @overload
    def __init__(
        self,
        *,
        contact: "_models.Contact",
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=ParticipantKind.INTERNAL, **kwargs)


class LinkContent(MessageContent, discriminator="url"):
    """The message content of type Url information.

    :ivar kind: Message content kind is url. Required. The Url content type.
    :vartype kind: str or ~azure.communication.messages.models.URL
    :ivar title: Title of the url content. Required.
    :vartype title: str
    :ivar url: The url in the content. Required.
    :vartype url: str
    """

    kind: Literal[MessageContentKind.URL] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is url. Required. The Url content type."""
    title: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the url content. Required."""
    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The url in the content. Required."""

    @overload
    def __init__(
        self,
        *,
        title: str,
        url: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.URL, **kwargs)


class MediaNotificationContent(NotificationContent, discriminator="image_v0"):
    """@deprecated A request to send an image notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is image. Required. Image message type. Legacy image type
     for ``MediaNotificationContent`` which is being deprecated
    :vartype kind: str or ~azure.communication.messages.models.IMAGE_V0
    :ivar content: Optional text content.
    :vartype content: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.IMAGE_V0] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is image. Required. Image message type. Legacy image type for
     ``MediaNotificationContent`` which is being deprecated"""
    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
        content: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.IMAGE_V0, **kwargs)


class Message(_model_base.Model):
    """Details of a message.

    :ivar content: Content of the message. Required.
    :vartype content: str
    """

    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Content of the message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageReceipt(_model_base.Model):
    """Receipt of the sending one message.

    :ivar message_id: The message id. Required.
    :vartype message_id: str
    :ivar to: The native external platform user identifier of the recipient. Required.
    :vartype to: str
    """

    message_id: str = rest_field(name="messageId", visibility=["read", "create", "update", "delete", "query"])
    """The message id. Required."""
    to: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The native external platform user identifier of the recipient. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
        to: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageTemplate(_model_base.Model):
    """The template object used to create templates.

    :ivar name: Name of the template. Required.
    :vartype name: str
    :ivar language: The template's language, in the ISO 639 format, consist of a two-letter
     language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'. Required.
    :vartype language: str
    :ivar template_values: The template values.
    :vartype template_values: list[~azure.communication.messages.models.MessageTemplateValue]
    :ivar bindings: The binding object to link values to the template specific locations.
    :vartype bindings: ~azure.communication.messages.models.MessageTemplateBindings
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the template. Required."""
    language: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The template's language, in the ISO 639 format, consist of a two-letter language code followed
     by an optional two-letter country code, e.g., 'en' or 'en_US'. Required."""
    template_values: Optional[List["_models.MessageTemplateValue"]] = rest_field(
        name="values", visibility=["read", "create", "update", "delete", "query"]
    )
    """The template values."""
    bindings: Optional["_models.MessageTemplateBindings"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The binding object to link values to the template specific locations."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        language: str,
        template_values: Optional[List["_models.MessageTemplateValue"]] = None,
        bindings: Optional["_models.MessageTemplateBindings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageTemplateBindings(_model_base.Model):
    """The binding object to link values to the template specific locations.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    WhatsAppMessageTemplateBindings

    :ivar kind: The type discriminator describing a template bindings type. Required. "whatsApp"
    :vartype kind: str or ~azure.communication.messages.models.MessageTemplateBindingsKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a template bindings type. Required. \"whatsApp\""""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageTemplateValue(_model_base.Model):
    """The class describes a parameter of a template.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    MessageTemplateDocument, MessageTemplateImage, MessageTemplateLocation,
    MessageTemplateQuickAction, MessageTemplateText, MessageTemplateVideo

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: The type discriminator describing a template parameter type. Required. Known values
     are: "text", "image", "document", "video", "location", and "quickAction".
    :vartype kind: str or ~azure.communication.messages.models.MessageTemplateValueKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Template binding reference name. Required."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a template parameter type. Required. Known values are:
     \"text\", \"image\", \"document\", \"video\", \"location\", and \"quickAction\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageTemplateDocument(MessageTemplateValue, discriminator="document"):
    """The message template's document value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is document. Required. The document template parameter type.
    :vartype kind: str or ~azure.communication.messages.models.DOCUMENT
    :ivar url: The (public) URL of the media. Required.
    :vartype url: str
    :ivar caption: The [optional] caption of the media object.
    :vartype caption: str
    :ivar file_name: The [optional] filename of the media file.
    :vartype file_name: str
    """

    kind: Literal[MessageTemplateValueKind.DOCUMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is document. Required. The document template parameter type."""
    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The (public) URL of the media. Required."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [optional] caption of the media object."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The [optional] filename of the media file."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        url: str,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.DOCUMENT, **kwargs)


class MessageTemplateImage(MessageTemplateValue, discriminator="image"):
    """The message template's image value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is image. Required. The image template parameter type.
    :vartype kind: str or ~azure.communication.messages.models.IMAGE
    :ivar url: The (public) URL of the media. Required.
    :vartype url: str
    :ivar caption: The [optional] caption of the media object.
    :vartype caption: str
    :ivar file_name: The [optional] filename of the media file.
    :vartype file_name: str
    """

    kind: Literal[MessageTemplateValueKind.IMAGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is image. Required. The image template parameter type."""
    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The (public) URL of the media. Required."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [optional] caption of the media object."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The [optional] filename of the media file."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        url: str,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.IMAGE, **kwargs)


class MessageTemplateItem(_model_base.Model):
    """The message template as returned from the service.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    WhatsAppMessageTemplateItem

    :ivar name: The template's name. Required.
    :vartype name: str
    :ivar language: The template's language, in the ISO 639 format, consist of a two-letter
     language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'. Required.
    :vartype language: str
    :ivar status: The aggregated template status. Required. Known values are: "approved",
     "rejected", "pending", and "paused".
    :vartype status: str or ~azure.communication.messages.models.MessageTemplateStatus
    :ivar kind: The type discriminator describing a template type. Required. "whatsApp"
    :vartype kind: str or ~azure.communication.messages.models.CommunicationMessagesChannel
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    name: str = rest_field(visibility=["read"])
    """The template's name. Required."""
    language: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The template's language, in the ISO 639 format, consist of a two-letter language code followed
     by an optional two-letter country code, e.g., 'en' or 'en_US'. Required."""
    status: Union[str, "_models.MessageTemplateStatus"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The aggregated template status. Required. Known values are: \"approved\", \"rejected\",
     \"pending\", and \"paused\"."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The type discriminator describing a template type. Required. \"whatsApp\""""

    @overload
    def __init__(
        self,
        *,
        language: str,
        status: Union[str, "_models.MessageTemplateStatus"],
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MessageTemplateLocation(MessageTemplateValue, discriminator="location"):
    """The message template's location value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is location. Required. The location template parameter type.
    :vartype kind: str or ~azure.communication.messages.models.LOCATION
    :ivar location_name: The [Optional] name of the location.
    :vartype location_name: str
    :ivar address: The [Optional] address of the location.
    :vartype address: str
    :ivar latitude: The latitude of the location. Required.
    :vartype latitude: float
    :ivar longitude: The longitude of the location. Required.
    :vartype longitude: float
    """

    kind: Literal[MessageTemplateValueKind.LOCATION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is location. Required. The location template parameter type."""
    location_name: Optional[str] = rest_field(
        name="locationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The [Optional] name of the location."""
    address: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [Optional] address of the location."""
    latitude: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The latitude of the location. Required."""
    longitude: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The longitude of the location. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        latitude: float,
        longitude: float,
        location_name: Optional[str] = None,
        address: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.LOCATION, **kwargs)


class MessageTemplateQuickAction(MessageTemplateValue, discriminator="quickAction"):
    """The message template's quick action value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is quick action. Required. The quick action template
     parameter type.
    :vartype kind: str or ~azure.communication.messages.models.QUICK_ACTION
    :ivar text: The [Optional] quick action text.
    :vartype text: str
    :ivar payload: The [Optional] quick action payload.
    :vartype payload: str
    """

    kind: Literal[MessageTemplateValueKind.QUICK_ACTION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is quick action. Required. The quick action template parameter type."""
    text: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [Optional] quick action text."""
    payload: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [Optional] quick action payload."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        text: Optional[str] = None,
        payload: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.QUICK_ACTION, **kwargs)


class MessageTemplateText(MessageTemplateValue, discriminator="text"):
    """The message template's text value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is text. Required. The text template parameter type.
    :vartype kind: str or ~azure.communication.messages.models.TEXT
    :ivar text: The text value. Required.
    :vartype text: str
    """

    kind: Literal[MessageTemplateValueKind.TEXT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is text. Required. The text template parameter type."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The text value. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        text: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.TEXT, **kwargs)


class MessageTemplateVideo(MessageTemplateValue, discriminator="video"):
    """The message template's video value information.

    :ivar name: Template binding reference name. Required.
    :vartype name: str
    :ivar kind: Message parameter type is video. Required. The video template parameter type.
    :vartype kind: str or ~azure.communication.messages.models.VIDEO
    :ivar url: The (public) URL of the media. Required.
    :vartype url: str
    :ivar caption: The [optional] caption of the media object.
    :vartype caption: str
    :ivar file_name: The [optional] filename of the media file.
    :vartype file_name: str
    """

    kind: Literal[MessageTemplateValueKind.VIDEO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message parameter type is video. Required. The video template parameter type."""
    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The (public) URL of the media. Required."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The [optional] caption of the media object."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The [optional] filename of the media file."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        url: str,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateValueKind.VIDEO, **kwargs)


class ReactionNotificationContent(NotificationContent, discriminator="reaction"):
    """A request to send a Reaction notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is reaction. Required. Reaction message type.
    :vartype kind: str or ~azure.communication.messages.models.REACTION
    :ivar emoji: emoji content like \\uD83D\\uDE00. Required.
    :vartype emoji: str
    :ivar message_id: ID of the previous message you want to reply to. Required.
    :vartype message_id: str
    """

    kind: Literal[CommunicationMessageKind.REACTION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is reaction. Required. Reaction message type."""
    emoji: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """emoji content like \uD83D\uDE00. Required."""
    message_id: str = rest_field(name="messageId", visibility=["read", "create", "update", "delete", "query"])
    """ID of the previous message you want to reply to. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        emoji: str,
        message_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.REACTION, **kwargs)


class RemoveParticipantsOptions(_model_base.Model):
    """Request payload for removing participants from a conversation.

    :ivar participant_ids: The participant IDs to remove. Required.
    :vartype participant_ids: list[str]
    """

    participant_ids: List[str] = rest_field(
        name="participantIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The participant IDs to remove. Required."""

    @overload
    def __init__(
        self,
        *,
        participant_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RemoveParticipantsResult(_model_base.Model):
    """Response for the remove participants operation.

    :ivar invalid_participants: List of Ids with Errors if failed to be added. Required.
    :vartype invalid_participants:
     list[~azure.communication.messages.models.UpdateParticipantsResult]
    """

    invalid_participants: List["_models.UpdateParticipantsResult"] = rest_field(
        name="invalidParticipants", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of Ids with Errors if failed to be added. Required."""

    @overload
    def __init__(
        self,
        *,
        invalid_participants: List["_models.UpdateParticipantsResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SendConversationMessageOptions(_model_base.Model):
    """Request payload for sending a conversation message.

    :ivar request: Details of a send conversation message request. Required.
    :vartype request: ~azure.communication.messages.models.ConversationMessageContent
    :ivar outbound_delivery_strategy: The options of the outbound delivery strategy for messages
     sent by participants in a conversation.
     Supports internalOnly, allChannels. Known values are: "internalOnly" and "allParticipants".
    :vartype outbound_delivery_strategy: str or
     ~azure.communication.messages.models.OutboundDeliveryStrategyKind
    """

    request: "_models.ConversationMessageContent" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of a send conversation message request. Required."""
    outbound_delivery_strategy: Optional[Union[str, "_models.OutboundDeliveryStrategyKind"]] = rest_field(
        name="outboundDeliveryStrategy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The options of the outbound delivery strategy for messages sent by participants in a
     conversation.
     Supports internalOnly, allChannels. Known values are: \"internalOnly\" and \"allParticipants\"."""

    @overload
    def __init__(
        self,
        *,
        request: "_models.ConversationMessageContent",
        outbound_delivery_strategy: Optional[Union[str, "_models.OutboundDeliveryStrategyKind"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SendConversationMessageResult(_model_base.Model):
    """Result of the send conversation message operation.

    :ivar message_id: A server-generated Advanced Messaging conversation message id. Required.
    :vartype message_id: str
    """

    message_id: str = rest_field(name="messageId", visibility=["read", "create", "update", "delete", "query"])
    """A server-generated Advanced Messaging conversation message id. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SendMessageResult(_model_base.Model):
    """Result of the send message operation.

    :ivar receipts: Receipts of the send message operation. Required.
    :vartype receipts: list[~azure.communication.messages.models.MessageReceipt]
    """

    receipts: List["_models.MessageReceipt"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Receipts of the send message operation. Required."""

    @overload
    def __init__(
        self,
        *,
        receipts: List["_models.MessageReceipt"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StickerNotificationContent(NotificationContent, discriminator="sticker"):
    """A request to send a Sticker notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is sticker. Required. Sticker message type.
    :vartype kind: str or ~azure.communication.messages.models.STICKER
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.STICKER] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is sticker. Required. Sticker message type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.STICKER, **kwargs)


class TemplateConversationMessageContent(ConversationMessageContent, discriminator="template"):
    """A request to send a template conversation message.

    :ivar kind: Message notification type is template. Required. Template message type.
    :vartype kind: str or ~azure.communication.messages.models.TEMPLATE
    :ivar template: The template object used to create templates. Required.
    :vartype template: ~azure.communication.messages.models.MessageTemplate
    """

    kind: Literal[CommunicationMessageKind.TEMPLATE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is template. Required. Template message type."""
    template: "_models.MessageTemplate" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The template object used to create templates. Required."""

    @overload
    def __init__(
        self,
        *,
        template: "_models.MessageTemplate",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.TEMPLATE, **kwargs)


class TemplateNotificationContent(NotificationContent, discriminator="template"):
    """A request to send a template notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is template. Required. Template message type.
    :vartype kind: str or ~azure.communication.messages.models.TEMPLATE
    :ivar template: The template object used to create templates. Required.
    :vartype template: ~azure.communication.messages.models.MessageTemplate
    """

    kind: Literal[CommunicationMessageKind.TEMPLATE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is template. Required. Template message type."""
    template: "_models.MessageTemplate" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The template object used to create templates. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        template: "_models.MessageTemplate",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.TEMPLATE, **kwargs)


class TextConversationMessageContent(ConversationMessageContent, discriminator="text"):
    """A request to send a text conversation message.

    :ivar kind: Message notification type is text. Required. Text message type.
    :vartype kind: str or ~azure.communication.messages.models.TEXT
    :ivar content: Message content. Required.
    :vartype content: str
    """

    kind: Literal[CommunicationMessageKind.TEXT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is text. Required. Text message type."""
    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Message content. Required."""

    @overload
    def __init__(
        self,
        *,
        content: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.TEXT, **kwargs)


class TextMessageContent(MessageContent, discriminator="text"):
    """The message content of type text information.

    :ivar kind: Message content kind is text. Required. The text content type.
    :vartype kind: str or ~azure.communication.messages.models.TEXT
    :ivar text: The text value. Required.
    :vartype text: str
    """

    kind: Literal[MessageContentKind.TEXT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is text. Required. The text content type."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The text value. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.TEXT, **kwargs)


class TextNotificationContent(NotificationContent, discriminator="text"):
    """A request to send a text notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is text. Required. Text message type.
    :vartype kind: str or ~azure.communication.messages.models.TEXT
    :ivar content: Message content. Required.
    :vartype content: str
    """

    kind: Literal[CommunicationMessageKind.TEXT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is text. Required. Text message type."""
    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Message content. Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        content: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.TEXT, **kwargs)


class UpdateParticipantsResult(_model_base.Model):
    """Response for the remove participants operation.

    :ivar id: Participant User Id. Required.
    :vartype id: str
    :ivar error: Error of the participant operation.
    :vartype error: ~azure.core.ODataV4Format
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Participant User Id. Required."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error of the participant operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        error: Optional[ODataV4Format] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VideoConversationMessageContent(ConversationMessageContent, discriminator="video"):
    """A request to send a video conversation message.

    :ivar kind: Message notification type is video. Required. Video message type.
    :vartype kind: str or ~azure.communication.messages.models.VIDEO
    :ivar caption: Optional text content.
    :vartype caption: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.VIDEO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is video. Required. Video message type."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
        caption: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.VIDEO, **kwargs)


class VideoMessageContent(MessageContent, discriminator="video"):
    """The message content of type video information.

    :ivar kind: Message content kind is video. Required. The video content type.
    :vartype kind: str or ~azure.communication.messages.models.VIDEO
    :ivar media_uri: MediaUri of the media content. Required.
    :vartype media_uri: str
    """

    kind: Literal[MessageContentKind.VIDEO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message content kind is video. Required. The video content type."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """MediaUri of the media content. Required."""

    @overload
    def __init__(
        self,
        *,
        media_uri: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageContentKind.VIDEO, **kwargs)


class VideoNotificationContent(NotificationContent, discriminator="video"):
    """A request to send a video notification.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar kind: Message notification type is video. Required. Video message type.
    :vartype kind: str or ~azure.communication.messages.models.VIDEO
    :ivar caption: Optional text content.
    :vartype caption: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image. Required.
    :vartype media_uri: str
    """

    kind: Literal[CommunicationMessageKind.VIDEO] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message notification type is video. Required. Video message type."""
    caption: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional text content."""
    media_uri: str = rest_field(name="mediaUri", visibility=["read", "create", "update", "delete", "query"])
    """A media url for the file. Required if the type is one of the supported media types, e.g. image.
     Required."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        media_uri: str,
        caption: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessageKind.VIDEO, **kwargs)


class WhatsAppButtonActionBindings(ActionBindings, discriminator="whatsAppButtonAction"):
    """WhatsApp Binding actions to the interactive message.

    :ivar kind: Message action binding type is WhatsAppButtonAction. Required. The WhatsApp Button
     action binding kind.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP_BUTTON_ACTION
    :ivar content: Action content of Interactive message. Required.
    :vartype content: ~azure.communication.messages.models.ButtonSetContent
    """

    kind: Literal[MessageActionBindingKind.WHATS_APP_BUTTON_ACTION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message action binding type is WhatsAppButtonAction. Required. The WhatsApp Button action
     binding kind."""
    content: "_models.ButtonSetContent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Action content of Interactive message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: "_models.ButtonSetContent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageActionBindingKind.WHATS_APP_BUTTON_ACTION, **kwargs)


class WhatsAppContact(Contact, discriminator="whatsApp"):
    """WhatsApp Contact.

    :ivar id: External platform identifier. Required.
    :vartype id: str
    :ivar kind: Contact type is whatsApp. Required. WhatsApp platform.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP
    """

    kind: Literal[MessagePlatformKind.WHATS_APP] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Contact type is whatsApp. Required. WhatsApp platform."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessagePlatformKind.WHATS_APP, **kwargs)


class WhatsAppListActionBindings(ActionBindings, discriminator="whatsAppListAction"):
    """WhatsApp List Binding actions to the interactive message.

    :ivar kind: Message action binding type is WhatsAppListAction. Required. The WhatsApp List
     action binding kind.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP_LIST_ACTION
    :ivar content: Action content of Interactive message. Required.
    :vartype content: ~azure.communication.messages.models.ActionGroupContent
    """

    kind: Literal[MessageActionBindingKind.WHATS_APP_LIST_ACTION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message action binding type is WhatsAppListAction. Required. The WhatsApp List action binding
     kind."""
    content: "_models.ActionGroupContent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Action content of Interactive message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: "_models.ActionGroupContent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageActionBindingKind.WHATS_APP_LIST_ACTION, **kwargs)


class WhatsAppMessageTemplateBindings(MessageTemplateBindings, discriminator="whatsApp"):
    """The template bindings for WhatsApp.

    :ivar kind: MessageTemplateBindings is whatsApp. Required. The WhatsApp template type.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP
    :ivar header: The header template bindings.
    :vartype header:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar body: The body template bindings.
    :vartype body:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar footer: The footer template bindings.
    :vartype footer:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar buttons: The button template bindings.
    :vartype buttons:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsButton]
    """

    kind: Literal[MessageTemplateBindingsKind.WHATS_APP] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """MessageTemplateBindings is whatsApp. Required. The WhatsApp template type."""
    header: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The header template bindings."""
    body: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The body template bindings."""
    footer: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The footer template bindings."""
    buttons: Optional[List["_models.WhatsAppMessageTemplateBindingsButton"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The button template bindings."""

    @overload
    def __init__(
        self,
        *,
        header: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        body: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        footer: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        buttons: Optional[List["_models.WhatsAppMessageTemplateBindingsButton"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageTemplateBindingsKind.WHATS_APP, **kwargs)


class WhatsAppMessageTemplateBindingsButton(_model_base.Model):
    """The template bindings component button for WhatsApp.

    :ivar sub_type: The WhatsApp button sub type. Required. Known values are: "quickReply" and
     "url".
    :vartype sub_type: str or ~azure.communication.messages.models.WhatsAppMessageButtonSubType
    :ivar ref_value: The name of the referenced item in the template values. Required.
    :vartype ref_value: str
    """

    sub_type: Union[str, "_models.WhatsAppMessageButtonSubType"] = rest_field(
        name="subType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The WhatsApp button sub type. Required. Known values are: \"quickReply\" and \"url\"."""
    ref_value: str = rest_field(name="refValue", visibility=["read", "create", "update", "delete", "query"])
    """The name of the referenced item in the template values. Required."""

    @overload
    def __init__(
        self,
        *,
        sub_type: Union[str, "_models.WhatsAppMessageButtonSubType"],
        ref_value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateBindingsComponent(_model_base.Model):
    """The template bindings component for WhatsApp.

    :ivar ref_value: The name of the referenced item in the template values. Required.
    :vartype ref_value: str
    """

    ref_value: str = rest_field(name="refValue", visibility=["read", "create", "update", "delete", "query"])
    """The name of the referenced item in the template values. Required."""

    @overload
    def __init__(
        self,
        *,
        ref_value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateItem(MessageTemplateItem, discriminator="whatsApp"):
    """The WhatsApp-specific template response contract.

    :ivar name: The template's name. Required.
    :vartype name: str
    :ivar language: The template's language, in the ISO 639 format, consist of a two-letter
     language code followed by an optional two-letter country code, e.g., 'en' or 'en_US'. Required.
    :vartype language: str
    :ivar status: The aggregated template status. Required. Known values are: "approved",
     "rejected", "pending", and "paused".
    :vartype status: str or ~azure.communication.messages.models.MessageTemplateStatus
    :ivar content: WhatsApp platform's template content. This is the payload returned from WhatsApp
     API.
    :vartype content: any
    :ivar kind: Message template response type is whatsApp. Required. The WhatsApp communication
     messages channel type.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP
    """

    content: Optional[Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """WhatsApp platform's template content. This is the payload returned from WhatsApp API."""
    kind: Literal[CommunicationMessagesChannel.WHATS_APP] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message template response type is whatsApp. Required. The WhatsApp communication messages
     channel type."""

    @overload
    def __init__(
        self,
        *,
        language: str,
        status: Union[str, "_models.MessageTemplateStatus"],
        content: Optional[Any] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=CommunicationMessagesChannel.WHATS_APP, **kwargs)


class WhatsAppUrlActionBindings(ActionBindings, discriminator="whatsAppUrlAction"):
    """WhatsApp Binding actions to the interactive message.

    :ivar kind: Message action binding type is WhatsAppUrlAction. Required. The WhatsApp Url action
     binding kind.
    :vartype kind: str or ~azure.communication.messages.models.WHATS_APP_URL_ACTION
    :ivar content: Action content of Interactive message. Required.
    :vartype content: ~azure.communication.messages.models.LinkContent
    """

    kind: Literal[MessageActionBindingKind.WHATS_APP_URL_ACTION] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Message action binding type is WhatsAppUrlAction. Required. The WhatsApp Url action binding
     kind."""
    content: "_models.LinkContent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Action content of Interactive message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: "_models.LinkContent",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=MessageActionBindingKind.WHATS_APP_URL_ACTION, **kwargs)
