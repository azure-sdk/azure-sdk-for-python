# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class MessageReceipt(_model_base.Model):
    """Receipt of the sending one message.

    All required parameters must be populated in order to send to server.

    :ivar message_id: The message id. Required.
    :vartype message_id: str
    :ivar to: The native external platform user identifier of the recipient. Required.
    :vartype to: str
    """

    message_id: str = rest_field(name="messageId")
    """The message id. Required."""
    to: str = rest_field()
    """The native external platform user identifier of the recipient. Required."""

    @overload
    def __init__(
        self,
        *,
        message_id: str,
        to: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplate(_model_base.Model):
    """The template object used to create templates.

    All required parameters must be populated in order to send to server.

    :ivar name: Name of the template. Required.
    :vartype name: str
    :ivar language: The codes for the supported languages for templates. Required.
    :vartype language: str
    :ivar values: The template values.
    :vartype values: dict[str, ~azure.communication.messages.models.MessageTemplateValue]
    :ivar bindings: The binding object to link values to the template specific locations.
    :vartype bindings: ~azure.communication.messages.models.MessageTemplateBindings
    """

    name: str = rest_field()
    """Name of the template. Required."""
    language: str = rest_field()
    """The codes for the supported languages for templates. Required."""
    values: Optional[Dict[str, "_models.MessageTemplateValue"]] = rest_field()
    """The template values."""
    bindings: Optional["_models.MessageTemplateBindings"] = rest_field()
    """The binding object to link values to the template specific locations."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        language: str,
        values: Optional[Dict[str, "_models.MessageTemplateValue"]] = None,
        bindings: Optional["_models.MessageTemplateBindings"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateBindings(_model_base.Model):
    """The binding object to link values to the template specific locations.

    :ivar whats_app: The template bindings for WhatsApp.
    :vartype whats_app: ~azure.communication.messages.models.WhatsAppMessageTemplateBindings
    """

    whats_app: Optional["_models.WhatsAppMessageTemplateBindings"] = rest_field(name="whatsApp")
    """The template bindings for WhatsApp."""

    @overload
    def __init__(
        self,
        *,
        whats_app: Optional["_models.WhatsAppMessageTemplateBindings"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateParameterLocation(_model_base.Model):
    """The message template's location value information.

    :ivar name: The [Optional] name of the location.
    :vartype name: str
    :ivar address: The [Optional] address of the location.
    :vartype address: str
    :ivar latitude: The latitude of the location.
    :vartype latitude: float
    :ivar longitude: The longitude of the location.
    :vartype longitude: float
    """

    name: Optional[str] = rest_field()
    """The [Optional] name of the location."""
    address: Optional[str] = rest_field()
    """The [Optional] address of the location."""
    latitude: Optional[float] = rest_field()
    """The latitude of the location."""
    longitude: Optional[float] = rest_field()
    """The longitude of the location."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        address: Optional[str] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateResponse(_model_base.Model):
    """The Message Template Response.

    :ivar name: Get the template's Name.
    :vartype name: str
    :ivar language: Get the template's language.
    :vartype language: str
    :ivar channel_type: The Communication Messages Channel. "whatsApp"
    :vartype channel_type: str or ~azure.communication.messages.models.CommunicationMessagesChannel
    :ivar status: The aggregated template status. Known values are: "approved", "rejected",
     "pending", and "paused".
    :vartype status: str or ~azure.communication.messages.models.MessageTemplateStatus
    :ivar whats_app: The WhatsApp-specific template response contract.
    :vartype whats_app: ~azure.communication.messages.models.WhatsAppMessageTemplateResponse
    """

    name: Optional[str] = rest_field()
    """Get the template's Name."""
    language: Optional[str] = rest_field()
    """Get the template's language."""
    channel_type: Optional[Union[str, "_models.CommunicationMessagesChannel"]] = rest_field(name="channelType")
    """The Communication Messages Channel. \"whatsApp\""""
    status: Optional[Union[str, "_models.MessageTemplateStatus"]] = rest_field()
    """The aggregated template status. Known values are: \"approved\", \"rejected\", \"pending\", and
     \"paused\"."""
    whats_app: Optional["_models.WhatsAppMessageTemplateResponse"] = rest_field(name="whatsApp")
    """The WhatsApp-specific template response contract."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        language: Optional[str] = None,
        channel_type: Optional[Union[str, "_models.CommunicationMessagesChannel"]] = None,
        status: Optional[Union[str, "_models.MessageTemplateStatus"]] = None,
        whats_app: Optional["_models.WhatsAppMessageTemplateResponse"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateValue(_model_base.Model):
    """The class describes a parameter of a template.

    All required parameters must be populated in order to send to server.

    :ivar kind: The template value kind. Required. Known values are: "text", "image", "document",
     "video", "location", and "quick_action".
    :vartype kind: str or ~azure.communication.messages.models.MessageTemplateValueKind
    :ivar text: The message template's text value information.
    :vartype text: ~azure.communication.messages.models.MessageTemplateValueText
    :ivar image: The message template's media value information.
     Could be an image, document or
     video.
    :vartype image: ~azure.communication.messages.models.MessageTemplateValueMedia
    :ivar document: The message template's media value information.
     Could be an image, document or
     video.
    :vartype document: ~azure.communication.messages.models.MessageTemplateValueMedia
    :ivar video: The message template's media value information.
     Could be an image, document or
     video.
    :vartype video: ~azure.communication.messages.models.MessageTemplateValueMedia
    :ivar location: The message template's location value information.
    :vartype location: ~azure.communication.messages.models.MessageTemplateParameterLocation
    :ivar quick_action: The message template's quick action value information.
    :vartype quick_action: ~azure.communication.messages.models.MessageTemplateValueQuickAction
    """

    kind: Union[str, "_models.MessageTemplateValueKind"] = rest_field()
    """The template value kind. Required. Known values are: \"text\", \"image\", \"document\",
     \"video\", \"location\", and \"quick_action\"."""
    text: Optional["_models.MessageTemplateValueText"] = rest_field()
    """The message template's text value information."""
    image: Optional["_models.MessageTemplateValueMedia"] = rest_field()
    """The message template's media value information.
     Could be an image, document or
     video."""
    document: Optional["_models.MessageTemplateValueMedia"] = rest_field()
    """The message template's media value information.
     Could be an image, document or
     video."""
    video: Optional["_models.MessageTemplateValueMedia"] = rest_field()
    """The message template's media value information.
     Could be an image, document or
     video."""
    location: Optional["_models.MessageTemplateParameterLocation"] = rest_field()
    """The message template's location value information."""
    quick_action: Optional["_models.MessageTemplateValueQuickAction"] = rest_field(name="quickAction")
    """The message template's quick action value information."""

    @overload
    def __init__(
        self,
        *,
        kind: Union[str, "_models.MessageTemplateValueKind"],
        text: Optional["_models.MessageTemplateValueText"] = None,
        image: Optional["_models.MessageTemplateValueMedia"] = None,
        document: Optional["_models.MessageTemplateValueMedia"] = None,
        video: Optional["_models.MessageTemplateValueMedia"] = None,
        location: Optional["_models.MessageTemplateParameterLocation"] = None,
        quick_action: Optional["_models.MessageTemplateValueQuickAction"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateValueMedia(_model_base.Model):
    """The message template's media value information.
    Could be an image, document or
    video.

    :ivar url: The (public) URL of the media.
    :vartype url: str
    :ivar caption: The [optional] caption of the media object.
    :vartype caption: str
    :ivar file_name: The [optional] filename of the media file.
    :vartype file_name: str
    """

    url: Optional[str] = rest_field()
    """The (public) URL of the media."""
    caption: Optional[str] = rest_field()
    """The [optional] caption of the media object."""
    file_name: Optional[str] = rest_field(name="fileName")
    """The [optional] filename of the media file."""

    @overload
    def __init__(
        self,
        *,
        url: Optional[str] = None,
        caption: Optional[str] = None,
        file_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateValueQuickAction(_model_base.Model):
    """The message template's quick action value information.

    :ivar text: The [Optional] quick action text.
    :vartype text: str
    :ivar payload: The [Optional] quick action payload.
    :vartype payload: str
    """

    text: Optional[str] = rest_field()
    """The [Optional] quick action text."""
    payload: Optional[str] = rest_field()
    """The [Optional] quick action payload."""

    @overload
    def __init__(
        self,
        *,
        text: Optional[str] = None,
        payload: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MessageTemplateValueText(_model_base.Model):
    """The message template's text value information.

    All required parameters must be populated in order to send to server.

    :ivar text: The text value. Required.
    :vartype text: str
    """

    text: str = rest_field()
    """The text value. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SendMessageResult(_model_base.Model):
    """Result of the send message operation.

    All required parameters must be populated in order to send to server.

    :ivar receipts: Receipts of the send message operation. Required.
    :vartype receipts: list[~azure.communication.messages.models.MessageReceipt]
    """

    receipts: List["_models.MessageReceipt"] = rest_field()
    """Receipts of the send message operation. Required."""

    @overload
    def __init__(
        self,
        *,
        receipts: List["_models.MessageReceipt"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SendNotificationRequest(_model_base.Model):
    """Details of the message to send.

    All required parameters must be populated in order to send to server.

    :ivar channel_registration_id: The Channel Registration ID for the Business Identifier.
     Required.
    :vartype channel_registration_id: str
    :ivar to: The native external platform user identifiers of the recipient. Required.
    :vartype to: list[str]
    :ivar type: The type of message. Supports text, image, template. Required. Known values are:
     "text", "image", and "template".
    :vartype type: str or ~azure.communication.messages.models.CommunicationMessageType
    :ivar content: Message content.
    :vartype content: str
    :ivar media_uri: A media url for the file. Required if the type is one of the supported media
     types, e.g. image.
    :vartype media_uri: str
    :ivar template: The template object used to create templates.
    :vartype template: ~azure.communication.messages.models.MessageTemplate
    """

    channel_registration_id: str = rest_field(name="channelRegistrationId")
    """The Channel Registration ID for the Business Identifier. Required."""
    to: List[str] = rest_field()
    """The native external platform user identifiers of the recipient. Required."""
    type: Union[str, "_models.CommunicationMessageType"] = rest_field()
    """The type of message. Supports text, image, template. Required. Known values are: \"text\",
     \"image\", and \"template\"."""
    content: Optional[str] = rest_field()
    """Message content."""
    media_uri: Optional[str] = rest_field(name="mediaUri")
    """A media url for the file. Required if the type is one of the supported media
     types, e.g. image."""
    template: Optional["_models.MessageTemplate"] = rest_field()
    """The template object used to create templates."""

    @overload
    def __init__(
        self,
        *,
        channel_registration_id: str,
        to: List[str],
        type: Union[str, "_models.CommunicationMessageType"],
        content: Optional[str] = None,
        media_uri: Optional[str] = None,
        template: Optional["_models.MessageTemplate"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateBindings(_model_base.Model):
    """The template bindings for WhatsApp.

    :ivar header: The header template bindings.
    :vartype header:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar body: The body template bindings.
    :vartype body:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar footer: The footer template bindings.
    :vartype footer:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsComponent]
    :ivar button: The button template bindings.
    :vartype button:
     list[~azure.communication.messages.models.WhatsAppMessageTemplateBindingsButton]
    """

    header: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field()
    """The header template bindings."""
    body: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field()
    """The body template bindings."""
    footer: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = rest_field()
    """The footer template bindings."""
    button: Optional[List["_models.WhatsAppMessageTemplateBindingsButton"]] = rest_field()
    """The button template bindings."""

    @overload
    def __init__(
        self,
        *,
        header: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        body: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        footer: Optional[List["_models.WhatsAppMessageTemplateBindingsComponent"]] = None,
        button: Optional[List["_models.WhatsAppMessageTemplateBindingsButton"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateBindingsButton(_model_base.Model):
    """The template bindings component button for WhatsApp.

    All required parameters must be populated in order to send to server.

    :ivar sub_type: The WhatsApp button sub type. Known values are: "quickReply" and "url".
    :vartype sub_type: str or
     ~azure.communication.messages.models.WhatsAppMessageTemplateValueSubType
    :ivar ref_value: The reference to the value in the
    Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
     dictionary. Required.
    :vartype ref_value: str
    """

    sub_type: Optional[Union[str, "_models.WhatsAppMessageTemplateValueSubType"]] = rest_field(name="subType")
    """The WhatsApp button sub type. Known values are: \"quickReply\" and \"url\"."""
    ref_value: str = rest_field(name="refValue")
    """The reference to the value in the
     Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values  # pylint: disable=line-too-long
     dictionary. Required."""

    @overload
    def __init__(
        self,
        *,
        ref_value: str,
        sub_type: Optional[Union[str, "_models.WhatsAppMessageTemplateValueSubType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateBindingsComponent(_model_base.Model):
    """The template bindings component for WhatsApp.

    All required parameters must be populated in order to send to server.

    :ivar ref_value: The reference to the value in the
    Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values
     dictionary. Required.
    :vartype ref_value: str
    """

    ref_value: str = rest_field(name="refValue")
    """The reference to the value in the
     Microsoft.Azure.Communication.CrossPlatformMessages.Contract.Model.VNext.Notifications.Requests.MessageTemplate.Values  # pylint: disable=line-too-long
     dictionary. Required."""

    @overload
    def __init__(
        self,
        *,
        ref_value: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WhatsAppMessageTemplateResponse(_model_base.Model):
    """The WhatsApp-specific template response contract.

    :ivar content: WhatsApp platform's template content
     This is the payload returned from WhatsApp
     API.
    :vartype content: any
    """

    content: Optional[Any] = rest_field()
    """WhatsApp platform's template content
     This is the payload returned from WhatsApp
     API."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
