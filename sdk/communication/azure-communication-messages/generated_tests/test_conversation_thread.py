# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ConversationThreadClientTestBase, ConversationThreadPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationThread(ConversationThreadClientTestBase):
    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_add_participants(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.add_participants(
            conversation_id="str",
            options={"participants": ["conversation_participant"]},
        )

        # please add some check logic here by yourself
        # ...

    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_remove_participants(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.remove_participants(
            conversation_id="str",
            options={"participantIds": ["str"]},
        )

        # please add some check logic here by yourself
        # ...

    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_list_conversations(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.list_conversations()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_list_messages(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.list_messages(
            conversation_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_send_message(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.send_message(
            conversation_id="str",
            options={"request": "conversation_message_content", "outboundDeliveryStrategy": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @ConversationThreadPreparer()
    @recorded_by_proxy
    def test_analyze_conversation(self, conversationthread_endpoint):
        client = self.create_client(endpoint=conversationthread_endpoint)
        response = client.analyze_conversation(
            conversation_id="str",
        )

        # please add some check logic here by yourself
        # ...
