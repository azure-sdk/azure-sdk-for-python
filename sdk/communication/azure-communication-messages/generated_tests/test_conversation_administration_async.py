# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConversationAdministrationPreparer
from testpreparer_async import ConversationAdministrationClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAdministrationAsync(ConversationAdministrationClientTestBaseAsync):
    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_create_conversation(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.create_conversation(
            body={
                "conversation": {
                    "id": "str",
                    "deliveryChannelIds": ["str"],
                    "outboundDeliveryStrategy": "str",
                    "participants": ["conversation_participant"],
                    "topic": "str",
                },
                "initialMessage": {"content": "str"},
            },
            conversation={
                "id": "str",
                "deliveryChannelIds": ["str"],
                "outboundDeliveryStrategy": "str",
                "participants": ["conversation_participant"],
                "topic": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_conversation(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.get_conversation(
            conversation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_delete_conversation(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.delete_conversation(
            conversation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_terminate_conversation(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.terminate_conversation(
            conversation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_list_conversations(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = client.list_conversations()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_list_messages(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = client.list_messages(
            conversation_id="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_add_participants(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.add_participants(
            conversation_id="str",
            options={"participants": ["conversation_participant"]},
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_remove_participants(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.remove_participants(
            conversation_id="str",
            options={"participantIds": ["str"]},
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_analyze_conversation(self, conversationadministration_endpoint):
        client = self.create_async_client(endpoint=conversationadministration_endpoint)
        response = await client.analyze_conversation(
            conversation_id="str",
        )

        # please add some check logic here by yourself
        # ...
