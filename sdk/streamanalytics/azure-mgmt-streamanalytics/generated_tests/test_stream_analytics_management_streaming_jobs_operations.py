# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.streamanalytics import StreamAnalyticsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStreamAnalyticsManagementStreamingJobsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(StreamAnalyticsManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_replace(self, resource_group):
        response = self.client.streaming_jobs.begin_create_or_replace(
            resource_group_name=resource_group.name,
            job_name="str",
            streaming_job={
                "cluster": {"id": "str"},
                "compatibilityLevel": "str",
                "contentStoragePolicy": "str",
                "createdDate": "2020-02-20 00:00:00",
                "dataLocale": "str",
                "etag": "str",
                "eventsLateArrivalMaxDelayInSeconds": 0,
                "eventsOutOfOrderMaxDelayInSeconds": 0,
                "eventsOutOfOrderPolicy": "str",
                "functions": [{"id": "str", "name": "str", "properties": "function_properties", "type": "str"}],
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "inputs": [{"id": "str", "name": "str", "properties": "input_properties", "type": "str"}],
                "jobId": "str",
                "jobState": "str",
                "jobStorageAccount": {
                    "accountKey": "str",
                    "accountName": "str",
                    "authenticationMode": "ConnectionString",
                },
                "jobType": "str",
                "lastOutputEventTime": "2020-02-20 00:00:00",
                "location": "str",
                "name": "str",
                "outputErrorPolicy": "str",
                "outputStartMode": "str",
                "outputStartTime": "2020-02-20 00:00:00",
                "outputs": [
                    {
                        "datasource": "output_data_source",
                        "diagnostics": {"conditions": [{"code": "str", "message": "str", "since": "str"}]},
                        "etag": "str",
                        "id": "str",
                        "name": "str",
                        "serialization": "serialization",
                        "sizeWindow": 0,
                        "timeWindow": "str",
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "sku": {"name": "str"},
                "tags": {"str": "str"},
                "transformation": {
                    "etag": "str",
                    "id": "str",
                    "name": "str",
                    "query": "str",
                    "streamingUnits": 3,
                    "type": "str",
                    "validStreamingUnits": [0],
                },
                "type": "str",
            },
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.streaming_jobs.update(
            resource_group_name=resource_group.name,
            job_name="str",
            streaming_job={
                "cluster": {"id": "str"},
                "compatibilityLevel": "str",
                "contentStoragePolicy": "str",
                "createdDate": "2020-02-20 00:00:00",
                "dataLocale": "str",
                "etag": "str",
                "eventsLateArrivalMaxDelayInSeconds": 0,
                "eventsOutOfOrderMaxDelayInSeconds": 0,
                "eventsOutOfOrderPolicy": "str",
                "functions": [{"id": "str", "name": "str", "properties": "function_properties", "type": "str"}],
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "inputs": [{"id": "str", "name": "str", "properties": "input_properties", "type": "str"}],
                "jobId": "str",
                "jobState": "str",
                "jobStorageAccount": {
                    "accountKey": "str",
                    "accountName": "str",
                    "authenticationMode": "ConnectionString",
                },
                "jobType": "str",
                "lastOutputEventTime": "2020-02-20 00:00:00",
                "location": "str",
                "name": "str",
                "outputErrorPolicy": "str",
                "outputStartMode": "str",
                "outputStartTime": "2020-02-20 00:00:00",
                "outputs": [
                    {
                        "datasource": "output_data_source",
                        "diagnostics": {"conditions": [{"code": "str", "message": "str", "since": "str"}]},
                        "etag": "str",
                        "id": "str",
                        "name": "str",
                        "serialization": "serialization",
                        "sizeWindow": 0,
                        "timeWindow": "str",
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "sku": {"name": "str"},
                "tags": {"str": "str"},
                "transformation": {
                    "etag": "str",
                    "id": "str",
                    "name": "str",
                    "query": "str",
                    "streamingUnits": 3,
                    "type": "str",
                    "validStreamingUnits": [0],
                },
                "type": "str",
            },
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.streaming_jobs.begin_delete(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.streaming_jobs.get(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.streaming_jobs.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2020-03-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.streaming_jobs.list(
            api_version="2020-03-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_start(self, resource_group):
        response = self.client.streaming_jobs.begin_start(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_stop(self, resource_group):
        response = self.client.streaming_jobs.begin_stop(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_scale(self, resource_group):
        response = self.client.streaming_jobs.begin_scale(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
