# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.streamanalytics import StreamAnalyticsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStreamAnalyticsManagementOutputsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(StreamAnalyticsManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_replace(self, resource_group):
        response = self.client.outputs.create_or_replace(
            resource_group_name=resource_group.name,
            job_name="str",
            output_name="str",
            output={
                "datasource": "output_data_source",
                "diagnostics": {"conditions": [{"code": "str", "message": "str", "since": "str"}]},
                "etag": "str",
                "id": "str",
                "name": "str",
                "serialization": "serialization",
                "sizeWindow": 0,
                "timeWindow": "str",
                "type": "str",
            },
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.outputs.update(
            resource_group_name=resource_group.name,
            job_name="str",
            output_name="str",
            output={
                "datasource": "output_data_source",
                "diagnostics": {"conditions": [{"code": "str", "message": "str", "since": "str"}]},
                "etag": "str",
                "id": "str",
                "name": "str",
                "serialization": "serialization",
                "sizeWindow": 0,
                "timeWindow": "str",
                "type": "str",
            },
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.outputs.delete(
            resource_group_name=resource_group.name,
            job_name="str",
            output_name="str",
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.outputs.get(
            resource_group_name=resource_group.name,
            job_name="str",
            output_name="str",
            api_version="2020-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_streaming_job(self, resource_group):
        response = self.client.outputs.list_by_streaming_job(
            resource_group_name=resource_group.name,
            job_name="str",
            api_version="2020-03-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_test(self, resource_group):
        response = self.client.outputs.begin_test(
            resource_group_name=resource_group.name,
            job_name="str",
            output_name="str",
            api_version="2020-03-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
