# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.synapse.aio import SynapseManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSynapseManagementSqlPoolWorkloadClassifierOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SynapseManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_sql_pool_workload_classifier_get(self, resource_group):
        response = await self.client.sql_pool_workload_classifier.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            sql_pool_name="str",
            workload_group_name="str",
            workload_classifier_name="str",
            api_version="2021-06-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_sql_pool_workload_classifier_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.sql_pool_workload_classifier.begin_create_or_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                sql_pool_name="str",
                workload_group_name="str",
                workload_classifier_name="str",
                parameters={
                    "context": "str",
                    "endTime": "str",
                    "id": "str",
                    "importance": "str",
                    "label": "str",
                    "memberName": "str",
                    "name": "str",
                    "startTime": "str",
                    "type": "str",
                },
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_sql_pool_workload_classifier_begin_delete(self, resource_group):
        response = await (
            await self.client.sql_pool_workload_classifier.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                sql_pool_name="str",
                workload_group_name="str",
                workload_classifier_name="str",
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_sql_pool_workload_classifier_list(self, resource_group):
        response = self.client.sql_pool_workload_classifier.list(
            resource_group_name=resource_group.name,
            workspace_name="str",
            sql_pool_name="str",
            workload_group_name="str",
            api_version="2021-06-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
