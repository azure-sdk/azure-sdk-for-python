# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.synapse.aio import SynapseManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSynapseManagementWorkspacesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SynapseManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_by_resource_group(self, resource_group):
        response = self.client.workspaces.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2021-06-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_get(self, resource_group):
        response = await self.client.workspaces.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2021-06-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_update(self, resource_group):
        response = await (
            await self.client.workspaces.begin_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                workspace_patch_info={
                    "encryption": {
                        "cmk": {
                            "kekIdentity": {"useSystemAssignedIdentity": {}, "userAssignedIdentity": "str"},
                            "key": {"keyVaultUrl": "str", "name": "str"},
                            "status": "str",
                        },
                        "doubleEncryptionEnabled": bool,
                    },
                    "identity": {
                        "principalId": "str",
                        "tenantId": "str",
                        "type": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "managedVirtualNetworkSettings": {
                        "allowedAadTenantIdsForLinking": ["str"],
                        "linkedAccessCheckOnTargetResource": bool,
                        "preventDataExfiltration": bool,
                    },
                    "provisioningState": "str",
                    "publicNetworkAccess": "str",
                    "purviewConfiguration": {"purviewResourceId": "str"},
                    "sqlAdministratorLoginPassword": "str",
                    "tags": {"str": "str"},
                    "workspaceRepositoryConfiguration": {
                        "accountName": "str",
                        "collaborationBranch": "str",
                        "hostName": "str",
                        "lastCommitId": "str",
                        "projectName": "str",
                        "repositoryName": "str",
                        "rootFolder": "str",
                        "tenantId": "str",
                        "type": "str",
                    },
                },
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.workspaces.begin_create_or_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                workspace_info={
                    "location": "str",
                    "adlaResourceId": "str",
                    "azureADOnlyAuthentication": bool,
                    "connectivityEndpoints": {"str": "str"},
                    "cspWorkspaceAdminProperties": {"initialWorkspaceAdminObjectId": "str"},
                    "defaultDataLakeStorage": {
                        "accountUrl": "str",
                        "createManagedPrivateEndpoint": bool,
                        "filesystem": "str",
                        "resourceId": "str",
                    },
                    "encryption": {
                        "cmk": {
                            "kekIdentity": {"useSystemAssignedIdentity": {}, "userAssignedIdentity": "str"},
                            "key": {"keyVaultUrl": "str", "name": "str"},
                            "status": "str",
                        },
                        "doubleEncryptionEnabled": bool,
                    },
                    "extraProperties": {},
                    "id": "str",
                    "identity": {
                        "principalId": "str",
                        "tenantId": "str",
                        "type": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "managedResourceGroupName": "str",
                    "managedVirtualNetwork": "str",
                    "managedVirtualNetworkSettings": {
                        "allowedAadTenantIdsForLinking": ["str"],
                        "linkedAccessCheckOnTargetResource": bool,
                        "preventDataExfiltration": bool,
                    },
                    "name": "str",
                    "privateEndpointConnections": [
                        {
                            "id": "str",
                            "name": "str",
                            "privateEndpoint": {"id": "str"},
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                            "provisioningState": "str",
                            "type": "str",
                        }
                    ],
                    "provisioningState": "str",
                    "publicNetworkAccess": "str",
                    "purviewConfiguration": {"purviewResourceId": "str"},
                    "settings": {"str": {}},
                    "sqlAdministratorLogin": "str",
                    "sqlAdministratorLoginPassword": "str",
                    "tags": {"str": "str"},
                    "trustedServiceBypassEnabled": False,
                    "type": "str",
                    "virtualNetworkProfile": {"computeSubnetId": "str"},
                    "workspaceRepositoryConfiguration": {
                        "accountName": "str",
                        "collaborationBranch": "str",
                        "hostName": "str",
                        "lastCommitId": "str",
                        "projectName": "str",
                        "repositoryName": "str",
                        "rootFolder": "str",
                        "tenantId": "str",
                        "type": "str",
                    },
                    "workspaceUID": "str",
                },
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_delete(self, resource_group):
        response = await (
            await self.client.workspaces.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2021-06-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list(self, resource_group):
        response = self.client.workspaces.list(
            api_version="2021-06-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
