# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.iotoperations.aio import IoTOperationsMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestIoTOperationsMgmtAkriConnectorTemplateOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(IoTOperationsMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_akri_connector_template_get(self, resource_group):
        response = await self.client.akri_connector_template.get(
            resource_group_name=resource_group.name,
            instance_name="str",
            akri_connector_template_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_akri_connector_template_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.akri_connector_template.begin_create_or_update(
                resource_group_name=resource_group.name,
                instance_name="str",
                akri_connector_template_name="str",
                resource={
                    "extendedLocation": {"name": "str", "type": "str"},
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "deviceInboundEndpointTypes": [
                            {
                                "endpointType": "str",
                                "version": "str",
                                "configurationSchemaRefs": {
                                    "additionalConfigSchemaRef": "str",
                                    "defaultDatasetConfigSchemaRef": "str",
                                    "defaultEventsConfigSchemaRef": "str",
                                    "defaultProcessControlConfigSchemaRef": "str",
                                    "defaultStreamsConfigSchemaRef": "str",
                                },
                            }
                        ],
                        "runtimeConfiguration": "akri_connector_template_runtime_configuration",
                        "aioMetadata": {"aioMaxVersion": "str", "aioMinVersion": "str"},
                        "diagnostics": {"logs": {"level": "str"}},
                        "mqttConnectionConfiguration": {
                            "authentication": "akri_connectors_mqtt_authentication",
                            "host": "str",
                            "keepAliveSeconds": 0,
                            "maxInflightMessages": 0,
                            "protocol": "str",
                            "sessionExpirySeconds": 0,
                            "tls": {"mode": "str", "trustedCaCertificateConfigMapRef": "str"},
                        },
                        "provisioningState": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_akri_connector_template_begin_delete(self, resource_group):
        response = await (
            await self.client.akri_connector_template.begin_delete(
                resource_group_name=resource_group.name,
                instance_name="str",
                akri_connector_template_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_akri_connector_template_list_by_instance_resource(self, resource_group):
        response = self.client.akri_connector_template.list_by_instance_resource(
            resource_group_name=resource_group.name,
            instance_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
