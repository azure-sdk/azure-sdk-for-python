# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.iotoperations import IoTOperationsMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestIoTOperationsMgmtAkriDiscoveryHandlerOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(IoTOperationsMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_akri_discovery_handler_get(self, resource_group):
        response = self.client.akri_discovery_handler.get(
            resource_group_name=resource_group.name,
            instance_name="str",
            akri_discovery_handler_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_akri_discovery_handler_begin_create_or_update(self, resource_group):
        response = self.client.akri_discovery_handler.begin_create_or_update(
            resource_group_name=resource_group.name,
            instance_name="str",
            akri_discovery_handler_name="str",
            resource={
                "extendedLocation": {"name": "str", "type": "str"},
                "id": "str",
                "name": "str",
                "properties": {
                    "discoverableDeviceEndpointTypes": [{"endpointType": "str", "version": "str"}],
                    "imageConfiguration": {
                        "imageName": "str",
                        "imagePullPolicy": "str",
                        "registrySettings": "akri_connectors_registry_settings",
                        "replicas": 0,
                        "tagDigestSettings": "akri_connectors_tag_digest_settings",
                    },
                    "schedule": "akri_discovery_handler_schedule",
                    "additionalConfiguration": {"str": "str"},
                    "aioMetadata": {"aioMaxVersion": "str", "aioMinVersion": "str"},
                    "diagnostics": {"logs": {"level": "str"}},
                    "mode": "str",
                    "mqttConnectionConfiguration": {
                        "authentication": "akri_connectors_mqtt_authentication",
                        "host": "str",
                        "keepAliveSeconds": 0,
                        "maxInflightMessages": 0,
                        "protocol": "str",
                        "sessionExpirySeconds": 0,
                        "tls": {"mode": "str", "trustedCaCertificateConfigMapRef": "str"},
                    },
                    "provisioningState": "str",
                    "secrets": [{"secretAlias": "str", "secretKey": "str", "secretRef": "str"}],
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_akri_discovery_handler_begin_delete(self, resource_group):
        response = self.client.akri_discovery_handler.begin_delete(
            resource_group_name=resource_group.name,
            instance_name="str",
            akri_discovery_handler_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_akri_discovery_handler_list_by_instance_resource(self, resource_group):
        response = self.client.akri_discovery_handler.list_by_instance_resource(
            resource_group_name=resource_group.name,
            instance_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
