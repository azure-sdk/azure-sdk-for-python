# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.iotoperations import IoTOperationsMgmtClient

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-iotoperations
# USAGE
    python akri_discovery_handler_create_or_update_maximum_set_gen.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = IoTOperationsMgmtClient(
        credential=DefaultAzureCredential(),
        subscription_id="SUBSCRIPTION_ID",
    )

    response = client.akri_discovery_handler.begin_create_or_update(
        resource_group_name="rgiotoperations",
        instance_name="resource-name123",
        akri_discovery_handler_name="resource-name123",
        resource={
            "extendedLocation": {"name": "qmbrfwcpwwhggszhrdjv", "type": "CustomLocation"},
            "properties": {
                "additionalConfiguration": {"key2206": "ysosuqsgtnwlyq"},
                "aioMetadata": {"aioMaxVersion": "yrmlixhxsnrgialgwruyk", "aioMinVersion": "nxusafsppaikld"},
                "diagnostics": {"logs": {"level": "inypis"}},
                "discoverableDeviceEndpointTypes": [{"endpointType": "chkkpymxhp", "version": "chkkpymxhp"}],
                "imageConfiguration": {
                    "imageName": "vrglpcosiuiulgwqkjbrdxnyjphp",
                    "imagePullPolicy": "Always",
                    "registrySettings": {"registrySettingsType": "AkriConnectorsRegistrySettings"},
                    "replicas": 4,
                    "tagDigestSettings": {"tagDigestType": "AkriConnectorsTagDigestSettings"},
                },
                "mode": "Enabled",
                "mqttConnectionConfiguration": {
                    "authentication": {"method": "AkriConnectorsMqttAuthentication"},
                    "host": "mfxhevl",
                    "keepAliveSeconds": 0,
                    "maxInflightMessages": 0,
                    "protocol": "Mqtt",
                    "sessionExpirySeconds": 0,
                    "tls": {"mode": "Enabled", "trustedCaCertificateConfigMapRef": "tectjjvukvelsreihwadh"},
                },
                "schedule": {"scheduleType": "AkriDiscoveryHandlerSchedule"},
                "secrets": [
                    {
                        "secretAlias": "daizzyhqznrvmmrg",
                        "secretKey": "qblyfotyqcojcchpji",
                        "secretRef": "vqxrhffxxfwqagwjcjimkmzjoxu",
                    }
                ],
            },
        },
    ).result()
    print(response)


# x-ms-original-file: 2025-07-01-preview/AkriDiscoveryHandler_CreateOrUpdate_MaximumSet_Gen.json
if __name__ == "__main__":
    main()
