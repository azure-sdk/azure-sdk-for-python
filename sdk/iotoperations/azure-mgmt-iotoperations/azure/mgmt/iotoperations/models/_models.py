# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import (
    AkriConnectorTemplateAllocationPolicy,
    AkriConnectorTemplateHelmRegistrySettingsType,
    AkriConnectorTemplateManagedConfigurationType,
    AkriConnectorTemplateRuntimeConfigurationType,
    AkriConnectorsMqttAuthenticationMethod,
    AkriConnectorsRegistrySettingsType,
    AkriConnectorsTagDigestType,
    AkriDiscoveryHandlerScheduleType,
    BrokerPersistencePolicyMode,
    DataflowGraphNodeType,
    DataflowOpenTelemetryAuthenticationMethod,
    RegistryEndpointAuthenticationMethod,
    RegistryEndpointTrustedSigningKeyType,
)

if TYPE_CHECKING:
    from .. import models as _models


class AdvancedSettings(_Model):
    """Broker Advanced Settings.

    :ivar clients: Configurations related to All Clients.
    :vartype clients: ~azure.mgmt.iotoperations.models.ClientConfig
    :ivar encrypt_internal_traffic: The setting to enable or disable encryption of internal
     Traffic. Known values are: "Enabled" and "Disabled".
    :vartype encrypt_internal_traffic: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar internal_certs: Certificate rotation and private key configuration.
    :vartype internal_certs: ~azure.mgmt.iotoperations.models.CertManagerCertOptions
    """

    clients: Optional["_models.ClientConfig"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Configurations related to All Clients."""
    encrypt_internal_traffic: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        name="encryptInternalTraffic", visibility=["read", "create", "update", "delete", "query"]
    )
    """The setting to enable or disable encryption of internal Traffic. Known values are: \"Enabled\"
     and \"Disabled\"."""
    internal_certs: Optional["_models.CertManagerCertOptions"] = rest_field(
        name="internalCerts", visibility=["read", "create", "update", "delete", "query"]
    )
    """Certificate rotation and private key configuration."""

    @overload
    def __init__(
        self,
        *,
        clients: Optional["_models.ClientConfig"] = None,
        encrypt_internal_traffic: Optional[Union[str, "_models.OperationalMode"]] = None,
        internal_certs: Optional["_models.CertManagerCertOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorProperties(_Model):
    """AkriConnector properties.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    """


class AkriConnectorResource(ProxyResource):
    """AkriConnector resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.AkriConnectorProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.AkriConnectorProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AkriConnectorProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsRegistrySettings(_Model):
    """AkriConnectorsRegistrySettings properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorsContainerRegistry, AkriConnectorsRegistryEndpointRef

    :ivar registry_settings_type: Required. Known values are: "RegistryEndpointRef" and
     "ContainerRegistry".
    :vartype registry_settings_type: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorsRegistrySettingsType
    """

    __mapping__: Dict[str, _Model] = {}
    registry_settings_type: str = rest_discriminator(
        name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required. Known values are: \"RegistryEndpointRef\" and \"ContainerRegistry\"."""

    @overload
    def __init__(
        self,
        *,
        registry_settings_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsContainerRegistry(AkriConnectorsRegistrySettings, discriminator="ContainerRegistry"):
    """AkriConnectorsContainerRegistry properties.

    :ivar registry_settings_type: The registry settings type. Required. A Container Registry
     reference.
    :vartype registry_settings_type: str or ~azure.mgmt.iotoperations.models.CONTAINER_REGISTRY
    :ivar container_registry_settings: The registry settings for the container registry. Required.
    :vartype container_registry_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorsContainerRegistrySettings
    """

    registry_settings_type: Literal[AkriConnectorsRegistrySettingsType.CONTAINER_REGISTRY] = rest_discriminator(name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The registry settings type. Required. A Container Registry reference."""
    container_registry_settings: "_models.AkriConnectorsContainerRegistrySettings" = rest_field(
        name="containerRegistrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The registry settings for the container registry. Required."""

    @overload
    def __init__(
        self,
        *,
        container_registry_settings: "_models.AkriConnectorsContainerRegistrySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, registry_settings_type=AkriConnectorsRegistrySettingsType.CONTAINER_REGISTRY, **kwargs)


class AkriConnectorsContainerRegistrySettings(_Model):
    """AkriConnectorsContainerRegistry properties.

    :ivar registry: The container registry to use for the artifact. Required.
    :vartype registry: str
    :ivar image_pull_secrets: Optional list of references to secrets in the same namespace to use
     for pulling the connector image.
    :vartype image_pull_secrets:
     list[~azure.mgmt.iotoperations.models.AkriConnectorsImagePullSecret]
    """

    registry: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The container registry to use for the artifact. Required."""
    image_pull_secrets: Optional[List["_models.AkriConnectorsImagePullSecret"]] = rest_field(
        name="imagePullSecrets", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional list of references to secrets in the same namespace to use for pulling the connector
     image."""

    @overload
    def __init__(
        self,
        *,
        registry: str,
        image_pull_secrets: Optional[List["_models.AkriConnectorsImagePullSecret"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsDiagnosticsLogs(_Model):
    """AkriConnectorsDiagnostic Log properties.

    :ivar level: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
    :vartype level: str
    """

    level: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'."""

    @overload
    def __init__(
        self,
        *,
        level: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsTagDigestSettings(_Model):
    """AkriConnectorsTagDigestSettings properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorsDigest, AkriConnectorsTag

    :ivar tag_digest_type: The tag or digest type. Required. Known values are: "Tag" and "Digest".
    :vartype tag_digest_type: str or ~azure.mgmt.iotoperations.models.AkriConnectorsTagDigestType
    """

    __mapping__: Dict[str, _Model] = {}
    tag_digest_type: str = rest_discriminator(
        name="tagDigestType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The tag or digest type. Required. Known values are: \"Tag\" and \"Digest\"."""

    @overload
    def __init__(
        self,
        *,
        tag_digest_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsDigest(AkriConnectorsTagDigestSettings, discriminator="Digest"):
    """AkriConnectorsDigest properties.

    :ivar tag_digest_type: The tag or digest type. Required. Indicates that a digest should be
     specified.
    :vartype tag_digest_type: str or ~azure.mgmt.iotoperations.models.DIGEST
    :ivar digest: The digest of the image. Required.
    :vartype digest: str
    """

    tag_digest_type: Literal[AkriConnectorsTagDigestType.DIGEST] = rest_discriminator(name="tagDigestType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The tag or digest type. Required. Indicates that a digest should be specified."""
    digest: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The digest of the image. Required."""

    @overload
    def __init__(
        self,
        *,
        digest: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, tag_digest_type=AkriConnectorsTagDigestType.DIGEST, **kwargs)


class AkriConnectorsImagePullSecret(_Model):
    """AkriConnectorsImagePullSecret properties.

    :ivar secret_ref: The name of the image pull secret. Required.
    :vartype secret_ref: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the image pull secret. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsMqttAuthentication(_Model):
    """AkriConnectorsMqttAuthentication properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorsServiceAccountAuthentication

    :ivar method: The authentication method for the MQTT connection. Required.
     "ServiceAccountToken"
    :vartype method: str or ~azure.mgmt.iotoperations.models.AkriConnectorsMqttAuthenticationMethod
    """

    __mapping__: Dict[str, _Model] = {}
    method: str = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])
    """The authentication method for the MQTT connection. Required. \"ServiceAccountToken\""""

    @overload
    def __init__(
        self,
        *,
        method: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsMqttConnectionConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorsMqttConnectionConfiguration properties.

    :ivar authentication: Authentication properties.
    :vartype authentication: ~azure.mgmt.iotoperations.models.AkriConnectorsMqttAuthentication
    :ivar host: Host of the Broker in the form of <hostname>:<port>.
    :vartype host: str
    :ivar protocol: The protocol to use for the connection. Currently only ``mqtt`` is supported.
     "Mqtt"
    :vartype protocol: str or ~azure.mgmt.iotoperations.models.AkriConnectorsMqttProtocolType
    :ivar keep_alive_seconds: KeepAlive for connection in seconds.
    :vartype keep_alive_seconds: int
    :ivar max_inflight_messages: The max number of messages to keep in flight. For subscribe, this
     is the receive maximum. For publish, this is the maximum number of messages to send before
     waiting for an ack.
    :vartype max_inflight_messages: int
    :ivar session_expiry_seconds: Session expiry in seconds.
    :vartype session_expiry_seconds: int
    :ivar tls: TLS configuration.
    :vartype tls: ~azure.mgmt.iotoperations.models.TlsProperties
    """

    authentication: Optional["_models.AkriConnectorsMqttAuthentication"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication properties."""
    host: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the Broker in the form of <hostname>:<port>."""
    protocol: Optional[Union[str, "_models.AkriConnectorsMqttProtocolType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The protocol to use for the connection. Currently only ``mqtt`` is supported. \"Mqtt\""""
    keep_alive_seconds: Optional[int] = rest_field(
        name="keepAliveSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """KeepAlive for connection in seconds."""
    max_inflight_messages: Optional[int] = rest_field(
        name="maxInflightMessages", visibility=["read", "create", "update", "delete", "query"]
    )
    """The max number of messages to keep in flight. For subscribe, this is the receive maximum. For
     publish, this is the maximum number of messages to send before waiting for an ack."""
    session_expiry_seconds: Optional[int] = rest_field(
        name="sessionExpirySeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Session expiry in seconds."""
    tls: Optional["_models.TlsProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TLS configuration."""

    @overload
    def __init__(
        self,
        *,
        authentication: Optional["_models.AkriConnectorsMqttAuthentication"] = None,
        host: Optional[str] = None,
        protocol: Optional[Union[str, "_models.AkriConnectorsMqttProtocolType"]] = None,
        keep_alive_seconds: Optional[int] = None,
        max_inflight_messages: Optional[int] = None,
        session_expiry_seconds: Optional[int] = None,
        tls: Optional["_models.TlsProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsRegistryEndpointRef(AkriConnectorsRegistrySettings, discriminator="RegistryEndpointRef"):
    """AkriConnectorsRegistryEndpointRef properties.

    :ivar registry_settings_type: The registry endpoint reference. Required. A Registry Endpoint
     reference.
    :vartype registry_settings_type: str or ~azure.mgmt.iotoperations.models.REGISTRY_ENDPOINT_REF
    :ivar registry_endpoint_ref: The name of the registry endpoint. Required.
    :vartype registry_endpoint_ref: str
    """

    registry_settings_type: Literal[AkriConnectorsRegistrySettingsType.REGISTRY_ENDPOINT_REF] = rest_discriminator(name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The registry endpoint reference. Required. A Registry Endpoint reference."""
    registry_endpoint_ref: str = rest_field(
        name="registryEndpointRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the registry endpoint. Required."""

    @overload
    def __init__(
        self,
        *,
        registry_endpoint_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, registry_settings_type=AkriConnectorsRegistrySettingsType.REGISTRY_ENDPOINT_REF, **kwargs
        )


class AkriConnectorsSecret(_Model):
    """AkriConnectorsSecret properties.

    :ivar secret_key: The key in the secret to be mounted. Required.
    :vartype secret_key: str
    :ivar secret_alias: The application-defined alias for the secret. Required.
    :vartype secret_alias: str
    :ivar secret_ref: The name of the secret to be mounted. Required.
    :vartype secret_ref: str
    """

    secret_key: str = rest_field(name="secretKey", visibility=["read", "create", "update", "delete", "query"])
    """The key in the secret to be mounted. Required."""
    secret_alias: str = rest_field(name="secretAlias", visibility=["read", "create", "update", "delete", "query"])
    """The application-defined alias for the secret. Required."""
    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the secret to be mounted. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_key: str,
        secret_alias: str,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsServiceAccountAuthentication(
    AkriConnectorsMqttAuthentication, discriminator="ServiceAccountToken"
):  # pylint: disable=name-too-long
    """AkriConnectorsServiceAccountAuthentication properties.

    :ivar method: The authentication method for the MQTT connection. Required. Service Account
     Token authentication.
    :vartype method: str or ~azure.mgmt.iotoperations.models.SERVICE_ACCOUNT_TOKEN
    :ivar service_account_token_settings: The service account token for the MQTT connection.
     Required.
    :vartype service_account_token_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorsServiceAccountTokenSettings
    """

    method: Literal[AkriConnectorsMqttAuthenticationMethod.SERVICE_ACCOUNT_TOKEN] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method for the MQTT connection. Required. Service Account Token
     authentication."""
    service_account_token_settings: "_models.AkriConnectorsServiceAccountTokenSettings" = rest_field(
        name="serviceAccountTokenSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The service account token for the MQTT connection. Required."""

    @overload
    def __init__(
        self,
        *,
        service_account_token_settings: "_models.AkriConnectorsServiceAccountTokenSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=AkriConnectorsMqttAuthenticationMethod.SERVICE_ACCOUNT_TOKEN, **kwargs)


class AkriConnectorsServiceAccountTokenSettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorsServiceAccountTokenSettings properties.

    :ivar audience: The audience for the service account token. Required.
    :vartype audience: str
    """

    audience: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The audience for the service account token. Required."""

    @overload
    def __init__(
        self,
        *,
        audience: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorsTag(AkriConnectorsTagDigestSettings, discriminator="Tag"):
    """AkriConnectorsTag properties.

    :ivar tag_digest_type: The tag or digest type. Required. Indicates that a tag should be
     specified.
    :vartype tag_digest_type: str or ~azure.mgmt.iotoperations.models.TAG
    :ivar tag: The tag of the image. Required.
    :vartype tag: str
    """

    tag_digest_type: Literal[AkriConnectorsTagDigestType.TAG] = rest_discriminator(name="tagDigestType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The tag or digest type. Required. Indicates that a tag should be specified."""
    tag: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tag of the image. Required."""

    @overload
    def __init__(
        self,
        *,
        tag: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, tag_digest_type=AkriConnectorsTagDigestType.TAG, **kwargs)


class AkriConnectorTemplateAioMetadata(_Model):
    """AkriConnectorTemplateAioMetadata properties.

    :ivar aio_min_version: The minimum version of AIO required for the connector.
    :vartype aio_min_version: str
    :ivar aio_max_version: The maximum version of AIO required for the connector.
    :vartype aio_max_version: str
    """

    aio_min_version: Optional[str] = rest_field(
        name="aioMinVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The minimum version of AIO required for the connector."""
    aio_max_version: Optional[str] = rest_field(
        name="aioMaxVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum version of AIO required for the connector."""

    @overload
    def __init__(
        self,
        *,
        aio_min_version: Optional[str] = None,
        aio_max_version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateAllocation(_Model):
    """AkriConnectorTemplateAllocation properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorTemplateBucketizedAllocation

    :ivar policy: The allocation policy type. Required. "Bucketized"
    :vartype policy: str or ~azure.mgmt.iotoperations.models.AkriConnectorTemplateAllocationPolicy
    """

    __mapping__: Dict[str, _Model] = {}
    policy: str = rest_discriminator(name="policy", visibility=["read", "create", "update", "delete", "query"])
    """The allocation policy type. Required. \"Bucketized\""""

    @overload
    def __init__(
        self,
        *,
        policy: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateBucketizedAllocation(
    AkriConnectorTemplateAllocation, discriminator="Bucketized"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateBucketizedAllocation properties.

    :ivar policy: The allocation policy type. Required. Bucketized allocation policy.
    :vartype policy: str or ~azure.mgmt.iotoperations.models.BUCKETIZED
    :ivar bucket_size: The bucketized allocation of AEPs for connectors. Required.
    :vartype bucket_size: int
    """

    policy: Literal[AkriConnectorTemplateAllocationPolicy.BUCKETIZED] = rest_discriminator(name="policy", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The allocation policy type. Required. Bucketized allocation policy."""
    bucket_size: int = rest_field(name="bucketSize", visibility=["read", "create", "update", "delete", "query"])
    """The bucketized allocation of AEPs for connectors. Required."""

    @overload
    def __init__(
        self,
        *,
        bucket_size: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, policy=AkriConnectorTemplateAllocationPolicy.BUCKETIZED, **kwargs)


class AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs properties.

    :ivar default_dataset_config_schema_ref: The default configuration schema reference for
     datasets.
    :vartype default_dataset_config_schema_ref: str
    :ivar default_events_config_schema_ref: The default configuration schema reference for events.
    :vartype default_events_config_schema_ref: str
    :ivar default_process_control_config_schema_ref: The default configuration schema reference for
     process control.
    :vartype default_process_control_config_schema_ref: str
    :ivar default_streams_config_schema_ref: The default configuration schema reference for
     streams.
    :vartype default_streams_config_schema_ref: str
    :ivar additional_config_schema_ref: The additional configuration schema reference.
    :vartype additional_config_schema_ref: str
    """

    default_dataset_config_schema_ref: Optional[str] = rest_field(
        name="defaultDatasetConfigSchemaRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The default configuration schema reference for datasets."""
    default_events_config_schema_ref: Optional[str] = rest_field(
        name="defaultEventsConfigSchemaRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The default configuration schema reference for events."""
    default_process_control_config_schema_ref: Optional[str] = rest_field(
        name="defaultProcessControlConfigSchemaRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The default configuration schema reference for process control."""
    default_streams_config_schema_ref: Optional[str] = rest_field(
        name="defaultStreamsConfigSchemaRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The default configuration schema reference for streams."""
    additional_config_schema_ref: Optional[str] = rest_field(
        name="additionalConfigSchemaRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The additional configuration schema reference."""

    @overload
    def __init__(
        self,
        *,
        default_dataset_config_schema_ref: Optional[str] = None,
        default_events_config_schema_ref: Optional[str] = None,
        default_process_control_config_schema_ref: Optional[str] = None,
        default_streams_config_schema_ref: Optional[str] = None,
        additional_config_schema_ref: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateDeviceInboundEndpointType(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateDeviceInboundEndpointType properties.

    :ivar endpoint_type: The type of the device inbound endpoint. Required.
    :vartype endpoint_type: str
    :ivar version: The version of the device inbound endpoint. Required.
    :vartype version: str
    :ivar configuration_schema_refs: The configuration schema references for the device inbound
     endpoint.
    :vartype configuration_schema_refs:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs
    """

    endpoint_type: str = rest_field(name="endpointType", visibility=["read", "create", "update", "delete", "query"])
    """The type of the device inbound endpoint. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version of the device inbound endpoint. Required."""
    configuration_schema_refs: Optional["_models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs"] = (
        rest_field(name="configurationSchemaRefs", visibility=["read", "create", "update", "delete", "query"])
    )
    """The configuration schema references for the device inbound endpoint."""

    @overload
    def __init__(
        self,
        *,
        endpoint_type: str,
        version: str,
        configuration_schema_refs: Optional[
            "_models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateDiagnostics(_Model):
    """AkriConnectorTemplateDiagnostics properties.

    :ivar logs: The log settings for the Connector template. Required.
    :vartype logs: ~azure.mgmt.iotoperations.models.AkriConnectorsDiagnosticsLogs
    """

    logs: "_models.AkriConnectorsDiagnosticsLogs" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The log settings for the Connector template. Required."""

    @overload
    def __init__(
        self,
        *,
        logs: "_models.AkriConnectorsDiagnosticsLogs",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmAdvancedConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmAdvancedConfiguration properties.

    :ivar delete: Delete operation configuration for the Helm chart.
    :vartype delete: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmDeleteConfiguration
    :ivar install: Install operation configuration for the Helm chart.
    :vartype install:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmInstallConfiguration
    :ivar upgrade: Upgrade operation configuration for the Helm chart.
    :vartype upgrade:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmUpgradeConfiguration
    """

    delete: Optional["_models.AkriConnectorTemplateHelmDeleteConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Delete operation configuration for the Helm chart."""
    install: Optional["_models.AkriConnectorTemplateHelmInstallConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Install operation configuration for the Helm chart."""
    upgrade: Optional["_models.AkriConnectorTemplateHelmUpgradeConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Upgrade operation configuration for the Helm chart."""

    @overload
    def __init__(
        self,
        *,
        delete: Optional["_models.AkriConnectorTemplateHelmDeleteConfiguration"] = None,
        install: Optional["_models.AkriConnectorTemplateHelmInstallConfiguration"] = None,
        upgrade: Optional["_models.AkriConnectorTemplateHelmUpgradeConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmAuthSecretRef(_Model):
    """AkriConnectorTemplateHelmAuthSecretRef properties.

    :ivar secret_ref: The name of the secret. Required.
    :vartype secret_ref: str
    :ivar password_key: The key of the password in the secret. Required.
    :vartype password_key: str
    :ivar username_key: The key of the username in the secret. Required.
    :vartype username_key: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the secret. Required."""
    password_key: str = rest_field(name="passwordKey", visibility=["read", "create", "update", "delete", "query"])
    """The key of the password in the secret. Required."""
    username_key: str = rest_field(name="usernameKey", visibility=["read", "create", "update", "delete", "query"])
    """The key of the username in the secret. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
        password_key: str,
        username_key: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateRuntimeConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateRuntimeConfiguration properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorTemplateHelmConfiguration, AkriConnectorTemplateManagedConfiguration

    :ivar runtime_configuration_type: Runtime configuration type for the Connector template.
     Required. Known values are: "HelmConfiguration" and "ManagedConfiguration".
    :vartype runtime_configuration_type: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateRuntimeConfigurationType
    """

    __mapping__: Dict[str, _Model] = {}
    runtime_configuration_type: str = rest_discriminator(
        name="runtimeConfigurationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Runtime configuration type for the Connector template. Required. Known values are:
     \"HelmConfiguration\" and \"ManagedConfiguration\"."""

    @overload
    def __init__(
        self,
        *,
        runtime_configuration_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmConfiguration(
    AkriConnectorTemplateRuntimeConfiguration, discriminator="HelmConfiguration"
):
    """AkriConnectorTemplateHelmConfiguration properties.

    :ivar runtime_configuration_type: The runtime configuration type for the Connector template.
     Required. Helm Configuration Type.
    :vartype runtime_configuration_type: str or ~azure.mgmt.iotoperations.models.HELM_CONFIGURATION
    :ivar helm_configuration_settings: The Helm configuration settings. Required.
    :vartype helm_configuration_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmConfigurationSettings
    """

    runtime_configuration_type: Literal[AkriConnectorTemplateRuntimeConfigurationType.HELM_CONFIGURATION] = rest_discriminator(name="runtimeConfigurationType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The runtime configuration type for the Connector template. Required. Helm Configuration Type."""
    helm_configuration_settings: "_models.AkriConnectorTemplateHelmConfigurationSettings" = rest_field(
        name="helmConfigurationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Helm configuration settings. Required."""

    @overload
    def __init__(
        self,
        *,
        helm_configuration_settings: "_models.AkriConnectorTemplateHelmConfigurationSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, runtime_configuration_type=AkriConnectorTemplateRuntimeConfigurationType.HELM_CONFIGURATION, **kwargs
        )


class AkriConnectorTemplateHelmConfigurationSettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmConfiguration properties.

    :ivar registry_settings: The registry settings for the helm chart to be used.
    :vartype registry_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmRegistrySettings
    :ivar release_name: The release name of the Helm chart. Required.
    :vartype release_name: str
    :ivar version: The version of the Helm chart. Required.
    :vartype version: str
    :ivar advanced_configuration: Advanced configuration for the Helm chart.
     Install, upgrade, and uninstall options for the helm chart such as atomic, wait, timeout,
     ``wait_for_jobs``, and ``disable_hooks``.
    :vartype advanced_configuration:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmAdvancedConfiguration
    :ivar values_property: A map of values to pass to the helm chart.
    :vartype values_property: dict[str, str]
    """

    registry_settings: Optional["_models.AkriConnectorTemplateHelmRegistrySettings"] = rest_field(
        name="registrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The registry settings for the helm chart to be used."""
    release_name: str = rest_field(name="releaseName", visibility=["read", "create", "update", "delete", "query"])
    """The release name of the Helm chart. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version of the Helm chart. Required."""
    advanced_configuration: Optional["_models.AkriConnectorTemplateHelmAdvancedConfiguration"] = rest_field(
        name="advancedConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Advanced configuration for the Helm chart.
     Install, upgrade, and uninstall options for the helm chart such as atomic, wait, timeout,
     ``wait_for_jobs``, and ``disable_hooks``."""
    values_property: Optional[Dict[str, str]] = rest_field(
        name="values", visibility=["read", "create", "update", "delete", "query"]
    )
    """A map of values to pass to the helm chart."""

    @overload
    def __init__(
        self,
        *,
        release_name: str,
        version: str,
        registry_settings: Optional["_models.AkriConnectorTemplateHelmRegistrySettings"] = None,
        advanced_configuration: Optional["_models.AkriConnectorTemplateHelmAdvancedConfiguration"] = None,
        values_property: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmRegistrySettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmRegistrySettings properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorTemplateHelmContainerRegistry, AkriConnectorTemplateHelmRegistryEndpointRef

    :ivar registry_settings_type: Required. Known values are: "RegistryEndpointRef" and
     "ContainerRegistry".
    :vartype registry_settings_type: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmRegistrySettingsType
    """

    __mapping__: Dict[str, _Model] = {}
    registry_settings_type: str = rest_discriminator(
        name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required. Known values are: \"RegistryEndpointRef\" and \"ContainerRegistry\"."""

    @overload
    def __init__(
        self,
        *,
        registry_settings_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmContainerRegistry(
    AkriConnectorTemplateHelmRegistrySettings, discriminator="ContainerRegistry"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmContainerRegistry properties.

    :ivar registry_settings_type: The container registry reference. Required. A Container Registry
     reference.
    :vartype registry_settings_type: str or ~azure.mgmt.iotoperations.models.CONTAINER_REGISTRY
    :ivar container_registry_settings: The registry settings for the container registry. Required.
    :vartype container_registry_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmContainerRegistrySettings
    """

    registry_settings_type: Literal[AkriConnectorTemplateHelmRegistrySettingsType.CONTAINER_REGISTRY] = rest_discriminator(name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The container registry reference. Required. A Container Registry reference."""
    container_registry_settings: "_models.AkriConnectorTemplateHelmContainerRegistrySettings" = rest_field(
        name="containerRegistrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The registry settings for the container registry. Required."""

    @overload
    def __init__(
        self,
        *,
        container_registry_settings: "_models.AkriConnectorTemplateHelmContainerRegistrySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, registry_settings_type=AkriConnectorTemplateHelmRegistrySettingsType.CONTAINER_REGISTRY, **kwargs
        )


class AkriConnectorTemplateHelmContainerRegistrySettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmContainerRegistrySettings properties.

    :ivar registry: The registry to use for the Helm chart. Required.
    :vartype registry: str
    :ivar repository: The repository to use for the Helm chart. Required.
    :vartype repository: str
    :ivar auth_secret_ref: Optional reference to a secret in the same namespace to use for pulling
     the Helm chart.
    :vartype auth_secret_ref:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateHelmAuthSecretRef
    """

    registry: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The registry to use for the Helm chart. Required."""
    repository: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The repository to use for the Helm chart. Required."""
    auth_secret_ref: Optional["_models.AkriConnectorTemplateHelmAuthSecretRef"] = rest_field(
        name="authSecretRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional reference to a secret in the same namespace to use for pulling the Helm chart."""

    @overload
    def __init__(
        self,
        *,
        registry: str,
        repository: str,
        auth_secret_ref: Optional["_models.AkriConnectorTemplateHelmAuthSecretRef"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmDeleteConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmDeleteConfiguration properties.

    :ivar timeout: The timeout for the operation in seconds.
    :vartype timeout: int
    :ivar wait_for_jobs: The wait for jobs flag.
    :vartype wait_for_jobs: bool
    :ivar atomic: Atomic flag for the operation.
    :vartype atomic: bool
    :ivar disable_hooks: Disable hooks flag for the operation.
    :vartype disable_hooks: bool
    :ivar wait: The wait flag for the operation.
    :vartype wait: bool
    """

    timeout: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The timeout for the operation in seconds."""
    wait_for_jobs: Optional[bool] = rest_field(
        name="waitForJobs", visibility=["read", "create", "update", "delete", "query"]
    )
    """The wait for jobs flag."""
    atomic: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Atomic flag for the operation."""
    disable_hooks: Optional[bool] = rest_field(
        name="disableHooks", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disable hooks flag for the operation."""
    wait: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The wait flag for the operation."""

    @overload
    def __init__(
        self,
        *,
        timeout: Optional[int] = None,
        wait_for_jobs: Optional[bool] = None,
        atomic: Optional[bool] = None,
        disable_hooks: Optional[bool] = None,
        wait: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmInstallConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmInstallConfiguration properties.

    :ivar timeout: The timeout for the operation in seconds.
    :vartype timeout: int
    :ivar wait_for_jobs: The wait for jobs flag.
    :vartype wait_for_jobs: bool
    :ivar atomic: Atomic flag for the operation.
    :vartype atomic: bool
    :ivar disable_hooks: Disable hooks flag for the operation.
    :vartype disable_hooks: bool
    :ivar wait: The wait flag for the operation.
    :vartype wait: bool
    """

    timeout: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The timeout for the operation in seconds."""
    wait_for_jobs: Optional[bool] = rest_field(
        name="waitForJobs", visibility=["read", "create", "update", "delete", "query"]
    )
    """The wait for jobs flag."""
    atomic: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Atomic flag for the operation."""
    disable_hooks: Optional[bool] = rest_field(
        name="disableHooks", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disable hooks flag for the operation."""
    wait: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The wait flag for the operation."""

    @overload
    def __init__(
        self,
        *,
        timeout: Optional[int] = None,
        wait_for_jobs: Optional[bool] = None,
        atomic: Optional[bool] = None,
        disable_hooks: Optional[bool] = None,
        wait: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateHelmRegistryEndpointRef(
    AkriConnectorTemplateHelmRegistrySettings, discriminator="RegistryEndpointRef"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmRegistryEndpointRef properties.

    :ivar registry_settings_type: The registry endpoint reference. Required. A Registry Endpoint
     reference.
    :vartype registry_settings_type: str or ~azure.mgmt.iotoperations.models.REGISTRY_ENDPOINT_REF
    :ivar registry_endpoint_ref: The name of the registry endpoint. Required.
    :vartype registry_endpoint_ref: str
    """

    registry_settings_type: Literal[AkriConnectorTemplateHelmRegistrySettingsType.REGISTRY_ENDPOINT_REF] = rest_discriminator(name="registrySettingsType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The registry endpoint reference. Required. A Registry Endpoint reference."""
    registry_endpoint_ref: str = rest_field(
        name="registryEndpointRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the registry endpoint. Required."""

    @overload
    def __init__(
        self,
        *,
        registry_endpoint_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, registry_settings_type=AkriConnectorTemplateHelmRegistrySettingsType.REGISTRY_ENDPOINT_REF, **kwargs
        )


class AkriConnectorTemplateHelmUpgradeConfiguration(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateHelmUpgradeConfiguration properties.

    :ivar timeout: The timeout for the operation in seconds.
    :vartype timeout: int
    :ivar wait_for_jobs: The wait for jobs flag.
    :vartype wait_for_jobs: bool
    :ivar atomic: Atomic flag for the operation.
    :vartype atomic: bool
    :ivar disable_hooks: Disable hooks flag for the operation.
    :vartype disable_hooks: bool
    :ivar wait: The wait flag for the operation.
    :vartype wait: bool
    """

    timeout: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The timeout for the operation in seconds."""
    wait_for_jobs: Optional[bool] = rest_field(
        name="waitForJobs", visibility=["read", "create", "update", "delete", "query"]
    )
    """The wait for jobs flag."""
    atomic: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Atomic flag for the operation."""
    disable_hooks: Optional[bool] = rest_field(
        name="disableHooks", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disable hooks flag for the operation."""
    wait: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The wait flag for the operation."""

    @overload
    def __init__(
        self,
        *,
        timeout: Optional[int] = None,
        wait_for_jobs: Optional[bool] = None,
        atomic: Optional[bool] = None,
        disable_hooks: Optional[bool] = None,
        wait: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateManagedConfiguration(
    AkriConnectorTemplateRuntimeConfiguration, discriminator="ManagedConfiguration"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateManagedConfiguration properties.

    :ivar runtime_configuration_type: The runtime configuration type for the Connector template.
     Required. Managed Configuration Type.
    :vartype runtime_configuration_type: str or
     ~azure.mgmt.iotoperations.models.MANAGED_CONFIGURATION
    :ivar managed_configuration_settings: The managed configuration settings. Required.
    :vartype managed_configuration_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateManagedConfigurationSettings
    """

    runtime_configuration_type: Literal[AkriConnectorTemplateRuntimeConfigurationType.MANAGED_CONFIGURATION] = rest_discriminator(name="runtimeConfigurationType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The runtime configuration type for the Connector template. Required. Managed Configuration
     Type."""
    managed_configuration_settings: "_models.AkriConnectorTemplateManagedConfigurationSettings" = rest_field(
        name="managedConfigurationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed configuration settings. Required."""

    @overload
    def __init__(
        self,
        *,
        managed_configuration_settings: "_models.AkriConnectorTemplateManagedConfigurationSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args,
            runtime_configuration_type=AkriConnectorTemplateRuntimeConfigurationType.MANAGED_CONFIGURATION,
            **kwargs,
        )


class AkriConnectorTemplateManagedConfigurationSettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateManagedConfiguration properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriConnectorTemplateRuntimeImageConfiguration,
    AkriConnectorTemplateRuntimeStatefulSetConfiguration

    :ivar managed_configuration_type: The type of the managed configuration. Required. Known values
     are: "ImageConfiguration" and "StatefulSetConfiguration".
    :vartype managed_configuration_type: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateManagedConfigurationType
    :ivar allocation: Allocation settings for the managed configuration.
    :vartype allocation: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateAllocation
    :ivar persistent_volume_claims: The persistent volume claims for the managed configuration.
    :vartype persistent_volume_claims:
     list[~azure.mgmt.iotoperations.models.AkriConnectorTemplatePersistentVolumeClaim]
    :ivar additional_configuration: Additional configuration for the image of the managed
     configuration.
    :vartype additional_configuration: dict[str, str]
    :ivar persistent_volume_claim_templates: The persistent volume claim templates for the managed
     configuration.
     See
     `https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json
     <https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json>`_.
    :vartype persistent_volume_claim_templates: list[dict[str, any]]
    :ivar secrets: Connector secrets that will be mounted onto all connector instances.
    :vartype secrets: list[~azure.mgmt.iotoperations.models.AkriConnectorsSecret]
    :ivar trust_settings: Trust list for the connector. This is used to specify the certificates
     that all connector instances should trust.
    :vartype trust_settings: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateTrustList
    """

    __mapping__: Dict[str, _Model] = {}
    managed_configuration_type: str = rest_discriminator(
        name="managedConfigurationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the managed configuration. Required. Known values are: \"ImageConfiguration\" and
     \"StatefulSetConfiguration\"."""
    allocation: Optional["_models.AkriConnectorTemplateAllocation"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Allocation settings for the managed configuration."""
    persistent_volume_claims: Optional[List["_models.AkriConnectorTemplatePersistentVolumeClaim"]] = rest_field(
        name="persistentVolumeClaims", visibility=["read", "create", "update", "delete", "query"]
    )
    """The persistent volume claims for the managed configuration."""
    additional_configuration: Optional[Dict[str, str]] = rest_field(
        name="additionalConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional configuration for the image of the managed configuration."""
    persistent_volume_claim_templates: Optional[List[Dict[str, Any]]] = rest_field(
        name="persistentVolumeClaimTemplates", visibility=["read", "create", "update", "delete", "query"]
    )
    """The persistent volume claim templates for the managed configuration.
     See
     `https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json
     <https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json>`_."""
    secrets: Optional[List["_models.AkriConnectorsSecret"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector secrets that will be mounted onto all connector instances."""
    trust_settings: Optional["_models.AkriConnectorTemplateTrustList"] = rest_field(
        name="trustSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trust list for the connector. This is used to specify the certificates that all connector
     instances should trust."""

    @overload
    def __init__(
        self,
        *,
        managed_configuration_type: str,
        allocation: Optional["_models.AkriConnectorTemplateAllocation"] = None,
        persistent_volume_claims: Optional[List["_models.AkriConnectorTemplatePersistentVolumeClaim"]] = None,
        additional_configuration: Optional[Dict[str, str]] = None,
        persistent_volume_claim_templates: Optional[List[Dict[str, Any]]] = None,
        secrets: Optional[List["_models.AkriConnectorsSecret"]] = None,
        trust_settings: Optional["_models.AkriConnectorTemplateTrustList"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplatePersistentVolumeClaim(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplatePersistentVolumeClaim properties.

    :ivar claim_name: The name of the persistent volume claim. Required.
    :vartype claim_name: str
    :ivar mount_path: The mount path for the persistent volume claim. Required.
    :vartype mount_path: str
    """

    claim_name: str = rest_field(name="claimName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the persistent volume claim. Required."""
    mount_path: str = rest_field(name="mountPath", visibility=["read", "create", "update", "delete", "query"])
    """The mount path for the persistent volume claim. Required."""

    @overload
    def __init__(
        self,
        *,
        claim_name: str,
        mount_path: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateProperties(_Model):
    """AkriConnectorTemplate properties.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    :ivar aio_metadata: Metadata about AIO.
    :vartype aio_metadata: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateAioMetadata
    :ivar runtime_configuration: The runtime configuration for the Connector template. Required.
    :vartype runtime_configuration:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateRuntimeConfiguration
    :ivar diagnostics: Diagnostics settings for the Connector template.
    :vartype diagnostics: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateDiagnostics
    :ivar device_inbound_endpoint_types: Device inbound endpoint types. Required.
    :vartype device_inbound_endpoint_types:
     list[~azure.mgmt.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointType]
    :ivar mqtt_connection_configuration: Mqtt connection configuration settings.
    :vartype mqtt_connection_configuration:
     ~azure.mgmt.iotoperations.models.AkriConnectorsMqttConnectionConfiguration
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    aio_metadata: Optional["_models.AkriConnectorTemplateAioMetadata"] = rest_field(
        name="aioMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata about AIO."""
    runtime_configuration: "_models.AkriConnectorTemplateRuntimeConfiguration" = rest_field(
        name="runtimeConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """The runtime configuration for the Connector template. Required."""
    diagnostics: Optional["_models.AkriConnectorTemplateDiagnostics"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Diagnostics settings for the Connector template."""
    device_inbound_endpoint_types: List["_models.AkriConnectorTemplateDeviceInboundEndpointType"] = rest_field(
        name="deviceInboundEndpointTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Device inbound endpoint types. Required."""
    mqtt_connection_configuration: Optional["_models.AkriConnectorsMqttConnectionConfiguration"] = rest_field(
        name="mqttConnectionConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mqtt connection configuration settings."""

    @overload
    def __init__(
        self,
        *,
        runtime_configuration: "_models.AkriConnectorTemplateRuntimeConfiguration",
        device_inbound_endpoint_types: List["_models.AkriConnectorTemplateDeviceInboundEndpointType"],
        aio_metadata: Optional["_models.AkriConnectorTemplateAioMetadata"] = None,
        diagnostics: Optional["_models.AkriConnectorTemplateDiagnostics"] = None,
        mqtt_connection_configuration: Optional["_models.AkriConnectorsMqttConnectionConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateResource(ProxyResource):
    """AkriConnectorTemplate resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.AkriConnectorTemplateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AkriConnectorTemplateProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateRuntimeImageConfiguration(
    AkriConnectorTemplateManagedConfigurationSettings, discriminator="ImageConfiguration"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateRuntimeImageConfiguration properties.

    :ivar allocation: Allocation settings for the managed configuration.
    :vartype allocation: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateAllocation
    :ivar persistent_volume_claims: The persistent volume claims for the managed configuration.
    :vartype persistent_volume_claims:
     list[~azure.mgmt.iotoperations.models.AkriConnectorTemplatePersistentVolumeClaim]
    :ivar additional_configuration: Additional configuration for the image of the managed
     configuration.
    :vartype additional_configuration: dict[str, str]
    :ivar persistent_volume_claim_templates: The persistent volume claim templates for the managed
     configuration.
     See
     `https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json
     <https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json>`_.
    :vartype persistent_volume_claim_templates: list[dict[str, any]]
    :ivar secrets: Connector secrets that will be mounted onto all connector instances.
    :vartype secrets: list[~azure.mgmt.iotoperations.models.AkriConnectorsSecret]
    :ivar trust_settings: Trust list for the connector. This is used to specify the certificates
     that all connector instances should trust.
    :vartype trust_settings: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateTrustList
    :ivar managed_configuration_type: The managed configuration type for the Connector template.
     Required. Image Configuration Type.
    :vartype managed_configuration_type: str or
     ~azure.mgmt.iotoperations.models.IMAGE_CONFIGURATION
    :ivar image_configuration_settings: The image configuration settings. Required.
    :vartype image_configuration_settings:
     ~azure.mgmt.iotoperations.models.AkriConnectorTemplateRuntimeImageConfigurationSettings
    """

    managed_configuration_type: Literal[AkriConnectorTemplateManagedConfigurationType.IMAGE_CONFIGURATION] = rest_discriminator(name="managedConfigurationType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The managed configuration type for the Connector template. Required. Image Configuration Type."""
    image_configuration_settings: "_models.AkriConnectorTemplateRuntimeImageConfigurationSettings" = rest_field(
        name="imageConfigurationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image configuration settings. Required."""

    @overload
    def __init__(
        self,
        *,
        image_configuration_settings: "_models.AkriConnectorTemplateRuntimeImageConfigurationSettings",
        allocation: Optional["_models.AkriConnectorTemplateAllocation"] = None,
        persistent_volume_claims: Optional[List["_models.AkriConnectorTemplatePersistentVolumeClaim"]] = None,
        additional_configuration: Optional[Dict[str, str]] = None,
        persistent_volume_claim_templates: Optional[List[Dict[str, Any]]] = None,
        secrets: Optional[List["_models.AkriConnectorsSecret"]] = None,
        trust_settings: Optional["_models.AkriConnectorTemplateTrustList"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args,
            managed_configuration_type=AkriConnectorTemplateManagedConfigurationType.IMAGE_CONFIGURATION,
            **kwargs,
        )


class AkriConnectorTemplateRuntimeImageConfigurationSettings(_Model):  # pylint: disable=name-too-long
    """AkriConnectorTemplateRuntimeImageConfiguration properties.

    :ivar image_name: The image name without any registry reference, tag or digest. Required.
    :vartype image_name: str
    :ivar image_pull_policy: The pull policy of the image. Known values are: "Always",
     "IfNotPresent", and "Never".
    :vartype image_pull_policy: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorsImagePullPolicy
    :ivar replicas: The number of replicas to be set up.
    :vartype replicas: int
    :ivar registry_settings: The registry settings for the image. You can omit this field if using
     the default docker hub repository or using a local image.
    :vartype registry_settings: ~azure.mgmt.iotoperations.models.AkriConnectorsRegistrySettings
    :ivar tag_digest_settings: Optional image tag or digest. If not specified, the default tag is
     ``latest``.
    :vartype tag_digest_settings: ~azure.mgmt.iotoperations.models.AkriConnectorsTagDigestSettings
    """

    image_name: str = rest_field(name="imageName", visibility=["read", "create", "update", "delete", "query"])
    """The image name without any registry reference, tag or digest. Required."""
    image_pull_policy: Optional[Union[str, "_models.AkriConnectorsImagePullPolicy"]] = rest_field(
        name="imagePullPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The pull policy of the image. Known values are: \"Always\", \"IfNotPresent\", and \"Never\"."""
    replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The number of replicas to be set up."""
    registry_settings: Optional["_models.AkriConnectorsRegistrySettings"] = rest_field(
        name="registrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The registry settings for the image. You can omit this field if using the default docker hub
     repository or using a local image."""
    tag_digest_settings: Optional["_models.AkriConnectorsTagDigestSettings"] = rest_field(
        name="tagDigestSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional image tag or digest. If not specified, the default tag is ``latest``."""

    @overload
    def __init__(
        self,
        *,
        image_name: str,
        image_pull_policy: Optional[Union[str, "_models.AkriConnectorsImagePullPolicy"]] = None,
        replicas: Optional[int] = None,
        registry_settings: Optional["_models.AkriConnectorsRegistrySettings"] = None,
        tag_digest_settings: Optional["_models.AkriConnectorsTagDigestSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriConnectorTemplateRuntimeStatefulSetConfiguration(
    AkriConnectorTemplateManagedConfigurationSettings, discriminator="StatefulSetConfiguration"
):  # pylint: disable=name-too-long
    """AkriConnectorTemplateRuntimeStatefulSetConfiguration properties.

    :ivar allocation: Allocation settings for the managed configuration.
    :vartype allocation: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateAllocation
    :ivar persistent_volume_claims: The persistent volume claims for the managed configuration.
    :vartype persistent_volume_claims:
     list[~azure.mgmt.iotoperations.models.AkriConnectorTemplatePersistentVolumeClaim]
    :ivar additional_configuration: Additional configuration for the image of the managed
     configuration.
    :vartype additional_configuration: dict[str, str]
    :ivar persistent_volume_claim_templates: The persistent volume claim templates for the managed
     configuration.
     See
     `https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json
     <https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json>`_.
    :vartype persistent_volume_claim_templates: list[dict[str, any]]
    :ivar secrets: Connector secrets that will be mounted onto all connector instances.
    :vartype secrets: list[~azure.mgmt.iotoperations.models.AkriConnectorsSecret]
    :ivar trust_settings: Trust list for the connector. This is used to specify the certificates
     that all connector instances should trust.
    :vartype trust_settings: ~azure.mgmt.iotoperations.models.AkriConnectorTemplateTrustList
    :ivar managed_configuration_type: The managed configuration type for the Connector template.
     Required. StatefulSet Configuration Type.
    :vartype managed_configuration_type: str or
     ~azure.mgmt.iotoperations.models.STATEFUL_SET_CONFIGURATION
    :ivar stateful_set_configuration_settings: The stateful set configuration settings. Required.
    :vartype stateful_set_configuration_settings: dict[str, any]
    """

    managed_configuration_type: Literal[AkriConnectorTemplateManagedConfigurationType.STATEFUL_SET_CONFIGURATION] = rest_discriminator(name="managedConfigurationType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The managed configuration type for the Connector template. Required. StatefulSet Configuration
     Type."""
    stateful_set_configuration_settings: Dict[str, Any] = rest_field(
        name="statefulSetConfigurationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The stateful set configuration settings. Required."""

    @overload
    def __init__(
        self,
        *,
        stateful_set_configuration_settings: Dict[str, Any],
        allocation: Optional["_models.AkriConnectorTemplateAllocation"] = None,
        persistent_volume_claims: Optional[List["_models.AkriConnectorTemplatePersistentVolumeClaim"]] = None,
        additional_configuration: Optional[Dict[str, str]] = None,
        persistent_volume_claim_templates: Optional[List[Dict[str, Any]]] = None,
        secrets: Optional[List["_models.AkriConnectorsSecret"]] = None,
        trust_settings: Optional["_models.AkriConnectorTemplateTrustList"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args,
            managed_configuration_type=AkriConnectorTemplateManagedConfigurationType.STATEFUL_SET_CONFIGURATION,
            **kwargs,
        )


class AkriConnectorTemplateTrustList(_Model):
    """AkriConnectorTemplateTrustList properties.

    :ivar trust_list_secret_ref: The secret reference for certificates to trust. Required.
    :vartype trust_list_secret_ref: str
    """

    trust_list_secret_ref: str = rest_field(
        name="trustListSecretRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The secret reference for certificates to trust. Required."""

    @overload
    def __init__(
        self,
        *,
        trust_list_secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerAioMetadata(_Model):
    """Metadata about AIO.

    :ivar aio_min_version: The minimum version of AIO required for the connector.
    :vartype aio_min_version: str
    :ivar aio_max_version: The maximum version of AIO required for the connector.
    :vartype aio_max_version: str
    """

    aio_min_version: Optional[str] = rest_field(
        name="aioMinVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The minimum version of AIO required for the connector."""
    aio_max_version: Optional[str] = rest_field(
        name="aioMaxVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum version of AIO required for the connector."""

    @overload
    def __init__(
        self,
        *,
        aio_min_version: Optional[str] = None,
        aio_max_version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerDiagnostics(_Model):
    """AkriDiscoveryHandlerDiagnostics properties.

    :ivar logs: The log settings for the Connector template. Required.
    :vartype logs: ~azure.mgmt.iotoperations.models.AkriConnectorsDiagnosticsLogs
    """

    logs: "_models.AkriConnectorsDiagnosticsLogs" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The log settings for the Connector template. Required."""

    @overload
    def __init__(
        self,
        *,
        logs: "_models.AkriConnectorsDiagnosticsLogs",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerDiscoverableDeviceEndpointType(_Model):  # pylint: disable=name-too-long
    """AkriDiscoveryHandlerDiscoverableDeviceEndpointType properties.

    :ivar endpoint_type: The type of the endpoint. Required.
    :vartype endpoint_type: str
    :ivar version: The version of the endpoint. Required.
    :vartype version: str
    """

    endpoint_type: str = rest_field(name="endpointType", visibility=["read", "create", "update", "delete", "query"])
    """The type of the endpoint. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version of the endpoint. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint_type: str,
        version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerImageConfiguration(_Model):
    """AkriDiscoveryHandler Image configuration properties.

    :ivar image_name: The image name without any registry reference, tag or digest. Required.
    :vartype image_name: str
    :ivar image_pull_policy: The pull policy of the image. Known values are: "Always",
     "IfNotPresent", and "Never".
    :vartype image_pull_policy: str or
     ~azure.mgmt.iotoperations.models.AkriConnectorsImagePullPolicy
    :ivar replicas: The number of replicas to be set up.
    :vartype replicas: int
    :ivar registry_settings: The registry settings for the image. You can omit this field if using
     the default docker hub repository or using a local image.
    :vartype registry_settings: ~azure.mgmt.iotoperations.models.AkriConnectorsRegistrySettings
    :ivar tag_digest_settings: Optional image tag or digest. If not specified, the default tag is
     ``latest``.
    :vartype tag_digest_settings: ~azure.mgmt.iotoperations.models.AkriConnectorsTagDigestSettings
    """

    image_name: str = rest_field(name="imageName", visibility=["read", "create", "update", "delete", "query"])
    """The image name without any registry reference, tag or digest. Required."""
    image_pull_policy: Optional[Union[str, "_models.AkriConnectorsImagePullPolicy"]] = rest_field(
        name="imagePullPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The pull policy of the image. Known values are: \"Always\", \"IfNotPresent\", and \"Never\"."""
    replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The number of replicas to be set up."""
    registry_settings: Optional["_models.AkriConnectorsRegistrySettings"] = rest_field(
        name="registrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The registry settings for the image. You can omit this field if using the default docker hub
     repository or using a local image."""
    tag_digest_settings: Optional["_models.AkriConnectorsTagDigestSettings"] = rest_field(
        name="tagDigestSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional image tag or digest. If not specified, the default tag is ``latest``."""

    @overload
    def __init__(
        self,
        *,
        image_name: str,
        image_pull_policy: Optional[Union[str, "_models.AkriConnectorsImagePullPolicy"]] = None,
        replicas: Optional[int] = None,
        registry_settings: Optional["_models.AkriConnectorsRegistrySettings"] = None,
        tag_digest_settings: Optional["_models.AkriConnectorsTagDigestSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerProperties(_Model):
    """AkriDiscoveryHandler properties.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    :ivar aio_metadata: Metadata about AIO.
    :vartype aio_metadata: ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerAioMetadata
    :ivar additional_configuration: Additional configuration for the AkriDiscoveryHandler.
    :vartype additional_configuration: dict[str, str]
    :ivar diagnostics: Diagnostics settings for the AkriDiscoveryHandler.
    :vartype diagnostics: ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerDiagnostics
    :ivar mode: Mode of the AkriDiscoveryHandler. Known values are: "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar discoverable_device_endpoint_types: Device inbound endpoint types. Required.
    :vartype discoverable_device_endpoint_types:
     list[~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerDiscoverableDeviceEndpointType]
    :ivar mqtt_connection_configuration: Mqtt connection configuration settings.
    :vartype mqtt_connection_configuration:
     ~azure.mgmt.iotoperations.models.AkriConnectorsMqttConnectionConfiguration
    :ivar image_configuration: The image configuration for the AkriDiscoveryHandler. Required.
    :vartype image_configuration:
     ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerImageConfiguration
    :ivar schedule: Schedule for the AkriDiscoveryHandler. Required.
    :vartype schedule: ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerSchedule
    :ivar secrets: Secrets that will be mounted onto discovery handler.
    :vartype secrets: list[~azure.mgmt.iotoperations.models.AkriConnectorsSecret]
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    aio_metadata: Optional["_models.AkriDiscoveryHandlerAioMetadata"] = rest_field(
        name="aioMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata about AIO."""
    additional_configuration: Optional[Dict[str, str]] = rest_field(
        name="additionalConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional configuration for the AkriDiscoveryHandler."""
    diagnostics: Optional["_models.AkriDiscoveryHandlerDiagnostics"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Diagnostics settings for the AkriDiscoveryHandler."""
    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of the AkriDiscoveryHandler. Known values are: \"Enabled\" and \"Disabled\"."""
    discoverable_device_endpoint_types: List["_models.AkriDiscoveryHandlerDiscoverableDeviceEndpointType"] = rest_field(
        name="discoverableDeviceEndpointTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Device inbound endpoint types. Required."""
    mqtt_connection_configuration: Optional["_models.AkriConnectorsMqttConnectionConfiguration"] = rest_field(
        name="mqttConnectionConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mqtt connection configuration settings."""
    image_configuration: "_models.AkriDiscoveryHandlerImageConfiguration" = rest_field(
        name="imageConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image configuration for the AkriDiscoveryHandler. Required."""
    schedule: "_models.AkriDiscoveryHandlerSchedule" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Schedule for the AkriDiscoveryHandler. Required."""
    secrets: Optional[List["_models.AkriConnectorsSecret"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Secrets that will be mounted onto discovery handler."""

    @overload
    def __init__(
        self,
        *,
        discoverable_device_endpoint_types: List["_models.AkriDiscoveryHandlerDiscoverableDeviceEndpointType"],
        image_configuration: "_models.AkriDiscoveryHandlerImageConfiguration",
        schedule: "_models.AkriDiscoveryHandlerSchedule",
        aio_metadata: Optional["_models.AkriDiscoveryHandlerAioMetadata"] = None,
        additional_configuration: Optional[Dict[str, str]] = None,
        diagnostics: Optional["_models.AkriDiscoveryHandlerDiagnostics"] = None,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        mqtt_connection_configuration: Optional["_models.AkriConnectorsMqttConnectionConfiguration"] = None,
        secrets: Optional[List["_models.AkriConnectorsSecret"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerResource(ProxyResource):
    """AkriDiscoveryHandler resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.AkriDiscoveryHandlerProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.AkriDiscoveryHandlerProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerSchedule(_Model):
    """AkriDiscoveryHandlerSchedule properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AkriDiscoveryHandlerScheduleContinuous, AkriDiscoveryHandlerScheduleCron,
    AkriDiscoveryHandlerScheduleRunOnce

    :ivar schedule_type: Schedule type. Required. Known values are: "Cron", "RunOnce", and
     "Continuous".
    :vartype schedule_type: str or
     ~azure.mgmt.iotoperations.models.AkriDiscoveryHandlerScheduleType
    """

    __mapping__: Dict[str, _Model] = {}
    schedule_type: str = rest_discriminator(
        name="scheduleType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schedule type. Required. Known values are: \"Cron\", \"RunOnce\", and \"Continuous\"."""

    @overload
    def __init__(
        self,
        *,
        schedule_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AkriDiscoveryHandlerScheduleContinuous(AkriDiscoveryHandlerSchedule, discriminator="Continuous"):
    """AkriDiscoveryHandlerScheduleContinuous properties.

    :ivar schedule_type: Schedule type. Required. The discovery handler should run continuously.
    :vartype schedule_type: str or ~azure.mgmt.iotoperations.models.CONTINUOUS
    :ivar continuous: The time to run the discovery handler. Required.
    :vartype continuous: str
    """

    schedule_type: Literal[AkriDiscoveryHandlerScheduleType.CONTINUOUS] = rest_discriminator(name="scheduleType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Schedule type. Required. The discovery handler should run continuously."""
    continuous: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The time to run the discovery handler. Required."""

    @overload
    def __init__(
        self,
        *,
        continuous: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, schedule_type=AkriDiscoveryHandlerScheduleType.CONTINUOUS, **kwargs)


class AkriDiscoveryHandlerScheduleCron(AkriDiscoveryHandlerSchedule, discriminator="Cron"):
    """AkriDiscoveryHandlerScheduleCron properties.

    :ivar schedule_type: Schedule type. Required. The schedule is a cron expression.
    :vartype schedule_type: str or ~azure.mgmt.iotoperations.models.CRON
    :ivar cron: The cron expression for the schedule. Required.
    :vartype cron: str
    """

    schedule_type: Literal[AkriDiscoveryHandlerScheduleType.CRON] = rest_discriminator(name="scheduleType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Schedule type. Required. The schedule is a cron expression."""
    cron: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cron expression for the schedule. Required."""

    @overload
    def __init__(
        self,
        *,
        cron: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, schedule_type=AkriDiscoveryHandlerScheduleType.CRON, **kwargs)


class AkriDiscoveryHandlerScheduleRunOnce(AkriDiscoveryHandlerSchedule, discriminator="RunOnce"):
    """AkriDiscoveryHandlerScheduleRunOnce properties.

    :ivar schedule_type: Schedule type. Required. The discovery handler should run once.
    :vartype schedule_type: str or ~azure.mgmt.iotoperations.models.RUN_ONCE
    :ivar run_once: The time to run the discovery handler. Required.
    :vartype run_once: str
    """

    schedule_type: Literal[AkriDiscoveryHandlerScheduleType.RUN_ONCE] = rest_discriminator(name="scheduleType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Schedule type. Required. The discovery handler should run once."""
    run_once: str = rest_field(name="runOnce", visibility=["read", "create", "update", "delete", "query"])
    """The time to run the discovery handler. Required."""

    @overload
    def __init__(
        self,
        *,
        run_once: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, schedule_type=AkriDiscoveryHandlerScheduleType.RUN_ONCE, **kwargs)


class AuthorizationConfig(_Model):
    """Broker AuthorizationConfig properties.

    :ivar cache: Enable caching of the authorization rules. Known values are: "Enabled" and
     "Disabled".
    :vartype cache: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar rules: The authorization rules to follow. If no rule is set, but Authorization Resource
     is used that would mean DenyAll.
    :vartype rules: list[~azure.mgmt.iotoperations.models.AuthorizationRule]
    """

    cache: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable caching of the authorization rules. Known values are: \"Enabled\" and \"Disabled\"."""
    rules: Optional[List["_models.AuthorizationRule"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The authorization rules to follow. If no rule is set, but Authorization Resource is used that
     would mean DenyAll."""

    @overload
    def __init__(
        self,
        *,
        cache: Optional[Union[str, "_models.OperationalMode"]] = None,
        rules: Optional[List["_models.AuthorizationRule"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AuthorizationRule(_Model):
    """AuthorizationConfig Rule Properties.

    :ivar broker_resources: Give access to Broker methods and topics. Required.
    :vartype broker_resources: list[~azure.mgmt.iotoperations.models.BrokerResourceRule]
    :ivar principals: Give access to clients based on the following properties. Required.
    :vartype principals: ~azure.mgmt.iotoperations.models.PrincipalDefinition
    :ivar state_store_resources: Give access to state store resources.
    :vartype state_store_resources: list[~azure.mgmt.iotoperations.models.StateStoreResourceRule]
    """

    broker_resources: List["_models.BrokerResourceRule"] = rest_field(
        name="brokerResources", visibility=["read", "create", "update", "delete", "query"]
    )
    """Give access to Broker methods and topics. Required."""
    principals: "_models.PrincipalDefinition" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Give access to clients based on the following properties. Required."""
    state_store_resources: Optional[List["_models.StateStoreResourceRule"]] = rest_field(
        name="stateStoreResources", visibility=["read", "create", "update", "delete", "query"]
    )
    """Give access to state store resources."""

    @overload
    def __init__(
        self,
        *,
        broker_resources: List["_models.BrokerResourceRule"],
        principals: "_models.PrincipalDefinition",
        state_store_resources: Optional[List["_models.StateStoreResourceRule"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureDeviceRegistryNamespaceRef(_Model):
    """Azure Device Registry Namespace reference.

    :ivar resource_id: The resource ID of the Azure Device Registry Namespace. Required.
    :vartype resource_id: str
    """

    resource_id: str = rest_field(name="resourceId", visibility=["read", "create", "update", "delete", "query"])
    """The resource ID of the Azure Device Registry Namespace. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BackendChain(_Model):
    """Desired properties of the backend instances of the broker.

    :ivar partitions: The desired number of physical backend partitions. Required.
    :vartype partitions: int
    :ivar redundancy_factor: The desired numbers of backend replicas (pods) in a physical
     partition. Required.
    :vartype redundancy_factor: int
    :ivar workers: Number of logical backend workers per replica (pod).
    :vartype workers: int
    """

    partitions: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The desired number of physical backend partitions. Required."""
    redundancy_factor: int = rest_field(
        name="redundancyFactor", visibility=["read", "create", "update", "delete", "query"]
    )
    """The desired numbers of backend replicas (pods) in a physical partition. Required."""
    workers: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Number of logical backend workers per replica (pod)."""

    @overload
    def __init__(
        self,
        *,
        partitions: int,
        redundancy_factor: int,
        workers: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BatchingConfiguration(_Model):
    """Batching configuration.

    :ivar latency_seconds: Batching latency in seconds.
    :vartype latency_seconds: int
    :ivar max_messages: Maximum number of messages in a batch.
    :vartype max_messages: int
    """

    latency_seconds: Optional[int] = rest_field(
        name="latencySeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Batching latency in seconds."""
    max_messages: Optional[int] = rest_field(
        name="maxMessages", visibility=["read", "create", "update", "delete", "query"]
    )
    """Maximum number of messages in a batch."""

    @overload
    def __init__(
        self,
        *,
        latency_seconds: Optional[int] = None,
        max_messages: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticationProperties(_Model):
    """BrokerAuthentication Resource properties.

    :ivar authentication_methods: Defines a set of Broker authentication methods to be used on
     ``BrokerListeners``. For each array element one authenticator type supported. Required.
    :vartype authentication_methods:
     list[~azure.mgmt.iotoperations.models.BrokerAuthenticatorMethods]
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    authentication_methods: List["_models.BrokerAuthenticatorMethods"] = rest_field(
        name="authenticationMethods", visibility=["read", "create", "update", "delete", "query"]
    )
    """Defines a set of Broker authentication methods to be used on ``BrokerListeners``. For each
     array element one authenticator type supported. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        authentication_methods: List["_models.BrokerAuthenticatorMethods"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticationResource(ProxyResource):
    """Instance broker authentication resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.BrokerAuthenticationProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.BrokerAuthenticationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.BrokerAuthenticationProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorCustomAuth(_Model):
    """Custom Authentication properties.

    :ivar x509: X509 Custom Auth type details. Required.
    :vartype x509: ~azure.mgmt.iotoperations.models.X509ManualCertificate
    """

    x509: "_models.X509ManualCertificate" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """X509 Custom Auth type details. Required."""

    @overload
    def __init__(
        self,
        *,
        x509: "_models.X509ManualCertificate",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorMethodCustom(_Model):
    """Custom method for BrokerAuthentication.

    :ivar auth: Optional authentication needed for authenticating with the custom authentication
     server.
    :vartype auth: ~azure.mgmt.iotoperations.models.BrokerAuthenticatorCustomAuth
    :ivar ca_cert_config_map: Optional CA certificate for validating the custom authentication
     server's certificate.
    :vartype ca_cert_config_map: str
    :ivar endpoint: Endpoint of the custom authentication server. Must be an HTTPS endpoint.
     Required.
    :vartype endpoint: str
    :ivar headers: Additional HTTP headers to pass to the custom authentication server.
    :vartype headers: dict[str, str]
    """

    auth: Optional["_models.BrokerAuthenticatorCustomAuth"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional authentication needed for authenticating with the custom authentication server."""
    ca_cert_config_map: Optional[str] = rest_field(
        name="caCertConfigMap", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional CA certificate for validating the custom authentication server's certificate."""
    endpoint: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Endpoint of the custom authentication server. Must be an HTTPS endpoint. Required."""
    headers: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Additional HTTP headers to pass to the custom authentication server."""

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        auth: Optional["_models.BrokerAuthenticatorCustomAuth"] = None,
        ca_cert_config_map: Optional[str] = None,
        headers: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorMethods(_Model):
    """Set of broker authentication policies. Only one method is supported for each entry.

    :ivar method: Custom authentication configuration. Required. Known values are: "Custom",
     "ServiceAccountToken", and "X509".
    :vartype method: str or ~azure.mgmt.iotoperations.models.BrokerAuthenticationMethod
    :ivar custom_settings: Custom authentication configuration.
    :vartype custom_settings: ~azure.mgmt.iotoperations.models.BrokerAuthenticatorMethodCustom
    :ivar service_account_token_settings: ServiceAccountToken authentication configuration.
    :vartype service_account_token_settings:
     ~azure.mgmt.iotoperations.models.BrokerAuthenticatorMethodSat
    :ivar x509_settings: X.509 authentication configuration.
    :vartype x509_settings: ~azure.mgmt.iotoperations.models.BrokerAuthenticatorMethodX509
    """

    method: Union[str, "_models.BrokerAuthenticationMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Custom authentication configuration. Required. Known values are: \"Custom\",
     \"ServiceAccountToken\", and \"X509\"."""
    custom_settings: Optional["_models.BrokerAuthenticatorMethodCustom"] = rest_field(
        name="customSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Custom authentication configuration."""
    service_account_token_settings: Optional["_models.BrokerAuthenticatorMethodSat"] = rest_field(
        name="serviceAccountTokenSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """ServiceAccountToken authentication configuration."""
    x509_settings: Optional["_models.BrokerAuthenticatorMethodX509"] = rest_field(
        name="x509Settings", visibility=["read", "create", "update", "delete", "query"]
    )
    """X.509 authentication configuration."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.BrokerAuthenticationMethod"],
        custom_settings: Optional["_models.BrokerAuthenticatorMethodCustom"] = None,
        service_account_token_settings: Optional["_models.BrokerAuthenticatorMethodSat"] = None,
        x509_settings: Optional["_models.BrokerAuthenticatorMethodX509"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorMethodSat(_Model):
    """Service Account Token for BrokerAuthentication.

    :ivar audiences: List of allowed audience. Required.
    :vartype audiences: list[str]
    """

    audiences: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of allowed audience. Required."""

    @overload
    def __init__(
        self,
        *,
        audiences: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorMethodX509(_Model):
    """X509 for BrokerAuthentication.

    :ivar authorization_attributes: X509 authorization attributes properties.
    :vartype authorization_attributes: dict[str,
     ~azure.mgmt.iotoperations.models.BrokerAuthenticatorMethodX509Attributes]
    :ivar trusted_client_ca_cert: Name of the trusted client ca cert resource.
    :vartype trusted_client_ca_cert: str
    :ivar additional_validation: X509 authentication attributes properties. Known values are:
     "None" and "AzureDeviceRegistry".
    :vartype additional_validation: str or
     ~azure.mgmt.iotoperations.models.BrokerAuthenticatorValidationMethods
    """

    authorization_attributes: Optional[Dict[str, "_models.BrokerAuthenticatorMethodX509Attributes"]] = rest_field(
        name="authorizationAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """X509 authorization attributes properties."""
    trusted_client_ca_cert: Optional[str] = rest_field(
        name="trustedClientCaCert", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the trusted client ca cert resource."""
    additional_validation: Optional[Union[str, "_models.BrokerAuthenticatorValidationMethods"]] = rest_field(
        name="additionalValidation", visibility=["read", "create", "update", "delete", "query"]
    )
    """X509 authentication attributes properties. Known values are: \"None\" and
     \"AzureDeviceRegistry\"."""

    @overload
    def __init__(
        self,
        *,
        authorization_attributes: Optional[Dict[str, "_models.BrokerAuthenticatorMethodX509Attributes"]] = None,
        trusted_client_ca_cert: Optional[str] = None,
        additional_validation: Optional[Union[str, "_models.BrokerAuthenticatorValidationMethods"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthenticatorMethodX509Attributes(_Model):
    """BrokerAuthenticatorMethodX509Attributes properties.

    :ivar attributes: Attributes object. Required.
    :vartype attributes: dict[str, str]
    :ivar subject: Subject of the X509 attribute. Required.
    :vartype subject: str
    """

    attributes: Dict[str, str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Attributes object. Required."""
    subject: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Subject of the X509 attribute. Required."""

    @overload
    def __init__(
        self,
        *,
        attributes: Dict[str, str],
        subject: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthorizationProperties(_Model):
    """BrokerAuthorization Resource properties.

    :ivar authorization_policies: The list of authorization policies supported by the Authorization
     Resource. Required.
    :vartype authorization_policies: ~azure.mgmt.iotoperations.models.AuthorizationConfig
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    authorization_policies: "_models.AuthorizationConfig" = rest_field(
        name="authorizationPolicies", visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of authorization policies supported by the Authorization Resource. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        authorization_policies: "_models.AuthorizationConfig",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerAuthorizationResource(ProxyResource):
    """Instance broker authorizations resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.BrokerAuthorizationProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.BrokerAuthorizationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.BrokerAuthorizationProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerDiagnostics(_Model):
    """Broker Diagnostic Setting properties.

    :ivar logs: Diagnostic log settings for the resource.
    :vartype logs: ~azure.mgmt.iotoperations.models.DiagnosticsLogs
    :ivar metrics: The metrics settings for the resource.
    :vartype metrics: ~azure.mgmt.iotoperations.models.Metrics
    :ivar self_check: The self check properties.
    :vartype self_check: ~azure.mgmt.iotoperations.models.SelfCheck
    :ivar traces: The trace properties.
    :vartype traces: ~azure.mgmt.iotoperations.models.Traces
    """

    logs: Optional["_models.DiagnosticsLogs"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Diagnostic log settings for the resource."""
    metrics: Optional["_models.Metrics"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metrics settings for the resource."""
    self_check: Optional["_models.SelfCheck"] = rest_field(
        name="selfCheck", visibility=["read", "create", "update", "delete", "query"]
    )
    """The self check properties."""
    traces: Optional["_models.Traces"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The trace properties."""

    @overload
    def __init__(
        self,
        *,
        logs: Optional["_models.DiagnosticsLogs"] = None,
        metrics: Optional["_models.Metrics"] = None,
        self_check: Optional["_models.SelfCheck"] = None,
        traces: Optional["_models.Traces"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerListenerProperties(_Model):
    """Defines a Broker listener. A listener is a collection of ports on which the broker accepts
    connections from clients.

    :ivar service_name: Kubernetes Service name of this listener.
    :vartype service_name: str
    :ivar ports: Ports on which this listener accepts client connections. Required.
    :vartype ports: list[~azure.mgmt.iotoperations.models.ListenerPort]
    :ivar service_type: Kubernetes Service type of this listener. Known values are: "ClusterIp",
     "LoadBalancer", and "NodePort".
    :vartype service_type: str or ~azure.mgmt.iotoperations.models.ServiceType
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    service_name: Optional[str] = rest_field(
        name="serviceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes Service name of this listener."""
    ports: List["_models.ListenerPort"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Ports on which this listener accepts client connections. Required."""
    service_type: Optional[Union[str, "_models.ServiceType"]] = rest_field(
        name="serviceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes Service type of this listener. Known values are: \"ClusterIp\", \"LoadBalancer\",
     and \"NodePort\"."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        ports: List["_models.ListenerPort"],
        service_name: Optional[str] = None,
        service_type: Optional[Union[str, "_models.ServiceType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerListenerResource(ProxyResource):
    """Instance broker resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.BrokerListenerProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.BrokerListenerProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.BrokerListenerProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerPersistence(_Model):
    """Disk persistence configuration.

    When persistence is enabled, certain items (non-performance-critical data) selected for
    persistence will reside only on disk. Below are the affected items:



    * Retained messages will be stored on disk only.
    * WILL messages will be stored on disk only.
    * DSS key/value pairs will be stored on disk only, except for performance-critical items like
    timed locks, which remain in both disk and memory for improved performance.

    Optional. Everything is in-memory if not set.
    Note: if configured, all MQTT session states are written to disk.

    :ivar dynamic_settings: Client sets the specified user property key/value in the
     CONNECT/SUBSCRIBE/PUBLISH.
     Optionally, if the customer specifies a configurable user property, it will work to enable
     persistence dynamically. The default user property key is 'aio-persistence' and value 'true'.
    :vartype dynamic_settings: ~azure.mgmt.iotoperations.models.BrokerPersistenceDynamicSettings
    :ivar max_size: The max size of the message buffer on disk. If a PVC template is specified
     using persistentVolumeClaimSpec Then this size is used as the request and limit sizes of that
     template. If a PVC template isn't specified Then local-path provisioner is requested with this
     size limit. Required. Required.
    :vartype max_size: str
    :ivar persistent_volume_claim_spec: Use the specified persistent volume claim template to mount
     a persistent volume. Same object as in diskBackedMessageBuffer, but with a limitation that
     access modes field must be set to ``ReadWriteOncePod``.

     If unset, a default PVC with default properties will be used. Among other things this PVC will
     use the cluster default storage class, which may or may not be using a local path provisioner.
     User is opting in to sub-optimal behavior if they leave this unset or set it without the
     storage class field, and their cluster default is not a local path class.
    :vartype persistent_volume_claim_spec: ~azure.mgmt.iotoperations.models.VolumeClaimSpec
    :ivar retain: Controls which topic's retained messages should be persisted to disk.
    :vartype retain: ~azure.mgmt.iotoperations.models.BrokerRetainMessagesPolicy
    :ivar state_store: Controls which keys should be persisted to disk for the state store.
    :vartype state_store: ~azure.mgmt.iotoperations.models.BrokerStateStorePolicy
    :ivar subscriber_queue: Controls which subscriber message queues should be persisted to disk.
     Important: to facilitate reconnection, session state metadata are ALWAYS written to disk if any
     persistence setting is specified, even if this section isn't set.
    :vartype subscriber_queue: ~azure.mgmt.iotoperations.models.BrokerSubscriberQueuePolicy
    :ivar encryption: Controls settings related to encryption of the persistence database.
     Optional, defaults to enabling encryption.
    :vartype encryption: ~azure.mgmt.iotoperations.models.BrokerPersistenceEncryption
    """

    dynamic_settings: Optional["_models.BrokerPersistenceDynamicSettings"] = rest_field(
        name="dynamicSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Client sets the specified user property key/value in the CONNECT/SUBSCRIBE/PUBLISH.
     Optionally, if the customer specifies a configurable user property, it will work to enable
     persistence dynamically. The default user property key is 'aio-persistence' and value 'true'."""
    max_size: str = rest_field(name="maxSize", visibility=["read", "create"])
    """The max size of the message buffer on disk. If a PVC template is specified using
     persistentVolumeClaimSpec Then this size is used as the request and limit sizes of that
     template. If a PVC template isn't specified Then local-path provisioner is requested with this
     size limit. Required. Required."""
    persistent_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = rest_field(
        name="persistentVolumeClaimSpec", visibility=["read", "create"]
    )
    """Use the specified persistent volume claim template to mount a persistent volume. Same object as
     in diskBackedMessageBuffer, but with a limitation that access modes field must be set to
     ``ReadWriteOncePod``.
     
     If unset, a default PVC with default properties will be used. Among other things this PVC will
     use the cluster default storage class, which may or may not be using a local path provisioner.
     User is opting in to sub-optimal behavior if they leave this unset or set it without the
     storage class field, and their cluster default is not a local path class."""
    retain: Optional["_models.BrokerRetainMessagesPolicy"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls which topic's retained messages should be persisted to disk."""
    state_store: Optional["_models.BrokerStateStorePolicy"] = rest_field(
        name="stateStore", visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls which keys should be persisted to disk for the state store."""
    subscriber_queue: Optional["_models.BrokerSubscriberQueuePolicy"] = rest_field(
        name="subscriberQueue", visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls which subscriber message queues should be persisted to disk. Important: to facilitate
     reconnection, session state metadata are ALWAYS written to disk if any persistence setting is
     specified, even if this section isn't set."""
    encryption: Optional["_models.BrokerPersistenceEncryption"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls settings related to encryption of the persistence database. Optional, defaults to
     enabling encryption."""

    @overload
    def __init__(
        self,
        *,
        max_size: str,
        dynamic_settings: Optional["_models.BrokerPersistenceDynamicSettings"] = None,
        persistent_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = None,
        retain: Optional["_models.BrokerRetainMessagesPolicy"] = None,
        state_store: Optional["_models.BrokerStateStorePolicy"] = None,
        subscriber_queue: Optional["_models.BrokerSubscriberQueuePolicy"] = None,
        encryption: Optional["_models.BrokerPersistenceEncryption"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerPersistenceDynamicSettings(_Model):
    """Dynamic settings of the persistence.

    :ivar user_property_key: The user property key to enable persistence. Required.
    :vartype user_property_key: str
    :ivar user_property_value: The user property value to enable persistence. Required.
    :vartype user_property_value: str
    """

    user_property_key: str = rest_field(
        name="userPropertyKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """The user property key to enable persistence. Required."""
    user_property_value: str = rest_field(
        name="userPropertyValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """The user property value to enable persistence. Required."""

    @overload
    def __init__(
        self,
        *,
        user_property_key: str,
        user_property_value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerPersistenceEncryption(_Model):
    """Broker Persistence Encryption properties.

    :ivar mode: Determines if encryption is enabled. Required. Known values are: "Enabled" and
     "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    """

    mode: Union[str, "_models.OperationalMode"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Determines if encryption is enabled. Required. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.OperationalMode"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerProperties(_Model):
    """Broker Resource properties.

    :ivar advanced: Advanced settings of Broker.
    :vartype advanced: ~azure.mgmt.iotoperations.models.AdvancedSettings
    :ivar cardinality: The cardinality details of the broker.
    :vartype cardinality: ~azure.mgmt.iotoperations.models.Cardinality
    :ivar diagnostics: Spec defines the desired identities of Broker diagnostics settings.
    :vartype diagnostics: ~azure.mgmt.iotoperations.models.BrokerDiagnostics
    :ivar disk_backed_message_buffer: Settings of Disk Backed Message Buffer.
    :vartype disk_backed_message_buffer: ~azure.mgmt.iotoperations.models.DiskBackedMessageBuffer
    :ivar generate_resource_limits: This setting controls whether Kubernetes CPU resource limits
     are requested. Increasing the number of replicas or workers proportionally increases the amount
     of CPU resources requested. If this setting is enabled and there are insufficient CPU
     resources, an error will be emitted.
    :vartype generate_resource_limits: ~azure.mgmt.iotoperations.models.GenerateResourceLimits
    :ivar memory_profile: Memory profile of Broker. Known values are: "Tiny", "Low", "Medium", and
     "High".
    :vartype memory_profile: str or ~azure.mgmt.iotoperations.models.BrokerMemoryProfile
    :ivar persistence: The persistence settings of the Broker.
    :vartype persistence: ~azure.mgmt.iotoperations.models.BrokerPersistence
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    advanced: Optional["_models.AdvancedSettings"] = rest_field(visibility=["read", "create"])
    """Advanced settings of Broker."""
    cardinality: Optional["_models.Cardinality"] = rest_field(visibility=["read", "create"])
    """The cardinality details of the broker."""
    diagnostics: Optional["_models.BrokerDiagnostics"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Spec defines the desired identities of Broker diagnostics settings."""
    disk_backed_message_buffer: Optional["_models.DiskBackedMessageBuffer"] = rest_field(
        name="diskBackedMessageBuffer", visibility=["read", "create"]
    )
    """Settings of Disk Backed Message Buffer."""
    generate_resource_limits: Optional["_models.GenerateResourceLimits"] = rest_field(
        name="generateResourceLimits", visibility=["read", "create"]
    )
    """This setting controls whether Kubernetes CPU resource limits are requested. Increasing the
     number of replicas or workers proportionally increases the amount of CPU resources requested.
     If this setting is enabled and there are insufficient CPU resources, an error will be emitted."""
    memory_profile: Optional[Union[str, "_models.BrokerMemoryProfile"]] = rest_field(
        name="memoryProfile", visibility=["read", "create"]
    )
    """Memory profile of Broker. Known values are: \"Tiny\", \"Low\", \"Medium\", and \"High\"."""
    persistence: Optional["_models.BrokerPersistence"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The persistence settings of the Broker."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        advanced: Optional["_models.AdvancedSettings"] = None,
        cardinality: Optional["_models.Cardinality"] = None,
        diagnostics: Optional["_models.BrokerDiagnostics"] = None,
        disk_backed_message_buffer: Optional["_models.DiskBackedMessageBuffer"] = None,
        generate_resource_limits: Optional["_models.GenerateResourceLimits"] = None,
        memory_profile: Optional[Union[str, "_models.BrokerMemoryProfile"]] = None,
        persistence: Optional["_models.BrokerPersistence"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerResource(ProxyResource):
    """Instance broker resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.BrokerProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.BrokerProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.BrokerProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerResourceRule(_Model):
    """Broker Resource Rule properties. This defines the objects that represent the actions or topics,
    such as - method.Connect, method.Publish, etc.

    :ivar method: Give access for a Broker method (i.e., Connect, Subscribe, or Publish). Required.
     Known values are: "Connect", "Publish", and "Subscribe".
    :vartype method: str or ~azure.mgmt.iotoperations.models.BrokerResourceDefinitionMethods
    :ivar client_ids: A list of client IDs that match the clients. The client IDs are
     case-sensitive and must match the client IDs provided by the clients during connection. This
     subfield may be set if the method is Connect.
    :vartype client_ids: list[str]
    :ivar topics: A list of topics or topic patterns that match the topics that the clients can
     publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
    :vartype topics: list[str]
    """

    method: Union[str, "_models.BrokerResourceDefinitionMethods"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Give access for a Broker method (i.e., Connect, Subscribe, or Publish). Required. Known values
     are: \"Connect\", \"Publish\", and \"Subscribe\"."""
    client_ids: Optional[List[str]] = rest_field(
        name="clientIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of client IDs that match the clients. The client IDs are case-sensitive and must match
     the client IDs provided by the clients during connection. This subfield may be set if the
     method is Connect."""
    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of topics or topic patterns that match the topics that the clients can publish or
     subscribe to. This subfield is required if the method is Publish or Subscribe."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.BrokerResourceDefinitionMethods"],
        client_ids: Optional[List[str]] = None,
        topics: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerRetainMessagesPolicy(_Model):
    """Broker Retain policy properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BrokerRetainMessagesCustomPolicy

    :ivar mode: 'All' to persist all retain messages, 'None' to not persist any, 'Custom' to
     persist only the specified topics. Required. Known values are: "All", "None", and "Custom".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.BrokerPersistencePolicyMode
    """

    __mapping__: Dict[str, _Model] = {}
    mode: str = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])
    """'All' to persist all retain messages, 'None' to not persist any, 'Custom' to persist only the
     specified topics. Required. Known values are: \"All\", \"None\", and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        mode: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerRetainMessagesCustomPolicy(BrokerRetainMessagesPolicy, discriminator="Custom"):
    """Custom Broker Retain Message Policy.

    :ivar mode: The mode of the policy. Required. Indicates that the policy is a custom policy.
    :vartype mode: str or ~azure.mgmt.iotoperations.models.CUSTOM
    :ivar retain_settings: Settings for the policy. Required.
    :vartype retain_settings: ~azure.mgmt.iotoperations.models.BrokerRetainMessagesSettings
    """

    mode: Literal[BrokerPersistencePolicyMode.CUSTOM] = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The mode of the policy. Required. Indicates that the policy is a custom policy."""
    retain_settings: "_models.BrokerRetainMessagesSettings" = rest_field(
        name="retainSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for the policy. Required."""

    @overload
    def __init__(
        self,
        *,
        retain_settings: "_models.BrokerRetainMessagesSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, mode=BrokerPersistencePolicyMode.CUSTOM, **kwargs)


class BrokerRetainMessagesDynamic(_Model):
    """Dynamic settings of BrokerRetainMessagesCustomPolicy.

    :ivar mode: Mode of the BrokerRetainMessagesCustomPolicy. Required. Known values are: "Enabled"
     and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    """

    mode: Union[str, "_models.OperationalMode"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Mode of the BrokerRetainMessagesCustomPolicy. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.OperationalMode"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerRetainMessagesSettings(_Model):
    """Broker Retain Messages properties.

    :ivar topics: List of topics under which retained messages would be persisted to disk.
     Wildcards # and + supported.
    :vartype topics: list[str]
    :ivar dynamic: Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user
     property. Works in addition to other groups (logical OR).
    :vartype dynamic: ~azure.mgmt.iotoperations.models.BrokerRetainMessagesDynamic
    """

    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of topics under which retained messages would be persisted to disk. Wildcards # and +
     supported."""
    dynamic: Optional["_models.BrokerRetainMessagesDynamic"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user property. Works
     in addition to other groups (logical OR)."""

    @overload
    def __init__(
        self,
        *,
        topics: Optional[List[str]] = None,
        dynamic: Optional["_models.BrokerRetainMessagesDynamic"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerStateStorePolicy(_Model):
    """Broker State Store Policy.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BrokerStateStoreCustomPolicy

    :ivar mode: 'All' to persist all keys, 'None' to not persist any, 'Custom' to persist only the
     specified keys. Required. Known values are: "All", "None", and "Custom".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.BrokerPersistencePolicyMode
    """

    __mapping__: Dict[str, _Model] = {}
    mode: str = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])
    """'All' to persist all keys, 'None' to not persist any, 'Custom' to persist only the specified
     keys. Required. Known values are: \"All\", \"None\", and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        mode: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerStateStoreCustomPolicy(BrokerStateStorePolicy, discriminator="Custom"):
    """Broker State Store Custom Policy.

    :ivar mode: The mode of the policy. Required. Indicates that the policy is a custom policy.
    :vartype mode: str or ~azure.mgmt.iotoperations.models.CUSTOM
    :ivar state_store_settings: Settings for the policy. Required.
    :vartype state_store_settings: ~azure.mgmt.iotoperations.models.BrokerStateStorePolicySettings
    """

    mode: Literal[BrokerPersistencePolicyMode.CUSTOM] = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The mode of the policy. Required. Indicates that the policy is a custom policy."""
    state_store_settings: "_models.BrokerStateStorePolicySettings" = rest_field(
        name="stateStoreSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for the policy. Required."""

    @overload
    def __init__(
        self,
        *,
        state_store_settings: "_models.BrokerStateStorePolicySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, mode=BrokerPersistencePolicyMode.CUSTOM, **kwargs)


class BrokerStateStoreDynamic(_Model):
    """Dynamic settings of BrokerStateStoreCustomPolicy.

    :ivar mode: Mode of the BrokerStateStoreCustomPolicy. Required. Known values are: "Enabled" and
     "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    """

    mode: Union[str, "_models.OperationalMode"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Mode of the BrokerStateStoreCustomPolicy. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.OperationalMode"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerStateStorePolicyResources(_Model):
    """Broker State Store Policy Resources properties.

    :ivar key_type: The key to persist to disk. Required. Known values are: "Pattern", "String",
     and "Binary".
    :vartype key_type: str or ~azure.mgmt.iotoperations.models.BrokerStateStoreKeyType
    :ivar keys_property: List of keys to persist to disk, required. Required.
    :vartype keys_property: list[str]
    """

    key_type: Union[str, "_models.BrokerStateStoreKeyType"] = rest_field(
        name="keyType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The key to persist to disk. Required. Known values are: \"Pattern\", \"String\", and
     \"Binary\"."""
    keys_property: List[str] = rest_field(name="keys", visibility=["read", "create", "update", "delete", "query"])
    """List of keys to persist to disk, required. Required."""

    @overload
    def __init__(
        self,
        *,
        key_type: Union[str, "_models.BrokerStateStoreKeyType"],
        keys_property: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerStateStorePolicySettings(_Model):
    """Broker State Store Custom Policy Settings.

    :ivar state_store_resources: List of key and key type to persist to disk.
    :vartype state_store_resources:
     list[~azure.mgmt.iotoperations.models.BrokerStateStorePolicyResources]
    :ivar dynamic: Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user
     property. Works in addition to other groups (logical OR).
    :vartype dynamic: ~azure.mgmt.iotoperations.models.BrokerStateStoreDynamic
    """

    state_store_resources: Optional[List["_models.BrokerStateStorePolicyResources"]] = rest_field(
        name="stateStoreResources", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of key and key type to persist to disk."""
    dynamic: Optional["_models.BrokerStateStoreDynamic"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user property. Works
     in addition to other groups (logical OR)."""

    @overload
    def __init__(
        self,
        *,
        state_store_resources: Optional[List["_models.BrokerStateStorePolicyResources"]] = None,
        dynamic: Optional["_models.BrokerStateStoreDynamic"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerSubscriberQueuePolicy(_Model):
    """Broker Subscriber Queue Policy properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BrokerSubscriberQueueCustomPolicy

    :ivar mode: 'All' to persist all subscriber queues, 'None' to not persist any, 'Custom' to
     persist only the specified queues. Required. Known values are: "All", "None", and "Custom".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.BrokerPersistencePolicyMode
    """

    __mapping__: Dict[str, _Model] = {}
    mode: str = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])
    """'All' to persist all subscriber queues, 'None' to not persist any, 'Custom' to persist only the
     specified queues. Required. Known values are: \"All\", \"None\", and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        mode: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerSubscriberQueueCustomPolicy(BrokerSubscriberQueuePolicy, discriminator="Custom"):
    """Custom Subscriber Queue Policy Properties.

    :ivar mode: The mode of the policy. Required. Indicates that the policy is a custom policy.
    :vartype mode: str or ~azure.mgmt.iotoperations.models.CUSTOM
    :ivar subscriber_queue_settings: Custom policy, required if mode is Custom. Subscriber queues
     from all groups are persisted to disk (logical OR). Required.
    :vartype subscriber_queue_settings:
     ~azure.mgmt.iotoperations.models.BrokerSubscriberQueueCustomPolicySettings
    """

    mode: Literal[BrokerPersistencePolicyMode.CUSTOM] = rest_discriminator(name="mode", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The mode of the policy. Required. Indicates that the policy is a custom policy."""
    subscriber_queue_settings: "_models.BrokerSubscriberQueueCustomPolicySettings" = rest_field(
        name="subscriberQueueSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Custom policy, required if mode is Custom. Subscriber queues from all groups are persisted to
     disk (logical OR). Required."""

    @overload
    def __init__(
        self,
        *,
        subscriber_queue_settings: "_models.BrokerSubscriberQueueCustomPolicySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, mode=BrokerPersistencePolicyMode.CUSTOM, **kwargs)


class BrokerSubscriberQueueCustomPolicySettings(_Model):  # pylint: disable=name-too-long
    """Broker Subscriber Queue Custom Policy properties.

    :ivar subscriber_client_ids: List of client IDs of the subscribers, wildcard * supported.
    :vartype subscriber_client_ids: list[str]
    :ivar dynamic: Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user
     property. Works in addition to other groups (logical OR).
    :vartype dynamic: ~azure.mgmt.iotoperations.models.BrokerSubscriberQueueDynamic
    :ivar topics: List of topics under which messages would be persisted to disk for each
     subscriber. Wildcards # and + supported.
    :vartype topics: list[str]
    """

    subscriber_client_ids: Optional[List[str]] = rest_field(
        name="subscriberClientIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of client IDs of the subscribers, wildcard * supported."""
    dynamic: Optional["_models.BrokerSubscriberQueueDynamic"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Controls if MQTT clients can request for disk persistence via ``MQTTv5`` user property. Works
     in addition to other groups (logical OR)."""
    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of topics under which messages would be persisted to disk for each subscriber. Wildcards #
     and + supported."""

    @overload
    def __init__(
        self,
        *,
        subscriber_client_ids: Optional[List[str]] = None,
        dynamic: Optional["_models.BrokerSubscriberQueueDynamic"] = None,
        topics: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrokerSubscriberQueueDynamic(_Model):
    """Dynamic settings of BrokerSubscriberQueueCustomPolicy.

    :ivar mode: Mode of the BrokerSubscriberQueueCustomPolicy. Required. Known values are:
     "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    """

    mode: Union[str, "_models.OperationalMode"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Mode of the BrokerSubscriberQueueCustomPolicy. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.OperationalMode"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Cardinality(_Model):
    """Cardinality properties.

    :ivar backend_chain: The backend broker desired properties. Required.
    :vartype backend_chain: ~azure.mgmt.iotoperations.models.BackendChain
    :ivar frontend: The frontend desired properties. Required.
    :vartype frontend: ~azure.mgmt.iotoperations.models.Frontend
    """

    backend_chain: "_models.BackendChain" = rest_field(
        name="backendChain", visibility=["read", "create", "update", "delete", "query"]
    )
    """The backend broker desired properties. Required."""
    frontend: "_models.Frontend" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The frontend desired properties. Required."""

    @overload
    def __init__(
        self,
        *,
        backend_chain: "_models.BackendChain",
        frontend: "_models.Frontend",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CertManagerCertificateSpec(_Model):
    """Automatic TLS server certificate management with cert-manager.

    :ivar duration: Lifetime of certificate. Must be specified using a Go time.Duration format
     (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
    :vartype duration: str
    :ivar secret_name: Secret for storing server certificate. Any existing data will be
     overwritten. This is a reference to the secret through an identifying name, not the secret
     itself.
    :vartype secret_name: str
    :ivar renew_before: When to begin renewing certificate. Must be specified using a Go
     time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
    :vartype renew_before: str
    :ivar issuer_ref: cert-manager issuerRef. Required.
    :vartype issuer_ref: ~azure.mgmt.iotoperations.models.CertManagerIssuerRef
    :ivar private_key: Type of certificate private key.
    :vartype private_key: ~azure.mgmt.iotoperations.models.CertManagerPrivateKey
    :ivar san: Additional Subject Alternative Names (SANs) to include in the certificate.
    :vartype san: ~azure.mgmt.iotoperations.models.SanForCert
    """

    duration: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h
     for 240 hours and 45m for 45 minutes."""
    secret_name: Optional[str] = rest_field(
        name="secretName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Secret for storing server certificate. Any existing data will be overwritten. This is a
     reference to the secret through an identifying name, not the secret itself."""
    renew_before: Optional[str] = rest_field(
        name="renewBefore", visibility=["read", "create", "update", "delete", "query"]
    )
    """When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s).
     E.g. 240h for 240 hours and 45m for 45 minutes."""
    issuer_ref: "_models.CertManagerIssuerRef" = rest_field(
        name="issuerRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """cert-manager issuerRef. Required."""
    private_key: Optional["_models.CertManagerPrivateKey"] = rest_field(
        name="privateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of certificate private key."""
    san: Optional["_models.SanForCert"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Additional Subject Alternative Names (SANs) to include in the certificate."""

    @overload
    def __init__(
        self,
        *,
        issuer_ref: "_models.CertManagerIssuerRef",
        duration: Optional[str] = None,
        secret_name: Optional[str] = None,
        renew_before: Optional[str] = None,
        private_key: Optional["_models.CertManagerPrivateKey"] = None,
        san: Optional["_models.SanForCert"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CertManagerCertOptions(_Model):
    """Cert Manager Cert properties.

    :ivar duration: Lifetime of certificate. Must be specified using a Go time.Duration format
     (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. Required.
    :vartype duration: str
    :ivar renew_before: When to begin renewing certificate. Must be specified using a Go
     time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes. Required.
    :vartype renew_before: str
    :ivar private_key: Configuration of certificate private key. Required.
    :vartype private_key: ~azure.mgmt.iotoperations.models.CertManagerPrivateKey
    """

    duration: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h
     for 240 hours and 45m for 45 minutes. Required."""
    renew_before: str = rest_field(name="renewBefore", visibility=["read", "create", "update", "delete", "query"])
    """When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s).
     E.g. 240h for 240 hours and 45m for 45 minutes. Required."""
    private_key: "_models.CertManagerPrivateKey" = rest_field(
        name="privateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration of certificate private key. Required."""

    @overload
    def __init__(
        self,
        *,
        duration: str,
        renew_before: str,
        private_key: "_models.CertManagerPrivateKey",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CertManagerIssuerRef(_Model):
    """Cert-Manager issuerRef properties.

    :ivar group: group of issuer. Required.
    :vartype group: str
    :ivar kind: kind of issuer (Issuer or ClusterIssuer). Required. Known values are: "Issuer" and
     "ClusterIssuer".
    :vartype kind: str or ~azure.mgmt.iotoperations.models.CertManagerIssuerKind
    :ivar name: name of issuer. Required.
    :vartype name: str
    """

    group: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """group of issuer. Required."""
    kind: Union[str, "_models.CertManagerIssuerKind"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """kind of issuer (Issuer or ClusterIssuer). Required. Known values are: \"Issuer\" and
     \"ClusterIssuer\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """name of issuer. Required."""

    @overload
    def __init__(
        self,
        *,
        group: str,
        kind: Union[str, "_models.CertManagerIssuerKind"],
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CertManagerPrivateKey(_Model):
    """Cert Manager private key properties.

    :ivar algorithm: algorithm for private key. Required. Known values are: "Ec256", "Ec384",
     "Ec521", "Ed25519", "Rsa2048", "Rsa4096", and "Rsa8192".
    :vartype algorithm: str or ~azure.mgmt.iotoperations.models.PrivateKeyAlgorithm
    :ivar rotation_policy: cert-manager private key rotationPolicy. Required. Known values are:
     "Always" and "Never".
    :vartype rotation_policy: str or ~azure.mgmt.iotoperations.models.PrivateKeyRotationPolicy
    """

    algorithm: Union[str, "_models.PrivateKeyAlgorithm"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """algorithm for private key. Required. Known values are: \"Ec256\", \"Ec384\", \"Ec521\",
     \"Ed25519\", \"Rsa2048\", \"Rsa4096\", and \"Rsa8192\"."""
    rotation_policy: Union[str, "_models.PrivateKeyRotationPolicy"] = rest_field(
        name="rotationPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """cert-manager private key rotationPolicy. Required. Known values are: \"Always\" and \"Never\"."""

    @overload
    def __init__(
        self,
        *,
        algorithm: Union[str, "_models.PrivateKeyAlgorithm"],
        rotation_policy: Union[str, "_models.PrivateKeyRotationPolicy"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClientConfig(_Model):
    """The settings of Client Config.

    :ivar max_session_expiry_seconds: Upper bound of Session Expiry Interval, in seconds.
    :vartype max_session_expiry_seconds: int
    :ivar max_message_expiry_seconds: Upper bound of Message Expiry Interval, in seconds.
    :vartype max_message_expiry_seconds: int
    :ivar max_packet_size_bytes: Max message size for a packet in Bytes.
    :vartype max_packet_size_bytes: int
    :ivar subscriber_queue_limit: The limit on the number of queued messages for a subscriber.
    :vartype subscriber_queue_limit: ~azure.mgmt.iotoperations.models.SubscriberQueueLimit
    :ivar max_receive_maximum: Upper bound of Receive Maximum that a client can request in the
     CONNECT packet.
    :vartype max_receive_maximum: int
    :ivar max_keep_alive_seconds: Upper bound of a client's Keep Alive, in seconds.
    :vartype max_keep_alive_seconds: int
    """

    max_session_expiry_seconds: Optional[int] = rest_field(
        name="maxSessionExpirySeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Upper bound of Session Expiry Interval, in seconds."""
    max_message_expiry_seconds: Optional[int] = rest_field(
        name="maxMessageExpirySeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Upper bound of Message Expiry Interval, in seconds."""
    max_packet_size_bytes: Optional[int] = rest_field(
        name="maxPacketSizeBytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Max message size for a packet in Bytes."""
    subscriber_queue_limit: Optional["_models.SubscriberQueueLimit"] = rest_field(
        name="subscriberQueueLimit", visibility=["read", "create", "update", "delete", "query"]
    )
    """The limit on the number of queued messages for a subscriber."""
    max_receive_maximum: Optional[int] = rest_field(
        name="maxReceiveMaximum", visibility=["read", "create", "update", "delete", "query"]
    )
    """Upper bound of Receive Maximum that a client can request in the CONNECT packet."""
    max_keep_alive_seconds: Optional[int] = rest_field(
        name="maxKeepAliveSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Upper bound of a client's Keep Alive, in seconds."""

    @overload
    def __init__(
        self,
        *,
        max_session_expiry_seconds: Optional[int] = None,
        max_message_expiry_seconds: Optional[int] = None,
        max_packet_size_bytes: Optional[int] = None,
        subscriber_queue_limit: Optional["_models.SubscriberQueueLimit"] = None,
        max_receive_maximum: Optional[int] = None,
        max_keep_alive_seconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphNode(_Model):
    """DataflowGraph node properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DatafloGraphDestinationNode, DataflowGraphGraphNode, DataflowGraphSourceNode

    :ivar name: Name of the node. Required.
    :vartype name: str
    :ivar type: Type of the node. Required. Known values are: "Source", "Graph", and "Destination".
    :vartype type: str or ~azure.mgmt.iotoperations.models.DataflowGraphNodeType
    """

    __mapping__: Dict[str, _Model] = {}
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the node. Required."""
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Type of the node. Required. Known values are: \"Source\", \"Graph\", and \"Destination\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatafloGraphDestinationNode(DataflowGraphNode, discriminator="Destination"):
    """DataflowGraph destination node properties.

    :ivar name: Name of the node. Required.
    :vartype name: str
    :ivar type: Type of the destination node. Required. Dataflow destination node.
    :vartype type: str or ~azure.mgmt.iotoperations.models.DESTINATION
    :ivar destination_settings: Destination configuration. Required.
    :vartype destination_settings:
     ~azure.mgmt.iotoperations.models.DataflowGraphDestinationNodeSettings
    """

    type: Literal[DataflowGraphNodeType.DESTINATION] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of the destination node. Required. Dataflow destination node."""
    destination_settings: "_models.DataflowGraphDestinationNodeSettings" = rest_field(
        name="destinationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Destination configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        destination_settings: "_models.DataflowGraphDestinationNodeSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DataflowGraphNodeType.DESTINATION, **kwargs)


class DataflowBuiltInTransformationDataset(_Model):
    """Dataflow BuiltIn Transformation dataset properties.

    :ivar key: The key of the dataset. Required.
    :vartype key: str
    :ivar description: A user provided optional description of the dataset.
    :vartype description: str
    :ivar schema_ref: The reference to the schema that describes the dataset. Allowed: JSON
     Schema/draft-7.
    :vartype schema_ref: str
    :ivar inputs: List of fields for enriching from the Broker State Store. Required.
    :vartype inputs: list[str]
    :ivar expression: Condition to enrich data from Broker State Store. Example: $1 < 0 || $1 > $2
     (Assuming inputs section $1 and $2 are provided).
    :vartype expression: str
    """

    key: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The key of the dataset. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A user provided optional description of the dataset."""
    schema_ref: Optional[str] = rest_field(name="schemaRef", visibility=["read", "create", "update", "delete", "query"])
    """The reference to the schema that describes the dataset. Allowed: JSON Schema/draft-7."""
    inputs: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of fields for enriching from the Broker State Store. Required."""
    expression: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Condition to enrich data from Broker State Store. Example: $1 < 0 || $1 > $2 (Assuming inputs
     section $1 and $2 are provided)."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        inputs: List[str],
        description: Optional[str] = None,
        schema_ref: Optional[str] = None,
        expression: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowBuiltInTransformationFilter(_Model):
    """Dataflow BuiltIn Transformation filter properties.

    :ivar type: The type of dataflow operation. "Filter"
    :vartype type: str or ~azure.mgmt.iotoperations.models.FilterType
    :ivar description: A user provided optional description of the filter.
    :vartype description: str
    :ivar inputs: List of fields for filtering in JSON path expression. Required.
    :vartype inputs: list[str]
    :ivar expression: Condition to filter data. Can reference input fields with {n} where n is the
     index of the input field starting from 1. Example: $1 < 0 || $1 > $2 (Assuming inputs section
     $1 and $2 are provided). Required.
    :vartype expression: str
    """

    type: Optional[Union[str, "_models.FilterType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of dataflow operation. \"Filter\""""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A user provided optional description of the filter."""
    inputs: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of fields for filtering in JSON path expression. Required."""
    expression: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Condition to filter data. Can reference input fields with {n} where n is the index of the input
     field starting from 1. Example: $1 < 0 || $1 > $2 (Assuming inputs section $1 and $2 are
     provided). Required."""

    @overload
    def __init__(
        self,
        *,
        inputs: List[str],
        expression: str,
        type: Optional[Union[str, "_models.FilterType"]] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowBuiltInTransformationMap(_Model):
    """Dataflow BuiltIn Transformation map properties.

    :ivar type: Type of transformation. Known values are: "NewProperties", "Rename", "Compute",
     "PassThrough", and "BuiltInFunction".
    :vartype type: str or ~azure.mgmt.iotoperations.models.DataflowMappingType
    :ivar description: A user provided optional description of the mapping function.
    :vartype description: str
    :ivar inputs: List of fields for mapping in JSON path expression. Required.
    :vartype inputs: list[str]
    :ivar expression: Modify the inputs field(s) to the final output field. Example: $1 * 2.2
     (Assuming inputs section $1 is provided).
    :vartype expression: str
    :ivar output: Where and how the input fields to be organized in the output record. Required.
    :vartype output: str
    """

    type: Optional[Union[str, "_models.DataflowMappingType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of transformation. Known values are: \"NewProperties\", \"Rename\", \"Compute\",
     \"PassThrough\", and \"BuiltInFunction\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A user provided optional description of the mapping function."""
    inputs: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of fields for mapping in JSON path expression. Required."""
    expression: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming inputs
     section $1 is provided)."""
    output: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Where and how the input fields to be organized in the output record. Required."""

    @overload
    def __init__(
        self,
        *,
        inputs: List[str],
        output: str,
        type: Optional[Union[str, "_models.DataflowMappingType"]] = None,
        description: Optional[str] = None,
        expression: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowBuiltInTransformationSettings(_Model):
    """Dataflow BuiltIn Transformation properties.

    :ivar serialization_format: Serialization format. Optional; defaults to JSON. Allowed value
     JSON Schema/draft-7, Parquet. Default: Json. Known values are: "Delta", "Json", and "Parquet".
    :vartype serialization_format: str or
     ~azure.mgmt.iotoperations.models.TransformationSerializationFormat
    :ivar schema_ref: Reference to the schema that describes the output of the transformation.
    :vartype schema_ref: str
    :ivar datasets: Enrich data from Broker State Store. Dataset references a key in Broker State
     Store.
    :vartype datasets: list[~azure.mgmt.iotoperations.models.DataflowBuiltInTransformationDataset]
    :ivar filter: Filters input record or datapoints based on condition.
    :vartype filter: list[~azure.mgmt.iotoperations.models.DataflowBuiltInTransformationFilter]
    :ivar map: Maps input to output message.
    :vartype map: list[~azure.mgmt.iotoperations.models.DataflowBuiltInTransformationMap]
    """

    serialization_format: Optional[Union[str, "_models.TransformationSerializationFormat"]] = rest_field(
        name="serializationFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet.
     Default: Json. Known values are: \"Delta\", \"Json\", and \"Parquet\"."""
    schema_ref: Optional[str] = rest_field(name="schemaRef", visibility=["read", "create", "update", "delete", "query"])
    """Reference to the schema that describes the output of the transformation."""
    datasets: Optional[List["_models.DataflowBuiltInTransformationDataset"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enrich data from Broker State Store. Dataset references a key in Broker State Store."""
    filter: Optional[List["_models.DataflowBuiltInTransformationFilter"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Filters input record or datapoints based on condition."""
    map: Optional[List["_models.DataflowBuiltInTransformationMap"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Maps input to output message."""

    @overload
    def __init__(
        self,
        *,
        serialization_format: Optional[Union[str, "_models.TransformationSerializationFormat"]] = None,
        schema_ref: Optional[str] = None,
        datasets: Optional[List["_models.DataflowBuiltInTransformationDataset"]] = None,
        filter: Optional[
            List["_models.DataflowBuiltInTransformationFilter"]
        ] = None,  # pylint: disable=redefined-builtin
        map: Optional[List["_models.DataflowBuiltInTransformationMap"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowDestinationOperationSettings(_Model):
    """Dataflow Destination Operation properties.

    :ivar endpoint_ref: Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX
     type. Required.
    :vartype endpoint_ref: str
    :ivar data_destination: Destination location, can be a topic or table name. Supports dynamic
     values with $topic, $systemProperties, $userProperties, $payload, $context, and $subscription.
     Required.
    :vartype data_destination: str
    """

    endpoint_ref: str = rest_field(name="endpointRef", visibility=["read", "create", "update", "delete", "query"])
    """Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type. Required."""
    data_destination: str = rest_field(
        name="dataDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Destination location, can be a topic or table name. Supports dynamic values with $topic,
     $systemProperties, $userProperties, $payload, $context, and $subscription. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint_ref: str,
        data_destination: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationAccessToken(_Model):  # pylint: disable=name-too-long
    """DataflowEndpoint Authentication Access Token properties.

    :ivar secret_ref: Token secret name. Required.
    :vartype secret_ref: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """Token secret name. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationAnonymous(_Model):
    """DataflowEndpoint Anonymous Authentication properties."""


class DataflowEndpointAuthenticationSasl(_Model):
    """DataflowEndpoint Authentication Sasl properties.

    :ivar sasl_type: Type of SASL authentication. Can be PLAIN, SCRAM-SHA-256, or SCRAM-SHA-512.
     Required. Known values are: "Plain", "ScramSha256", and "ScramSha512".
    :vartype sasl_type: str or
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSaslType
    :ivar secret_ref: Token secret name. Required.
    :vartype secret_ref: str
    """

    sasl_type: Union[str, "_models.DataflowEndpointAuthenticationSaslType"] = rest_field(
        name="saslType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of SASL authentication. Can be PLAIN, SCRAM-SHA-256, or SCRAM-SHA-512. Required. Known
     values are: \"Plain\", \"ScramSha256\", and \"ScramSha512\"."""
    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """Token secret name. Required."""

    @overload
    def __init__(
        self,
        *,
        sasl_type: Union[str, "_models.DataflowEndpointAuthenticationSaslType"],
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationServiceAccountToken(_Model):  # pylint: disable=name-too-long
    """Service Account Token for BrokerAuthentication.

    :ivar audience: Audience of the service account. Optional, defaults to the broker internal
     service account audience. Required.
    :vartype audience: str
    """

    audience: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Audience of the service account. Optional, defaults to the broker internal service account
     audience. Required."""

    @overload
    def __init__(
        self,
        *,
        audience: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationSystemAssignedManagedIdentity(_Model):  # pylint: disable=name-too-long
    """DataflowEndpoint Authentication SystemAssignedManagedIdentity properties.

    :ivar audience: Audience of the service to authenticate against. Optional; defaults to the
     audience for Service host configuration.
    :vartype audience: str
    """

    audience: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Audience of the service to authenticate against. Optional; defaults to the audience for Service
     host configuration."""

    @overload
    def __init__(
        self,
        *,
        audience: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationUserAssignedManagedIdentity(_Model):  # pylint: disable=name-too-long
    """DataflowEndpoint Authentication UserAssignedManagedIdentity properties.

    :ivar client_id: Client ID for the user-assigned managed identity. Required.
    :vartype client_id: str
    :ivar scope: Resource identifier (application ID URI) of the resource, affixed with the
     .default suffix.
    :vartype scope: str
    :ivar tenant_id: Tenant ID. Required.
    :vartype tenant_id: str
    """

    client_id: str = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """Client ID for the user-assigned managed identity. Required."""
    scope: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource identifier (application ID URI) of the resource, affixed with the .default suffix."""
    tenant_id: str = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    """Tenant ID. Required."""

    @overload
    def __init__(
        self,
        *,
        client_id: str,
        tenant_id: str,
        scope: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointAuthenticationX509(_Model):
    """DataflowEndpoint Authentication X509 properties.

    :ivar secret_ref: Secret reference of the X.509 certificate. Required.
    :vartype secret_ref: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """Secret reference of the X.509 certificate. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointDataExplorer(_Model):
    """Azure Data Explorer endpoint properties.

    :ivar authentication: Authentication configuration. NOTE - only authentication property is
     allowed per entry. Required.
    :vartype authentication:
     ~azure.mgmt.iotoperations.models.DataflowEndpointDataExplorerAuthentication
    :ivar database: Database name. Required.
    :vartype database: str
    :ivar host: Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net
     . Required.
    :vartype host: str
    :ivar batching: Azure Data Explorer endpoint batching configuration.
    :vartype batching: ~azure.mgmt.iotoperations.models.BatchingConfiguration
    """

    authentication: "_models.DataflowEndpointDataExplorerAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication configuration. NOTE - only authentication property is allowed per entry.
     Required."""
    database: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Database name. Required."""
    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net . Required."""
    batching: Optional["_models.BatchingConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Data Explorer endpoint batching configuration."""

    @overload
    def __init__(
        self,
        *,
        authentication: "_models.DataflowEndpointDataExplorerAuthentication",
        database: str,
        host: str,
        batching: Optional["_models.BatchingConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointDataExplorerAuthentication(_Model):  # pylint: disable=name-too-long
    """Azure Data Explorer Authentication properties. NOTE - only authentication property is allowed
    per entry.

    :ivar method: Mode of Authentication. Required. Known values are:
     "SystemAssignedManagedIdentity" and "UserAssignedManagedIdentity".
    :vartype method: str or ~azure.mgmt.iotoperations.models.DataExplorerAuthMethod
    :ivar system_assigned_managed_identity_settings: System-assigned managed identity
     authentication.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity
    :ivar user_assigned_managed_identity_settings: User-assigned managed identity authentication.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity
    """

    method: Union[str, "_models.DataExplorerAuthMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of Authentication. Required. Known values are: \"SystemAssignedManagedIdentity\" and
     \"UserAssignedManagedIdentity\"."""
    system_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
    ] = rest_field(
        name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """System-assigned managed identity authentication."""
    user_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
    ] = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User-assigned managed identity authentication."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.DataExplorerAuthMethod"],
        system_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
        ] = None,
        user_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointDataLakeStorage(_Model):
    """Azure Data Lake endpoint properties.

    :ivar authentication: Authentication configuration. NOTE - only authentication property is
     allowed per entry. Required.
    :vartype authentication:
     ~azure.mgmt.iotoperations.models.DataflowEndpointDataLakeStorageAuthentication
    :ivar host: Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .
     Required.
    :vartype host: str
    :ivar batching: Azure Data Lake endpoint batching configuration.
    :vartype batching: ~azure.mgmt.iotoperations.models.BatchingConfiguration
    """

    authentication: "_models.DataflowEndpointDataLakeStorageAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication configuration. NOTE - only authentication property is allowed per entry.
     Required."""
    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the Azure Data Lake in the form of <account>.blob.core.windows.net . Required."""
    batching: Optional["_models.BatchingConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Data Lake endpoint batching configuration."""

    @overload
    def __init__(
        self,
        *,
        authentication: "_models.DataflowEndpointDataLakeStorageAuthentication",
        host: str,
        batching: Optional["_models.BatchingConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointDataLakeStorageAuthentication(_Model):  # pylint: disable=name-too-long
    """Azure Data Lake endpoint Authentication properties.  NOTE Enum - Only one method is supported
    for one entry.

    :ivar method: Mode of Authentication. Required. Known values are:
     "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity", and "AccessToken".
    :vartype method: str or ~azure.mgmt.iotoperations.models.DataLakeStorageAuthMethod
    :ivar access_token_settings: SAS token authentication.
    :vartype access_token_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationAccessToken
    :ivar system_assigned_managed_identity_settings: System-assigned managed identity
     authentication.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity
    :ivar user_assigned_managed_identity_settings: User-assigned managed identity authentication.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity
    """

    method: Union[str, "_models.DataLakeStorageAuthMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of Authentication. Required. Known values are: \"SystemAssignedManagedIdentity\",
     \"UserAssignedManagedIdentity\", and \"AccessToken\"."""
    access_token_settings: Optional["_models.DataflowEndpointAuthenticationAccessToken"] = rest_field(
        name="accessTokenSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """SAS token authentication."""
    system_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
    ] = rest_field(
        name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """System-assigned managed identity authentication."""
    user_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
    ] = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User-assigned managed identity authentication."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.DataLakeStorageAuthMethod"],
        access_token_settings: Optional["_models.DataflowEndpointAuthenticationAccessToken"] = None,
        system_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
        ] = None,
        user_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointFabricOneLake(_Model):
    """Microsoft Fabric endpoint properties.

    :ivar authentication: Authentication configuration. NOTE - only one authentication property is
     allowed per entry. Required.
    :vartype authentication:
     ~azure.mgmt.iotoperations.models.DataflowEndpointFabricOneLakeAuthentication
    :ivar names: Names of the workspace and lakehouse. Required.
    :vartype names: ~azure.mgmt.iotoperations.models.DataflowEndpointFabricOneLakeNames
    :ivar one_lake_path_type: Type of location of the data in the workspace. Can be either tables
     or files. Required. Known values are: "Files" and "Tables".
    :vartype one_lake_path_type: str or
     ~azure.mgmt.iotoperations.models.DataflowEndpointFabricPathType
    :ivar host: Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.
     Required.
    :vartype host: str
    :ivar batching: Batching configuration.
    :vartype batching: ~azure.mgmt.iotoperations.models.BatchingConfiguration
    """

    authentication: "_models.DataflowEndpointFabricOneLakeAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication configuration. NOTE - only one authentication property is allowed per entry.
     Required."""
    names: "_models.DataflowEndpointFabricOneLakeNames" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Names of the workspace and lakehouse. Required."""
    one_lake_path_type: Union[str, "_models.DataflowEndpointFabricPathType"] = rest_field(
        name="oneLakePathType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of location of the data in the workspace. Can be either tables or files. Required. Known
     values are: \"Files\" and \"Tables\"."""
    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com. Required."""
    batching: Optional["_models.BatchingConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Batching configuration."""

    @overload
    def __init__(
        self,
        *,
        authentication: "_models.DataflowEndpointFabricOneLakeAuthentication",
        names: "_models.DataflowEndpointFabricOneLakeNames",
        one_lake_path_type: Union[str, "_models.DataflowEndpointFabricPathType"],
        host: str,
        batching: Optional["_models.BatchingConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointFabricOneLakeAuthentication(_Model):  # pylint: disable=name-too-long
    """Microsoft Fabric endpoint. Authentication properties. NOTE - Only one method is supported for
    one entry.

    :ivar method: Mode of Authentication. Required. Known values are:
     "SystemAssignedManagedIdentity" and "UserAssignedManagedIdentity".
    :vartype method: str or ~azure.mgmt.iotoperations.models.FabricOneLakeAuthMethod
    :ivar system_assigned_managed_identity_settings: System-assigned managed identity
     authentication.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity
    :ivar user_assigned_managed_identity_settings: User-assigned managed identity authentication.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity
    """

    method: Union[str, "_models.FabricOneLakeAuthMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of Authentication. Required. Known values are: \"SystemAssignedManagedIdentity\" and
     \"UserAssignedManagedIdentity\"."""
    system_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
    ] = rest_field(
        name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """System-assigned managed identity authentication."""
    user_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
    ] = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User-assigned managed identity authentication."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.FabricOneLakeAuthMethod"],
        system_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
        ] = None,
        user_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointFabricOneLakeNames(_Model):
    """Microsoft Fabric endpoint Names properties.

    :ivar lakehouse_name: Lakehouse name. Required.
    :vartype lakehouse_name: str
    :ivar workspace_name: Workspace name. Required.
    :vartype workspace_name: str
    """

    lakehouse_name: str = rest_field(name="lakehouseName", visibility=["read", "create", "update", "delete", "query"])
    """Lakehouse name. Required."""
    workspace_name: str = rest_field(name="workspaceName", visibility=["read", "create", "update", "delete", "query"])
    """Workspace name. Required."""

    @overload
    def __init__(
        self,
        *,
        lakehouse_name: str,
        workspace_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointKafka(_Model):
    """Kafka endpoint properties.

    :ivar authentication: Authentication configuration. NOTE - only authentication property is
     allowed per entry. Required.
    :vartype authentication: ~azure.mgmt.iotoperations.models.DataflowEndpointKafkaAuthentication
    :ivar consumer_group_id: Consumer group ID.
    :vartype consumer_group_id: str
    :ivar host: Kafka endpoint host. Required.
    :vartype host: str
    :ivar batching: Batching configuration.
    :vartype batching: ~azure.mgmt.iotoperations.models.DataflowEndpointKafkaBatching
    :ivar copy_mqtt_properties: Copy Broker properties. No effect if the endpoint is used as a
     source or if the dataflow doesn't have an Broker source. Known values are: "Enabled" and
     "Disabled".
    :vartype copy_mqtt_properties: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar compression: Compression. Can be none, gzip, lz4, or snappy. No effect if the endpoint is
     used as a source. Known values are: "None", "Gzip", "Snappy", and "Lz4".
    :vartype compression: str or ~azure.mgmt.iotoperations.models.DataflowEndpointKafkaCompression
    :ivar kafka_acks: Kafka acks. Can be all, one, or zero. No effect if the endpoint is used as a
     source. Known values are: "Zero", "One", and "All".
    :vartype kafka_acks: str or ~azure.mgmt.iotoperations.models.DataflowEndpointKafkaAcks
    :ivar partition_strategy: Partition handling strategy. Can be default or static. No effect if
     the endpoint is used as a source. Known values are: "Default", "Static", "Topic", and
     "Property".
    :vartype partition_strategy: str or
     ~azure.mgmt.iotoperations.models.DataflowEndpointKafkaPartitionStrategy
    :ivar tls: TLS configuration.
    :vartype tls: ~azure.mgmt.iotoperations.models.TlsProperties
    :ivar cloud_event_attributes: Cloud event mapping config. Known values are: "Propagate" and
     "CreateOrRemap".
    :vartype cloud_event_attributes: str or
     ~azure.mgmt.iotoperations.models.CloudEventAttributeType
    """

    authentication: "_models.DataflowEndpointKafkaAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication configuration. NOTE - only authentication property is allowed per entry.
     Required."""
    consumer_group_id: Optional[str] = rest_field(
        name="consumerGroupId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Consumer group ID."""
    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kafka endpoint host. Required."""
    batching: Optional["_models.DataflowEndpointKafkaBatching"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Batching configuration."""
    copy_mqtt_properties: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        name="copyMqttProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Copy Broker properties. No effect if the endpoint is used as a source or if the dataflow
     doesn't have an Broker source. Known values are: \"Enabled\" and \"Disabled\"."""
    compression: Optional[Union[str, "_models.DataflowEndpointKafkaCompression"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Compression. Can be none, gzip, lz4, or snappy. No effect if the endpoint is used as a source.
     Known values are: \"None\", \"Gzip\", \"Snappy\", and \"Lz4\"."""
    kafka_acks: Optional[Union[str, "_models.DataflowEndpointKafkaAcks"]] = rest_field(
        name="kafkaAcks", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka acks. Can be all, one, or zero. No effect if the endpoint is used as a source. Known
     values are: \"Zero\", \"One\", and \"All\"."""
    partition_strategy: Optional[Union[str, "_models.DataflowEndpointKafkaPartitionStrategy"]] = rest_field(
        name="partitionStrategy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Partition handling strategy. Can be default or static. No effect if the endpoint is used as a
     source. Known values are: \"Default\", \"Static\", \"Topic\", and \"Property\"."""
    tls: Optional["_models.TlsProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TLS configuration."""
    cloud_event_attributes: Optional[Union[str, "_models.CloudEventAttributeType"]] = rest_field(
        name="cloudEventAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Cloud event mapping config. Known values are: \"Propagate\" and \"CreateOrRemap\"."""

    @overload
    def __init__(
        self,
        *,
        authentication: "_models.DataflowEndpointKafkaAuthentication",
        host: str,
        consumer_group_id: Optional[str] = None,
        batching: Optional["_models.DataflowEndpointKafkaBatching"] = None,
        copy_mqtt_properties: Optional[Union[str, "_models.OperationalMode"]] = None,
        compression: Optional[Union[str, "_models.DataflowEndpointKafkaCompression"]] = None,
        kafka_acks: Optional[Union[str, "_models.DataflowEndpointKafkaAcks"]] = None,
        partition_strategy: Optional[Union[str, "_models.DataflowEndpointKafkaPartitionStrategy"]] = None,
        tls: Optional["_models.TlsProperties"] = None,
        cloud_event_attributes: Optional[Union[str, "_models.CloudEventAttributeType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointKafkaAuthentication(_Model):
    """Kafka endpoint Authentication properties. NOTE - only authentication property is allowed per
    entry.

    :ivar method: Mode of Authentication. Required. Known values are:
     "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity", "Sasl", "X509Certificate", and
     "Anonymous".
    :vartype method: str or ~azure.mgmt.iotoperations.models.KafkaAuthMethod
    :ivar system_assigned_managed_identity_settings: System-assigned managed identity
     authentication.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity
    :ivar user_assigned_managed_identity_settings: User-assigned managed identity authentication.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity
    :ivar sasl_settings: SASL authentication.
    :vartype sasl_settings: ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSasl
    :ivar x509_certificate_settings: X.509 certificate authentication.
    :vartype x509_certificate_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationX509
    """

    method: Union[str, "_models.KafkaAuthMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of Authentication. Required. Known values are: \"SystemAssignedManagedIdentity\",
     \"UserAssignedManagedIdentity\", \"Sasl\", \"X509Certificate\", and \"Anonymous\"."""
    system_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
    ] = rest_field(
        name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """System-assigned managed identity authentication."""
    user_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
    ] = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User-assigned managed identity authentication."""
    sasl_settings: Optional["_models.DataflowEndpointAuthenticationSasl"] = rest_field(
        name="saslSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """SASL authentication."""
    x509_certificate_settings: Optional["_models.DataflowEndpointAuthenticationX509"] = rest_field(
        name="x509CertificateSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """X.509 certificate authentication."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.KafkaAuthMethod"],
        system_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
        ] = None,
        user_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
        ] = None,
        sasl_settings: Optional["_models.DataflowEndpointAuthenticationSasl"] = None,
        x509_certificate_settings: Optional["_models.DataflowEndpointAuthenticationX509"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointKafkaBatching(_Model):
    """Kafka endpoint Batching properties.

    :ivar mode: Mode for batching. Known values are: "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar latency_ms: Batching latency in milliseconds.
    :vartype latency_ms: int
    :ivar max_bytes: Maximum number of bytes in a batch.
    :vartype max_bytes: int
    :ivar max_messages: Maximum number of messages in a batch.
    :vartype max_messages: int
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for batching. Known values are: \"Enabled\" and \"Disabled\"."""
    latency_ms: Optional[int] = rest_field(name="latencyMs", visibility=["read", "create", "update", "delete", "query"])
    """Batching latency in milliseconds."""
    max_bytes: Optional[int] = rest_field(name="maxBytes", visibility=["read", "create", "update", "delete", "query"])
    """Maximum number of bytes in a batch."""
    max_messages: Optional[int] = rest_field(
        name="maxMessages", visibility=["read", "create", "update", "delete", "query"]
    )
    """Maximum number of messages in a batch."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        latency_ms: Optional[int] = None,
        max_bytes: Optional[int] = None,
        max_messages: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointLocalStorage(_Model):
    """Local persistent volume endpoint properties.

    :ivar persistent_volume_claim_ref: Persistent volume claim name. Required.
    :vartype persistent_volume_claim_ref: str
    """

    persistent_volume_claim_ref: str = rest_field(
        name="persistentVolumeClaimRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Persistent volume claim name. Required."""

    @overload
    def __init__(
        self,
        *,
        persistent_volume_claim_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointMqtt(_Model):
    """Broker endpoint properties.

    :ivar authentication: authentication properties. DEFAULT: kubernetes.audience=aio-internal.
     NOTE - Enum field only property is allowed. Required.
    :vartype authentication: ~azure.mgmt.iotoperations.models.DataflowEndpointMqttAuthentication
    :ivar client_id_prefix: Client ID prefix. Client ID generated by the dataflow is <prefix>-TBD.
     Optional; no prefix if omitted.
    :vartype client_id_prefix: str
    :ivar host: Host of the Broker in the form of <hostname>:<port>. Optional; connects to Broker
     if omitted.
    :vartype host: str
    :ivar protocol: Enable or disable websockets. Known values are: "Mqtt" and "WebSockets".
    :vartype protocol: str or ~azure.mgmt.iotoperations.models.BrokerProtocolType
    :ivar keep_alive_seconds: Broker KeepAlive for connection in seconds.
    :vartype keep_alive_seconds: int
    :ivar retain: Whether or not to keep the retain setting. Known values are: "Keep" and "Never".
    :vartype retain: str or ~azure.mgmt.iotoperations.models.MqttRetainType
    :ivar max_inflight_messages: The max number of messages to keep in flight. For subscribe, this
     is the receive maximum. For publish, this is the maximum number of messages to send before
     waiting for an ack.
    :vartype max_inflight_messages: int
    :ivar qos: Qos for Broker connection.
    :vartype qos: int
    :ivar session_expiry_seconds: Session expiry in seconds.
    :vartype session_expiry_seconds: int
    :ivar tls: TLS configuration.
    :vartype tls: ~azure.mgmt.iotoperations.models.TlsProperties
    :ivar cloud_event_attributes: Cloud event mapping config. Known values are: "Propagate" and
     "CreateOrRemap".
    :vartype cloud_event_attributes: str or
     ~azure.mgmt.iotoperations.models.CloudEventAttributeType
    """

    authentication: "_models.DataflowEndpointMqttAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """authentication properties. DEFAULT: kubernetes.audience=aio-internal. NOTE - Enum field only
     property is allowed. Required."""
    client_id_prefix: Optional[str] = rest_field(
        name="clientIdPrefix", visibility=["read", "create", "update", "delete", "query"]
    )
    """Client ID prefix. Client ID generated by the dataflow is <prefix>-TBD. Optional; no prefix if
     omitted."""
    host: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the Broker in the form of <hostname>:<port>. Optional; connects to Broker if omitted."""
    protocol: Optional[Union[str, "_models.BrokerProtocolType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable or disable websockets. Known values are: \"Mqtt\" and \"WebSockets\"."""
    keep_alive_seconds: Optional[int] = rest_field(
        name="keepAliveSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Broker KeepAlive for connection in seconds."""
    retain: Optional[Union[str, "_models.MqttRetainType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not to keep the retain setting. Known values are: \"Keep\" and \"Never\"."""
    max_inflight_messages: Optional[int] = rest_field(
        name="maxInflightMessages", visibility=["read", "create", "update", "delete", "query"]
    )
    """The max number of messages to keep in flight. For subscribe, this is the receive maximum. For
     publish, this is the maximum number of messages to send before waiting for an ack."""
    qos: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Qos for Broker connection."""
    session_expiry_seconds: Optional[int] = rest_field(
        name="sessionExpirySeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Session expiry in seconds."""
    tls: Optional["_models.TlsProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TLS configuration."""
    cloud_event_attributes: Optional[Union[str, "_models.CloudEventAttributeType"]] = rest_field(
        name="cloudEventAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Cloud event mapping config. Known values are: \"Propagate\" and \"CreateOrRemap\"."""

    @overload
    def __init__(
        self,
        *,
        authentication: "_models.DataflowEndpointMqttAuthentication",
        client_id_prefix: Optional[str] = None,
        host: Optional[str] = None,
        protocol: Optional[Union[str, "_models.BrokerProtocolType"]] = None,
        keep_alive_seconds: Optional[int] = None,
        retain: Optional[Union[str, "_models.MqttRetainType"]] = None,
        max_inflight_messages: Optional[int] = None,
        qos: Optional[int] = None,
        session_expiry_seconds: Optional[int] = None,
        tls: Optional["_models.TlsProperties"] = None,
        cloud_event_attributes: Optional[Union[str, "_models.CloudEventAttributeType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointMqttAuthentication(_Model):
    """Mqtt endpoint Authentication properties. NOTE - only authentication property is allowed per
    entry.

    :ivar method: Mode of Authentication. Required. Known values are:
     "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity", "ServiceAccountToken",
     "X509Certificate", and "Anonymous".
    :vartype method: str or ~azure.mgmt.iotoperations.models.MqttAuthMethod
    :ivar system_assigned_managed_identity_settings: System-assigned managed identity
     authentication.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity
    :ivar user_assigned_managed_identity_settings: User-assigned managed identity authentication.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity
    :ivar service_account_token_settings: Kubernetes service account token authentication. Default
     audience if not set is aio-internal.
    :vartype service_account_token_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationServiceAccountToken
    :ivar x509_certificate_settings: X.509 certificate authentication.
    :vartype x509_certificate_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationX509
    """

    method: Union[str, "_models.MqttAuthMethod"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of Authentication. Required. Known values are: \"SystemAssignedManagedIdentity\",
     \"UserAssignedManagedIdentity\", \"ServiceAccountToken\", \"X509Certificate\", and
     \"Anonymous\"."""
    system_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
    ] = rest_field(
        name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """System-assigned managed identity authentication."""
    user_assigned_managed_identity_settings: Optional[
        "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
    ] = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User-assigned managed identity authentication."""
    service_account_token_settings: Optional["_models.DataflowEndpointAuthenticationServiceAccountToken"] = rest_field(
        name="serviceAccountTokenSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes service account token authentication. Default audience if not set is aio-internal."""
    x509_certificate_settings: Optional["_models.DataflowEndpointAuthenticationX509"] = rest_field(
        name="x509CertificateSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """X.509 certificate authentication."""

    @overload
    def __init__(
        self,
        *,
        method: Union[str, "_models.MqttAuthMethod"],
        system_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity"
        ] = None,
        user_assigned_managed_identity_settings: Optional[
            "_models.DataflowEndpointAuthenticationUserAssignedManagedIdentity"
        ] = None,
        service_account_token_settings: Optional["_models.DataflowEndpointAuthenticationServiceAccountToken"] = None,
        x509_certificate_settings: Optional["_models.DataflowEndpointAuthenticationX509"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointOpenTelemetry(_Model):
    """OpenTelemetry endpoint properties.

    :ivar host: Host of the OpenTelemetry in the form of <host>:<port>. Required.
    :vartype host: str
    :ivar batching: Batching configuration.
    :vartype batching: ~azure.mgmt.iotoperations.models.BatchingConfiguration
    :ivar tls: TLS configuration.
    :vartype tls: ~azure.mgmt.iotoperations.models.TlsProperties
    :ivar authentication: Authentication properties for OpenTelemetry endpoints. Required.
    :vartype authentication: ~azure.mgmt.iotoperations.models.DataflowOpenTelemetryAuthentication
    """

    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Host of the OpenTelemetry in the form of <host>:<port>. Required."""
    batching: Optional["_models.BatchingConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Batching configuration."""
    tls: Optional["_models.TlsProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TLS configuration."""
    authentication: "_models.DataflowOpenTelemetryAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Authentication properties for OpenTelemetry endpoints. Required."""

    @overload
    def __init__(
        self,
        *,
        host: str,
        authentication: "_models.DataflowOpenTelemetryAuthentication",
        batching: Optional["_models.BatchingConfiguration"] = None,
        tls: Optional["_models.TlsProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointProperties(_Model):
    """DataflowEndpoint Resource properties. NOTE - Only one type of endpoint is supported for one
    Resource.

    :ivar endpoint_type: Endpoint Type. Required. Known values are: "DataExplorer",
     "DataLakeStorage", "FabricOneLake", "Kafka", "LocalStorage", "Mqtt", and "OpenTelemetry".
    :vartype endpoint_type: str or ~azure.mgmt.iotoperations.models.EndpointType
    :ivar host_type: The type of the Kafka host. E.g FabricRT, EventGrid. Known values are:
     "FabricRT", "EventGrid", "LocalBroker", "Eventhub", "CustomMqtt", and "CustomKafka".
    :vartype host_type: str or ~azure.mgmt.iotoperations.models.DataflowEnpointHostType
    :ivar data_explorer_settings: Azure Data Explorer endpoint.
    :vartype data_explorer_settings: ~azure.mgmt.iotoperations.models.DataflowEndpointDataExplorer
    :ivar data_lake_storage_settings: Azure Data Lake endpoint.
    :vartype data_lake_storage_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointDataLakeStorage
    :ivar fabric_one_lake_settings: Microsoft Fabric endpoint.
    :vartype fabric_one_lake_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointFabricOneLake
    :ivar kafka_settings: Kafka endpoint.
    :vartype kafka_settings: ~azure.mgmt.iotoperations.models.DataflowEndpointKafka
    :ivar local_storage_settings: Local persistent volume endpoint.
    :vartype local_storage_settings: ~azure.mgmt.iotoperations.models.DataflowEndpointLocalStorage
    :ivar mqtt_settings: Broker endpoint.
    :vartype mqtt_settings: ~azure.mgmt.iotoperations.models.DataflowEndpointMqtt
    :ivar open_telemetry_settings: OpenTelemetry endpoint.
    :vartype open_telemetry_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointOpenTelemetry
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    endpoint_type: Union[str, "_models.EndpointType"] = rest_field(
        name="endpointType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Endpoint Type. Required. Known values are: \"DataExplorer\", \"DataLakeStorage\",
     \"FabricOneLake\", \"Kafka\", \"LocalStorage\", \"Mqtt\", and \"OpenTelemetry\"."""
    host_type: Optional[Union[str, "_models.DataflowEnpointHostType"]] = rest_field(
        name="hostType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the Kafka host. E.g FabricRT, EventGrid. Known values are: \"FabricRT\",
     \"EventGrid\", \"LocalBroker\", \"Eventhub\", \"CustomMqtt\", and \"CustomKafka\"."""
    data_explorer_settings: Optional["_models.DataflowEndpointDataExplorer"] = rest_field(
        name="dataExplorerSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Data Explorer endpoint."""
    data_lake_storage_settings: Optional["_models.DataflowEndpointDataLakeStorage"] = rest_field(
        name="dataLakeStorageSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Data Lake endpoint."""
    fabric_one_lake_settings: Optional["_models.DataflowEndpointFabricOneLake"] = rest_field(
        name="fabricOneLakeSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Microsoft Fabric endpoint."""
    kafka_settings: Optional["_models.DataflowEndpointKafka"] = rest_field(
        name="kafkaSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka endpoint."""
    local_storage_settings: Optional["_models.DataflowEndpointLocalStorage"] = rest_field(
        name="localStorageSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Local persistent volume endpoint."""
    mqtt_settings: Optional["_models.DataflowEndpointMqtt"] = rest_field(
        name="mqttSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Broker endpoint."""
    open_telemetry_settings: Optional["_models.DataflowEndpointOpenTelemetry"] = rest_field(
        name="openTelemetrySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """OpenTelemetry endpoint."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        endpoint_type: Union[str, "_models.EndpointType"],
        host_type: Optional[Union[str, "_models.DataflowEnpointHostType"]] = None,
        data_explorer_settings: Optional["_models.DataflowEndpointDataExplorer"] = None,
        data_lake_storage_settings: Optional["_models.DataflowEndpointDataLakeStorage"] = None,
        fabric_one_lake_settings: Optional["_models.DataflowEndpointFabricOneLake"] = None,
        kafka_settings: Optional["_models.DataflowEndpointKafka"] = None,
        local_storage_settings: Optional["_models.DataflowEndpointLocalStorage"] = None,
        mqtt_settings: Optional["_models.DataflowEndpointMqtt"] = None,
        open_telemetry_settings: Optional["_models.DataflowEndpointOpenTelemetry"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowEndpointResource(ProxyResource):
    """Instance dataflowEndpoint resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.DataflowEndpointProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.DataflowEndpointProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataflowEndpointProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphConnectionInput(_Model):
    """DataflowGraph DataflowGraphNode Connection Input.

    :ivar name: Name of the source node. Required.
    :vartype name: str
    :ivar schema: Schema settings for the source node.
    :vartype schema: ~azure.mgmt.iotoperations.models.DataflowGraphSchemaSettings
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the source node. Required."""
    schema: Optional["_models.DataflowGraphSchemaSettings"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema settings for the source node."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        schema: Optional["_models.DataflowGraphSchemaSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphConnectionOutput(_Model):
    """DataflowGraph DataflowGraphNode Connection Output.

    :ivar name: Name of the destination node. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the destination node. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphDestinationNodeSettings(_Model):
    """DataflowGraph destination node settings.

    :ivar endpoint_ref: The endpoint reference for the destination. Required.
    :vartype endpoint_ref: str
    :ivar data_destination: Data destination at the endpoint. Required.
    :vartype data_destination: str
    :ivar output_schema_settings: Output schema settings.
    :vartype output_schema_settings: ~azure.mgmt.iotoperations.models.DataflowGraphSchemaSettings
    """

    endpoint_ref: str = rest_field(name="endpointRef", visibility=["read", "create", "update", "delete", "query"])
    """The endpoint reference for the destination. Required."""
    data_destination: str = rest_field(
        name="dataDestination", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data destination at the endpoint. Required."""
    output_schema_settings: Optional["_models.DataflowGraphSchemaSettings"] = rest_field(
        name="outputSchemaSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Output schema settings."""

    @overload
    def __init__(
        self,
        *,
        endpoint_ref: str,
        data_destination: str,
        output_schema_settings: Optional["_models.DataflowGraphSchemaSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphGraphNode(DataflowGraphNode, discriminator="Graph"):
    """DataflowGraph graph node properties.

    :ivar name: Name of the node. Required.
    :vartype name: str
    :ivar type: Type of the graph node. Required. Dataflow graph node.
    :vartype type: str or ~azure.mgmt.iotoperations.models.GRAPH
    :ivar graph_settings: Graph configuration. Required.
    :vartype graph_settings: ~azure.mgmt.iotoperations.models.DataflowGraphNodeGraphSettings
    """

    type: Literal[DataflowGraphNodeType.GRAPH] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of the graph node. Required. Dataflow graph node."""
    graph_settings: "_models.DataflowGraphNodeGraphSettings" = rest_field(
        name="graphSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Graph configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        graph_settings: "_models.DataflowGraphNodeGraphSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DataflowGraphNodeType.GRAPH, **kwargs)


class DataflowGraphGraphNodeConfiguration(_Model):
    """DataflowGraph graph node configuration.

    :ivar key: Key of the configuration. Required.
    :vartype key: str
    :ivar value: Value of the configuration. Required.
    :vartype value: str
    """

    key: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Key of the configuration. Required."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of the configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphNodeConnection(_Model):
    """DataflowGraph DataflowGraphNode Connection.

    :ivar from_property: Information about the source node. Required.
    :vartype from_property: ~azure.mgmt.iotoperations.models.DataflowGraphConnectionInput
    :ivar to: Information about the destination node. Required.
    :vartype to: ~azure.mgmt.iotoperations.models.DataflowGraphConnectionOutput
    """

    from_property: "_models.DataflowGraphConnectionInput" = rest_field(
        name="from", visibility=["read", "create", "update", "delete", "query"]
    )
    """Information about the source node. Required."""
    to: "_models.DataflowGraphConnectionOutput" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Information about the destination node. Required."""

    @overload
    def __init__(
        self,
        *,
        from_property: "_models.DataflowGraphConnectionInput",
        to: "_models.DataflowGraphConnectionOutput",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphNodeGraphSettings(_Model):
    """DataflowGraph graph node settings.

    :ivar registry_endpoint_ref: Reference to the registry endpoint for pulling the artifact.
     Required.
    :vartype registry_endpoint_ref: str
    :ivar artifact: The artifact name and version to pull. Required.
    :vartype artifact: str
    :ivar configuration: Configuration key-value pairs.
    :vartype configuration:
     list[~azure.mgmt.iotoperations.models.DataflowGraphGraphNodeConfiguration]
    """

    registry_endpoint_ref: str = rest_field(
        name="registryEndpointRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference to the registry endpoint for pulling the artifact. Required."""
    artifact: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The artifact name and version to pull. Required."""
    configuration: Optional[List["_models.DataflowGraphGraphNodeConfiguration"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration key-value pairs."""

    @overload
    def __init__(
        self,
        *,
        registry_endpoint_ref: str,
        artifact: str,
        configuration: Optional[List["_models.DataflowGraphGraphNodeConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphProperties(_Model):
    """DataflowGraph properties.

    :ivar mode: The mode of the dataflow graph. Known values are: "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar request_disk_persistence: Disk persistence mode. Known values are: "Enabled" and
     "Disabled".
    :vartype request_disk_persistence: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar nodes: List of nodes in the dataflow graph. Required.
    :vartype nodes: list[~azure.mgmt.iotoperations.models.DataflowGraphNode]
    :ivar node_connections: List of connections between nodes in the dataflow graph. Required.
    :vartype node_connections: list[~azure.mgmt.iotoperations.models.DataflowGraphNodeConnection]
    :ivar provisioning_state: The provisioning state of the dataflow graph. Known values are:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The mode of the dataflow graph. Known values are: \"Enabled\" and \"Disabled\"."""
    request_disk_persistence: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        name="requestDiskPersistence", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disk persistence mode. Known values are: \"Enabled\" and \"Disabled\"."""
    nodes: List["_models.DataflowGraphNode"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of nodes in the dataflow graph. Required."""
    node_connections: List["_models.DataflowGraphNodeConnection"] = rest_field(
        name="nodeConnections", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of connections between nodes in the dataflow graph. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the dataflow graph. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        nodes: List["_models.DataflowGraphNode"],
        node_connections: List["_models.DataflowGraphNodeConnection"],
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        request_disk_persistence: Optional[Union[str, "_models.OperationalMode"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphResource(ProxyResource):
    """Instance dataflowEndpoint resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.DataflowGraphProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.DataflowGraphProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataflowGraphProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphSchemaSettings(_Model):
    """DataflowGraph output schema settings.

    :ivar serialization_format: Output serialization format. Known values are: "Delta", "Json",
     "Parquet", and "Avro".
    :vartype serialization_format: str or
     ~azure.mgmt.iotoperations.models.DataflowGraphSerializationFormat
    :ivar schema_ref: Reference to the schema that describes the output of the transformation.
     Required.
    :vartype schema_ref: str
    """

    serialization_format: Optional[Union[str, "_models.DataflowGraphSerializationFormat"]] = rest_field(
        name="serializationFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Output serialization format. Known values are: \"Delta\", \"Json\", \"Parquet\", and \"Avro\"."""
    schema_ref: str = rest_field(name="schemaRef", visibility=["read", "create", "update", "delete", "query"])
    """Reference to the schema that describes the output of the transformation. Required."""

    @overload
    def __init__(
        self,
        *,
        schema_ref: str,
        serialization_format: Optional[Union[str, "_models.DataflowGraphSerializationFormat"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowGraphSourceNode(DataflowGraphNode, discriminator="Source"):
    """DataflowGraph source node properties.

    :ivar name: Name of the node. Required.
    :vartype name: str
    :ivar type: Type of the source node. Required. Dataflow source node.
    :vartype type: str or ~azure.mgmt.iotoperations.models.SOURCE
    :ivar source_settings: Source configuration. Required.
    :vartype source_settings: ~azure.mgmt.iotoperations.models.DataflowGraphSourceSettings
    """

    type: Literal[DataflowGraphNodeType.SOURCE] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of the source node. Required. Dataflow source node."""
    source_settings: "_models.DataflowGraphSourceSettings" = rest_field(
        name="sourceSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Source configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        source_settings: "_models.DataflowGraphSourceSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DataflowGraphNodeType.SOURCE, **kwargs)


class DataflowGraphSourceSettings(_Model):
    """DataflowGraph source node settings.

    :ivar endpoint_ref: The endpoint reference for the source. Required.
    :vartype endpoint_ref: str
    :ivar data_sources: List of data sources. Required.
    :vartype data_sources: list[str]
    """

    endpoint_ref: str = rest_field(name="endpointRef", visibility=["read", "create", "update", "delete", "query"])
    """The endpoint reference for the source. Required."""
    data_sources: List[str] = rest_field(name="dataSources", visibility=["read", "create", "update", "delete", "query"])
    """List of data sources. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint_ref: str,
        data_sources: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowOpenTelemetryAuthentication(_Model):
    """Dataflow OpenTelemetry authentication properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataflowOpenTelemetryAnonymousAuthentication,
    DataflowOpenTelemetryServiceAccountAuthentication,
    DataflowOpenTelemetryX509CertificateAuthentication

    :ivar method: The authentication method. Required. Known values are: "ServiceAccountToken",
     "X509Certificate", and "Anonymous".
    :vartype method: str or
     ~azure.mgmt.iotoperations.models.DataflowOpenTelemetryAuthenticationMethod
    """

    __mapping__: Dict[str, _Model] = {}
    method: str = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])
    """The authentication method. Required. Known values are: \"ServiceAccountToken\",
     \"X509Certificate\", and \"Anonymous\"."""

    @overload
    def __init__(
        self,
        *,
        method: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowOpenTelemetryAnonymousAuthentication(
    DataflowOpenTelemetryAuthentication, discriminator="Anonymous"
):  # pylint: disable=name-too-long
    """DataflowOpenTelemetryAnonymousAuthentication properties.

    :ivar method: The authentication method. Required. Connects anonymously.
    :vartype method: str or ~azure.mgmt.iotoperations.models.ANONYMOUS
    :ivar anonymous_settings: Settings for the anonymous connection. Required.
    :vartype anonymous_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationAnonymous
    """

    method: Literal[DataflowOpenTelemetryAuthenticationMethod.ANONYMOUS] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. Connects anonymously."""
    anonymous_settings: "_models.DataflowEndpointAuthenticationAnonymous" = rest_field(
        name="anonymousSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for the anonymous connection. Required."""

    @overload
    def __init__(
        self,
        *,
        anonymous_settings: "_models.DataflowEndpointAuthenticationAnonymous",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=DataflowOpenTelemetryAuthenticationMethod.ANONYMOUS, **kwargs)


class DataflowOpenTelemetryServiceAccountAuthentication(
    DataflowOpenTelemetryAuthentication, discriminator="ServiceAccountToken"
):  # pylint: disable=name-too-long
    """DataflowOpenTelemetryServiceAccountAuthentication properties.

    :ivar method: The authentication method. Required. Uses serviceaccount token.
    :vartype method: str or ~azure.mgmt.iotoperations.models.SERVICE_ACCOUNT_TOKEN
    :ivar service_account_token_settings: Kubernetes service account token authentication.
     Required.
    :vartype service_account_token_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationServiceAccountToken
    """

    method: Literal[DataflowOpenTelemetryAuthenticationMethod.SERVICE_ACCOUNT_TOKEN] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. Uses serviceaccount token."""
    service_account_token_settings: "_models.DataflowEndpointAuthenticationServiceAccountToken" = rest_field(
        name="serviceAccountTokenSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes service account token authentication. Required."""

    @overload
    def __init__(
        self,
        *,
        service_account_token_settings: "_models.DataflowEndpointAuthenticationServiceAccountToken",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=DataflowOpenTelemetryAuthenticationMethod.SERVICE_ACCOUNT_TOKEN, **kwargs)


class DataflowOpenTelemetryX509CertificateAuthentication(
    DataflowOpenTelemetryAuthentication, discriminator="X509Certificate"
):  # pylint: disable=name-too-long
    """DataflowOpenTelemetryX509CertificateAuthentication properties.

    :ivar method: The authentication method. Required. Uses x509 certificate.
    :vartype method: str or ~azure.mgmt.iotoperations.models.X509_CERTIFICATE
    :ivar x509_certificate_settings: X.509 certificate authentication settings. Required.
    :vartype x509_certificate_settings:
     ~azure.mgmt.iotoperations.models.DataflowEndpointAuthenticationX509
    """

    method: Literal[DataflowOpenTelemetryAuthenticationMethod.X509_CERTIFICATE] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. Uses x509 certificate."""
    x509_certificate_settings: "_models.DataflowEndpointAuthenticationX509" = rest_field(
        name="x509CertificateSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """X.509 certificate authentication settings. Required."""

    @overload
    def __init__(
        self,
        *,
        x509_certificate_settings: "_models.DataflowEndpointAuthenticationX509",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=DataflowOpenTelemetryAuthenticationMethod.X509_CERTIFICATE, **kwargs)


class DataflowOperation(_Model):
    """Dataflow Operation properties. NOTE - One only method is allowed to be used for one entry.

    :ivar operation_type: Type of operation. Required. Known values are: "Source", "Destination",
     and "BuiltInTransformation".
    :vartype operation_type: str or ~azure.mgmt.iotoperations.models.OperationType
    :ivar name: Optional user provided name of the transformation.
    :vartype name: str
    :ivar source_settings: Source configuration.
    :vartype source_settings: ~azure.mgmt.iotoperations.models.DataflowSourceOperationSettings
    :ivar built_in_transformation_settings: Built In Transformation configuration.
    :vartype built_in_transformation_settings:
     ~azure.mgmt.iotoperations.models.DataflowBuiltInTransformationSettings
    :ivar destination_settings: Destination configuration.
    :vartype destination_settings:
     ~azure.mgmt.iotoperations.models.DataflowDestinationOperationSettings
    """

    operation_type: Union[str, "_models.OperationType"] = rest_field(
        name="operationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of operation. Required. Known values are: \"Source\", \"Destination\", and
     \"BuiltInTransformation\"."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional user provided name of the transformation."""
    source_settings: Optional["_models.DataflowSourceOperationSettings"] = rest_field(
        name="sourceSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Source configuration."""
    built_in_transformation_settings: Optional["_models.DataflowBuiltInTransformationSettings"] = rest_field(
        name="builtInTransformationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Built In Transformation configuration."""
    destination_settings: Optional["_models.DataflowDestinationOperationSettings"] = rest_field(
        name="destinationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Destination configuration."""

    @overload
    def __init__(
        self,
        *,
        operation_type: Union[str, "_models.OperationType"],
        name: Optional[str] = None,
        source_settings: Optional["_models.DataflowSourceOperationSettings"] = None,
        built_in_transformation_settings: Optional["_models.DataflowBuiltInTransformationSettings"] = None,
        destination_settings: Optional["_models.DataflowDestinationOperationSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowProfileProperties(_Model):
    """DataflowProfile Resource properties.

    :ivar diagnostics: Spec defines the desired identities of NBC diagnostics settings.
    :vartype diagnostics: ~azure.mgmt.iotoperations.models.ProfileDiagnostics
    :ivar instance_count: To manually scale the dataflow profile, specify the maximum number of
     instances you want to run.
    :vartype instance_count: int
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    diagnostics: Optional["_models.ProfileDiagnostics"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Spec defines the desired identities of NBC diagnostics settings."""
    instance_count: Optional[int] = rest_field(
        name="instanceCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """To manually scale the dataflow profile, specify the maximum number of instances you want to
     run."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        diagnostics: Optional["_models.ProfileDiagnostics"] = None,
        instance_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowProfileResource(ProxyResource):
    """Instance dataflowProfile resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.DataflowProfileProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.DataflowProfileProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataflowProfileProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowProperties(_Model):
    """Dataflow Resource properties.

    :ivar mode: Mode for Dataflow. Optional; defaults to Enabled. Known values are: "Enabled" and
     "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar operations: List of operations including source and destination references as well as
     transformation. Required.
    :vartype operations: list[~azure.mgmt.iotoperations.models.DataflowOperation]
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for Dataflow. Optional; defaults to Enabled. Known values are: \"Enabled\" and
     \"Disabled\"."""
    operations: List["_models.DataflowOperation"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of operations including source and destination references as well as transformation.
     Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        operations: List["_models.DataflowOperation"],
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowResource(ProxyResource):
    """Instance dataflowProfile dataflow resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.DataflowProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.DataflowProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataflowProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataflowSourceOperationSettings(_Model):
    """Dataflow Source Operation properties.

    :ivar endpoint_ref: Reference to the Dataflow Endpoint resource. Can only be of Broker and
     Kafka type. Required.
    :vartype endpoint_ref: str
    :ivar asset_ref: Reference to the resource in Azure Device Registry where the data in the
     endpoint originates from.
    :vartype asset_ref: str
    :ivar serialization_format: Content is a JSON Schema. Allowed: JSON Schema/draft-7. "Json"
    :vartype serialization_format: str or
     ~azure.mgmt.iotoperations.models.SourceSerializationFormat
    :ivar schema_ref: Schema CR reference. Data will be deserialized according to the schema, and
     dropped if it doesn't match.
    :vartype schema_ref: str
    :ivar data_sources: List of source locations. Can be Broker or Kafka topics. Supports wildcards
     # and +. Required.
    :vartype data_sources: list[str]
    """

    endpoint_ref: str = rest_field(name="endpointRef", visibility=["read", "create", "update", "delete", "query"])
    """Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type. Required."""
    asset_ref: Optional[str] = rest_field(name="assetRef", visibility=["read", "create", "update", "delete", "query"])
    """Reference to the resource in Azure Device Registry where the data in the endpoint originates
     from."""
    serialization_format: Optional[Union[str, "_models.SourceSerializationFormat"]] = rest_field(
        name="serializationFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Content is a JSON Schema. Allowed: JSON Schema/draft-7. \"Json\""""
    schema_ref: Optional[str] = rest_field(name="schemaRef", visibility=["read", "create", "update", "delete", "query"])
    """Schema CR reference. Data will be deserialized according to the schema, and dropped if it
     doesn't match."""
    data_sources: List[str] = rest_field(name="dataSources", visibility=["read", "create", "update", "delete", "query"])
    """List of source locations. Can be Broker or Kafka topics. Supports wildcards # and +. Required."""

    @overload
    def __init__(
        self,
        *,
        endpoint_ref: str,
        data_sources: List[str],
        asset_ref: Optional[str] = None,
        serialization_format: Optional[Union[str, "_models.SourceSerializationFormat"]] = None,
        schema_ref: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticsLogs(_Model):
    """Diagnostic Log properties.

    :ivar level: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
    :vartype level: str
    """

    level: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'."""

    @overload
    def __init__(
        self,
        *,
        level: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskBackedMessageBuffer(_Model):
    """DiskBackedMessageBuffer properties.

    :ivar max_size: The max size of the message buffer on disk. If a PVC template is specified
     using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as
     the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor
     persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as
     its limit. See `https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
     <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir>`_ for details. Required.
    :vartype max_size: str
    :ivar ephemeral_volume_claim_spec: Use the specified persistent volume claim template to mount
     a "generic ephemeral volume" for the message buffer. See
     `https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes>`_
     for details.
    :vartype ephemeral_volume_claim_spec: ~azure.mgmt.iotoperations.models.VolumeClaimSpec
    :ivar persistent_volume_claim_spec: Use the specified persistent volume claim template to mount
     a persistent volume for the message buffer.
    :vartype persistent_volume_claim_spec: ~azure.mgmt.iotoperations.models.VolumeClaimSpec
    """

    max_size: str = rest_field(name="maxSize", visibility=["read", "create", "update", "delete", "query"])
    """The max size of the message buffer on disk. If a PVC template is specified using one of
     ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request
     and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor
     persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as
     its limit. See `https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
     <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir>`_ for details. Required."""
    ephemeral_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = rest_field(
        name="ephemeralVolumeClaimSpec", visibility=["read", "create", "update", "delete", "query"]
    )
    """Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for
     the message buffer. See
     `https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes>`_
     for details."""
    persistent_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = rest_field(
        name="persistentVolumeClaimSpec", visibility=["read", "create", "update", "delete", "query"]
    )
    """Use the specified persistent volume claim template to mount a persistent volume for the message
     buffer."""

    @overload
    def __init__(
        self,
        *,
        max_size: str,
        ephemeral_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = None,
        persistent_volume_claim_spec: Optional["_models.VolumeClaimSpec"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.iotoperations.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.iotoperations.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.iotoperations.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtendedLocation(_Model):
    """Extended location is an extension of Azure locations. They provide a way to use their Azure ARC
    enabled Kubernetes clusters as target locations for deploying Azure services instances.

    :ivar name: The name of the extended location. Required.
    :vartype name: str
    :ivar type: Type of ExtendedLocation. Required. "CustomLocation"
    :vartype type: str or ~azure.mgmt.iotoperations.models.ExtendedLocationType
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the extended location. Required."""
    type: Union[str, "_models.ExtendedLocationType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of ExtendedLocation. Required. \"CustomLocation\""""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "_models.ExtendedLocationType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Frontend(_Model):
    """The desired properties of the frontend instances of the Broker.

    :ivar replicas: The desired number of frontend instances (pods). Required.
    :vartype replicas: int
    :ivar workers: Number of logical frontend workers per instance (pod).
    :vartype workers: int
    """

    replicas: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The desired number of frontend instances (pods). Required."""
    workers: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Number of logical frontend workers per instance (pod)."""

    @overload
    def __init__(
        self,
        *,
        replicas: int,
        workers: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateResourceLimits(_Model):
    """GenerateResourceLimits properties.

    :ivar cpu: The toggle to enable/disable cpu resource limits. Known values are: "Enabled" and
     "Disabled".
    :vartype cpu: str or ~azure.mgmt.iotoperations.models.OperationalMode
    """

    cpu: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The toggle to enable/disable cpu resource limits. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        cpu: Optional[Union[str, "_models.OperationalMode"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceFeature(_Model):
    """The features of the AIO Instance.

    :ivar mode: The state of the feature. Known values are: "Stable", "Preview", and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.InstanceFeatureMode
    :ivar settings: The settings of the feature.
    :vartype settings: dict[str, str or ~azure.mgmt.iotoperations.models.OperationalMode]
    """

    mode: Optional[Union[str, "_models.InstanceFeatureMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The state of the feature. Known values are: \"Stable\", \"Preview\", and \"Disabled\"."""
    settings: Optional[Dict[str, Union[str, "_models.OperationalMode"]]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The settings of the feature."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.InstanceFeatureMode"]] = None,
        settings: Optional[Dict[str, Union[str, "_models.OperationalMode"]]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstancePatchModel(_Model):
    """The Instance update model.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.iotoperations.models.ManagedServiceIdentity
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceProperties(_Model):
    """The properties of the Instance resource.

    :ivar description: Detailed description of the Instance.
    :vartype description: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    :ivar version: The Azure IoT Operations version.
    :vartype version: str
    :ivar schema_registry_ref: The reference to the Schema Registry for this AIO Instance.
     Required.
    :vartype schema_registry_ref: ~azure.mgmt.iotoperations.models.SchemaRegistryRef
    :ivar default_secret_provider_class_ref: The reference to the AIO Secret provider class.
    :vartype default_secret_provider_class_ref:
     ~azure.mgmt.iotoperations.models.SecretProviderClassRef
    :ivar features: The features of the AIO Instance.
    :vartype features: dict[str, ~azure.mgmt.iotoperations.models.InstanceFeature]
    :ivar adr_namespace_ref: The Azure Device Registry Namespace used by Assets, Discovered Assets
     and devices.
    :vartype adr_namespace_ref: ~azure.mgmt.iotoperations.models.AzureDeviceRegistryNamespaceRef
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Detailed description of the Instance."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    version: Optional[str] = rest_field(visibility=["read"])
    """The Azure IoT Operations version."""
    schema_registry_ref: "_models.SchemaRegistryRef" = rest_field(
        name="schemaRegistryRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The reference to the Schema Registry for this AIO Instance. Required."""
    default_secret_provider_class_ref: Optional["_models.SecretProviderClassRef"] = rest_field(
        name="defaultSecretProviderClassRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The reference to the AIO Secret provider class."""
    features: Optional[Dict[str, "_models.InstanceFeature"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The features of the AIO Instance."""
    adr_namespace_ref: Optional["_models.AzureDeviceRegistryNamespaceRef"] = rest_field(
        name="adrNamespaceRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure Device Registry Namespace used by Assets, Discovered Assets and devices."""

    @overload
    def __init__(
        self,
        *,
        schema_registry_ref: "_models.SchemaRegistryRef",
        description: Optional[str] = None,
        default_secret_provider_class_ref: Optional["_models.SecretProviderClassRef"] = None,
        features: Optional[Dict[str, "_models.InstanceFeature"]] = None,
        adr_namespace_ref: Optional["_models.AzureDeviceRegistryNamespaceRef"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceResource(TrackedResource):
    """A Instance resource is a logical container for a set of child resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.InstanceProperties
    :ivar extended_location: Edge location of the resource. Required.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.iotoperations.models.ManagedServiceIdentity
    """

    properties: Optional["_models.InstanceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Edge location of the resource. Required."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.InstanceProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesReference(_Model):
    """Kubernetes reference.

    :ivar api_group: APIGroup is the group for the resource being referenced. If APIGroup is not
     specified, the specified Kind must be in the core API group. For any other third-party types,
     APIGroup is required.
    :vartype api_group: str
    :ivar kind: Kind is the type of resource being referenced. Required.
    :vartype kind: str
    :ivar name: Name is the name of resource being referenced. Required.
    :vartype name: str
    :ivar namespace: Namespace is the namespace of the resource being referenced. This field is
     required when the resource has a namespace.
    :vartype namespace: str
    """

    api_group: Optional[str] = rest_field(name="apiGroup", visibility=["read", "create", "update", "delete", "query"])
    """APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
     specified Kind must be in the core API group. For any other third-party types, APIGroup is
     required."""
    kind: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind is the type of resource being referenced. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name is the name of resource being referenced. Required."""
    namespace: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Namespace is the namespace of the resource being referenced. This field is required when the
     resource has a namespace."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
        name: str,
        api_group: Optional[str] = None,
        namespace: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListenerPort(_Model):
    """Defines a TCP port on which a ``BrokerListener`` listens.

    :ivar authentication_ref: Reference to client authentication settings. Omit to disable
     authentication.
    :vartype authentication_ref: str
    :ivar authorization_ref: Reference to client authorization settings. Omit to disable
     authorization.
    :vartype authorization_ref: str
    :ivar node_port: Kubernetes node port. Only relevant when this port is associated with a
     ``NodePort`` listener.
    :vartype node_port: int
    :ivar port: TCP port for accepting client connections. Required.
    :vartype port: int
    :ivar protocol: Protocol to use for client connections. Known values are: "Mqtt" and
     "WebSockets".
    :vartype protocol: str or ~azure.mgmt.iotoperations.models.BrokerProtocolType
    :ivar tls: TLS server certificate settings for this port. Omit to disable TLS.
    :vartype tls: ~azure.mgmt.iotoperations.models.TlsCertMethod
    """

    authentication_ref: Optional[str] = rest_field(
        name="authenticationRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference to client authentication settings. Omit to disable authentication."""
    authorization_ref: Optional[str] = rest_field(
        name="authorizationRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reference to client authorization settings. Omit to disable authorization."""
    node_port: Optional[int] = rest_field(name="nodePort", visibility=["read", "create", "update", "delete", "query"])
    """Kubernetes node port. Only relevant when this port is associated with a ``NodePort`` listener."""
    port: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TCP port for accepting client connections. Required."""
    protocol: Optional[Union[str, "_models.BrokerProtocolType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Protocol to use for client connections. Known values are: \"Mqtt\" and \"WebSockets\"."""
    tls: Optional["_models.TlsCertMethod"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """TLS server certificate settings for this port. Omit to disable TLS."""

    @overload
    def __init__(
        self,
        *,
        port: int,
        authentication_ref: Optional[str] = None,
        authorization_ref: Optional[str] = None,
        node_port: Optional[int] = None,
        protocol: Optional[Union[str, "_models.BrokerProtocolType"]] = None,
        tls: Optional["_models.TlsCertMethod"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LocalKubernetesReference(_Model):
    """Kubernetes reference.

    :ivar api_group: APIGroup is the group for the resource being referenced. If APIGroup is not
     specified, the specified Kind must be in the core API group. For any other third-party types,
     APIGroup is required.
    :vartype api_group: str
    :ivar kind: Kind is the type of resource being referenced. Required.
    :vartype kind: str
    :ivar name: Name is the name of resource being referenced. Required.
    :vartype name: str
    """

    api_group: Optional[str] = rest_field(name="apiGroup", visibility=["read", "create", "update", "delete", "query"])
    """APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
     specified Kind must be in the core API group. For any other third-party types, APIGroup is
     required."""
    kind: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind is the type of resource being referenced. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name is the name of resource being referenced. Required."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
        name: str,
        api_group: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_Model):
    """Managed service identity (system assigned and/or user assigned identities).

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.iotoperations.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.iotoperations.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Metrics(_Model):
    """Diagnostic Metrics properties.

    :ivar prometheus_port: The prometheus port to expose the metrics.
    :vartype prometheus_port: int
    """

    prometheus_port: Optional[int] = rest_field(
        name="prometheusPort", visibility=["read", "create", "update", "delete", "query"]
    )
    """The prometheus port to expose the metrics."""

    @overload
    def __init__(
        self,
        *,
        prometheus_port: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.iotoperations.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.iotoperations.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.iotoperations.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class PrincipalDefinition(_Model):
    """PrincipalDefinition properties of Rule.

    :ivar attributes: A list of key-value pairs that match the attributes of the clients. The
     attributes are case-sensitive and must match the attributes provided by the clients during
     authentication.
    :vartype attributes: list[dict[str, str]]
    :ivar client_ids: A list of client IDs that match the clients. The client IDs are
     case-sensitive and must match the client IDs provided by the clients during connection.
    :vartype client_ids: list[str]
    :ivar usernames: A list of usernames that match the clients. The usernames are case-sensitive
     and must match the usernames provided by the clients during authentication.
    :vartype usernames: list[str]
    """

    attributes: Optional[List[Dict[str, str]]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of key-value pairs that match the attributes of the clients. The attributes are
     case-sensitive and must match the attributes provided by the clients during authentication."""
    client_ids: Optional[List[str]] = rest_field(
        name="clientIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of client IDs that match the clients. The client IDs are case-sensitive and must match
     the client IDs provided by the clients during connection."""
    usernames: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of usernames that match the clients. The usernames are case-sensitive and must match the
     usernames provided by the clients during authentication."""

    @overload
    def __init__(
        self,
        *,
        attributes: Optional[List[Dict[str, str]]] = None,
        client_ids: Optional[List[str]] = None,
        usernames: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProfileDiagnostics(_Model):
    """DataflowProfile Diagnostics properties.

    :ivar logs: Diagnostic log settings for the resource.
    :vartype logs: ~azure.mgmt.iotoperations.models.DiagnosticsLogs
    :ivar metrics: The metrics settings for the resource.
    :vartype metrics: ~azure.mgmt.iotoperations.models.Metrics
    """

    logs: Optional["_models.DiagnosticsLogs"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Diagnostic log settings for the resource."""
    metrics: Optional["_models.Metrics"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metrics settings for the resource."""

    @overload
    def __init__(
        self,
        *,
        logs: Optional["_models.DiagnosticsLogs"] = None,
        metrics: Optional["_models.Metrics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointAuthentication(_Model):
    """Model for RegistryEndpointAuthentication.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    RegistryEndpointAnonymousAuthentication, RegistryEndpointArtifactPullSecretAuthentication,
    RegistryEndpointSystemAssignedIdentityAuthentication,
    RegistryEndpointUserAssignedIdentityAuthentication

    :ivar method: The authentication method. Required. Known values are:
     "SystemAssignedManagedIdentity", "UserAssignedManagedIdentity", "Anonymous", and
     "ArtifactPullSecret".
    :vartype method: str or ~azure.mgmt.iotoperations.models.RegistryEndpointAuthenticationMethod
    """

    __mapping__: Dict[str, _Model] = {}
    method: str = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])
    """The authentication method. Required. Known values are: \"SystemAssignedManagedIdentity\",
     \"UserAssignedManagedIdentity\", \"Anonymous\", and \"ArtifactPullSecret\"."""

    @overload
    def __init__(
        self,
        *,
        method: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointAnonymousAuthentication(RegistryEndpointAuthentication, discriminator="Anonymous"):
    """Anonymous authentication.

    :ivar method: The authentication method. Required. Anonymous Option
    :vartype method: str or ~azure.mgmt.iotoperations.models.ANONYMOUS
    :ivar anonymous_settings: Anonymous authentication properties. Required.
    :vartype anonymous_settings: ~azure.mgmt.iotoperations.models.RegistryEndpointAnonymousSettings
    """

    method: Literal[RegistryEndpointAuthenticationMethod.ANONYMOUS] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. Anonymous Option"""
    anonymous_settings: "_models.RegistryEndpointAnonymousSettings" = rest_field(
        name="anonymousSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Anonymous authentication properties. Required."""

    @overload
    def __init__(
        self,
        *,
        anonymous_settings: "_models.RegistryEndpointAnonymousSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=RegistryEndpointAuthenticationMethod.ANONYMOUS, **kwargs)


class RegistryEndpointAnonymousSettings(_Model):
    """RegistryEndpoint Anonymous authentication properties."""


class RegistryEndpointArtifactPullSecretAuthentication(
    RegistryEndpointAuthentication, discriminator="ArtifactPullSecret"
):  # pylint: disable=name-too-long
    """Artifact Pull Secret authentication.

    :ivar method: The authentication method. Required. Artifact Pull Secret authentication
    :vartype method: str or ~azure.mgmt.iotoperations.models.ARTIFACT_PULL_SECRET
    :ivar artifact_pull_secret_settings: Artifact Pull Secret authentication properties. Required.
    :vartype artifact_pull_secret_settings:
     ~azure.mgmt.iotoperations.models.RegistryEndpointArtifactPullSecretSettings
    """

    method: Literal[RegistryEndpointAuthenticationMethod.ARTIFACT_PULL_SECRET] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. Artifact Pull Secret authentication"""
    artifact_pull_secret_settings: "_models.RegistryEndpointArtifactPullSecretSettings" = rest_field(
        name="artifactPullSecretSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Artifact Pull Secret authentication properties. Required."""

    @overload
    def __init__(
        self,
        *,
        artifact_pull_secret_settings: "_models.RegistryEndpointArtifactPullSecretSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=RegistryEndpointAuthenticationMethod.ARTIFACT_PULL_SECRET, **kwargs)


class RegistryEndpointArtifactPullSecretSettings(_Model):  # pylint: disable=name-too-long
    """RegistryEndpoint Artifact Pull Secret authentication properties.

    :ivar secret_ref: The name of the kubernetes secret that contains the artifact pull secret.
     Required.
    :vartype secret_ref: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the kubernetes secret that contains the artifact pull secret. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointProperties(_Model):
    """RegistryEndpoint properties.

    :ivar host: The Container Registry endpoint hostname. Required.
    :vartype host: str
    :ivar authentication: The authentication settings for the Azure Container Registry. Required.
    :vartype authentication: ~azure.mgmt.iotoperations.models.RegistryEndpointAuthentication
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.iotoperations.models.ProvisioningState
    :ivar trust_settings: Trust settings for the registry endpoint.
    :vartype trust_settings: ~azure.mgmt.iotoperations.models.RegistryEndpointTrustedSettings
    """

    host: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Container Registry endpoint hostname. Required."""
    authentication: "_models.RegistryEndpointAuthentication" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The authentication settings for the Azure Container Registry. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    trust_settings: Optional["_models.RegistryEndpointTrustedSettings"] = rest_field(
        name="trustSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trust settings for the registry endpoint."""

    @overload
    def __init__(
        self,
        *,
        host: str,
        authentication: "_models.RegistryEndpointAuthentication",
        trust_settings: Optional["_models.RegistryEndpointTrustedSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointResource(ProxyResource):
    """RegistryEndpoint resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.iotoperations.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.iotoperations.models.RegistryEndpointProperties
    :ivar extended_location: Edge location of the resource.
    :vartype extended_location: ~azure.mgmt.iotoperations.models.ExtendedLocation
    """

    properties: Optional["_models.RegistryEndpointProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(
        name="extendedLocation", visibility=["read", "create"]
    )
    """Edge location of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.RegistryEndpointProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointSystemAssignedIdentityAuthentication(
    RegistryEndpointAuthentication, discriminator="SystemAssignedManagedIdentity"
):  # pylint: disable=name-too-long
    """System assigned identity authentication.

    :ivar method: The authentication method. Required. SystemAssignedManagedIdentity type
    :vartype method: str or ~azure.mgmt.iotoperations.models.SYSTEM_ASSIGNED_MANAGED_IDENTITY
    :ivar system_assigned_managed_identity_settings: System assigned managed identity properties.
     Required.
    :vartype system_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.RegistryEndpointSystemAssignedManagedIdentitySettings
    """

    method: Literal[RegistryEndpointAuthenticationMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. SystemAssignedManagedIdentity type"""
    system_assigned_managed_identity_settings: "_models.RegistryEndpointSystemAssignedManagedIdentitySettings" = (
        rest_field(
            name="systemAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
        )
    )
    """System assigned managed identity properties. Required."""

    @overload
    def __init__(
        self,
        *,
        system_assigned_managed_identity_settings: "_models.RegistryEndpointSystemAssignedManagedIdentitySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=RegistryEndpointAuthenticationMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY, **kwargs)


class RegistryEndpointSystemAssignedManagedIdentitySettings(_Model):  # pylint: disable=name-too-long
    """System assigned managed identity properties.

    :ivar audience: Audience of the service to authenticate against. Optional; defaults to the
     audience for Service host configuration.
    :vartype audience: str
    """

    audience: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Audience of the service to authenticate against. Optional; defaults to the audience for Service
     host configuration."""

    @overload
    def __init__(
        self,
        *,
        audience: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointTrustedSettings(_Model):
    """RegistryEndpointTrustedSettings properties.

    :ivar trusted_signing_keys: The trust properties for the registry endpoint. Required.
    :vartype trusted_signing_keys:
     ~azure.mgmt.iotoperations.models.RegistryEndpointTrustedSigningKey
    """

    trusted_signing_keys: "_models.RegistryEndpointTrustedSigningKey" = rest_field(
        name="trustedSigningKeys", visibility=["read", "create", "update", "delete", "query"]
    )
    """The trust properties for the registry endpoint. Required."""

    @overload
    def __init__(
        self,
        *,
        trusted_signing_keys: "_models.RegistryEndpointTrustedSigningKey",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointTrustedSigningKey(_Model):
    """RegistryEndpoint Trust properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    RegistryEndpointTrustedSigningKeyConfigMap, RegistryEndpointTrustedSigningKeySecret

    :ivar type: The trust type for the registry endpoint. Required. Known values are: "Secret" and
     "ConfigMap".
    :vartype type: str or ~azure.mgmt.iotoperations.models.RegistryEndpointTrustedSigningKeyType
    """

    __mapping__: Dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """The trust type for the registry endpoint. Required. Known values are: \"Secret\" and
     \"ConfigMap\"."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegistryEndpointTrustedSigningKeyConfigMap(
    RegistryEndpointTrustedSigningKey, discriminator="ConfigMap"
):  # pylint: disable=name-too-long
    """Settings for RegistryEndpoint trust provided through a configmap.

    :ivar type: The trust type for the registry endpoint. Required. Trust settings stored in a
     Kubernetes ConfigMap.
    :vartype type: str or ~azure.mgmt.iotoperations.models.CONFIG_MAP
    :ivar config_map_ref: The name of the configmap. Required.
    :vartype config_map_ref: str
    """

    type: Literal[RegistryEndpointTrustedSigningKeyType.CONFIG_MAP] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The trust type for the registry endpoint. Required. Trust settings stored in a Kubernetes
     ConfigMap."""
    config_map_ref: str = rest_field(name="configMapRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the configmap. Required."""

    @overload
    def __init__(
        self,
        *,
        config_map_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=RegistryEndpointTrustedSigningKeyType.CONFIG_MAP, **kwargs)


class RegistryEndpointTrustedSigningKeySecret(RegistryEndpointTrustedSigningKey, discriminator="Secret"):
    """Settings for RegistryEndpoint trust provided through a secret.

    :ivar type: The trust type for the registry endpoint. Required. Trust settings stored in a
     Kubernetes Secret.
    :vartype type: str or ~azure.mgmt.iotoperations.models.SECRET
    :ivar secret_ref: The name of the secret. Required.
    :vartype secret_ref: str
    """

    type: Literal[RegistryEndpointTrustedSigningKeyType.SECRET] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The trust type for the registry endpoint. Required. Trust settings stored in a Kubernetes
     Secret."""
    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """The name of the secret. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=RegistryEndpointTrustedSigningKeyType.SECRET, **kwargs)


class RegistryEndpointUserAssignedIdentityAuthentication(
    RegistryEndpointAuthentication, discriminator="UserAssignedManagedIdentity"
):  # pylint: disable=name-too-long
    """User assigned identity authentication.

    :ivar method: The authentication method. Required. UserAssignedManagedIdentity type
    :vartype method: str or ~azure.mgmt.iotoperations.models.USER_ASSIGNED_MANAGED_IDENTITY
    :ivar user_assigned_managed_identity_settings: User assigned managed identity properties.
     Required.
    :vartype user_assigned_managed_identity_settings:
     ~azure.mgmt.iotoperations.models.RegistryEndpointUserAssignedManagedIdentitySettings
    """

    method: Literal[RegistryEndpointAuthenticationMethod.USER_ASSIGNED_MANAGED_IDENTITY] = rest_discriminator(name="method", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The authentication method. Required. UserAssignedManagedIdentity type"""
    user_assigned_managed_identity_settings: "_models.RegistryEndpointUserAssignedManagedIdentitySettings" = rest_field(
        name="userAssignedManagedIdentitySettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """User assigned managed identity properties. Required."""

    @overload
    def __init__(
        self,
        *,
        user_assigned_managed_identity_settings: "_models.RegistryEndpointUserAssignedManagedIdentitySettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, method=RegistryEndpointAuthenticationMethod.USER_ASSIGNED_MANAGED_IDENTITY, **kwargs)


class RegistryEndpointUserAssignedManagedIdentitySettings(_Model):  # pylint: disable=name-too-long
    """User assigned managed identity properties.

    :ivar client_id: Client ID for the user-assigned managed identity. Required.
    :vartype client_id: str
    :ivar scope: Resource identifier (application ID URI) of the resource, affixed with the
     .default suffix.
    :vartype scope: str
    :ivar tenant_id: Tenant ID. Required.
    :vartype tenant_id: str
    """

    client_id: str = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """Client ID for the user-assigned managed identity. Required."""
    scope: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource identifier (application ID URI) of the resource, affixed with the .default suffix."""
    tenant_id: str = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    """Tenant ID. Required."""

    @overload
    def __init__(
        self,
        *,
        client_id: str,
        tenant_id: str,
        scope: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SanForCert(_Model):
    """Subject Alternative Names (SANs) for certificate.

    :ivar dns: DNS SANs. Required.
    :vartype dns: list[str]
    :ivar ip: IP address SANs. Required.
    :vartype ip: list[str]
    """

    dns: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """DNS SANs. Required."""
    ip: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """IP address SANs. Required."""

    @overload
    def __init__(
        self,
        *,
        dns: List[str],
        ip: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SchemaRegistryRef(_Model):
    """The reference to the Schema Registry for this AIO Instance.

    :ivar resource_id: The resource ID of the Schema Registry. Required.
    :vartype resource_id: str
    """

    resource_id: str = rest_field(name="resourceId", visibility=["read", "create", "update", "delete", "query"])
    """The resource ID of the Schema Registry. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecretProviderClassRef(_Model):
    """The reference to the AIO Secret provider class.

    :ivar resource_id: The resource ID of the AIO Secret provider class. Required.
    :vartype resource_id: str
    """

    resource_id: str = rest_field(name="resourceId", visibility=["read", "create", "update", "delete", "query"])
    """The resource ID of the AIO Secret provider class. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SelfCheck(_Model):
    """Broker Diagnostic Self check properties.

    :ivar mode: The toggle to enable/disable self check. Known values are: "Enabled" and
     "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar interval_seconds: The self check interval.
    :vartype interval_seconds: int
    :ivar timeout_seconds: The timeout for self check.
    :vartype timeout_seconds: int
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The toggle to enable/disable self check. Known values are: \"Enabled\" and \"Disabled\"."""
    interval_seconds: Optional[int] = rest_field(
        name="intervalSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The self check interval."""
    timeout_seconds: Optional[int] = rest_field(
        name="timeoutSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The timeout for self check."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        interval_seconds: Optional[int] = None,
        timeout_seconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SelfTracing(_Model):
    """Diagnostic Self tracing properties.

    :ivar mode: The toggle to enable/disable self tracing. Known values are: "Enabled" and
     "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar interval_seconds: The self tracing interval.
    :vartype interval_seconds: int
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The toggle to enable/disable self tracing. Known values are: \"Enabled\" and \"Disabled\"."""
    interval_seconds: Optional[int] = rest_field(
        name="intervalSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """The self tracing interval."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        interval_seconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StateStoreResourceRule(_Model):
    """State Store Resource Rule properties.

    :ivar key_type: Allowed keyTypes pattern, string, binary. The key type used for matching, for
     example pattern tries to match the key to a glob-style pattern and string checks key is equal
     to value provided in keys. Required. Known values are: "Pattern", "String", and "Binary".
    :vartype key_type: str or ~azure.mgmt.iotoperations.models.StateStoreResourceKeyTypes
    :ivar keys_property: Give access to state store keys for the corresponding principals defined.
     When key type is pattern set glob-style pattern (e.g., '*', 'clients/*'). Required.
    :vartype keys_property: list[str]
    :ivar method: Give access for ``Read``, ``Write`` and ``ReadWrite`` access level. Required.
     Known values are: "Read", "Write", and "ReadWrite".
    :vartype method: str or ~azure.mgmt.iotoperations.models.StateStoreResourceDefinitionMethods
    """

    key_type: Union[str, "_models.StateStoreResourceKeyTypes"] = rest_field(
        name="keyType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Allowed keyTypes pattern, string, binary. The key type used for matching, for example pattern
     tries to match the key to a glob-style pattern and string checks key is equal to value provided
     in keys. Required. Known values are: \"Pattern\", \"String\", and \"Binary\"."""
    keys_property: List[str] = rest_field(name="keys", visibility=["read", "create", "update", "delete", "query"])
    """Give access to state store keys for the corresponding principals defined. When key type is
     pattern set glob-style pattern (e.g., '*', 'clients/*'). Required."""
    method: Union[str, "_models.StateStoreResourceDefinitionMethods"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Give access for ``Read``, ``Write`` and ``ReadWrite`` access level. Required. Known values are:
     \"Read\", \"Write\", and \"ReadWrite\"."""

    @overload
    def __init__(
        self,
        *,
        key_type: Union[str, "_models.StateStoreResourceKeyTypes"],
        keys_property: List[str],
        method: Union[str, "_models.StateStoreResourceDefinitionMethods"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubscriberQueueLimit(_Model):
    """The settings of Subscriber Queue Limit.

    :ivar length: The maximum length of the queue before messages start getting dropped.
    :vartype length: int
    :ivar strategy: The strategy to use for dropping messages from the queue. Known values are:
     "None" and "DropOldest".
    :vartype strategy: str or ~azure.mgmt.iotoperations.models.SubscriberMessageDropStrategy
    """

    length: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The maximum length of the queue before messages start getting dropped."""
    strategy: Optional[Union[str, "_models.SubscriberMessageDropStrategy"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The strategy to use for dropping messages from the queue. Known values are: \"None\" and
     \"DropOldest\"."""

    @overload
    def __init__(
        self,
        *,
        length: Optional[int] = None,
        strategy: Optional[Union[str, "_models.SubscriberMessageDropStrategy"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.iotoperations.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.iotoperations.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TlsCertMethod(_Model):
    """Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported.

    :ivar mode: Mode of TLS server certificate management. Required. Known values are: "Automatic"
     and "Manual".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.TlsCertMethodMode
    :ivar cert_manager_certificate_spec: Option 1 - Automatic TLS server certificate management
     with cert-manager.
    :vartype cert_manager_certificate_spec:
     ~azure.mgmt.iotoperations.models.CertManagerCertificateSpec
    :ivar manual: Option 2 - Manual TLS server certificate management through a defined secret.
    :vartype manual: ~azure.mgmt.iotoperations.models.X509ManualCertificate
    """

    mode: Union[str, "_models.TlsCertMethodMode"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode of TLS server certificate management. Required. Known values are: \"Automatic\" and
     \"Manual\"."""
    cert_manager_certificate_spec: Optional["_models.CertManagerCertificateSpec"] = rest_field(
        name="certManagerCertificateSpec", visibility=["read", "create", "update", "delete", "query"]
    )
    """Option 1 - Automatic TLS server certificate management with cert-manager."""
    manual: Optional["_models.X509ManualCertificate"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Option 2 - Manual TLS server certificate management through a defined secret."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.TlsCertMethodMode"],
        cert_manager_certificate_spec: Optional["_models.CertManagerCertificateSpec"] = None,
        manual: Optional["_models.X509ManualCertificate"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TlsProperties(_Model):
    """Tls properties.

    :ivar mode: Mode for TLS. Known values are: "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar trusted_ca_certificate_config_map_ref: Trusted CA certificate config map.
    :vartype trusted_ca_certificate_config_map_ref: str
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mode for TLS. Known values are: \"Enabled\" and \"Disabled\"."""
    trusted_ca_certificate_config_map_ref: Optional[str] = rest_field(
        name="trustedCaCertificateConfigMapRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Trusted CA certificate config map."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        trusted_ca_certificate_config_map_ref: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Traces(_Model):
    """Broker Diagnostic Trace properties.

    :ivar mode: The toggle to enable/disable traces. Known values are: "Enabled" and "Disabled".
    :vartype mode: str or ~azure.mgmt.iotoperations.models.OperationalMode
    :ivar cache_size_megabytes: The cache size in megabytes.
    :vartype cache_size_megabytes: int
    :ivar self_tracing: The self tracing properties.
    :vartype self_tracing: ~azure.mgmt.iotoperations.models.SelfTracing
    :ivar span_channel_capacity: The span channel capacity.
    :vartype span_channel_capacity: int
    """

    mode: Optional[Union[str, "_models.OperationalMode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The toggle to enable/disable traces. Known values are: \"Enabled\" and \"Disabled\"."""
    cache_size_megabytes: Optional[int] = rest_field(
        name="cacheSizeMegabytes", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cache size in megabytes."""
    self_tracing: Optional["_models.SelfTracing"] = rest_field(
        name="selfTracing", visibility=["read", "create", "update", "delete", "query"]
    )
    """The self tracing properties."""
    span_channel_capacity: Optional[int] = rest_field(
        name="spanChannelCapacity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The span channel capacity."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.OperationalMode"]] = None,
        cache_size_megabytes: Optional[int] = None,
        self_tracing: Optional["_models.SelfTracing"] = None,
        span_channel_capacity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_Model):
    """User assigned identity properties.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""


class VolumeClaimResourceRequirements(_Model):
    """VolumeClaimResourceRequirements properties.

    :ivar limits: Limits describes the maximum amount of compute resources allowed. More info:
     `https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>`_.
    :vartype limits: dict[str, str]
    :ivar requests: Requests describes the minimum amount of compute resources required. If
     Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
     otherwise to an implementation-defined value. More info:
     `https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>`_.
    :vartype requests: dict[str, str]
    :ivar claims: Claims lists the names of resources, defined in spec.resourceClaims, that are
     used by this container.

     This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

     This field is immutable. It can only be set for containers.
    :vartype claims: list[~azure.mgmt.iotoperations.models.VolumeClaimResourceRequirementsClaims]
    """

    limits: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Limits describes the maximum amount of compute resources allowed. More info:
     `https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>`_."""
    requests: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Requests describes the minimum amount of compute resources required. If Requests is omitted for
     a container, it defaults to Limits if that is explicitly specified, otherwise to an
     implementation-defined value. More info:
     `https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     <https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/>`_."""
    claims: Optional[List["_models.VolumeClaimResourceRequirementsClaims"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Claims lists the names of resources, defined in spec.resourceClaims, that are used by this
     container.
     
     This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     
     This field is immutable. It can only be set for containers."""

    @overload
    def __init__(
        self,
        *,
        limits: Optional[Dict[str, str]] = None,
        requests: Optional[Dict[str, str]] = None,
        claims: Optional[List["_models.VolumeClaimResourceRequirementsClaims"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VolumeClaimResourceRequirementsClaims(_Model):
    """VolumeClaimResourceRequirementsClaims properties.

    :ivar name: Name of the resource. This must match the name of a resource in
     spec.resourceClaims. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the resource. This must match the name of a resource in spec.resourceClaims. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VolumeClaimSpec(_Model):
    """VolumeClaimSpec properties.

    :ivar volume_name: VolumeName is the binding reference to the PersistentVolume backing this
     claim.
    :vartype volume_name: str
    :ivar volume_mode: volumeMode defines what type of volume is required by the claim. Value of
     Filesystem is implied when not included in claim spec. This is a beta feature.
    :vartype volume_mode: str
    :ivar storage_class_name: Name of the StorageClass required by the claim. More info:
     `https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>`_.
    :vartype storage_class_name: str
    :ivar access_modes: AccessModes contains the desired access modes the volume should have. More
     info: `https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>`_.
    :vartype access_modes: list[str]
    :ivar data_source: This field can be used to specify either: * An existing VolumeSnapshot
     object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If
     the provisioner or an external controller can support the specified data source, it will create
     a new volume based on the contents of the specified data source. If the AnyVolumeDataSource
     feature gate is enabled, this field will always have the same contents as the DataSourceRef
     field.
    :vartype data_source: ~azure.mgmt.iotoperations.models.LocalKubernetesReference
    :ivar data_source_ref: Specifies the object from which to populate the volume with data, if a
     non-empty volume is desired. This may be any local object from a non-empty API group (non core
     object) or a PersistentVolumeClaim object. When this field is specified, volume binding will
     only succeed if the type of the specified object matches some installed volume populator or
     dynamic provisioner. This field will replace the functionality of the DataSource field and as
     such if both fields are non-empty, they must have the same value. For backwards compatibility,
     both fields (DataSource and DataSourceRef) will be set to the same value automatically if one
     of them is empty and the other is non-empty. There are two important differences between
     DataSource and DataSourceRef: * While DataSource only allows two specific types of objects,
     DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While
     DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and
     generates an error if a disallowed value is specified. (Beta) Using this field requires the
     AnyVolumeDataSource feature gate to be enabled.
    :vartype data_source_ref: ~azure.mgmt.iotoperations.models.KubernetesReference
    :ivar resources: Resources represents the minimum resources the volume should have. If
     RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource
     requirements that are lower than previous value but must still be higher than capacity recorded
     in the status field of the claim. More info:
     `https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>`_.
    :vartype resources: ~azure.mgmt.iotoperations.models.VolumeClaimResourceRequirements
    :ivar selector: A label query over volumes to consider for binding.
    :vartype selector: ~azure.mgmt.iotoperations.models.VolumeClaimSpecSelector
    """

    volume_name: Optional[str] = rest_field(
        name="volumeName", visibility=["read", "create", "update", "delete", "query"]
    )
    """VolumeName is the binding reference to the PersistentVolume backing this claim."""
    volume_mode: Optional[str] = rest_field(
        name="volumeMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied
     when not included in claim spec. This is a beta feature."""
    storage_class_name: Optional[str] = rest_field(
        name="storageClassName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the StorageClass required by the claim. More info:
     `https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1>`_."""
    access_modes: Optional[List[str]] = rest_field(
        name="accessModes", visibility=["read", "create", "update", "delete", "query"]
    )
    """AccessModes contains the desired access modes the volume should have. More info:
     `https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1>`_."""
    data_source: Optional["_models.LocalKubernetesReference"] = rest_field(
        name="dataSource", visibility=["read", "create", "update", "delete", "query"]
    )
    """This field can be used to specify either: * An existing VolumeSnapshot object
     (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the
     provisioner or an external controller can support the specified data source, it will create a
     new volume based on the contents of the specified data source. If the AnyVolumeDataSource
     feature gate is enabled, this field will always have the same contents as the DataSourceRef
     field."""
    data_source_ref: Optional["_models.KubernetesReference"] = rest_field(
        name="dataSourceRef", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies the object from which to populate the volume with data, if a non-empty volume is
     desired. This may be any local object from a non-empty API group (non core object) or a
     PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if
     the type of the specified object matches some installed volume populator or dynamic
     provisioner. This field will replace the functionality of the DataSource field and as such if
     both fields are non-empty, they must have the same value. For backwards compatibility, both
     fields (DataSource and DataSourceRef) will be set to the same value automatically if one of
     them is empty and the other is non-empty. There are two important differences between
     DataSource and DataSourceRef: * While DataSource only allows two specific types of objects,
     DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While
     DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and
     generates an error if a disallowed value is specified. (Beta) Using this field requires the
     AnyVolumeDataSource feature gate to be enabled."""
    resources: Optional["_models.VolumeClaimResourceRequirements"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Resources represents the minimum resources the volume should have. If
     RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource
     requirements that are lower than previous value but must still be higher than capacity recorded
     in the status field of the claim. More info:
     `https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     <https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources>`_."""
    selector: Optional["_models.VolumeClaimSpecSelector"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A label query over volumes to consider for binding."""

    @overload
    def __init__(
        self,
        *,
        volume_name: Optional[str] = None,
        volume_mode: Optional[str] = None,
        storage_class_name: Optional[str] = None,
        access_modes: Optional[List[str]] = None,
        data_source: Optional["_models.LocalKubernetesReference"] = None,
        data_source_ref: Optional["_models.KubernetesReference"] = None,
        resources: Optional["_models.VolumeClaimResourceRequirements"] = None,
        selector: Optional["_models.VolumeClaimSpecSelector"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VolumeClaimSpecSelector(_Model):
    """VolumeClaimSpecSelector properties.

    :ivar match_expressions: MatchExpressions is a list of label selector requirements. The
     requirements are ANDed.
    :vartype match_expressions:
     list[~azure.mgmt.iotoperations.models.VolumeClaimSpecSelectorMatchExpressions]
    :ivar match_labels: MatchLabels is a map of {key,value} pairs. A single {key,value} in the
     matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the
     operator is "In", and the values array contains only "value". The requirements are ANDed.
    :vartype match_labels: dict[str, str]
    """

    match_expressions: Optional[List["_models.VolumeClaimSpecSelectorMatchExpressions"]] = rest_field(
        name="matchExpressions", visibility=["read", "create", "update", "delete", "query"]
    )
    """MatchExpressions is a list of label selector requirements. The requirements are ANDed."""
    match_labels: Optional[Dict[str, str]] = rest_field(
        name="matchLabels", visibility=["read", "create", "update", "delete", "query"]
    )
    """MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
     equivalent to an element of matchExpressions, whose key field is \"key\", the operator is
     \"In\", and the values array contains only \"value\". The requirements are ANDed."""

    @overload
    def __init__(
        self,
        *,
        match_expressions: Optional[List["_models.VolumeClaimSpecSelectorMatchExpressions"]] = None,
        match_labels: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VolumeClaimSpecSelectorMatchExpressions(_Model):
    """VolumeClaimSpecSelectorMatchExpressions properties.

    :ivar key: key is the label key that the selector applies to. Required.
    :vartype key: str
    :ivar operator: operator represents a key's relationship to a set of values. Valid operators
     are In, NotIn, Exists and DoesNotExist. Required. Known values are: "In", "NotIn", "Exists",
     and "DoesNotExist".
    :vartype operator: str or ~azure.mgmt.iotoperations.models.OperatorValues
    :ivar values_property: values is an array of string values. If the operator is In or NotIn, the
     values array must be non-empty. If the operator is Exists or DoesNotExist, the values array
     must be empty. This array is replaced during a strategic merge patch.
    :vartype values_property: list[str]
    """

    key: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """key is the label key that the selector applies to. Required."""
    operator: Union[str, "_models.OperatorValues"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """operator represents a key's relationship to a set of values. Valid operators are In, NotIn,
     Exists and DoesNotExist. Required. Known values are: \"In\", \"NotIn\", \"Exists\", and
     \"DoesNotExist\"."""
    values_property: Optional[List[str]] = rest_field(
        name="values", visibility=["read", "create", "update", "delete", "query"]
    )
    """values is an array of string values. If the operator is In or NotIn, the values array must be
     non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This
     array is replaced during a strategic merge patch."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        operator: Union[str, "_models.OperatorValues"],
        values_property: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class X509ManualCertificate(_Model):
    """X509 Certificate Authentication properties.

    :ivar secret_ref: Kubernetes secret containing an X.509 client certificate. This is a reference
     to the secret through an identifying name, not the secret itself. Required.
    :vartype secret_ref: str
    """

    secret_ref: str = rest_field(name="secretRef", visibility=["read", "create", "update", "delete", "query"])
    """Kubernetes secret containing an X.509 client certificate. This is a reference to the secret
     through an identifying name, not the secret itself. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_ref: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
