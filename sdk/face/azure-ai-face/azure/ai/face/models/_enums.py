# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessoryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of the accessory."""

    HEADWEAR = "headwear"
    """Head wear"""
    GLASSES = "glasses"
    """Glasses"""
    MASK = "mask"
    """Mask"""


class BlurLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates level of blurriness."""

    LOW = "low"
    """Low blur level."""
    MEDIUM = "medium"
    """Medium blur level."""
    HIGH = "high"
    """High blur level."""


class DetectionModel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The detection model for the face."""

    DETECTION_01 = "detection_01"
    """The default detection model for Face - Detect. Recommend for near frontal face detection. For
    scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image
    orientation, the faces in such cases may not be detected."""
    DETECTION_02 = "detection_02"
    """Detection model released in 2019 May with improved accuracy especially on small, side and
    blurry faces."""
    DETECTION_03 = "detection_03"
    """Detection model released in 2021 February with improved accuracy especially on small faces."""


class ExposureLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates level of exposure."""

    UNDER_EXPOSURE = "underExposure"
    """Low exposure level."""
    GOOD_EXPOSURE = "goodExposure"
    """Good exposure level."""
    OVER_EXPOSURE = "overExposure"
    """High exposure level."""


class FindSimilarMatchMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Similar face searching mode."""

    MATCH_PERSON = "matchPerson"
    """Match person."""
    MATCH_FACE = "matchFace"
    """Match face."""


class GlassesType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Glasses type of the face."""

    NO_GLASSES = "noGlasses"
    """No glasses on the face."""
    READING_GLASSES = "readingGlasses"
    """Normal glasses on the face."""
    SUNGLASSES = "sunglasses"
    """Sunglasses on the face."""
    SWIMMING_GOGGLES = "swimmingGoggles"
    """Swimming goggles on the face."""


class HairColorType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Name of the hair color."""

    UNKNOWN_HAIR_COLOR = "unknown"
    """Unknown"""
    WHITE = "white"
    """White"""
    GRAY = "gray"
    """Gray"""
    BLOND = "blond"
    """Blond"""
    BROWN = "brown"
    """Brown"""
    RED = "red"
    """Red"""
    BLACK = "black"
    """Black"""
    OTHER = "other"
    """Other"""


class MaskType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Mask type if any of the face."""

    FACE_MASK = "faceMask"
    """Face mask."""
    NO_MASK = "noMask"
    """No mask."""
    OTHER_MASK_OR_OCCLUSION = "otherMaskOrOcclusion"
    """Other types of mask or occlusion."""
    UNCERTAIN = "uncertain"
    """Uncertain"""


class NoiseLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates level of noise."""

    LOW = "low"
    """Low noise level."""
    MEDIUM = "medium"
    """Medium noise level."""
    HIGH = "high"
    """High noise level."""


class OperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the operation."""

    NOTSTARTED = "notstarted"
    """Operation not started."""
    RUNNING = "running"
    """Operation running."""
    SUCCEEDED = "succeeded"
    """Operation succeeded."""
    FAILED = "failed"
    """Operation failed."""


class QualityForRecognition(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates quality of image for recognition."""

    LOW = "low"
    """Low quality."""
    MEDIUM = "medium"
    """Medium quality."""
    HIGH = "high"
    """High quality."""


class RecognitionModel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The recognition model for the face."""

    RECOGNITION_01 = "recognition_01"
    """The default recognition model for Face - Detect. All those faceIds created before 2019 March
    are bonded with this recognition model."""
    RECOGNITION_02 = "recognition_02"
    """Recognition model released in 2019 March."""
    RECOGNITION_03 = "recognition_03"
    """Recognition model released in 2020 May."""
    RECOGNITION_04 = "recognition_04"
    """Recognition model released in 2021 February. It's recommended to use this recognition model for
    better recognition accuracy."""


class SessionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Session status."""

    NOT_STARTED = "NotStarted"
    """Session has not started."""
    STARTED = "Started"
    """Session has started."""
    RESULT_AVAILABLE = "ResultAvailable"
    """Session has available result."""


class TrainingStatusType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of training status."""

    NONSTARTED = "nonstarted"
    """If the training process is waiting to perform, the status is notstarted."""
    RUNNING = "running"
    """If the training is ongoing, the status is running."""
    SUCCEEDED = "succeeded"
    """Status succeed means this person group or large person group is ready for Face - Identify, or
    this large face list is ready for Face - Find Similar."""
    FAILED = "failed"
    """Status failed is often caused by no person or no persisted face exist in the person group or
    large person group, or no persisted face exist in the large face list."""
