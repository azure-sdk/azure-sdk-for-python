# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.purview import PurviewManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPurviewManagementAccountsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(PurviewManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.accounts.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2021-12-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_subscription(self, resource_group):
        response = self.client.accounts.list_by_subscription(
            api_version="2021-12-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.accounts.get(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2021-12-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.accounts.begin_create_or_update(
            resource_group_name=resource_group.name,
            account_name="str",
            account={
                "accountStatus": {
                    "accountProvisioningState": "str",
                    "errorDetails": {
                        "code": "str",
                        "details": [{"code": "str", "details": [...], "message": "str", "target": "str"}],
                        "message": "str",
                        "target": "str",
                    },
                },
                "cloudConnectors": {"awsExternalId": "str"},
                "createdAt": "2020-02-20 00:00:00",
                "createdBy": "str",
                "createdByObjectId": "str",
                "endpoints": {"catalog": "str", "guardian": "str", "scan": "str"},
                "friendlyName": "str",
                "id": "str",
                "identity": {
                    "principalId": "str",
                    "tenantId": "str",
                    "type": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "location": "str",
                "managedEventHubState": "NotSpecified",
                "managedResourceGroupName": "str",
                "managedResources": {"eventHubNamespace": "str", "resourceGroup": "str", "storageAccount": "str"},
                "managedResourcesPublicNetworkAccess": "NotSpecified",
                "name": "str",
                "privateEndpointConnections": [
                    {
                        "id": "str",
                        "name": "str",
                        "privateEndpoint": {"id": "str"},
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",
                            "description": "str",
                            "status": "str",
                        },
                        "provisioningState": "str",
                        "systemData": {
                            "createdAt": "2020-02-20 00:00:00",
                            "createdBy": "str",
                            "createdByType": "str",
                            "lastModifiedAt": "2020-02-20 00:00:00",
                            "lastModifiedBy": "str",
                            "lastModifiedByType": "str",
                        },
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "publicNetworkAccess": "Enabled",
                "sku": {"capacity": 0, "name": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2021-12-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.accounts.begin_delete(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2021-12-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_update(self, resource_group):
        response = self.client.accounts.begin_update(
            resource_group_name=resource_group.name,
            account_name="str",
            account_update_parameters={
                "identity": {
                    "principalId": "str",
                    "tenantId": "str",
                    "type": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "properties": {
                    "accountStatus": {
                        "accountProvisioningState": "str",
                        "errorDetails": {
                            "code": "str",
                            "details": [{"code": "str", "details": [...], "message": "str", "target": "str"}],
                            "message": "str",
                            "target": "str",
                        },
                    },
                    "cloudConnectors": {"awsExternalId": "str"},
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByObjectId": "str",
                    "endpoints": {"catalog": "str", "guardian": "str", "scan": "str"},
                    "friendlyName": "str",
                    "managedEventHubState": "NotSpecified",
                    "managedResourceGroupName": "str",
                    "managedResources": {"eventHubNamespace": "str", "resourceGroup": "str", "storageAccount": "str"},
                    "managedResourcesPublicNetworkAccess": "NotSpecified",
                    "privateEndpointConnections": [
                        {
                            "id": "str",
                            "name": "str",
                            "privateEndpoint": {"id": "str"},
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                            "provisioningState": "str",
                            "systemData": {
                                "createdAt": "2020-02-20 00:00:00",
                                "createdBy": "str",
                                "createdByType": "str",
                                "lastModifiedAt": "2020-02-20 00:00:00",
                                "lastModifiedBy": "str",
                                "lastModifiedByType": "str",
                            },
                            "type": "str",
                        }
                    ],
                    "provisioningState": "str",
                    "publicNetworkAccess": "Enabled",
                },
                "tags": {"str": "str"},
            },
            api_version="2021-12-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_add_root_collection_admin(self, resource_group):
        response = self.client.accounts.add_root_collection_admin(
            resource_group_name=resource_group.name,
            account_name="str",
            collection_admin_update={"objectId": "str"},
            api_version="2021-12-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_check_name_availability(self, resource_group):
        response = self.client.accounts.check_name_availability(
            check_name_availability_request={"name": "str", "type": "str"},
            api_version="2021-12-01",
        )

        # please add some check logic here by yourself
        # ...
