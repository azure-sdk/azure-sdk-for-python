# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, Mapping, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AiTaskConfiguration(_model_base.Model):
    """The AI Task configuration definition.


    :ivar version: Version of the AI Task configured. Required.
    :vartype version: str
    """

    version: str = rest_field()
    """Version of the AI Task configured. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CreateOrUpdateRegistrationResponse(_model_base.Model):
    """CreateOrUpdateRegistrationResponse.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar storage: The storage configuration definition. Required.
    :vartype storage: ~vdiregistration.models.Storage
    :ivar processing: The processing configuration definition. Required.
    :vartype processing: ~vdiregistration.models.Processing
    :ivar custom_properties: The processing configuration definition. Required.
    :vartype custom_properties: any
    :ivar ai_task_configurations: The AI Task configuration definition. Required.
    :vartype ai_task_configurations: dict[str, ~vdiregistration.models.AiTaskConfiguration]
    :ivar analytics: The anlytics configuration definition. Required.
    :vartype analytics: any
    :ivar status: The status of the created registration. Required.
    :vartype status: str
    """

    storage: "_models.Storage" = rest_field()
    """The storage configuration definition. Required."""
    processing: "_models.Processing" = rest_field()
    """The processing configuration definition. Required."""
    custom_properties: Any = rest_field(name="customProperties")
    """The processing configuration definition. Required."""
    ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"] = rest_field(name="aiTaskConfigurations")
    """The AI Task configuration definition. Required."""
    analytics: Any = rest_field()
    """The anlytics configuration definition. Required."""
    status: str = rest_field(visibility=["read"])
    """The status of the created registration. Required."""

    @overload
    def __init__(
        self,
        *,
        storage: "_models.Storage",
        processing: "_models.Processing",
        custom_properties: Any,
        ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"],
        analytics: Any,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CreateOrUpdateRegistrationResponse1(_model_base.Model):
    """CreateOrUpdateRegistrationResponse1.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar storage: The storage configuration definition. Required.
    :vartype storage: ~vdiregistration.models.Storage
    :ivar processing: The processing configuration definition. Required.
    :vartype processing: ~vdiregistration.models.Processing
    :ivar custom_properties: The processing configuration definition. Required.
    :vartype custom_properties: any
    :ivar ai_task_configurations: The AI Task configuration definition. Required.
    :vartype ai_task_configurations: dict[str, ~vdiregistration.models.AiTaskConfiguration]
    :ivar analytics: The anlytics configuration definition. Required.
    :vartype analytics: any
    :ivar status: The status of the created registration. Required.
    :vartype status: str
    """

    storage: "_models.Storage" = rest_field()
    """The storage configuration definition. Required."""
    processing: "_models.Processing" = rest_field()
    """The processing configuration definition. Required."""
    custom_properties: Any = rest_field(name="customProperties")
    """The processing configuration definition. Required."""
    ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"] = rest_field(name="aiTaskConfigurations")
    """The AI Task configuration definition. Required."""
    analytics: Any = rest_field()
    """The anlytics configuration definition. Required."""
    status: str = rest_field(visibility=["read"])
    """The status of the created registration. Required."""

    @overload
    def __init__(
        self,
        *,
        storage: "_models.Storage",
        processing: "_models.Processing",
        custom_properties: Any,
        ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"],
        analytics: Any,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GetRegistrationResponse(_model_base.Model):
    """GetRegistrationResponse.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar storage: The storage configuration definition. Required.
    :vartype storage: ~vdiregistration.models.Storage
    :ivar processing: The processing configuration definition. Required.
    :vartype processing: ~vdiregistration.models.Processing
    :ivar custom_properties: The processing configuration definition. Required.
    :vartype custom_properties: any
    :ivar ai_task_configurations: The AI Task configuration definition. Required.
    :vartype ai_task_configurations: dict[str, ~vdiregistration.models.AiTaskConfiguration]
    :ivar analytics: The anlytics configuration definition. Required.
    :vartype analytics: any
    :ivar status: The status of the created registration. Required.
    :vartype status: str
    """

    storage: "_models.Storage" = rest_field()
    """The storage configuration definition. Required."""
    processing: "_models.Processing" = rest_field()
    """The processing configuration definition. Required."""
    custom_properties: Any = rest_field(name="customProperties")
    """The processing configuration definition. Required."""
    ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"] = rest_field(name="aiTaskConfigurations")
    """The AI Task configuration definition. Required."""
    analytics: Any = rest_field()
    """The anlytics configuration definition. Required."""
    status: str = rest_field(visibility=["read"])
    """The status of the created registration. Required."""

    @overload
    def __init__(
        self,
        *,
        storage: "_models.Storage",
        processing: "_models.Processing",
        custom_properties: Any,
        ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"],
        analytics: Any,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Processing(_model_base.Model):
    """The processing configuration definition."""


class Registration(_model_base.Model):
    """Represents the registration payload.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar name: The registration name. Required.
    :vartype name: str
    :ivar storage: The storage configuration definition. Required.
    :vartype storage: ~vdiregistration.models.Storage
    :ivar processing: The processing configuration definition. Required.
    :vartype processing: ~vdiregistration.models.Processing
    :ivar custom_properties: The processing configuration definition. Required.
    :vartype custom_properties: any
    :ivar ai_task_configurations: The AI Task configuration definition. Required.
    :vartype ai_task_configurations: dict[str, ~vdiregistration.models.AiTaskConfiguration]
    :ivar analytics: The anlytics configuration definition. Required.
    :vartype analytics: any
    :ivar status: The status of the created registration. Required.
    :vartype status: str
    """

    name: str = rest_field(visibility=["create"])
    """The registration name. Required."""
    storage: "_models.Storage" = rest_field()
    """The storage configuration definition. Required."""
    processing: "_models.Processing" = rest_field()
    """The processing configuration definition. Required."""
    custom_properties: Any = rest_field(name="customProperties")
    """The processing configuration definition. Required."""
    ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"] = rest_field(name="aiTaskConfigurations")
    """The AI Task configuration definition. Required."""
    analytics: Any = rest_field()
    """The anlytics configuration definition. Required."""
    status: str = rest_field(visibility=["read"])
    """The status of the created registration. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        storage: "_models.Storage",
        processing: "_models.Processing",
        custom_properties: Any,
        ai_task_configurations: Dict[str, "_models.AiTaskConfiguration"],
        analytics: Any,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Storage(_model_base.Model):
    """The storage configuration definition."""
