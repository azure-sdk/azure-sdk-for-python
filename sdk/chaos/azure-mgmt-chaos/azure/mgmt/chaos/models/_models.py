# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import ExperimentActionType, FilterType, SelectorType

if TYPE_CHECKING:
    from .. import models as _models


class ActionStatus(_model_base.Model):
    """Model that represents the an action and its status.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar action_name: The name of the action status.
    :vartype action_name: str
    :ivar action_id: The id of the action status.
    :vartype action_id: str
    :ivar status: The status of the action.
    :vartype status: str
    :ivar start_time: String that represents the start time of the action.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: String that represents the end time of the action.
    :vartype end_time: ~datetime.datetime
    :ivar targets: The array of targets.
    :vartype targets:
     list[~azure.mgmt.chaos.models.ExperimentExecutionActionTargetDetailsProperties]
    """

    action_name: Optional[str] = rest_field(name="actionName", visibility=["read"])
    """The name of the action status."""
    action_id: Optional[str] = rest_field(name="actionId", visibility=["read"])
    """The id of the action status."""
    status: Optional[str] = rest_field(visibility=["read"])
    """The status of the action."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """String that represents the start time of the action."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """String that represents the end time of the action."""
    targets: Optional[List["_models.ExperimentExecutionActionTargetDetailsProperties"]] = rest_field(
        visibility=["read"]
    )
    """The array of targets."""


class BranchStatus(_model_base.Model):
    """Model that represents the a list of actions and action statuses.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar branch_name: The name of the branch status.
    :vartype branch_name: str
    :ivar branch_id: The id of the branch status.
    :vartype branch_id: str
    :ivar status: The status of the branch.
    :vartype status: str
    :ivar actions: The array of actions.
    :vartype actions: list[~azure.mgmt.chaos.models.ActionStatus]
    """

    branch_name: Optional[str] = rest_field(name="branchName", visibility=["read"])
    """The name of the branch status."""
    branch_id: Optional[str] = rest_field(name="branchId", visibility=["read"])
    """The id of the branch status."""
    status: Optional[str] = rest_field(visibility=["read"])
    """The status of the branch."""
    actions: Optional[List["_models.ActionStatus"]] = rest_field(visibility=["read"])
    """The array of actions."""


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    """


class Capability(ProxyResource):
    """Model that represents a Capability resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar properties: The properties of a capability resource.
    :vartype properties: ~azure.mgmt.chaos.models.CapabilityProperties
    """

    properties: Optional["_models.CapabilityProperties"] = rest_field()
    """The properties of a capability resource."""

    __flattened_items = ["publisher", "target_type", "description", "parameters_schema", "urn"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CapabilityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapabilityProperties(_model_base.Model):
    """Model that represents the Capability properties model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar publisher: String of the Publisher that this Capability extends.
    :vartype publisher: str
    :ivar target_type: String of the Target Type that this Capability extends.
    :vartype target_type: str
    :ivar description: Localized string of the description.
    :vartype description: str
    :ivar parameters_schema: URL to retrieve JSON schema of the Capability parameters.
    :vartype parameters_schema: str
    :ivar urn: String of the URN for this Capability Type.
    :vartype urn: str
    """

    publisher: Optional[str] = rest_field(visibility=["read"])
    """String of the Publisher that this Capability extends."""
    target_type: Optional[str] = rest_field(name="targetType", visibility=["read"])
    """String of the Target Type that this Capability extends."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Localized string of the description."""
    parameters_schema: Optional[str] = rest_field(name="parametersSchema", visibility=["read"])
    """URL to retrieve JSON schema of the Capability parameters."""
    urn: Optional[str] = rest_field(visibility=["read"])
    """String of the URN for this Capability Type."""


class CapabilityType(ProxyResource):
    """Model that represents a Capability Type resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar location: Azure resource location.
    :vartype location: str
    :ivar properties: The properties of the capability type resource.
    :vartype properties: ~azure.mgmt.chaos.models.CapabilityTypeProperties
    """

    location: Optional[str] = rest_field()
    """Azure resource location."""
    properties: Optional["_models.CapabilityTypeProperties"] = rest_field()
    """The properties of the capability type resource."""

    __flattened_items = [
        "publisher",
        "target_type",
        "display_name",
        "description",
        "parameters_schema",
        "urn",
        "kind",
        "azure_rbac_actions",
        "azure_rbac_data_actions",
        "runtime_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        properties: Optional["_models.CapabilityTypeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapabilityTypeProperties(_model_base.Model):
    """Model that represents the Capability Type properties model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar publisher: String of the Publisher that this Capability Type extends.
    :vartype publisher: str
    :ivar target_type: String of the Target Type that this Capability Type extends.
    :vartype target_type: str
    :ivar display_name: Localized string of the display name.
    :vartype display_name: str
    :ivar description: Localized string of the description.
    :vartype description: str
    :ivar parameters_schema: URL to retrieve JSON schema of the Capability Type parameters.
    :vartype parameters_schema: str
    :ivar urn: String of the URN for this Capability Type.
    :vartype urn: str
    :ivar kind: String of the kind of this Capability Type.
    :vartype kind: str
    :ivar azure_rbac_actions: Control plane actions necessary to execute capability type.
    :vartype azure_rbac_actions: list[str]
    :ivar azure_rbac_data_actions: Data plane actions necessary to execute capability type.
    :vartype azure_rbac_data_actions: list[str]
    :ivar runtime_properties: Runtime properties of this Capability Type.
    :vartype runtime_properties: ~azure.mgmt.chaos.models.CapabilityTypePropertiesRuntimeProperties
    """

    publisher: Optional[str] = rest_field(visibility=["read"])
    """String of the Publisher that this Capability Type extends."""
    target_type: Optional[str] = rest_field(name="targetType", visibility=["read"])
    """String of the Target Type that this Capability Type extends."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Localized string of the display name."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Localized string of the description."""
    parameters_schema: Optional[str] = rest_field(name="parametersSchema", visibility=["read"])
    """URL to retrieve JSON schema of the Capability Type parameters."""
    urn: Optional[str] = rest_field(visibility=["read"])
    """String of the URN for this Capability Type."""
    kind: Optional[str] = rest_field(visibility=["read"])
    """String of the kind of this Capability Type."""
    azure_rbac_actions: Optional[List[str]] = rest_field(name="azureRbacActions", visibility=["read"])
    """Control plane actions necessary to execute capability type."""
    azure_rbac_data_actions: Optional[List[str]] = rest_field(name="azureRbacDataActions", visibility=["read"])
    """Data plane actions necessary to execute capability type."""
    runtime_properties: Optional["_models.CapabilityTypePropertiesRuntimeProperties"] = rest_field(
        name="runtimeProperties", visibility=["read"]
    )
    """Runtime properties of this Capability Type."""


class CapabilityTypePropertiesRuntimeProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Runtime properties of this Capability Type.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar kind: String of the kind of the resource's action type (continuous or discrete).
    :vartype kind: str
    """

    kind: Optional[str] = rest_field(visibility=["read"])
    """String of the kind of the resource's action type (continuous or discrete)."""


class ChaosExperimentAction(_model_base.Model):
    """Model that represents the base action model. 9 total per experiment.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ContinuousAction, DelayAction, DiscreteAction


    :ivar name: String that represents a Capability URN. Required.
    :vartype name: str
    :ivar type: Chaos experiment action discriminator type. Required. Known values are: "delay",
     "discrete", and "continuous".
    :vartype type: str or ~azure.mgmt.chaos.models.ExperimentActionType
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    name: str = rest_field()
    """String that represents a Capability URN. Required."""
    type: str = rest_discriminator(name="type")
    """Chaos experiment action discriminator type. Required. Known values are: \"delay\",
     \"discrete\", and \"continuous\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChaosExperimentBranch(_model_base.Model):
    """Model that represents a branch in the step. 9 total per experiment.


    :ivar name: String of the branch name. Required.
    :vartype name: str
    :ivar actions: List of actions. Required.
    :vartype actions: list[~azure.mgmt.chaos.models.ChaosExperimentAction]
    """

    name: str = rest_field()
    """String of the branch name. Required."""
    actions: List["_models.ChaosExperimentAction"] = rest_field()
    """List of actions. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        actions: List["_models.ChaosExperimentAction"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChaosExperimentStep(_model_base.Model):
    """Model that represents a step in the Experiment resource.


    :ivar name: String of the step name. Required.
    :vartype name: str
    :ivar branches: List of branches. Required.
    :vartype branches: list[~azure.mgmt.chaos.models.ChaosExperimentBranch]
    """

    name: str = rest_field()
    """String of the step name. Required."""
    branches: List["_models.ChaosExperimentBranch"] = rest_field()
    """List of branches. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        branches: List["_models.ChaosExperimentBranch"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChaosTargetFilter(_model_base.Model):
    """Model that represents available filter types that can be applied to a targets list.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ChaosTargetSimpleFilter


    :ivar type: Chaos target filter discriminator type. Required. "Simple"
    :vartype type: str or ~azure.mgmt.chaos.models.FilterType
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type")
    """Chaos target filter discriminator type. Required. \"Simple\""""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChaosTargetSelector(_model_base.Model):
    """Model that represents a selector in the Experiment resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ChaosTargetListSelector, ChaosTargetQuerySelector


    :ivar id: String of the selector ID. Required.
    :vartype id: str
    :ivar type: Chaos target selector discriminator type. Required. Known values are: "List" and
     "Query".
    :vartype type: str or ~azure.mgmt.chaos.models.SelectorType
    :ivar filter: Model that represents available filter types that can be applied to a targets
     list.
    :vartype filter: ~azure.mgmt.chaos.models.ChaosTargetFilter
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: str = rest_field()
    """String of the selector ID. Required."""
    type: str = rest_discriminator(name="type")
    """Chaos target selector discriminator type. Required. Known values are: \"List\" and \"Query\"."""
    filter: Optional["_models.ChaosTargetFilter"] = rest_field()
    """Model that represents available filter types that can be applied to a targets list."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: str,
        filter: Optional["_models.ChaosTargetFilter"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChaosTargetListSelector(ChaosTargetSelector, discriminator="List"):
    """Model that represents a list selector.


    :ivar id: String of the selector ID. Required.
    :vartype id: str
    :ivar filter: Model that represents available filter types that can be applied to a targets
     list.
    :vartype filter: ~azure.mgmt.chaos.models.ChaosTargetFilter
    :ivar targets: List of Target references. Required.
    :vartype targets: list[~azure.mgmt.chaos.models.TargetReference]
    :ivar type: Enum of the selector type. Required. List selector type.
    :vartype type: str or ~azure.mgmt.chaos.models.LIST
    """

    targets: List["_models.TargetReference"] = rest_field()
    """List of Target references. Required."""
    type: Literal[SelectorType.LIST] = rest_discriminator(name="type")  # type: ignore
    """Enum of the selector type. Required. List selector type."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        targets: List["_models.TargetReference"],
        filter: Optional["_models.ChaosTargetFilter"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=SelectorType.LIST, **kwargs)


class ChaosTargetQuerySelector(ChaosTargetSelector, discriminator="Query"):
    """Model that represents a query selector.


    :ivar id: String of the selector ID. Required.
    :vartype id: str
    :ivar filter: Model that represents available filter types that can be applied to a targets
     list.
    :vartype filter: ~azure.mgmt.chaos.models.ChaosTargetFilter
    :ivar query_string: Azure Resource Graph (ARG) Query Language query for target resources.
     Required.
    :vartype query_string: str
    :ivar subscription_ids: Subscription id list to scope resource query. Required.
    :vartype subscription_ids: list[str]
    :ivar type: Enum of the selector type. Required. Query selector type.
    :vartype type: str or ~azure.mgmt.chaos.models.QUERY
    """

    query_string: str = rest_field(name="queryString")
    """Azure Resource Graph (ARG) Query Language query for target resources. Required."""
    subscription_ids: List[str] = rest_field(name="subscriptionIds")
    """Subscription id list to scope resource query. Required."""
    type: Literal[SelectorType.QUERY] = rest_discriminator(name="type")  # type: ignore
    """Enum of the selector type. Required. Query selector type."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        query_string: str,
        subscription_ids: List[str],
        filter: Optional["_models.ChaosTargetFilter"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=SelectorType.QUERY, **kwargs)


class ChaosTargetSimpleFilter(ChaosTargetFilter, discriminator="Simple"):
    """Model that represents a simple target filter.


    :ivar parameters: Model that represents the Simple filter parameters.
    :vartype parameters: ~azure.mgmt.chaos.models.ChaosTargetSimpleFilterParameters
    :ivar type: Enum that discriminates between filter types. Currently only ``Simple`` type is
     supported. Required. Simple filter type.
    :vartype type: str or ~azure.mgmt.chaos.models.SIMPLE
    """

    parameters: Optional["_models.ChaosTargetSimpleFilterParameters"] = rest_field()
    """Model that represents the Simple filter parameters."""
    type: Literal[FilterType.SIMPLE] = rest_discriminator(name="type")  # type: ignore
    """Enum that discriminates between filter types. Currently only ``Simple`` type is supported.
     Required. Simple filter type."""

    @overload
    def __init__(
        self,
        *,
        parameters: Optional["_models.ChaosTargetSimpleFilterParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=FilterType.SIMPLE, **kwargs)


class ChaosTargetSimpleFilterParameters(_model_base.Model):
    """Model that represents the Simple filter parameters.

    :ivar zones: List of Azure availability zones to filter targets by.
    :vartype zones: list[str]
    """

    zones: Optional[List[str]] = rest_field()
    """List of Azure availability zones to filter targets by."""

    @overload
    def __init__(
        self,
        *,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContinuousAction(ChaosExperimentAction, discriminator="continuous"):
    """Model that represents a continuous action.


    :ivar name: String that represents a Capability URN. Required.
    :vartype name: str
    :ivar duration: ISO8601 formatted string that represents a duration. Required.
    :vartype duration: ~datetime.timedelta
    :ivar parameters: List of key value pairs. Required.
    :vartype parameters: list[~azure.mgmt.chaos.models.KeyValuePair]
    :ivar selector_id: String that represents a selector. Required.
    :vartype selector_id: str
    :ivar type: Enum that discriminates between action models. Required.
    :vartype type: str or ~azure.mgmt.chaos.models.CONTINUOUS
    """

    duration: datetime.timedelta = rest_field()
    """ISO8601 formatted string that represents a duration. Required."""
    parameters: List["_models.KeyValuePair"] = rest_field()
    """List of key value pairs. Required."""
    selector_id: str = rest_field(name="selectorId")
    """String that represents a selector. Required."""
    type: Literal[ExperimentActionType.CONTINUOUS] = rest_discriminator(name="type")  # type: ignore
    """Enum that discriminates between action models. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        duration: datetime.timedelta,
        parameters: List["_models.KeyValuePair"],
        selector_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=ExperimentActionType.CONTINUOUS, **kwargs)


class CustomerDataStorageProperties(_model_base.Model):
    """Model that represents the Customer Managed Storage for an Experiment.

    :ivar storage_account_resource_id: ARM Resource ID of the Storage account to use for Customer
     Data storage.
    :vartype storage_account_resource_id: str
    :ivar blob_container_name: Name of the Azure Blob Storage container to use or create.
    :vartype blob_container_name: str
    """

    storage_account_resource_id: Optional[str] = rest_field(name="storageAccountResourceId")
    """ARM Resource ID of the Storage account to use for Customer Data storage."""
    blob_container_name: Optional[str] = rest_field(name="blobContainerName")
    """Name of the Azure Blob Storage container to use or create."""

    @overload
    def __init__(
        self,
        *,
        storage_account_resource_id: Optional[str] = None,
        blob_container_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DelayAction(ChaosExperimentAction, discriminator="delay"):
    """Model that represents a delay action.


    :ivar name: String that represents a Capability URN. Required.
    :vartype name: str
    :ivar duration: ISO8601 formatted string that represents a duration. Required.
    :vartype duration: ~datetime.timedelta
    :ivar type: Enum that discriminates between action models. Required.
    :vartype type: str or ~azure.mgmt.chaos.models.DELAY
    """

    duration: datetime.timedelta = rest_field()
    """ISO8601 formatted string that represents a duration. Required."""
    type: Literal[ExperimentActionType.DELAY] = rest_discriminator(name="type")  # type: ignore
    """Enum that discriminates between action models. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        duration: datetime.timedelta,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=ExperimentActionType.DELAY, **kwargs)


class DiscreteAction(ChaosExperimentAction, discriminator="discrete"):
    """Model that represents a discrete action.


    :ivar name: String that represents a Capability URN. Required.
    :vartype name: str
    :ivar parameters: List of key value pairs. Required.
    :vartype parameters: list[~azure.mgmt.chaos.models.KeyValuePair]
    :ivar selector_id: String that represents a selector. Required.
    :vartype selector_id: str
    :ivar type: Enum that discriminates between action models. Required.
    :vartype type: str or ~azure.mgmt.chaos.models.DISCRETE
    """

    parameters: List["_models.KeyValuePair"] = rest_field()
    """List of key value pairs. Required."""
    selector_id: str = rest_field(name="selectorId")
    """String that represents a selector. Required."""
    type: Literal[ExperimentActionType.DISCRETE] = rest_discriminator(name="type")  # type: ignore
    """Enum that discriminates between action models. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        parameters: List["_models.KeyValuePair"],
        selector_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=ExperimentActionType.DISCRETE, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.chaos.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.chaos.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.chaos.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Experiment(TrackedResource):
    """Model that represents a Experiment resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.chaos.models.ManagedServiceIdentity
    :ivar properties: The properties of the experiment resource. Required.
    :vartype properties: ~azure.mgmt.chaos.models.ExperimentProperties
    """

    identity: Optional["_models.ManagedServiceIdentity"] = rest_field()
    """The managed service identities assigned to this resource."""
    properties: "_models.ExperimentProperties" = rest_field()
    """The properties of the experiment resource. Required."""

    __flattened_items = ["provisioning_state", "steps", "selectors", "customer_data_storage"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.ExperimentProperties",
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ExperimentExecution(ProxyResource):
    """Model that represents the execution of a Experiment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar properties: The properties of experiment execution status.
    :vartype properties: ~azure.mgmt.chaos.models.ExperimentExecutionProperties
    """

    properties: Optional["_models.ExperimentExecutionProperties"] = rest_field()
    """The properties of experiment execution status."""

    __flattened_items = ["status", "started_at", "stopped_at"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ExperimentExecutionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ExperimentExecutionActionTargetDetailsError(_model_base.Model):  # pylint: disable=name-too-long
    """Model that represents the Experiment action target details error model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""


class ExperimentExecutionActionTargetDetailsProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Model that represents the Experiment action target details properties model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the execution.
    :vartype status: str
    :ivar target: The target for the action.
    :vartype target: str
    :ivar target_failed_time: String that represents the failed date time.
    :vartype target_failed_time: ~datetime.datetime
    :ivar target_completed_time: String that represents the completed date time.
    :vartype target_completed_time: ~datetime.datetime
    :ivar error: The error of the action.
    :vartype error: ~azure.mgmt.chaos.models.ExperimentExecutionActionTargetDetailsError
    """

    status: Optional[str] = rest_field(visibility=["read"])
    """The status of the execution."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The target for the action."""
    target_failed_time: Optional[datetime.datetime] = rest_field(
        name="targetFailedTime", visibility=["read"], format="rfc3339"
    )
    """String that represents the failed date time."""
    target_completed_time: Optional[datetime.datetime] = rest_field(
        name="targetCompletedTime", visibility=["read"], format="rfc3339"
    )
    """String that represents the completed date time."""
    error: Optional["_models.ExperimentExecutionActionTargetDetailsError"] = rest_field(visibility=["read"])
    """The error of the action."""


class ExperimentExecutionDetails(_model_base.Model):
    """Model that represents the execution details of an Experiment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: String of the resource type.
    :vartype type: str
    :ivar id: String of the fully qualified resource ID.
    :vartype id: str
    :ivar name: String of the resource name.
    :vartype name: str
    :ivar properties: The properties of the experiment execution details.
    :vartype properties: ~azure.mgmt.chaos.models.ExperimentExecutionDetailsProperties
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """String of the resource type."""
    id: Optional[str] = rest_field(visibility=["read"])
    """String of the fully qualified resource ID."""
    name: Optional[str] = rest_field(visibility=["read"])
    """String of the resource name."""
    properties: Optional["_models.ExperimentExecutionDetailsProperties"] = rest_field(visibility=["read"])
    """The properties of the experiment execution details."""

    __flattened_items = ["status", "started_at", "stopped_at", "failure_reason", "last_action_at", "run_information"]


class ExperimentExecutionDetailsProperties(_model_base.Model):
    """Model that represents the extended properties of an experiment execution.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the execution.
    :vartype status: str
    :ivar started_at: String that represents the start date time.
    :vartype started_at: ~datetime.datetime
    :ivar stopped_at: String that represents the stop date time.
    :vartype stopped_at: ~datetime.datetime
    :ivar failure_reason: The reason why the execution failed.
    :vartype failure_reason: str
    :ivar last_action_at: String that represents the last action date time.
    :vartype last_action_at: ~datetime.datetime
    :ivar run_information: The information of the experiment run.
    :vartype run_information:
     ~azure.mgmt.chaos.models.ExperimentExecutionDetailsPropertiesRunInformation
    """

    status: Optional[str] = rest_field(visibility=["read"])
    """The status of the execution."""
    started_at: Optional[datetime.datetime] = rest_field(name="startedAt", visibility=["read"], format="rfc3339")
    """String that represents the start date time."""
    stopped_at: Optional[datetime.datetime] = rest_field(name="stoppedAt", visibility=["read"], format="rfc3339")
    """String that represents the stop date time."""
    failure_reason: Optional[str] = rest_field(name="failureReason", visibility=["read"])
    """The reason why the execution failed."""
    last_action_at: Optional[datetime.datetime] = rest_field(name="lastActionAt", visibility=["read"], format="rfc3339")
    """String that represents the last action date time."""
    run_information: Optional["_models.ExperimentExecutionDetailsPropertiesRunInformation"] = rest_field(
        name="runInformation", visibility=["read"]
    )
    """The information of the experiment run."""


class ExperimentExecutionDetailsPropertiesRunInformation(_model_base.Model):  # pylint: disable=name-too-long
    """The information of the experiment run.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar steps: The steps of the experiment run.
    :vartype steps: list[~azure.mgmt.chaos.models.StepStatus]
    """

    steps: Optional[List["_models.StepStatus"]] = rest_field(visibility=["read"])
    """The steps of the experiment run."""


class ExperimentExecutionProperties(_model_base.Model):
    """Model that represents the execution properties of an Experiment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the execution.
    :vartype status: str
    :ivar started_at: String that represents the start date time.
    :vartype started_at: ~datetime.datetime
    :ivar stopped_at: String that represents the stop date time.
    :vartype stopped_at: ~datetime.datetime
    """

    status: Optional[str] = rest_field(visibility=["read"])
    """The status of the execution."""
    started_at: Optional[datetime.datetime] = rest_field(name="startedAt", visibility=["read"], format="rfc3339")
    """String that represents the start date time."""
    stopped_at: Optional[datetime.datetime] = rest_field(name="stoppedAt", visibility=["read"], format="rfc3339")
    """String that represents the stop date time."""


class ExperimentProperties(_model_base.Model):
    """Model that represents the Experiment properties model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar provisioning_state: Most recent provisioning state for the given experiment resource.
     Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.chaos.models.ProvisioningState
    :ivar steps: List of steps. Required.
    :vartype steps: list[~azure.mgmt.chaos.models.ChaosExperimentStep]
    :ivar selectors: List of selectors. Required.
    :vartype selectors: list[~azure.mgmt.chaos.models.ChaosTargetSelector]
    :ivar customer_data_storage: Optional customer-managed Storage account where Experiment schema
     will be stored.
    :vartype customer_data_storage: ~azure.mgmt.chaos.models.CustomerDataStorageProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Most recent provisioning state for the given experiment resource. Known values are:
     \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\", \"Updating\", and \"Deleting\"."""
    steps: List["_models.ChaosExperimentStep"] = rest_field()
    """List of steps. Required."""
    selectors: List["_models.ChaosTargetSelector"] = rest_field()
    """List of selectors. Required."""
    customer_data_storage: Optional["_models.CustomerDataStorageProperties"] = rest_field(name="customerDataStorage")
    """Optional customer-managed Storage account where Experiment schema will be stored."""

    @overload
    def __init__(
        self,
        *,
        steps: List["_models.ChaosExperimentStep"],
        selectors: List["_models.ChaosTargetSelector"],
        customer_data_storage: Optional["_models.CustomerDataStorageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExperimentUpdate(_model_base.Model):
    """Describes an experiment update.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.chaos.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    identity: Optional["_models.ManagedServiceIdentity"] = rest_field()
    """The managed service identities assigned to this resource."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyValuePair(_model_base.Model):
    """A map to describe the settings of an action.


    :ivar key: The name of the setting for the action. Required.
    :vartype key: str
    :ivar value: The value of the setting for the action. Required.
    :vartype value: str
    """

    key: str = rest_field()
    """The name of the setting for the action. Required."""
    value: str = rest_field()
    """The value of the setting for the action. Required."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_model_base.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.chaos.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str, ~azure.mgmt.chaos.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field()
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.chaos.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.chaos.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.chaos.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OperationStatus(ErrorResponse):
    """The status of operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.chaos.models.ErrorDetail
    :ivar id: The operation Id.
    :vartype id: str
    :ivar name: The operation name.
    :vartype name: str
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar status: The status of the operation.
    :vartype status: str
    """

    id: Optional[str] = rest_field()
    """The operation Id."""
    name: Optional[str] = rest_field()
    """The operation name."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """The start time of the operation."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """The end time of the operation."""
    status: Optional[str] = rest_field()
    """The status of the operation."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        status: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationStatusResult(_model_base.Model):
    """The current status of an async operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified ID for the async operation.
    :vartype id: str
    :ivar name: Name of the async operation.
    :vartype name: str
    :ivar status: Operation status. Required.
    :vartype status: str
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: float
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar operations: The operations list.
    :vartype operations: list[~azure.mgmt.chaos.models.OperationStatusResult]
    :ivar error: If present, details of the operation error.
    :vartype error: ~azure.mgmt.chaos.models.ErrorDetail
    :ivar resource_id: Fully qualified ID of the resource against which the original async
     operation was started.
    :vartype resource_id: str
    """

    id: Optional[str] = rest_field()
    """Fully qualified ID for the async operation."""
    name: Optional[str] = rest_field()
    """Name of the async operation."""
    status: str = rest_field()
    """Operation status. Required."""
    percent_complete: Optional[float] = rest_field(name="percentComplete")
    """Percent of the operation that is complete."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """The start time of the operation."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", format="rfc3339")
    """The end time of the operation."""
    operations: Optional[List["_models.OperationStatusResult"]] = rest_field()
    """The operations list."""
    error: Optional["_models.ErrorDetail"] = rest_field()
    """If present, details of the operation error."""
    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """Fully qualified ID of the resource against which the original async operation was started."""

    @overload
    def __init__(
        self,
        *,
        status: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        percent_complete: Optional[float] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        operations: Optional[List["_models.OperationStatusResult"]] = None,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateAccess(TrackedResource):
    """PrivateAccesses tracked resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.chaos.models.PrivateAccessProperties
    """

    properties: "_models.PrivateAccessProperties" = rest_field()
    """The resource-specific properties for this resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.PrivateAccessProperties",
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateAccessPatch(_model_base.Model):
    """Describes a private access update.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateAccessProperties(_model_base.Model):
    """The properties of a private access resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Most recent provisioning state for the given privateAccess resource.
     Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.chaos.models.ProvisioningState
    :ivar private_endpoint_connections: A readonly collection of private endpoint connection.
     Currently only one endpoint connection is supported.
    :vartype private_endpoint_connections: list[~azure.mgmt.chaos.models.PrivateEndpointConnection]
    :ivar public_network_access: Public Network Access Control for PrivateAccess resource. Known
     values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.chaos.models.PublicNetworkAccessOption
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Most recent provisioning state for the given privateAccess resource. Known values are:
     \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\", \"Updating\", and \"Deleting\"."""
    private_endpoint_connections: Optional[List["_models.PrivateEndpointConnection"]] = rest_field(
        name="privateEndpointConnections", visibility=["read"]
    )
    """A readonly collection of private endpoint connection. Currently only one endpoint connection is
     supported."""
    public_network_access: Optional[Union[str, "_models.PublicNetworkAccessOption"]] = rest_field(
        name="publicNetworkAccess"
    )
    """Public Network Access Control for PrivateAccess resource. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccessOption"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpoint(_model_base.Model):
    """The private endpoint resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM identifier for private endpoint.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The ARM identifier for private endpoint."""


class PrivateEndpointConnection(ProxyResource):
    """The private endpoint connection resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar properties: Resource properties.
    :vartype properties: ~azure.mgmt.chaos.models.PrivateEndpointConnectionProperties
    """

    properties: Optional["_models.PrivateEndpointConnectionProperties"] = rest_field()
    """Resource properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.PrivateEndpointConnectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateEndpointConnectionProperties(_model_base.Model):
    """Properties of the private endpoint connection.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar group_ids: The group ids for the private endpoint resource.
    :vartype group_ids: list[str]
    :ivar private_endpoint: The private endpoint resource.
    :vartype private_endpoint: ~azure.mgmt.chaos.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider. Required.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.chaos.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.chaos.models.ProvisioningState
    """

    group_ids: Optional[List[str]] = rest_field(name="groupIds", visibility=["read"])
    """The group ids for the private endpoint resource."""
    private_endpoint: Optional["_models.PrivateEndpoint"] = rest_field(name="privateEndpoint")
    """The private endpoint resource."""
    private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState" = rest_field(
        name="privateLinkServiceConnectionState"
    )
    """A collection of information about the state of the connection between service consumer and
     provider. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The provisioning state of the private endpoint connection resource. Known values are:
     \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\", \"Updating\", and \"Deleting\"."""

    @overload
    def __init__(
        self,
        *,
        private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState",
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResource(TrackedResource):
    """A private link resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource. Required.
    :vartype properties: ~azure.mgmt.chaos.models.PrivateLinkResourceProperties
    """

    properties: "_models.PrivateLinkResourceProperties" = rest_field()
    """The resource-specific properties for this resource. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.PrivateLinkResourceProperties",
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkResourceProperties(_model_base.Model):
    """Properties of a private link resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    :ivar required_zone_names: The private link resource private link DNS zone name.
    :vartype required_zone_names: list[str]
    :ivar provisioning_state: Resource provisioning state. Not currently in use. Known values are:
     "Succeeded", "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.chaos.models.ProvisioningState
    """

    group_id: Optional[str] = rest_field(name="groupId", visibility=["read"])
    """The private link resource group id."""
    required_members: Optional[List[str]] = rest_field(name="requiredMembers", visibility=["read"])
    """The private link resource required member names."""
    required_zone_names: Optional[List[str]] = rest_field(name="requiredZoneNames")
    """The private link resource private link DNS zone name."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Resource provisioning state. Not currently in use. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Creating\", \"Updating\", and \"Deleting\"."""

    @overload
    def __init__(
        self,
        *,
        required_zone_names: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PrivateLinkServiceConnectionState(_model_base.Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.chaos.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = rest_field()
    """Indicates whether the connection has been Approved/Rejected/Removed by the owner of the
     service. Known values are: \"Pending\", \"Approved\", and \"Rejected\"."""
    description: Optional[str] = rest_field()
    """The reason for approval/rejection of the connection."""
    actions_required: Optional[str] = rest_field(name="actionsRequired")
    """A message indicating if changes on the service provider require any updates on the consumer."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StepStatus(_model_base.Model):
    """Model that represents the a list of branches and branch statuses.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar step_name: The name of the step.
    :vartype step_name: str
    :ivar step_id: The id of the step.
    :vartype step_id: str
    :ivar status: The value of the status of the step.
    :vartype status: str
    :ivar branches: The array of branches.
    :vartype branches: list[~azure.mgmt.chaos.models.BranchStatus]
    """

    step_name: Optional[str] = rest_field(name="stepName", visibility=["read"])
    """The name of the step."""
    step_id: Optional[str] = rest_field(name="stepId", visibility=["read"])
    """The id of the step."""
    status: Optional[str] = rest_field(visibility=["read"])
    """The value of the status of the step."""
    branches: Optional[List["_models.BranchStatus"]] = rest_field(visibility=["read"])
    """The array of branches."""


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.chaos.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.chaos.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Target(ProxyResource):
    """Model that represents a Target resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar properties: The properties of the target resource.
    :vartype properties: dict[str, any]
    :ivar location: Azure resource location.
    :vartype location: str
    """

    properties: Optional[Dict[str, Any]] = rest_field()
    """The properties of the target resource."""
    location: Optional[str] = rest_field()
    """Azure resource location."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional[Dict[str, Any]] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetReference(_model_base.Model):
    """Model that represents a reference to a Target in the selector.


    :ivar type: Enum of the Target reference type. Required. "ChaosTarget"
    :vartype type: str or ~azure.mgmt.chaos.models.TargetReferenceType
    :ivar id: String of the resource ID of a Target resource. Required.
    :vartype id: str
    """

    type: Union[str, "_models.TargetReferenceType"] = rest_field()
    """Enum of the Target reference type. Required. \"ChaosTarget\""""
    id: str = rest_field()
    """String of the resource ID of a Target resource. Required."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.TargetReferenceType"],
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetType(ProxyResource):
    """Model that represents a Target Type resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.chaos.models.SystemData
    :ivar location: Azure resource location.
    :vartype location: str
    :ivar properties: The properties of the target type resource. Required.
    :vartype properties: ~azure.mgmt.chaos.models.TargetTypeProperties
    """

    location: Optional[str] = rest_field()
    """Azure resource location."""
    properties: "_models.TargetTypeProperties" = rest_field()
    """The properties of the target type resource. Required."""

    __flattened_items = ["display_name", "description", "properties_schema", "resource_types"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.TargetTypeProperties",
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class TargetTypeProperties(_model_base.Model):
    """Model that represents the base Target Type properties model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar display_name: Localized string of the display name.
    :vartype display_name: str
    :ivar description: Localized string of the description.
    :vartype description: str
    :ivar properties_schema: URL to retrieve JSON schema of the Target Type properties.
    :vartype properties_schema: str
    :ivar resource_types: List of resource types this Target Type can extend.
    :vartype resource_types: list[str]
    """

    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Localized string of the display name."""
    description: Optional[str] = rest_field(visibility=["read"])
    """Localized string of the description."""
    properties_schema: Optional[str] = rest_field(name="propertiesSchema", visibility=["read"])
    """URL to retrieve JSON schema of the Target Type properties."""
    resource_types: Optional[List[str]] = rest_field(name="resourceTypes", visibility=["read"])
    """List of resource types this Target Type can extend."""


class UserAssignedIdentity(_model_base.Model):
    """User assigned identity properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""
