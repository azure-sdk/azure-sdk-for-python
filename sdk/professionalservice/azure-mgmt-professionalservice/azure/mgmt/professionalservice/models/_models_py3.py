# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.professionalservice.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.professionalservice.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.professionalservice.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs):
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.professionalservice.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ProfessionalServiceCreationProperties(_serialization.Model):
    """properties for creation ProfessionalService.

    :ivar offer_id: The offer id.
    :vartype offer_id: str
    :ivar publisher_id: The publisher id.
    :vartype publisher_id: str
    :ivar quantity: The seat count.
    :vartype quantity: float
    :ivar sku_id: The plan id.
    :vartype sku_id: str
    :ivar payment_channel_metadata: The metadata about the ProfessionalService subscription such as
     the OrganizationId.
    :vartype payment_channel_metadata: dict[str, str]
    :ivar term_id: The current Term id.
    :vartype term_id: str
    :ivar quote_id: The quote id which the ProfessionalService will be purchase with.
    :vartype quote_id: str
    :ivar store_front: The store front which initiates the purchase.
    :vartype store_front: str
    :ivar auto_renew: Whether the ProfessionalService subscription will auto renew upon term end.
    :vartype auto_renew: bool
    """

    _attribute_map = {
        "offer_id": {"key": "offerId", "type": "str"},
        "publisher_id": {"key": "publisherId", "type": "str"},
        "quantity": {"key": "quantity", "type": "float"},
        "sku_id": {"key": "skuId", "type": "str"},
        "payment_channel_metadata": {"key": "paymentChannelMetadata", "type": "{str}"},
        "term_id": {"key": "termId", "type": "str"},
        "quote_id": {"key": "quoteId", "type": "str"},
        "store_front": {"key": "storeFront", "type": "str"},
        "auto_renew": {"key": "autoRenew", "type": "bool"},
    }

    def __init__(
        self,
        *,
        offer_id: Optional[str] = None,
        publisher_id: Optional[str] = None,
        quantity: Optional[float] = None,
        sku_id: Optional[str] = None,
        payment_channel_metadata: Optional[Dict[str, str]] = None,
        term_id: Optional[str] = None,
        quote_id: Optional[str] = None,
        store_front: Optional[str] = None,
        auto_renew: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword offer_id: The offer id.
        :paramtype offer_id: str
        :keyword publisher_id: The publisher id.
        :paramtype publisher_id: str
        :keyword quantity: The seat count.
        :paramtype quantity: float
        :keyword sku_id: The plan id.
        :paramtype sku_id: str
        :keyword payment_channel_metadata: The metadata about the ProfessionalService subscription such
         as the OrganizationId.
        :paramtype payment_channel_metadata: dict[str, str]
        :keyword term_id: The current Term id.
        :paramtype term_id: str
        :keyword quote_id: The quote id which the ProfessionalService will be purchase with.
        :paramtype quote_id: str
        :keyword store_front: The store front which initiates the purchase.
        :paramtype store_front: str
        :keyword auto_renew: Whether the ProfessionalService subscription will auto renew upon term
         end.
        :paramtype auto_renew: bool
        """
        super().__init__(**kwargs)
        self.offer_id = offer_id
        self.publisher_id = publisher_id
        self.quantity = quantity
        self.sku_id = sku_id
        self.payment_channel_metadata = payment_channel_metadata
        self.term_id = term_id
        self.quote_id = quote_id
        self.store_front = store_front
        self.auto_renew = auto_renew


class ProfessionalServiceProperties(_serialization.Model):
    """ProfessionalService resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The ProfessionalService Subscription Status. Known values are: "NotStarted",
     "Subscribed", "Unsubscribed", and "Suspended".
    :vartype status: str or
     ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceStatus
    :ivar term: The current Term object.
    :vartype term: ~azure.mgmt.professionalservice.models.ProfessionalServicePropertiesTerm
    :ivar is_free_trial: Whether the current term is a Free Trial term.
    :vartype is_free_trial: bool
    :ivar created: The created date of this resource.
    :vartype created: str
    :ivar last_modified: The last modifier date if this resource.
    :vartype last_modified: str
    """

    _validation = {
        "created": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "term": {"key": "term", "type": "ProfessionalServicePropertiesTerm"},
        "is_free_trial": {"key": "isFreeTrial", "type": "bool"},
        "created": {"key": "created", "type": "str"},
        "last_modified": {"key": "lastModified", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.ProfessionalServiceResourceStatus"]] = None,
        term: Optional["_models.ProfessionalServicePropertiesTerm"] = None,
        is_free_trial: Optional[bool] = None,
        last_modified: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword status: The ProfessionalService Subscription Status. Known values are: "NotStarted",
         "Subscribed", "Unsubscribed", and "Suspended".
        :paramtype status: str or
         ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceStatus
        :keyword term: The current Term object.
        :paramtype term: ~azure.mgmt.professionalservice.models.ProfessionalServicePropertiesTerm
        :keyword is_free_trial: Whether the current term is a Free Trial term.
        :paramtype is_free_trial: bool
        :keyword last_modified: The last modifier date if this resource.
        :paramtype last_modified: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.term = term
        self.is_free_trial = is_free_trial
        self.created = None
        self.last_modified = last_modified


class ProfessionalServicePropertiesTerm(_serialization.Model):
    """The current Term object.

    :ivar term_unit: The unit indicating Monthly / Yearly.
    :vartype term_unit: str
    :ivar start_date: The start date of the current term.
    :vartype start_date: str
    :ivar end_date: The end date of the current term.
    :vartype end_date: str
    """

    _attribute_map = {
        "term_unit": {"key": "termUnit", "type": "str"},
        "start_date": {"key": "startDate", "type": "str"},
        "end_date": {"key": "endDate", "type": "str"},
    }

    def __init__(
        self,
        *,
        term_unit: Optional[str] = None,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword term_unit: The unit indicating Monthly / Yearly.
        :paramtype term_unit: str
        :keyword start_date: The start date of the current term.
        :paramtype start_date: str
        :keyword end_date: The end date of the current term.
        :paramtype end_date: str
        """
        super().__init__(**kwargs)
        self.term_unit = term_unit
        self.start_date = start_date
        self.end_date = end_date


class ProfessionalServiceResource(_serialization.Model):
    """ProfessionalService REST API resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar properties: ProfessionalService properties.
    :vartype properties:
     ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceProperties
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar id: The resource uri.
    :vartype id: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: the resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        "name": {"readonly": True},
        "id": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "properties": {"key": "properties", "type": "ProfessionalServiceResourceProperties"},
        "name": {"key": "name", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        properties: Optional["_models.ProfessionalServiceResourceProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword properties: ProfessionalService properties.
        :paramtype properties:
         ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceProperties
        :keyword tags: the resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.properties = properties
        self.name = None
        self.id = None
        self.type = None
        self.tags = tags


class ProfessionalServiceResourceCreation(_serialization.Model):
    """ProfessionalService REST API resource definition for creation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource uri.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: the resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Resource location. Only value allowed for professional service is 'global'.
    :vartype location: str
    :ivar properties: Properties of the professional service resource that are relevant for
     creation.
    :vartype properties:
     ~azure.mgmt.professionalservice.models.ProfessionalServiceCreationProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "ProfessionalServiceCreationProperties"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        properties: Optional["_models.ProfessionalServiceCreationProperties"] = None,
        **kwargs
    ):
        """
        :keyword name: The resource name.
        :paramtype name: str
        :keyword tags: the resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Resource location. Only value allowed for professional service is 'global'.
        :paramtype location: str
        :keyword properties: Properties of the professional service resource that are relevant for
         creation.
        :paramtype properties:
         ~azure.mgmt.professionalservice.models.ProfessionalServiceCreationProperties
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.tags = tags
        self.location = location
        self.properties = properties


class ProfessionalServiceResourceProperties(
    ProfessionalServiceProperties, ProfessionalServiceCreationProperties
):  # pylint: disable=too-many-instance-attributes
    """ProfessionalService properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar offer_id: The offer id.
    :vartype offer_id: str
    :ivar publisher_id: The publisher id.
    :vartype publisher_id: str
    :ivar quantity: The seat count.
    :vartype quantity: float
    :ivar sku_id: The plan id.
    :vartype sku_id: str
    :ivar payment_channel_metadata: The metadata about the ProfessionalService subscription such as
     the OrganizationId.
    :vartype payment_channel_metadata: dict[str, str]
    :ivar term_id: The current Term id.
    :vartype term_id: str
    :ivar quote_id: The quote id which the ProfessionalService will be purchase with.
    :vartype quote_id: str
    :ivar store_front: The store front which initiates the purchase.
    :vartype store_front: str
    :ivar auto_renew: Whether the ProfessionalService subscription will auto renew upon term end.
    :vartype auto_renew: bool
    :ivar status: The ProfessionalService Subscription Status. Known values are: "NotStarted",
     "Subscribed", "Unsubscribed", and "Suspended".
    :vartype status: str or
     ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceStatus
    :ivar term: The current Term object.
    :vartype term: ~azure.mgmt.professionalservice.models.ProfessionalServicePropertiesTerm
    :ivar is_free_trial: Whether the current term is a Free Trial term.
    :vartype is_free_trial: bool
    :ivar created: The created date of this resource.
    :vartype created: str
    :ivar last_modified: The last modifier date if this resource.
    :vartype last_modified: str
    """

    _validation = {
        "created": {"readonly": True},
    }

    _attribute_map = {
        "offer_id": {"key": "offerId", "type": "str"},
        "publisher_id": {"key": "publisherId", "type": "str"},
        "quantity": {"key": "quantity", "type": "float"},
        "sku_id": {"key": "skuId", "type": "str"},
        "payment_channel_metadata": {"key": "paymentChannelMetadata", "type": "{str}"},
        "term_id": {"key": "termId", "type": "str"},
        "quote_id": {"key": "quoteId", "type": "str"},
        "store_front": {"key": "storeFront", "type": "str"},
        "auto_renew": {"key": "autoRenew", "type": "bool"},
        "status": {"key": "status", "type": "str"},
        "term": {"key": "term", "type": "ProfessionalServicePropertiesTerm"},
        "is_free_trial": {"key": "isFreeTrial", "type": "bool"},
        "created": {"key": "created", "type": "str"},
        "last_modified": {"key": "lastModified", "type": "str"},
    }

    def __init__(
        self,
        *,
        offer_id: Optional[str] = None,
        publisher_id: Optional[str] = None,
        quantity: Optional[float] = None,
        sku_id: Optional[str] = None,
        payment_channel_metadata: Optional[Dict[str, str]] = None,
        term_id: Optional[str] = None,
        quote_id: Optional[str] = None,
        store_front: Optional[str] = None,
        auto_renew: Optional[bool] = None,
        status: Optional[Union[str, "_models.ProfessionalServiceResourceStatus"]] = None,
        term: Optional["_models.ProfessionalServicePropertiesTerm"] = None,
        is_free_trial: Optional[bool] = None,
        last_modified: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword offer_id: The offer id.
        :paramtype offer_id: str
        :keyword publisher_id: The publisher id.
        :paramtype publisher_id: str
        :keyword quantity: The seat count.
        :paramtype quantity: float
        :keyword sku_id: The plan id.
        :paramtype sku_id: str
        :keyword payment_channel_metadata: The metadata about the ProfessionalService subscription such
         as the OrganizationId.
        :paramtype payment_channel_metadata: dict[str, str]
        :keyword term_id: The current Term id.
        :paramtype term_id: str
        :keyword quote_id: The quote id which the ProfessionalService will be purchase with.
        :paramtype quote_id: str
        :keyword store_front: The store front which initiates the purchase.
        :paramtype store_front: str
        :keyword auto_renew: Whether the ProfessionalService subscription will auto renew upon term
         end.
        :paramtype auto_renew: bool
        :keyword status: The ProfessionalService Subscription Status. Known values are: "NotStarted",
         "Subscribed", "Unsubscribed", and "Suspended".
        :paramtype status: str or
         ~azure.mgmt.professionalservice.models.ProfessionalServiceResourceStatus
        :keyword term: The current Term object.
        :paramtype term: ~azure.mgmt.professionalservice.models.ProfessionalServicePropertiesTerm
        :keyword is_free_trial: Whether the current term is a Free Trial term.
        :paramtype is_free_trial: bool
        :keyword last_modified: The last modifier date if this resource.
        :paramtype last_modified: str
        """
        super().__init__(
            status=status,
            term=term,
            is_free_trial=is_free_trial,
            last_modified=last_modified,
            offer_id=offer_id,
            publisher_id=publisher_id,
            quantity=quantity,
            sku_id=sku_id,
            payment_channel_metadata=payment_channel_metadata,
            term_id=term_id,
            quote_id=quote_id,
            store_front=store_front,
            auto_renew=auto_renew,
            **kwargs
        )
        self.offer_id = offer_id
        self.publisher_id = publisher_id
        self.quantity = quantity
        self.sku_id = sku_id
        self.payment_channel_metadata = payment_channel_metadata
        self.term_id = term_id
        self.quote_id = quote_id
        self.store_front = store_front
        self.auto_renew = auto_renew
        self.status = status
        self.term = term
        self.is_free_trial = is_free_trial
        self.created = None
        self.last_modified = last_modified


class ProfessionalServiceResourceResponseWithContinuation(_serialization.Model):
    """ProfessionalService resources response with continuation.

    :ivar next_link: the next link to query to get the remaining results.
    :vartype next_link: str
    :ivar value: the value of response.
    :vartype value: list[~azure.mgmt.professionalservice.models.ProfessionalServiceResource]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ProfessionalServiceResource]"},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["_models.ProfessionalServiceResource"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: the next link to query to get the remaining results.
        :paramtype next_link: str
        :keyword value: the value of response.
        :paramtype value: list[~azure.mgmt.professionalservice.models.ProfessionalServiceResource]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ProfessionalServiceRpOperation(_serialization.Model):
    """professional service operations.

    :ivar name: the operation name.
    :vartype name: str
    :ivar display: the operation display.
    :vartype display: ~azure.mgmt.professionalservice.models.ProfessionalServiceRpOperationDisplay
    :ivar origin: the operation origin.
    :vartype origin: str
    :ivar is_data_action: whether the operation is a data action or not.
    :vartype is_data_action: bool
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "ProfessionalServiceRpOperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.ProfessionalServiceRpOperationDisplay"] = None,
        origin: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword name: the operation name.
        :paramtype name: str
        :keyword display: the operation display.
        :paramtype display:
         ~azure.mgmt.professionalservice.models.ProfessionalServiceRpOperationDisplay
        :keyword origin: the operation origin.
        :paramtype origin: str
        :keyword is_data_action: whether the operation is a data action or not.
        :paramtype is_data_action: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.display = display
        self.origin = origin
        self.is_data_action = is_data_action


class ProfessionalServiceRpOperationDisplay(_serialization.Model):
    """professional service operation display.

    :ivar provider: Name of the provider for display purposes.
    :vartype provider: str
    :ivar resource: Name of the resource type for display purposes.
    :vartype resource: str
    :ivar operation: Name of the operation for display purposes.
    :vartype operation: str
    :ivar description: Description of the operation for display purposes.
    :vartype description: str
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Name of the provider for display purposes.
        :paramtype provider: str
        :keyword resource: Name of the resource type for display purposes.
        :paramtype resource: str
        :keyword operation: Name of the operation for display purposes.
        :paramtype operation: str
        :keyword description: Description of the operation for display purposes.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class ProfessionalServiceRpOperationsResponseWithContinuation(_serialization.Model):
    """professional service operation response with continuation.

    :ivar next_link: the next link to query to get the remaining results.
    :vartype next_link: str
    :ivar value: the value of response.
    :vartype value: list[~azure.mgmt.professionalservice.models.ProfessionalServiceRpOperation]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ProfessionalServiceRpOperation]"},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["_models.ProfessionalServiceRpOperation"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: the next link to query to get the remaining results.
        :paramtype next_link: str
        :keyword value: the value of response.
        :paramtype value: list[~azure.mgmt.professionalservice.models.ProfessionalServiceRpOperation]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value
