# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ErrorDefinition(_serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.policyinsights.models.ErrorDefinition]
    :ivar additional_info: Additional scenario specific error details.
    :vartype additional_info: list[~azure.mgmt.policyinsights.models.TypedErrorInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDefinition]"},
        "additional_info": {"key": "additionalInfo", "type": "[TypedErrorInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Error response.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.policyinsights.models.ErrorDefinition
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDefinition"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDefinition"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error details.
        :paramtype error: ~azure.mgmt.policyinsights.models.ErrorDefinition
        """
        super().__init__(**kwargs)
        self.error = error


class QueryOptions(_serialization.Model):
    """Parameter group.

    :ivar top: Maximum number of records to return.
    :vartype top: int
    :ivar filter: OData filter expression.
    :vartype filter: str
    """

    _validation = {
        "top": {"minimum": 0},
    }

    _attribute_map = {
        "top": {"key": "Top", "type": "int"},
        "filter": {"key": "Filter", "type": "str"},
    }

    def __init__(
        self,
        *,
        top: Optional[int] = None,
        filter: Optional[str] = None,  # pylint: disable=redefined-builtin
        **kwargs: Any
    ) -> None:
        """
        :keyword top: Maximum number of records to return.
        :paramtype top: int
        :keyword filter: OData filter expression.
        :paramtype filter: str
        """
        super().__init__(**kwargs)
        self.top = top
        self.filter = filter


class Remediation(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The remediation definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ID of the remediation.
    :vartype id: str
    :ivar type: The type of the remediation.
    :vartype type: str
    :ivar name: The name of the remediation.
    :vartype name: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.policyinsights.models.SystemData
    :ivar policy_assignment_id: The resource ID of the policy assignment that should be remediated.
    :vartype policy_assignment_id: str
    :ivar policy_definition_reference_id: The policy definition reference ID of the individual
     definition that should be remediated. Required when the policy assignment being remediated
     assigns a policy set definition.
    :vartype policy_definition_reference_id: str
    :ivar resource_discovery_mode: The way resources to remediate are discovered. Defaults to
     ExistingNonCompliant if not specified. Known values are: "ExistingNonCompliant" and
     "ReEvaluateCompliance".
    :vartype resource_discovery_mode: str or
     ~azure.mgmt.policyinsights.models.ResourceDiscoveryMode
    :ivar provisioning_state: The status of the remediation. This refers to the entire remediation
     task, not individual deployments. Allowed values are Evaluating, Canceled, Cancelling, Failed,
     Complete, or Succeeded.
    :vartype provisioning_state: str
    :ivar created_on: The time at which the remediation was created.
    :vartype created_on: ~datetime.datetime
    :ivar last_updated_on: The time at which the remediation was last updated.
    :vartype last_updated_on: ~datetime.datetime
    :ivar filters: The filters that will be applied to determine which resources to remediate.
    :vartype filters: ~azure.mgmt.policyinsights.models.RemediationFilters
    :ivar deployment_status: The deployment status summary for all deployments created by the
     remediation.
    :vartype deployment_status: ~azure.mgmt.policyinsights.models.RemediationDeploymentSummary
    :ivar status_message: The remediation status message. Provides additional details regarding the
     state of the remediation.
    :vartype status_message: str
    :ivar correlation_id: The remediation correlation Id. Can be used to find events related to the
     remediation in the activity log.
    :vartype correlation_id: str
    :ivar resource_count: Determines the max number of resources that can be remediated by the
     remediation job. If not provided, the default resource count is used.
    :vartype resource_count: int
    :ivar parallel_deployments: Determines how many resources to remediate at any given time. Can
     be used to increase or reduce the pace of the remediation. If not provided, the default
     parallel deployments value is used.
    :vartype parallel_deployments: int
    :ivar failure_threshold: The remediation failure threshold settings.
    :vartype failure_threshold:
     ~azure.mgmt.policyinsights.models.RemediationPropertiesFailureThreshold
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "created_on": {"readonly": True},
        "last_updated_on": {"readonly": True},
        "deployment_status": {"readonly": True},
        "status_message": {"readonly": True},
        "correlation_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "policy_assignment_id": {"key": "properties.policyAssignmentId", "type": "str"},
        "policy_definition_reference_id": {"key": "properties.policyDefinitionReferenceId", "type": "str"},
        "resource_discovery_mode": {"key": "properties.resourceDiscoveryMode", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "created_on": {"key": "properties.createdOn", "type": "iso-8601"},
        "last_updated_on": {"key": "properties.lastUpdatedOn", "type": "iso-8601"},
        "filters": {"key": "properties.filters", "type": "RemediationFilters"},
        "deployment_status": {"key": "properties.deploymentStatus", "type": "RemediationDeploymentSummary"},
        "status_message": {"key": "properties.statusMessage", "type": "str"},
        "correlation_id": {"key": "properties.correlationId", "type": "str"},
        "resource_count": {"key": "properties.resourceCount", "type": "int"},
        "parallel_deployments": {"key": "properties.parallelDeployments", "type": "int"},
        "failure_threshold": {"key": "properties.failureThreshold", "type": "RemediationPropertiesFailureThreshold"},
    }

    def __init__(
        self,
        *,
        policy_assignment_id: Optional[str] = None,
        policy_definition_reference_id: Optional[str] = None,
        resource_discovery_mode: Optional[Union[str, "_models.ResourceDiscoveryMode"]] = None,
        filters: Optional["_models.RemediationFilters"] = None,
        resource_count: Optional[int] = None,
        parallel_deployments: Optional[int] = None,
        failure_threshold: Optional["_models.RemediationPropertiesFailureThreshold"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword policy_assignment_id: The resource ID of the policy assignment that should be
         remediated.
        :paramtype policy_assignment_id: str
        :keyword policy_definition_reference_id: The policy definition reference ID of the individual
         definition that should be remediated. Required when the policy assignment being remediated
         assigns a policy set definition.
        :paramtype policy_definition_reference_id: str
        :keyword resource_discovery_mode: The way resources to remediate are discovered. Defaults to
         ExistingNonCompliant if not specified. Known values are: "ExistingNonCompliant" and
         "ReEvaluateCompliance".
        :paramtype resource_discovery_mode: str or
         ~azure.mgmt.policyinsights.models.ResourceDiscoveryMode
        :keyword filters: The filters that will be applied to determine which resources to remediate.
        :paramtype filters: ~azure.mgmt.policyinsights.models.RemediationFilters
        :keyword resource_count: Determines the max number of resources that can be remediated by the
         remediation job. If not provided, the default resource count is used.
        :paramtype resource_count: int
        :keyword parallel_deployments: Determines how many resources to remediate at any given time.
         Can be used to increase or reduce the pace of the remediation. If not provided, the default
         parallel deployments value is used.
        :paramtype parallel_deployments: int
        :keyword failure_threshold: The remediation failure threshold settings.
        :paramtype failure_threshold:
         ~azure.mgmt.policyinsights.models.RemediationPropertiesFailureThreshold
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.system_data = None
        self.policy_assignment_id = policy_assignment_id
        self.policy_definition_reference_id = policy_definition_reference_id
        self.resource_discovery_mode = resource_discovery_mode
        self.provisioning_state = None
        self.created_on = None
        self.last_updated_on = None
        self.filters = filters
        self.deployment_status = None
        self.status_message = None
        self.correlation_id = None
        self.resource_count = resource_count
        self.parallel_deployments = parallel_deployments
        self.failure_threshold = failure_threshold


class RemediationDeployment(_serialization.Model):
    """Details of a single deployment created by the remediation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar remediated_resource_id: Resource ID of the resource that is being remediated by the
     deployment.
    :vartype remediated_resource_id: str
    :ivar deployment_id: Resource ID of the template deployment that will remediate the resource.
    :vartype deployment_id: str
    :ivar status: Status of the remediation deployment.
    :vartype status: str
    :ivar resource_location: Location of the resource that is being remediated.
    :vartype resource_location: str
    :ivar error: Error encountered while remediated the resource.
    :vartype error: ~azure.mgmt.policyinsights.models.ErrorDefinition
    :ivar created_on: The time at which the remediation was created.
    :vartype created_on: ~datetime.datetime
    :ivar last_updated_on: The time at which the remediation deployment was last updated.
    :vartype last_updated_on: ~datetime.datetime
    """

    _validation = {
        "remediated_resource_id": {"readonly": True},
        "deployment_id": {"readonly": True},
        "status": {"readonly": True},
        "resource_location": {"readonly": True},
        "error": {"readonly": True},
        "created_on": {"readonly": True},
        "last_updated_on": {"readonly": True},
    }

    _attribute_map = {
        "remediated_resource_id": {"key": "remediatedResourceId", "type": "str"},
        "deployment_id": {"key": "deploymentId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "resource_location": {"key": "resourceLocation", "type": "str"},
        "error": {"key": "error", "type": "ErrorDefinition"},
        "created_on": {"key": "createdOn", "type": "iso-8601"},
        "last_updated_on": {"key": "lastUpdatedOn", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.remediated_resource_id = None
        self.deployment_id = None
        self.status = None
        self.resource_location = None
        self.error = None
        self.created_on = None
        self.last_updated_on = None


class RemediationDeploymentsListResult(_serialization.Model):
    """List of deployments for a remediation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of deployments for the remediation.
    :vartype value: list[~azure.mgmt.policyinsights.models.RemediationDeployment]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[RemediationDeployment]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class RemediationDeploymentSummary(_serialization.Model):
    """The deployment status summary for all deployments created by the remediation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar total_deployments: The number of deployments required by the remediation.
    :vartype total_deployments: int
    :ivar successful_deployments: The number of deployments required by the remediation that have
     succeeded.
    :vartype successful_deployments: int
    :ivar failed_deployments: The number of deployments required by the remediation that have
     failed.
    :vartype failed_deployments: int
    """

    _validation = {
        "total_deployments": {"readonly": True},
        "successful_deployments": {"readonly": True},
        "failed_deployments": {"readonly": True},
    }

    _attribute_map = {
        "total_deployments": {"key": "totalDeployments", "type": "int"},
        "successful_deployments": {"key": "successfulDeployments", "type": "int"},
        "failed_deployments": {"key": "failedDeployments", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.total_deployments = None
        self.successful_deployments = None
        self.failed_deployments = None


class RemediationFilters(_serialization.Model):
    """The filters that will be applied to determine which resources to remediate.

    :ivar locations: The resource locations that will be remediated.
    :vartype locations: list[str]
    :ivar resource_ids: The IDs of the resources that will be remediated. Can specify at most 100
     IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance, and
     cannot be empty if provided.
    :vartype resource_ids: list[str]
    """

    _attribute_map = {
        "locations": {"key": "locations", "type": "[str]"},
        "resource_ids": {"key": "resourceIds", "type": "[str]"},
    }

    def __init__(
        self, *, locations: Optional[List[str]] = None, resource_ids: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword locations: The resource locations that will be remediated.
        :paramtype locations: list[str]
        :keyword resource_ids: The IDs of the resources that will be remediated. Can specify at most
         100 IDs. This filter cannot be used when ReEvaluateCompliance is set to ReEvaluateCompliance,
         and cannot be empty if provided.
        :paramtype resource_ids: list[str]
        """
        super().__init__(**kwargs)
        self.locations = locations
        self.resource_ids = resource_ids


class RemediationListResult(_serialization.Model):
    """List of remediations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of remediation definitions.
    :vartype value: list[~azure.mgmt.policyinsights.models.Remediation]
    :ivar next_link: The URL to get the next set of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Remediation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class RemediationPropertiesFailureThreshold(_serialization.Model):
    """The remediation failure threshold settings.

    :ivar percentage: A number between 0.0 to 1.0 representing the percentage failure threshold.
     The remediation will fail if the percentage of failed remediation operations (i.e. failed
     deployments) exceeds this threshold.
    :vartype percentage: float
    """

    _attribute_map = {
        "percentage": {"key": "percentage", "type": "float"},
    }

    def __init__(self, *, percentage: Optional[float] = None, **kwargs: Any) -> None:
        """
        :keyword percentage: A number between 0.0 to 1.0 representing the percentage failure threshold.
         The remediation will fail if the percentage of failed remediation operations (i.e. failed
         deployments) exceeds this threshold.
        :paramtype percentage: float
        """
        super().__init__(**kwargs)
        self.percentage = percentage


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.policyinsights.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.policyinsights.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.policyinsights.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.policyinsights.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TypedErrorInfo(_serialization.Model):
    """Scenario specific error details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The type of included error details.
    :vartype type: str
    :ivar info: The scenario specific error details.
    :vartype info: any
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None
