# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.healthcareapis.aio import HealthcareApisManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestHealthcareApisManagementServicesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(HealthcareApisManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_get(self, resource_group):
        response = await self.client.services.get(
            resource_group_name=resource_group.name,
            resource_name="str",
            api_version="2024-03-31",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.services.begin_create_or_update(
                resource_group_name=resource_group.name,
                resource_name="str",
                service_description={
                    "kind": "str",
                    "location": "str",
                    "etag": "str",
                    "id": "str",
                    "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                    "name": "str",
                    "properties": {
                        "accessPolicies": [{"objectId": "str"}],
                        "acrConfiguration": {
                            "loginServers": ["str"],
                            "ociArtifacts": [{"digest": "str", "imageName": "str", "loginServer": "str"}],
                        },
                        "authenticationConfiguration": {
                            "audience": "str",
                            "authority": "str",
                            "smartProxyEnabled": bool,
                        },
                        "corsConfiguration": {
                            "allowCredentials": bool,
                            "headers": ["str"],
                            "maxAge": 0,
                            "methods": ["str"],
                            "origins": ["str"],
                        },
                        "cosmosDbConfiguration": {
                            "crossTenantCmkApplicationId": "str",
                            "keyVaultKeyUri": "str",
                            "offerThroughput": 0,
                        },
                        "exportConfiguration": {"storageAccountName": "str"},
                        "importConfiguration": {
                            "enabled": bool,
                            "initialImportMode": bool,
                            "integrationDataStore": "str",
                        },
                        "privateEndpointConnections": [
                            {
                                "id": "str",
                                "name": "str",
                                "privateEndpoint": {"id": "str"},
                                "privateLinkServiceConnectionState": {
                                    "actionsRequired": "str",
                                    "description": "str",
                                    "status": "str",
                                },
                                "provisioningState": "str",
                                "type": "str",
                            }
                        ],
                        "provisioningState": "str",
                        "publicNetworkAccess": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2024-03-31",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_begin_update(self, resource_group):
        response = await (
            await self.client.services.begin_update(
                resource_group_name=resource_group.name,
                resource_name="str",
                service_patch_description={"publicNetworkAccess": "str", "tags": {"str": "str"}},
                api_version="2024-03-31",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_begin_delete(self, resource_group):
        response = await (
            await self.client.services.begin_delete(
                resource_group_name=resource_group.name,
                resource_name="str",
                api_version="2024-03-31",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_list(self, resource_group):
        response = self.client.services.list(
            api_version="2024-03-31",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_list_by_resource_group(self, resource_group):
        response = self.client.services.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-03-31",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_services_check_name_availability(self, resource_group):
        response = await self.client.services.check_name_availability(
            check_name_availability_inputs={"name": "str", "type": "str"},
            api_version="2024-03-31",
        )

        # please add some check logic here by yourself
        # ...
