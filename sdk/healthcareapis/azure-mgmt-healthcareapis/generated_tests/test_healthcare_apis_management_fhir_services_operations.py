# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.healthcareapis import HealthcareApisManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestHealthcareApisManagementFhirServicesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(HealthcareApisManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_fhir_services_list_by_workspace(self, resource_group):
        response = self.client.fhir_services.list_by_workspace(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2024-03-31",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_fhir_services_get(self, resource_group):
        response = self.client.fhir_services.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            fhir_service_name="str",
            api_version="2024-03-31",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_fhir_services_begin_create_or_update(self, resource_group):
        response = self.client.fhir_services.begin_create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            fhir_service_name="str",
            fhirservice={
                "acrConfiguration": {
                    "loginServers": ["str"],
                    "ociArtifacts": [{"digest": "str", "imageName": "str", "loginServer": "str"}],
                },
                "authenticationConfiguration": {
                    "audience": "str",
                    "authority": "str",
                    "smartIdentityProviders": [
                        {
                            "applications": [{"allowedDataActions": ["str"], "audience": "str", "clientId": "str"}],
                            "authority": "str",
                        }
                    ],
                    "smartProxyEnabled": bool,
                },
                "corsConfiguration": {
                    "allowCredentials": bool,
                    "headers": ["str"],
                    "maxAge": 0,
                    "methods": ["str"],
                    "origins": ["str"],
                },
                "encryption": {"customerManagedKeyEncryption": {"keyEncryptionKeyUrl": "str"}},
                "etag": "str",
                "eventState": "str",
                "exportConfiguration": {"storageAccountName": "str"},
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "implementationGuidesConfiguration": {"usCoreMissingData": bool},
                "importConfiguration": {"enabled": bool, "initialImportMode": bool, "integrationDataStore": "str"},
                "kind": "str",
                "location": "str",
                "name": "str",
                "privateEndpointConnections": [
                    {
                        "id": "str",
                        "name": "str",
                        "privateEndpoint": {"id": "str"},
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",
                            "description": "str",
                            "status": "str",
                        },
                        "provisioningState": "str",
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "publicNetworkAccess": "str",
                "resourceVersionPolicyConfiguration": {"default": "str", "resourceTypeOverrides": {"str": "str"}},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-03-31",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_fhir_services_begin_update(self, resource_group):
        response = self.client.fhir_services.begin_update(
            resource_group_name=resource_group.name,
            fhir_service_name="str",
            workspace_name="str",
            fhirservice_patch_resource={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "tags": {"str": "str"},
            },
            api_version="2024-03-31",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_fhir_services_begin_delete(self, resource_group):
        response = self.client.fhir_services.begin_delete(
            resource_group_name=resource_group.name,
            fhir_service_name="str",
            workspace_name="str",
            api_version="2024-03-31",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
