# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic.aio import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationAccountCertificatesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.integration_account_certificates.list(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            api_version="2019-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.integration_account_certificates.get(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            certificate_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.integration_account_certificates.create_or_update(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            certificate_name="str",
            certificate={
                "changedTime": "2020-02-20 00:00:00",
                "createdTime": "2020-02-20 00:00:00",
                "id": "str",
                "key": {"keyName": "str", "keyVault": {"id": "str", "name": "str", "type": "str"}, "keyVersion": "str"},
                "location": "str",
                "metadata": {},
                "name": "str",
                "publicCertificate": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.integration_account_certificates.delete(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            certificate_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
