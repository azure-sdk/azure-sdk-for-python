# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationAccountsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_subscription(self, resource_group):
        response = self.client.integration_accounts.list_by_subscription(
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.integration_accounts.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.integration_accounts.get(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.integration_accounts.create_or_update(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            integration_account={
                "id": "str",
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "name": "str",
                "sku": {"name": "str"},
                "state": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.integration_accounts.update(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            integration_account={
                "id": "str",
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "name": "str",
                "sku": {"name": "str"},
                "state": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.integration_accounts.delete(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_callback_url(self, resource_group):
        response = self.client.integration_accounts.list_callback_url(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            parameters={"keyType": "str", "notAfter": "2020-02-20 00:00:00"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_key_vault_keys(self, resource_group):
        response = self.client.integration_accounts.list_key_vault_keys(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            list_key_vault_keys={"keyVault": {"id": "str", "name": "str", "type": "str"}, "skipToken": "str"},
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_log_tracking_events(self, resource_group):
        response = self.client.integration_accounts.log_tracking_events(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            log_tracking_events={
                "events": [
                    {
                        "eventLevel": "str",
                        "eventTime": "2020-02-20 00:00:00",
                        "recordType": "str",
                        "error": {"code": "str", "message": "str"},
                        "record": {},
                    }
                ],
                "sourceType": "str",
                "trackEventsOptions": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_regenerate_access_key(self, resource_group):
        response = self.client.integration_accounts.regenerate_access_key(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            regenerate_access_key={"keyType": "str"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
