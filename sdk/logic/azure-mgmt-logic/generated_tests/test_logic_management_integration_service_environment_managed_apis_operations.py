# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationServiceEnvironmentManagedApisOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_service_environment_managed_apis_list(self, resource_group):
        response = self.client.integration_service_environment_managed_apis.list(
            resource_group="str",
            integration_service_environment_name="str",
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_service_environment_managed_apis_get(self, resource_group):
        response = self.client.integration_service_environment_managed_apis.get(
            resource_group="str",
            integration_service_environment_name="str",
            api_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_service_environment_managed_apis_begin_put(self, resource_group):
        response = self.client.integration_service_environment_managed_apis.begin_put(
            resource_group="str",
            integration_service_environment_name="str",
            api_name="str",
            integration_service_environment_managed_api={
                "apiDefinitionUrl": "str",
                "apiDefinitions": {"modifiedSwaggerUrl": "str", "originalSwaggerUrl": "str"},
                "backendService": {"serviceUrl": "str"},
                "capabilities": ["str"],
                "category": "str",
                "connectionParameters": {"str": {}},
                "deploymentParameters": {
                    "contentLinkDefinition": {
                        "contentHash": {"algorithm": "str", "value": "str"},
                        "contentSize": 0,
                        "contentVersion": "str",
                        "metadata": {},
                        "uri": "str",
                    }
                },
                "generalInformation": {
                    "description": "str",
                    "displayName": "str",
                    "iconUrl": "str",
                    "releaseTag": "str",
                    "termsOfUseUrl": "str",
                    "tier": "str",
                },
                "id": "str",
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "metadata": {
                    "ApiType": "str",
                    "brandColor": "str",
                    "connectionType": "str",
                    "deploymentParameters": {
                        "packageContentLink": {
                            "description": "str",
                            "displayName": "str",
                            "isRequired": bool,
                            "type": "str",
                            "visibility": "str",
                        },
                        "redisCacheConnectionString": {
                            "description": "str",
                            "displayName": "str",
                            "isRequired": bool,
                            "type": "str",
                            "visibility": "str",
                        },
                    },
                    "hideKey": "str",
                    "provisioningState": "str",
                    "source": "str",
                    "tags": {"str": "str"},
                    "wsdlImportMethod": "str",
                    "wsdlService": {"EndpointQualifiedNames": ["str"], "qualifiedName": "str"},
                },
                "name": "str",
                "policies": {"content": "str", "contentLink": "str"},
                "provisioningState": "str",
                "runtimeUrls": ["str"],
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_service_environment_managed_apis_begin_delete(self, resource_group):
        response = self.client.integration_service_environment_managed_apis.begin_delete(
            resource_group="str",
            integration_service_environment_name="str",
            api_name="str",
            api_version="2019-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
