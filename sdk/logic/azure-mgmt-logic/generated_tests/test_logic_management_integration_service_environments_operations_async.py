# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic.aio import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationServiceEnvironmentsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_list_by_subscription(self, resource_group):
        response = self.client.integration_service_environments.list_by_subscription(
            api_version="2019-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_list_by_resource_group(self, resource_group):
        response = self.client.integration_service_environments.list_by_resource_group(
            resource_group="str",
            api_version="2019-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_get(self, resource_group):
        response = await self.client.integration_service_environments.get(
            resource_group="str",
            integration_service_environment_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.integration_service_environments.begin_create_or_update(
                resource_group="str",
                integration_service_environment_name="str",
                integration_service_environment={
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "location": "str",
                    "name": "str",
                    "properties": {
                        "encryptionConfiguration": {
                            "encryptionKeyReference": {
                                "keyName": "str",
                                "keyVault": {"id": "str", "name": "str", "type": "str"},
                                "keyVersion": "str",
                            }
                        },
                        "endpointsConfiguration": {
                            "connector": {
                                "accessEndpointIpAddresses": [{"address": "str"}],
                                "outgoingIpAddresses": [{"address": "str"}],
                            },
                            "workflow": {
                                "accessEndpointIpAddresses": [{"address": "str"}],
                                "outgoingIpAddresses": [{"address": "str"}],
                            },
                        },
                        "integrationServiceEnvironmentId": "str",
                        "networkConfiguration": {
                            "accessEndpoint": {"type": "str"},
                            "subnets": [{"id": "str", "name": "str", "type": "str"}],
                            "virtualNetworkAddressSpace": "str",
                        },
                        "provisioningState": "str",
                        "state": "str",
                    },
                    "sku": {"capacity": 0, "name": "str"},
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2019-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_begin_update(self, resource_group):
        response = await (
            await self.client.integration_service_environments.begin_update(
                resource_group="str",
                integration_service_environment_name="str",
                integration_service_environment={
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "location": "str",
                    "name": "str",
                    "properties": {
                        "encryptionConfiguration": {
                            "encryptionKeyReference": {
                                "keyName": "str",
                                "keyVault": {"id": "str", "name": "str", "type": "str"},
                                "keyVersion": "str",
                            }
                        },
                        "endpointsConfiguration": {
                            "connector": {
                                "accessEndpointIpAddresses": [{"address": "str"}],
                                "outgoingIpAddresses": [{"address": "str"}],
                            },
                            "workflow": {
                                "accessEndpointIpAddresses": [{"address": "str"}],
                                "outgoingIpAddresses": [{"address": "str"}],
                            },
                        },
                        "integrationServiceEnvironmentId": "str",
                        "networkConfiguration": {
                            "accessEndpoint": {"type": "str"},
                            "subnets": [{"id": "str", "name": "str", "type": "str"}],
                            "virtualNetworkAddressSpace": "str",
                        },
                        "provisioningState": "str",
                        "state": "str",
                    },
                    "sku": {"capacity": 0, "name": "str"},
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2019-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_delete(self, resource_group):
        response = await self.client.integration_service_environments.delete(
            resource_group="str",
            integration_service_environment_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environments_restart(self, resource_group):
        response = await self.client.integration_service_environments.restart(
            resource_group="str",
            integration_service_environment_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
