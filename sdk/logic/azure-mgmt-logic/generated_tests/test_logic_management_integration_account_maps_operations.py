# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationAccountMapsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_account_maps_list(self, resource_group):
        response = self.client.integration_account_maps.list(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_account_maps_get(self, resource_group):
        response = self.client.integration_account_maps.get(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            map_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_account_maps_create_or_update(self, resource_group):
        response = self.client.integration_account_maps.create_or_update(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            map_name="str",
            resource={
                "properties": {
                    "mapType": "str",
                    "changedTime": "2020-02-20 00:00:00",
                    "content": "str",
                    "contentLink": {
                        "contentHash": {"algorithm": "str", "value": "str"},
                        "contentSize": 0,
                        "contentVersion": "str",
                        "metadata": {"str": {}},
                        "uri": "str",
                    },
                    "contentType": "str",
                    "createdTime": "2020-02-20 00:00:00",
                    "metadata": {"str": {}},
                    "parametersSchema": {"ref": "str"},
                    "provisioningState": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_account_maps_delete(self, resource_group):
        response = self.client.integration_account_maps.delete(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            map_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_integration_account_maps_list_content_callback_url(self, resource_group):
        response = self.client.integration_account_maps.list_content_callback_url(
            resource_group_name=resource_group.name,
            integration_account_name="str",
            map_name="str",
            body={"keyType": "str", "notAfter": "2020-02-20 00:00:00"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
