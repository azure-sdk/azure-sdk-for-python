# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementWorkflowsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_subscription(self, resource_group):
        response = self.client.workflows.list_by_subscription(
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_resource_group(self, resource_group):
        response = self.client.workflows.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.workflows.get(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.workflows.create_or_update(
            resource_group_name=resource_group.name,
            workflow_name="str",
            workflow={
                "accessControl": {
                    "actions": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "contents": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "triggers": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "workflowManagement": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                },
                "accessEndpoint": "str",
                "changedTime": "2020-02-20 00:00:00",
                "createdTime": "2020-02-20 00:00:00",
                "definition": {},
                "endpointsConfiguration": {
                    "connector": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                    "workflow": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                },
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "integrationAccount": {"id": "str", "name": "str", "type": "str"},
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "name": "str",
                "parameters": {"str": {"description": "str", "metadata": {}, "type": "str", "value": {}}},
                "provisioningState": "str",
                "sku": {"name": "str", "plan": {"id": "str", "name": "str", "type": "str"}},
                "state": "str",
                "tags": {"str": "str"},
                "type": "str",
                "version": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.workflows.update(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.workflows.delete(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_disable(self, resource_group):
        response = self.client.workflows.disable(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_enable(self, resource_group):
        response = self.client.workflows.enable(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_generate_upgraded_definition(self, resource_group):
        response = self.client.workflows.generate_upgraded_definition(
            resource_group_name=resource_group.name,
            workflow_name="str",
            parameters={"targetSchemaVersion": "str"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_callback_url(self, resource_group):
        response = self.client.workflows.list_callback_url(
            resource_group_name=resource_group.name,
            workflow_name="str",
            list_callback_url={"keyType": "str", "notAfter": "2020-02-20 00:00:00"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_swagger(self, resource_group):
        response = self.client.workflows.list_swagger(
            resource_group_name=resource_group.name,
            workflow_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_move(self, resource_group):
        response = self.client.workflows.begin_move(
            resource_group_name=resource_group.name,
            workflow_name="str",
            move={"id": "str", "name": "str", "type": "str"},
            api_version="2019-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_regenerate_access_key(self, resource_group):
        response = self.client.workflows.regenerate_access_key(
            resource_group_name=resource_group.name,
            workflow_name="str",
            key_type={"keyType": "str"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_validate_by_resource_group(self, resource_group):
        response = self.client.workflows.validate_by_resource_group(
            resource_group_name=resource_group.name,
            workflow_name="str",
            validate={
                "accessControl": {
                    "actions": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "contents": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "triggers": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "workflowManagement": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                },
                "accessEndpoint": "str",
                "changedTime": "2020-02-20 00:00:00",
                "createdTime": "2020-02-20 00:00:00",
                "definition": {},
                "endpointsConfiguration": {
                    "connector": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                    "workflow": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                },
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "integrationAccount": {"id": "str", "name": "str", "type": "str"},
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "name": "str",
                "parameters": {"str": {"description": "str", "metadata": {}, "type": "str", "value": {}}},
                "provisioningState": "str",
                "sku": {"name": "str", "plan": {"id": "str", "name": "str", "type": "str"}},
                "state": "str",
                "tags": {"str": "str"},
                "type": "str",
                "version": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_validate_by_location(self, resource_group):
        response = self.client.workflows.validate_by_location(
            resource_group_name=resource_group.name,
            location="str",
            workflow_name="str",
            validate={
                "accessControl": {
                    "actions": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "contents": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "triggers": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                    "workflowManagement": {
                        "allowedCallerIpAddresses": [{"addressRange": "str"}],
                        "openAuthenticationPolicies": {
                            "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                        },
                        "sasAuthenticationPolicy": {"state": "str"},
                    },
                },
                "accessEndpoint": "str",
                "changedTime": "2020-02-20 00:00:00",
                "createdTime": "2020-02-20 00:00:00",
                "definition": {},
                "endpointsConfiguration": {
                    "connector": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                    "workflow": {
                        "accessEndpointIpAddresses": [{"address": "str"}],
                        "outgoingIpAddresses": [{"address": "str"}],
                    },
                },
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "integrationAccount": {"id": "str", "name": "str", "type": "str"},
                "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                "location": "str",
                "name": "str",
                "parameters": {"str": {"description": "str", "metadata": {}, "type": "str", "value": {}}},
                "provisioningState": "str",
                "sku": {"name": "str", "plan": {"id": "str", "name": "str", "type": "str"}},
                "state": "str",
                "tags": {"str": "str"},
                "type": "str",
                "version": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
