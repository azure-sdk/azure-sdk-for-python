# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic.aio import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementIntegrationServiceEnvironmentManagedApisOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environment_managed_apis_list(self, resource_group):
        response = self.client.integration_service_environment_managed_apis.list(
            integration_service_environment_name="str",
            api_version="2019-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environment_managed_apis_get(self, resource_group):
        response = await self.client.integration_service_environment_managed_apis.get(
            integration_service_environment_name="str",
            api_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environment_managed_apis_begin_put(self, resource_group):
        response = await (
            await self.client.integration_service_environment_managed_apis.begin_put(
                integration_service_environment_name="str",
                api_name="str",
                resource={
                    "location": "str",
                    "apiDefinitionUrl": "str",
                    "apiDefinitions": {"modifiedSwaggerUrl": "str", "originalSwaggerUrl": "str"},
                    "backendService": {"serviceUrl": "str"},
                    "capabilities": ["str"],
                    "category": "str",
                    "connectionParameters": {"str": {"str": {}}},
                    "deploymentParameters": {
                        "contentLinkDefinition": {
                            "contentHash": {"algorithm": "str", "value": "str"},
                            "contentSize": 0,
                            "contentVersion": "str",
                            "metadata": {"str": {}},
                            "uri": "str",
                        }
                    },
                    "generalInformation": {
                        "description": "str",
                        "displayName": "str",
                        "iconUrl": "str",
                        "releaseTag": "str",
                        "termsOfUseUrl": "str",
                        "tier": "str",
                    },
                    "id": "str",
                    "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                    "metadata": {
                        "apiType": "str",
                        "brandColor": "str",
                        "connectionType": "str",
                        "deploymentParameters": {
                            "packageContentLink": {
                                "description": "str",
                                "displayName": "str",
                                "isRequired": bool,
                                "type": "str",
                                "visibility": "str",
                            },
                            "redisCacheConnectionString": {
                                "description": "str",
                                "displayName": "str",
                                "isRequired": bool,
                                "type": "str",
                                "visibility": "str",
                            },
                        },
                        "hideKey": "str",
                        "provisioningState": "str",
                        "source": "str",
                        "tags": {"str": "str"},
                        "wsdlImportMethod": "str",
                        "wsdlService": {"endpointQualifiedNames": ["str"], "qualifiedName": "str"},
                    },
                    "name": "str",
                    "policies": {"content": "str", "contentLink": "str"},
                    "provisioningState": "str",
                    "runtimeUrls": ["str"],
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2019-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_integration_service_environment_managed_apis_begin_delete(self, resource_group):
        response = await (
            await self.client.integration_service_environment_managed_apis.begin_delete(
                integration_service_environment_name="str",
                api_name="str",
                api_version="2019-05-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
