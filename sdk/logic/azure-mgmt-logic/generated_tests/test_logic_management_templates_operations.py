# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.logic import LogicManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLogicManagementTemplatesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(LogicManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_list_by_subscription(self, resource_group):
        response = self.client.templates.list_by_subscription(
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_list_by_resource_group(self, resource_group):
        response = self.client.templates.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2019-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_get(self, resource_group):
        response = self.client.templates.get(
            resource_group_name=resource_group.name,
            template_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_create_or_update(self, resource_group):
        response = self.client.templates.create_or_update(
            resource_group_name=resource_group.name,
            template_name="str",
            resource={
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "manifest": {
                        "description": "str",
                        "details": {"by": "str", "category": "str"},
                        "featuredConnectors": {"id": "str", "kind": "str"},
                        "summary": "str",
                        "supportedSku": "str",
                        "title": "str",
                        "type": "str",
                    },
                    "provisioningState": "str",
                    "state": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_update(self, resource_group):
        response = self.client.templates.update(
            resource_group_name=resource_group.name,
            template_name="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {
                    "manifest": {
                        "description": "str",
                        "details": {"by": "str", "category": "str"},
                        "featuredConnectors": {"id": "str", "kind": "str"},
                        "summary": "str",
                        "supportedSku": "str",
                        "title": "str",
                        "type": "str",
                    },
                    "provisioningState": "str",
                    "state": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_delete(self, resource_group):
        response = self.client.templates.delete(
            resource_group_name=resource_group.name,
            template_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_disable(self, resource_group):
        response = self.client.templates.disable(
            resource_group_name=resource_group.name,
            template_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_enable(self, resource_group):
        response = self.client.templates.enable(
            resource_group_name=resource_group.name,
            template_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_generate_upgraded_definition(self, resource_group):
        response = self.client.templates.generate_upgraded_definition(
            resource_group_name=resource_group.name,
            template_name="str",
            body={"targetSchemaVersion": "str"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_list_callback_url(self, resource_group):
        response = self.client.templates.list_callback_url(
            resource_group_name=resource_group.name,
            template_name="str",
            body={"keyType": "str", "notAfter": "2020-02-20 00:00:00"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_list_swagger(self, resource_group):
        response = self.client.templates.list_swagger(
            resource_group_name=resource_group.name,
            template_name="str",
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_begin_move(self, resource_group):
        response = self.client.templates.begin_move(
            resource_group_name=resource_group.name,
            template_name="str",
            body={"id": "str", "name": "str", "type": "str"},
            api_version="2019-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_regenerate_access_key(self, resource_group):
        response = self.client.templates.regenerate_access_key(
            resource_group_name=resource_group.name,
            template_name="str",
            body={"keyType": "str"},
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_templates_validate_by_resource_group(self, resource_group):
        response = self.client.templates.validate_by_resource_group(
            resource_group_name=resource_group.name,
            template_name="str",
            body={
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "accessControl": {
                        "actions": {
                            "allowedCallerIpAddresses": [{"addressRange": "str"}],
                            "openAuthenticationPolicies": {
                                "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                            },
                        },
                        "contents": {
                            "allowedCallerIpAddresses": [{"addressRange": "str"}],
                            "openAuthenticationPolicies": {
                                "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                            },
                        },
                        "triggers": {
                            "allowedCallerIpAddresses": [{"addressRange": "str"}],
                            "openAuthenticationPolicies": {
                                "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                            },
                        },
                        "workflowManagement": {
                            "allowedCallerIpAddresses": [{"addressRange": "str"}],
                            "openAuthenticationPolicies": {
                                "policies": {"str": {"claims": [{"name": "str", "value": "str"}], "type": "str"}}
                            },
                        },
                    },
                    "accessEndpoint": "str",
                    "changedTime": "2020-02-20 00:00:00",
                    "createdTime": "2020-02-20 00:00:00",
                    "definition": {"str": {}},
                    "endpointsConfiguration": {
                        "connector": {
                            "accessEndpointIpAddresses": [{"address": "str"}],
                            "outgoingIpAddresses": [{"address": "str"}],
                        },
                        "workflow": {
                            "accessEndpointIpAddresses": [{"address": "str"}],
                            "outgoingIpAddresses": [{"address": "str"}],
                        },
                    },
                    "integrationAccount": {"id": "str", "name": "str", "type": "str"},
                    "integrationServiceEnvironment": {"id": "str", "name": "str", "type": "str"},
                    "parameters": {
                        "str": {"description": "str", "metadata": {"str": {}}, "type": "str", "value": {"str": {}}}
                    },
                    "provisioningState": "str",
                    "sku": {"name": "str", "plan": {"id": "str", "name": "str", "type": "str"}},
                    "state": "str",
                    "version": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2019-05-01",
        )

        # please add some check logic here by yourself
        # ...
