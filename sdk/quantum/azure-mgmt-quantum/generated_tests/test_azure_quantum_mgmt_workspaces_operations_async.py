# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.quantum.aio import AzureQuantumMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureQuantumMgmtWorkspacesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureQuantumMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_check_name_availability(self, resource_group):
        response = await self.client.workspaces.check_name_availability(
            location="str",
            body={"name": "str", "type": "str"},
            api_version="2023-11-13-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_by_subscription(self, resource_group):
        response = self.client.workspaces.list_by_subscription(
            api_version="2023-11-13-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_by_resource_group(self, resource_group):
        response = self.client.workspaces.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-11-13-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_get(self, resource_group):
        response = await self.client.workspaces.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2023-11-13-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.workspaces.begin_create_or_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                resource={
                    "location": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "name": "str",
                    "properties": {
                        "apiKeyEnabled": bool,
                        "endpointUri": "str",
                        "providers": [
                            {
                                "applicationName": "str",
                                "instanceUri": "str",
                                "providerId": "str",
                                "providerSku": "str",
                                "provisioningState": "str",
                                "resourceUsageId": "str",
                            }
                        ],
                        "provisioningState": "str",
                        "storageAccount": "str",
                        "usable": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2023-11-13-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_update_tags(self, resource_group):
        response = await self.client.workspaces.update_tags(
            resource_group_name=resource_group.name,
            workspace_name="str",
            properties={"tags": {"str": "str"}},
            api_version="2023-11-13-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_delete(self, resource_group):
        response = await (
            await self.client.workspaces.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2023-11-13-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_keys(self, resource_group):
        response = await self.client.workspaces.list_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2023-11-13-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_regenerate_keys(self, resource_group):
        response = await self.client.workspaces.regenerate_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            body={"keys": ["str"]},
            api_version="2023-11-13-preview",
        )

        # please add some check logic here by yourself
        # ...
