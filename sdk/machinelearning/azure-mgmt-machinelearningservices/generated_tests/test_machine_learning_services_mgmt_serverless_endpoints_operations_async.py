# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.machinelearningservices.aio import MachineLearningServicesMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMachineLearningServicesMgmtServerlessEndpointsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MachineLearningServicesMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_list(self, resource_group):
        response = self.client.serverless_endpoints.list(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_begin_delete(self, resource_group):
        response = await (
            await self.client.serverless_endpoints.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                name="str",
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_get(self, resource_group):
        response = await self.client.serverless_endpoints.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_begin_update(self, resource_group):
        response = await (
            await self.client.serverless_endpoints.begin_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                name="str",
                body={
                    "identity": {"type": "str", "userAssignedIdentities": {"str": {}}},
                    "sku": {"capacity": 0, "family": "str", "name": "str", "size": "str", "tier": "str"},
                    "tags": {"str": "str"},
                },
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.serverless_endpoints.begin_create_or_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                name="str",
                body={
                    "location": "str",
                    "properties": {
                        "authMode": "str",
                        "contentSafety": {"contentSafetyStatus": "str", "contentSafetyLevel": "str"},
                        "endpointState": "str",
                        "inferenceEndpoint": {"uri": "str", "headers": {"str": "str"}},
                        "marketplaceSubscriptionId": "str",
                        "modelSettings": {"modelId": "str"},
                        "provisioningState": "str",
                    },
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "kind": "str",
                    "name": "str",
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_list_keys(self, resource_group):
        response = await self.client.serverless_endpoints.list_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_serverless_endpoints_begin_regenerate_keys(self, resource_group):
        response = await (
            await self.client.serverless_endpoints.begin_regenerate_keys(
                resource_group_name=resource_group.name,
                workspace_name="str",
                name="str",
                body={"keyType": "str", "keyValue": "str"},
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
