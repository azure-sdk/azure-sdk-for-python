# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.machinelearningservices.aio import MachineLearningServicesMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMachineLearningServicesMgmtRegistriesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MachineLearningServicesMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_subscription(self, resource_group):
        response = self.client.registries.list_by_subscription(
            api_version="2024-10-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.registries.list(
            resource_group_name=resource_group.name,
            api_version="2024-10-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.registries.begin_delete(
                resource_group_name=resource_group.name,
                registry_name="str",
                api_version="2024-10-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.registries.get(
            resource_group_name=resource_group.name,
            registry_name="str",
            api_version="2024-10-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.registries.update(
            resource_group_name=resource_group.name,
            registry_name="str",
            body={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "sku": {"capacity": 0, "family": "str", "name": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
            },
            api_version="2024-10-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.registries.begin_create_or_update(
                resource_group_name=resource_group.name,
                registry_name="str",
                body={
                    "location": "str",
                    "discoveryUrl": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "intellectualPropertyPublisher": "str",
                    "kind": "str",
                    "managedResourceGroup": {"resourceId": "str"},
                    "mlFlowRegistryUri": "str",
                    "name": "str",
                    "publicNetworkAccess": "str",
                    "regionDetails": [
                        {
                            "acrDetails": [
                                {
                                    "systemCreatedAcrAccount": {
                                        "acrAccountName": "str",
                                        "acrAccountSku": "str",
                                        "armResourceId": {"resourceId": "str"},
                                    },
                                    "userCreatedAcrAccount": {"armResourceId": {"resourceId": "str"}},
                                }
                            ],
                            "location": "str",
                            "storageAccountDetails": [
                                {
                                    "systemCreatedStorageAccount": {
                                        "allowBlobPublicAccess": bool,
                                        "armResourceId": {"resourceId": "str"},
                                        "storageAccountHnsEnabled": bool,
                                        "storageAccountName": "str",
                                        "storageAccountType": "str",
                                    },
                                    "userCreatedStorageAccount": {"armResourceId": {"resourceId": "str"}},
                                }
                            ],
                        }
                    ],
                    "registryPrivateEndpointConnections": [
                        {
                            "groupIds": ["str"],
                            "id": "str",
                            "location": "str",
                            "privateEndpoint": {"id": "str", "subnetArmId": "str"},
                            "provisioningState": "str",
                            "registryPrivateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                        }
                    ],
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2024-10-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_remove_regions(self, resource_group):
        response = await (
            await self.client.registries.begin_remove_regions(
                resource_group_name=resource_group.name,
                registry_name="str",
                body={
                    "location": "str",
                    "discoveryUrl": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "intellectualPropertyPublisher": "str",
                    "kind": "str",
                    "managedResourceGroup": {"resourceId": "str"},
                    "mlFlowRegistryUri": "str",
                    "name": "str",
                    "publicNetworkAccess": "str",
                    "regionDetails": [
                        {
                            "acrDetails": [
                                {
                                    "systemCreatedAcrAccount": {
                                        "acrAccountName": "str",
                                        "acrAccountSku": "str",
                                        "armResourceId": {"resourceId": "str"},
                                    },
                                    "userCreatedAcrAccount": {"armResourceId": {"resourceId": "str"}},
                                }
                            ],
                            "location": "str",
                            "storageAccountDetails": [
                                {
                                    "systemCreatedStorageAccount": {
                                        "allowBlobPublicAccess": bool,
                                        "armResourceId": {"resourceId": "str"},
                                        "storageAccountHnsEnabled": bool,
                                        "storageAccountName": "str",
                                        "storageAccountType": "str",
                                    },
                                    "userCreatedStorageAccount": {"armResourceId": {"resourceId": "str"}},
                                }
                            ],
                        }
                    ],
                    "registryPrivateEndpointConnections": [
                        {
                            "groupIds": ["str"],
                            "id": "str",
                            "location": "str",
                            "privateEndpoint": {"id": "str", "subnetArmId": "str"},
                            "provisioningState": "str",
                            "registryPrivateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                        }
                    ],
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2024-10-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
