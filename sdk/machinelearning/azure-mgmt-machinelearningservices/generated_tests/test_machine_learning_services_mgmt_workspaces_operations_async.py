# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.machinelearningservices.aio import MachineLearningServicesMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMachineLearningServicesMgmtWorkspacesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MachineLearningServicesMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_by_subscription(self, resource_group):
        response = self.client.workspaces.list_by_subscription(
            api_version="2025-01-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_by_resource_group(self, resource_group):
        response = self.client.workspaces.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-01-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_delete(self, resource_group):
        response = await (
            await self.client.workspaces.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_get(self, resource_group):
        response = await self.client.workspaces.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_update(self, resource_group):
        response = await (
            await self.client.workspaces.begin_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                body={
                    "allowRoleAssignmentOnRG": bool,
                    "applicationInsights": "str",
                    "containerRegistry": "str",
                    "description": "str",
                    "enableDataIsolation": bool,
                    "enableSoftwareBillOfMaterials": bool,
                    "encryption": {"keyVaultProperties": {"keyIdentifier": "str"}},
                    "featureStoreSettings": {
                        "computeRuntime": {"sparkRuntimeVersion": "str"},
                        "offlineStoreConnectionName": "str",
                        "onlineStoreConnectionName": "str",
                    },
                    "friendlyName": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "imageBuildCompute": "str",
                    "ipAllowlist": ["str"],
                    "managedNetwork": {
                        "changeableIsolationModes": ["str"],
                        "firewallPublicIpAddress": "str",
                        "firewallSku": "str",
                        "isolationMode": "str",
                        "networkId": "str",
                        "outboundRules": {"str": "outbound_rule"},
                        "status": {"sparkReady": bool, "status": "str"},
                    },
                    "networkAcls": {"defaultAction": "str", "ipRules": [{"value": "str"}]},
                    "primaryUserAssignedIdentity": "str",
                    "publicNetworkAccess": "str",
                    "serverlessComputeSettings": {
                        "serverlessComputeCustomSubnet": "str",
                        "serverlessComputeNoPublicIP": bool,
                    },
                    "serviceManagedResourcesSettings": {"cosmosDb": {"collectionsThroughput": 0}},
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "softDeleteRetentionInDays": 0,
                    "systemDatastoresAuthMode": "str",
                    "tags": {"str": "str"},
                    "v1LegacyMode": bool,
                },
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.workspaces.begin_create_or_update(
                resource_group_name=resource_group.name,
                workspace_name="str",
                body={
                    "agentsEndpointUri": "str",
                    "allowPublicAccessWhenBehindVnet": bool,
                    "allowRoleAssignmentOnRG": bool,
                    "applicationInsights": "str",
                    "associatedWorkspaces": ["str"],
                    "containerRegistries": ["str"],
                    "containerRegistry": "str",
                    "description": "str",
                    "discoveryUrl": "str",
                    "enableDataIsolation": bool,
                    "enableServiceSideCMKEncryption": bool,
                    "enableSimplifiedCmk": bool,
                    "enableSoftwareBillOfMaterials": bool,
                    "encryption": {
                        "keyVaultProperties": {
                            "keyIdentifier": "str",
                            "keyVaultArmId": "str",
                            "identityClientId": "str",
                        },
                        "status": "str",
                        "cosmosDbResourceId": "str",
                        "identity": {"userAssignedIdentity": "str"},
                        "searchAccountResourceId": "str",
                        "storageAccountResourceId": "str",
                    },
                    "existingWorkspaces": ["str"],
                    "featureStoreSettings": {
                        "computeRuntime": {"sparkRuntimeVersion": "str"},
                        "offlineStoreConnectionName": "str",
                        "onlineStoreConnectionName": "str",
                    },
                    "friendlyName": "str",
                    "hbiWorkspace": bool,
                    "hubResourceId": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "imageBuildCompute": "str",
                    "ipAllowlist": ["str"],
                    "keyVault": "str",
                    "keyVaults": ["str"],
                    "kind": "str",
                    "location": "str",
                    "managedNetwork": {
                        "changeableIsolationModes": ["str"],
                        "firewallPublicIpAddress": "str",
                        "firewallSku": "str",
                        "isolationMode": "str",
                        "networkId": "str",
                        "outboundRules": {"str": "outbound_rule"},
                        "status": {"sparkReady": bool, "status": "str"},
                    },
                    "mlFlowTrackingUri": "str",
                    "name": "str",
                    "networkAcls": {"defaultAction": "str", "ipRules": [{"value": "str"}]},
                    "notebookInfo": {
                        "fqdn": "str",
                        "isPrivateLinkEnabled": bool,
                        "notebookPreparationError": {"errorMessage": "str", "statusCode": 0},
                        "resourceId": "str",
                    },
                    "primaryUserAssignedIdentity": "str",
                    "privateEndpointConnections": [
                        {
                            "id": "str",
                            "identity": {
                                "type": "str",
                                "principalId": "str",
                                "tenantId": "str",
                                "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                            },
                            "location": "str",
                            "name": "str",
                            "privateEndpoint": {"id": "str", "subnetArmId": "str"},
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                            "provisioningState": "str",
                            "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                            "systemData": {
                                "createdAt": "2020-02-20 00:00:00",
                                "createdBy": "str",
                                "createdByType": "str",
                                "lastModifiedAt": "2020-02-20 00:00:00",
                                "lastModifiedBy": "str",
                                "lastModifiedByType": "str",
                            },
                            "tags": {"str": "str"},
                            "type": "str",
                        }
                    ],
                    "privateLinkCount": 0,
                    "provisionNetworkNow": bool,
                    "provisioningState": "str",
                    "publicNetworkAccess": "str",
                    "serverlessComputeSettings": {
                        "serverlessComputeCustomSubnet": "str",
                        "serverlessComputeNoPublicIP": bool,
                    },
                    "serviceManagedResourcesSettings": {"cosmosDb": {"collectionsThroughput": 0}},
                    "serviceProvisionedResourceGroup": "str",
                    "sharedPrivateLinkResources": [
                        {
                            "groupId": "str",
                            "name": "str",
                            "privateLinkResourceId": "str",
                            "requestMessage": "str",
                            "status": "str",
                        }
                    ],
                    "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                    "softDeleteRetentionInDays": 0,
                    "storageAccount": "str",
                    "storageAccounts": ["str"],
                    "storageHnsEnabled": bool,
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "systemDatastoresAuthMode": "str",
                    "tags": {"str": "str"},
                    "tenantId": "str",
                    "type": "str",
                    "v1LegacyMode": bool,
                    "workspaceHubConfig": {
                        "additionalWorkspaceStorageAccounts": ["str"],
                        "defaultWorkspaceResourceGroup": "str",
                    },
                    "workspaceId": "str",
                },
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_diagnose(self, resource_group):
        response = await (
            await self.client.workspaces.begin_diagnose(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_keys(self, resource_group):
        response = await self.client.workspaces.list_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_notebook_access_token(self, resource_group):
        response = await self.client.workspaces.list_notebook_access_token(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_notebook_keys(self, resource_group):
        response = await self.client.workspaces.list_notebook_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_storage_account_keys(self, resource_group):
        response = await self.client.workspaces.list_storage_account_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_list_outbound_network_dependencies_endpoints(self, resource_group):
        response = await self.client.workspaces.list_outbound_network_dependencies_endpoints(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-01-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_prepare_notebook(self, resource_group):
        response = await (
            await self.client.workspaces.begin_prepare_notebook(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_workspaces_begin_resync_keys(self, resource_group):
        response = await (
            await self.client.workspaces.begin_resync_keys(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2025-01-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
