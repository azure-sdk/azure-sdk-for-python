# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.machinelearningservices import MachineLearningServicesMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMachineLearningServicesMgmtComputeOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(MachineLearningServicesMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_list(self, resource_group):
        response = self.client.compute.list(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2025-04-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_get(self, resource_group):
        response = self.client.compute.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_create_or_update(self, resource_group):
        response = self.client.compute.begin_create_or_update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            parameters={
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "location": "str",
                "name": "str",
                "properties": "compute",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_update(self, resource_group):
        response = self.client.compute.begin_update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            parameters={
                "properties": {
                    "scaleSettings": {
                        "maxNodeCount": 0,
                        "minNodeCount": 0,
                        "nodeIdleTimeBeforeScaleDown": "1 day, 0:00:00",
                    }
                }
            },
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_delete(self, resource_group):
        response = self.client.compute.begin_delete(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            underlying_resource_action="str",
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_update_custom_services(self, resource_group):
        response = self.client.compute.update_custom_services(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            custom_services=[
                {
                    "docker": {"privileged": bool},
                    "endpoints": [{"hostIp": "str", "name": "str", "protocol": "tcp", "published": 0, "target": 0}],
                    "environmentVariables": {"str": {"type": "local", "value": "str"}},
                    "image": {"reference": "str", "type": "docker", "version": "str"},
                    "kernel": {"argv": ["str"], "displayName": "str", "language": "str"},
                    "name": "str",
                    "volumes": [
                        {
                            "bind": {"createHostPath": bool, "propagation": "str", "selinux": "str"},
                            "consistency": "str",
                            "readOnly": bool,
                            "source": "str",
                            "target": "str",
                            "tmpfs": {"size": 0},
                            "type": "bind",
                            "volume": {"nocopy": bool},
                        }
                    ],
                }
            ],
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_list_nodes(self, resource_group):
        response = self.client.compute.list_nodes(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_list_keys(self, resource_group):
        response = self.client.compute.list_keys(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_update_data_mounts(self, resource_group):
        response = self.client.compute.update_data_mounts(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            data_mounts=[
                {
                    "createdBy": "str",
                    "error": "str",
                    "mountAction": "str",
                    "mountMode": "str",
                    "mountName": "str",
                    "mountPath": "str",
                    "mountState": "str",
                    "mountedOn": "2020-02-20 00:00:00",
                    "source": "str",
                    "sourceType": "str",
                }
            ],
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_start(self, resource_group):
        response = self.client.compute.begin_start(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_stop(self, resource_group):
        response = self.client.compute.begin_stop(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_restart(self, resource_group):
        response = self.client.compute.begin_restart(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_update_idle_shutdown_setting(self, resource_group):
        response = self.client.compute.update_idle_shutdown_setting(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            parameters={"idleTimeBeforeShutdown": "str"},
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_get_allowed_resize_sizes(self, resource_group):
        response = self.client.compute.get_allowed_resize_sizes(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            api_version="2025-04-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_compute_begin_resize(self, resource_group):
        response = self.client.compute.begin_resize(
            resource_group_name=resource_group.name,
            workspace_name="str",
            compute_name="str",
            parameters={"targetVMSize": "str"},
            api_version="2025-04-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
