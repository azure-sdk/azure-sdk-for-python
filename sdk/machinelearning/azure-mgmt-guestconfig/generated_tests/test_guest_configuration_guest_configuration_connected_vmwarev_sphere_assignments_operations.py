# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.guestconfig import GuestConfigurationClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestGuestConfigurationGuestConfigurationConnectedVMwarevSphereAssignmentsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(GuestConfigurationClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_guest_configuration_connected_vmwarev_sphere_assignments_list(self, resource_group):
        response = self.client.guest_configuration_connected_vmwarev_sphere_assignments.list(
            resource_group_name=resource_group.name,
            vm_name="str",
            api_version="2024-04-05",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_guest_configuration_connected_vmwarev_sphere_assignments_get(self, resource_group):
        response = self.client.guest_configuration_connected_vmwarev_sphere_assignments.get(
            resource_group_name=resource_group.name,
            vm_name="str",
            guest_configuration_assignment_name="str",
            api_version="2024-04-05",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_guest_configuration_connected_vmwarev_sphere_assignments_create_or_update(self, resource_group):
        response = self.client.guest_configuration_connected_vmwarev_sphere_assignments.create_or_update(
            resource_group_name=resource_group.name,
            vm_name="str",
            guest_configuration_assignment_name="str",
            parameters={
                "id": "str",
                "name": "str",
                "properties": {
                    "assignmentHash": "str",
                    "complianceStatus": "str",
                    "context": "str",
                    "guestConfiguration": {
                        "assignmentSource": "str",
                        "assignmentType": "str",
                        "configurationParameter": [{"name": "str", "value": "str"}],
                        "configurationProtectedParameter": [{"name": "str", "value": "str"}],
                        "configurationSetting": {
                            "actionAfterReboot": "str",
                            "allowModuleOverwrite": bool,
                            "configurationMode": "str",
                            "configurationModeFrequencyMins": 15,
                            "rebootIfNeeded": bool,
                            "refreshFrequencyMins": 30,
                        },
                        "contentHash": "str",
                        "contentManagedIdentity": "str",
                        "contentType": "str",
                        "contentUri": "str",
                        "kind": "str",
                        "name": "str",
                        "version": "str",
                    },
                    "lastComplianceStatusChecked": "2020-02-20 00:00:00",
                    "latestAssignmentReport": {
                        "assignment": {"configuration": {"name": "str", "version": "str"}, "name": "str"},
                        "complianceStatus": "str",
                        "endTime": "2020-02-20 00:00:00",
                        "id": "str",
                        "operationType": "str",
                        "reportId": "str",
                        "resources": [
                            {
                                "complianceStatus": "str",
                                "properties": {"str": {}},
                                "reasons": [{"code": "str", "phrase": "str"}],
                                "resourceId": "str",
                            }
                        ],
                        "startTime": "2020-02-20 00:00:00",
                        "vm": {"id": "str", "uuid": "str"},
                    },
                    "latestReportId": "str",
                    "parameterHash": "str",
                    "provisioningState": "str",
                    "resourceType": "str",
                    "targetResourceId": "str",
                    "vmssVMList": [
                        {
                            "complianceStatus": "str",
                            "lastComplianceChecked": "2020-02-20 00:00:00",
                            "latestReportId": "str",
                            "vmId": "str",
                            "vmResourceId": "str",
                        }
                    ],
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2024-04-05",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_guest_configuration_connected_vmwarev_sphere_assignments_delete(self, resource_group):
        response = self.client.guest_configuration_connected_vmwarev_sphere_assignments.delete(
            resource_group_name=resource_group.name,
            vm_name="str",
            guest_configuration_assignment_name="str",
            api_version="2024-04-05",
        )

        # please add some check logic here by yourself
        # ...
