# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AutomatedCheckResult(_Model):
    """Only for AutomatedStep type.

    :ivar version: Version for automated check result.
    :vartype version: str
    :ivar status: Status for automated check result.
    :vartype status: str
    :ivar result: Insight Article Content.
    :vartype result: str
    :ivar type: Type of Result. Known values are: "Success", "Warning", "Error", and "Information".
    :vartype type: str or ~azure.mgmt.help.models.AutomatedCheckResultType
    """

    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Version for automated check result."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status for automated check result."""
    result: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Insight Article Content."""
    type: Optional[Union[str, "_models.AutomatedCheckResultType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of Result. Known values are: \"Success\", \"Warning\", \"Error\", and \"Information\"."""

    @overload
    def __init__(
        self,
        *,
        version: Optional[str] = None,
        status: Optional[str] = None,
        result: Optional[str] = None,
        type: Optional[Union[str, "_models.AutomatedCheckResultType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityRequest(_Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the resource for which availability needs to be checked."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource type."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CheckNameAvailabilityResponse(_Model):
    """Response for whether the requested resource name is available or not.

    :ivar name_available: Returns true or false depending on the availability of the name.
    :vartype name_available: bool
    :ivar reason: Reason for why value is not available. This field is returned if nameAvailable is
     false.
    :vartype reason: str
    :ivar message: Gets an error message explaining the 'reason' value with more details. This
     field is returned iif nameAvailable is false.
    :vartype message: str
    """

    name_available: Optional[bool] = rest_field(
        name="nameAvailable", visibility=["read", "create", "update", "delete", "query"]
    )
    """Returns true or false depending on the availability of the name."""
    reason: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reason for why value is not available. This field is returned if nameAvailable is false."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets an error message explaining the 'reason' value with more details. This field is returned
     iif nameAvailable is false."""

    @overload
    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClassificationService(_Model):
    """Service Classification result object.

    :ivar service_id: Azure resource Id of the service.
    :vartype service_id: str
    :ivar display_name: Localized name of the azure service.
    :vartype display_name: str
    :ivar resource_types: List of applicable ARM resource types for this service.
    :vartype resource_types: list[str]
    """

    service_id: Optional[str] = rest_field(name="serviceId", visibility=["read"])
    """Azure resource Id of the service."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Localized name of the azure service."""
    resource_types: Optional[List[str]] = rest_field(
        name="resourceTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of applicable ARM resource types for this service."""

    @overload
    def __init__(
        self,
        *,
        resource_types: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContinueParameterBody(_Model):
    """ContinueParameterBody.

    :ivar continue_request_body: The required request body for going to next step in Troubleshooter
     resource.
    :vartype continue_request_body: ~azure.mgmt.help.models.ContinueRequestBody
    """

    continue_request_body: Optional["_models.ContinueRequestBody"] = rest_field(
        name="continueRequestBody", visibility=["read", "create", "update", "delete", "query"]
    )
    """The required request body for going to next step in Troubleshooter resource."""

    @overload
    def __init__(
        self,
        *,
        continue_request_body: Optional["_models.ContinueRequestBody"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContinueRequestBody(_Model):
    """Troubleshooter ContinueRequest body.

    :ivar step_id: Unique id of the result.
    :vartype step_id: str
    :ivar responses:
    :vartype responses: list[~azure.mgmt.help.models.TroubleshooterResponse]
    """

    step_id: Optional[str] = rest_field(name="stepId", visibility=["read", "create", "update", "delete", "query"])
    """Unique id of the result."""
    responses: Optional[List["_models.TroubleshooterResponse"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        step_id: Optional[str] = None,
        responses: Optional[List["_models.TroubleshooterResponse"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Diagnostic(_Model):
    """Properties returned with in an insight.

    :ivar solution_id: Solution Id.
    :vartype solution_id: str
    :ivar status: Denotes the status of the diagnostic resource. Known values are: "Failed",
     "MissingInputs", "Running", "Succeeded", and "Timeout".
    :vartype status: str or ~azure.mgmt.help.models.Status
    :ivar insights: The problems (if any) detected by this insight.
    :vartype insights: list[~azure.mgmt.help.models.Insight]
    :ivar error: Error definition.
    :vartype error: ~azure.mgmt.help.models.Error
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id."""
    status: Optional[Union[str, "_models.Status"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Denotes the status of the diagnostic resource. Known values are: \"Failed\", \"MissingInputs\",
     \"Running\", \"Succeeded\", and \"Timeout\"."""
    insights: Optional[List["_models.Insight"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The problems (if any) detected by this insight."""
    error: Optional["_models.Error"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error definition."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
        insights: Optional[List["_models.Insight"]] = None,
        error: Optional["_models.Error"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticInvocation(_Model):
    """Solution Invocation with additional params needed for invocation.

    :ivar solution_id: Solution Id to invoke.
    :vartype solution_id: str
    :ivar additional_parameters: Additional parameters required to invoke the solutionId.
    :vartype additional_parameters: dict[str, str]
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id to invoke."""
    additional_parameters: Optional[Dict[str, str]] = rest_field(
        name="additionalParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional parameters required to invoke the solutionId."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        additional_parameters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ExtensionResource(Resource):
    """The base extension resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    """


class DiagnosticResource(ExtensionResource):
    """Diagnostic resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Diagnostic Resource properties.
    :vartype properties: ~azure.mgmt.help.models.DiagnosticResourceProperties
    """

    properties: Optional["_models.DiagnosticResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Diagnostic Resource properties."""

    __flattened_items = ["global_parameters", "insights", "accepted_at", "provisioning_state", "diagnostics"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DiagnosticResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiagnosticResourceProperties(_Model):
    """Diagnostic resource properties.

    :ivar global_parameters: Global parameters is an optional map which can be used to add key and
     value to request body to improve the diagnostics results.
    :vartype global_parameters: dict[str, str]
    :ivar insights: SolutionIds that are needed to be invoked.
    :vartype insights: list[~azure.mgmt.help.models.DiagnosticInvocation]
    :ivar accepted_at: Diagnostic Request Accepted time.
    :vartype accepted_at: str
    :ivar provisioning_state: Status of diagnostic provisioning. Known values are: "Succeeded",
     "PartialComplete", "Failed", "Running", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.help.models.DiagnosticProvisioningState
    :ivar diagnostics: Array of Diagnostics.
    :vartype diagnostics: list[~azure.mgmt.help.models.Diagnostic]
    """

    global_parameters: Optional[Dict[str, str]] = rest_field(
        name="globalParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Global parameters is an optional map which can be used to add key and  value to request body to
     improve the diagnostics results."""
    insights: Optional[List["_models.DiagnosticInvocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """SolutionIds that are needed to be invoked."""
    accepted_at: Optional[str] = rest_field(name="acceptedAt", visibility=["read"])
    """Diagnostic Request Accepted time."""
    provisioning_state: Optional[Union[str, "_models.DiagnosticProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Status of diagnostic provisioning. Known values are: \"Succeeded\", \"PartialComplete\",
     \"Failed\", \"Running\", and \"Canceled\"."""
    diagnostics: Optional[List["_models.Diagnostic"]] = rest_field(visibility=["read"])
    """Array of Diagnostics."""

    @overload
    def __init__(
        self,
        *,
        global_parameters: Optional[Dict[str, str]] = None,
        insights: Optional[List["_models.DiagnosticInvocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscoveryNlpRequest(_Model):
    """Discover NLP request.

    :ivar issue_summary: Natural language description of the issue. Required.
    :vartype issue_summary: str
    :ivar resource_id: ARM resource Id of the resource that is having the issue. Only applicable
     for Discovery Solution NLP Subscription Scope.
    :vartype resource_id: str
    :ivar service_id: ARM service Id of the service that is having the issue. For more information
     on service Id see `https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP
     <https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP>`_.
    :vartype service_id: str
    :ivar additional_context: Additional information in the form of a string.
    :vartype additional_context: str
    """

    issue_summary: str = rest_field(name="issueSummary", visibility=["read", "create", "update", "delete", "query"])
    """Natural language description of the issue. Required."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ARM resource Id of the resource that is having the issue. Only applicable for Discovery
     Solution NLP Subscription Scope."""
    service_id: Optional[str] = rest_field(name="serviceId", visibility=["read", "create", "update", "delete", "query"])
    """ARM service Id of the service that is having the issue. For more information on service Id see
     `https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP
     <https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP>`_."""
    additional_context: Optional[str] = rest_field(
        name="additionalContext", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional information in the form of a string."""

    @overload
    def __init__(
        self,
        *,
        issue_summary: str,
        resource_id: Optional[str] = None,
        service_id: Optional[str] = None,
        additional_context: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiscoveryNlpResponse(_Model):
    """Successfully fetched list of solution metadata.

    :ivar value: The list of solution metadata.
    :vartype value: list[~azure.mgmt.help.models.SolutionNlpMetadataResource]
    """

    value: Optional[List["_models.SolutionNlpMetadataResource"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of solution metadata."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.SolutionNlpMetadataResource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Error(_Model):
    """Error definition.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar type: Service specific error type which serves as additional context for the error
     herein.
    :vartype type: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: An array of additional nested error response info objects, as described by this
     contract.
    :vartype details: list[~azure.mgmt.help.models.Error]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """Service specific error code which serves as the substatus for the HTTP error code."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Service specific error type which serves as additional context for the error herein."""
    message: Optional[str] = rest_field(visibility=["read"])
    """Description of the error."""
    details: Optional[List["_models.Error"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An array of additional nested error response info objects, as described by this contract."""

    @overload
    def __init__(
        self,
        *,
        details: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.help.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.help.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.help.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Filter(_Model):
    """Filter criterion.

    :ivar name: Filter name.
    :vartype name: str
    :ivar values_property: Filter values.
    :vartype values_property: str
    :ivar operator: Filter operator.
    :vartype operator: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Filter name."""
    values_property: Optional[str] = rest_field(
        name="values", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter values."""
    operator: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Filter operator."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        values_property: Optional[str] = None,
        operator: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FilterGroup(_Model):
    """Filter group.

    :ivar filter: List of filters.
    :vartype filter: list[~azure.mgmt.help.models.Filter]
    """

    filter: Optional[List["_models.Filter"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of filters."""

    @overload
    def __init__(
        self,
        *,
        filter: Optional[List["_models.Filter"]] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Insight(_Model):
    """Detailed insights(s) obtained via the invocation of an insight diagnostic.

    :ivar id: Article id.
    :vartype id: str
    :ivar title: This insight's title.
    :vartype title: str
    :ivar results: Detailed result content.
    :vartype results: str
    :ivar importance_level: Importance level of the insight. Known values are: "Critical",
     "Warning", and "Information".
    :vartype importance_level: str or ~azure.mgmt.help.models.ImportanceLevel
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Article id."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """This insight's title."""
    results: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Detailed result content."""
    importance_level: Optional[Union[str, "_models.ImportanceLevel"]] = rest_field(
        name="importanceLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Importance level of the insight. Known values are: \"Critical\", \"Warning\", and
     \"Information\"."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        title: Optional[str] = None,
        results: Optional[str] = None,
        importance_level: Optional[Union[str, "_models.ImportanceLevel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricsBasedChart(_Model):
    """Solutions metrics based chart.

    :ivar name: Chart name.
    :vartype name: str
    :ivar aggregation_type: Allowed values are Sum, Avg, Count, Min, Max. Default is Sum. Known
     values are: "Sum", "Avg", "Count", "Min", and "Max".
    :vartype aggregation_type: str or ~azure.mgmt.help.models.AggregationType
    :ivar time_span_duration: Time span duration.
    :vartype time_span_duration: str
    :ivar title: Chart title.
    :vartype title: str
    :ivar filter_group: Filter group.
    :vartype filter_group: ~azure.mgmt.help.models.FilterGroup
    :ivar replacement_key: Place holder used in HTML Content replace control with the content.
    :vartype replacement_key: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Chart name."""
    aggregation_type: Optional[Union[str, "_models.AggregationType"]] = rest_field(
        name="aggregationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Allowed values are Sum, Avg, Count, Min, Max. Default is Sum. Known values are: \"Sum\",
     \"Avg\", \"Count\", \"Min\", and \"Max\"."""
    time_span_duration: Optional[str] = rest_field(
        name="timeSpanDuration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time span duration."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Chart title."""
    filter_group: Optional["_models.FilterGroup"] = rest_field(
        name="filterGroup", visibility=["read", "create", "update", "delete", "query"]
    )
    """Filter group."""
    replacement_key: Optional[str] = rest_field(
        name="replacementKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder used in HTML Content replace control with the content."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        aggregation_type: Optional[Union[str, "_models.AggregationType"]] = None,
        time_span_duration: Optional[str] = None,
        title: Optional[str] = None,
        filter_group: Optional["_models.FilterGroup"] = None,
        replacement_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NlpSolutions(_Model):
    """Nlp metadata.

    :ivar problem_title: Title of the problem classification.
    :vartype problem_title: str
    :ivar problem_description: Description of the problem classification.
    :vartype problem_description: str
    :ivar service_id: Id of the service
     (`https://learn.microsoft.com/en-us/rest/api/support/services?view=rest-support-2020-04-01
     <https://learn.microsoft.com/en-us/rest/api/support/services?view=rest-support-2020-04-01>`_)
     that may be used to create a support ticket.
    :vartype service_id: str
    :ivar problem_classification_id: Id of the ProblemClassification
     (`https://learn.microsoft.com/en-us/rest/api/support/problem-classifications?view=rest-support-2020-04-01
     <https://learn.microsoft.com/en-us/rest/api/support/problem-classifications?view=rest-support-2020-04-01>`_)
     that may be used to create a support ticket.
    :vartype problem_classification_id: str
    :ivar solutions: The list of solution metadata.
    :vartype solutions: list[~azure.mgmt.help.models.SolutionMetadataProperties]
    :ivar related_services: The set of services that are most likely related to the request. If
     relatedServices is included in the response then solutions may not be discovered until the
     client calls a second time specifying one of the service Ids in the relatedServices object.
    :vartype related_services: list[~azure.mgmt.help.models.ClassificationService]
    """

    problem_title: Optional[str] = rest_field(
        name="problemTitle", visibility=["read", "create", "update", "delete", "query"]
    )
    """Title of the problem classification."""
    problem_description: Optional[str] = rest_field(
        name="problemDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of the problem classification."""
    service_id: Optional[str] = rest_field(name="serviceId", visibility=["read", "create", "update", "delete", "query"])
    """Id of the service
     (`https://learn.microsoft.com/en-us/rest/api/support/services?view=rest-support-2020-04-01
     <https://learn.microsoft.com/en-us/rest/api/support/services?view=rest-support-2020-04-01>`_)
     that may be used to create a support ticket."""
    problem_classification_id: Optional[str] = rest_field(
        name="problemClassificationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Id of the ProblemClassification
     (`https://learn.microsoft.com/en-us/rest/api/support/problem-classifications?view=rest-support-2020-04-01
     <https://learn.microsoft.com/en-us/rest/api/support/problem-classifications?view=rest-support-2020-04-01>`_)
     that may be used to create a support ticket."""
    solutions: Optional[List["_models.SolutionMetadataProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of solution metadata."""
    related_services: Optional[List["_models.ClassificationService"]] = rest_field(
        name="relatedServices", visibility=["read", "create", "update", "delete", "query"]
    )
    """The set of services that are most likely related to the request. If relatedServices is included
     in the response then solutions may not be discovered until the client calls a second time
     specifying one of the service Ids in the relatedServices object."""

    @overload
    def __init__(
        self,
        *,
        problem_title: Optional[str] = None,
        problem_description: Optional[str] = None,
        service_id: Optional[str] = None,
        problem_classification_id: Optional[str] = None,
        solutions: Optional[List["_models.SolutionMetadataProperties"]] = None,
        related_services: Optional[List["_models.ClassificationService"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.help.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.help.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.help.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    """


class ReplacementMaps(_Model):
    """Solution replacement maps.

    :ivar web_results: Solution AzureKB results.
    :vartype web_results: list[~azure.mgmt.help.models.WebResult]
    :ivar diagnostics: Solution diagnostics results.
    :vartype diagnostics: list[~azure.mgmt.help.models.SolutionsDiagnostic]
    :ivar troubleshooters: Solutions Troubleshooters.
    :vartype troubleshooters: list[~azure.mgmt.help.models.SolutionsTroubleshooters]
    :ivar metrics_based_charts: Solution metrics based charts.
    :vartype metrics_based_charts: list[~azure.mgmt.help.models.MetricsBasedChart]
    :ivar videos: Video solutions, which have the power to engage the customer by stimulating their
     senses.
    :vartype videos: list[~azure.mgmt.help.models.Video]
    :ivar video_groups: Group of Videos.
    :vartype video_groups: list[~azure.mgmt.help.models.VideoGroup]
    """

    web_results: Optional[List["_models.WebResult"]] = rest_field(
        name="webResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution AzureKB results."""
    diagnostics: Optional[List["_models.SolutionsDiagnostic"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution diagnostics results."""
    troubleshooters: Optional[List["_models.SolutionsTroubleshooters"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solutions Troubleshooters."""
    metrics_based_charts: Optional[List["_models.MetricsBasedChart"]] = rest_field(
        name="metricsBasedCharts", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution metrics based charts."""
    videos: Optional[List["_models.Video"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Video solutions, which have the power to engage the customer by stimulating their senses."""
    video_groups: Optional[List["_models.VideoGroup"]] = rest_field(
        name="videoGroups", visibility=["read", "create", "update", "delete", "query"]
    )
    """Group of Videos."""

    @overload
    def __init__(
        self,
        *,
        web_results: Optional[List["_models.WebResult"]] = None,
        diagnostics: Optional[List["_models.SolutionsDiagnostic"]] = None,
        troubleshooters: Optional[List["_models.SolutionsTroubleshooters"]] = None,
        metrics_based_charts: Optional[List["_models.MetricsBasedChart"]] = None,
        videos: Optional[List["_models.Video"]] = None,
        video_groups: Optional[List["_models.VideoGroup"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReplacementMapsSelfHelp(_Model):
    """Solution replacement maps.

    :ivar web_results: Solution AzureKB results.
    :vartype web_results: list[~azure.mgmt.help.models.WebResult]
    :ivar videos: Video solutions, which have the power to engage the customer by stimulating their
     senses.
    :vartype videos: list[~azure.mgmt.help.models.Video]
    :ivar video_groups: Group of Videos.
    :vartype video_groups: list[~azure.mgmt.help.models.VideoGroup]
    """

    web_results: Optional[List["_models.WebResult"]] = rest_field(
        name="webResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution AzureKB results."""
    videos: Optional[List["_models.Video"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Video solutions, which have the power to engage the customer by stimulating their senses."""
    video_groups: Optional[List["_models.VideoGroup"]] = rest_field(
        name="videoGroups", visibility=["read", "create", "update", "delete", "query"]
    )
    """Group of Videos."""

    @overload
    def __init__(
        self,
        *,
        web_results: Optional[List["_models.WebResult"]] = None,
        videos: Optional[List["_models.Video"]] = None,
        video_groups: Optional[List["_models.VideoGroup"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResponseOption(_Model):
    """The status of the resource.

    :ivar key: Unique string.
    :vartype key: str
    :ivar value: Option description.
    :vartype value: str
    """

    key: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique string."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Option description."""

    @overload
    def __init__(
        self,
        *,
        key: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResponseValidationProperties(_Model):
    """Troubleshooter step input response validation properties.

    :ivar regex: Regex used for the input validation.
    :vartype regex: str
    :ivar validation_scope: Validation scope. Known values are: "None", "URLFormat", "GuidFormat",
     "IpAddressFormat", and "NumberOnlyFormat".
    :vartype validation_scope: str or ~azure.mgmt.help.models.ValidationScope
    :ivar is_required: Default True.
    :vartype is_required: bool
    :ivar validation_error_message: Validation Error Message.
    :vartype validation_error_message: str
    :ivar max_length: Max text input (open Ended Text).
    :vartype max_length: int
    """

    regex: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Regex used for the input validation."""
    validation_scope: Optional[Union[str, "_models.ValidationScope"]] = rest_field(
        name="validationScope", visibility=["read", "create", "update", "delete", "query"]
    )
    """Validation scope. Known values are: \"None\", \"URLFormat\", \"GuidFormat\",
     \"IpAddressFormat\", and \"NumberOnlyFormat\"."""
    is_required: Optional[bool] = rest_field(
        name="isRequired", visibility=["read", "create", "update", "delete", "query"]
    )
    """Default True."""
    validation_error_message: Optional[str] = rest_field(
        name="validationErrorMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Validation Error Message."""
    max_length: Optional[int] = rest_field(name="maxLength", visibility=["read", "create", "update", "delete", "query"])
    """Max text input (open Ended Text)."""

    @overload
    def __init__(
        self,
        *,
        regex: Optional[str] = None,
        validation_scope: Optional[Union[str, "_models.ValidationScope"]] = None,
        is_required: Optional[bool] = None,
        validation_error_message: Optional[str] = None,
        max_length: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestartTroubleshooterResponse(_Model):
    """Troubleshooter restart response.

    :ivar troubleshooter_resource_name: Updated TroubleshooterResource Name .
    :vartype troubleshooter_resource_name: str
    """

    troubleshooter_resource_name: Optional[str] = rest_field(name="troubleshooterResourceName", visibility=["read"])
    """Updated TroubleshooterResource Name ."""


class SearchResult(_Model):
    """Details of an AzureKB search result.

    :ivar solution_id: Unique id of the result.
    :vartype solution_id: str
    :ivar content: Content of the search result.
    :vartype content: str
    :ivar title: Title of the search result.
    :vartype title: str
    :ivar confidence: Confidence of the search result. Known values are: "Low", "Medium", and
     "High".
    :vartype confidence: str or ~azure.mgmt.help.models.Confidence
    :ivar source: Source of the search result.
    :vartype source: str
    :ivar result_type: Result type of the search result. Known values are: "Community" and
     "Documentation".
    :vartype result_type: str or ~azure.mgmt.help.models.ResultType
    :ivar rank: rank of the search result.
    :vartype rank: int
    :ivar link: Link to the document.
    :vartype link: str
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unique id of the result."""
    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Content of the search result."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the search result."""
    confidence: Optional[Union[str, "_models.Confidence"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Confidence of the search result. Known values are: \"Low\", \"Medium\", and \"High\"."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the search result."""
    result_type: Optional[Union[str, "_models.ResultType"]] = rest_field(
        name="resultType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Result type of the search result. Known values are: \"Community\" and \"Documentation\"."""
    rank: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """rank of the search result."""
    link: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Link to the document."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        content: Optional[str] = None,
        title: Optional[str] = None,
        confidence: Optional[Union[str, "_models.Confidence"]] = None,
        source: Optional[str] = None,
        result_type: Optional[Union[str, "_models.ResultType"]] = None,
        rank: Optional[int] = None,
        link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Section(_Model):
    """Part of the solution and are dividers in the solution rendering.

    :ivar title: Solution sections title.
    :vartype title: str
    :ivar content: Solution sections content.
    :vartype content: str
    :ivar replacement_maps: Solution replacement maps.
    :vartype replacement_maps: ~azure.mgmt.help.models.ReplacementMaps
    """

    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Solution sections title."""
    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Solution sections content."""
    replacement_maps: Optional["_models.ReplacementMaps"] = rest_field(
        name="replacementMaps", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution replacement maps."""

    @overload
    def __init__(
        self,
        *,
        title: Optional[str] = None,
        content: Optional[str] = None,
        replacement_maps: Optional["_models.ReplacementMaps"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SectionSelfHelp(_Model):
    """Part of the solution and are dividers in the solution rendering.

    :ivar title: Solution sections title.
    :vartype title: str
    :ivar content: Solution sections content.
    :vartype content: str
    :ivar replacement_maps: Solution replacement maps.
    :vartype replacement_maps: ~azure.mgmt.help.models.ReplacementMapsSelfHelp
    """

    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Solution sections title."""
    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Solution sections content."""
    replacement_maps: Optional["_models.ReplacementMapsSelfHelp"] = rest_field(
        name="replacementMaps", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution replacement maps."""

    @overload
    def __init__(
        self,
        *,
        title: Optional[str] = None,
        content: Optional[str] = None,
        replacement_maps: Optional["_models.ReplacementMapsSelfHelp"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SimplifiedSolutionsResource(ExtensionResource):
    """Simplified Solutions response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Simplified Solutions result.
    :vartype properties: ~azure.mgmt.help.models.SimplifiedSolutionsResourceProperties
    """

    properties: Optional["_models.SimplifiedSolutionsResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Simplified Solutions result."""

    __flattened_items = ["solution_id", "parameters", "title", "appendix", "content", "provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SimplifiedSolutionsResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SimplifiedSolutionsResourceProperties(_Model):
    """Simplified Solutions result.

    :ivar solution_id: Solution Id to identify single Simplified Solution.
    :vartype solution_id: str
    :ivar parameters: Client input parameters to run Simplified Solutions.
    :vartype parameters: dict[str, str]
    :ivar title: The title.
    :vartype title: str
    :ivar appendix: Additional parameter response for Simplified Solutions.
    :vartype appendix: dict[str, str]
    :ivar content: The HTML content that needs to be rendered and shown to customer.
    :vartype content: str
    :ivar provisioning_state: Status of Simplified Solution provisioning. Known values are:
     "Succeeded", "PartialComplete", "Failed", "Running", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.help.models.SolutionProvisioningState
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id to identify single Simplified Solution."""
    parameters: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Client input parameters to run Simplified Solutions."""
    title: Optional[str] = rest_field(visibility=["read"])
    """The title."""
    appendix: Optional[Dict[str, str]] = rest_field(visibility=["read"])
    """Additional parameter response for Simplified Solutions."""
    content: Optional[str] = rest_field(visibility=["read"])
    """The HTML content that needs to be rendered and shown to customer."""
    provisioning_state: Optional[Union[str, "_models.SolutionProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Status of Simplified Solution provisioning. Known values are: \"Succeeded\",
     \"PartialComplete\", \"Failed\", \"Running\", and \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        parameters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionMetadataProperties(_Model):
    """Metadata Properties.

    :ivar solution_id: Solution Id.
    :vartype solution_id: str
    :ivar solution_type: Solution Type. Known values are: "Diagnostics", "Solutions",
     "Troubleshooters", and "SelfHelp".
    :vartype solution_type: str or ~azure.mgmt.help.models.SolutionType
    :ivar description: A detailed description of solution.
    :vartype description: str
    :ivar required_inputs: Required parameters for invoking this particular solution.
    :vartype required_inputs: list[str]
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id."""
    solution_type: Optional[Union[str, "_models.SolutionType"]] = rest_field(name="solutionType", visibility=["read"])
    """Solution Type. Known values are: \"Diagnostics\", \"Solutions\", \"Troubleshooters\", and
     \"SelfHelp\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """A detailed description of solution."""
    required_inputs: Optional[List[str]] = rest_field(name="requiredInputs", visibility=["read"])
    """Required parameters for invoking this particular solution."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionMetadataResource(ProxyResource):
    """Metadata resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Solution metadata Resource properties.
    :vartype properties: ~azure.mgmt.help.models.Solutions
    """

    properties: Optional["_models.Solutions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Solution metadata Resource properties."""

    __flattened_items = ["solutions"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.Solutions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SolutionNlpMetadataResource(ProxyResource):
    """Nlp Metadata resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Solution metadata Resource properties.
    :vartype properties: ~azure.mgmt.help.models.NlpSolutions
    """

    properties: Optional["_models.NlpSolutions"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution metadata Resource properties."""

    __flattened_items = [
        "problem_title",
        "problem_description",
        "service_id",
        "problem_classification_id",
        "solutions",
        "related_services",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NlpSolutions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SolutionPatchRequestBody(_Model):
    """Solution PatchRequest body.

    :ivar properties: Solution result.
    :vartype properties: ~azure.mgmt.help.models.SolutionResourceProperties
    """

    properties: Optional["_models.SolutionResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution result."""

    __flattened_items = [
        "trigger_criteria",
        "parameters",
        "solution_id",
        "provisioning_state",
        "title",
        "content",
        "replacement_maps",
        "sections",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SolutionResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SolutionResource(ExtensionResource):
    """Solution response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Solution result.
    :vartype properties: ~azure.mgmt.help.models.SolutionResourceProperties
    """

    properties: Optional["_models.SolutionResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution result."""

    __flattened_items = [
        "trigger_criteria",
        "parameters",
        "solution_id",
        "provisioning_state",
        "title",
        "content",
        "replacement_maps",
        "sections",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SolutionResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SolutionResourceProperties(_Model):
    """Solution result.

    :ivar trigger_criteria: Solution request trigger criteria.
    :vartype trigger_criteria: list[~azure.mgmt.help.models.TriggerCriterion]
    :ivar parameters: Client input parameters to run Solution.
    :vartype parameters: dict[str, str]
    :ivar solution_id: Solution Id to identify single solution.
    :vartype solution_id: str
    :ivar provisioning_state: Status of solution provisioning. Known values are: "Succeeded",
     "PartialComplete", "Failed", "Running", and "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.help.models.SolutionProvisioningState
    :ivar title: The title.
    :vartype title: str
    :ivar content: The HTML content that needs to be rendered and shown to customer.
    :vartype content: str
    :ivar replacement_maps: Solution replacement maps.
    :vartype replacement_maps: ~azure.mgmt.help.models.ReplacementMaps
    :ivar sections: List of section object.
    :vartype sections: list[~azure.mgmt.help.models.Section]
    """

    trigger_criteria: Optional[List["_models.TriggerCriterion"]] = rest_field(
        name="triggerCriteria", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution request trigger criteria."""
    parameters: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Client input parameters to run Solution."""
    solution_id: Optional[str] = rest_field(name="solutionId", visibility=["read"])
    """Solution Id to identify single solution."""
    provisioning_state: Optional[Union[str, "_models.SolutionProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Status of solution provisioning. Known values are: \"Succeeded\", \"PartialComplete\",
     \"Failed\", \"Running\", and \"Canceled\"."""
    title: Optional[str] = rest_field(visibility=["read"])
    """The title."""
    content: Optional[str] = rest_field(visibility=["read"])
    """The HTML content that needs to be rendered and shown to customer."""
    replacement_maps: Optional["_models.ReplacementMaps"] = rest_field(name="replacementMaps", visibility=["read"])
    """Solution replacement maps."""
    sections: Optional[List["_models.Section"]] = rest_field(visibility=["read"])
    """List of section object."""

    @overload
    def __init__(
        self,
        *,
        trigger_criteria: Optional[List["_models.TriggerCriterion"]] = None,
        parameters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionResourceSelfHelp(ProxyResource):
    """Self Help Solution response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Solution result.
    :vartype properties: ~azure.mgmt.help.models.SolutionsResourcePropertiesSelfHelp
    """

    properties: Optional["_models.SolutionsResourcePropertiesSelfHelp"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution result."""

    __flattened_items = ["solution_id", "title", "content", "replacement_maps", "sections"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SolutionsResourcePropertiesSelfHelp"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class Solutions(_Model):
    """List of solutions.

    :ivar solutions: List of metadata.
    :vartype solutions: list[~azure.mgmt.help.models.SolutionMetadataProperties]
    """

    solutions: Optional[List["_models.SolutionMetadataProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of metadata."""

    @overload
    def __init__(
        self,
        *,
        solutions: Optional[List["_models.SolutionMetadataProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionsDiagnostic(_Model):
    """Solutions Diagnostic.

    :ivar solution_id: Solution Id to identify single Solutions Diagnostic.
    :vartype solution_id: str
    :ivar status: Denotes the status of the diagnostic resource. Known values are: "Failed",
     "MissingInputs", "Running", "Succeeded", and "Timeout".
    :vartype status: str or ~azure.mgmt.help.models.Status
    :ivar status_details: Details of the status.
    :vartype status_details: str
    :ivar replacement_key: Place holder used in HTML Content replace control with the content.
    :vartype replacement_key: str
    :ivar estimated_completion_time: Diagnostics estimated completion time in minutes.
    :vartype estimated_completion_time: str
    :ivar required_parameters: Required parameters of this item.
    :vartype required_parameters: list[str]
    :ivar insights: Diagnostic insights.
    :vartype insights: list[~azure.mgmt.help.models.Insight]
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id to identify single Solutions Diagnostic."""
    status: Optional[Union[str, "_models.Status"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Denotes the status of the diagnostic resource. Known values are: \"Failed\", \"MissingInputs\",
     \"Running\", \"Succeeded\", and \"Timeout\"."""
    status_details: Optional[str] = rest_field(
        name="statusDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the status."""
    replacement_key: Optional[str] = rest_field(
        name="replacementKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder used in HTML Content replace control with the content."""
    estimated_completion_time: Optional[str] = rest_field(
        name="estimatedCompletionTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Diagnostics estimated completion time in minutes."""
    required_parameters: Optional[List[str]] = rest_field(
        name="requiredParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required parameters of this item."""
    insights: Optional[List["_models.Insight"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Diagnostic insights."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
        status_details: Optional[str] = None,
        replacement_key: Optional[str] = None,
        estimated_completion_time: Optional[str] = None,
        required_parameters: Optional[List[str]] = None,
        insights: Optional[List["_models.Insight"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionsResourcePropertiesSelfHelp(_Model):
    """Solution result.

    :ivar solution_id: SolutionId is a unique id to identify a solution. You can retrieve the
     solution id using the Discovery api -
     `https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=HTTP
     <https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=HTTP>`_.
    :vartype solution_id: str
    :ivar title: The title.
    :vartype title: str
    :ivar content: The HTML content that needs to be rendered and shown to customer.
    :vartype content: str
    :ivar replacement_maps: Solution replacement maps.
    :vartype replacement_maps: ~azure.mgmt.help.models.ReplacementMapsSelfHelp
    :ivar sections: List of section object.
    :vartype sections: list[~azure.mgmt.help.models.SectionSelfHelp]
    """

    solution_id: Optional[str] = rest_field(name="solutionId", visibility=["read"])
    """SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     Discovery api -
     `https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=HTTP
     <https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=HTTP>`_."""
    title: Optional[str] = rest_field(visibility=["read"])
    """The title."""
    content: Optional[str] = rest_field(visibility=["read"])
    """The HTML content that needs to be rendered and shown to customer."""
    replacement_maps: Optional["_models.ReplacementMapsSelfHelp"] = rest_field(
        name="replacementMaps", visibility=["read"]
    )
    """Solution replacement maps."""
    sections: Optional[List["_models.SectionSelfHelp"]] = rest_field(visibility=["read"])
    """List of section object."""


class SolutionsTroubleshooters(_Model):
    """Troubleshooters in Solutions.

    :ivar solution_id: Solution Id to identify single Solutions Troubleshooter.
    :vartype solution_id: str
    :ivar title: Troubleshooter title.
    :vartype title: str
    :ivar summary: Troubleshooter summary.
    :vartype summary: str
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id to identify single Solutions Troubleshooter."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Troubleshooter title."""
    summary: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Troubleshooter summary."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        title: Optional[str] = None,
        summary: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionWarmUpRequestBody(_Model):
    """Solution WarmUpRequest body.

    :ivar parameters: Dictionary of <string>.
    :vartype parameters: dict[str, str]
    """

    parameters: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of <string>."""

    @overload
    def __init__(
        self,
        *,
        parameters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Step(_Model):
    """Troubleshooter step.

    :ivar id: Unique step id.
    :vartype id: str
    :ivar title: Step title.
    :vartype title: str
    :ivar description: Step description.
    :vartype description: str
    :ivar guidance: Get or sets the Step guidance.
    :vartype guidance: str
    :ivar execution_status: Status of Troubleshooter Step execution. Known values are: "Success",
     "Running", "Failed", and "Warning".
    :vartype execution_status: str or ~azure.mgmt.help.models.ExecutionStatus
    :ivar execution_status_description: This field has more detailed status description of the
     execution status.
    :vartype execution_status_description: str
    :ivar type: Type of Troubleshooting step. Known values are: "Decision", "Solution", "Insight",
     "AutomatedCheck", and "Input".
    :vartype type: str or ~azure.mgmt.help.models.Type
    :ivar is_last_step: is this last step of the workflow.
    :vartype is_last_step: bool
    :ivar inputs:
    :vartype inputs: list[~azure.mgmt.help.models.StepInput]
    :ivar automated_check_results: Only for AutomatedStep type.
    :vartype automated_check_results: ~azure.mgmt.help.models.AutomatedCheckResult
    :ivar insights:
    :vartype insights: list[~azure.mgmt.help.models.Insight]
    :ivar error: The error detail.
    :vartype error: ~azure.mgmt.help.models.ErrorDetail
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique step id."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Step title."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Step description."""
    guidance: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Get or sets the Step guidance."""
    execution_status: Optional[Union[str, "_models.ExecutionStatus"]] = rest_field(
        name="executionStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of Troubleshooter Step execution. Known values are: \"Success\", \"Running\",
     \"Failed\", and \"Warning\"."""
    execution_status_description: Optional[str] = rest_field(
        name="executionStatusDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """This field has more detailed status description of the execution status."""
    type: Optional[Union[str, "_models.Type"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of Troubleshooting step. Known values are: \"Decision\", \"Solution\", \"Insight\",
     \"AutomatedCheck\", and \"Input\"."""
    is_last_step: Optional[bool] = rest_field(
        name="isLastStep", visibility=["read", "create", "update", "delete", "query"]
    )
    """is this last step of the workflow."""
    inputs: Optional[List["_models.StepInput"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    automated_check_results: Optional["_models.AutomatedCheckResult"] = rest_field(
        name="automatedCheckResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """Only for AutomatedStep type."""
    insights: Optional[List["_models.Insight"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error detail."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        title: Optional[str] = None,
        description: Optional[str] = None,
        guidance: Optional[str] = None,
        execution_status: Optional[Union[str, "_models.ExecutionStatus"]] = None,
        execution_status_description: Optional[str] = None,
        type: Optional[Union[str, "_models.Type"]] = None,
        is_last_step: Optional[bool] = None,
        inputs: Optional[List["_models.StepInput"]] = None,
        automated_check_results: Optional["_models.AutomatedCheckResult"] = None,
        insights: Optional[List["_models.Insight"]] = None,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StepInput(_Model):
    """Details of step input.

    :ivar question_id: Use Index as QuestionId.
    :vartype question_id: str
    :ivar question_type: Type of Question. Known values are: "RadioButton", "Dropdown",
     "TextInput", "MultiLineInfoBox", "DateTimePicker", and "MultiSelect".
    :vartype question_type: str or ~azure.mgmt.help.models.QuestionType
    :ivar question_title: Question title.
    :vartype question_title: str
    :ivar question_content: User question content.
    :vartype question_content: str
    :ivar question_content_type: Default is Text. Known values are: "Text", "Html", and "Markdown".
    :vartype question_content_type: str or ~azure.mgmt.help.models.QuestionContentType
    :ivar response_hint: Place holder text for response hints.
    :vartype response_hint: str
    :ivar recommended_option: Result of Automate step.
    :vartype recommended_option: str
    :ivar selected_option_value: Text of response that was selected.
    :vartype selected_option_value: str
    :ivar response_validation_properties: Troubleshooter step input response validation properties.
    :vartype response_validation_properties: ~azure.mgmt.help.models.ResponseValidationProperties
    :ivar response_options:
    :vartype response_options: list[~azure.mgmt.help.models.ResponseOption]
    """

    question_id: Optional[str] = rest_field(
        name="questionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Use Index as QuestionId."""
    question_type: Optional[Union[str, "_models.QuestionType"]] = rest_field(
        name="questionType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of Question. Known values are: \"RadioButton\", \"Dropdown\", \"TextInput\",
     \"MultiLineInfoBox\", \"DateTimePicker\", and \"MultiSelect\"."""
    question_title: Optional[str] = rest_field(
        name="questionTitle", visibility=["read", "create", "update", "delete", "query"]
    )
    """Question title."""
    question_content: Optional[str] = rest_field(
        name="questionContent", visibility=["read", "create", "update", "delete", "query"]
    )
    """User question content."""
    question_content_type: Optional[Union[str, "_models.QuestionContentType"]] = rest_field(
        name="questionContentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Default is Text. Known values are: \"Text\", \"Html\", and \"Markdown\"."""
    response_hint: Optional[str] = rest_field(
        name="responseHint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder text for response hints."""
    recommended_option: Optional[str] = rest_field(
        name="recommendedOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Result of Automate step."""
    selected_option_value: Optional[str] = rest_field(
        name="selectedOptionValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """Text of response that was selected."""
    response_validation_properties: Optional["_models.ResponseValidationProperties"] = rest_field(
        name="responseValidationProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Troubleshooter step input response validation properties."""
    response_options: Optional[List["_models.ResponseOption"]] = rest_field(
        name="responseOptions", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        question_id: Optional[str] = None,
        question_type: Optional[Union[str, "_models.QuestionType"]] = None,
        question_title: Optional[str] = None,
        question_content: Optional[str] = None,
        question_content_type: Optional[Union[str, "_models.QuestionContentType"]] = None,
        response_hint: Optional[str] = None,
        recommended_option: Optional[str] = None,
        selected_option_value: Optional[str] = None,
        response_validation_properties: Optional["_models.ResponseValidationProperties"] = None,
        response_options: Optional[List["_models.ResponseOption"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.help.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.help.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TriggerCriterion(_Model):
    """Solution request trigger criterion. SolutionId/ProblemClassificationId is the only supported
    trigger type for Solution PUT request. ReplacementKey is the only supported trigger type for
    Solution PATCH request.

    :ivar name: Trigger criterion name. Known values are: "SolutionId", "ProblemClassificationId",
     and "ReplacementKey".
    :vartype name: str or ~azure.mgmt.help.models.Name
    :ivar value: Trigger criterion value.
    :vartype value: str
    """

    name: Optional[Union[str, "_models.Name"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Trigger criterion name. Known values are: \"SolutionId\", \"ProblemClassificationId\", and
     \"ReplacementKey\"."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Trigger criterion value."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[Union[str, "_models.Name"]] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TroubleshooterInstanceProperties(_Model):
    """Troubleshooter Instance properties.

    :ivar solution_id: Solution Id to identify single troubleshooter.
    :vartype solution_id: str
    :ivar parameters: Client input parameters to run Troubleshooter Resource.
    :vartype parameters: dict[str, str]
    :ivar provisioning_state: Status of troubleshooter provisioning. Known values are: "Succeeded",
     "Failed", "Canceled", "Running", and "AutoContinue".
    :vartype provisioning_state: str or ~azure.mgmt.help.models.TroubleshooterProvisioningState
    :ivar steps: List of step object.
    :vartype steps: list[~azure.mgmt.help.models.Step]
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Solution Id to identify single troubleshooter."""
    parameters: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Client input parameters to run Troubleshooter Resource."""
    provisioning_state: Optional[Union[str, "_models.TroubleshooterProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Status of troubleshooter provisioning. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Running\", and \"AutoContinue\"."""
    steps: Optional[List["_models.Step"]] = rest_field(visibility=["read"])
    """List of step object."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        parameters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TroubleshooterResource(ExtensionResource):
    """Troubleshooter response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.help.models.SystemData
    :ivar properties: Troubleshooter Instance properties.
    :vartype properties: ~azure.mgmt.help.models.TroubleshooterInstanceProperties
    """

    properties: Optional["_models.TroubleshooterInstanceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Troubleshooter Instance properties."""

    __flattened_items = ["solution_id", "parameters", "provisioning_state", "steps"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.TroubleshooterInstanceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class TroubleshooterResponse(_Model):
    """User Response for Troubleshooter continue request.

    :ivar question_id: id of the question.
    :vartype question_id: str
    :ivar question_type: Type of Question. Known values are: "RadioButton", "Dropdown",
     "TextInput", "MultiLineInfoBox", "DateTimePicker", and "MultiSelect".
    :vartype question_type: str or ~azure.mgmt.help.models.QuestionType
    :ivar response: Response key for SingleInput. For Multi-line test/open ended question it is
     free form text.
    :vartype response: str
    """

    question_id: Optional[str] = rest_field(
        name="questionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """id of the question."""
    question_type: Optional[Union[str, "_models.QuestionType"]] = rest_field(
        name="questionType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of Question. Known values are: \"RadioButton\", \"Dropdown\", \"TextInput\",
     \"MultiLineInfoBox\", \"DateTimePicker\", and \"MultiSelect\"."""
    response: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Response key for SingleInput. For Multi-line test/open ended question it is free form text."""

    @overload
    def __init__(
        self,
        *,
        question_id: Optional[str] = None,
        question_type: Optional[Union[str, "_models.QuestionType"]] = None,
        response: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VideoGroupVideo(_Model):
    """VideoGroup video detail.

    :ivar src: Link to the video.
    :vartype src: str
    :ivar title: Title of the video.
    :vartype title: str
    """

    src: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Link to the video."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Title of the video."""

    @overload
    def __init__(
        self,
        *,
        src: Optional[str] = None,
        title: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Video(VideoGroupVideo):
    """Video detail.

    :ivar src: Link to the video.
    :vartype src: str
    :ivar title: Title of the video.
    :vartype title: str
    :ivar replacement_key: Place holder used in HTML Content replace control with the insight
     content.
    :vartype replacement_key: str
    """

    replacement_key: Optional[str] = rest_field(
        name="replacementKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder used in HTML Content replace control with the insight content."""

    @overload
    def __init__(
        self,
        *,
        src: Optional[str] = None,
        title: Optional[str] = None,
        replacement_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VideoGroup(_Model):
    """Video group detail.

    :ivar videos: List of videos will be shown to customers.
    :vartype videos: list[~azure.mgmt.help.models.VideoGroupVideo]
    :ivar replacement_key: Place holder used in HTML Content replace control with the insight
     content.
    :vartype replacement_key: str
    """

    videos: Optional[List["_models.VideoGroupVideo"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of videos will be shown to customers."""
    replacement_key: Optional[str] = rest_field(
        name="replacementKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder used in HTML Content replace control with the insight content."""

    @overload
    def __init__(
        self,
        *,
        videos: Optional[List["_models.VideoGroupVideo"]] = None,
        replacement_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WarmUpParameterBody(_Model):
    """WarmUpParameterBody.

    :ivar solution_warm_up_request_body: The required request body for warming up a solution
     resource.
    :vartype solution_warm_up_request_body: ~azure.mgmt.help.models.SolutionWarmUpRequestBody
    """

    solution_warm_up_request_body: Optional["_models.SolutionWarmUpRequestBody"] = rest_field(
        name="solutionWarmUpRequestBody", visibility=["read", "create", "update", "delete", "query"]
    )
    """The required request body for warming up a solution resource."""

    @overload
    def __init__(
        self,
        *,
        solution_warm_up_request_body: Optional["_models.SolutionWarmUpRequestBody"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebResult(_Model):
    """AzureKB web result.

    :ivar replacement_key: Place holder used in HTML Content replace control with the content.
    :vartype replacement_key: str
    :ivar search_results: AzureKB search results.
    :vartype search_results: list[~azure.mgmt.help.models.SearchResult]
    """

    replacement_key: Optional[str] = rest_field(
        name="replacementKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Place holder used in HTML Content replace control with the content."""
    search_results: Optional[List["_models.SearchResult"]] = rest_field(
        name="searchResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """AzureKB search results."""

    @overload
    def __init__(
        self,
        *,
        replacement_key: Optional[str] = None,
        search_results: Optional[List["_models.SearchResult"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
