# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.help import HelpClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestHelpDiagnosticResourcesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(HelpClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_diagnostic_resources_get(self, resource_group):
        response = self.client.diagnostic_resources.get(
            scope="str",
            diagnostics_resource_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_diagnostic_resources_begin_create(self, resource_group):
        response = self.client.diagnostic_resources.begin_create(
            scope="str",
            diagnostics_resource_name="str",
            diagnostic_resource_request={
                "id": "str",
                "name": "str",
                "properties": {
                    "acceptedAt": "str",
                    "diagnostics": [
                        {
                            "error": {"code": "str", "details": [...], "message": "str", "type": "str"},
                            "insights": [{"id": "str", "importanceLevel": "str", "results": "str", "title": "str"}],
                            "solutionId": "str",
                            "status": "str",
                        }
                    ],
                    "globalParameters": {"str": "str"},
                    "insights": [{"additionalParameters": {"str": "str"}, "solutionId": "str"}],
                    "provisioningState": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
