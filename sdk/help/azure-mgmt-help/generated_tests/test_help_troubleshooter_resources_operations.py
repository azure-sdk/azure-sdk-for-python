# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.help import HelpClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestHelpTroubleshooterResourcesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(HelpClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_troubleshooter_resources_get(self, resource_group):
        response = self.client.troubleshooter_resources.get(
            scope="str",
            troubleshooter_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_troubleshooter_resources_create(self, resource_group):
        response = self.client.troubleshooter_resources.create(
            scope="str",
            troubleshooter_name="str",
            create_troubleshooter_request_body={
                "id": "str",
                "name": "str",
                "properties": {
                    "parameters": {"str": "str"},
                    "provisioningState": "str",
                    "solutionId": "str",
                    "steps": [
                        {
                            "automatedCheckResults": {
                                "result": "str",
                                "status": "str",
                                "type": "str",
                                "version": "str",
                            },
                            "description": "str",
                            "error": {
                                "additionalInfo": [{"info": {}, "type": "str"}],
                                "code": "str",
                                "details": [...],
                                "message": "str",
                                "target": "str",
                            },
                            "executionStatus": "str",
                            "executionStatusDescription": "str",
                            "guidance": "str",
                            "id": "str",
                            "inputs": [
                                {
                                    "questionContent": "str",
                                    "questionContentType": "str",
                                    "questionId": "str",
                                    "questionTitle": "str",
                                    "questionType": "str",
                                    "recommendedOption": "str",
                                    "responseHint": "str",
                                    "responseOptions": [{"key": "str", "value": "str"}],
                                    "responseValidationProperties": {
                                        "isRequired": bool,
                                        "maxLength": 0,
                                        "regex": "str",
                                        "validationErrorMessage": "str",
                                        "validationScope": "str",
                                    },
                                    "selectedOptionValue": "str",
                                }
                            ],
                            "insights": [{"id": "str", "importanceLevel": "str", "results": "str", "title": "str"}],
                            "isLastStep": bool,
                            "title": "str",
                            "type": "str",
                        }
                    ],
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_troubleshooter_resources_continue_method(self, resource_group):
        response = self.client.troubleshooter_resources.continue_method(
            scope="str",
            troubleshooter_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_troubleshooter_resources_end(self, resource_group):
        response = self.client.troubleshooter_resources.end(
            scope="str",
            troubleshooter_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_troubleshooter_resources_restart(self, resource_group):
        response = self.client.troubleshooter_resources.restart(
            scope="str",
            troubleshooter_name="str",
        )

        # please add some check logic here by yourself
        # ...
