# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
import datetime
from io import IOBase
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from .._configuration import IotDpsClientConfiguration
from .._utils.serialization import Deserializer, Serializer

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_list_request(
    resource_group_name: str, provisioning_service_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_request(
    resource_group_name: str,
    provisioning_service_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
        "certificateName": _SERIALIZER.url("certificate_name", certificate_name, "str", max_length=256),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if if_match is not None:
        _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_create_or_update_request(
    resource_group_name: str,
    provisioning_service_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
        "certificateName": _SERIALIZER.url("certificate_name", certificate_name, "str", max_length=256),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if if_match is not None:
        _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_delete_request(
    resource_group_name: str,
    provisioning_service_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: str,
    certificate_name1: Optional[str] = None,
    certificate_raw_bytes: Optional[bytes] = None,
    certificate_is_verified: Optional[bool] = None,
    certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
    certificate_created: Optional[datetime.datetime] = None,
    certificate_last_updated: Optional[datetime.datetime] = None,
    certificate_has_private_key: Optional[bool] = None,
    certificate_nonce: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
        "certificateName": _SERIALIZER.url("certificate_name", certificate_name, "str", max_length=256),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if certificate_name1 is not None:
        _params["certificate.name"] = _SERIALIZER.query("certificate_name1", certificate_name1, "str")
    if certificate_raw_bytes is not None:
        _params["certificate.rawBytes"] = _SERIALIZER.query("certificate_raw_bytes", certificate_raw_bytes, "bytearray")
    if certificate_is_verified is not None:
        _params["certificate.isVerified"] = _SERIALIZER.query(
            "certificate_is_verified", certificate_is_verified, "bool"
        )
    if certificate_purpose is not None:
        _params["certificate.purpose"] = _SERIALIZER.query("certificate_purpose", certificate_purpose, "str")
    if certificate_created is not None:
        _params["certificate.created"] = _SERIALIZER.query("certificate_created", certificate_created, "iso-8601")
    if certificate_last_updated is not None:
        _params["certificate.lastUpdated"] = _SERIALIZER.query(
            "certificate_last_updated", certificate_last_updated, "iso-8601"
        )
    if certificate_has_private_key is not None:
        _params["certificate.hasPrivateKey"] = _SERIALIZER.query(
            "certificate_has_private_key", certificate_has_private_key, "bool"
        )
    if certificate_nonce is not None:
        _params["certificate.nonce"] = _SERIALIZER.query("certificate_nonce", certificate_nonce, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_generate_verification_code_request(
    resource_group_name: str,
    provisioning_service_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: str,
    certificate_name1: Optional[str] = None,
    certificate_raw_bytes: Optional[bytes] = None,
    certificate_is_verified: Optional[bool] = None,
    certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
    certificate_created: Optional[datetime.datetime] = None,
    certificate_last_updated: Optional[datetime.datetime] = None,
    certificate_has_private_key: Optional[bool] = None,
    certificate_nonce: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
        "certificateName": _SERIALIZER.url("certificate_name", certificate_name, "str", max_length=256),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if certificate_name1 is not None:
        _params["certificate.name"] = _SERIALIZER.query("certificate_name1", certificate_name1, "str")
    if certificate_raw_bytes is not None:
        _params["certificate.rawBytes"] = _SERIALIZER.query("certificate_raw_bytes", certificate_raw_bytes, "bytearray")
    if certificate_is_verified is not None:
        _params["certificate.isVerified"] = _SERIALIZER.query(
            "certificate_is_verified", certificate_is_verified, "bool"
        )
    if certificate_purpose is not None:
        _params["certificate.purpose"] = _SERIALIZER.query("certificate_purpose", certificate_purpose, "str")
    if certificate_created is not None:
        _params["certificate.created"] = _SERIALIZER.query("certificate_created", certificate_created, "iso-8601")
    if certificate_last_updated is not None:
        _params["certificate.lastUpdated"] = _SERIALIZER.query(
            "certificate_last_updated", certificate_last_updated, "iso-8601"
        )
    if certificate_has_private_key is not None:
        _params["certificate.hasPrivateKey"] = _SERIALIZER.query(
            "certificate_has_private_key", certificate_has_private_key, "bool"
        )
    if certificate_nonce is not None:
        _params["certificate.nonce"] = _SERIALIZER.query("certificate_nonce", certificate_nonce, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_verify_certificate_request(
    resource_group_name: str,
    provisioning_service_name: str,
    certificate_name: str,
    subscription_id: str,
    *,
    if_match: str,
    certificate_name1: Optional[str] = None,
    certificate_raw_bytes: Optional[bytes] = None,
    certificate_is_verified: Optional[bool] = None,
    certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
    certificate_created: Optional[datetime.datetime] = None,
    certificate_last_updated: Optional[datetime.datetime] = None,
    certificate_has_private_key: Optional[bool] = None,
    certificate_nonce: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-02-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify",
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "provisioningServiceName": _SERIALIZER.url("provisioning_service_name", provisioning_service_name, "str"),
        "certificateName": _SERIALIZER.url("certificate_name", certificate_name, "str", max_length=256),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if certificate_name1 is not None:
        _params["certificate.name"] = _SERIALIZER.query("certificate_name1", certificate_name1, "str")
    if certificate_raw_bytes is not None:
        _params["certificate.rawBytes"] = _SERIALIZER.query("certificate_raw_bytes", certificate_raw_bytes, "bytearray")
    if certificate_is_verified is not None:
        _params["certificate.isVerified"] = _SERIALIZER.query(
            "certificate_is_verified", certificate_is_verified, "bool"
        )
    if certificate_purpose is not None:
        _params["certificate.purpose"] = _SERIALIZER.query("certificate_purpose", certificate_purpose, "str")
    if certificate_created is not None:
        _params["certificate.created"] = _SERIALIZER.query("certificate_created", certificate_created, "iso-8601")
    if certificate_last_updated is not None:
        _params["certificate.lastUpdated"] = _SERIALIZER.query(
            "certificate_last_updated", certificate_last_updated, "iso-8601"
        )
    if certificate_has_private_key is not None:
        _params["certificate.hasPrivateKey"] = _SERIALIZER.query(
            "certificate_has_private_key", certificate_has_private_key, "bool"
        )
    if certificate_nonce is not None:
        _params["certificate.nonce"] = _SERIALIZER.query("certificate_nonce", certificate_nonce, "str")

    # Construct headers
    _headers["If-Match"] = _SERIALIZER.header("if_match", if_match, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class DpsCertificateOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.iothubprovisioningservices.IotDpsClient`'s
        :attr:`dps_certificate` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: IotDpsClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self, resource_group_name: str, provisioning_service_name: str, **kwargs: Any
    ) -> _models.CertificateListDescription:
        """Get all the certificates tied to the provisioning service.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :return: CertificateListDescription or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateListDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.CertificateListDescription] = kwargs.pop("cls", None)

        _request = build_list_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CertificateListDescription", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Get the certificate from the provisioning service.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. Default value is None.
        :type if_match: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.CertificateResponse] = kwargs.pop("cls", None)

        _request = build_get_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CertificateResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        certificate_description: _models.CertificateResponse,
        if_match: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Add new certificate or update an existing certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Required.
        :type certificate_description:
         ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :param if_match: ETag of the certificate. This is required to update an existing certificate,
         and ignored while creating a brand new certificate. Default value is None.
        :type if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        certificate_description: IO[bytes],
        if_match: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Add new certificate or update an existing certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Required.
        :type certificate_description: IO[bytes]
        :param if_match: ETag of the certificate. This is required to update an existing certificate,
         and ignored while creating a brand new certificate. Default value is None.
        :type if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        certificate_description: Union[_models.CertificateResponse, IO[bytes]],
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Add new certificate or update an existing certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param certificate_description: The certificate body. Is either a CertificateResponse type or a
         IO[bytes] type. Required.
        :type certificate_description:
         ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse or IO[bytes]
        :param if_match: ETag of the certificate. This is required to update an existing certificate,
         and ignored while creating a brand new certificate. Default value is None.
        :type if_match: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CertificateResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(certificate_description, (IOBase, bytes)):
            _content = certificate_description
        else:
            _json = self._serialize.body(certificate_description, "CertificateResponse")

        _request = build_create_or_update_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CertificateResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: str,
        certificate_name1: Optional[str] = None,
        certificate_raw_bytes: Optional[bytes] = None,
        certificate_is_verified: Optional[bool] = None,
        certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
        certificate_created: Optional[datetime.datetime] = None,
        certificate_last_updated: Optional[datetime.datetime] = None,
        certificate_has_private_key: Optional[bool] = None,
        certificate_nonce: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Deletes the specified certificate associated with the Provisioning Service.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. Required.
        :type if_match: str
        :param certificate_name1: This is optional, and it is the Common Name of the certificate.
         Default value is None.
        :type certificate_name1: str
        :param certificate_raw_bytes: Raw data within the certificate. Default value is None.
        :type certificate_raw_bytes: bytes
        :param certificate_is_verified: Indicates if certificate has been verified by owner of the
         private key. Default value is None.
        :type certificate_is_verified: bool
        :param certificate_purpose: A description that mentions the purpose of the certificate. Known
         values are: "clientAuthentication" and "serverAuthentication". Default value is None.
        :type certificate_purpose: str or
         ~azure.mgmt.iothubprovisioningservices.models.CertificatePurpose
        :param certificate_created: Time the certificate is created. Default value is None.
        :type certificate_created: ~datetime.datetime
        :param certificate_last_updated: Time the certificate is last updated. Default value is None.
        :type certificate_last_updated: ~datetime.datetime
        :param certificate_has_private_key: Indicates if the certificate contains a private key.
         Default value is None.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession. Default
         value is None.
        :type certificate_nonce: str
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_delete_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            certificate_name1=certificate_name1,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def generate_verification_code(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: str,
        certificate_name1: Optional[str] = None,
        certificate_raw_bytes: Optional[bytes] = None,
        certificate_is_verified: Optional[bool] = None,
        certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
        certificate_created: Optional[datetime.datetime] = None,
        certificate_last_updated: Optional[datetime.datetime] = None,
        certificate_has_private_key: Optional[bool] = None,
        certificate_nonce: Optional[str] = None,
        **kwargs: Any
    ) -> _models.VerificationCodeResponse:
        """Generate verification code for Proof of Possession.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. This is required to update an existing certificate,
         and ignored while creating a brand new certificate. Required.
        :type if_match: str
        :param certificate_name1: Common Name for the certificate. Default value is None.
        :type certificate_name1: str
        :param certificate_raw_bytes: Raw data of certificate. Default value is None.
        :type certificate_raw_bytes: bytes
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the
         private key. Default value is None.
        :type certificate_is_verified: bool
        :param certificate_purpose: Description mentioning the purpose of the certificate. Known values
         are: "clientAuthentication" and "serverAuthentication". Default value is None.
        :type certificate_purpose: str or
         ~azure.mgmt.iothubprovisioningservices.models.CertificatePurpose
        :param certificate_created: Certificate creation time. Default value is None.
        :type certificate_created: ~datetime.datetime
        :param certificate_last_updated: Certificate last updated time. Default value is None.
        :type certificate_last_updated: ~datetime.datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key. Default
         value is None.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession. Default
         value is None.
        :type certificate_nonce: str
        :return: VerificationCodeResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.VerificationCodeResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.VerificationCodeResponse] = kwargs.pop("cls", None)

        _request = build_generate_verification_code_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            certificate_name1=certificate_name1,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("VerificationCodeResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def verify_certificate(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: str,
        request: _models.VerificationCodeRequest,
        certificate_name1: Optional[str] = None,
        certificate_raw_bytes: Optional[bytes] = None,
        certificate_is_verified: Optional[bool] = None,
        certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
        certificate_created: Optional[datetime.datetime] = None,
        certificate_last_updated: Optional[datetime.datetime] = None,
        certificate_has_private_key: Optional[bool] = None,
        certificate_nonce: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. Required.
        :type if_match: str
        :param request: The name of the certificate. Required.
        :type request: ~azure.mgmt.iothubprovisioningservices.models.VerificationCodeRequest
        :param certificate_name1: Common Name for the certificate. Default value is None.
        :type certificate_name1: str
        :param certificate_raw_bytes: Raw data of certificate. Default value is None.
        :type certificate_raw_bytes: bytes
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the
         private key. Default value is None.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate. Known values are:
         "clientAuthentication" and "serverAuthentication". Default value is None.
        :type certificate_purpose: str or
         ~azure.mgmt.iothubprovisioningservices.models.CertificatePurpose
        :param certificate_created: Certificate creation time. Default value is None.
        :type certificate_created: ~datetime.datetime
        :param certificate_last_updated: Certificate last updated time. Default value is None.
        :type certificate_last_updated: ~datetime.datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key. Default
         value is None.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession. Default
         value is None.
        :type certificate_nonce: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def verify_certificate(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: str,
        request: IO[bytes],
        certificate_name1: Optional[str] = None,
        certificate_raw_bytes: Optional[bytes] = None,
        certificate_is_verified: Optional[bool] = None,
        certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
        certificate_created: Optional[datetime.datetime] = None,
        certificate_last_updated: Optional[datetime.datetime] = None,
        certificate_has_private_key: Optional[bool] = None,
        certificate_nonce: Optional[str] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. Required.
        :type if_match: str
        :param request: The name of the certificate. Required.
        :type request: IO[bytes]
        :param certificate_name1: Common Name for the certificate. Default value is None.
        :type certificate_name1: str
        :param certificate_raw_bytes: Raw data of certificate. Default value is None.
        :type certificate_raw_bytes: bytes
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the
         private key. Default value is None.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate. Known values are:
         "clientAuthentication" and "serverAuthentication". Default value is None.
        :type certificate_purpose: str or
         ~azure.mgmt.iothubprovisioningservices.models.CertificatePurpose
        :param certificate_created: Certificate creation time. Default value is None.
        :type certificate_created: ~datetime.datetime
        :param certificate_last_updated: Certificate last updated time. Default value is None.
        :type certificate_last_updated: ~datetime.datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key. Default
         value is None.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession. Default
         value is None.
        :type certificate_nonce: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def verify_certificate(
        self,
        resource_group_name: str,
        provisioning_service_name: str,
        certificate_name: str,
        if_match: str,
        request: Union[_models.VerificationCodeRequest, IO[bytes]],
        certificate_name1: Optional[str] = None,
        certificate_raw_bytes: Optional[bytes] = None,
        certificate_is_verified: Optional[bool] = None,
        certificate_purpose: Optional[Union[str, _models.CertificatePurpose]] = None,
        certificate_created: Optional[datetime.datetime] = None,
        certificate_last_updated: Optional[datetime.datetime] = None,
        certificate_has_private_key: Optional[bool] = None,
        certificate_nonce: Optional[str] = None,
        **kwargs: Any
    ) -> _models.CertificateResponse:
        """Verifies the certificate's private key possession by providing the leaf cert issued by the
        verifying pre uploaded certificate.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param provisioning_service_name: Name of the provisioning service to retrieve. Required.
        :type provisioning_service_name: str
        :param certificate_name: Name of the certificate to retrieve. Required.
        :type certificate_name: str
        :param if_match: ETag of the certificate. Required.
        :type if_match: str
        :param request: The name of the certificate. Is either a VerificationCodeRequest type or a
         IO[bytes] type. Required.
        :type request: ~azure.mgmt.iothubprovisioningservices.models.VerificationCodeRequest or
         IO[bytes]
        :param certificate_name1: Common Name for the certificate. Default value is None.
        :type certificate_name1: str
        :param certificate_raw_bytes: Raw data of certificate. Default value is None.
        :type certificate_raw_bytes: bytes
        :param certificate_is_verified: Indicates if the certificate has been verified by owner of the
         private key. Default value is None.
        :type certificate_is_verified: bool
        :param certificate_purpose: Describe the purpose of the certificate. Known values are:
         "clientAuthentication" and "serverAuthentication". Default value is None.
        :type certificate_purpose: str or
         ~azure.mgmt.iothubprovisioningservices.models.CertificatePurpose
        :param certificate_created: Certificate creation time. Default value is None.
        :type certificate_created: ~datetime.datetime
        :param certificate_last_updated: Certificate last updated time. Default value is None.
        :type certificate_last_updated: ~datetime.datetime
        :param certificate_has_private_key: Indicates if the certificate contains private key. Default
         value is None.
        :type certificate_has_private_key: bool
        :param certificate_nonce: Random number generated to indicate Proof of Possession. Default
         value is None.
        :type certificate_nonce: str
        :return: CertificateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.iothubprovisioningservices.models.CertificateResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CertificateResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request, (IOBase, bytes)):
            _content = request
        else:
            _json = self._serialize.body(request, "VerificationCodeRequest")

        _request = build_verify_certificate_request(
            resource_group_name=resource_group_name,
            provisioning_service_name=provisioning_service_name,
            certificate_name=certificate_name,
            subscription_id=self._config.subscription_id,
            if_match=if_match,
            certificate_name1=certificate_name1,
            certificate_raw_bytes=certificate_raw_bytes,
            certificate_is_verified=certificate_is_verified,
            certificate_purpose=certificate_purpose,
            certificate_created=certificate_created,
            certificate_last_updated=certificate_last_updated,
            certificate_has_private_key=certificate_has_private_key,
            certificate_nonce=certificate_nonce,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorDetails, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CertificateResponse", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
