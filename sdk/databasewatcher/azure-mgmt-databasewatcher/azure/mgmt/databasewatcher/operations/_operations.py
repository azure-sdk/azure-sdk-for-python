# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, Type, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.DatabaseWatcher/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_get_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_create_or_update_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_update_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_delete_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DatabaseWatcher/watchers"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_start_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/start"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_watchers_stop_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/stop"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_targets_get_request(
    resource_group_name: str, watcher_name: str, target_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "targetName": _SERIALIZER.url("target_name", target_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_targets_create_or_update_request(
    resource_group_name: str, watcher_name: str, target_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "targetName": _SERIALIZER.url("target_name", target_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_targets_delete_request(
    resource_group_name: str, watcher_name: str, target_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets/{targetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "targetName": _SERIALIZER.url("target_name", target_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_targets_list_by_watcher_request(
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/targets"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_shared_private_link_resources_get_request(  # pylint: disable=name-too-long
    resource_group_name: str,
    watcher_name: str,
    shared_private_link_resource_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "sharedPrivateLinkResourceName": _SERIALIZER.url(
            "shared_private_link_resource_name", shared_private_link_resource_name, "str"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_shared_private_link_resources_create_request(  # pylint: disable=name-too-long
    resource_group_name: str,
    watcher_name: str,
    shared_private_link_resource_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "sharedPrivateLinkResourceName": _SERIALIZER.url(
            "shared_private_link_resource_name", shared_private_link_resource_name, "str"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_shared_private_link_resources_delete_request(  # pylint: disable=name-too-long
    resource_group_name: str,
    watcher_name: str,
    shared_private_link_resource_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
        "sharedPrivateLinkResourceName": _SERIALIZER.url(
            "shared_private_link_resource_name", shared_private_link_resource_name, "str"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_shared_private_link_resources_list_by_watcher_request(  # pylint: disable=name-too-long
    resource_group_name: str, watcher_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/sharedPrivateLinkResources"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "watcherName": _SERIALIZER.url("watcher_name", watcher_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.databasewatcher.DatabaseWatcherClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable["_models.Operation"]:
        # pylint: disable=line-too-long
        """List the operations for the provider.

        :return: An iterator like instance of Operation
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.databasewatcher.models.Operation]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # Optional. Extensible enum. Indicates the action type.
                      "Internal" refers to actions that are for internal only APIs. "Internal"
                    "display": {
                        "description": "str",  # Optional. The short, localized friendly
                          description of the operation; suitable for tool tips and detailed views.
                        "operation": "str",  # Optional. The concise, localized friendly name
                          for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
                          Machine", "Restart Virtual Machine".
                        "provider": "str",  # Optional. The localized friendly form of the
                          resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
                          Compute".
                        "resource": "str"  # Optional. The localized friendly name of the
                          resource type related to this operation. E.g. "Virtual Machines" or "Job
                          Schedule Collections".
                    },
                    "isDataAction": bool,  # Optional. Whether the operation applies to
                      data-plane. This is "true" for data-plane operations and "false" for Azure
                      Resource Manager/control-plane operations.
                    "name": "str",  # Optional. The name of the operation, as per Resource-Based
                      Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
                      "Microsoft.Compute/virtualMachines/capture/action".
                    "origin": "str"  # Optional. The intended executor of the operation; as in
                      Resource Based Access Control (RBAC) and audit logs UX. Default value is
                      "user,system". Known values are: "user", "system", and "user,system".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Operation]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Operation], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class WatchersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.databasewatcher.DatabaseWatcherClient`'s
        :attr:`watchers` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> _models.Watcher:
        # pylint: disable=line-too-long
        """Get a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: Watcher. The Watcher is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Watcher
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Watcher] = kwargs.pop("cls", None)

        _request = build_watchers_get_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Watcher, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _create_or_update_initial(
        self,
        resource_group_name: str,
        watcher_name: str,
        resource: Union[_models.Watcher, JSON, IO[bytes]],
        **kwargs: Any
    ) -> JSON:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_watchers_create_or_update_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        resource: _models.Watcher,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Create a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param resource: Resource create parameters. Required.
        :type resource: ~azure.mgmt.databasewatcher.models.Watcher
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Create a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Create a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        resource: Union[_models.Watcher, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Create a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param resource: Resource create parameters. Is one of the following types: Watcher, JSON,
         IO[bytes] Required.
        :type resource: ~azure.mgmt.databasewatcher.models.Watcher or JSON or IO[bytes]
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Watcher] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_update_initial(
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.Watcher, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.Watcher].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.Watcher](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _update_initial(
        self,
        resource_group_name: str,
        watcher_name: str,
        properties: Union[_models.WatcherUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _content = json.dumps(properties, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_watchers_update_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        properties: _models.WatcherUpdate,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Update a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: ~azure.mgmt.databasewatcher.models.WatcherUpdate
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        }
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Update a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Update a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        properties: Union[_models.WatcherUpdate, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """Update a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param properties: The resource properties to be updated. Is one of the following types:
         WatcherUpdate, JSON, IO[bytes] Required.
        :type properties: ~azure.mgmt.databasewatcher.models.WatcherUpdate or JSON or IO[bytes]
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        }
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Watcher] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.Watcher, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.Watcher].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.Watcher](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, watcher_name: str, **kwargs: Any
    ) -> None:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_watchers_delete_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> LROPoller[None]:
        """Delete a Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable["_models.Watcher"]:
        # pylint: disable=line-too-long
        """List Watcher resources by resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of Watcher
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Watcher]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_watchers_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Watcher], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable["_models.Watcher"]:
        # pylint: disable=line-too-long
        """List Watcher resources by subscription ID.

        :return: An iterator like instance of Watcher
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Watcher]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_watchers_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Watcher], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    def _start_initial(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        _request = build_watchers_start_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def begin_start(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """The action to start monitoring all targets configured for a database watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._start_initial(
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.Watcher, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.Watcher].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.Watcher](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _stop_initial(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> Optional[JSON]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        _request = build_watchers_stop_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def begin_stop(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> LROPoller[_models.Watcher]:
        # pylint: disable=line-too-long
        """The action to stop monitoring all targets configured for a database watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: An instance of LROPoller that returns Watcher. The Watcher is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.Watcher]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "type": "str",  # The type of managed identity assigned to this
                          resource. Required. Known values are: "None", "SystemAssigned",
                          "UserAssigned", and "SystemAssigned, UserAssigned".
                        "principalId": "str",  # Optional. The active directory identifier of
                          this principal.
                        "tenantId": "str",  # Optional. The Active Directory tenant id of the
                          principal.
                        "userAssignedIdentities": {}
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "datastore": {
                            "kustoClusterUri": "str",  # The Kusto cluster URI. Required.
                            "kustoDataIngestionUri": "str",  # The Kusto data ingestion
                              URI. Required.
                            "kustoDatabaseName": "str",  # The name of a Kusto database.
                              Required.
                            "kustoManagementUrl": "str",  # The Kusto management URL.
                              Required.
                            "kustoOfferingType": "str",  # The type of a Kusto offering.
                              Required. Known values are: "adx", "free", and "fabric".
                            "adxClusterResourceId": "str",  # Optional. The Azure
                              ResourceId of an Azure Data Explorer cluster.
                            "kustoClusterDisplayName": "str"  # Optional. The Kusto
                              cluster display name.
                        },
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource watcher. Known values are: "Succeeded", "Failed", and
                          "Canceled".
                        "status": "str"  # Optional. The monitoring collection status of the
                          watcher. Known values are: "Starting", "Running", "Stopping", "Stopped", and
                          "Deleting".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._stop_initial(
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.Watcher, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.Watcher].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.Watcher](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )


class TargetsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.databasewatcher.DatabaseWatcherClient`'s
        :attr:`targets` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, resource_group_name: str, watcher_name: str, target_name: str, **kwargs: Any) -> _models.Target:
        # pylint: disable=line-too-long
        """Get a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :return: Target. The Target is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Target
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Target] = kwargs.pop("cls", None)

        _request = build_targets_get_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            target_name=target_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Target, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        target_name: str,
        resource: _models.Target,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Target:
        # pylint: disable=line-too-long
        """Create a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :param resource: Resource create parameters. Required.
        :type resource: ~azure.mgmt.databasewatcher.models.Target
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Target. The Target is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Target
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        target_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Target:
        # pylint: disable=line-too-long
        """Create a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Target. The Target is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Target
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        target_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Target:
        # pylint: disable=line-too-long
        """Create a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Target. The Target is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Target
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        resource_group_name: str,
        watcher_name: str,
        target_name: str,
        resource: Union[_models.Target, JSON, IO[bytes]],
        **kwargs: Any
    ) -> _models.Target:
        # pylint: disable=line-too-long
        """Create a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :param resource: Resource create parameters. Is one of the following types: Target, JSON,
         IO[bytes] Required.
        :type resource: ~azure.mgmt.databasewatcher.models.Target or JSON or IO[bytes]
        :return: Target. The Target is compatible with MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.Target
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Target] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_targets_create_or_update_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            target_name=target_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Target, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Target, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, watcher_name: str, target_name: str, **kwargs: Any
    ) -> None:
        """Delete a Target.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param target_name: The target resource name. Required.
        :type target_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_targets_delete_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            target_name=target_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_by_watcher(self, resource_group_name: str, watcher_name: str, **kwargs: Any) -> Iterable["_models.Target"]:
        # pylint: disable=line-too-long
        """List Target resources by Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: An iterator like instance of Target
        :rtype: ~azure.core.paging.ItemPaged[~azure.mgmt.databasewatcher.models.Target]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "targetType":

                # JSON input template for discriminator value "SqlDb":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlDbResourceId": "str",  # The Azure ResourceId of an Azure SQL DB single
                      database target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlDb",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlEp":
                target_properties = {
                    "anchorDatabaseResourceId": "str",  # The Azure ResourceId of the anchor
                      database used to connect to an elastic pool. Required.
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlEpResourceId": "str",  # The Azure ResourceId of an Azure SQL DB elastic
                      pool target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlEp",
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlMi":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlMiResourceId": "str",  # The Azure ResourceId of an Azure SQL Managed
                      Instance target. Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlMi",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL Managed Instance target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "readIntent": bool,  # Optional. Set to true to monitor a high availability
                      replica of specified target, if any.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # JSON input template for discriminator value "SqlVm":
                target_properties = {
                    "connectionServerName": "str",  # The server name to use in the connection
                      string when connecting to a target. Port number and instance name must be
                      specified separately. Required.
                    "sqlVmResourceId": "str",  # The Azure ResourceId of an Azure SQL VM target.
                      Required.
                    "targetAuthenticationType": "str",  # The type of authentication to use when
                      connecting to a target. Required. Known values are: "Aad" and "Sql".
                    "targetType": "SqlVm",
                    "connectionTcpPort": 0,  # Optional. The TCP port number to optionally use in
                      the connection string when connecting to an Azure SQL VM target.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      resource. Known values are: "Succeeded", "Failed", and "Canceled".
                    "sqlNamedInstanceName": "str",  # Optional. The SQL instance name to
                      optionally use in the connection string when connecting to an Azure SQL VM
                      target.
                    "targetVault": {
                        "akvResourceId": "str",  # Optional. The Azure ResourceId of the Key
                          Vault instance storing database authentication secrets.
                        "akvTargetPassword": "str",  # Optional. The path to the Key Vault
                          secret storing the password for authentication to a target.
                        "akvTargetUser": "str"  # Optional. The path to the Key Vault secret
                          storing the login name (aka user name, aka account name) for authentication
                          to a target.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": target_properties,
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Target]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_targets_list_by_watcher_request(
                    resource_group_name=resource_group_name,
                    watcher_name=watcher_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Target], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class SharedPrivateLinkResourcesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.databasewatcher.DatabaseWatcherClient`'s
        :attr:`shared_private_link_resources` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(
        self, resource_group_name: str, watcher_name: str, shared_private_link_resource_name: str, **kwargs: Any
    ) -> _models.SharedPrivateLinkResource:
        # pylint: disable=line-too-long
        """Get a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :return: SharedPrivateLinkResource. The SharedPrivateLinkResource is compatible with
         MutableMapping
        :rtype: ~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SharedPrivateLinkResource] = kwargs.pop("cls", None)

        _request = build_shared_private_link_resources_get_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            shared_private_link_resource_name=shared_private_link_resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SharedPrivateLinkResource, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    def _create_initial(
        self,
        resource_group_name: str,
        watcher_name: str,
        shared_private_link_resource_name: str,
        resource: Union[_models.SharedPrivateLinkResource, JSON, IO[bytes]],
        **kwargs: Any
    ) -> JSON:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_shared_private_link_resources_create_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            shared_private_link_resource_name=shared_private_link_resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 200:
            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        watcher_name: str,
        shared_private_link_resource_name: str,
        resource: _models.SharedPrivateLinkResource,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SharedPrivateLinkResource]:
        # pylint: disable=line-too-long
        """Create a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :param resource: Resource create parameters. Required.
        :type resource: ~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SharedPrivateLinkResource. The
         SharedPrivateLinkResource is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        watcher_name: str,
        shared_private_link_resource_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SharedPrivateLinkResource]:
        # pylint: disable=line-too-long
        """Create a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SharedPrivateLinkResource. The
         SharedPrivateLinkResource is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        watcher_name: str,
        shared_private_link_resource_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SharedPrivateLinkResource]:
        # pylint: disable=line-too-long
        """Create a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns SharedPrivateLinkResource. The
         SharedPrivateLinkResource is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create(
        self,
        resource_group_name: str,
        watcher_name: str,
        shared_private_link_resource_name: str,
        resource: Union[_models.SharedPrivateLinkResource, JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[_models.SharedPrivateLinkResource]:
        # pylint: disable=line-too-long
        """Create a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :param resource: Resource create parameters. Is one of the following types:
         SharedPrivateLinkResource, JSON, IO[bytes] Required.
        :type resource: ~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource or JSON or
         IO[bytes]
        :return: An instance of LROPoller that returns SharedPrivateLinkResource. The
         SharedPrivateLinkResource is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SharedPrivateLinkResource] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_initial(
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                shared_private_link_resource_name=shared_private_link_resource_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _deserialize(_models.SharedPrivateLinkResource, response.json())
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SharedPrivateLinkResource].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SharedPrivateLinkResource](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, watcher_name: str, shared_private_link_resource_name: str, **kwargs: Any
    ) -> None:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_shared_private_link_resources_delete_request(
            resource_group_name=resource_group_name,
            watcher_name=watcher_name,
            shared_private_link_resource_name=shared_private_link_resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, watcher_name: str, shared_private_link_resource_name: str, **kwargs: Any
    ) -> LROPoller[None]:
        """Delete a SharedPrivateLinkResource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :param shared_private_link_resource_name: The Shared Private Link resource name. Required.
        :type shared_private_link_resource_name: str
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                watcher_name=watcher_name,
                shared_private_link_resource_name=shared_private_link_resource_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_by_watcher(
        self, resource_group_name: str, watcher_name: str, **kwargs: Any
    ) -> Iterable["_models.SharedPrivateLinkResource"]:
        # pylint: disable=line-too-long
        """List SharedPrivateLinkResource resources by Watcher.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param watcher_name: The database watcher name. Required.
        :type watcher_name: str
        :return: An iterator like instance of SharedPrivateLinkResource
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "groupId": "str",  # The group id from the provider of resource the
                          shared private link resource is for. Required.
                        "privateLinkResourceId": "str",  # The resource id of the resource
                          the shared private link resource is for. Required.
                        "requestMessage": "str",  # The request message for requesting
                          approval of the shared private link resource. Required.
                        "dnsZone": "str",  # Optional. The DNS zone to be included in the DNS
                          name of the shared private link. Value is service-specific.
                        "provisioningState": "str",  # Optional. The provisioning state of
                          the resource. Known values are: "Succeeded", "Failed", and "Canceled".
                        "status": "str"  # Optional. Status of the shared private link
                          resource. Can be Pending, Approved, Rejected or Disconnected. Known values
                          are: "Pending", "Approved", "Rejected", and "Disconnected".
                    },
                    "systemData": {
                        "createdAt": "2020-02-20",  # Optional. The type of identity that
                          created the resource.
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20",  # Optional. The timestamp of
                          resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.SharedPrivateLinkResource]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_shared_private_link_resources_list_by_watcher_request(
                    resource_group_name=resource_group_name,
                    watcher_name=watcher_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.SharedPrivateLinkResource], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = _deserialize(_models.ErrorResponse, response.json())
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
