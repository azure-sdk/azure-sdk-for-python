# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .._utils import serialization as _serialization

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.type: Optional[str] = None
        self.system_data: Optional["_models.SystemData"] = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    """


class AlertRuleResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar alert_rule_resource_id: The resource ID of the alert rule resource.
    :vartype alert_rule_resource_id: str
    :ivar created_with_properties: The properties with which the alert rule resource was created.
     Known values are: "CreatedWithActionGroup" and "None".
    :vartype created_with_properties: str or
     ~azure.mgmt.databasewatcher.models.AlertRuleCreationProperties
    :ivar creation_time: The creation time of the alert rule resource.
    :vartype creation_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state of the alert rule resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    :ivar alert_rule_template_id: The template ID associated with alert rule resource.
    :vartype alert_rule_template_id: str
    :ivar alert_rule_template_version: The alert rule template version.
    :vartype alert_rule_template_version: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "alert_rule_resource_id": {"key": "properties.alertRuleResourceId", "type": "str"},
        "created_with_properties": {"key": "properties.createdWithProperties", "type": "str"},
        "creation_time": {"key": "properties.creationTime", "type": "iso-8601"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "alert_rule_template_id": {"key": "properties.alertRuleTemplateId", "type": "str"},
        "alert_rule_template_version": {"key": "properties.alertRuleTemplateVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        alert_rule_resource_id: Optional[str] = None,
        created_with_properties: Optional[Union[str, "_models.AlertRuleCreationProperties"]] = None,
        creation_time: Optional[datetime.datetime] = None,
        alert_rule_template_id: Optional[str] = None,
        alert_rule_template_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword alert_rule_resource_id: The resource ID of the alert rule resource.
        :paramtype alert_rule_resource_id: str
        :keyword created_with_properties: The properties with which the alert rule resource was
         created. Known values are: "CreatedWithActionGroup" and "None".
        :paramtype created_with_properties: str or
         ~azure.mgmt.databasewatcher.models.AlertRuleCreationProperties
        :keyword creation_time: The creation time of the alert rule resource.
        :paramtype creation_time: ~datetime.datetime
        :keyword alert_rule_template_id: The template ID associated with alert rule resource.
        :paramtype alert_rule_template_id: str
        :keyword alert_rule_template_version: The alert rule template version.
        :paramtype alert_rule_template_version: str
        """
        super().__init__(**kwargs)
        self.alert_rule_resource_id = alert_rule_resource_id
        self.created_with_properties = created_with_properties
        self.creation_time = creation_time
        self.provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = None
        self.alert_rule_template_id = alert_rule_template_id
        self.alert_rule_template_version = alert_rule_template_version


class AlertRuleResourceListResult(_serialization.Model):
    """The response of a AlertRuleResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The AlertRuleResource items on this page. Required.
    :vartype value: list[~azure.mgmt.databasewatcher.models.AlertRuleResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AlertRuleResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.AlertRuleResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The AlertRuleResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasewatcher.models.AlertRuleResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Datastore(_serialization.Model):
    """The properties of a data store.

    All required parameters must be populated in order to send to server.

    :ivar adx_cluster_resource_id: The Azure resource ID of an Azure Data Explorer cluster.
    :vartype adx_cluster_resource_id: str
    :ivar kusto_cluster_display_name: The Kusto cluster display name.
    :vartype kusto_cluster_display_name: str
    :ivar kusto_cluster_uri: The Kusto cluster URI. Required.
    :vartype kusto_cluster_uri: str
    :ivar kusto_data_ingestion_uri: The Kusto data ingestion URI. Required.
    :vartype kusto_data_ingestion_uri: str
    :ivar kusto_database_name: The name of a Kusto database. Required.
    :vartype kusto_database_name: str
    :ivar kusto_management_url: The Kusto management URL. Required.
    :vartype kusto_management_url: str
    :ivar kusto_offering_type: The type of a Kusto offering. Required. Known values are: "adx",
     "free", and "fabric".
    :vartype kusto_offering_type: str or ~azure.mgmt.databasewatcher.models.KustoOfferingType
    """

    _validation = {
        "kusto_cluster_uri": {"required": True},
        "kusto_data_ingestion_uri": {"required": True},
        "kusto_database_name": {"required": True},
        "kusto_management_url": {"required": True},
        "kusto_offering_type": {"required": True},
    }

    _attribute_map = {
        "adx_cluster_resource_id": {"key": "adxClusterResourceId", "type": "str"},
        "kusto_cluster_display_name": {"key": "kustoClusterDisplayName", "type": "str"},
        "kusto_cluster_uri": {"key": "kustoClusterUri", "type": "str"},
        "kusto_data_ingestion_uri": {"key": "kustoDataIngestionUri", "type": "str"},
        "kusto_database_name": {"key": "kustoDatabaseName", "type": "str"},
        "kusto_management_url": {"key": "kustoManagementUrl", "type": "str"},
        "kusto_offering_type": {"key": "kustoOfferingType", "type": "str"},
    }

    def __init__(
        self,
        *,
        kusto_cluster_uri: str,
        kusto_data_ingestion_uri: str,
        kusto_database_name: str,
        kusto_management_url: str,
        kusto_offering_type: Union[str, "_models.KustoOfferingType"],
        adx_cluster_resource_id: Optional[str] = None,
        kusto_cluster_display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword adx_cluster_resource_id: The Azure resource ID of an Azure Data Explorer cluster.
        :paramtype adx_cluster_resource_id: str
        :keyword kusto_cluster_display_name: The Kusto cluster display name.
        :paramtype kusto_cluster_display_name: str
        :keyword kusto_cluster_uri: The Kusto cluster URI. Required.
        :paramtype kusto_cluster_uri: str
        :keyword kusto_data_ingestion_uri: The Kusto data ingestion URI. Required.
        :paramtype kusto_data_ingestion_uri: str
        :keyword kusto_database_name: The name of a Kusto database. Required.
        :paramtype kusto_database_name: str
        :keyword kusto_management_url: The Kusto management URL. Required.
        :paramtype kusto_management_url: str
        :keyword kusto_offering_type: The type of a Kusto offering. Required. Known values are: "adx",
         "free", and "fabric".
        :paramtype kusto_offering_type: str or ~azure.mgmt.databasewatcher.models.KustoOfferingType
        """
        super().__init__(**kwargs)
        self.adx_cluster_resource_id = adx_cluster_resource_id
        self.kusto_cluster_display_name = kusto_cluster_display_name
        self.kusto_cluster_uri = kusto_cluster_uri
        self.kusto_data_ingestion_uri = kusto_data_ingestion_uri
        self.kusto_database_name = kusto_database_name
        self.kusto_management_url = kusto_management_url
        self.kusto_offering_type = kusto_offering_type


class DatastoreUpdate(_serialization.Model):
    """The properties of a data store.

    :ivar adx_cluster_resource_id: The Azure resource ID of an Azure Data Explorer cluster.
    :vartype adx_cluster_resource_id: str
    :ivar kusto_cluster_display_name: The Kusto cluster display name.
    :vartype kusto_cluster_display_name: str
    :ivar kusto_cluster_uri: The Kusto cluster URI.
    :vartype kusto_cluster_uri: str
    :ivar kusto_data_ingestion_uri: The Kusto data ingestion URI.
    :vartype kusto_data_ingestion_uri: str
    :ivar kusto_database_name: The name of a Kusto database.
    :vartype kusto_database_name: str
    :ivar kusto_management_url: The Kusto management URL.
    :vartype kusto_management_url: str
    :ivar kusto_offering_type: The type of a Kusto offering. Known values are: "adx", "free", and
     "fabric".
    :vartype kusto_offering_type: str or ~azure.mgmt.databasewatcher.models.KustoOfferingType
    """

    _attribute_map = {
        "adx_cluster_resource_id": {"key": "adxClusterResourceId", "type": "str"},
        "kusto_cluster_display_name": {"key": "kustoClusterDisplayName", "type": "str"},
        "kusto_cluster_uri": {"key": "kustoClusterUri", "type": "str"},
        "kusto_data_ingestion_uri": {"key": "kustoDataIngestionUri", "type": "str"},
        "kusto_database_name": {"key": "kustoDatabaseName", "type": "str"},
        "kusto_management_url": {"key": "kustoManagementUrl", "type": "str"},
        "kusto_offering_type": {"key": "kustoOfferingType", "type": "str"},
    }

    def __init__(
        self,
        *,
        adx_cluster_resource_id: Optional[str] = None,
        kusto_cluster_display_name: Optional[str] = None,
        kusto_cluster_uri: Optional[str] = None,
        kusto_data_ingestion_uri: Optional[str] = None,
        kusto_database_name: Optional[str] = None,
        kusto_management_url: Optional[str] = None,
        kusto_offering_type: Optional[Union[str, "_models.KustoOfferingType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword adx_cluster_resource_id: The Azure resource ID of an Azure Data Explorer cluster.
        :paramtype adx_cluster_resource_id: str
        :keyword kusto_cluster_display_name: The Kusto cluster display name.
        :paramtype kusto_cluster_display_name: str
        :keyword kusto_cluster_uri: The Kusto cluster URI.
        :paramtype kusto_cluster_uri: str
        :keyword kusto_data_ingestion_uri: The Kusto data ingestion URI.
        :paramtype kusto_data_ingestion_uri: str
        :keyword kusto_database_name: The name of a Kusto database.
        :paramtype kusto_database_name: str
        :keyword kusto_management_url: The Kusto management URL.
        :paramtype kusto_management_url: str
        :keyword kusto_offering_type: The type of a Kusto offering. Known values are: "adx", "free",
         and "fabric".
        :paramtype kusto_offering_type: str or ~azure.mgmt.databasewatcher.models.KustoOfferingType
        """
        super().__init__(**kwargs)
        self.adx_cluster_resource_id = adx_cluster_resource_id
        self.kusto_cluster_display_name = kusto_cluster_display_name
        self.kusto_cluster_uri = kusto_cluster_uri
        self.kusto_data_ingestion_uri = kusto_data_ingestion_uri
        self.kusto_database_name = kusto_database_name
        self.kusto_management_url = kusto_management_url
        self.kusto_offering_type = kusto_offering_type


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.info: Optional[JSON] = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.databasewatcher.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.databasewatcher.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code: Optional[str] = None
        self.message: Optional[str] = None
        self.target: Optional[str] = None
        self.details: Optional[List["_models.ErrorDetail"]] = None
        self.additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.databasewatcher.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.databasewatcher.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class HealthValidation(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar start_time: The start time of health validation, in UTC.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of health validation, in UTC.
    :vartype end_time: ~datetime.datetime
    :ivar status: The current health validation status. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", "Canceled", and "TimedOut".
    :vartype status: str or ~azure.mgmt.databasewatcher.models.ValidationStatus
    :ivar issues: The list of issues found by health validation.
    :vartype issues: list[~azure.mgmt.databasewatcher.models.ValidationIssue]
    :ivar provisioning_state: The provisioning state of the health validation resource. Known
     values are: "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "start_time": {"readonly": True},
        "end_time": {"readonly": True},
        "status": {"readonly": True},
        "issues": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "start_time": {"key": "properties.startTime", "type": "iso-8601"},
        "end_time": {"key": "properties.endTime", "type": "iso-8601"},
        "status": {"key": "properties.status", "type": "str"},
        "issues": {"key": "properties.issues", "type": "[ValidationIssue]"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.start_time: Optional[datetime.datetime] = None
        self.end_time: Optional[datetime.datetime] = None
        self.status: Optional[Union[str, "_models.ValidationStatus"]] = None
        self.issues: Optional[List["_models.ValidationIssue"]] = None
        self.provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = None


class HealthValidationListResult(_serialization.Model):
    """The response of a HealthValidation list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The HealthValidation items on this page. Required.
    :vartype value: list[~azure.mgmt.databasewatcher.models.HealthValidation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[HealthValidation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.HealthValidation"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The HealthValidation items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasewatcher.models.HealthValidation]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned, UserAssigned".
    :vartype type: str or ~azure.mgmt.databasewatcher.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.databasewatcher.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned, UserAssigned".
        :paramtype type: str or ~azure.mgmt.databasewatcher.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.databasewatcher.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.tenant_id: Optional[str] = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.databasewatcher.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.databasewatcher.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.databasewatcher.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.databasewatcher.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.is_data_action: Optional[bool] = None
        self.display = display
        self.origin: Optional[Union[str, "_models.Origin"]] = None
        self.action_type: Optional[Union[str, "_models.ActionType"]] = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider: Optional[str] = None
        self.resource: Optional[str] = None
        self.operation: Optional[str] = None
        self.description: Optional[str] = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.databasewatcher.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value: Optional[List["_models.Operation"]] = None
        self.next_link: Optional[str] = None


class SharedPrivateLinkResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar private_link_resource_id: The resource ID of the resource the shared private link
     resource is for.
    :vartype private_link_resource_id: str
    :ivar group_id: The group id from the provider of resource the shared private link resource is
     for.
    :vartype group_id: str
    :ivar request_message: The request message for requesting approval of the shared private link
     resource.
    :vartype request_message: str
    :ivar dns_zone: The DNS zone segment to be included in the DNS name of the shared private link.
     Value is required for Azure Data Explorer clusters and SQL managed instances, and must be
     omitted for SQL logical servers and key vaults. The value is the second segment of the host
     FQDN name of the resource that the shared private link resource is for. For example: if the
     host name is 'adx-cluster-21187695.eastus.kusto.windows.net', then the value is 'eastus'; if
     the host name is 'sql-mi-23961134.767d5869f605.database.windows.net', then the value is
     '767d5869f605'.
    :vartype dns_zone: str
    :ivar status: Status of the shared private link resource. Can be Pending, Approved, Rejected or
     Disconnected. Known values are: "Pending", "Approved", "Rejected", and "Disconnected".
    :vartype status: str or ~azure.mgmt.databasewatcher.models.SharedPrivateLinkResourceStatus
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "status": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "private_link_resource_id": {"key": "properties.privateLinkResourceId", "type": "str"},
        "group_id": {"key": "properties.groupId", "type": "str"},
        "request_message": {"key": "properties.requestMessage", "type": "str"},
        "dns_zone": {"key": "properties.dnsZone", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        private_link_resource_id: Optional[str] = None,
        group_id: Optional[str] = None,
        request_message: Optional[str] = None,
        dns_zone: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword private_link_resource_id: The resource ID of the resource the shared private link
         resource is for.
        :paramtype private_link_resource_id: str
        :keyword group_id: The group id from the provider of resource the shared private link resource
         is for.
        :paramtype group_id: str
        :keyword request_message: The request message for requesting approval of the shared private
         link resource.
        :paramtype request_message: str
        :keyword dns_zone: The DNS zone segment to be included in the DNS name of the shared private
         link. Value is required for Azure Data Explorer clusters and SQL managed instances, and must be
         omitted for SQL logical servers and key vaults. The value is the second segment of the host
         FQDN name of the resource that the shared private link resource is for. For example: if the
         host name is 'adx-cluster-21187695.eastus.kusto.windows.net', then the value is 'eastus'; if
         the host name is 'sql-mi-23961134.767d5869f605.database.windows.net', then the value is
         '767d5869f605'.
        :paramtype dns_zone: str
        """
        super().__init__(**kwargs)
        self.private_link_resource_id = private_link_resource_id
        self.group_id = group_id
        self.request_message = request_message
        self.dns_zone = dns_zone
        self.status: Optional[Union[str, "_models.SharedPrivateLinkResourceStatus"]] = None
        self.provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = None


class SharedPrivateLinkResourceListResult(_serialization.Model):
    """The response of a SharedPrivateLinkResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The SharedPrivateLinkResource items on this page. Required.
    :vartype value: list[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[SharedPrivateLinkResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.SharedPrivateLinkResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The SharedPrivateLinkResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasewatcher.models.SharedPrivateLinkResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TargetProperties(_serialization.Model):
    """The generic properties of a target.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SqlDbSingleDatabaseTargetProperties, SqlDbElasticPoolTargetProperties, SqlMiTargetProperties

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar target_type: Discriminator property for TargetProperties. Required.
    :vartype target_type: str
    :ivar target_authentication_type: The type of authentication to use when connecting to a
     target. Required. Known values are: "Aad" and "Sql".
    :vartype target_authentication_type: str or
     ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
    :ivar target_vault: To use SQL authentication when connecting to targets, specify the vault
     where the login name and password secrets are stored.
    :vartype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
    :ivar connection_server_name: The FQDN host name of the server to use in the connection string
     when connecting to a target. For example, for an Azure SQL logical server in the Azure
     commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
     Azure SQL managed instance in the Azure commercial cloud, the value might be
     'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
     specified separately. Required.
    :vartype connection_server_name: str
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    """

    _validation = {
        "target_type": {"required": True},
        "target_authentication_type": {"required": True},
        "connection_server_name": {"required": True, "max_length": 200},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "target_type": {"key": "targetType", "type": "str"},
        "target_authentication_type": {"key": "targetAuthenticationType", "type": "str"},
        "target_vault": {"key": "targetVault", "type": "VaultSecret"},
        "connection_server_name": {"key": "connectionServerName", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    _subtype_map = {
        "target_type": {
            "SqlDb": "SqlDbSingleDatabaseTargetProperties",
            "SqlEp": "SqlDbElasticPoolTargetProperties",
            "SqlMi": "SqlMiTargetProperties",
        }
    }

    def __init__(
        self,
        *,
        target_authentication_type: Union[str, "_models.TargetAuthenticationType"],
        connection_server_name: str,
        target_vault: Optional["_models.VaultSecret"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_authentication_type: The type of authentication to use when connecting to a
         target. Required. Known values are: "Aad" and "Sql".
        :paramtype target_authentication_type: str or
         ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
        :keyword target_vault: To use SQL authentication when connecting to targets, specify the vault
         where the login name and password secrets are stored.
        :paramtype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
        :keyword connection_server_name: The FQDN host name of the server to use in the connection
         string when connecting to a target. For example, for an Azure SQL logical server in the Azure
         commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
         Azure SQL managed instance in the Azure commercial cloud, the value might be
         'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
         specified separately. Required.
        :paramtype connection_server_name: str
        """
        super().__init__(**kwargs)
        self.target_type: Optional[str] = None
        self.target_authentication_type = target_authentication_type
        self.target_vault = target_vault
        self.connection_server_name = connection_server_name
        self.provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = None


class SqlDbElasticPoolTargetProperties(TargetProperties):
    """The properties specific to an elastic pool in Azure SQL Database.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar target_type: Discriminator property for TargetProperties. Required.
    :vartype target_type: str
    :ivar target_authentication_type: The type of authentication to use when connecting to a
     target. Required. Known values are: "Aad" and "Sql".
    :vartype target_authentication_type: str or
     ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
    :ivar target_vault: To use SQL authentication when connecting to targets, specify the vault
     where the login name and password secrets are stored.
    :vartype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
    :ivar connection_server_name: The FQDN host name of the server to use in the connection string
     when connecting to a target. For example, for an Azure SQL logical server in the Azure
     commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
     Azure SQL managed instance in the Azure commercial cloud, the value might be
     'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
     specified separately. Required.
    :vartype connection_server_name: str
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    :ivar sql_ep_resource_id: The Azure resource ID of an Azure SQL DB elastic pool target.
     Required.
    :vartype sql_ep_resource_id: str
    :ivar anchor_database_resource_id: The Azure resource ID of the anchor database used to connect
     to an elastic pool. Required.
    :vartype anchor_database_resource_id: str
    :ivar read_intent: Set to true to monitor a high availability replica of specified target, if
     any.
    :vartype read_intent: bool
    """

    _validation = {
        "target_type": {"required": True},
        "target_authentication_type": {"required": True},
        "connection_server_name": {"required": True, "max_length": 200},
        "provisioning_state": {"readonly": True},
        "sql_ep_resource_id": {"required": True},
        "anchor_database_resource_id": {"required": True},
    }

    _attribute_map = {
        "target_type": {"key": "targetType", "type": "str"},
        "target_authentication_type": {"key": "targetAuthenticationType", "type": "str"},
        "target_vault": {"key": "targetVault", "type": "VaultSecret"},
        "connection_server_name": {"key": "connectionServerName", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "sql_ep_resource_id": {"key": "sqlEpResourceId", "type": "str"},
        "anchor_database_resource_id": {"key": "anchorDatabaseResourceId", "type": "str"},
        "read_intent": {"key": "readIntent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        target_authentication_type: Union[str, "_models.TargetAuthenticationType"],
        connection_server_name: str,
        sql_ep_resource_id: str,
        anchor_database_resource_id: str,
        target_vault: Optional["_models.VaultSecret"] = None,
        read_intent: bool = False,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_authentication_type: The type of authentication to use when connecting to a
         target. Required. Known values are: "Aad" and "Sql".
        :paramtype target_authentication_type: str or
         ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
        :keyword target_vault: To use SQL authentication when connecting to targets, specify the vault
         where the login name and password secrets are stored.
        :paramtype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
        :keyword connection_server_name: The FQDN host name of the server to use in the connection
         string when connecting to a target. For example, for an Azure SQL logical server in the Azure
         commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
         Azure SQL managed instance in the Azure commercial cloud, the value might be
         'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
         specified separately. Required.
        :paramtype connection_server_name: str
        :keyword sql_ep_resource_id: The Azure resource ID of an Azure SQL DB elastic pool target.
         Required.
        :paramtype sql_ep_resource_id: str
        :keyword anchor_database_resource_id: The Azure resource ID of the anchor database used to
         connect to an elastic pool. Required.
        :paramtype anchor_database_resource_id: str
        :keyword read_intent: Set to true to monitor a high availability replica of specified target,
         if any.
        :paramtype read_intent: bool
        """
        super().__init__(
            target_authentication_type=target_authentication_type,
            target_vault=target_vault,
            connection_server_name=connection_server_name,
            **kwargs
        )
        self.target_type: str = "SqlEp"
        self.sql_ep_resource_id = sql_ep_resource_id
        self.anchor_database_resource_id = anchor_database_resource_id
        self.read_intent = read_intent


class SqlDbSingleDatabaseTargetProperties(TargetProperties):
    """The properties specific to a database in Azure SQL Database.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar target_type: Discriminator property for TargetProperties. Required.
    :vartype target_type: str
    :ivar target_authentication_type: The type of authentication to use when connecting to a
     target. Required. Known values are: "Aad" and "Sql".
    :vartype target_authentication_type: str or
     ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
    :ivar target_vault: To use SQL authentication when connecting to targets, specify the vault
     where the login name and password secrets are stored.
    :vartype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
    :ivar connection_server_name: The FQDN host name of the server to use in the connection string
     when connecting to a target. For example, for an Azure SQL logical server in the Azure
     commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
     Azure SQL managed instance in the Azure commercial cloud, the value might be
     'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
     specified separately. Required.
    :vartype connection_server_name: str
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    :ivar sql_db_resource_id: The Azure resource ID of an Azure SQL DB database target. Required.
    :vartype sql_db_resource_id: str
    :ivar read_intent: Set to true to monitor a high availability replica of specified target, if
     any.
    :vartype read_intent: bool
    """

    _validation = {
        "target_type": {"required": True},
        "target_authentication_type": {"required": True},
        "connection_server_name": {"required": True, "max_length": 200},
        "provisioning_state": {"readonly": True},
        "sql_db_resource_id": {"required": True},
    }

    _attribute_map = {
        "target_type": {"key": "targetType", "type": "str"},
        "target_authentication_type": {"key": "targetAuthenticationType", "type": "str"},
        "target_vault": {"key": "targetVault", "type": "VaultSecret"},
        "connection_server_name": {"key": "connectionServerName", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "sql_db_resource_id": {"key": "sqlDbResourceId", "type": "str"},
        "read_intent": {"key": "readIntent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        target_authentication_type: Union[str, "_models.TargetAuthenticationType"],
        connection_server_name: str,
        sql_db_resource_id: str,
        target_vault: Optional["_models.VaultSecret"] = None,
        read_intent: bool = False,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_authentication_type: The type of authentication to use when connecting to a
         target. Required. Known values are: "Aad" and "Sql".
        :paramtype target_authentication_type: str or
         ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
        :keyword target_vault: To use SQL authentication when connecting to targets, specify the vault
         where the login name and password secrets are stored.
        :paramtype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
        :keyword connection_server_name: The FQDN host name of the server to use in the connection
         string when connecting to a target. For example, for an Azure SQL logical server in the Azure
         commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
         Azure SQL managed instance in the Azure commercial cloud, the value might be
         'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
         specified separately. Required.
        :paramtype connection_server_name: str
        :keyword sql_db_resource_id: The Azure resource ID of an Azure SQL DB database target.
         Required.
        :paramtype sql_db_resource_id: str
        :keyword read_intent: Set to true to monitor a high availability replica of specified target,
         if any.
        :paramtype read_intent: bool
        """
        super().__init__(
            target_authentication_type=target_authentication_type,
            target_vault=target_vault,
            connection_server_name=connection_server_name,
            **kwargs
        )
        self.target_type: str = "SqlDb"
        self.sql_db_resource_id = sql_db_resource_id
        self.read_intent = read_intent


class SqlMiTargetProperties(TargetProperties):
    """The properties specific to Azure SQL Managed Instance targets.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar target_type: Discriminator property for TargetProperties. Required.
    :vartype target_type: str
    :ivar target_authentication_type: The type of authentication to use when connecting to a
     target. Required. Known values are: "Aad" and "Sql".
    :vartype target_authentication_type: str or
     ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
    :ivar target_vault: To use SQL authentication when connecting to targets, specify the vault
     where the login name and password secrets are stored.
    :vartype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
    :ivar connection_server_name: The FQDN host name of the server to use in the connection string
     when connecting to a target. For example, for an Azure SQL logical server in the Azure
     commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
     Azure SQL managed instance in the Azure commercial cloud, the value might be
     'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
     specified separately. Required.
    :vartype connection_server_name: str
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    :ivar sql_mi_resource_id: The Azure resource ID of an Azure SQL Managed Instance target.
     Required.
    :vartype sql_mi_resource_id: str
    :ivar connection_tcp_port: The TCP port number to optionally use in the connection string when
     connecting to an Azure SQL Managed Instance target.
    :vartype connection_tcp_port: int
    :ivar read_intent: Set to true to monitor a high availability replica of specified target, if
     any.
    :vartype read_intent: bool
    """

    _validation = {
        "target_type": {"required": True},
        "target_authentication_type": {"required": True},
        "connection_server_name": {"required": True, "max_length": 200},
        "provisioning_state": {"readonly": True},
        "sql_mi_resource_id": {"required": True},
    }

    _attribute_map = {
        "target_type": {"key": "targetType", "type": "str"},
        "target_authentication_type": {"key": "targetAuthenticationType", "type": "str"},
        "target_vault": {"key": "targetVault", "type": "VaultSecret"},
        "connection_server_name": {"key": "connectionServerName", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "sql_mi_resource_id": {"key": "sqlMiResourceId", "type": "str"},
        "connection_tcp_port": {"key": "connectionTcpPort", "type": "int"},
        "read_intent": {"key": "readIntent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        target_authentication_type: Union[str, "_models.TargetAuthenticationType"],
        connection_server_name: str,
        sql_mi_resource_id: str,
        target_vault: Optional["_models.VaultSecret"] = None,
        connection_tcp_port: int = 1433,
        read_intent: bool = False,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_authentication_type: The type of authentication to use when connecting to a
         target. Required. Known values are: "Aad" and "Sql".
        :paramtype target_authentication_type: str or
         ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
        :keyword target_vault: To use SQL authentication when connecting to targets, specify the vault
         where the login name and password secrets are stored.
        :paramtype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
        :keyword connection_server_name: The FQDN host name of the server to use in the connection
         string when connecting to a target. For example, for an Azure SQL logical server in the Azure
         commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
         Azure SQL managed instance in the Azure commercial cloud, the value might be
         'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
         specified separately. Required.
        :paramtype connection_server_name: str
        :keyword sql_mi_resource_id: The Azure resource ID of an Azure SQL Managed Instance target.
         Required.
        :paramtype sql_mi_resource_id: str
        :keyword connection_tcp_port: The TCP port number to optionally use in the connection string
         when connecting to an Azure SQL Managed Instance target.
        :paramtype connection_tcp_port: int
        :keyword read_intent: Set to true to monitor a high availability replica of specified target,
         if any.
        :paramtype read_intent: bool
        """
        super().__init__(
            target_authentication_type=target_authentication_type,
            target_vault=target_vault,
            connection_server_name=connection_server_name,
            **kwargs
        )
        self.target_type: str = "SqlMi"
        self.sql_mi_resource_id = sql_mi_resource_id
        self.connection_tcp_port = connection_tcp_port
        self.read_intent = read_intent


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.databasewatcher.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.databasewatcher.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.databasewatcher.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.databasewatcher.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class Target(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar target_type: Discriminator property for TargetProperties.
    :vartype target_type: str
    :ivar target_authentication_type: The type of authentication to use when connecting to a
     target. Known values are: "Aad" and "Sql".
    :vartype target_authentication_type: str or
     ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
    :ivar target_vault: To use SQL authentication when connecting to targets, specify the vault
     where the login name and password secrets are stored.
    :vartype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
    :ivar connection_server_name: The FQDN host name of the server to use in the connection string
     when connecting to a target. For example, for an Azure SQL logical server in the Azure
     commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
     Azure SQL managed instance in the Azure commercial cloud, the value might be
     'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
     specified separately.
    :vartype connection_server_name: str
    :ivar provisioning_state: The provisioning state of the resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.ResourceProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "connection_server_name": {"max_length": 200},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "target_type": {"key": "properties.targetType", "type": "str"},
        "target_authentication_type": {"key": "properties.targetAuthenticationType", "type": "str"},
        "target_vault": {"key": "properties.targetVault", "type": "VaultSecret"},
        "connection_server_name": {"key": "properties.connectionServerName", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        target_authentication_type: Optional[Union[str, "_models.TargetAuthenticationType"]] = None,
        target_vault: Optional["_models.VaultSecret"] = None,
        connection_server_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword target_authentication_type: The type of authentication to use when connecting to a
         target. Known values are: "Aad" and "Sql".
        :paramtype target_authentication_type: str or
         ~azure.mgmt.databasewatcher.models.TargetAuthenticationType
        :keyword target_vault: To use SQL authentication when connecting to targets, specify the vault
         where the login name and password secrets are stored.
        :paramtype target_vault: ~azure.mgmt.databasewatcher.models.VaultSecret
        :keyword connection_server_name: The FQDN host name of the server to use in the connection
         string when connecting to a target. For example, for an Azure SQL logical server in the Azure
         commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an
         Azure SQL managed instance in the Azure commercial cloud, the value might be
         'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be
         specified separately.
        :paramtype connection_server_name: str
        """
        super().__init__(**kwargs)
        self.target_type: Optional[str] = None
        self.target_authentication_type = target_authentication_type
        self.target_vault = target_vault
        self.connection_server_name = connection_server_name
        self.provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = None


class TargetListResult(_serialization.Model):
    """The response of a Target list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Target items on this page. Required.
    :vartype value: list[~azure.mgmt.databasewatcher.models.Target]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Target]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Target"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Target items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasewatcher.models.Target]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.client_id: Optional[str] = None


class ValidationIssue(_serialization.Model):
    """The model of a health validation issue.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: The error code of the issue. Required.
    :vartype error_code: str
    :ivar error_message: The error message of the issue. Required.
    :vartype error_message: str
    :ivar additional_details: The additional details for the issue.
    :vartype additional_details: str
    :ivar recommendation_message: The recommendation for resolving the issue. Required.
    :vartype recommendation_message: str
    :ivar recommendation_url: The URL related to resolving the issue.
    :vartype recommendation_url: str
    :ivar related_resource_id: The resource ID of the Azure resource related to the issue.
    :vartype related_resource_id: str
    :ivar related_resource_type: The type of the Azure resource related to the issue.
    :vartype related_resource_type: str
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "error_message": {"required": True, "readonly": True},
        "additional_details": {"readonly": True},
        "recommendation_message": {"required": True, "readonly": True},
        "recommendation_url": {"readonly": True},
        "related_resource_id": {"readonly": True},
        "related_resource_type": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "additional_details": {"key": "additionalDetails", "type": "str"},
        "recommendation_message": {"key": "recommendationMessage", "type": "str"},
        "recommendation_url": {"key": "recommendationUrl", "type": "str"},
        "related_resource_id": {"key": "relatedResourceId", "type": "str"},
        "related_resource_type": {"key": "relatedResourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code: Optional[str] = None
        self.error_message: Optional[str] = None
        self.additional_details: Optional[str] = None
        self.recommendation_message: Optional[str] = None
        self.recommendation_url: Optional[str] = None
        self.related_resource_id: Optional[str] = None
        self.related_resource_type: Optional[str] = None


class VaultSecret(_serialization.Model):
    """The vault specific details required if using SQL authentication to connect to a target.

    :ivar akv_resource_id: The Azure resource ID of the Key Vault instance storing database
     authentication secrets.
    :vartype akv_resource_id: str
    :ivar akv_target_user: The path to the Key Vault secret storing the login name (aka user name,
     aka account name) for authentication to a target.
    :vartype akv_target_user: str
    :ivar akv_target_password: The path to the Key Vault secret storing the password for
     authentication to a target.
    :vartype akv_target_password: str
    """

    _validation = {
        "akv_target_user": {"pattern": r"^[a-zA-Z0-9-]{1,127}$"},
        "akv_target_password": {"pattern": r"^[a-zA-Z0-9-]{1,127}$"},
    }

    _attribute_map = {
        "akv_resource_id": {"key": "akvResourceId", "type": "str"},
        "akv_target_user": {"key": "akvTargetUser", "type": "str"},
        "akv_target_password": {"key": "akvTargetPassword", "type": "str"},
    }

    def __init__(
        self,
        *,
        akv_resource_id: Optional[str] = None,
        akv_target_user: Optional[str] = None,
        akv_target_password: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword akv_resource_id: The Azure resource ID of the Key Vault instance storing database
         authentication secrets.
        :paramtype akv_resource_id: str
        :keyword akv_target_user: The path to the Key Vault secret storing the login name (aka user
         name, aka account name) for authentication to a target.
        :paramtype akv_target_user: str
        :keyword akv_target_password: The path to the Key Vault secret storing the password for
         authentication to a target.
        :paramtype akv_target_password: str
        """
        super().__init__(**kwargs)
        self.akv_resource_id = akv_resource_id
        self.akv_target_user = akv_target_user
        self.akv_target_password = akv_target_password


class Watcher(TrackedResource):
    """The DatabaseWatcherProviderHub resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databasewatcher.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.databasewatcher.models.ManagedServiceIdentity
    :ivar datastore: The data store for collected monitoring data.
    :vartype datastore: ~azure.mgmt.databasewatcher.models.Datastore
    :ivar status: The monitoring collection status of the watcher. Known values are: "Starting",
     "Running", "Stopping", "Stopped", and "Deleting".
    :vartype status: str or ~azure.mgmt.databasewatcher.models.WatcherStatus
    :ivar provisioning_state: The provisioning state of the resource watcher. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.databasewatcher.models.DatabaseWatcherProvisioningState
    :ivar default_alert_rule_identity_resource_id: The resource ID of a user-assigned managed
     identity that will be assigned to a new alert rule.
    :vartype default_alert_rule_identity_resource_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "status": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "datastore": {"key": "properties.datastore", "type": "Datastore"},
        "status": {"key": "properties.status", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "default_alert_rule_identity_resource_id": {
            "key": "properties.defaultAlertRuleIdentityResourceId",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        datastore: Optional["_models.Datastore"] = None,
        default_alert_rule_identity_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.databasewatcher.models.ManagedServiceIdentity
        :keyword datastore: The data store for collected monitoring data.
        :paramtype datastore: ~azure.mgmt.databasewatcher.models.Datastore
        :keyword default_alert_rule_identity_resource_id: The resource ID of a user-assigned managed
         identity that will be assigned to a new alert rule.
        :paramtype default_alert_rule_identity_resource_id: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.datastore = datastore
        self.status: Optional[Union[str, "_models.WatcherStatus"]] = None
        self.provisioning_state: Optional[Union[str, "_models.DatabaseWatcherProvisioningState"]] = None
        self.default_alert_rule_identity_resource_id = default_alert_rule_identity_resource_id


class WatcherListResult(_serialization.Model):
    """The response of a Watcher list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Watcher items on this page. Required.
    :vartype value: list[~azure.mgmt.databasewatcher.models.Watcher]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Watcher]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Watcher"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Watcher items on this page. Required.
        :paramtype value: list[~azure.mgmt.databasewatcher.models.Watcher]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class WatcherUpdate(_serialization.Model):
    """The type used for update operations of the Watcher.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.databasewatcher.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar datastore: The data store for collected monitoring data.
    :vartype datastore: ~azure.mgmt.databasewatcher.models.DatastoreUpdate
    :ivar default_alert_rule_identity_resource_id: The resource ID of a user-assigned managed
     identity that will be assigned to a new alert rule.
    :vartype default_alert_rule_identity_resource_id: str
    """

    _attribute_map = {
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "tags": {"key": "tags", "type": "{str}"},
        "datastore": {"key": "properties.datastore", "type": "DatastoreUpdate"},
        "default_alert_rule_identity_resource_id": {
            "key": "properties.defaultAlertRuleIdentityResourceId",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        datastore: Optional["_models.DatastoreUpdate"] = None,
        default_alert_rule_identity_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.databasewatcher.models.ManagedServiceIdentity
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword datastore: The data store for collected monitoring data.
        :paramtype datastore: ~azure.mgmt.databasewatcher.models.DatastoreUpdate
        :keyword default_alert_rule_identity_resource_id: The resource ID of a user-assigned managed
         identity that will be assigned to a new alert rule.
        :paramtype default_alert_rule_identity_resource_id: str
        """
        super().__init__(**kwargs)
        self.identity = identity
        self.tags = tags
        self.datastore = datastore
        self.default_alert_rule_identity_resource_id = default_alert_rule_identity_resource_id
