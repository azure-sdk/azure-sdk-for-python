# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class AttestationManagementClientPrivateEndpointConnection(ProxyResource):
    """The Private Endpoint Connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    :ivar private_endpoint: The resource of private end point.
    :vartype private_endpoint: ~azure.mgmt.attestation.models.PrivateEndpointAutoGenerated
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.attestation.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.attestation.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "private_endpoint": {"key": "properties.privateEndpoint", "type": "PrivateEndpointAutoGenerated"},
        "private_link_service_connection_state": {
            "key": "properties.privateLinkServiceConnectionState",
            "type": "PrivateLinkServiceConnectionState",
        },
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        private_endpoint: Optional["_models.PrivateEndpointAutoGenerated"] = None,
        private_link_service_connection_state: Optional["_models.PrivateLinkServiceConnectionState"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword private_endpoint: The resource of private end point.
        :paramtype private_endpoint: ~azure.mgmt.attestation.models.PrivateEndpointAutoGenerated
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.attestation.models.PrivateLinkServiceConnectionState
        """
        super().__init__(**kwargs)
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None


class AttestationManagementClientPrivateEndpointConnectionListResult(_serialization.Model):
    """The response of a AttestationManagementClientPrivateEndpointConnection list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The AttestationManagementClientPrivateEndpointConnection items on this page.
     Required.
    :vartype value:
     list[~azure.mgmt.attestation.models.AttestationManagementClientPrivateEndpointConnection]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AttestationManagementClientPrivateEndpointConnection]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: List["_models.AttestationManagementClientPrivateEndpointConnection"],
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: The AttestationManagementClientPrivateEndpointConnection items on this page.
         Required.
        :paramtype value:
         list[~azure.mgmt.attestation.models.AttestationManagementClientPrivateEndpointConnection]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class AttestationProvider(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Attestation service response message.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar trust_model: Trust model for the attestation provider.
    :vartype trust_model: str
    :ivar status: Status of attestation service. Known values are: "Ready", "NotReady", and
     "Error".
    :vartype status: str or ~azure.mgmt.attestation.models.AttestationServiceStatus
    :ivar attest_uri: Gets the uri of attestation service.
    :vartype attest_uri: str
    :ivar public_network_access: Controls whether traffic from the public network is allowed to
     access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
    :ivar private_endpoint_connections: List of private endpoint connections associated with the
     attestation provider.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.attestation.models.AzureResourceManagerPrivateEndpointConnection]
    :ivar tpm_attestation_authentication: The setting that controls whether authentication is
     enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
    :vartype tpm_attestation_authentication: str or
     ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "private_endpoint_connections": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "trust_model": {"key": "properties.trustModel", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "attest_uri": {"key": "properties.attestUri", "type": "str"},
        "public_network_access": {"key": "properties.publicNetworkAccess", "type": "str"},
        "private_endpoint_connections": {
            "key": "properties.privateEndpointConnections",
            "type": "[AzureResourceManagerPrivateEndpointConnection]",
        },
        "tpm_attestation_authentication": {"key": "properties.tpmAttestationAuthentication", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        trust_model: Optional[str] = None,
        status: Optional[Union[str, "_models.AttestationServiceStatus"]] = None,
        attest_uri: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccessType"]] = None,
        tpm_attestation_authentication: Optional[Union[str, "_models.TpmAttestationAuthenticationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword trust_model: Trust model for the attestation provider.
        :paramtype trust_model: str
        :keyword status: Status of attestation service. Known values are: "Ready", "NotReady", and
         "Error".
        :paramtype status: str or ~azure.mgmt.attestation.models.AttestationServiceStatus
        :keyword attest_uri: Gets the uri of attestation service.
        :paramtype attest_uri: str
        :keyword public_network_access: Controls whether traffic from the public network is allowed to
         access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
        :paramtype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
        :keyword tpm_attestation_authentication: The setting that controls whether authentication is
         enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
        :paramtype tpm_attestation_authentication: str or
         ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.trust_model = trust_model
        self.status = status
        self.attest_uri = attest_uri
        self.public_network_access = public_network_access
        self.private_endpoint_connections = None
        self.tpm_attestation_authentication = tpm_attestation_authentication


class AttestationProviderListResult(_serialization.Model):
    """The response of a AttestationProvider list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The AttestationProvider items on this page. Required.
    :vartype value: list[~azure.mgmt.attestation.models.AttestationProvider]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AttestationProvider]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.AttestationProvider"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The AttestationProvider items on this page. Required.
        :paramtype value: list[~azure.mgmt.attestation.models.AttestationProvider]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AttestationProviderUpdate(_serialization.Model):
    """The type used for update operations of the AttestationProvider.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar trust_model: Trust model for the attestation provider.
    :vartype trust_model: str
    :ivar status: Status of attestation service. Known values are: "Ready", "NotReady", and
     "Error".
    :vartype status: str or ~azure.mgmt.attestation.models.AttestationServiceStatus
    :ivar attest_uri: Gets the uri of attestation service.
    :vartype attest_uri: str
    :ivar public_network_access: Controls whether traffic from the public network is allowed to
     access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
    :ivar tpm_attestation_authentication: The setting that controls whether authentication is
     enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
    :vartype tpm_attestation_authentication: str or
     ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "trust_model": {"key": "properties.trustModel", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "attest_uri": {"key": "properties.attestUri", "type": "str"},
        "public_network_access": {"key": "properties.publicNetworkAccess", "type": "str"},
        "tpm_attestation_authentication": {"key": "properties.tpmAttestationAuthentication", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        trust_model: Optional[str] = None,
        status: Optional[Union[str, "_models.AttestationServiceStatus"]] = None,
        attest_uri: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccessType"]] = None,
        tpm_attestation_authentication: Optional[Union[str, "_models.TpmAttestationAuthenticationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword trust_model: Trust model for the attestation provider.
        :paramtype trust_model: str
        :keyword status: Status of attestation service. Known values are: "Ready", "NotReady", and
         "Error".
        :paramtype status: str or ~azure.mgmt.attestation.models.AttestationServiceStatus
        :keyword attest_uri: Gets the uri of attestation service.
        :paramtype attest_uri: str
        :keyword public_network_access: Controls whether traffic from the public network is allowed to
         access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
        :paramtype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
        :keyword tpm_attestation_authentication: The setting that controls whether authentication is
         enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
        :paramtype tpm_attestation_authentication: str or
         ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.trust_model = trust_model
        self.status = status
        self.attest_uri = attest_uri
        self.public_network_access = public_network_access
        self.tpm_attestation_authentication = tpm_attestation_authentication


class AttestationServiceCreationParams(_serialization.Model):
    """Parameters for creating an attestation provider.

    All required parameters must be populated in order to send to Azure.

    :ivar location: The supported Azure location where the attestation provider should be created.
     Required.
    :vartype location: str
    :ivar tags: The tags that will be assigned to the attestation provider.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the attestation provider. Required.
    :vartype properties: ~azure.mgmt.attestation.models.AttestationServiceCreationSpecificParams
    """

    _validation = {
        "location": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "AttestationServiceCreationSpecificParams"},
    }

    def __init__(
        self,
        *,
        location: str,
        properties: "_models.AttestationServiceCreationSpecificParams",
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword location: The supported Azure location where the attestation provider should be
         created. Required.
        :paramtype location: str
        :keyword tags: The tags that will be assigned to the attestation provider.
        :paramtype tags: dict[str, str]
        :keyword properties: Properties of the attestation provider. Required.
        :paramtype properties: ~azure.mgmt.attestation.models.AttestationServiceCreationSpecificParams
        """
        super().__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.properties = properties


class AttestationServiceCreationSpecificParams(_serialization.Model):
    """Client supplied parameters used to create a new attestation provider.

    :ivar public_network_access: Controls whether traffic from the public network is allowed to
     access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
    :ivar policy_signing_certificates: JSON Web Key Set defining a set of X.509 Certificates that
     will represent the parent certificate for the signing certificate used for policy operations.
    :vartype policy_signing_certificates: ~azure.mgmt.attestation.models.JsonWebKeySet
    :ivar tpm_attestation_authentication: The setting that controls whether authentication is
     enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
    :vartype tpm_attestation_authentication: str or
     ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
    """

    _attribute_map = {
        "public_network_access": {"key": "publicNetworkAccess", "type": "str"},
        "policy_signing_certificates": {"key": "policySigningCertificates", "type": "JsonWebKeySet"},
        "tpm_attestation_authentication": {"key": "tpmAttestationAuthentication", "type": "str"},
    }

    def __init__(
        self,
        *,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccessType"]] = None,
        policy_signing_certificates: Optional["_models.JsonWebKeySet"] = None,
        tpm_attestation_authentication: Optional[Union[str, "_models.TpmAttestationAuthenticationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword public_network_access: Controls whether traffic from the public network is allowed to
         access the Attestation Provider APIs. Known values are: "Enabled" and "Disabled".
        :paramtype public_network_access: str or ~azure.mgmt.attestation.models.PublicNetworkAccessType
        :keyword policy_signing_certificates: JSON Web Key Set defining a set of X.509 Certificates
         that will represent the parent certificate for the signing certificate used for policy
         operations.
        :paramtype policy_signing_certificates: ~azure.mgmt.attestation.models.JsonWebKeySet
        :keyword tpm_attestation_authentication: The setting that controls whether authentication is
         enabled or disabled for TPM Attestation REST APIs. Known values are: "Enabled" and "Disabled".
        :paramtype tpm_attestation_authentication: str or
         ~azure.mgmt.attestation.models.TpmAttestationAuthenticationType
        """
        super().__init__(**kwargs)
        self.public_network_access = public_network_access
        self.policy_signing_certificates = policy_signing_certificates
        self.tpm_attestation_authentication = tpm_attestation_authentication


class AzureCoreFoundationsError(_serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.mgmt.attestation.models.AzureCoreFoundationsError]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.mgmt.attestation.models.AzureCoreFoundationsInnerError
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[AzureCoreFoundationsError]"},
        "innererror": {"key": "innererror", "type": "AzureCoreFoundationsInnerError"},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.AzureCoreFoundationsError"]] = None,
        innererror: Optional["_models.AzureCoreFoundationsInnerError"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword code: One of a server-defined set of error codes. Required.
        :paramtype code: str
        :keyword message: A human-readable representation of the error. Required.
        :paramtype message: str
        :keyword target: The target of the error.
        :paramtype target: str
        :keyword details: An array of details about specific errors that led to this reported error.
        :paramtype details: list[~azure.mgmt.attestation.models.AzureCoreFoundationsError]
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.mgmt.attestation.models.AzureCoreFoundationsInnerError
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class AzureCoreFoundationsErrorResponse(_serialization.Model):
    """A response containing error details.

    All required parameters must be populated in order to send to Azure.

    :ivar error: The error object. Required.
    :vartype error: ~azure.mgmt.attestation.models.AzureCoreFoundationsError
    """

    _validation = {
        "error": {"required": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "AzureCoreFoundationsError"},
    }

    def __init__(self, *, error: "_models.AzureCoreFoundationsError", **kwargs: Any) -> None:
        """
        :keyword error: The error object. Required.
        :paramtype error: ~azure.mgmt.attestation.models.AzureCoreFoundationsError
        """
        super().__init__(**kwargs)
        self.error = error


class AzureCoreFoundationsInnerError(_serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    :ivar code: One of a server-defined set of error codes.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~azure.mgmt.attestation.models.AzureCoreFoundationsInnerError
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "innererror": {"key": "innererror", "type": "AzureCoreFoundationsInnerError"},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        innererror: Optional["_models.AzureCoreFoundationsInnerError"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword code: One of a server-defined set of error codes.
        :paramtype code: str
        :keyword innererror: Inner error.
        :paramtype innererror: ~azure.mgmt.attestation.models.AzureCoreFoundationsInnerError
        """
        super().__init__(**kwargs)
        self.code = code
        self.innererror = innererror


class AzureResourceManagerPrivateEndpointConnection(ProxyResource):
    """The private endpoint connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.attestation.models.SystemData
    :ivar properties: The private endpoint connection properties.
    :vartype properties: ~azure.mgmt.attestation.models.PrivateEndpointConnectionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "PrivateEndpointConnectionProperties"},
    }

    def __init__(
        self, *, properties: Optional["_models.PrivateEndpointConnectionProperties"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword properties: The private endpoint connection properties.
        :paramtype properties: ~azure.mgmt.attestation.models.PrivateEndpointConnectionProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class CloudErrorBody(_serialization.Model):
    """An error response from Attestation.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for displaying in a user
     interface.
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for displaying in a
         user interface.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.attestation.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.attestation.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.attestation.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.attestation.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class JsonWebKey(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """JsonWebKey.

    All required parameters must be populated in order to send to Azure.

    :ivar alg: The "alg" (algorithm) parameter identifies the algorithm intended for
     use with the key.  The values used should either be registered in the
     IANA "JSON Web Signature and Encryption Algorithms" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name.
    :vartype alg: str
    :ivar crv: The "crv" (curve) parameter identifies the curve type.
    :vartype crv: str
    :ivar d: RSA private exponent or ECC private key.
    :vartype d: str
    :ivar dp: RSA Private Key Parameter.
    :vartype dp: str
    :ivar dq: RSA Private Key Parameter.
    :vartype dq: str
    :ivar e: RSA public exponent, in Base64.
    :vartype e: str
    :ivar k: Symmetric key.
    :vartype k: str
    :ivar kid: The "kid" (key ID) parameter is used to match a specific key.  This
     is used, for instance, to choose among a set of keys within a JWK Set
     during key rollover.  The structure of the "kid" value is
     unspecified.  When "kid" values are used within a JWK Set, different
     keys within the JWK Set SHOULD use distinct "kid" values.  (One
     example in which different keys might use the same "kid" value is if
     they have different "kty" (key type) values but are considered to be
     equivalent alternatives by the application using them.)  The "kid"
     value is a case-sensitive string.
    :vartype kid: str
    :ivar kty: The "kty" (key type) parameter identifies the cryptographic algorithm
     family used with the key, such as "RSA" or "EC". "kty" values should
     either be registered in the IANA "JSON Web Key Types" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name.  The "kty" value is a case-sensitive string. Required.
    :vartype kty: str
    :ivar n: RSA modulus, in Base64.
    :vartype n: str
    :ivar p: RSA secret prime.
    :vartype p: str
    :ivar q: RSA secret prime, with p < q.
    :vartype q: str
    :ivar qi: RSA Private Key Parameter.
    :vartype qi: str
    :ivar use: Use ("public key use") identifies the intended use of
     the public key. The "use" parameter is employed to indicate whether
     a public key is used for encrypting data or verifying the signature
     on data. Values are commonly "sig" (signature) or "enc" (encryption).
    :vartype use: str
    :ivar x: X coordinate for the Elliptic Curve point.
    :vartype x: str
    :ivar x5_c: The "x5c" (X.509 certificate chain) parameter contains a chain of one
     or more PKIX certificates [RFC5280].  The certificate chain is
     represented as a JSON array of certificate value strings.  Each
     string in the array is a base64-encoded (Section 4 of [RFC4648] --
     not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     The PKIX certificate containing the key value MUST be the first
     certificate.
    :vartype x5_c: list[str]
    :ivar y: Y coordinate for the Elliptic Curve point.
    :vartype y: str
    """

    _validation = {
        "kty": {"required": True},
    }

    _attribute_map = {
        "alg": {"key": "alg", "type": "str"},
        "crv": {"key": "crv", "type": "str"},
        "d": {"key": "d", "type": "str"},
        "dp": {"key": "dp", "type": "str"},
        "dq": {"key": "dq", "type": "str"},
        "e": {"key": "e", "type": "str"},
        "k": {"key": "k", "type": "str"},
        "kid": {"key": "kid", "type": "str"},
        "kty": {"key": "kty", "type": "str"},
        "n": {"key": "n", "type": "str"},
        "p": {"key": "p", "type": "str"},
        "q": {"key": "q", "type": "str"},
        "qi": {"key": "qi", "type": "str"},
        "use": {"key": "use", "type": "str"},
        "x": {"key": "x", "type": "str"},
        "x5_c": {"key": "x5c", "type": "[str]"},
        "y": {"key": "y", "type": "str"},
    }

    def __init__(
        self,
        *,
        kty: str,
        alg: Optional[str] = None,
        crv: Optional[str] = None,
        d: Optional[str] = None,
        dp: Optional[str] = None,
        dq: Optional[str] = None,
        e: Optional[str] = None,
        k: Optional[str] = None,
        kid: Optional[str] = None,
        n: Optional[str] = None,
        p: Optional[str] = None,
        q: Optional[str] = None,
        qi: Optional[str] = None,
        use: Optional[str] = None,
        x: Optional[str] = None,
        x5_c: Optional[List[str]] = None,
        y: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword alg: The "alg" (algorithm) parameter identifies the algorithm intended for
         use with the key.  The values used should either be registered in the
         IANA "JSON Web Signature and Encryption Algorithms" registry
         established by [JWA] or be a value that contains a Collision-
         Resistant Name.
        :paramtype alg: str
        :keyword crv: The "crv" (curve) parameter identifies the curve type.
        :paramtype crv: str
        :keyword d: RSA private exponent or ECC private key.
        :paramtype d: str
        :keyword dp: RSA Private Key Parameter.
        :paramtype dp: str
        :keyword dq: RSA Private Key Parameter.
        :paramtype dq: str
        :keyword e: RSA public exponent, in Base64.
        :paramtype e: str
        :keyword k: Symmetric key.
        :paramtype k: str
        :keyword kid: The "kid" (key ID) parameter is used to match a specific key.  This
         is used, for instance, to choose among a set of keys within a JWK Set
         during key rollover.  The structure of the "kid" value is
         unspecified.  When "kid" values are used within a JWK Set, different
         keys within the JWK Set SHOULD use distinct "kid" values.  (One
         example in which different keys might use the same "kid" value is if
         they have different "kty" (key type) values but are considered to be
         equivalent alternatives by the application using them.)  The "kid"
         value is a case-sensitive string.
        :paramtype kid: str
        :keyword kty: The "kty" (key type) parameter identifies the cryptographic algorithm
         family used with the key, such as "RSA" or "EC". "kty" values should
         either be registered in the IANA "JSON Web Key Types" registry
         established by [JWA] or be a value that contains a Collision-
         Resistant Name.  The "kty" value is a case-sensitive string. Required.
        :paramtype kty: str
        :keyword n: RSA modulus, in Base64.
        :paramtype n: str
        :keyword p: RSA secret prime.
        :paramtype p: str
        :keyword q: RSA secret prime, with p < q.
        :paramtype q: str
        :keyword qi: RSA Private Key Parameter.
        :paramtype qi: str
        :keyword use: Use ("public key use") identifies the intended use of
         the public key. The "use" parameter is employed to indicate whether
         a public key is used for encrypting data or verifying the signature
         on data. Values are commonly "sig" (signature) or "enc" (encryption).
        :paramtype use: str
        :keyword x: X coordinate for the Elliptic Curve point.
        :paramtype x: str
        :keyword x5_c: The "x5c" (X.509 certificate chain) parameter contains a chain of one
         or more PKIX certificates [RFC5280].  The certificate chain is
         represented as a JSON array of certificate value strings.  Each
         string in the array is a base64-encoded (Section 4 of [RFC4648] --
         not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
         The PKIX certificate containing the key value MUST be the first
         certificate.
        :paramtype x5_c: list[str]
        :keyword y: Y coordinate for the Elliptic Curve point.
        :paramtype y: str
        """
        super().__init__(**kwargs)
        self.alg = alg
        self.crv = crv
        self.d = d
        self.dp = dp
        self.dq = dq
        self.e = e
        self.k = k
        self.kid = kid
        self.kty = kty
        self.n = n
        self.p = p
        self.q = q
        self.qi = qi
        self.use = use
        self.x = x
        self.x5_c = x5_c
        self.y = y


class JsonWebKeySet(_serialization.Model):
    """JsonWebKeySet.

    :ivar keys: The value of the "keys" parameter is an array of JWK values.  By
     default, the order of the JWK values within the array does not imply
     an order of preference among them, although applications of JWK Sets
     can choose to assign a meaning to the order for their purposes, if
     desired.
    :vartype keys: list[~azure.mgmt.attestation.models.JsonWebKey]
    """

    _attribute_map = {
        "keys": {"key": "keys", "type": "[JsonWebKey]"},
    }

    def __init__(self, *, keys: Optional[List["_models.JsonWebKey"]] = None, **kwargs: Any) -> None:
        """
        :keyword keys: The value of the "keys" parameter is an array of JWK values.  By
         default, the order of the JWK values within the array does not imply
         an order of preference among them, although applications of JWK Sets
         can choose to assign a meaning to the order for their purposes, if
         desired.
        :paramtype keys: list[~azure.mgmt.attestation.models.JsonWebKey]
        """
        super().__init__(**kwargs)
        self.keys = keys


class LogSpecification(_serialization.Model):
    """Specifications of the Log for Microsoft Azure Attestation.

    :ivar name: Name of the log.
    :vartype name: str
    :ivar display_name: Localized friendly display name of the log.
    :vartype display_name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, display_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Name of the log.
        :paramtype name: str
        :keyword display_name: Localized friendly display name of the log.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.display_name = display_name


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.attestation.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.attestation.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.attestation.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.attestation.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationList(_serialization.Model):
    """List of supported operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The system metadata relating to this resource.
    :vartype value: list[~azure.mgmt.attestation.models.OperationsDefinition]
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[OperationsDefinition]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.attestation.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationProperties(_serialization.Model):
    """Extra Operation properties.

    :ivar service_specification: Service specifications of the operation.
    :vartype service_specification: ~azure.mgmt.attestation.models.ServiceSpecification
    """

    _attribute_map = {
        "service_specification": {"key": "serviceSpecification", "type": "ServiceSpecification"},
    }

    def __init__(
        self, *, service_specification: Optional["_models.ServiceSpecification"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword service_specification: Service specifications of the operation.
        :paramtype service_specification: ~azure.mgmt.attestation.models.ServiceSpecification
        """
        super().__init__(**kwargs)
        self.service_specification = service_specification


class OperationsDefinition(_serialization.Model):
    """Definition object with the name and properties of an operation.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar display: Display object with properties of the operation.
    :vartype display: ~azure.mgmt.attestation.models.OperationsDisplayDefinition
    :ivar properties: Properties of the operation.
    :vartype properties: ~azure.mgmt.attestation.models.OperationProperties
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "display": {"key": "display", "type": "OperationsDisplayDefinition"},
        "properties": {"key": "properties", "type": "OperationProperties"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationsDisplayDefinition"] = None,
        properties: Optional["_models.OperationProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the operation.
        :paramtype name: str
        :keyword display: Display object with properties of the operation.
        :paramtype display: ~azure.mgmt.attestation.models.OperationsDisplayDefinition
        :keyword properties: Properties of the operation.
        :paramtype properties: ~azure.mgmt.attestation.models.OperationProperties
        """
        super().__init__(**kwargs)
        self.name = name
        self.display = display
        self.properties = properties


class OperationsDisplayDefinition(_serialization.Model):
    """Display object with properties of the operation.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource for the operation.
    :vartype resource: str
    :ivar operation: Short description of the operation.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword provider: Resource provider of the operation.
        :paramtype provider: str
        :keyword resource: Resource for the operation.
        :paramtype resource: str
        :keyword operation: Short description of the operation.
        :paramtype operation: str
        :keyword description: Description of the operation.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class PrivateEndpoint(_serialization.Model):
    """The private endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM identifier for private endpoint.
    :vartype id: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None


class PrivateEndpointAutoGenerated(_serialization.Model):
    """The Private Endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM identifier for Private Endpoint.
    :vartype id: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None


class PrivateEndpointConnectionProperties(_serialization.Model):
    """Properties of the private endpoint connection.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar group_ids: The group ids for the private endpoint resource.
    :vartype group_ids: list[str]
    :ivar private_endpoint: The private endpoint resource.
    :vartype private_endpoint: ~azure.mgmt.attestation.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider. Required.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.attestation.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.attestation.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        "group_ids": {"readonly": True},
        "private_link_service_connection_state": {"required": True},
    }

    _attribute_map = {
        "group_ids": {"key": "groupIds", "type": "[str]"},
        "private_endpoint": {"key": "privateEndpoint", "type": "PrivateEndpoint"},
        "private_link_service_connection_state": {
            "key": "privateLinkServiceConnectionState",
            "type": "PrivateLinkServiceConnectionState",
        },
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState",
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
        provisioning_state: Optional[Union[str, "_models.PrivateEndpointConnectionProvisioningState"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword private_endpoint: The private endpoint resource.
        :paramtype private_endpoint: ~azure.mgmt.attestation.models.PrivateEndpoint
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider. Required.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.attestation.models.PrivateLinkServiceConnectionState
        :keyword provisioning_state: The provisioning state of the private endpoint connection
         resource. Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
        :paramtype provisioning_state: str or
         ~azure.mgmt.attestation.models.PrivateEndpointConnectionProvisioningState
        """
        super().__init__(**kwargs)
        self.group_ids = None
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = provisioning_state


class PrivateLinkResource(_serialization.Model):
    """A private link resource.

    :ivar properties: Resource properties.
    :vartype properties: ~azure.mgmt.attestation.models.PrivateLinkResourceProperties
    """

    _attribute_map = {
        "properties": {"key": "properties", "type": "PrivateLinkResourceProperties"},
    }

    def __init__(self, *, properties: Optional["_models.PrivateLinkResourceProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: Resource properties.
        :paramtype properties: ~azure.mgmt.attestation.models.PrivateLinkResourceProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class PrivateLinkResourceListResult(_serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.attestation.models.PrivateLinkResource]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateLinkResource]"},
    }

    def __init__(self, *, value: Optional[List["_models.PrivateLinkResource"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.attestation.models.PrivateLinkResource]
        """
        super().__init__(**kwargs)
        self.value = value


class PrivateLinkResourceProperties(_serialization.Model):
    """Properties of a private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    :ivar required_zone_names: The private link resource Private link DNS zone name.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        "group_id": {"readonly": True},
        "required_members": {"readonly": True},
    }

    _attribute_map = {
        "group_id": {"key": "groupId", "type": "str"},
        "required_members": {"key": "requiredMembers", "type": "[str]"},
        "required_zone_names": {"key": "requiredZoneNames", "type": "[str]"},
    }

    def __init__(self, *, required_zone_names: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword required_zone_names: The private link resource Private link DNS zone name.
        :paramtype required_zone_names: list[str]
        """
        super().__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = required_zone_names


class PrivateLinkServiceConnectionState(_serialization.Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.attestation.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "actions_required": {"key": "actionsRequired", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Indicates whether the connection has been Approved/Rejected/Removed by the
         owner of the service. Known values are: "Pending", "Approved", and "Rejected".
        :paramtype status: str or ~azure.mgmt.attestation.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval/rejection of the connection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer.
        :paramtype actions_required: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.description = description
        self.actions_required = actions_required


class ServiceSpecification(_serialization.Model):
    """Service specification payload.

    :ivar log_specifications: Specifications of the Log for Microsoft Azure Attestation.
    :vartype log_specifications: list[~azure.mgmt.attestation.models.LogSpecification]
    """

    _attribute_map = {
        "log_specifications": {"key": "logSpecifications", "type": "[LogSpecification]"},
    }

    def __init__(self, *, log_specifications: Optional[List["_models.LogSpecification"]] = None, **kwargs: Any) -> None:
        """
        :keyword log_specifications: Specifications of the Log for Microsoft Azure Attestation.
        :paramtype log_specifications: list[~azure.mgmt.attestation.models.LogSpecification]
        """
        super().__init__(**kwargs)
        self.log_specifications = log_specifications


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.attestation.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.attestation.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.attestation.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.attestation.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
