# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    from .. import models as _models


class AgriServiceConfig(_serialization.Model):
    """Config of the AgriService resource instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_uri: Instance URI of the AgriService instance.
    :vartype instance_uri: str
    :ivar version: Version of AgriService instance.
    :vartype version: str
    :ivar app_service_resource_id: App service resource Id.
    :vartype app_service_resource_id: str
    :ivar cosmos_db_resource_id: Cosmos Db resource Id.
    :vartype cosmos_db_resource_id: str
    :ivar storage_account_resource_id: Storage account resource Id.
    :vartype storage_account_resource_id: str
    :ivar key_vault_resource_id: Key vault resource Id.
    :vartype key_vault_resource_id: str
    :ivar redis_cache_resource_id: Redis cache resource Id.
    :vartype redis_cache_resource_id: str
    """

    _validation = {
        "instance_uri": {"readonly": True, "max_length": 256, "min_length": 2},
        "version": {"readonly": True, "max_length": 256, "min_length": 2},
        "app_service_resource_id": {"readonly": True, "min_length": 2},
        "cosmos_db_resource_id": {"readonly": True, "min_length": 2},
        "storage_account_resource_id": {"readonly": True, "min_length": 2},
        "key_vault_resource_id": {"readonly": True, "min_length": 2},
        "redis_cache_resource_id": {"readonly": True, "min_length": 2},
    }

    _attribute_map = {
        "instance_uri": {"key": "instanceUri", "type": "str"},
        "version": {"key": "version", "type": "str"},
        "app_service_resource_id": {"key": "appServiceResourceId", "type": "str"},
        "cosmos_db_resource_id": {"key": "cosmosDbResourceId", "type": "str"},
        "storage_account_resource_id": {"key": "storageAccountResourceId", "type": "str"},
        "key_vault_resource_id": {"key": "keyVaultResourceId", "type": "str"},
        "redis_cache_resource_id": {"key": "redisCacheResourceId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.instance_uri = None
        self.version = None
        self.app_service_resource_id = None
        self.cosmos_db_resource_id = None
        self.storage_account_resource_id = None
        self.key_vault_resource_id = None
        self.redis_cache_resource_id = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.agricultureplatform.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.agricultureplatform.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class AgriServiceResource(TrackedResource):
    """Schema of the AgriService resource from Microsoft.AgriculturePlatform resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.agricultureplatform.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.agricultureplatform.models.AgriServiceResourceProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentity
    :ivar sku: The SKU (Stock Keeping Unit) assigned to this resource.
    :vartype sku: ~azure.mgmt.agricultureplatform.models.Sku
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "AgriServiceResourceProperties"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "sku": {"key": "sku", "type": "Sku"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AgriServiceResourceProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        sku: Optional["_models.Sku"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.agricultureplatform.models.AgriServiceResourceProperties
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentity
        :keyword sku: The SKU (Stock Keeping Unit) assigned to this resource.
        :paramtype sku: ~azure.mgmt.agricultureplatform.models.Sku
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.identity = identity
        self.sku = sku


class AgriServiceResourceListResult(_serialization.Model):
    """The response of a AgriServiceResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The AgriServiceResource items on this page. Required.
    :vartype value: list[~azure.mgmt.agricultureplatform.models.AgriServiceResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AgriServiceResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.AgriServiceResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The AgriServiceResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.agricultureplatform.models.AgriServiceResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AgriServiceResourceProperties(_serialization.Model):
    """Details of the Agriculture AgriDataManager.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.agricultureplatform.models.ProvisioningState
    :ivar config: Config of the AgriService instance.
    :vartype config: ~azure.mgmt.agricultureplatform.models.AgriServiceConfig
    :ivar managed_on_behalf_of_configuration: Managed On Behalf Of Configuration.
    :vartype managed_on_behalf_of_configuration:
     ~azure.mgmt.agricultureplatform.models.ManagedOnBehalfOfConfiguration
    :ivar data_connector_credentials: Data connector credentials of AgriService instance.
    :vartype data_connector_credentials:
     list[~azure.mgmt.agricultureplatform.models.DataConnectorCredentialMap]
    :ivar installed_solutions: AgriService installed solutions.
    :vartype installed_solutions: list[~azure.mgmt.agricultureplatform.models.InstalledSolutionMap]
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "managed_on_behalf_of_configuration": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "config": {"key": "config", "type": "AgriServiceConfig"},
        "managed_on_behalf_of_configuration": {
            "key": "managedOnBehalfOfConfiguration",
            "type": "ManagedOnBehalfOfConfiguration",
        },
        "data_connector_credentials": {"key": "dataConnectorCredentials", "type": "[DataConnectorCredentialMap]"},
        "installed_solutions": {"key": "installedSolutions", "type": "[InstalledSolutionMap]"},
    }

    def __init__(
        self,
        *,
        config: Optional["_models.AgriServiceConfig"] = None,
        data_connector_credentials: Optional[List["_models.DataConnectorCredentialMap"]] = None,
        installed_solutions: Optional[List["_models.InstalledSolutionMap"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword config: Config of the AgriService instance.
        :paramtype config: ~azure.mgmt.agricultureplatform.models.AgriServiceConfig
        :keyword data_connector_credentials: Data connector credentials of AgriService instance.
        :paramtype data_connector_credentials:
         list[~azure.mgmt.agricultureplatform.models.DataConnectorCredentialMap]
        :keyword installed_solutions: AgriService installed solutions.
        :paramtype installed_solutions:
         list[~azure.mgmt.agricultureplatform.models.InstalledSolutionMap]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.config = config
        self.managed_on_behalf_of_configuration = None
        self.data_connector_credentials = data_connector_credentials
        self.installed_solutions = installed_solutions


class AgriServiceResourceUpdate(_serialization.Model):
    """The type used for update operations of the AgriServiceResource.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity:
     ~azure.mgmt.agricultureplatform.models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate
    :ivar sku: The SKU (Stock Keeping Unit) assigned to this resource.
    :vartype sku: ~azure.mgmt.agricultureplatform.models.AzureResourceManagerCommonTypesSkuUpdate
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.agricultureplatform.models.AgriServiceResourceUpdateProperties
    """

    _attribute_map = {
        "identity": {"key": "identity", "type": "AzureResourceManagerCommonTypesManagedServiceIdentityUpdate"},
        "sku": {"key": "sku", "type": "AzureResourceManagerCommonTypesSkuUpdate"},
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "AgriServiceResourceUpdateProperties"},
    }

    def __init__(
        self,
        *,
        identity: Optional["_models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate"] = None,
        sku: Optional["_models.AzureResourceManagerCommonTypesSkuUpdate"] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AgriServiceResourceUpdateProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity:
         ~azure.mgmt.agricultureplatform.models.AzureResourceManagerCommonTypesManagedServiceIdentityUpdate
        :keyword sku: The SKU (Stock Keeping Unit) assigned to this resource.
        :paramtype sku: ~azure.mgmt.agricultureplatform.models.AzureResourceManagerCommonTypesSkuUpdate
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties:
         ~azure.mgmt.agricultureplatform.models.AgriServiceResourceUpdateProperties
        """
        super().__init__(**kwargs)
        self.identity = identity
        self.sku = sku
        self.tags = tags
        self.properties = properties


class AgriServiceResourceUpdateProperties(_serialization.Model):
    """The updatable properties of the AgriServiceResource.

    :ivar config: Config of the AgriService instance.
    :vartype config: ~azure.mgmt.agricultureplatform.models.AgriServiceConfig
    :ivar data_connector_credentials: Data connector credentials of AgriService instance.
    :vartype data_connector_credentials:
     list[~azure.mgmt.agricultureplatform.models.DataConnectorCredentialMap]
    :ivar installed_solutions: AgriService installed solutions.
    :vartype installed_solutions: list[~azure.mgmt.agricultureplatform.models.InstalledSolutionMap]
    """

    _attribute_map = {
        "config": {"key": "config", "type": "AgriServiceConfig"},
        "data_connector_credentials": {"key": "dataConnectorCredentials", "type": "[DataConnectorCredentialMap]"},
        "installed_solutions": {"key": "installedSolutions", "type": "[InstalledSolutionMap]"},
    }

    def __init__(
        self,
        *,
        config: Optional["_models.AgriServiceConfig"] = None,
        data_connector_credentials: Optional[List["_models.DataConnectorCredentialMap"]] = None,
        installed_solutions: Optional[List["_models.InstalledSolutionMap"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword config: Config of the AgriService instance.
        :paramtype config: ~azure.mgmt.agricultureplatform.models.AgriServiceConfig
        :keyword data_connector_credentials: Data connector credentials of AgriService instance.
        :paramtype data_connector_credentials:
         list[~azure.mgmt.agricultureplatform.models.DataConnectorCredentialMap]
        :keyword installed_solutions: AgriService installed solutions.
        :paramtype installed_solutions:
         list[~azure.mgmt.agricultureplatform.models.InstalledSolutionMap]
        """
        super().__init__(**kwargs)
        self.config = config
        self.data_connector_credentials = data_connector_credentials
        self.installed_solutions = installed_solutions


class AvailableAgriSolutionListResult(_serialization.Model):
    """The list of available agri solutions.

    All required parameters must be populated in order to send to server.

    :ivar solutions: Agri solutions list. Required.
    :vartype solutions:
     list[~azure.mgmt.agricultureplatform.models.DataManagerForAgricultureSolution]
    """

    _validation = {
        "solutions": {"required": True},
    }

    _attribute_map = {
        "solutions": {"key": "solutions", "type": "[DataManagerForAgricultureSolution]"},
    }

    def __init__(self, *, solutions: List["_models.DataManagerForAgricultureSolution"], **kwargs: Any) -> None:
        """
        :keyword solutions: Agri solutions list. Required.
        :paramtype solutions:
         list[~azure.mgmt.agricultureplatform.models.DataManagerForAgricultureSolution]
        """
        super().__init__(**kwargs)
        self.solutions = solutions


class AzureResourceManagerCommonTypesManagedServiceIdentityUpdate(
    _serialization.Model
):  # pylint: disable=name-too-long
    """Managed service identity (system assigned and/or user assigned identities).

    :ivar type: The type of managed identity assigned to this resource. Known values are: "None",
     "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.agricultureplatform.models.Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties]  # pylint: disable=line-too-long
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {
            "key": "userAssignedIdentities",
            "type": "{Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties}",
        },
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedServiceIdentityType"]] = None,
        user_assigned_identities: Optional[
            Dict[
                str,
                "_models.Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties",
            ]
        ] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of managed identity assigned to this resource. Known values are:
         "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The identities assigned to this resource by the user.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.agricultureplatform.models.Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties]  # pylint: disable=line-too-long
        """
        super().__init__(**kwargs)
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class AzureResourceManagerCommonTypesSkuUpdate(_serialization.Model):
    """The resource model definition representing SKU.

    :ivar name: The name of the SKU. Ex - P3. It is typically a letter+number code.
    :vartype name: str
    :ivar tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Known values are: "Free", "Basic",
     "Standard", and "Premium".
    :vartype tier: str or ~azure.mgmt.agricultureplatform.models.SkuTier
    :ivar size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :vartype size: str
    :ivar family: If the service has different generations of hardware, for the same SKU, then that
     can be captured here.
    :vartype family: str
    :ivar capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :vartype capacity: int
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        tier: Optional[Union[str, "_models.SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the SKU. Ex - P3. It is typically a letter+number code.
        :paramtype name: str
        :keyword tier: This field is required to be implemented by the Resource Provider if the service
         has more than one tier, but is not required on a PUT. Known values are: "Free", "Basic",
         "Standard", and "Premium".
        :paramtype tier: str or ~azure.mgmt.agricultureplatform.models.SkuTier
        :keyword size: The SKU size. When the name field is the combination of tier and some other
         value, this would be the standalone code.
        :paramtype size: str
        :keyword family: If the service has different generations of hardware, for the same SKU, then
         that can be captured here.
        :paramtype family: str
        :keyword capacity: If the SKU supports scale out/in then the capacity integer should be
         included. If scale out/in is not possible for the resource this may be omitted.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties(
    UserAssignedIdentity
):  # pylint: disable=name-too-long
    """Components19Kgb1NSchemasAzureResourcemanagerCommontypesManagedserviceidentityupdatePropertiesUserassignedidentitiesAdditionalproperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """


class DataConnectorCredentialMap(_serialization.Model):
    """Mapping of data connector credentials.

    All required parameters must be populated in order to send to server.

    :ivar key: The key representing the credential. Required.
    :vartype key: str
    :ivar value: The data connector credential value. Required.
    :vartype value: ~azure.mgmt.agricultureplatform.models.DataConnectorCredentials
    """

    _validation = {
        "key": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "value": {"key": "value", "type": "DataConnectorCredentials"},
    }

    def __init__(self, *, key: str, value: "_models.DataConnectorCredentials", **kwargs: Any) -> None:
        """
        :keyword key: The key representing the credential. Required.
        :paramtype key: str
        :keyword value: The data connector credential value. Required.
        :paramtype value: ~azure.mgmt.agricultureplatform.models.DataConnectorCredentials
        """
        super().__init__(**kwargs)
        self.key = key
        self.value = value


class DataConnectorCredentials(_serialization.Model):
    """The properties related to an AgriService data connector.

    :ivar kind: Type of credential. Known values are: "OAuthClientCredentials" and
     "ApiKeyAuthCredentials".
    :vartype kind: str or ~azure.mgmt.agricultureplatform.models.AuthCredentialsKind
    :ivar client_id: Client Id associated with the provider, if type of credentials is
     OAuthClientCredentials.
    :vartype client_id: str
    :ivar key_vault_uri: Uri of the key vault.
    :vartype key_vault_uri: str
    :ivar key_name: Name of the key vault key.
    :vartype key_name: str
    :ivar key_version: Version of the key vault key.
    :vartype key_version: str
    """

    _validation = {
        "client_id": {"min_length": 2},
        "key_vault_uri": {"min_length": 2},
        "key_name": {"min_length": 2},
        "key_version": {"min_length": 2},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
        "key_vault_uri": {"key": "keyVaultUri", "type": "str"},
        "key_name": {"key": "keyName", "type": "str"},
        "key_version": {"key": "keyVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.AuthCredentialsKind"]] = None,
        client_id: Optional[str] = None,
        key_vault_uri: Optional[str] = None,
        key_name: Optional[str] = None,
        key_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Type of credential. Known values are: "OAuthClientCredentials" and
         "ApiKeyAuthCredentials".
        :paramtype kind: str or ~azure.mgmt.agricultureplatform.models.AuthCredentialsKind
        :keyword client_id: Client Id associated with the provider, if type of credentials is
         OAuthClientCredentials.
        :paramtype client_id: str
        :keyword key_vault_uri: Uri of the key vault.
        :paramtype key_vault_uri: str
        :keyword key_name: Name of the key vault key.
        :paramtype key_name: str
        :keyword key_version: Version of the key vault key.
        :paramtype key_version: str
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.client_id = client_id
        self.key_vault_uri = key_vault_uri
        self.key_name = key_name
        self.key_version = key_version


class DataManagerForAgricultureSolution(_serialization.Model):
    """Data Manager for Agriculture solution.

    All required parameters must be populated in order to send to server.

    :ivar partner_id: Partner Id. Required.
    :vartype partner_id: str
    :ivar solution_id: Solution Id. Required.
    :vartype solution_id: str
    :ivar partner_tenant_id: Partner tenant Id. Required.
    :vartype partner_tenant_id: str
    :ivar data_access_scopes: Data access scopes. Required.
    :vartype data_access_scopes: list[str]
    :ivar market_place_offer_details: Marketplace offer details. Required.
    :vartype market_place_offer_details:
     ~azure.mgmt.agricultureplatform.models.MarketPlaceOfferDetails
    :ivar saas_application_id: Saas application Id. Required.
    :vartype saas_application_id: str
    :ivar access_azure_data_manager_for_agriculture_application_id: Entra application Id used to
     access azure data manager for agriculture instance. Required.
    :vartype access_azure_data_manager_for_agriculture_application_id: str
    :ivar access_azure_data_manager_for_agriculture_application_name: Entra application name used
     to access azure data manager for agriculture instance. Required.
    :vartype access_azure_data_manager_for_agriculture_application_name: str
    :ivar is_validate_input: Whether solution inference will validate input. Required.
    :vartype is_validate_input: bool
    """

    _validation = {
        "partner_id": {"required": True},
        "solution_id": {"required": True},
        "partner_tenant_id": {"required": True},
        "data_access_scopes": {"required": True},
        "market_place_offer_details": {"required": True},
        "saas_application_id": {"required": True},
        "access_azure_data_manager_for_agriculture_application_id": {"required": True},
        "access_azure_data_manager_for_agriculture_application_name": {"required": True},
        "is_validate_input": {"required": True},
    }

    _attribute_map = {
        "partner_id": {"key": "partnerId", "type": "str"},
        "solution_id": {"key": "solutionId", "type": "str"},
        "partner_tenant_id": {"key": "partnerTenantId", "type": "str"},
        "data_access_scopes": {"key": "dataAccessScopes", "type": "[str]"},
        "market_place_offer_details": {"key": "marketPlaceOfferDetails", "type": "MarketPlaceOfferDetails"},
        "saas_application_id": {"key": "saasApplicationId", "type": "str"},
        "access_azure_data_manager_for_agriculture_application_id": {
            "key": "accessAzureDataManagerForAgricultureApplicationId",
            "type": "str",
        },
        "access_azure_data_manager_for_agriculture_application_name": {
            "key": "accessAzureDataManagerForAgricultureApplicationName",
            "type": "str",
        },
        "is_validate_input": {"key": "isValidateInput", "type": "bool"},
    }

    def __init__(
        self,
        *,
        partner_id: str,
        solution_id: str,
        partner_tenant_id: str,
        data_access_scopes: List[str],
        market_place_offer_details: "_models.MarketPlaceOfferDetails",
        saas_application_id: str,
        access_azure_data_manager_for_agriculture_application_id: str,
        access_azure_data_manager_for_agriculture_application_name: str,
        is_validate_input: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword partner_id: Partner Id. Required.
        :paramtype partner_id: str
        :keyword solution_id: Solution Id. Required.
        :paramtype solution_id: str
        :keyword partner_tenant_id: Partner tenant Id. Required.
        :paramtype partner_tenant_id: str
        :keyword data_access_scopes: Data access scopes. Required.
        :paramtype data_access_scopes: list[str]
        :keyword market_place_offer_details: Marketplace offer details. Required.
        :paramtype market_place_offer_details:
         ~azure.mgmt.agricultureplatform.models.MarketPlaceOfferDetails
        :keyword saas_application_id: Saas application Id. Required.
        :paramtype saas_application_id: str
        :keyword access_azure_data_manager_for_agriculture_application_id: Entra application Id used to
         access azure data manager for agriculture instance. Required.
        :paramtype access_azure_data_manager_for_agriculture_application_id: str
        :keyword access_azure_data_manager_for_agriculture_application_name: Entra application name
         used to access azure data manager for agriculture instance. Required.
        :paramtype access_azure_data_manager_for_agriculture_application_name: str
        :keyword is_validate_input: Whether solution inference will validate input. Required.
        :paramtype is_validate_input: bool
        """
        super().__init__(**kwargs)
        self.partner_id = partner_id
        self.solution_id = solution_id
        self.partner_tenant_id = partner_tenant_id
        self.data_access_scopes = data_access_scopes
        self.market_place_offer_details = market_place_offer_details
        self.saas_application_id = saas_application_id
        self.access_azure_data_manager_for_agriculture_application_id = (
            access_azure_data_manager_for_agriculture_application_id
        )
        self.access_azure_data_manager_for_agriculture_application_name = (
            access_azure_data_manager_for_agriculture_application_name
        )
        self.is_validate_input = is_validate_input


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.agricultureplatform.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.agricultureplatform.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.agricultureplatform.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.agricultureplatform.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class InstalledSolutionMap(_serialization.Model):
    """Mapping of installed solutions.

    All required parameters must be populated in order to send to server.

    :ivar key: The key representing the installed solution. Required.
    :vartype key: str
    :ivar value: The installed solution value. Required.
    :vartype value: ~azure.mgmt.agricultureplatform.models.Solution
    """

    _validation = {
        "key": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "value": {"key": "value", "type": "Solution"},
    }

    def __init__(self, *, key: str, value: "_models.Solution", **kwargs: Any) -> None:
        """
        :keyword key: The key representing the installed solution. Required.
        :paramtype key: str
        :keyword value: The installed solution value. Required.
        :paramtype value: ~azure.mgmt.agricultureplatform.models.Solution
        """
        super().__init__(**kwargs)
        self.key = key
        self.value = value


class ManagedOnBehalfOfConfiguration(_serialization.Model):
    """Configuration of the managed on behalf of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar mobo_broker_resources: Associated MoboBrokerResources. Required.
    :vartype mobo_broker_resources: list[~azure.mgmt.agricultureplatform.models.MoboBrokerResource]
    """

    _validation = {
        "mobo_broker_resources": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "mobo_broker_resources": {"key": "moboBrokerResources", "type": "[MoboBrokerResource]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.mobo_broker_resources = None


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.agricultureplatform.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.agricultureplatform.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.agricultureplatform.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class MarketPlaceOfferDetails(_serialization.Model):
    """Marketplace offer details of Agri solution.

    All required parameters must be populated in order to send to server.

    :ivar saas_offer_id: Saas offer Id. Required.
    :vartype saas_offer_id: str
    :ivar publisher_id: Publisher Id. Required.
    :vartype publisher_id: str
    """

    _validation = {
        "saas_offer_id": {"required": True},
        "publisher_id": {"required": True},
    }

    _attribute_map = {
        "saas_offer_id": {"key": "saasOfferId", "type": "str"},
        "publisher_id": {"key": "publisherId", "type": "str"},
    }

    def __init__(self, *, saas_offer_id: str, publisher_id: str, **kwargs: Any) -> None:
        """
        :keyword saas_offer_id: Saas offer Id. Required.
        :paramtype saas_offer_id: str
        :keyword publisher_id: Publisher Id. Required.
        :paramtype publisher_id: str
        """
        super().__init__(**kwargs)
        self.saas_offer_id = saas_offer_id
        self.publisher_id = publisher_id


class MoboBrokerResource(_serialization.Model):
    """MoboBroker resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The fully qualified resource ID of the MoboBroker resource.
     Example:
     ``/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}``.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.agricultureplatform.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.agricultureplatform.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.agricultureplatform.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.agricultureplatform.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.agricultureplatform.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Sku(_serialization.Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU. E.g. P3. It is typically a letter+number code. Required.
    :vartype name: str
    :ivar tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Known values are: "Free", "Basic",
     "Standard", and "Premium".
    :vartype tier: str or ~azure.mgmt.agricultureplatform.models.SkuTier
    :ivar size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :vartype size: str
    :ivar family: If the service has different generations of hardware, for the same SKU, then that
     can be captured here.
    :vartype family: str
    :ivar capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :vartype capacity: int
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "capacity": {"key": "capacity", "type": "int"},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "_models.SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the SKU. E.g. P3. It is typically a letter+number code. Required.
        :paramtype name: str
        :keyword tier: This field is required to be implemented by the Resource Provider if the service
         has more than one tier, but is not required on a PUT. Known values are: "Free", "Basic",
         "Standard", and "Premium".
        :paramtype tier: str or ~azure.mgmt.agricultureplatform.models.SkuTier
        :keyword size: The SKU size. When the name field is the combination of tier and some other
         value, this would be the standalone code.
        :paramtype size: str
        :keyword family: If the service has different generations of hardware, for the same SKU, then
         that can be captured here.
        :paramtype family: str
        :keyword capacity: If the SKU supports scale out/in then the capacity integer should be
         included. If scale out/in is not possible for the resource this may be omitted.
        :paramtype capacity: int
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class Solution(_serialization.Model):
    """Installed data manager for Agriculture solution detail.

    :ivar application_name: Application name of the solution.
    :vartype application_name: str
    :ivar partner_id: Partner Id.
    :vartype partner_id: str
    :ivar market_place_publisher_id: Marketplace publisher Id.
    :vartype market_place_publisher_id: str
    :ivar saas_subscription_id: Saas subscription Id.
    :vartype saas_subscription_id: str
    :ivar saas_subscription_name: Saas subscription name.
    :vartype saas_subscription_name: str
    :ivar plan_id: Plan Id.
    :vartype plan_id: str
    """

    _validation = {
        "application_name": {"min_length": 2},
        "partner_id": {"min_length": 2},
        "market_place_publisher_id": {"min_length": 2},
        "saas_subscription_id": {"min_length": 2},
        "saas_subscription_name": {"min_length": 2},
        "plan_id": {"min_length": 2},
    }

    _attribute_map = {
        "application_name": {"key": "applicationName", "type": "str"},
        "partner_id": {"key": "partnerId", "type": "str"},
        "market_place_publisher_id": {"key": "marketPlacePublisherId", "type": "str"},
        "saas_subscription_id": {"key": "saasSubscriptionId", "type": "str"},
        "saas_subscription_name": {"key": "saasSubscriptionName", "type": "str"},
        "plan_id": {"key": "planId", "type": "str"},
    }

    def __init__(
        self,
        *,
        application_name: Optional[str] = None,
        partner_id: Optional[str] = None,
        market_place_publisher_id: Optional[str] = None,
        saas_subscription_id: Optional[str] = None,
        saas_subscription_name: Optional[str] = None,
        plan_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword application_name: Application name of the solution.
        :paramtype application_name: str
        :keyword partner_id: Partner Id.
        :paramtype partner_id: str
        :keyword market_place_publisher_id: Marketplace publisher Id.
        :paramtype market_place_publisher_id: str
        :keyword saas_subscription_id: Saas subscription Id.
        :paramtype saas_subscription_id: str
        :keyword saas_subscription_name: Saas subscription name.
        :paramtype saas_subscription_name: str
        :keyword plan_id: Plan Id.
        :paramtype plan_id: str
        """
        super().__init__(**kwargs)
        self.application_name = application_name
        self.partner_id = partner_id
        self.market_place_publisher_id = market_place_publisher_id
        self.saas_subscription_id = saas_subscription_id
        self.saas_subscription_name = saas_subscription_name
        self.plan_id = plan_id


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.agricultureplatform.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.agricultureplatform.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.agricultureplatform.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.agricultureplatform.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
