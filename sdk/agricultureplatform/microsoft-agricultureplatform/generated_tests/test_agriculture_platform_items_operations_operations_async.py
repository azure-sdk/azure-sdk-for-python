# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AgriculturePlatformPreparer
from testpreparer_async import AgriculturePlatformClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAgriculturePlatformItemsOperationsOperationsAsync(AgriculturePlatformClientTestBaseAsync):
    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_create(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.create(
            catalog_id="str",
            collection_id="str",
            body={
                "data": {"str": {}},
                "assets": [{"href": "str", "name": "str", "type": "str"}],
                "description": "str",
                "links": [{"href": "str", "rel": "str", "type": "str"}],
                "name": "str",
                "ownerItemId": "str",
                "properties": {"str": {}},
                "source": "str",
                "status": "str",
            },
            data={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_get(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.get(
            catalog_id="str",
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_create_or_update(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.create_or_update(
            catalog_id="str",
            collection_id="str",
            item_id="str",
            body={
                "data": {"str": {}},
                "id": "str",
                "assets": [{"href": "str", "name": "str", "type": "str"}],
                "catalogId": "str",
                "collectionId": "str",
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "description": "str",
                "eTag": "str",
                "links": [{"href": "str", "rel": "str", "type": "str"}],
                "modifiedBy": "str",
                "modifiedDateTime": "2020-02-20 00:00:00",
                "name": "str",
                "ownerItemId": "str",
                "properties": {"str": {}},
                "source": "str",
                "status": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_delete(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.delete(
            catalog_id="str",
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_get_all_under_collection(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.get_all_under_collection(
            catalog_id="str",
            collection_id="str",
            body={
                "dataFilters": ["str"],
                "ids": ["str"],
                "intersectsWithGeometry": "geo_json_object",
                "maxCreatedDateTime": "2020-02-20 00:00:00",
                "maxLastModifiedDateTime": "2020-02-20 00:00:00",
                "maxPageSize": 0,
                "minCreatedDateTime": "2020-02-20 00:00:00",
                "minLastModifiedDateTime": "2020-02-20 00:00:00",
                "ownerItemIds": ["str"],
                "skipToken": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_items_operations_search_across_collection(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.items_operations.search_across_collection(
            catalog_id="str",
            body={
                "collectionIds": ["str"],
                "dataFilters": ["str"],
                "ids": ["str"],
                "intersectsWithGeometry": "geo_json_object",
                "maxCreatedDateTime": "2020-02-20 00:00:00",
                "maxLastModifiedDateTime": "2020-02-20 00:00:00",
                "maxPageSize": 0,
                "minCreatedDateTime": "2020-02-20 00:00:00",
                "minLastModifiedDateTime": "2020-02-20 00:00:00",
                "ownerItemIds": ["str"],
                "skipToken": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
