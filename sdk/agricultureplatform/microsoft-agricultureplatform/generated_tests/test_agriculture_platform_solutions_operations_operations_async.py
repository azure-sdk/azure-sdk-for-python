# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AgriculturePlatformPreparer
from testpreparer_async import AgriculturePlatformClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAgriculturePlatformSolutionsOperationsOperationsAsync(AgriculturePlatformClientTestBaseAsync):
    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_solutions_operations_cancel_job(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.solutions_operations.cancel_job(
            body={
                "partnerRequestBody": {"str": {}},
                "partnerRequestHeaders": {"str": {}},
                "requestPath": "str",
                "solutionId": "str",
            },
            solution_id="str",
            request_path="str",
            partner_request_body={"str": {}},
            partner_request_headers={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_solutions_operations_create_job(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.solutions_operations.create_job(
            body={
                "inputData": {"str": {}},
                "partnerRequestBody": {"str": {}},
                "partnerRequestHeaders": {"str": {}},
                "requestPath": "str",
                "solutionId": "str",
            },
            solution_id="str",
            request_path="str",
            partner_request_body={"str": {}},
            partner_request_headers={"str": {}},
            input_data={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_solutions_operations_get_data(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.solutions_operations.get_data(
            body={
                "inputData": {"str": {}},
                "partnerRequestBody": {"str": {}},
                "partnerRequestHeaders": {"str": {}},
                "requestPath": "str",
                "solutionId": "str",
            },
            solution_id="str",
            request_path="str",
            partner_request_body={"str": {}},
            partner_request_headers={"str": {}},
            input_data={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy_async
    async def test_solutions_operations_get_job(self, agricultureplatform_endpoint):
        client = self.create_async_client(endpoint=agricultureplatform_endpoint)
        response = await client.solutions_operations.get_job(
            body={
                "partnerRequestBody": {"str": {}},
                "partnerRequestHeaders": {"str": {}},
                "requestPath": "str",
                "solutionId": "str",
            },
            solution_id="str",
            request_path="str",
            partner_request_body={"str": {}},
            partner_request_headers={"str": {}},
        )

        # please add some check logic here by yourself
        # ...
