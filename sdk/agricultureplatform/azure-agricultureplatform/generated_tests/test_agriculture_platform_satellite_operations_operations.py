# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import AgriculturePlatformClientTestBase, AgriculturePlatformPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAgriculturePlatformSatelliteOperationsOperations(AgriculturePlatformClientTestBase):
    @AgriculturePlatformPreparer()
    @recorded_by_proxy
    def test_satellite_operations_fetch_items(self, agricultureplatform_endpoint):
        client = self.create_client(endpoint=agricultureplatform_endpoint)
        response = client.satellite_operations.fetch_items(
            body={
                "credentials": {
                    "clientId": "str",
                    "clientSecret": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                    "kind": "OAuthClientCredentials",
                },
                "data": {"imageFormats": ["str"], "imageNames": ["str"], "imageResolutions": [0.0]},
                "itemUri": "str",
                "provider": "str",
                "providerCollectionId": "str",
                "endDateTime": "2020-02-20 00:00:00",
                "featureId": "str",
                "startDateTime": "2020-02-20 00:00:00",
            },
            credentials={
                "clientId": "str",
                "clientSecret": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                "kind": "OAuthClientCredentials",
            },
            provider="str",
            item_uri="str",
            data={"imageFormats": ["str"], "imageNames": ["str"], "imageResolutions": [0.0]},
            provider_collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AgriculturePlatformPreparer()
    @recorded_by_proxy
    def test_satellite_operations_search_items(self, agricultureplatform_endpoint):
        client = self.create_client(endpoint=agricultureplatform_endpoint)
        response = client.satellite_operations.search_items(
            body={
                "credentials": {
                    "clientId": "str",
                    "clientSecret": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                    "kind": "OAuthClientCredentials",
                },
                "provider": "str",
                "providerCollectionId": "str",
                "bbox": [0.0],
                "endDateTime": "2020-02-20 00:00:00",
                "featureIds": ["str"],
                "intersects": "geo_json_object",
                "startDateTime": "2020-02-20 00:00:00",
            },
            credentials={
                "clientId": "str",
                "clientSecret": {"keyName": "str", "keyVaultUri": "str", "keyVersion": "str"},
                "kind": "OAuthClientCredentials",
            },
            provider="str",
            provider_collection_id="str",
        )

        # please add some check logic here by yourself
        # ...
