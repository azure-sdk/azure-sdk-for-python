# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AcceptHeaderEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """enum for request "accept" header."""

    JSON = "application/json"
    """application/json."""
    OCTET_STREAM = "application/octet-stream"
    """application/octet-stream."""


class AuthCredentialsKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum for different types of AuthCredentials supported."""

    O_AUTH_CLIENT_CREDENTIALS = "OAuthClientCredentials"
    """OAuthClientCredentials."""
    API_KEY_AUTH_CREDENTIALS = "ApiKeyAuthCredentials"
    """ApiKeyAuthCredentials."""


class DataFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of dataset."""

    IMAGE = "Image"
    """Image."""
    SHAPEFILE = "Shapefile"
    """Shapefile."""
    BINARY = "Binary"
    """Binary"""


class DestinationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DestinationType."""

    CATALOG = "Catalog"
    """Catalog."""
    COLLECTION = "Collection"
    """Collection."""
    ITEM = "Item"
    """Item."""
    ASSET = "Asset"
    """Asset."""


class GeoJsonObjectType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """GeoJSON object type."""

    POINT = "Point"
    """Point."""
    POLYGON = "Polygon"
    """Polygon."""
    MULTI_POLYGON = "MultiPolygon"
    """MultiPolygon."""


class ImageFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Supported image formats for scene resource."""

    TIF = "TIF"
    """TIF."""


class RelationshipType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of relationship."""

    DERIVED_FROM = "DerivedFrom"
    """DerivedFrom."""
    CHILD = "Child"
    """Contains."""
    PARENT = "Parent"
    """Parent."""
