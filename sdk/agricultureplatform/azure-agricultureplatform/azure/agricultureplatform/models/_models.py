# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import AuthCredentialsKind, GeoJsonObjectType

if TYPE_CHECKING:
    from .. import models as _models


class AuthCredentials(_model_base.Model):
    """AuthCredentials abstract base class for Auth Purpose.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ApiKeyAuthCredentials, OauthClientCredentials

    :ivar kind: Enum for different types of AuthCredentials supported. Required. Known values are:
     "OAuthClientCredentials" and "ApiKeyAuthCredentials".
    :vartype kind: str or ~azure.agricultureplatform.models.AuthCredentialsKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Enum for different types of AuthCredentials supported. Required. Known values are:
     \"OAuthClientCredentials\" and \"ApiKeyAuthCredentials\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiKeyAuthCredentials(AuthCredentials, discriminator="ApiKeyAuthCredentials"):
    """Api Key Auth Credentials class for API Key based Auth.

    :ivar api_key: Properties of the key vault. Required.
    :vartype api_key: ~azure.agricultureplatform.models.KeyVaultProperties
    :ivar kind: Enum for different types of AuthCredentials. Required. ApiKeyAuthCredentials.
    :vartype kind: str or ~azure.agricultureplatform.models.API_KEY_AUTH_CREDENTIALS
    """

    api_key: "_models.KeyVaultProperties" = rest_field(
        name="apiKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the key vault. Required."""
    kind: Literal[AuthCredentialsKind.API_KEY_AUTH_CREDENTIALS] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Enum for different types of AuthCredentials. Required. ApiKeyAuthCredentials."""

    @overload
    def __init__(
        self,
        *,
        api_key: "_models.KeyVaultProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AuthCredentialsKind.API_KEY_AUTH_CREDENTIALS, **kwargs)


class Asset(_model_base.Model):
    """Asset.

    :ivar type: Type of dataset. Known values are: "Image", "Shapefile", and "Binary".
    :vartype type: str or ~azure.agricultureplatform.models.DataFormat
    :ivar name: Name.
    :vartype name: str
    :ivar href: Href.
    :vartype href: str
    """

    type: Optional[Union[str, "_models.DataFormat"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of dataset. Known values are: \"Image\", \"Shapefile\", and \"Binary\"."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name."""
    href: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Href."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.DataFormat"]] = None,
        name: Optional[str] = None,
        href: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Catalog(_model_base.Model):
    """Catalog.

    :ivar links: Links for referencing other objects.
    :vartype links: list[~azure.agricultureplatform.models.Link]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar status: Status of the resource.
    :vartype status: str
    :ivar created_date_time: Date-time when resource was created, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date-time when resource was last modified, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype modified_date_time: ~datetime.datetime
    :ivar source: Source of the resource.
    :vartype source: str
    :ivar name: Name to identify resource.
    :vartype name: str
    :ivar description: Textual description of the resource.
    :vartype description: str
    :ivar created_by: Created by user/tenant id.
    :vartype created_by: str
    :ivar modified_by: Modified by user/tenant id.
    :vartype modified_by: str
    :ivar properties: A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
    :vartype properties: dict[str, any]
    :ivar id: Id of the Catalog. Required.
    :vartype id: str
    """

    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for referencing other objects."""
    e_tag: Optional[str] = rest_field(name="eTag", visibility=["read"])
    """The ETag value to implement optimistic concurrency."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the resource."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    modified_date_time: Optional[datetime.datetime] = rest_field(
        name="modifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name to identify resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Textual description of the resource."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """Created by user/tenant id."""
    modified_by: Optional[str] = rest_field(name="modifiedBy", visibility=["read"])
    """Modified by user/tenant id."""
    properties: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported."""
    id: str = rest_field(visibility=["read"])
    """Id of the Catalog. Required."""

    @overload
    def __init__(
        self,
        *,
        links: Optional[List["_models.Link"]] = None,
        status: Optional[str] = None,
        source: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CatalogCollection(_model_base.Model):
    """Schema for storing catalog and collection id.

    :ivar catalog_id: Catalog Id.
    :vartype catalog_id: str
    :ivar collection_id: Collection Id.
    :vartype collection_id: str
    """

    catalog_id: Optional[str] = rest_field(name="catalogId", visibility=["read"])
    """Catalog Id."""
    collection_id: Optional[str] = rest_field(name="collectionId", visibility=["read"])
    """Collection Id."""


class Collection(_model_base.Model):
    """Collection.

    :ivar links: Links for referencing other objects.
    :vartype links: list[~azure.agricultureplatform.models.Link]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar status: Status of the resource.
    :vartype status: str
    :ivar created_date_time: Date-time when resource was created, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date-time when resource was last modified, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype modified_date_time: ~datetime.datetime
    :ivar source: Source of the resource.
    :vartype source: str
    :ivar name: Name to identify resource.
    :vartype name: str
    :ivar description: Textual description of the resource.
    :vartype description: str
    :ivar created_by: Created by user/tenant id.
    :vartype created_by: str
    :ivar modified_by: Modified by user/tenant id.
    :vartype modified_by: str
    :ivar properties: A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
    :vartype properties: dict[str, any]
    :ivar schema_id: Schema Foreign Key. Required.
    :vartype schema_id: str
    :ivar catalog_id: Id of the Catalog.
    :vartype catalog_id: str
    :ivar id: Unique resource ID. Required.
    :vartype id: str
    """

    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for referencing other objects."""
    e_tag: Optional[str] = rest_field(name="eTag", visibility=["read"])
    """The ETag value to implement optimistic concurrency."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the resource."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    modified_date_time: Optional[datetime.datetime] = rest_field(
        name="modifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name to identify resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Textual description of the resource."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """Created by user/tenant id."""
    modified_by: Optional[str] = rest_field(name="modifiedBy", visibility=["read"])
    """Modified by user/tenant id."""
    properties: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported."""
    schema_id: str = rest_field(name="schemaId", visibility=["read", "create", "update", "delete", "query"])
    """Schema Foreign Key. Required."""
    catalog_id: Optional[str] = rest_field(name="catalogId", visibility=["read"])
    """Id of the Catalog."""
    id: str = rest_field(visibility=["read"])
    """Unique resource ID. Required."""

    @overload
    def __init__(
        self,
        *,
        schema_id: str,
        links: Optional[List["_models.Link"]] = None,
        status: Optional[str] = None,
        source: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorForLocation(_model_base.Model):
    """Model for error information for a failed location.

    :ivar location: Schema of Location data.
    :vartype location: ~azure.agricultureplatform.models.WeatherLocation
    :ivar code: Status code returned by data provider.
    :vartype code: int
    :ivar description: Description of the error.
    :vartype description: str
    :ivar retryable: Flag suggesting if retry attempt with same request body should be made to
     fetch
     required data.
    :vartype retryable: bool
    """

    location: Optional["_models.WeatherLocation"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema of Location data."""
    code: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status code returned by data provider."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the error."""
    retryable: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Flag suggesting if retry attempt with same request body should be made to fetch
     required data."""

    @overload
    def __init__(
        self,
        *,
        location: Optional["_models.WeatherLocation"] = None,
        code: Optional[int] = None,
        description: Optional[str] = None,
        retryable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """An error response from the Azure AgPlatform service. See
    `https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses
    <https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses>`_
    for ErrorResponse reference document.

    :ivar error: An error from the Azure AgPlatform service.
    :vartype error: ~azure.core.ODataV4Format
    :ivar trace_id: Unique trace Id.
    :vartype trace_id: str
    """

    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An error from the Azure AgPlatform service."""
    trace_id: Optional[str] = rest_field(name="traceId", visibility=["read", "create", "update", "delete", "query"])
    """Unique trace Id."""

    @overload
    def __init__(
        self,
        *,
        error: Optional[ODataV4Format] = None,
        trace_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileModel(_model_base.Model):
    """File.

    :ivar file_path: FilePath. Required.
    :vartype file_path: str
    """

    file_path: str = rest_field(name="filePath", visibility=["read", "create", "update", "delete", "query"])
    """FilePath. Required."""

    @overload
    def __init__(
        self,
        *,
        file_path: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GeoJsonObject(_model_base.Model):
    """GeoJSON (For more details: `https://geojson.org/ <https://geojson.org/>`_). Note: Coordinates
    are
    expected in [Longitude, Latitude] format.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    MultiPolygon, Point, Polygon

    :ivar type: Type of GeoJSON object. Required. Known values are: "Point", "Polygon", and
     "MultiPolygon".
    :vartype type: str or ~azure.agricultureplatform.models.GeoJsonObjectType
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Type of GeoJSON object. Required. Known values are: \"Point\", \"Polygon\", and
     \"MultiPolygon\"."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageFile(_model_base.Model):
    """Schema of image file resource.

    :ivar file_path: ADLS path of the image file.
    :vartype file_path: str
    :ivar name: Name of the image file. Required.
    :vartype name: str
    :ivar image_format: Supported image formats for scene resource. "TIF"
    :vartype image_format: str or ~azure.agricultureplatform.models.ImageFormat
    :ivar resolution: Resolution of image file in meters.
    :vartype resolution: float
    """

    file_path: Optional[str] = rest_field(name="filePath", visibility=["read", "create", "update", "delete", "query"])
    """ADLS path of the image file."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the image file. Required."""
    image_format: Optional[Union[str, "_models.ImageFormat"]] = rest_field(
        name="imageFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Supported image formats for scene resource. \"TIF\""""
    resolution: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resolution of image file in meters."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        file_path: Optional[str] = None,
        image_format: Optional[Union[str, "_models.ImageFormat"]] = None,
        resolution: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Item(_model_base.Model):
    """Item.

    :ivar links: Links for referencing other objects.
    :vartype links: list[~azure.agricultureplatform.models.Link]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar status: Status of the resource.
    :vartype status: str
    :ivar created_date_time: Date-time when resource was created, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date-time when resource was last modified, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype modified_date_time: ~datetime.datetime
    :ivar source: Source of the resource.
    :vartype source: str
    :ivar name: Name to identify resource.
    :vartype name: str
    :ivar description: Textual description of the resource.
    :vartype description: str
    :ivar created_by: Created by user/tenant id.
    :vartype created_by: str
    :ivar modified_by: Modified by user/tenant id.
    :vartype modified_by: str
    :ivar properties: A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
    :vartype properties: dict[str, any]
    :ivar data: Schema for records under the dataset. Required.
    :vartype data: dict[str, any]
    :ivar owner_item_id: Owner Item Ids of the resource.
    :vartype owner_item_id: str
    :ivar catalog_id: Id of the Catalog resource.
    :vartype catalog_id: str
    :ivar collection_id: Id of the Collection resource.
    :vartype collection_id: str
    :ivar assets: Assets.
    :vartype assets: list[~azure.agricultureplatform.models.Asset]
    :ivar id: Id of the Item. Required.
    :vartype id: str
    """

    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for referencing other objects."""
    e_tag: Optional[str] = rest_field(name="eTag", visibility=["read"])
    """The ETag value to implement optimistic concurrency."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the resource."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    modified_date_time: Optional[datetime.datetime] = rest_field(
        name="modifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name to identify resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Textual description of the resource."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """Created by user/tenant id."""
    modified_by: Optional[str] = rest_field(name="modifiedBy", visibility=["read"])
    """Modified by user/tenant id."""
    properties: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported."""
    data: Dict[str, Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Schema for records under the dataset. Required."""
    owner_item_id: Optional[str] = rest_field(
        name="ownerItemId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Owner Item Ids of the resource."""
    catalog_id: Optional[str] = rest_field(name="catalogId", visibility=["read"])
    """Id of the Catalog resource."""
    collection_id: Optional[str] = rest_field(name="collectionId", visibility=["read"])
    """Id of the Collection resource."""
    assets: Optional[List["_models.Asset"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Assets."""
    id: str = rest_field(visibility=["read"])
    """Id of the Item. Required."""

    @overload
    def __init__(
        self,
        *,
        data: Dict[str, Any],
        links: Optional[List["_models.Link"]] = None,
        status: Optional[str] = None,
        source: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, Any]] = None,
        owner_item_id: Optional[str] = None,
        assets: Optional[List["_models.Asset"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ItemListResponse(_model_base.Model):
    """Represents a response containing a list of items.

    :ivar value: List of Items. Required.
    :vartype value: list[~azure.agricultureplatform.models.Item]
    :ivar skip_token: Skip token for getting next set of results.
    :vartype skip_token: str
    :ivar next_link: URL to do the POST request with same filters,
     to get next set of items.
    :vartype next_link: str
    """

    value: List["_models.Item"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of Items. Required."""
    skip_token: Optional[str] = rest_field(name="skipToken", visibility=["read", "create", "update", "delete", "query"])
    """Skip token for getting next set of results."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])
    """URL to do the POST request with same filters,
     to get next set of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.Item"],
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ItemResponse(_model_base.Model):
    """ItemResponse model for Items api.

    :ivar links: Links for referencing other objects.
    :vartype links: list[~azure.agricultureplatform.models.Link]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar status: Status of the resource.
    :vartype status: str
    :ivar created_date_time: Date-time when resource was created, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date-time when resource was last modified, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype modified_date_time: ~datetime.datetime
    :ivar source: Source of the resource.
    :vartype source: str
    :ivar name: Name to identify resource.
    :vartype name: str
    :ivar description: Textual description of the resource.
    :vartype description: str
    :ivar created_by: Created by user/tenant id.
    :vartype created_by: str
    :ivar modified_by: Modified by user/tenant id.
    :vartype modified_by: str
    :ivar properties: A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
    :vartype properties: dict[str, any]
    :ivar data: Schema for records under the dataset. Required.
    :vartype data: dict[str, any]
    :ivar owner_item_id: OwnerItemId.
    :vartype owner_item_id: str
    :ivar catalog_id: CatalogId.
    :vartype catalog_id: str
    :ivar collection_id: CollectionId.
    :vartype collection_id: str
    :ivar assets: Assets.
    :vartype assets: list[~azure.agricultureplatform.models.Asset]
    :ivar id: Unique resource ID.
    :vartype id: str
    """

    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for referencing other objects."""
    e_tag: Optional[str] = rest_field(name="eTag", visibility=["read"])
    """The ETag value to implement optimistic concurrency."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the resource."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    modified_date_time: Optional[datetime.datetime] = rest_field(
        name="modifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name to identify resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Textual description of the resource."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """Created by user/tenant id."""
    modified_by: Optional[str] = rest_field(name="modifiedBy", visibility=["read"])
    """Modified by user/tenant id."""
    properties: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported."""
    data: Dict[str, Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Schema for records under the dataset. Required."""
    owner_item_id: Optional[str] = rest_field(
        name="ownerItemId", visibility=["read", "create", "update", "delete", "query"]
    )
    """OwnerItemId."""
    catalog_id: Optional[str] = rest_field(name="catalogId", visibility=["read"])
    """CatalogId."""
    collection_id: Optional[str] = rest_field(name="collectionId", visibility=["read"])
    """CollectionId."""
    assets: Optional[List["_models.Asset"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Assets."""
    id: Optional[str] = rest_field(visibility=["read"])
    """Unique resource ID."""

    @overload
    def __init__(
        self,
        *,
        data: Dict[str, Any],
        links: Optional[List["_models.Link"]] = None,
        status: Optional[str] = None,
        source: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, Any]] = None,
        owner_item_id: Optional[str] = None,
        assets: Optional[List["_models.Asset"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyVaultProperties(_model_base.Model):
    """Properties of the key vault.

    :ivar key_vault_uri: Uri of the key vault. Required.
    :vartype key_vault_uri: str
    :ivar key_name: Name of Key Vault key. Required.
    :vartype key_name: str
    :ivar key_version: Version of Key Vault key. Required.
    :vartype key_version: str
    """

    key_vault_uri: str = rest_field(name="keyVaultUri", visibility=["read", "create", "update", "delete", "query"])
    """Uri of the key vault. Required."""
    key_name: str = rest_field(name="keyName", visibility=["read", "create", "update", "delete", "query"])
    """Name of Key Vault key. Required."""
    key_version: str = rest_field(name="keyVersion", visibility=["read", "create", "update", "delete", "query"])
    """Version of Key Vault key. Required."""

    @overload
    def __init__(
        self,
        *,
        key_vault_uri: str,
        key_name: str,
        key_version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Link(_model_base.Model):
    """Link.

    :ivar rel: Type of relationship. Known values are: "DerivedFrom", "Child", and "Parent".
    :vartype rel: str or ~azure.agricultureplatform.models.RelationshipType
    :ivar href: Href.
    :vartype href: str
    :ivar type: DestinationType. Known values are: "Catalog", "Collection", "Item", and "Asset".
    :vartype type: str or ~azure.agricultureplatform.models.DestinationType
    """

    rel: Optional[Union[str, "_models.RelationshipType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of relationship. Known values are: \"DerivedFrom\", \"Child\", and \"Parent\"."""
    href: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Href."""
    type: Optional[Union[str, "_models.DestinationType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """DestinationType. Known values are: \"Catalog\", \"Collection\", \"Item\", and \"Asset\"."""

    @overload
    def __init__(
        self,
        *,
        rel: Optional[Union[str, "_models.RelationshipType"]] = None,
        href: Optional[str] = None,
        type: Optional[Union[str, "_models.DestinationType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Measures(_model_base.Model):
    """Schema for storing measurement readings and unit.

    :ivar unit: Data unit.
    :vartype unit: str
    :ivar value: Data values.
    :vartype value: list[float]
    """

    unit: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Data unit."""
    value: Optional[List[float]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Data values."""

    @overload
    def __init__(
        self,
        *,
        unit: Optional[str] = None,
        value: Optional[List[float]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MultiPolygon(GeoJsonObject, discriminator="MultiPolygon"):
    """MultiPolygon geometry.

    :ivar coordinates: Gets or sets Coordinates of GeoJSON Object.
     It must be an array of polygons, each polygon contains list of linear rings.
     For Polygons with more than one of these rings, the first MUST be the exterior
     ring,
     and any others MUST be interior rings. Required.
    :vartype coordinates: list[list[list[list[float]]]]
    :ivar type: GeoJSON object type. Required. MultiPolygon.
    :vartype type: str or ~azure.agricultureplatform.models.MULTI_POLYGON
    """

    coordinates: List[List[List[List[float]]]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets Coordinates of GeoJSON Object.
     It must be an array of polygons, each polygon contains list of linear rings.
     For Polygons with more than one of these rings, the first MUST be the exterior
     ring,
     and any others MUST be interior rings. Required."""
    type: Literal[GeoJsonObjectType.MULTI_POLYGON] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """GeoJSON object type. Required. MultiPolygon."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[List[List[List[float]]]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=GeoJsonObjectType.MULTI_POLYGON, **kwargs)


class OauthClientCredentials(AuthCredentials, discriminator="OAuthClientCredentials"):
    """OAuthClientCredentials for clientId clientSecret auth.

    :ivar client_id: ClientId associated with the provider. Required.
    :vartype client_id: str
    :ivar client_secret: Properties of the key vault. Required.
    :vartype client_secret: ~azure.agricultureplatform.models.KeyVaultProperties
    :ivar kind: Type of AuthCredentials. Required. OAuthClientCredentials.
    :vartype kind: str or ~azure.agricultureplatform.models.O_AUTH_CLIENT_CREDENTIALS
    """

    client_id: str = rest_field(name="clientId", visibility=["read", "create", "update", "delete", "query"])
    """ClientId associated with the provider. Required."""
    client_secret: "_models.KeyVaultProperties" = rest_field(
        name="clientSecret", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the key vault. Required."""
    kind: Literal[AuthCredentialsKind.O_AUTH_CLIENT_CREDENTIALS] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of AuthCredentials. Required. OAuthClientCredentials."""

    @overload
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: "_models.KeyVaultProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AuthCredentialsKind.O_AUTH_CLIENT_CREDENTIALS, **kwargs)


class Point(GeoJsonObject, discriminator="Point"):
    """Point geometry.

    :ivar coordinates: Gets or sets the coordinate of this point.
     It must be an array of 2 or 3 elements for a 2D or 3D system. Required.
    :vartype coordinates: list[float]
    :ivar type: GeoJSON object type. Required. Point.
    :vartype type: str or ~azure.agricultureplatform.models.POINT
    """

    coordinates: List[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the coordinate of this point.
     It must be an array of 2 or 3 elements for a 2D or 3D system. Required."""
    type: Literal[GeoJsonObjectType.POINT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """GeoJSON object type. Required. Point."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[float],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=GeoJsonObjectType.POINT, **kwargs)


class Polygon(GeoJsonObject, discriminator="Polygon"):
    """Polygon geometry.

    :ivar coordinates: Gets or sets type of the GeoJSON Object.
     It must be an array of linear ring coordinate arrays.
     For Polygons with more than one of these rings, the first MUST be the exterior
     ring,
     and any others MUST be interior rings. Required.
    :vartype coordinates: list[list[list[float]]]
    :ivar type: GeoJSON object type. Required. Polygon.
    :vartype type: str or ~azure.agricultureplatform.models.POLYGON
    """

    coordinates: List[List[List[float]]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets type of the GeoJSON Object.
     It must be an array of linear ring coordinate arrays.
     For Polygons with more than one of these rings, the first MUST be the exterior
     ring,
     and any others MUST be interior rings. Required."""
    type: Literal[GeoJsonObjectType.POLYGON] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """GeoJSON object type. Required. Polygon."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=GeoJsonObjectType.POLYGON, **kwargs)


class SamplePartnerRequestBody(_model_base.Model):
    """SamplePartnerRequestBody.

    :ivar solution_id: SolutionId.
    :vartype solution_id: str
    :ivar party_id: PartyId.
    :vartype party_id: str
    :ivar gdd_start_date: GddStartDate.
    :vartype gdd_start_date: ~datetime.datetime
    :ivar gdd_end_date: GddEndDate.
    :vartype gdd_end_date: ~datetime.datetime
    :ivar resource_id: ResourceId.
    :vartype resource_id: str
    :ivar resource_type: ResourceType.
    :vartype resource_type: str
    :ivar crop: Crop.
    :vartype crop: str
    :ivar temperature_unit: TemperatureUnit.
    :vartype temperature_unit: str
    :ivar method: Method.
    :vartype method: str
    """

    solution_id: Optional[str] = rest_field(
        name="solutionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """SolutionId."""
    party_id: Optional[str] = rest_field(name="partyId", visibility=["read", "create", "update", "delete", "query"])
    """PartyId."""
    gdd_start_date: Optional[datetime.datetime] = rest_field(
        name="gddStartDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """GddStartDate."""
    gdd_end_date: Optional[datetime.datetime] = rest_field(
        name="gddEndDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """GddEndDate."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ResourceId."""
    resource_type: Optional[str] = rest_field(
        name="resourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """ResourceType."""
    crop: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Crop."""
    temperature_unit: Optional[str] = rest_field(
        name="temperatureUnit", visibility=["read", "create", "update", "delete", "query"]
    )
    """TemperatureUnit."""
    method: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Method."""

    @overload
    def __init__(
        self,
        *,
        solution_id: Optional[str] = None,
        party_id: Optional[str] = None,
        gdd_start_date: Optional[datetime.datetime] = None,
        gdd_end_date: Optional[datetime.datetime] = None,
        resource_id: Optional[str] = None,
        resource_type: Optional[str] = None,
        crop: Optional[str] = None,
        temperature_unit: Optional[str] = None,
        method: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SamplePartnerResponse(_model_base.Model):
    """SamplePartnerResponse.

    :ivar id: Id.
    :vartype id: str
    :ivar message: Message.
    :vartype message: str
    :ivar status: Status.
    :vartype status: str
    :ivar job_created_date_time: JobCreatedDateTime.
    :vartype job_created_date_time: ~datetime.datetime
    :ivar job_last_action_date_time: JobLastActionDateTime.
    :vartype job_last_action_date_time: ~datetime.datetime
    :ivar e2_eid: E2eid.
    :vartype e2_eid: str
    :ivar partner_request_body: SamplePartnerRequestBody.
    :vartype partner_request_body: ~azure.agricultureplatform.models.SamplePartnerRequestBody
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Message."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status."""
    job_created_date_time: Optional[datetime.datetime] = rest_field(
        name="jobCreatedDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """JobCreatedDateTime."""
    job_last_action_date_time: Optional[datetime.datetime] = rest_field(
        name="jobLastActionDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """JobLastActionDateTime."""
    e2_eid: Optional[str] = rest_field(name="e2eid", visibility=["read", "create", "update", "delete", "query"])
    """E2eid."""
    partner_request_body: Optional["_models.SamplePartnerRequestBody"] = rest_field(
        name="partnerRequestBody", visibility=["read", "create", "update", "delete", "query"]
    )
    """SamplePartnerRequestBody."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        message: Optional[str] = None,
        status: Optional[str] = None,
        job_created_date_time: Optional[datetime.datetime] = None,
        job_last_action_date_time: Optional[datetime.datetime] = None,
        e2_eid: Optional[str] = None,
        partner_request_body: Optional["_models.SamplePartnerRequestBody"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SatelliteData(_model_base.Model):
    """Data Model for SatelliteIngestionJobRequest.

    :ivar image_names: List of ImageNames.
    :vartype image_names: list[str]
    :ivar image_formats: List of ImageFormats. Available value: TIF.
    :vartype image_formats: list[str]
    :ivar image_resolutions: List of ImageResolutions in meters. Available values: 10, 20, 60.
    :vartype image_resolutions: list[float]
    """

    image_names: Optional[List[str]] = rest_field(
        name="imageNames", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of ImageNames."""
    image_formats: Optional[List[str]] = rest_field(
        name="imageFormats", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of ImageFormats. Available value: TIF."""
    image_resolutions: Optional[List[float]] = rest_field(
        name="imageResolutions", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of ImageResolutions in meters. Available values: 10, 20, 60."""

    @overload
    def __init__(
        self,
        *,
        image_names: Optional[List[str]] = None,
        image_formats: Optional[List[str]] = None,
        image_resolutions: Optional[List[float]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SatelliteFetchData(_model_base.Model):
    """SatelliteFetchData.

    :ivar date_time: Start Date.
    :vartype date_time: ~datetime.datetime
    :ivar provider: Provider of satellite data. Available Value: SentinelHub.
    :vartype provider: str
    :ivar provider_collection_id: Collection of satellite data. Available Value: sentinel-2-l2a,
     sentinel-2-l1c. Required.
    :vartype provider_collection_id: str
    :ivar feature_id: Feature Id.
    :vartype feature_id: str
    :ivar image_files: ImageFiles.
    :vartype image_files: list[~azure.agricultureplatform.models.ImageFile]
    :ivar item_uri: ItemUri.
    :vartype item_uri: str
    :ivar id: Id.
    :vartype id: str
    """

    date_time: Optional[datetime.datetime] = rest_field(
        name="dateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Start Date."""
    provider: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Provider of satellite data. Available Value: SentinelHub."""
    provider_collection_id: str = rest_field(
        name="providerCollectionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. Required."""
    feature_id: Optional[str] = rest_field(name="featureId", visibility=["read", "create", "update", "delete", "query"])
    """Feature Id."""
    image_files: Optional[List["_models.ImageFile"]] = rest_field(
        name="imageFiles", visibility=["read", "create", "update", "delete", "query"]
    )
    """ImageFiles."""
    item_uri: Optional[str] = rest_field(name="itemUri", visibility=["read", "create", "update", "delete", "query"])
    """ItemUri."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id."""

    @overload
    def __init__(
        self,
        *,
        provider_collection_id: str,
        date_time: Optional[datetime.datetime] = None,
        provider: Optional[str] = None,
        feature_id: Optional[str] = None,
        image_files: Optional[List["_models.ImageFile"]] = None,
        item_uri: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SatelliteFetchResponse(_model_base.Model):
    """Satellite Fetch Response.

    :ivar value: Value.
    :vartype value: list[~azure.agricultureplatform.models.SatelliteFetchData]
    """

    value: Optional[List["_models.SatelliteFetchData"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Value."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.SatelliteFetchData"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Schema(_model_base.Model):
    """SchemaModel.

    :ivar links: Links for referencing other objects.
    :vartype links: list[~azure.agricultureplatform.models.Link]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar status: Status of the resource.
    :vartype status: str
    :ivar created_date_time: Date-time when resource was created, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date-time when resource was last modified, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype modified_date_time: ~datetime.datetime
    :ivar source: Source of the resource.
    :vartype source: str
    :ivar name: Name to identify resource.
    :vartype name: str
    :ivar description: Textual description of the resource.
    :vartype description: str
    :ivar created_by: Created by user/tenant id.
    :vartype created_by: str
    :ivar modified_by: Modified by user/tenant id.
    :vartype modified_by: str
    :ivar properties: A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
    :vartype properties: dict[str, any]
    :ivar dependent_collections: Dependent Collections.
    :vartype dependent_collections: list[~azure.agricultureplatform.models.CatalogCollection]
    :ivar schema_model: Schema. Required.
    :vartype schema_model: dict[str, any]
    :ivar id: Id of the Schema. Required.
    :vartype id: str
    """

    links: Optional[List["_models.Link"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Links for referencing other objects."""
    e_tag: Optional[str] = rest_field(name="eTag", visibility=["read"])
    """The ETag value to implement optimistic concurrency."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the resource."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    modified_date_time: Optional[datetime.datetime] = rest_field(
        name="modifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Source of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name to identify resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Textual description of the resource."""
    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """Created by user/tenant id."""
    modified_by: Optional[str] = rest_field(name="modifiedBy", visibility=["read"])
    """Modified by user/tenant id."""
    properties: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A collection of key value pairs that belongs to the resource.
     Each pair must not have a key greater than 50 characters
     and must not have a value greater than 150 characters.
     Note: A maximum of 25 key value pairs can be provided for a resource and only
     string,
     numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported."""
    dependent_collections: Optional[List["_models.CatalogCollection"]] = rest_field(
        name="dependentCollections", visibility=["read"]
    )
    """Dependent Collections."""
    schema_model: Dict[str, Any] = rest_field(
        name="schemaModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema. Required."""
    id: str = rest_field(visibility=["read"])
    """Id of the Schema. Required."""

    @overload
    def __init__(
        self,
        *,
        schema_model: Dict[str, Any],
        links: Optional[List["_models.Link"]] = None,
        status: Optional[str] = None,
        source: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SearchFeaturesResponse(_model_base.Model):
    """Paged response contains list of items and next property to get the next set of
    results.

    :ivar features: List of items. Required.
    :vartype features: list[~azure.agricultureplatform.models.StacItem]
    :ivar next_link: URL to do the POST request with same filters,
     to get next set of items.
    :vartype next_link: str
    """

    features: List["_models.StacItem"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of items. Required."""
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read"])
    """URL to do the POST request with same filters,
     to get next set of items."""

    @overload
    def __init__(
        self,
        *,
        features: List["_models.StacItem"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StacAsset(_model_base.Model):
    """Assets.

    :ivar href: The HREF of the asset.
    :vartype href: str
    :ivar title: The title of the asset.
    :vartype title: str
    :ivar description: The description of the asset.
    :vartype description: str
    :ivar type: The type of the asset.
    :vartype type: str
    :ivar roles: The roles of the asset.
    :vartype roles: list[str]
    """

    href: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The HREF of the asset."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The title of the asset."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the asset."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of the asset."""
    roles: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The roles of the asset."""

    @overload
    def __init__(
        self,
        *,
        href: Optional[str] = None,
        title: Optional[str] = None,
        description: Optional[str] = None,
        type: Optional[str] = None,
        roles: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StacItem(_model_base.Model):
    """Schema of STAC Item.
    Refer for spec:
    `https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields
    <https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields>`_.

    :ivar stac_version: The STAC version the Stac Item implements. Required.
    :vartype stac_version: str
    :ivar stac_extensions: A list of extensions the Stac Item implements.
    :vartype stac_extensions: list[str]
    :ivar id: Provider identifier. Globally unique ID by Data provider. Required.
    :vartype id: str
    :ivar type: Type of the GeoJSON Object. It's value is always Feature. Required.
    :vartype type: str
    :ivar geometry: Defines the full footprint of the asset represented by this item.
     Its a GeoJSON geometry.
    :vartype geometry: any
    :ivar bbox: Bounding box of the item.
    :vartype bbox: list[float]
    :ivar properties: A dictionary of additional metadata for the item. Required.
    :vartype properties: any
    :ivar links: List of link objects to resources and related URLs. Required.
    :vartype links: list[~azure.agricultureplatform.models.StacLink]
    :ivar assets: Dictionary of asset objects, each with a unique key. Required.
    :vartype assets: dict[str, ~azure.agricultureplatform.models.StacAsset]
    :ivar provider_collection_id: The id of the STAC Collection this Stac Item references.
    :vartype provider_collection_id: str
    """

    stac_version: str = rest_field(name="stacVersion", visibility=["read", "create", "update", "delete", "query"])
    """The STAC version the Stac Item implements. Required."""
    stac_extensions: Optional[List[str]] = rest_field(
        name="stacExtensions", visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of extensions the Stac Item implements."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Provider identifier. Globally unique ID by Data provider. Required."""
    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the GeoJSON Object. It's value is always Feature. Required."""
    geometry: Optional[Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Defines the full footprint of the asset represented by this item.
     Its a GeoJSON geometry."""
    bbox: Optional[List[float]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Bounding box of the item."""
    properties: Any = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A dictionary of additional metadata for the item. Required."""
    links: List["_models.StacLink"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of link objects to resources and related URLs. Required."""
    assets: Dict[str, "_models.StacAsset"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of asset objects, each with a unique key. Required."""
    provider_collection_id: Optional[str] = rest_field(
        name="providerCollectionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The id of the STAC Collection this Stac Item references."""

    @overload
    def __init__(
        self,
        *,
        stac_version: str,
        id: str,  # pylint: disable=redefined-builtin
        type: str,
        properties: Any,
        links: List["_models.StacLink"],
        assets: Dict[str, "_models.StacAsset"],
        stac_extensions: Optional[List[str]] = None,
        geometry: Optional[Any] = None,
        bbox: Optional[List[float]] = None,
        provider_collection_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StacLink(_model_base.Model):
    """Link.

    :ivar href: The HREF of the link.
    :vartype href: str
    :ivar rel: The relation type of the link.
    :vartype rel: str
    :ivar type: The type of the link. Optional.
    :vartype type: str
    :ivar title: The title of the link. Optional.
    :vartype title: str
    """

    href: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The HREF of the link."""
    rel: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The relation type of the link."""
    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of the link. Optional."""
    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The title of the link. Optional."""

    @overload
    def __init__(
        self,
        *,
        href: Optional[str] = None,
        rel: Optional[str] = None,
        type: Optional[str] = None,
        title: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherData(_model_base.Model):
    """Schema of weather data.

    :ivar additional_attributes: A collection of key value pairs that belongs to the resource. Each
     pair must
     not have a key greater than 50 characters and must not have a value greater
     than 250 characters. Note: A maximum of 100 key value pairs can be provided for
     a resource and only string and numeral values are supported.
    :vartype additional_attributes: dict[str, any]
    :ivar wet_bulb_temperature: Schema for storing measurement readings and unit.
    :vartype wet_bulb_temperature: ~azure.agricultureplatform.models.Measures
    :ivar cloud_cover: Schema for storing measurement readings and unit.
    :vartype cloud_cover: ~azure.agricultureplatform.models.Measures
    :ivar day_of_week: Day of week.
    :vartype day_of_week: list[str]
    :ivar day_or_night: This data field indicates whether it is daytime or nighttime based on the
     Local
     Apparent Time of the location.
    :vartype day_or_night: list[str]
    :ivar expiration_time: Expiration time in Utc format.
    :vartype expiration_time: list[str]
    :ivar icon_code: This number is the key to the weather icon lookup. The data field shows the
     icon number that is matched to represent the observed weather conditions.
    :vartype icon_code: list[int]
    :ivar icon_code_extend: Code representing full set sensible weather.
    :vartype icon_code_extend: list[int]
    :ivar has_precipitation: Indicates whether there is precipitation or not.
    :vartype has_precipitation: list[bool]
    :ivar pressure_mean_sea_level: Schema for storing measurement readings and unit.
    :vartype pressure_mean_sea_level: ~azure.agricultureplatform.models.Measures
    :ivar relative_humidity: Schema for storing measurement readings and unit.
    :vartype relative_humidity: ~azure.agricultureplatform.models.Measures
    :ivar temperature: Schema for storing measurement readings and unit.
    :vartype temperature: ~azure.agricultureplatform.models.Measures
    :ivar temperature_dew_point: Schema for storing measurement readings and unit.
    :vartype temperature_dew_point: ~azure.agricultureplatform.models.Measures
    :ivar temperature_feels_like: Schema for storing measurement readings and unit.
    :vartype temperature_feels_like: ~azure.agricultureplatform.models.Measures
    :ivar temperature_heat_index: Schema for storing measurement readings and unit.
    :vartype temperature_heat_index: ~azure.agricultureplatform.models.Measures
    :ivar temperature_wind_chill: Schema for storing measurement readings and unit.
    :vartype temperature_wind_chill: ~azure.agricultureplatform.models.Measures
    :ivar uv_description: The UV Index Description which complements the UV Index value by
     providing an
     associated level of risk of skin damage due to exposure (-2 = Not Available, -1
     = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very
     High, 11 to 16 = Extreme).
    :vartype uv_description: list[str]
    :ivar uv_index: Hourly maximum UV index.
    :vartype uv_index: list[float]
    :ivar valid_time_local: Time forecast is valid in local apparent time.
    :vartype valid_time_local: list[str]
    :ivar valid_time: Time forecast is valid in Utc format.
    :vartype valid_time: list[str]
    :ivar visibility: Schema for storing measurement readings and unit.
    :vartype visibility: ~azure.agricultureplatform.models.Measures
    :ivar wind_direction: Schema for storing measurement readings and unit.
    :vartype wind_direction: ~azure.agricultureplatform.models.Measures
    :ivar wind_gust: Schema for storing measurement readings and unit.
    :vartype wind_gust: ~azure.agricultureplatform.models.Measures
    :ivar wind_speed: Schema for storing measurement readings and unit.
    :vartype wind_speed: ~azure.agricultureplatform.models.Measures
    :ivar wx_phrase_long: Hourly sensible weather phrase containing longer description.
    :vartype wx_phrase_long: list[str]
    :ivar wx_phrase_short: Hourly sensible weather phrase containing short description.
    :vartype wx_phrase_short: list[str]
    """

    additional_attributes: Optional[Dict[str, Any]] = rest_field(
        name="additionalAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """A collection of key value pairs that belongs to the resource. Each pair must
     not have a key greater than 50 characters and must not have a value greater
     than 250 characters. Note: A maximum of 100 key value pairs can be provided for
     a resource and only string and numeral values are supported."""
    wet_bulb_temperature: Optional["_models.Measures"] = rest_field(
        name="wetBulbTemperature", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    cloud_cover: Optional["_models.Measures"] = rest_field(
        name="cloudCover", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    day_of_week: Optional[List[str]] = rest_field(
        name="dayOfWeek", visibility=["read", "create", "update", "delete", "query"]
    )
    """Day of week."""
    day_or_night: Optional[List[str]] = rest_field(
        name="dayOrNight", visibility=["read", "create", "update", "delete", "query"]
    )
    """This data field indicates whether it is daytime or nighttime based on the Local
     Apparent Time of the location."""
    expiration_time: Optional[List[str]] = rest_field(
        name="expirationTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Expiration time in Utc format."""
    icon_code: Optional[List[int]] = rest_field(
        name="iconCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """This number is the key to the weather icon lookup. The data field shows the
     icon number that is matched to represent the observed weather conditions."""
    icon_code_extend: Optional[List[int]] = rest_field(
        name="iconCodeExtend", visibility=["read", "create", "update", "delete", "query"]
    )
    """Code representing full set sensible weather."""
    has_precipitation: Optional[List[bool]] = rest_field(
        name="hasPrecipitation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether there is precipitation or not."""
    pressure_mean_sea_level: Optional["_models.Measures"] = rest_field(
        name="pressureMeanSeaLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    relative_humidity: Optional["_models.Measures"] = rest_field(
        name="relativeHumidity", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    temperature: Optional["_models.Measures"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Schema for storing measurement readings and unit."""
    temperature_dew_point: Optional["_models.Measures"] = rest_field(
        name="temperatureDewPoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    temperature_feels_like: Optional["_models.Measures"] = rest_field(
        name="temperatureFeelsLike", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    temperature_heat_index: Optional["_models.Measures"] = rest_field(
        name="temperatureHeatIndex", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    temperature_wind_chill: Optional["_models.Measures"] = rest_field(
        name="temperatureWindChill", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    uv_description: Optional[List[str]] = rest_field(
        name="uvDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """The UV Index Description which complements the UV Index value by providing an
     associated level of risk of skin damage due to exposure (-2 = Not Available, -1
     = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very
     High, 11 to 16 = Extreme)."""
    uv_index: Optional[List[float]] = rest_field(
        name="uvIndex", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hourly maximum UV index."""
    valid_time_local: Optional[List[str]] = rest_field(
        name="validTimeLocal", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time forecast is valid in local apparent time."""
    valid_time: Optional[List[str]] = rest_field(
        name="validTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time forecast is valid in Utc format."""
    visibility: Optional["_models.Measures"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Schema for storing measurement readings and unit."""
    wind_direction: Optional["_models.Measures"] = rest_field(
        name="windDirection", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    wind_gust: Optional["_models.Measures"] = rest_field(
        name="windGust", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    wind_speed: Optional["_models.Measures"] = rest_field(
        name="windSpeed", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema for storing measurement readings and unit."""
    wx_phrase_long: Optional[List[str]] = rest_field(
        name="wxPhraseLong", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hourly sensible weather phrase containing longer description."""
    wx_phrase_short: Optional[List[str]] = rest_field(
        name="wxPhraseShort", visibility=["read", "create", "update", "delete", "query"]
    )
    """Hourly sensible weather phrase containing short description."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        additional_attributes: Optional[Dict[str, Any]] = None,
        wet_bulb_temperature: Optional["_models.Measures"] = None,
        cloud_cover: Optional["_models.Measures"] = None,
        day_of_week: Optional[List[str]] = None,
        day_or_night: Optional[List[str]] = None,
        expiration_time: Optional[List[str]] = None,
        icon_code: Optional[List[int]] = None,
        icon_code_extend: Optional[List[int]] = None,
        has_precipitation: Optional[List[bool]] = None,
        pressure_mean_sea_level: Optional["_models.Measures"] = None,
        relative_humidity: Optional["_models.Measures"] = None,
        temperature: Optional["_models.Measures"] = None,
        temperature_dew_point: Optional["_models.Measures"] = None,
        temperature_feels_like: Optional["_models.Measures"] = None,
        temperature_heat_index: Optional["_models.Measures"] = None,
        temperature_wind_chill: Optional["_models.Measures"] = None,
        uv_description: Optional[List[str]] = None,
        uv_index: Optional[List[float]] = None,
        valid_time_local: Optional[List[str]] = None,
        valid_time: Optional[List[str]] = None,
        visibility: Optional["_models.Measures"] = None,
        wind_direction: Optional["_models.Measures"] = None,
        wind_gust: Optional["_models.Measures"] = None,
        wind_speed: Optional["_models.Measures"] = None,
        wx_phrase_long: Optional[List[str]] = None,
        wx_phrase_short: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherDataErrors(_model_base.Model):
    """Model for errors encountered for all failed locations.

    :ivar locations: List of errors encountered for all failed locations.
    :vartype locations: list[~azure.agricultureplatform.models.ErrorForLocation]
    """

    locations: Optional[List["_models.ErrorForLocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of errors encountered for all failed locations."""

    @overload
    def __init__(
        self,
        *,
        locations: Optional[List["_models.ErrorForLocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherLocation(_model_base.Model):
    """Schema of Location data.

    :ivar type: Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey. Required.
    :vartype type: str
    :ivar value: Location Value eg. "10,-25" for LocationType Type "LatLong". Required.
    :vartype value: str
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey. Required."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Location Value eg. \"10,-25\" for LocationType Type \"LatLong\". Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherLocationData(_model_base.Model):
    """Schema of WeatherLocationData data.

    :ivar location: Schema of Location data.
    :vartype location: ~azure.agricultureplatform.models.WeatherLocation
    :ivar request_completion_time: Request Completion Time in Utc of the location.
    :vartype request_completion_time: str
    :ivar last_refreshed_date_time: Date-time when resource was last requested, sample format:
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype last_refreshed_date_time: ~datetime.datetime
    :ivar data: Schema of weather data.
    :vartype data: ~azure.agricultureplatform.models.WeatherData
    """

    location: Optional["_models.WeatherLocation"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema of Location data."""
    request_completion_time: Optional[str] = rest_field(
        name="requestCompletionTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Request Completion Time in Utc of the location."""
    last_refreshed_date_time: Optional[datetime.datetime] = rest_field(
        name="lastRefreshedDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ."""
    data: Optional["_models.WeatherData"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Schema of weather data."""

    @overload
    def __init__(
        self,
        *,
        location: Optional["_models.WeatherLocation"] = None,
        request_completion_time: Optional[str] = None,
        last_refreshed_date_time: Optional[datetime.datetime] = None,
        data: Optional["_models.WeatherData"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherMetadata(_model_base.Model):
    """Schema of Weather Metadata.

    :ivar provider_name: Weather provider name. Required.
    :vartype provider_name: str
    :ivar provider_api_name: Provider's api name to which request is to be made. Required.
    :vartype provider_api_name: str
    :ivar language: Language (IETF BCP 47 language tag) in which search results should be returned
     by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
    :vartype language: str
    :ivar units: Units for which request to data provider is to be sent. Supported values are
     'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     for Metric SI units. Required.
    :vartype units: str
    :ivar weather_data_type: Type of weather data (forecast/historical). Required.
    :vartype weather_data_type: str
    """

    provider_name: str = rest_field(name="providerName", visibility=["read", "create", "update", "delete", "query"])
    """Weather provider name. Required."""
    provider_api_name: str = rest_field(
        name="providerApiName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Provider's api name to which request is to be made. Required."""
    language: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Language (IETF BCP 47 language tag) in which search results should be returned
     by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'."""
    units: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Units for which request to data provider is to be sent. Supported values are
     'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     for Metric SI units. Required."""
    weather_data_type: str = rest_field(
        name="weatherDataType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of weather data (forecast/historical). Required."""

    @overload
    def __init__(
        self,
        *,
        provider_name: str,
        provider_api_name: str,
        units: str,
        weather_data_type: str,
        language: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeatherResponse(_model_base.Model):
    """Schema of Weather Data Provider Response.

    :ivar weather_metadata: Schema of Weather Metadata. Required.
    :vartype weather_metadata: ~azure.agricultureplatform.models.WeatherMetadata
    :ivar status: Indicates a Succeeded, Failed, or PartiallySucceeded response.
    :vartype status: str
    :ivar locations: List of weather data for all the weather locations.
    :vartype locations: list[~azure.agricultureplatform.models.WeatherLocationData]
    :ivar errors: Model for errors encountered for all failed locations.
    :vartype errors: ~azure.agricultureplatform.models.WeatherDataErrors
    """

    weather_metadata: "_models.WeatherMetadata" = rest_field(
        name="weatherMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema of Weather Metadata. Required."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates a Succeeded, Failed, or PartiallySucceeded response."""
    locations: Optional[List["_models.WeatherLocationData"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of weather data for all the weather locations."""
    errors: Optional["_models.WeatherDataErrors"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Model for errors encountered for all failed locations."""

    @overload
    def __init__(
        self,
        *,
        weather_metadata: "_models.WeatherMetadata",
        status: Optional[str] = None,
        locations: Optional[List["_models.WeatherLocationData"]] = None,
        errors: Optional["_models.WeatherDataErrors"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
