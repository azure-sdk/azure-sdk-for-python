# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.sqlvirtualmachine.aio import SqlVirtualMachineClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSqlVirtualMachineAvailabilityGroupListenersOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SqlVirtualMachineClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_availability_group_listeners_get(self, resource_group):
        response = await self.client.availability_group_listeners.get(
            resource_group_name=resource_group.name,
            sql_virtual_machine_group_name="str",
            availability_group_listener_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_availability_group_listeners_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.availability_group_listeners.begin_create_or_update(
                resource_group_name=resource_group.name,
                sql_virtual_machine_group_name="str",
                availability_group_listener_name="str",
                parameters={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "availabilityGroupConfiguration": {
                            "replicas": [
                                {
                                    "commit": "str",
                                    "failover": "str",
                                    "readableSecondary": "str",
                                    "role": "str",
                                    "sqlVirtualMachineInstanceId": "str",
                                }
                            ]
                        },
                        "availabilityGroupName": "str",
                        "createDefaultAvailabilityGroupIfNotExist": bool,
                        "loadBalancerConfigurations": [
                            {
                                "loadBalancerResourceId": "str",
                                "privateIpAddress": {"ipAddress": "str", "subnetResourceId": "str"},
                                "probePort": 0,
                                "publicIpAddressResourceId": "str",
                                "sqlVirtualMachineInstances": ["str"],
                            }
                        ],
                        "multiSubnetIpConfigurations": [
                            {
                                "privateIpAddress": {"ipAddress": "str", "subnetResourceId": "str"},
                                "sqlVirtualMachineInstance": "str",
                            }
                        ],
                        "port": 0,
                        "provisioningState": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_availability_group_listeners_begin_delete(self, resource_group):
        response = await (
            await self.client.availability_group_listeners.begin_delete(
                resource_group_name=resource_group.name,
                sql_virtual_machine_group_name="str",
                availability_group_listener_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_availability_group_listeners_list_by_group(self, resource_group):
        response = self.client.availability_group_listeners.list_by_group(
            resource_group_name=resource_group.name,
            sql_virtual_machine_group_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
