# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.sqlvirtualmachine import SqlVirtualMachineClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSqlVirtualMachineSqlVirtualMachinesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SqlVirtualMachineClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_get(self, resource_group):
        response = self.client.sql_virtual_machines.get(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_create_or_update(self, resource_group):
        response = self.client.sql_virtual_machines.begin_create_or_update(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
            parameters={
                "location": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "name": "str",
                "properties": {
                    "additionalVmPatch": "str",
                    "assessmentSettings": {
                        "enable": bool,
                        "runImmediately": bool,
                        "schedule": {
                            "dayOfWeek": "str",
                            "enable": bool,
                            "monthlyOccurrence": 0,
                            "startTime": "str",
                            "weeklyInterval": 0,
                        },
                    },
                    "autoBackupSettings": {
                        "backupScheduleType": "str",
                        "backupSystemDbs": bool,
                        "daysOfWeek": ["str"],
                        "enable": bool,
                        "enableEncryption": bool,
                        "fullBackupFrequency": "str",
                        "fullBackupStartTime": 0,
                        "fullBackupWindowHours": 0,
                        "logBackupFrequency": 0,
                        "password": "str",
                        "retentionPeriod": 0,
                        "storageAccessKey": "str",
                        "storageAccountUrl": "str",
                        "storageContainerName": "str",
                    },
                    "autoPatchingSettings": {
                        "additionalVmPatch": "str",
                        "dayOfWeek": "str",
                        "enable": bool,
                        "maintenanceWindowDuration": 0,
                        "maintenanceWindowStartingHour": 0,
                    },
                    "enableAutomaticUpgrade": bool,
                    "keyVaultCredentialSettings": {
                        "azureKeyVaultUrl": "str",
                        "credentialName": "str",
                        "enable": bool,
                        "servicePrincipalName": "str",
                        "servicePrincipalSecret": "str",
                    },
                    "leastPrivilegeMode": "str",
                    "osType": "str",
                    "provisioningState": "str",
                    "serverConfigurationsManagementSettings": {
                        "additionalFeaturesServerConfigurations": {"isRServicesEnabled": bool},
                        "azureAdAuthenticationSettings": {"clientId": "str"},
                        "sqlConnectivityUpdateSettings": {
                            "connectivityType": "str",
                            "port": 0,
                            "sqlAuthUpdatePassword": "str",
                            "sqlAuthUpdateUserName": "str",
                        },
                        "sqlInstanceSettings": {
                            "collation": "str",
                            "isIfiEnabled": bool,
                            "isLpimEnabled": bool,
                            "isOptimizeForAdHocWorkloadsEnabled": bool,
                            "maxDop": 0,
                            "maxServerMemoryMB": 0,
                            "minServerMemoryMB": 0,
                        },
                        "sqlStorageUpdateSettings": {
                            "diskConfigurationType": "str",
                            "diskCount": 0,
                            "startingDeviceId": 0,
                        },
                        "sqlWorkloadTypeUpdateSettings": {"sqlWorkloadType": "str"},
                    },
                    "sqlImageOffer": "str",
                    "sqlImageSku": "str",
                    "sqlManagement": "str",
                    "sqlServerLicenseType": "str",
                    "sqlVirtualMachineGroupResourceId": "str",
                    "storageConfigurationSettings": {
                        "diskConfigurationType": "str",
                        "enableStorageConfigBlade": bool,
                        "sqlDataSettings": {"defaultFilePath": "str", "luns": [0], "useStoragePool": bool},
                        "sqlLogSettings": {"defaultFilePath": "str", "luns": [0], "useStoragePool": bool},
                        "sqlSystemDbOnDataDisk": bool,
                        "sqlTempDbSettings": {
                            "dataFileCount": 0,
                            "dataFileSize": 0,
                            "dataGrowth": 0,
                            "defaultFilePath": "str",
                            "logFileSize": 0,
                            "logGrowth": 0,
                            "luns": [0],
                            "persistFolder": bool,
                            "persistFolderPath": "str",
                            "useStoragePool": bool,
                        },
                        "storageWorkloadType": "str",
                    },
                    "troubleshootingStatus": {
                        "endTimeUtc": "2020-02-20 00:00:00",
                        "lastTriggerTimeUtc": "2020-02-20 00:00:00",
                        "properties": {"unhealthyReplicaInfo": {"availabilityGroupName": "str"}},
                        "rootCause": "str",
                        "startTimeUtc": "2020-02-20 00:00:00",
                        "troubleshootingScenario": "str",
                    },
                    "virtualMachineIdentitySettings": {"resourceId": "str", "type": "str"},
                    "virtualMachineResourceId": "str",
                    "wsfcDomainCredentials": {
                        "clusterBootstrapAccountPassword": "str",
                        "clusterOperatorAccountPassword": "str",
                        "sqlServiceAccountPassword": "str",
                    },
                    "wsfcStaticIp": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_update(self, resource_group):
        response = self.client.sql_virtual_machines.begin_update(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
            parameters={"tags": {"str": "str"}},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_delete(self, resource_group):
        response = self.client.sql_virtual_machines.begin_delete(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_list_by_resource_group(self, resource_group):
        response = self.client.sql_virtual_machines.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_list(self, resource_group):
        response = self.client.sql_virtual_machines.list()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_start_assessment(self, resource_group):
        response = self.client.sql_virtual_machines.begin_start_assessment(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_fetch_dc_assessment(self, resource_group):
        response = self.client.sql_virtual_machines.begin_fetch_dc_assessment(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
            parameters={"runDiskConfigRules": bool},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_redeploy(self, resource_group):
        response = self.client.sql_virtual_machines.begin_redeploy(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_sql_virtual_machines_begin_troubleshoot(self, resource_group):
        response = self.client.sql_virtual_machines.begin_troubleshoot(
            resource_group_name=resource_group.name,
            sql_virtual_machine_name="str",
            parameters={
                "endTimeUtc": "2020-02-20 00:00:00",
                "properties": {"unhealthyReplicaInfo": {"availabilityGroupName": "str"}},
                "startTimeUtc": "2020-02-20 00:00:00",
                "troubleshootingScenario": "str",
                "virtualMachineResourceId": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
