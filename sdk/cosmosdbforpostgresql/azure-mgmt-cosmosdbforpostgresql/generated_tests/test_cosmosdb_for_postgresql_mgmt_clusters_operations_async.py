# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.cosmosdbforpostgresql.aio import CosmosdbForPostgresqlMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCosmosdbForPostgresqlMgmtClustersOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CosmosdbForPostgresqlMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.clusters.list(
            api_version="2023-03-02-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.clusters.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-03-02-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create(self, resource_group):
        response = await (
            await self.client.clusters.begin_create(
                resource_group_name=resource_group.name,
                cluster_name="str",
                parameters={
                    "location": "str",
                    "aadAuthEnabled": "str",
                    "administratorLogin": "str",
                    "administratorLoginPassword": "str",
                    "authConfig": {"activeDirectoryAuth": "str", "passwordAuth": "str"},
                    "citusVersion": "str",
                    "coordinatorEnablePublicIpAccess": bool,
                    "coordinatorServerEdition": "str",
                    "coordinatorStorageQuotaInMb": 0,
                    "coordinatorVCores": 0,
                    "dataEncryption": {"primaryKeyUri": "str", "primaryUserAssignedIdentityId": "str", "type": "str"},
                    "databaseName": "str",
                    "earliestRestoreTime": "2020-02-20 00:00:00",
                    "enableGeoBackup": bool,
                    "enableHa": bool,
                    "enableShardsOnCoordinator": bool,
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "maintenanceWindow": {"customWindow": "str", "dayOfWeek": 0, "startHour": 0, "startMinute": 0},
                    "name": "str",
                    "nodeCount": 0,
                    "nodeEnablePublicIpAccess": bool,
                    "nodeServerEdition": "str",
                    "nodeStorageQuotaInMb": 0,
                    "nodeVCores": 0,
                    "passwordEnabled": "str",
                    "pointInTimeUTC": "2020-02-20 00:00:00",
                    "postgresqlVersion": "str",
                    "preferredPrimaryZone": "str",
                    "privateEndpointConnections": [
                        {
                            "groupIds": ["str"],
                            "id": "str",
                            "name": "str",
                            "privateEndpoint": {"id": "str"},
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                            "systemData": {
                                "createdAt": "2020-02-20 00:00:00",
                                "createdBy": "str",
                                "createdByType": "str",
                                "lastModifiedAt": "2020-02-20 00:00:00",
                                "lastModifiedBy": "str",
                                "lastModifiedByType": "str",
                            },
                            "type": "str",
                        }
                    ],
                    "provisioningState": "str",
                    "readReplicas": ["str"],
                    "serverNames": [{"fullyQualifiedDomainName": "str", "name": "str"}],
                    "sourceLocation": "str",
                    "sourceResourceId": "str",
                    "state": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.clusters.get(
            resource_group_name=resource_group.name,
            cluster_name="str",
            api_version="2023-03-02-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.clusters.begin_delete(
                resource_group_name=resource_group.name,
                cluster_name="str",
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update(self, resource_group):
        response = await (
            await self.client.clusters.begin_update(
                resource_group_name=resource_group.name,
                cluster_name="str",
                parameters={
                    "administratorLoginPassword": "str",
                    "citusVersion": "str",
                    "coordinatorEnablePublicIpAccess": bool,
                    "coordinatorServerEdition": "str",
                    "coordinatorStorageQuotaInMb": 0,
                    "coordinatorVCores": 0,
                    "enableHa": bool,
                    "enableShardsOnCoordinator": bool,
                    "identity": {
                        "type": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "maintenanceWindow": {"customWindow": "str", "dayOfWeek": 0, "startHour": 0, "startMinute": 0},
                    "nodeCount": 0,
                    "nodeEnablePublicIpAccess": bool,
                    "nodeServerEdition": "str",
                    "nodeStorageQuotaInMb": 0,
                    "nodeVCores": 0,
                    "postgresqlVersion": "str",
                    "preferredPrimaryZone": "str",
                    "tags": {"str": "str"},
                },
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_restart(self, resource_group):
        response = await (
            await self.client.clusters.begin_restart(
                resource_group_name=resource_group.name,
                cluster_name="str",
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_start(self, resource_group):
        response = await (
            await self.client.clusters.begin_start(
                resource_group_name=resource_group.name,
                cluster_name="str",
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_stop(self, resource_group):
        response = await (
            await self.client.clusters.begin_stop(
                resource_group_name=resource_group.name,
                cluster_name="str",
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_promote_read_replica(self, resource_group):
        response = await (
            await self.client.clusters.begin_promote_read_replica(
                resource_group_name=resource_group.name,
                cluster_name="str",
                api_version="2023-03-02-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_name_availability(self, resource_group):
        response = await self.client.clusters.check_name_availability(
            name_availability_request={"name": "str", "type": "Microsoft.DBforPostgreSQL/serverGroupsv2"},
            api_version="2023-03-02-preview",
        )

        # please add some check logic here by yourself
        # ...
