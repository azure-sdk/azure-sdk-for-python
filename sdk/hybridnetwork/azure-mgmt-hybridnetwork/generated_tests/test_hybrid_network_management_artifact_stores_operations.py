# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.hybridnetwork import HybridNetworkManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestHybridNetworkManagementArtifactStoresOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(HybridNetworkManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_publisher(self, resource_group):
        response = self.client.artifact_stores.list_by_publisher(
            resource_group_name=resource_group.name,
            publisher_name="str",
            api_version="2024-04-15",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete(self, resource_group):
        response = self.client.artifact_stores.begin_delete(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.artifact_stores.begin_create_or_update(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "backingResourcePublicNetworkAccess": "str",
                    "managedResourceGroupConfiguration": {"location": "str", "name": "str"},
                    "provisioningState": "str",
                    "replicationStrategy": "str",
                    "storageResourceId": "str",
                    "storeType": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.artifact_stores.get(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            api_version="2024-04-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.artifact_stores.update(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={"tags": {"str": "str"}},
            api_version="2024-04-15",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_add_network_fabric_controller_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_add_network_fabric_controller_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={"networkFabricControllerIds": [{"id": "str"}]},
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_delete_network_fabric_controller_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_delete_network_fabric_controller_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={"networkFabricControllerIds": [{"id": "str"}]},
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_list_network_fabric_controller_private_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_list_network_fabric_controller_private_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_approve_private_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_approve_private_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={"manualPrivateEndPointConnections": [{"id": "str"}]},
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_remove_private_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_remove_private_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            parameters={"manualPrivateEndPointConnections": [{"id": "str"}]},
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_list_private_end_points(self, resource_group):
        response = self.client.artifact_stores.begin_list_private_end_points(
            resource_group_name=resource_group.name,
            publisher_name="str",
            artifact_store_name="str",
            api_version="2024-04-15",
        ).result()  # call '.result()' to poll until service return final result
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
