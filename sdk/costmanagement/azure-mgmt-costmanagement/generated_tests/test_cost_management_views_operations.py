# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementViewsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.views.list(
            api_version="2024-08-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_by_scope(self, resource_group):
        response = self.client.views.list_by_scope(
            scope="str",
            api_version="2024-08-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.views.get(
            view_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.views.create_or_update(
            view_name="str",
            parameters={
                "accumulated": "str",
                "chart": "str",
                "createdOn": "2020-02-20 00:00:00",
                "currency": "str",
                "dataSet": {
                    "aggregation": {"str": {"function": "str", "name": "str"}},
                    "configuration": {"columns": ["str"]},
                    "filter": {
                        "and": [...],
                        "dimensions": {"name": "str", "operator": "str", "values": ["str"]},
                        "or": [...],
                        "tags": {"name": "str", "operator": "str", "values": ["str"]},
                    },
                    "granularity": "str",
                    "grouping": [{"name": "str", "type": "str"}],
                    "sorting": [{"name": "str", "direction": "str"}],
                },
                "dateRange": "str",
                "displayName": "str",
                "eTag": "str",
                "id": "str",
                "includeMonetaryCommitment": bool,
                "kpis": [{"enabled": bool, "id": "str", "type": "str"}],
                "metric": "str",
                "modifiedOn": "2020-02-20 00:00:00",
                "name": "str",
                "pivots": [{"name": "str", "type": "str"}],
                "scope": "str",
                "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
                "timeframe": "str",
                "type": "str",
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.views.delete(
            view_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_by_scope(self, resource_group):
        response = self.client.views.get_by_scope(
            scope="str",
            view_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update_by_scope(self, resource_group):
        response = self.client.views.create_or_update_by_scope(
            scope="str",
            view_name="str",
            parameters={
                "accumulated": "str",
                "chart": "str",
                "createdOn": "2020-02-20 00:00:00",
                "currency": "str",
                "dataSet": {
                    "aggregation": {"str": {"function": "str", "name": "str"}},
                    "configuration": {"columns": ["str"]},
                    "filter": {
                        "and": [...],
                        "dimensions": {"name": "str", "operator": "str", "values": ["str"]},
                        "or": [...],
                        "tags": {"name": "str", "operator": "str", "values": ["str"]},
                    },
                    "granularity": "str",
                    "grouping": [{"name": "str", "type": "str"}],
                    "sorting": [{"name": "str", "direction": "str"}],
                },
                "dateRange": "str",
                "displayName": "str",
                "eTag": "str",
                "id": "str",
                "includeMonetaryCommitment": bool,
                "kpis": [{"enabled": bool, "id": "str", "type": "str"}],
                "metric": "str",
                "modifiedOn": "2020-02-20 00:00:00",
                "name": "str",
                "pivots": [{"name": "str", "type": "str"}],
                "scope": "str",
                "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
                "timeframe": "str",
                "type": "str",
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete_by_scope(self, resource_group):
        response = self.client.views.delete_by_scope(
            scope="str",
            view_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...
