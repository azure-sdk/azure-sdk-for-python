# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement.aio import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementGenerateBenefitUtilizationSummariesReportOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_billing_account(
        self, resource_group
    ):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_billing_account(
                billing_account_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_billing_profile(
        self, resource_group
    ):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_billing_profile(
                billing_account_id="str",
                billing_profile_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_reservation_order_id(
        self, resource_group
    ):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_reservation_order_id(
                reservation_order_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_reservation_id(self, resource_group):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_reservation_id(
                reservation_order_id="str",
                reservation_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_savings_plan_order_id(
        self, resource_group
    ):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_savings_plan_order_id(
                savings_plan_order_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_generate_benefit_utilization_summaries_report_begin_generate_by_savings_plan_id(
        self, resource_group
    ):
        response = await (
            await self.client.generate_benefit_utilization_summaries_report.begin_generate_by_savings_plan_id(
                savings_plan_order_id="str",
                savings_plan_id="str",
                benefit_utilization_summaries_request={
                    "endDate": "2020-02-20 00:00:00",
                    "grain": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "benefitId": "str",
                    "benefitOrderId": "str",
                    "billingAccountId": "str",
                    "billingProfileId": "str",
                    "kind": "str",
                },
                api_version="2024-08-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
