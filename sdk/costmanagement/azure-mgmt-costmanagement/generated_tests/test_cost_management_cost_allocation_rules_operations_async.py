# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement.aio import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementCostAllocationRulesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cost_allocation_rules_list(self, resource_group):
        response = self.client.cost_allocation_rules.list(
            billing_account_id="str",
            api_version="2024-08-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cost_allocation_rules_check_name_availability(self, resource_group):
        response = await self.client.cost_allocation_rules.check_name_availability(
            billing_account_id="str",
            cost_allocation_rule_check_name_availability_request={"name": "str", "type": "str"},
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cost_allocation_rules_get(self, resource_group):
        response = await self.client.cost_allocation_rules.get(
            billing_account_id="str",
            rule_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cost_allocation_rules_create_or_update(self, resource_group):
        response = await self.client.cost_allocation_rules.create_or_update(
            billing_account_id="str",
            rule_name="str",
            cost_allocation_rule={
                "id": "str",
                "name": "str",
                "properties": {
                    "details": {
                        "sourceResources": [{"name": "str", "resourceType": "str", "values": ["str"]}],
                        "targetResources": [
                            {
                                "name": "str",
                                "policyType": "str",
                                "resourceType": "str",
                                "values": [{"name": "str", "percentage": 0.0}],
                            }
                        ],
                    },
                    "status": "str",
                    "createdDate": "2020-02-20 00:00:00",
                    "description": "str",
                    "updatedDate": "2020-02-20 00:00:00",
                },
                "type": "str",
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_cost_allocation_rules_delete(self, resource_group):
        response = await self.client.cost_allocation_rules.delete(
            billing_account_id="str",
            rule_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...
