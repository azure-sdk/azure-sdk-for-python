# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement.aio import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementForecastOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_forecast_usage(self, resource_group):
        response = await self.client.forecast.usage(
            scope="str",
            parameters={
                "dataset": {
                    "aggregation": {"str": {"function": "str", "name": "str"}},
                    "configuration": {"columns": ["str"]},
                    "filter": {
                        "and": [...],
                        "dimensions": {"name": "str", "operator": "str", "values": ["str"]},
                        "or": [...],
                        "tags": {"name": "str", "operator": "str", "values": ["str"]},
                    },
                    "granularity": "str",
                },
                "timeframe": "str",
                "type": "str",
                "includeActualCost": bool,
                "includeFreshPartialCost": bool,
                "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_forecast_external_cloud_provider_usage(self, resource_group):
        response = await self.client.forecast.external_cloud_provider_usage(
            external_cloud_provider_type="str",
            external_cloud_provider_id="str",
            parameters={
                "dataset": {
                    "aggregation": {"str": {"function": "str", "name": "str"}},
                    "configuration": {"columns": ["str"]},
                    "filter": {
                        "and": [...],
                        "dimensions": {"name": "str", "operator": "str", "values": ["str"]},
                        "or": [...],
                        "tags": {"name": "str", "operator": "str", "values": ["str"]},
                    },
                    "granularity": "str",
                },
                "timeframe": "str",
                "type": "str",
                "includeActualCost": bool,
                "includeFreshPartialCost": bool,
                "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...
