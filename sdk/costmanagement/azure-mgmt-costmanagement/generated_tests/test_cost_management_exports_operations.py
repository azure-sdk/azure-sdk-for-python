# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementExportsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.exports.list(
            scope="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.exports.get(
            scope="str",
            export_name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update(self, resource_group):
        response = self.client.exports.create_or_update(
            scope="str",
            export_name="str",
            parameters={
                "definition": {
                    "timeframe": "str",
                    "type": "str",
                    "dataSet": {"configuration": {"columns": ["str"]}, "granularity": "str"},
                    "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
                },
                "deliveryInfo": {
                    "destination": {
                        "container": "str",
                        "resourceId": "str",
                        "rootFolderPath": "str",
                        "sasToken": "str",
                        "storageAccount": "str",
                    }
                },
                "eTag": "str",
                "format": "str",
                "id": "str",
                "identity": {"type": "str", "principalId": "str", "tenantId": "str"},
                "location": "str",
                "name": "str",
                "nextRunTimeEstimate": "2020-02-20 00:00:00",
                "partitionData": bool,
                "runHistory": {
                    "value": [
                        {
                            "eTag": "str",
                            "error": {"code": "str", "message": "str"},
                            "executionType": "str",
                            "fileName": "str",
                            "id": "str",
                            "name": "str",
                            "processingEndTime": "2020-02-20 00:00:00",
                            "processingStartTime": "2020-02-20 00:00:00",
                            "runSettings": {
                                "definition": {
                                    "timeframe": "str",
                                    "type": "str",
                                    "dataSet": {"configuration": {"columns": ["str"]}, "granularity": "str"},
                                    "timePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
                                },
                                "deliveryInfo": {
                                    "destination": {
                                        "container": "str",
                                        "resourceId": "str",
                                        "rootFolderPath": "str",
                                        "sasToken": "str",
                                        "storageAccount": "str",
                                    }
                                },
                                "format": "str",
                                "nextRunTimeEstimate": "2020-02-20 00:00:00",
                                "partitionData": bool,
                                "runHistory": ...,
                            },
                            "status": "str",
                            "submittedBy": "str",
                            "submittedTime": "2020-02-20 00:00:00",
                            "type": "str",
                        }
                    ]
                },
                "schedule": {
                    "recurrence": "str",
                    "recurrencePeriod": {"from": "2020-02-20 00:00:00", "to": "2020-02-20 00:00:00"},
                    "status": "str",
                },
                "type": "str",
            },
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.exports.delete(
            scope="str",
            export_name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_execute(self, resource_group):
        response = self.client.exports.execute(
            scope="str",
            export_name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_execution_history(self, resource_group):
        response = self.client.exports.get_execution_history(
            scope="str",
            export_name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...
