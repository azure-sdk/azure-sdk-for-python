# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.costmanagement.aio import CostManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCostManagementScheduledActionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(CostManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.scheduled_actions.list(
            api_version="2023-11-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_scope(self, resource_group):
        response = self.client.scheduled_actions.list_by_scope(
            scope="str",
            api_version="2023-11-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.scheduled_actions.create_or_update(
            name="str",
            scheduled_action={
                "displayName": "str",
                "eTag": "str",
                "fileDestination": {"fileFormats": ["str"]},
                "id": "str",
                "kind": "str",
                "name": "str",
                "notification": {
                    "subject": "str",
                    "to": ["str"],
                    "language": "str",
                    "message": "str",
                    "regionalFormat": "str",
                },
                "notificationEmail": "str",
                "schedule": {
                    "endDate": "2020-02-20 00:00:00",
                    "frequency": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "dayOfMonth": 0,
                    "daysOfWeek": ["str"],
                    "hourOfDay": 0,
                    "weeksOfMonth": ["str"],
                },
                "scope": "str",
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
                "viewId": "str",
            },
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.scheduled_actions.get(
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.scheduled_actions.delete(
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update_by_scope(self, resource_group):
        response = await self.client.scheduled_actions.create_or_update_by_scope(
            scope="str",
            name="str",
            scheduled_action={
                "displayName": "str",
                "eTag": "str",
                "fileDestination": {"fileFormats": ["str"]},
                "id": "str",
                "kind": "str",
                "name": "str",
                "notification": {
                    "subject": "str",
                    "to": ["str"],
                    "language": "str",
                    "message": "str",
                    "regionalFormat": "str",
                },
                "notificationEmail": "str",
                "schedule": {
                    "endDate": "2020-02-20 00:00:00",
                    "frequency": "str",
                    "startDate": "2020-02-20 00:00:00",
                    "dayOfMonth": 0,
                    "daysOfWeek": ["str"],
                    "hourOfDay": 0,
                    "weeksOfMonth": ["str"],
                },
                "scope": "str",
                "status": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
                "viewId": "str",
            },
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_by_scope(self, resource_group):
        response = await self.client.scheduled_actions.get_by_scope(
            scope="str",
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete_by_scope(self, resource_group):
        response = await self.client.scheduled_actions.delete_by_scope(
            scope="str",
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_run(self, resource_group):
        response = await self.client.scheduled_actions.run(
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_run_by_scope(self, resource_group):
        response = await self.client.scheduled_actions.run_by_scope(
            scope="str",
            name="str",
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_name_availability(self, resource_group):
        response = await self.client.scheduled_actions.check_name_availability(
            check_name_availability_request={"name": "str", "type": "str"},
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_name_availability_by_scope(self, resource_group):
        response = await self.client.scheduled_actions.check_name_availability_by_scope(
            scope="str",
            check_name_availability_request={"name": "str", "type": "str"},
            api_version="2023-11-01",
        )

        # please add some check logic here by yourself
        # ...
