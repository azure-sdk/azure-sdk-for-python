# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AllSavingsBenefitDetails(_serialization.Model):
    """The properties of the benefit plan recommendation details for a saving.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar overage_cost: The difference between total cost and benefit cost.
    :vartype overage_cost: float
    :ivar benefit_cost: The exact cost of the estimated usage using plan. It's equal to
     (commitmentAmount * totalHours).
    :vartype benefit_cost: float
    :ivar total_cost: The cost of the suggested commitment.
    :vartype total_cost: float
    :ivar savings_amount: The amount saved by purchasing the recommended quantity of benefit.
    :vartype savings_amount: float
    :ivar savings_percentage: The savings in percentage by purchasing the recommended quantity of
     benefit.
    :vartype savings_percentage: float
    :ivar coverage_percentage: Expected coverage at this commitment.
    :vartype coverage_percentage: float
    :ivar commitment_amount: The commitment amount for the benefit.
    :vartype commitment_amount: float
    :ivar average_utilization_percentage: Estimated average utilization percentage at this
     commitment.
    :vartype average_utilization_percentage: float
    :ivar wastage_cost: Wastage cost at this commitment.
    :vartype wastage_cost: float
    """

    _validation = {
        "overage_cost": {"readonly": True},
        "benefit_cost": {"readonly": True},
        "total_cost": {"readonly": True},
        "savings_amount": {"readonly": True},
        "savings_percentage": {"readonly": True},
        "coverage_percentage": {"readonly": True},
        "commitment_amount": {"readonly": True},
        "average_utilization_percentage": {"readonly": True},
        "wastage_cost": {"readonly": True},
    }

    _attribute_map = {
        "overage_cost": {"key": "overageCost", "type": "float"},
        "benefit_cost": {"key": "benefitCost", "type": "float"},
        "total_cost": {"key": "totalCost", "type": "float"},
        "savings_amount": {"key": "savingsAmount", "type": "float"},
        "savings_percentage": {"key": "savingsPercentage", "type": "float"},
        "coverage_percentage": {"key": "coveragePercentage", "type": "float"},
        "commitment_amount": {"key": "commitmentAmount", "type": "float"},
        "average_utilization_percentage": {"key": "averageUtilizationPercentage", "type": "float"},
        "wastage_cost": {"key": "wastageCost", "type": "float"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.overage_cost = None
        self.benefit_cost = None
        self.total_cost = None
        self.savings_amount = None
        self.savings_percentage = None
        self.coverage_percentage = None
        self.commitment_amount = None
        self.average_utilization_percentage = None
        self.wastage_cost = None


class AllSavingsList(_serialization.Model):
    """Result of listing benefit recommendations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of benefit recommendations.
    :vartype value: list[~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails]
    :ivar next_link: The link (URL) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AllSavingsBenefitDetails]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class BenefitResource(Resource):
    """The benefit resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar kind: Reservation or SavingsPlan. Known values are: "IncludedQuantity", "Reservation",
     and "SavingsPlan".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, *, kind: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword kind: Reservation or SavingsPlan. Known values are: "IncludedQuantity", "Reservation",
         and "SavingsPlan".
        :paramtype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(**kwargs)
        self.kind = kind


class BenefitRecommendationModel(BenefitResource):
    """benefit plan recommendation details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar kind: Reservation or SavingsPlan. Known values are: "IncludedQuantity", "Reservation",
     and "SavingsPlan".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar properties: The properties of the benefit plan recommendation.
    :vartype properties: ~azure.mgmt.costmanagement.models.BenefitRecommendationProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "properties": {"key": "properties", "type": "BenefitRecommendationProperties"},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.BenefitKind"]] = None,
        properties: Optional["_models.BenefitRecommendationProperties"] = None,
        **kwargs
    ):
        """
        :keyword kind: Reservation or SavingsPlan. Known values are: "IncludedQuantity", "Reservation",
         and "SavingsPlan".
        :paramtype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
        :keyword properties: The properties of the benefit plan recommendation.
        :paramtype properties: ~azure.mgmt.costmanagement.models.BenefitRecommendationProperties
        """
        super().__init__(kind=kind, **kwargs)
        self.properties = properties


class BenefitRecommendationProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The properties of the benefit plan recommendation.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SharedScopeBenefitRecommendationProperties, SingleScopeBenefitRecommendationProperties

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar first_consumption_date: The first usage date used for looking back for computing the
     recommendation.
    :vartype first_consumption_date: ~datetime.datetime
    :ivar last_consumption_date: The last usage date used for looking back for computing the
     recommendation.
    :vartype last_consumption_date: ~datetime.datetime
    :ivar look_back_period: The number of days of usage used to look back for computing the
     recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
    :vartype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
    :ivar total_hours: The total hours for which the cost is covered. Its equal to number of
     records in a property 'properties/usage/charges'.
    :vartype total_hours: int
    :ivar usage: The additional details about the usage which are considered while computing
     benefit recommendations.
    :vartype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for Reservations and
     Compute_Savings_Plan for SavingsPlan.
    :vartype arm_sku_name: str
    :ivar term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
     "P3Y".
    :vartype term: str or ~azure.mgmt.costmanagement.models.Term
    :ivar commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
     monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
    :vartype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
    :ivar currency_code: An ISO 4217 currency code identifier for the costs and savings amounts.
    :vartype currency_code: str
    :ivar cost_without_benefit: The current cost without benefit corresponds to 'totalHours'
     property in a given look-back period.
    :vartype cost_without_benefit: float
    :ivar recommendation_details: The details of the proposed recommendation.
    :vartype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
    :ivar all_recommendation_details: The list of all benefit recommendations.
    :vartype all_recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsList
    :ivar scope: Scope of the benefit. For example, Single or Shared. Required. Known values are:
     "Single" and "Shared".
    :vartype scope: str or ~azure.mgmt.costmanagement.models.Scope
    """

    _validation = {
        "first_consumption_date": {"readonly": True},
        "last_consumption_date": {"readonly": True},
        "total_hours": {"readonly": True},
        "arm_sku_name": {"readonly": True},
        "currency_code": {"readonly": True},
        "cost_without_benefit": {"readonly": True},
        "all_recommendation_details": {"readonly": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "first_consumption_date": {"key": "firstConsumptionDate", "type": "iso-8601"},
        "last_consumption_date": {"key": "lastConsumptionDate", "type": "iso-8601"},
        "look_back_period": {"key": "lookBackPeriod", "type": "str"},
        "total_hours": {"key": "totalHours", "type": "int"},
        "usage": {"key": "usage", "type": "RecommendationUsageDetails"},
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "term": {"key": "term", "type": "str"},
        "commitment_granularity": {"key": "commitmentGranularity", "type": "str"},
        "currency_code": {"key": "currencyCode", "type": "str"},
        "cost_without_benefit": {"key": "costWithoutBenefit", "type": "float"},
        "recommendation_details": {"key": "recommendationDetails", "type": "AllSavingsBenefitDetails"},
        "all_recommendation_details": {"key": "allRecommendationDetails", "type": "AllSavingsList"},
        "scope": {"key": "scope", "type": "str"},
    }

    _subtype_map = {
        "scope": {
            "Shared": "SharedScopeBenefitRecommendationProperties",
            "Single": "SingleScopeBenefitRecommendationProperties",
        }
    }

    def __init__(
        self,
        *,
        look_back_period: Optional[Union[str, "_models.LookBackPeriod"]] = None,
        usage: Optional["_models.RecommendationUsageDetails"] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        commitment_granularity: Optional[Union[str, "_models.Grain"]] = None,
        recommendation_details: Optional["_models.AllSavingsBenefitDetails"] = None,
        **kwargs
    ):
        """
        :keyword look_back_period: The number of days of usage used to look back for computing the
         recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
        :paramtype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
        :keyword usage: The additional details about the usage which are considered while computing
         benefit recommendations.
        :paramtype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
        :keyword term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
         "P3Y".
        :paramtype term: str or ~azure.mgmt.costmanagement.models.Term
        :keyword commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
         monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
        :paramtype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
        :keyword recommendation_details: The details of the proposed recommendation.
        :paramtype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
        """
        super().__init__(**kwargs)
        self.first_consumption_date = None
        self.last_consumption_date = None
        self.look_back_period = look_back_period
        self.total_hours = None
        self.usage = usage
        self.arm_sku_name = None
        self.term = term
        self.commitment_granularity = commitment_granularity
        self.currency_code = None
        self.cost_without_benefit = None
        self.recommendation_details = recommendation_details
        self.all_recommendation_details = None
        self.scope = None  # type: Optional[str]


class BenefitRecommendationsListResult(_serialization.Model):
    """Result of listing benefit recommendations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of benefit recommendations.
    :vartype value: list[~azure.mgmt.costmanagement.models.BenefitRecommendationModel]
    :ivar next_link: The link (URL) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[BenefitRecommendationModel]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class BenefitUtilizationSummariesListResult(_serialization.Model):
    """Result of listing benefit utilization summaries.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of benefit utilization summaries.
    :vartype value: list[~azure.mgmt.costmanagement.models.BenefitUtilizationSummary]
    :ivar next_link: The link (URL) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[BenefitUtilizationSummary]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class BenefitUtilizationSummary(Resource):
    """Benefit utilization summary resource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    IncludedQuantityUtilizationSummary, SavingsPlanUtilizationSummary

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar kind: Reservation, SavingsPlan or IncludedQuantity. Required. Known values are:
     "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {
            "IncludedQuantity": "IncludedQuantityUtilizationSummary",
            "SavingsPlan": "SavingsPlanUtilizationSummary",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class BenefitUtilizationSummaryProperties(_serialization.Model):
    """The properties of a benefit utilization summary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for reservations and
     ComputeSavingsPlan for savings plan.
    :vartype arm_sku_name: str
    :ivar benefit_id: The benefit ID is the identifier of a benefit within a benefit order.
    :vartype benefit_id: str
    :ivar benefit_order_id: The benefit order ID is the identifier for a benefit purchase. Each
     benefit order ID represents a single purchase transaction. For example: A reservation order
     contains reservations. The reservation order specifies the VM size and region for the
     reservations.
    :vartype benefit_order_id: str
    :ivar benefit_type: The benefit type. For example, reservation or savings plan. Known values
     are: "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar usage_date: Date corresponding to the utilization record. If the grain of data is
     monthly, it will be first day of month.
    :vartype usage_date: ~datetime.datetime
    """

    _validation = {
        "arm_sku_name": {"readonly": True},
        "benefit_id": {"readonly": True},
        "benefit_order_id": {"readonly": True},
        "usage_date": {"readonly": True},
    }

    _attribute_map = {
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "benefit_id": {"key": "benefitId", "type": "str"},
        "benefit_order_id": {"key": "benefitOrderId", "type": "str"},
        "benefit_type": {"key": "benefitType", "type": "str"},
        "usage_date": {"key": "usageDate", "type": "iso-8601"},
    }

    def __init__(self, *, benefit_type: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword benefit_type: The benefit type. For example, reservation or savings plan. Known values
         are: "IncludedQuantity", "Reservation", and "SavingsPlan".
        :paramtype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(**kwargs)
        self.arm_sku_name = None
        self.benefit_id = None
        self.benefit_order_id = None
        self.benefit_type = benefit_type
        self.usage_date = None


class BlobInfo(_serialization.Model):
    """The blob information generated by this operation.

    :ivar blob_link: Link to the blob to download file.
    :vartype blob_link: str
    :ivar byte_count: Bytes in the blob.
    :vartype byte_count: int
    """

    _attribute_map = {
        "blob_link": {"key": "blobLink", "type": "str"},
        "byte_count": {"key": "byteCount", "type": "int"},
    }

    def __init__(self, *, blob_link: Optional[str] = None, byte_count: Optional[int] = None, **kwargs):
        """
        :keyword blob_link: Link to the blob to download file.
        :paramtype blob_link: str
        :keyword byte_count: Bytes in the blob.
        :paramtype byte_count: int
        """
        super().__init__(**kwargs)
        self.blob_link = blob_link
        self.byte_count = byte_count


class CheckNameAvailabilityRequest(_serialization.Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, type: Optional[str] = None, **kwargs):
        """
        :keyword name: The name of the resource for which availability needs to be checked.
        :paramtype name: str
        :keyword type: The resource type.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResponse(_serialization.Model):
    """The check availability result.

    :ivar name_available: Indicates if the resource name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the given name is not available. Known values are: "Invalid" and
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.costmanagement.models.CheckNameAvailabilityReason
    :ivar message: Detailed reason why the given name is available.
    :vartype message: str
    """

    _attribute_map = {
        "name_available": {"key": "nameAvailable", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name_available: Indicates if the resource name is available.
        :paramtype name_available: bool
        :keyword reason: The reason why the given name is not available. Known values are: "Invalid"
         and "AlreadyExists".
        :paramtype reason: str or ~azure.mgmt.costmanagement.models.CheckNameAvailabilityReason
        :keyword message: Detailed reason why the given name is available.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.name_available = name_available
        self.reason = reason
        self.message = message


class CostDetailsOperationResults(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The result of the long running operation for cost details Api.

    :ivar id: The id of the long running operation.
    :vartype id: str
    :ivar name: The name of the long running operation.
    :vartype name: str
    :ivar type: The type of the long running operation.
    :vartype type: str
    :ivar status: The status of the cost details operation. Known values are: "Completed",
     "NoDataFound", and "Failed".
    :vartype status: str or ~azure.mgmt.costmanagement.models.CostDetailsStatusType
    :ivar valid_till: The time at which report URL becomes invalid/expires in UTC e.g.
     2020-12-08T05:55:59.4394737Z.
    :vartype valid_till: ~datetime.datetime
    :ivar error: The details of the error.
    :vartype error: ~azure.mgmt.costmanagement.models.ErrorDetails
    :ivar manifest_version: The Manifest version.
    :vartype manifest_version: str
    :ivar data_format: The data format of the report. "Csv"
    :vartype data_format: str or ~azure.mgmt.costmanagement.models.CostDetailsDataFormat
    :ivar byte_count: The total number of bytes in all blobs.
    :vartype byte_count: int
    :ivar blob_count: The total number of blobs.
    :vartype blob_count: int
    :ivar compress_data: Is the data in compressed format.
    :vartype compress_data: bool
    :ivar blobs: List of blob information generated by this operation.
    :vartype blobs: list[~azure.mgmt.costmanagement.models.BlobInfo]
    :ivar request_scope: The request scope of the request.
    :vartype request_scope: str
    :ivar request_body: The request payload body provided in Cost Details call.
    :vartype request_body:
     ~azure.mgmt.costmanagement.models.GenerateCostDetailsReportRequestDefinition
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "valid_till": {"key": "validTill", "type": "iso-8601"},
        "error": {"key": "error", "type": "ErrorDetails"},
        "manifest_version": {"key": "manifest.manifestVersion", "type": "str"},
        "data_format": {"key": "manifest.dataFormat", "type": "str"},
        "byte_count": {"key": "manifest.byteCount", "type": "int"},
        "blob_count": {"key": "manifest.blobCount", "type": "int"},
        "compress_data": {"key": "manifest.compressData", "type": "bool"},
        "blobs": {"key": "manifest.blobs", "type": "[BlobInfo]"},
        "request_scope": {"key": "manifest.requestContext.requestScope", "type": "str"},
        "request_body": {
            "key": "manifest.requestContext.requestBody",
            "type": "GenerateCostDetailsReportRequestDefinition",
        },
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        type: Optional[str] = None,
        status: Optional[Union[str, "_models.CostDetailsStatusType"]] = None,
        valid_till: Optional[datetime.datetime] = None,
        error: Optional["_models.ErrorDetails"] = None,
        manifest_version: Optional[str] = None,
        data_format: Optional[Union[str, "_models.CostDetailsDataFormat"]] = None,
        byte_count: Optional[int] = None,
        blob_count: Optional[int] = None,
        compress_data: Optional[bool] = None,
        blobs: Optional[List["_models.BlobInfo"]] = None,
        request_scope: Optional[str] = None,
        request_body: Optional["_models.GenerateCostDetailsReportRequestDefinition"] = None,
        **kwargs
    ):
        """
        :keyword id: The id of the long running operation.
        :paramtype id: str
        :keyword name: The name of the long running operation.
        :paramtype name: str
        :keyword type: The type of the long running operation.
        :paramtype type: str
        :keyword status: The status of the cost details operation. Known values are: "Completed",
         "NoDataFound", and "Failed".
        :paramtype status: str or ~azure.mgmt.costmanagement.models.CostDetailsStatusType
        :keyword valid_till: The time at which report URL becomes invalid/expires in UTC e.g.
         2020-12-08T05:55:59.4394737Z.
        :paramtype valid_till: ~datetime.datetime
        :keyword error: The details of the error.
        :paramtype error: ~azure.mgmt.costmanagement.models.ErrorDetails
        :keyword manifest_version: The Manifest version.
        :paramtype manifest_version: str
        :keyword data_format: The data format of the report. "Csv"
        :paramtype data_format: str or ~azure.mgmt.costmanagement.models.CostDetailsDataFormat
        :keyword byte_count: The total number of bytes in all blobs.
        :paramtype byte_count: int
        :keyword blob_count: The total number of blobs.
        :paramtype blob_count: int
        :keyword compress_data: Is the data in compressed format.
        :paramtype compress_data: bool
        :keyword blobs: List of blob information generated by this operation.
        :paramtype blobs: list[~azure.mgmt.costmanagement.models.BlobInfo]
        :keyword request_scope: The request scope of the request.
        :paramtype request_scope: str
        :keyword request_body: The request payload body provided in Cost Details call.
        :paramtype request_body:
         ~azure.mgmt.costmanagement.models.GenerateCostDetailsReportRequestDefinition
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.status = status
        self.valid_till = valid_till
        self.error = error
        self.manifest_version = manifest_version
        self.data_format = data_format
        self.byte_count = byte_count
        self.blob_count = blob_count
        self.compress_data = compress_data
        self.blobs = blobs
        self.request_scope = request_scope
        self.request_body = request_body


class CostDetailsTimePeriod(_serialization.Model):
    """The start and end date for pulling data for the cost detailed report. API only allows data to be pulled for 1 month or less and no older than 13 months.

    All required parameters must be populated in order to send to Azure.

    :ivar start: The start date to pull data from. example format 2020-03-15. Required.
    :vartype start: str
    :ivar end: The end date to pull data to. example format 2020-03-15. Required.
    :vartype end: str
    """

    _validation = {
        "start": {"required": True},
        "end": {"required": True},
    }

    _attribute_map = {
        "start": {"key": "start", "type": "str"},
        "end": {"key": "end", "type": "str"},
    }

    def __init__(self, *, start: str, end: str, **kwargs):
        """
        :keyword start: The start date to pull data from. example format 2020-03-15. Required.
        :paramtype start: str
        :keyword end: The end date to pull data to. example format 2020-03-15. Required.
        :paramtype end: str
        """
        super().__init__(**kwargs)
        self.start = start
        self.end = end


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.costmanagement.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.costmanagement.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.costmanagement.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs):
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.costmanagement.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class CostManagementOperation(Operation):
    """A Cost management REST API operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.costmanagement.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.costmanagement.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.costmanagement.models.ActionType
    :ivar id: Operation id: {provider}/{resource}/{operation}.
    :vartype id: str
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
        "id": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs):
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.costmanagement.models.OperationDisplay
        """
        super().__init__(display=display, **kwargs)
        self.id = None


class ErrorDetails(_serialization.Model):
    """The details of the error.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message indicating why the operation failed.
    :vartype message: str
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None


class ErrorResponse(_serialization.Model):
    """Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.

    Some Error responses:


    *
      429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "x-ms-ratelimit-microsoft.consumption-retry-after" header.

    *
      503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.

        :ivar error: The details of the error.
        :vartype error: ~azure.mgmt.costmanagement.models.ErrorDetails
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetails"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetails"] = None, **kwargs):
        """
        :keyword error: The details of the error.
        :paramtype error: ~azure.mgmt.costmanagement.models.ErrorDetails
        """
        super().__init__(**kwargs)
        self.error = error


class FileDestination(_serialization.Model):
    """Destination of the view data. This is optional. Currently only CSV format is supported.

    :ivar file_formats: Destination of the view data. Currently only CSV format is supported.
    :vartype file_formats: list[str or ~azure.mgmt.costmanagement.models.FileFormat]
    """

    _attribute_map = {
        "file_formats": {"key": "fileFormats", "type": "[str]"},
    }

    def __init__(self, *, file_formats: Optional[List[Union[str, "_models.FileFormat"]]] = None, **kwargs):
        """
        :keyword file_formats: Destination of the view data. Currently only CSV format is supported.
        :paramtype file_formats: list[str or ~azure.mgmt.costmanagement.models.FileFormat]
        """
        super().__init__(**kwargs)
        self.file_formats = file_formats


class GenerateCostDetailsReportErrorResponse(_serialization.Model):
    """Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.

    Some Error responses:


    *
      400 Bad Request - Invalid Request Payload. Request payload provided is not in a json format or had an invalid member not accepted in the request payload.

    *
      400 Bad Request - Invalid request payload:  can only have either timePeriod or invoiceId or billingPeriod. API only allows data to be pulled for either timePeriod or invoiceId or billingPeriod. Customer should provide only one of these parameters.

    *
      400 Bad Request - Start date must be after . API only allows data to be pulled no older than 13 months from now.

    *
      400 Bad Request - The maximum allowed date range is 1 months. API only allows data to be pulled for 1 month or less.

    *
      429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "retry-after" header.

    *
      503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.

        :ivar error: The details of the error.
        :vartype error: ~azure.mgmt.costmanagement.models.ErrorDetails
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetails"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetails"] = None, **kwargs):
        """
        :keyword error: The details of the error.
        :paramtype error: ~azure.mgmt.costmanagement.models.ErrorDetails
        """
        super().__init__(**kwargs)
        self.error = error


class GenerateCostDetailsReportRequestDefinition(_serialization.Model):
    """The definition of a cost detailed report.

    :ivar metric: The type of the detailed report. By default ActualCost is provided. Known values
     are: "ActualCost" and "AmortizedCost".
    :vartype metric: str or ~azure.mgmt.costmanagement.models.CostDetailsMetricType
    :ivar time_period: The specific date range of cost details requested for the report. This
     parameter cannot be used alongside either the invoiceId or billingPeriod parameters. If a
     timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API
     will return the current month's cost. API only allows data to be pulled for 1 month or less and
     no older than 13 months. If no timePeriod or billingPeriod or invoiceId is provided the API
     defaults to the open month time period.
    :vartype time_period: ~azure.mgmt.costmanagement.models.CostDetailsTimePeriod
    :ivar billing_period: This parameter can be used only by Enterprise Agreement customers. Use
     the YearMonth(e.g. 202008) format. This parameter cannot be used alongside either the invoiceId
     or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided
     in the request body the API will return the current month's cost.
    :vartype billing_period: str
    :ivar invoice_id: This parameter can only be used by Microsoft Customer Agreement customers.
     Additionally, it can only be used at the Billing Profile or Customer scope. This parameter
     cannot be used alongside either the billingPeriod or timePeriod parameters. If a timePeriod,
     invoiceId or billingPeriod parameter is not provided in the request body the API will return
     the current month's cost.
    :vartype invoice_id: str
    """

    _attribute_map = {
        "metric": {"key": "metric", "type": "str"},
        "time_period": {"key": "timePeriod", "type": "CostDetailsTimePeriod"},
        "billing_period": {"key": "billingPeriod", "type": "str"},
        "invoice_id": {"key": "invoiceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        metric: Optional[Union[str, "_models.CostDetailsMetricType"]] = None,
        time_period: Optional["_models.CostDetailsTimePeriod"] = None,
        billing_period: Optional[str] = None,
        invoice_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword metric: The type of the detailed report. By default ActualCost is provided. Known
         values are: "ActualCost" and "AmortizedCost".
        :paramtype metric: str or ~azure.mgmt.costmanagement.models.CostDetailsMetricType
        :keyword time_period: The specific date range of cost details requested for the report. This
         parameter cannot be used alongside either the invoiceId or billingPeriod parameters. If a
         timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API
         will return the current month's cost. API only allows data to be pulled for 1 month or less and
         no older than 13 months. If no timePeriod or billingPeriod or invoiceId is provided the API
         defaults to the open month time period.
        :paramtype time_period: ~azure.mgmt.costmanagement.models.CostDetailsTimePeriod
        :keyword billing_period: This parameter can be used only by Enterprise Agreement customers. Use
         the YearMonth(e.g. 202008) format. This parameter cannot be used alongside either the invoiceId
         or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided
         in the request body the API will return the current month's cost.
        :paramtype billing_period: str
        :keyword invoice_id: This parameter can only be used by Microsoft Customer Agreement customers.
         Additionally, it can only be used at the Billing Profile or Customer scope. This parameter
         cannot be used alongside either the billingPeriod or timePeriod parameters. If a timePeriod,
         invoiceId or billingPeriod parameter is not provided in the request body the API will return
         the current month's cost.
        :paramtype invoice_id: str
        """
        super().__init__(**kwargs)
        self.metric = metric
        self.time_period = time_period
        self.billing_period = billing_period
        self.invoice_id = invoice_id


class IncludedQuantityUtilizationSummary(BenefitUtilizationSummary):
    """Included Quantity utilization summary resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar kind: Reservation, SavingsPlan or IncludedQuantity. Required. Known values are:
     "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for reservations and
     ComputeSavingsPlan for savings plan.
    :vartype arm_sku_name: str
    :ivar benefit_id: The benefit ID is the identifier of a benefit within a benefit order.
    :vartype benefit_id: str
    :ivar benefit_order_id: The benefit order ID is the identifier for a benefit purchase. Each
     benefit order ID represents a single purchase transaction. For example: A reservation order
     contains reservations. The reservation order specifies the VM size and region for the
     reservations.
    :vartype benefit_order_id: str
    :ivar benefit_type: The benefit type. For example, reservation or savings plan. Known values
     are: "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar usage_date: Date corresponding to the utilization record. If the grain of data is
     monthly, it will be first day of month.
    :vartype usage_date: ~datetime.datetime
    :ivar utilization_percentage: This is the utilized percentage for the benefit ID.
    :vartype utilization_percentage: float
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "arm_sku_name": {"readonly": True},
        "benefit_id": {"readonly": True},
        "benefit_order_id": {"readonly": True},
        "usage_date": {"readonly": True},
        "utilization_percentage": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "arm_sku_name": {"key": "properties.armSkuName", "type": "str"},
        "benefit_id": {"key": "properties.benefitId", "type": "str"},
        "benefit_order_id": {"key": "properties.benefitOrderId", "type": "str"},
        "benefit_type": {"key": "properties.benefitType", "type": "str"},
        "usage_date": {"key": "properties.usageDate", "type": "iso-8601"},
        "utilization_percentage": {"key": "properties.utilizationPercentage", "type": "float"},
    }

    def __init__(self, *, benefit_type: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword benefit_type: The benefit type. For example, reservation or savings plan. Known values
         are: "IncludedQuantity", "Reservation", and "SavingsPlan".
        :paramtype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(**kwargs)
        self.kind = "IncludedQuantity"  # type: str
        self.arm_sku_name = None
        self.benefit_id = None
        self.benefit_order_id = None
        self.benefit_type = benefit_type
        self.usage_date = None
        self.utilization_percentage = None


class IncludedQuantityUtilizationSummaryProperties(BenefitUtilizationSummaryProperties):
    """Included Quantity utilization summary properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for reservations and
     ComputeSavingsPlan for savings plan.
    :vartype arm_sku_name: str
    :ivar benefit_id: The benefit ID is the identifier of a benefit within a benefit order.
    :vartype benefit_id: str
    :ivar benefit_order_id: The benefit order ID is the identifier for a benefit purchase. Each
     benefit order ID represents a single purchase transaction. For example: A reservation order
     contains reservations. The reservation order specifies the VM size and region for the
     reservations.
    :vartype benefit_order_id: str
    :ivar benefit_type: The benefit type. For example, reservation or savings plan. Known values
     are: "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar usage_date: Date corresponding to the utilization record. If the grain of data is
     monthly, it will be first day of month.
    :vartype usage_date: ~datetime.datetime
    :ivar utilization_percentage: This is the utilized percentage for the benefit ID.
    :vartype utilization_percentage: float
    """

    _validation = {
        "arm_sku_name": {"readonly": True},
        "benefit_id": {"readonly": True},
        "benefit_order_id": {"readonly": True},
        "usage_date": {"readonly": True},
        "utilization_percentage": {"readonly": True},
    }

    _attribute_map = {
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "benefit_id": {"key": "benefitId", "type": "str"},
        "benefit_order_id": {"key": "benefitOrderId", "type": "str"},
        "benefit_type": {"key": "benefitType", "type": "str"},
        "usage_date": {"key": "usageDate", "type": "iso-8601"},
        "utilization_percentage": {"key": "utilizationPercentage", "type": "float"},
    }

    def __init__(self, *, benefit_type: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword benefit_type: The benefit type. For example, reservation or savings plan. Known values
         are: "IncludedQuantity", "Reservation", and "SavingsPlan".
        :paramtype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(benefit_type=benefit_type, **kwargs)
        self.utilization_percentage = None


class NotificationProperties(_serialization.Model):
    """The properties of the scheduled action notification.

    All required parameters must be populated in order to send to Azure.

    :ivar to: Array of email addresses. Required.
    :vartype to: list[str]
    :ivar language: Locale of the email.
    :vartype language: str
    :ivar message: Optional message to be added in the email. Length is limited to 250 characters.
    :vartype message: str
    :ivar regional_format: Regional format used for formatting date/time and currency values in the
     email.
    :vartype regional_format: str
    :ivar subject: Subject of the email. Length is limited to 70 characters. Required.
    :vartype subject: str
    """

    _validation = {
        "to": {"required": True, "max_items": 20, "min_items": 1},
        "subject": {"required": True},
    }

    _attribute_map = {
        "to": {"key": "to", "type": "[str]"},
        "language": {"key": "language", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "regional_format": {"key": "regionalFormat", "type": "str"},
        "subject": {"key": "subject", "type": "str"},
    }

    def __init__(
        self,
        *,
        to: List[str],
        subject: str,
        language: Optional[str] = None,
        message: Optional[str] = None,
        regional_format: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword to: Array of email addresses. Required.
        :paramtype to: list[str]
        :keyword language: Locale of the email.
        :paramtype language: str
        :keyword message: Optional message to be added in the email. Length is limited to 250
         characters.
        :paramtype message: str
        :keyword regional_format: Regional format used for formatting date/time and currency values in
         the email.
        :paramtype regional_format: str
        :keyword subject: Subject of the email. Length is limited to 70 characters. Required.
        :paramtype subject: str
        """
        super().__init__(**kwargs)
        self.to = to
        self.language = language
        self.message = message
        self.regional_format = regional_format
        self.subject = subject


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """Result of listing cost management operations. It contains a list of operations and a URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of cost management operations supported by the Microsoft.CostManagement
     resource provider.
    :vartype value: list[~azure.mgmt.costmanagement.models.CostManagementOperation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[CostManagementOperation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)


class RecommendationUsageDetails(_serialization.Model):
    """The additional details about the usage which are considered while computing benefit recommendations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar usage_grain: The grain of the usage. For example, hourly or monthly etc. Known values
     are: "Hourly", "Daily", and "Monthly".
    :vartype usage_grain: str or ~azure.mgmt.costmanagement.models.Grain
    :ivar charges: current cost without benefit i.e. charges at the specified grain.
    :vartype charges: list[float]
    """

    _validation = {
        "charges": {"readonly": True},
    }

    _attribute_map = {
        "usage_grain": {"key": "usageGrain", "type": "str"},
        "charges": {"key": "charges", "type": "[float]"},
    }

    def __init__(self, *, usage_grain: Optional[Union[str, "_models.Grain"]] = None, **kwargs):
        """
        :keyword usage_grain: The grain of the usage. For example, hourly or monthly etc. Known values
         are: "Hourly", "Daily", and "Monthly".
        :paramtype usage_grain: str or ~azure.mgmt.costmanagement.models.Grain
        """
        super().__init__(**kwargs)
        self.usage_grain = usage_grain
        self.charges = None


class SavingsPlanUtilizationSummary(BenefitUtilizationSummary):  # pylint: disable=too-many-instance-attributes
    """Savings plan utilization summary resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar kind: Reservation, SavingsPlan or IncludedQuantity. Required. Known values are:
     "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for reservations and
     ComputeSavingsPlan for savings plan.
    :vartype arm_sku_name: str
    :ivar benefit_id: The benefit ID is the identifier of a benefit within a benefit order.
    :vartype benefit_id: str
    :ivar benefit_order_id: The benefit order ID is the identifier for a benefit purchase. Each
     benefit order ID represents a single purchase transaction. For example: A reservation order
     contains reservations. The reservation order specifies the VM size and region for the
     reservations.
    :vartype benefit_order_id: str
    :ivar benefit_type: The benefit type. For example, reservation or savings plan. Known values
     are: "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar usage_date: Date corresponding to the utilization record. If the grain of data is
     monthly, it will be first day of month.
    :vartype usage_date: ~datetime.datetime
    :ivar avg_utilization_percentage: This is the average utilization percentage for the benefit
     ID.
    :vartype avg_utilization_percentage: float
    :ivar min_utilization_percentage: This is the minimum hourly utilization in the usage time (day
     or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4, utilization
     was 10%, this field will return 10% for that day.
    :vartype min_utilization_percentage: float
    :ivar max_utilization_percentage: This is the maximum hourly utilization in the usage time (day
     or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4, utilization
     was 100%, this field will return 100% for that day.
    :vartype max_utilization_percentage: float
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "kind": {"required": True},
        "arm_sku_name": {"readonly": True},
        "benefit_id": {"readonly": True},
        "benefit_order_id": {"readonly": True},
        "usage_date": {"readonly": True},
        "avg_utilization_percentage": {"readonly": True},
        "min_utilization_percentage": {"readonly": True},
        "max_utilization_percentage": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "arm_sku_name": {"key": "properties.armSkuName", "type": "str"},
        "benefit_id": {"key": "properties.benefitId", "type": "str"},
        "benefit_order_id": {"key": "properties.benefitOrderId", "type": "str"},
        "benefit_type": {"key": "properties.benefitType", "type": "str"},
        "usage_date": {"key": "properties.usageDate", "type": "iso-8601"},
        "avg_utilization_percentage": {"key": "properties.avgUtilizationPercentage", "type": "float"},
        "min_utilization_percentage": {"key": "properties.minUtilizationPercentage", "type": "float"},
        "max_utilization_percentage": {"key": "properties.maxUtilizationPercentage", "type": "float"},
    }

    def __init__(self, *, benefit_type: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword benefit_type: The benefit type. For example, reservation or savings plan. Known values
         are: "IncludedQuantity", "Reservation", and "SavingsPlan".
        :paramtype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(**kwargs)
        self.kind = "SavingsPlan"  # type: str
        self.arm_sku_name = None
        self.benefit_id = None
        self.benefit_order_id = None
        self.benefit_type = benefit_type
        self.usage_date = None
        self.avg_utilization_percentage = None
        self.min_utilization_percentage = None
        self.max_utilization_percentage = None


class SavingsPlanUtilizationSummaryProperties(BenefitUtilizationSummaryProperties):
    """Savings plan utilization summary properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for reservations and
     ComputeSavingsPlan for savings plan.
    :vartype arm_sku_name: str
    :ivar benefit_id: The benefit ID is the identifier of a benefit within a benefit order.
    :vartype benefit_id: str
    :ivar benefit_order_id: The benefit order ID is the identifier for a benefit purchase. Each
     benefit order ID represents a single purchase transaction. For example: A reservation order
     contains reservations. The reservation order specifies the VM size and region for the
     reservations.
    :vartype benefit_order_id: str
    :ivar benefit_type: The benefit type. For example, reservation or savings plan. Known values
     are: "IncludedQuantity", "Reservation", and "SavingsPlan".
    :vartype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
    :ivar usage_date: Date corresponding to the utilization record. If the grain of data is
     monthly, it will be first day of month.
    :vartype usage_date: ~datetime.datetime
    :ivar avg_utilization_percentage: This is the average utilization percentage for the benefit
     ID.
    :vartype avg_utilization_percentage: float
    :ivar min_utilization_percentage: This is the minimum hourly utilization in the usage time (day
     or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4, utilization
     was 10%, this field will return 10% for that day.
    :vartype min_utilization_percentage: float
    :ivar max_utilization_percentage: This is the maximum hourly utilization in the usage time (day
     or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4, utilization
     was 100%, this field will return 100% for that day.
    :vartype max_utilization_percentage: float
    """

    _validation = {
        "arm_sku_name": {"readonly": True},
        "benefit_id": {"readonly": True},
        "benefit_order_id": {"readonly": True},
        "usage_date": {"readonly": True},
        "avg_utilization_percentage": {"readonly": True},
        "min_utilization_percentage": {"readonly": True},
        "max_utilization_percentage": {"readonly": True},
    }

    _attribute_map = {
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "benefit_id": {"key": "benefitId", "type": "str"},
        "benefit_order_id": {"key": "benefitOrderId", "type": "str"},
        "benefit_type": {"key": "benefitType", "type": "str"},
        "usage_date": {"key": "usageDate", "type": "iso-8601"},
        "avg_utilization_percentage": {"key": "avgUtilizationPercentage", "type": "float"},
        "min_utilization_percentage": {"key": "minUtilizationPercentage", "type": "float"},
        "max_utilization_percentage": {"key": "maxUtilizationPercentage", "type": "float"},
    }

    def __init__(self, *, benefit_type: Optional[Union[str, "_models.BenefitKind"]] = None, **kwargs):
        """
        :keyword benefit_type: The benefit type. For example, reservation or savings plan. Known values
         are: "IncludedQuantity", "Reservation", and "SavingsPlan".
        :paramtype benefit_type: str or ~azure.mgmt.costmanagement.models.BenefitKind
        """
        super().__init__(benefit_type=benefit_type, **kwargs)
        self.avg_utilization_percentage = None
        self.min_utilization_percentage = None
        self.max_utilization_percentage = None


class ScheduledActionProxyResource(ProxyResource):
    """The Resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar e_tag: Resource Etag.
    :vartype e_tag: str
    :ivar kind: Kind of the scheduled action. Known values are: "Email" and "InsightAlert".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.ScheduledActionKind
    :ivar system_data: Kind of the scheduled action.
    :vartype system_data: ~azure.mgmt.costmanagement.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "e_tag": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "e_tag": {"key": "eTag", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, *, kind: Optional[Union[str, "_models.ScheduledActionKind"]] = None, **kwargs):
        """
        :keyword kind: Kind of the scheduled action. Known values are: "Email" and "InsightAlert".
        :paramtype kind: str or ~azure.mgmt.costmanagement.models.ScheduledActionKind
        """
        super().__init__(**kwargs)
        self.e_tag = None
        self.kind = kind
        self.system_data = None


class ScheduledAction(ScheduledActionProxyResource):  # pylint: disable=too-many-instance-attributes
    """Scheduled action definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar e_tag: Resource Etag.
    :vartype e_tag: str
    :ivar kind: Kind of the scheduled action. Known values are: "Email" and "InsightAlert".
    :vartype kind: str or ~azure.mgmt.costmanagement.models.ScheduledActionKind
    :ivar system_data: Kind of the scheduled action.
    :vartype system_data: ~azure.mgmt.costmanagement.models.SystemData
    :ivar display_name: Scheduled action name.
    :vartype display_name: str
    :ivar file_destination: Destination format of the view data. This is optional.
    :vartype file_destination: ~azure.mgmt.costmanagement.models.FileDestination
    :ivar notification: Notification properties based on scheduled action kind.
    :vartype notification: ~azure.mgmt.costmanagement.models.NotificationProperties
    :ivar notification_email: Email address of the point of contact that should get the unsubscribe
     requests and notification emails.
    :vartype notification_email: str
    :ivar schedule: Schedule of the scheduled action.
    :vartype schedule: ~azure.mgmt.costmanagement.models.ScheduleProperties
    :ivar scope: Cost Management scope like 'subscriptions/{subscriptionId}' for subscription
     scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup
     scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account
     scope,
     'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
     Department scope,
     'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
     for EnrollmentAccount scope,
     'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
     for BillingProfile scope,
     'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
     for InvoiceSection scope,
     '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
     ExternalBillingAccount scope, and
     '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
     ExternalSubscription scope.
    :vartype scope: str
    :ivar status: Status of the scheduled action. Known values are: "Disabled", "Enabled", and
     "Expired".
    :vartype status: str or ~azure.mgmt.costmanagement.models.ScheduledActionStatus
    :ivar view_id: Cost analysis viewId used for scheduled action. For example,
     '/providers/Microsoft.CostManagement/views/swaggerExample'.
    :vartype view_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "e_tag": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "e_tag": {"key": "eTag", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "file_destination": {"key": "properties.fileDestination", "type": "FileDestination"},
        "notification": {"key": "properties.notification", "type": "NotificationProperties"},
        "notification_email": {"key": "properties.notificationEmail", "type": "str"},
        "schedule": {"key": "properties.schedule", "type": "ScheduleProperties"},
        "scope": {"key": "properties.scope", "type": "str"},
        "status": {"key": "properties.status", "type": "str"},
        "view_id": {"key": "properties.viewId", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.ScheduledActionKind"]] = None,
        display_name: Optional[str] = None,
        file_destination: Optional["_models.FileDestination"] = None,
        notification: Optional["_models.NotificationProperties"] = None,
        notification_email: Optional[str] = None,
        schedule: Optional["_models.ScheduleProperties"] = None,
        scope: Optional[str] = None,
        status: Optional[Union[str, "_models.ScheduledActionStatus"]] = None,
        view_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword kind: Kind of the scheduled action. Known values are: "Email" and "InsightAlert".
        :paramtype kind: str or ~azure.mgmt.costmanagement.models.ScheduledActionKind
        :keyword display_name: Scheduled action name.
        :paramtype display_name: str
        :keyword file_destination: Destination format of the view data. This is optional.
        :paramtype file_destination: ~azure.mgmt.costmanagement.models.FileDestination
        :keyword notification: Notification properties based on scheduled action kind.
        :paramtype notification: ~azure.mgmt.costmanagement.models.NotificationProperties
        :keyword notification_email: Email address of the point of contact that should get the
         unsubscribe requests and notification emails.
        :paramtype notification_email: str
        :keyword schedule: Schedule of the scheduled action.
        :paramtype schedule: ~azure.mgmt.costmanagement.models.ScheduleProperties
        :keyword scope: Cost Management scope like 'subscriptions/{subscriptionId}' for subscription
         scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup
         scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account
         scope,
         'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
         Department scope,
         'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
         for EnrollmentAccount scope,
         'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
         for BillingProfile scope,
         'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
         for InvoiceSection scope,
         '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
         ExternalBillingAccount scope, and
         '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
         ExternalSubscription scope.
        :paramtype scope: str
        :keyword status: Status of the scheduled action. Known values are: "Disabled", "Enabled", and
         "Expired".
        :paramtype status: str or ~azure.mgmt.costmanagement.models.ScheduledActionStatus
        :keyword view_id: Cost analysis viewId used for scheduled action. For example,
         '/providers/Microsoft.CostManagement/views/swaggerExample'.
        :paramtype view_id: str
        """
        super().__init__(kind=kind, **kwargs)
        self.display_name = display_name
        self.file_destination = file_destination
        self.notification = notification
        self.notification_email = notification_email
        self.schedule = schedule
        self.scope = scope
        self.status = status
        self.view_id = view_id


class ScheduledActionListResult(_serialization.Model):
    """Scheduled actions list result. It contains a list of scheduled actions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of scheduled actions.
    :vartype value: list[~azure.mgmt.costmanagement.models.ScheduledAction]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ScheduledAction]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ScheduleProperties(_serialization.Model):
    """The properties of the schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar frequency: Frequency of the schedule. Required. Known values are: "Daily", "Weekly", and
     "Monthly".
    :vartype frequency: str or ~azure.mgmt.costmanagement.models.ScheduleFrequency
    :ivar hour_of_day: UTC time at which cost analysis data will be emailed.
    :vartype hour_of_day: int
    :ivar days_of_week: Day names in english on which cost analysis data will be emailed. This
     property is applicable when frequency is Weekly or Monthly.
    :vartype days_of_week: list[str or ~azure.mgmt.costmanagement.models.DaysOfWeek]
    :ivar weeks_of_month: Weeks in which cost analysis data will be emailed. This property is
     applicable when frequency is Monthly and used in combination with daysOfWeek.
    :vartype weeks_of_month: list[str or ~azure.mgmt.costmanagement.models.WeeksOfMonth]
    :ivar day_of_month: UTC day on which cost analysis data will be emailed. Must be between 1 and
     31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or
     daysOfWeek.
    :vartype day_of_month: int
    :ivar start_date: The start date and time of the scheduled action (UTC). Required.
    :vartype start_date: ~datetime.datetime
    :ivar end_date: The end date and time of the scheduled action (UTC). Required.
    :vartype end_date: ~datetime.datetime
    """

    _validation = {
        "frequency": {"required": True},
        "start_date": {"required": True},
        "end_date": {"required": True},
    }

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
        "hour_of_day": {"key": "hourOfDay", "type": "int"},
        "days_of_week": {"key": "daysOfWeek", "type": "[str]"},
        "weeks_of_month": {"key": "weeksOfMonth", "type": "[str]"},
        "day_of_month": {"key": "dayOfMonth", "type": "int"},
        "start_date": {"key": "startDate", "type": "iso-8601"},
        "end_date": {"key": "endDate", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        frequency: Union[str, "_models.ScheduleFrequency"],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        hour_of_day: Optional[int] = None,
        days_of_week: Optional[List[Union[str, "_models.DaysOfWeek"]]] = None,
        weeks_of_month: Optional[List[Union[str, "_models.WeeksOfMonth"]]] = None,
        day_of_month: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword frequency: Frequency of the schedule. Required. Known values are: "Daily", "Weekly",
         and "Monthly".
        :paramtype frequency: str or ~azure.mgmt.costmanagement.models.ScheduleFrequency
        :keyword hour_of_day: UTC time at which cost analysis data will be emailed.
        :paramtype hour_of_day: int
        :keyword days_of_week: Day names in english on which cost analysis data will be emailed. This
         property is applicable when frequency is Weekly or Monthly.
        :paramtype days_of_week: list[str or ~azure.mgmt.costmanagement.models.DaysOfWeek]
        :keyword weeks_of_month: Weeks in which cost analysis data will be emailed. This property is
         applicable when frequency is Monthly and used in combination with daysOfWeek.
        :paramtype weeks_of_month: list[str or ~azure.mgmt.costmanagement.models.WeeksOfMonth]
        :keyword day_of_month: UTC day on which cost analysis data will be emailed. Must be between 1
         and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or
         daysOfWeek.
        :paramtype day_of_month: int
        :keyword start_date: The start date and time of the scheduled action (UTC). Required.
        :paramtype start_date: ~datetime.datetime
        :keyword end_date: The end date and time of the scheduled action (UTC). Required.
        :paramtype end_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.frequency = frequency
        self.hour_of_day = hour_of_day
        self.days_of_week = days_of_week
        self.weeks_of_month = weeks_of_month
        self.day_of_month = day_of_month
        self.start_date = start_date
        self.end_date = end_date


class SharedScopeBenefitRecommendationProperties(
    BenefitRecommendationProperties
):  # pylint: disable=too-many-instance-attributes
    """The properties of the benefit plan recommendation when scope is 'Shared'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar first_consumption_date: The first usage date used for looking back for computing the
     recommendation.
    :vartype first_consumption_date: ~datetime.datetime
    :ivar last_consumption_date: The last usage date used for looking back for computing the
     recommendation.
    :vartype last_consumption_date: ~datetime.datetime
    :ivar look_back_period: The number of days of usage used to look back for computing the
     recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
    :vartype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
    :ivar total_hours: The total hours for which the cost is covered. Its equal to number of
     records in a property 'properties/usage/charges'.
    :vartype total_hours: int
    :ivar usage: The additional details about the usage which are considered while computing
     benefit recommendations.
    :vartype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for Reservations and
     Compute_Savings_Plan for SavingsPlan.
    :vartype arm_sku_name: str
    :ivar term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
     "P3Y".
    :vartype term: str or ~azure.mgmt.costmanagement.models.Term
    :ivar commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
     monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
    :vartype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
    :ivar currency_code: An ISO 4217 currency code identifier for the costs and savings amounts.
    :vartype currency_code: str
    :ivar cost_without_benefit: The current cost without benefit corresponds to 'totalHours'
     property in a given look-back period.
    :vartype cost_without_benefit: float
    :ivar recommendation_details: The details of the proposed recommendation.
    :vartype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
    :ivar all_recommendation_details: The list of all benefit recommendations.
    :vartype all_recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsList
    :ivar scope: Scope of the benefit. For example, Single or Shared. Required. Known values are:
     "Single" and "Shared".
    :vartype scope: str or ~azure.mgmt.costmanagement.models.Scope
    """

    _validation = {
        "first_consumption_date": {"readonly": True},
        "last_consumption_date": {"readonly": True},
        "total_hours": {"readonly": True},
        "arm_sku_name": {"readonly": True},
        "currency_code": {"readonly": True},
        "cost_without_benefit": {"readonly": True},
        "all_recommendation_details": {"readonly": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "first_consumption_date": {"key": "firstConsumptionDate", "type": "iso-8601"},
        "last_consumption_date": {"key": "lastConsumptionDate", "type": "iso-8601"},
        "look_back_period": {"key": "lookBackPeriod", "type": "str"},
        "total_hours": {"key": "totalHours", "type": "int"},
        "usage": {"key": "usage", "type": "RecommendationUsageDetails"},
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "term": {"key": "term", "type": "str"},
        "commitment_granularity": {"key": "commitmentGranularity", "type": "str"},
        "currency_code": {"key": "currencyCode", "type": "str"},
        "cost_without_benefit": {"key": "costWithoutBenefit", "type": "float"},
        "recommendation_details": {"key": "recommendationDetails", "type": "AllSavingsBenefitDetails"},
        "all_recommendation_details": {"key": "allRecommendationDetails", "type": "AllSavingsList"},
        "scope": {"key": "scope", "type": "str"},
    }

    def __init__(
        self,
        *,
        look_back_period: Optional[Union[str, "_models.LookBackPeriod"]] = None,
        usage: Optional["_models.RecommendationUsageDetails"] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        commitment_granularity: Optional[Union[str, "_models.Grain"]] = None,
        recommendation_details: Optional["_models.AllSavingsBenefitDetails"] = None,
        **kwargs
    ):
        """
        :keyword look_back_period: The number of days of usage used to look back for computing the
         recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
        :paramtype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
        :keyword usage: The additional details about the usage which are considered while computing
         benefit recommendations.
        :paramtype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
        :keyword term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
         "P3Y".
        :paramtype term: str or ~azure.mgmt.costmanagement.models.Term
        :keyword commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
         monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
        :paramtype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
        :keyword recommendation_details: The details of the proposed recommendation.
        :paramtype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
        """
        super().__init__(
            look_back_period=look_back_period,
            usage=usage,
            term=term,
            commitment_granularity=commitment_granularity,
            recommendation_details=recommendation_details,
            **kwargs
        )
        self.scope = "Shared"  # type: str


class SingleScopeBenefitRecommendationProperties(
    BenefitRecommendationProperties
):  # pylint: disable=too-many-instance-attributes
    """The properties of the benefit plan recommendation when scope is 'Single'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar first_consumption_date: The first usage date used for looking back for computing the
     recommendation.
    :vartype first_consumption_date: ~datetime.datetime
    :ivar last_consumption_date: The last usage date used for looking back for computing the
     recommendation.
    :vartype last_consumption_date: ~datetime.datetime
    :ivar look_back_period: The number of days of usage used to look back for computing the
     recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
    :vartype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
    :ivar total_hours: The total hours for which the cost is covered. Its equal to number of
     records in a property 'properties/usage/charges'.
    :vartype total_hours: int
    :ivar usage: The additional details about the usage which are considered while computing
     benefit recommendations.
    :vartype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
    :ivar arm_sku_name: ARM SKU name. For example, Standard_D1_V2 for Reservations and
     Compute_Savings_Plan for SavingsPlan.
    :vartype arm_sku_name: str
    :ivar term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
     "P3Y".
    :vartype term: str or ~azure.mgmt.costmanagement.models.Term
    :ivar commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
     monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
    :vartype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
    :ivar currency_code: An ISO 4217 currency code identifier for the costs and savings amounts.
    :vartype currency_code: str
    :ivar cost_without_benefit: The current cost without benefit corresponds to 'totalHours'
     property in a given look-back period.
    :vartype cost_without_benefit: float
    :ivar recommendation_details: The details of the proposed recommendation.
    :vartype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
    :ivar all_recommendation_details: The list of all benefit recommendations.
    :vartype all_recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsList
    :ivar scope: Scope of the benefit. For example, Single or Shared. Required. Known values are:
     "Single" and "Shared".
    :vartype scope: str or ~azure.mgmt.costmanagement.models.Scope
    :ivar subscription_id: The subscription ID that this single scope recommendation is for.
     Applicable only if recommendation is for 'Single' scope.
    :vartype subscription_id: str
    :ivar resource_group: The resource group that this single scope recommendation is for.
     Applicable only if recommendation is for 'Single' scope and 'ResourceGroup' request scope.
    :vartype resource_group: str
    """

    _validation = {
        "first_consumption_date": {"readonly": True},
        "last_consumption_date": {"readonly": True},
        "total_hours": {"readonly": True},
        "arm_sku_name": {"readonly": True},
        "currency_code": {"readonly": True},
        "cost_without_benefit": {"readonly": True},
        "all_recommendation_details": {"readonly": True},
        "scope": {"required": True},
        "subscription_id": {"readonly": True},
        "resource_group": {"readonly": True},
    }

    _attribute_map = {
        "first_consumption_date": {"key": "firstConsumptionDate", "type": "iso-8601"},
        "last_consumption_date": {"key": "lastConsumptionDate", "type": "iso-8601"},
        "look_back_period": {"key": "lookBackPeriod", "type": "str"},
        "total_hours": {"key": "totalHours", "type": "int"},
        "usage": {"key": "usage", "type": "RecommendationUsageDetails"},
        "arm_sku_name": {"key": "armSkuName", "type": "str"},
        "term": {"key": "term", "type": "str"},
        "commitment_granularity": {"key": "commitmentGranularity", "type": "str"},
        "currency_code": {"key": "currencyCode", "type": "str"},
        "cost_without_benefit": {"key": "costWithoutBenefit", "type": "float"},
        "recommendation_details": {"key": "recommendationDetails", "type": "AllSavingsBenefitDetails"},
        "all_recommendation_details": {"key": "allRecommendationDetails", "type": "AllSavingsList"},
        "scope": {"key": "scope", "type": "str"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "resource_group": {"key": "resourceGroup", "type": "str"},
    }

    def __init__(
        self,
        *,
        look_back_period: Optional[Union[str, "_models.LookBackPeriod"]] = None,
        usage: Optional["_models.RecommendationUsageDetails"] = None,
        term: Optional[Union[str, "_models.Term"]] = None,
        commitment_granularity: Optional[Union[str, "_models.Grain"]] = None,
        recommendation_details: Optional["_models.AllSavingsBenefitDetails"] = None,
        **kwargs
    ):
        """
        :keyword look_back_period: The number of days of usage used to look back for computing the
         recommendation. Known values are: "Last7Days", "Last30Days", and "Last60Days".
        :paramtype look_back_period: str or ~azure.mgmt.costmanagement.models.LookBackPeriod
        :keyword usage: The additional details about the usage which are considered while computing
         benefit recommendations.
        :paramtype usage: ~azure.mgmt.costmanagement.models.RecommendationUsageDetails
        :keyword term: Term period of the benefit. For example, P1Y or P3Y. Known values are: "P1Y" and
         "P3Y".
        :paramtype term: str or ~azure.mgmt.costmanagement.models.Term
        :keyword commitment_granularity: Grain of the proposed commitment amount. For example, hourly,
         monthly etc. Known values are: "Hourly", "Daily", and "Monthly".
        :paramtype commitment_granularity: str or ~azure.mgmt.costmanagement.models.Grain
        :keyword recommendation_details: The details of the proposed recommendation.
        :paramtype recommendation_details: ~azure.mgmt.costmanagement.models.AllSavingsBenefitDetails
        """
        super().__init__(
            look_back_period=look_back_period,
            usage=usage,
            term=term,
            commitment_granularity=commitment_granularity,
            recommendation_details=recommendation_details,
            **kwargs
        )
        self.scope = "Single"  # type: str
        self.subscription_id = None
        self.resource_group = None


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.costmanagement.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.costmanagement.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.costmanagement.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.costmanagement.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
