# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class BoundingBox(_model_base.Model):
    """A basic rectangle.

    All required parameters must be populated in order to send to Azure.

    :ivar x: X coordinate. Required.
    :vartype x: int
    :ivar y: Y coordinate. Required.
    :vartype y: int
    :ivar w: Width of the box. Required.
    :vartype w: int
    :ivar h: Height of the box. Required.
    :vartype h: int
    """

    x: int = rest_field()
    """X coordinate. Required."""
    y: int = rest_field()
    """Y coordinate. Required."""
    w: int = rest_field()
    """Width of the box. Required."""
    h: int = rest_field()
    """Height of the box. Required."""

    @overload
    def __init__(
        self,
        *,
        x: int,
        y: int,
        w: int,
        h: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CaptionResult(_model_base.Model):
    """A brief description of what the image depicts.

    All required parameters must be populated in order to send to Azure.

    :ivar confidence: The level of confidence the service has in the caption. Required.
    :vartype confidence: float
    :ivar text: The text of the caption. Required.
    :vartype text: str
    """

    confidence: float = rest_field()
    """The level of confidence the service has in the caption. Required."""
    text: str = rest_field()
    """The text of the caption. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        text: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CropRegion(_model_base.Model):
    """A region identified for smart cropping. There will be one region returned for each requested
    aspect ratio.

    All required parameters must be populated in order to send to Azure.

    :ivar aspect_ratio: The aspect ratio of the crop region. Required.
    :vartype aspect_ratio: float
    :ivar bounding_box: The bounding box of the crop region. Required.
    :vartype bounding_box: ~azure.ai.vision.imageanalysis.models.BoundingBox
    """

    aspect_ratio: float = rest_field(name="aspectRatio")
    """The aspect ratio of the crop region. Required."""
    bounding_box: "_models.BoundingBox" = rest_field(name="boundingBox")
    """The bounding box of the crop region. Required."""

    @overload
    def __init__(
        self,
        *,
        aspect_ratio: float,
        bounding_box: "_models.BoundingBox",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DenseCaption(_model_base.Model):
    """A brief description of what the image depicts.

    All required parameters must be populated in order to send to Azure.

    :ivar confidence: The level of confidence the service has in the caption. Required.
    :vartype confidence: float
    :ivar text: The text of the caption. Required.
    :vartype text: str
    :ivar bounding_box: The bounding box of the caption. Required.
    :vartype bounding_box: ~azure.ai.vision.imageanalysis.models.BoundingBox
    """

    confidence: float = rest_field()
    """The level of confidence the service has in the caption. Required."""
    text: str = rest_field()
    """The text of the caption. Required."""
    bounding_box: "_models.BoundingBox" = rest_field(name="boundingBox")
    """The bounding box of the caption. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        text: str,
        bounding_box: "_models.BoundingBox",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DenseCaptionsResult(_model_base.Model):
    """A list of captions.

    All required parameters must be populated in order to send to Azure.

    :ivar values: The list of captions. Required.
    :vartype values: list[~azure.ai.vision.imageanalysis.models.DenseCaption]
    """

    values: List["_models.DenseCaption"] = rest_field()
    """The list of captions. Required."""

    @overload
    def __init__(
        self,
        *,
        values: List["_models.DenseCaption"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DetectedObject(_model_base.Model):
    """Describes a detected object in an image.

    All required parameters must be populated in order to send to Azure.

    :ivar bounding_box: Gets a rectangular boundary within which the object was detected. Required.
    :vartype bounding_box: ~azure.ai.vision.imageanalysis.models.BoundingBox
    :ivar tags: Classification confidences of the detected object. Required.
    :vartype tags: list[~azure.ai.vision.imageanalysis.models.Tag]
    """

    bounding_box: "_models.BoundingBox" = rest_field(name="boundingBox")
    """Gets a rectangular boundary within which the object was detected. Required."""
    tags: List["_models.Tag"] = rest_field()
    """Classification confidences of the detected object. Required."""

    @overload
    def __init__(
        self,
        *,
        bounding_box: "_models.BoundingBox",
        tags: List["_models.Tag"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DetectedPerson(_model_base.Model):
    """Represents a person detected in an image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar bounding_box: Gets a rectangular boundary within which the person was detected. Required.
    :vartype bounding_box: ~azure.ai.vision.imageanalysis.models.BoundingBox
    :ivar confidence: Gets the confidence value of the detected person. Required.
    :vartype confidence: float
    """

    bounding_box: "_models.BoundingBox" = rest_field(name="boundingBox", visibility=["read"])
    """Gets a rectangular boundary within which the person was detected. Required."""
    confidence: float = rest_field(visibility=["read"])
    """Gets the confidence value of the detected person. Required."""


class DocumentLine(_model_base.Model):
    """A content line object consisting of an adjacent sequence of content elements, such as words and
    selection marks.

    All required parameters must be populated in order to send to Azure.

    :ivar bounding_box: The bounding box of the line. Required.
    :vartype bounding_box: list[float]
    :ivar content: Concatenated content of the contained elements in reading order. Required.
    :vartype content: str
    :ivar spans: Location of the line in the reading order concatenated content. Required.
    :vartype spans: list[~azure.ai.vision.imageanalysis.models.DocumentSpan]
    """

    bounding_box: List[float] = rest_field(name="boundingBox")
    """The bounding box of the line. Required."""
    content: str = rest_field()
    """Concatenated content of the contained elements in reading order. Required."""
    spans: List["_models.DocumentSpan"] = rest_field()
    """Location of the line in the reading order concatenated content. Required."""

    @overload
    def __init__(
        self,
        *,
        bounding_box: List[float],
        content: str,
        spans: List["_models.DocumentSpan"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentPage(_model_base.Model):
    """The content and layout elements extracted from a page from the input.

    All required parameters must be populated in order to send to Azure.

    :ivar angle: The general orientation of the content in clockwise direction, measured in degrees
     between (-180, 180]. Required.
    :vartype angle: float
    :ivar height: The height of the image/PDF in pixels/inches, respectively. Required.
    :vartype height: float
    :ivar lines: Extracted lines from the page, potentially containing both textual and visual
     elements. Required.
    :vartype lines: list[~azure.ai.vision.imageanalysis.models.DocumentLine]
    :ivar page_number: 1-based page number in the input document. Required.
    :vartype page_number: int
    :ivar spans: Location of the page in the reading order concatenated content. Required.
    :vartype spans: list[~azure.ai.vision.imageanalysis.models.DocumentSpan]
    :ivar width: The width of the image/PDF in pixels/inches, respectively. Required.
    :vartype width: float
    :ivar words: Extracted words from the page. Required.
    :vartype words: list[~azure.ai.vision.imageanalysis.models.DocumentWord]
    """

    angle: float = rest_field()
    """The general orientation of the content in clockwise direction, measured in degrees between
     (-180, 180]. Required."""
    height: float = rest_field()
    """The height of the image/PDF in pixels/inches, respectively. Required."""
    lines: List["_models.DocumentLine"] = rest_field()
    """Extracted lines from the page, potentially containing both textual and visual elements.
     Required."""
    page_number: int = rest_field(name="pageNumber")
    """1-based page number in the input document. Required."""
    spans: List["_models.DocumentSpan"] = rest_field()
    """Location of the page in the reading order concatenated content. Required."""
    width: float = rest_field()
    """The width of the image/PDF in pixels/inches, respectively. Required."""
    words: List["_models.DocumentWord"] = rest_field()
    """Extracted words from the page. Required."""

    @overload
    def __init__(
        self,
        *,
        angle: float,
        height: float,
        lines: List["_models.DocumentLine"],
        page_number: int,
        spans: List["_models.DocumentSpan"],
        width: float,
        words: List["_models.DocumentWord"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentSpan(_model_base.Model):
    """Contiguous region of the concatenated content property, specified as an offset and length.

    All required parameters must be populated in order to send to Azure.

    :ivar length: Number of characters in the content represented by the span. Required.
    :vartype length: int
    :ivar offset: Zero-based index of the content represented by the span. Required.
    :vartype offset: int
    """

    length: int = rest_field()
    """Number of characters in the content represented by the span. Required."""
    offset: int = rest_field()
    """Zero-based index of the content represented by the span. Required."""

    @overload
    def __init__(
        self,
        *,
        length: int,
        offset: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentStyle(_model_base.Model):
    """An object representing observed text styles.

    All required parameters must be populated in order to send to Azure.

    :ivar confidence: Confidence of correctly identifying the style. Required.
    :vartype confidence: float
    :ivar is_handwritten: Is content handwritten or not. Required.
    :vartype is_handwritten: bool
    :ivar spans: Location of the text elements in the concatenated content the style applies to.
     Required.
    :vartype spans: list[~azure.ai.vision.imageanalysis.models.DocumentSpan]
    """

    confidence: float = rest_field()
    """Confidence of correctly identifying the style. Required."""
    is_handwritten: bool = rest_field(name="isHandwritten")
    """Is content handwritten or not. Required."""
    spans: List["_models.DocumentSpan"] = rest_field()
    """Location of the text elements in the concatenated content the style applies to. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        is_handwritten: bool,
        spans: List["_models.DocumentSpan"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DocumentWord(_model_base.Model):
    """A word object consisting of a contiguous sequence of characters. For non-space delimited
    languages,
    such as Chinese, Japanese, and Korean, each character is represented as its own word.

    All required parameters must be populated in order to send to Azure.

    :ivar bounding_box: Bounding box of the word. Required.
    :vartype bounding_box: list[float]
    :ivar confidence: Confidence of correctly extracting the word. Required.
    :vartype confidence: float
    :ivar content: Text content of the word. Required.
    :vartype content: str
    :ivar span: Location of the word in the reading order concatenated content. Required.
    :vartype span: ~azure.ai.vision.imageanalysis.models.DocumentSpan
    """

    bounding_box: List[float] = rest_field(name="boundingBox")
    """Bounding box of the word. Required."""
    confidence: float = rest_field()
    """Confidence of correctly extracting the word. Required."""
    content: str = rest_field()
    """Text content of the word. Required."""
    span: "_models.DocumentSpan" = rest_field()
    """Location of the word in the reading order concatenated content. Required."""

    @overload
    def __init__(
        self,
        *,
        bounding_box: List[float],
        confidence: float,
        content: str,
        span: "_models.DocumentSpan",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageAnalysisResult(_model_base.Model):
    """Describe the combined results of different types of image analysis.

    All required parameters must be populated in order to send to Azure.

    :ivar caption_result: A CaptionResult for the image.
    :vartype caption_result: ~azure.ai.vision.imageanalysis.models.CaptionResult
    :ivar custom_model_result: A list of categories for the image.
    :vartype custom_model_result: ~azure.ai.vision.imageanalysis.models.ImagePredictionResult
    :ivar dense_captions_result: A denseCaptionsResult for the image.
    :vartype dense_captions_result: ~azure.ai.vision.imageanalysis.models.DenseCaptionsResult
    :ivar metadata: The model used for the analysis. Required.
    :vartype metadata: ~azure.ai.vision.imageanalysis.models.ImageMetadata
    :ivar model_version: The model used for the analysis. Required.
    :vartype model_version: str
    :ivar objects_result: A list of objects for the image.
    :vartype objects_result: ~azure.ai.vision.imageanalysis.models.ObjectsResult
    :ivar people_result: A list of people for the image.
    :vartype people_result: ~azure.ai.vision.imageanalysis.models.PeopleResult
    :ivar read_result: A readResult for the image.
    :vartype read_result: ~azure.ai.vision.imageanalysis.models.ReadResult
    :ivar smart_crops_result: A list of regions for the image.
    :vartype smart_crops_result: ~azure.ai.vision.imageanalysis.models.SmartCropsResult
    :ivar tags_result: A list of tags for the image.
    :vartype tags_result: ~azure.ai.vision.imageanalysis.models.TagsResult
    """

    caption_result: Optional["_models.CaptionResult"] = rest_field(name="captionResult")
    """A CaptionResult for the image."""
    custom_model_result: Optional["_models.ImagePredictionResult"] = rest_field(name="customModelResult")
    """A list of categories for the image."""
    dense_captions_result: Optional["_models.DenseCaptionsResult"] = rest_field(name="denseCaptionsResult")
    """A denseCaptionsResult for the image."""
    metadata: "_models.ImageMetadata" = rest_field()
    """The model used for the analysis. Required."""
    model_version: str = rest_field(name="modelVersion")
    """The model used for the analysis. Required."""
    objects_result: Optional["_models.ObjectsResult"] = rest_field(name="objectsResult")
    """A list of objects for the image."""
    people_result: Optional["_models.PeopleResult"] = rest_field(name="peopleResult")
    """A list of people for the image."""
    read_result: Optional["_models.ReadResult"] = rest_field(name="readResult")
    """A readResult for the image."""
    smart_crops_result: Optional["_models.SmartCropsResult"] = rest_field(name="smartCropsResult")
    """A list of regions for the image."""
    tags_result: Optional["_models.TagsResult"] = rest_field(name="tagsResult")
    """A list of tags for the image."""

    @overload
    def __init__(
        self,
        *,
        metadata: "_models.ImageMetadata",
        model_version: str,
        caption_result: Optional["_models.CaptionResult"] = None,
        custom_model_result: Optional["_models.ImagePredictionResult"] = None,
        dense_captions_result: Optional["_models.DenseCaptionsResult"] = None,
        objects_result: Optional["_models.ObjectsResult"] = None,
        people_result: Optional["_models.PeopleResult"] = None,
        read_result: Optional["_models.ReadResult"] = None,
        smart_crops_result: Optional["_models.SmartCropsResult"] = None,
        tags_result: Optional["_models.TagsResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageMetadata(_model_base.Model):
    """The image metadata information such as height and width.

    All required parameters must be populated in order to send to Azure.

    :ivar height: The height of the image in pixels. Required.
    :vartype height: int
    :ivar width: The width of the image in pixels. Required.
    :vartype width: int
    """

    height: int = rest_field()
    """The height of the image in pixels. Required."""
    width: int = rest_field()
    """The width of the image in pixels. Required."""

    @overload
    def __init__(
        self,
        *,
        height: int,
        width: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImagePredictionResult(_model_base.Model):
    """Describes the prediction result of an image.

    All required parameters must be populated in order to send to Azure.

    :ivar objects_result: The list of predicted objects. Required.
    :vartype objects_result: ~azure.ai.vision.imageanalysis.models.ObjectsResult
    :ivar tags_result: The list of predicted tags. Required.
    :vartype tags_result: ~azure.ai.vision.imageanalysis.models.TagsResult
    """

    objects_result: "_models.ObjectsResult" = rest_field(name="objectsResult")
    """The list of predicted objects. Required."""
    tags_result: "_models.TagsResult" = rest_field(name="tagsResult")
    """The list of predicted tags. Required."""

    @overload
    def __init__(
        self,
        *,
        objects_result: "_models.ObjectsResult",
        tags_result: "_models.TagsResult",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageUrl(_model_base.Model):
    """A JSON document with a URL pointing to the image that is to be analyzed.

    All required parameters must be populated in order to send to Azure.

    :ivar url: Publicly reachable URL of an image. Required.
    :vartype url: str
    """

    url: str = rest_field()
    """Publicly reachable URL of an image. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ObjectsResult(_model_base.Model):
    """Describes detected objects in an image.

    All required parameters must be populated in order to send to Azure.

    :ivar values: An array of detected objects. Required.
    :vartype values: list[~azure.ai.vision.imageanalysis.models.DetectedObject]
    """

    values: List["_models.DetectedObject"] = rest_field()
    """An array of detected objects. Required."""

    @overload
    def __init__(
        self,
        *,
        values: List["_models.DetectedObject"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PeopleResult(_model_base.Model):
    """An object describing whether the image contains people.

    All required parameters must be populated in order to send to Azure.

    :ivar values: An array of detected people. Required.
    :vartype values: list[~azure.ai.vision.imageanalysis.models.DetectedPerson]
    """

    values: List["_models.DetectedPerson"] = rest_field()
    """An array of detected people. Required."""

    @overload
    def __init__(
        self,
        *,
        values: List["_models.DetectedPerson"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReadResult(_model_base.Model):
    """The results of an Read operation.

    All required parameters must be populated in order to send to Azure.

    :ivar content: Concatenate string representation of all textual and visual elements in reading
     order. Required.
    :vartype content: str
    :ivar pages: A list of analyzed pages. Required.
    :vartype pages: list[~azure.ai.vision.imageanalysis.models.DocumentPage]
    :ivar string_index_type: The method used to compute string offset and length, possible values
     include: 'textElements', 'unicodeCodePoint', 'utf16CodeUnit' etc. Required.
    :vartype string_index_type: str
    :ivar styles: Extracted font styles. Required.
    :vartype styles: list[~azure.ai.vision.imageanalysis.models.DocumentStyle]
    """

    content: str = rest_field()
    """Concatenate string representation of all textual and visual elements in reading order.
     Required."""
    pages: List["_models.DocumentPage"] = rest_field()
    """A list of analyzed pages. Required."""
    string_index_type: str = rest_field(name="stringIndexType")
    """The method used to compute string offset and length, possible values include: 'textElements',
     'unicodeCodePoint', 'utf16CodeUnit' etc. Required."""
    styles: List["_models.DocumentStyle"] = rest_field()
    """Extracted font styles. Required."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        pages: List["_models.DocumentPage"],
        string_index_type: str,
        styles: List["_models.DocumentStyle"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SmartCropsResult(_model_base.Model):
    """Smart cropping result.

    All required parameters must be populated in order to send to Azure.

    :ivar values: Recommended regions for cropping the image. Required.
    :vartype values: list[~azure.ai.vision.imageanalysis.models.CropRegion]
    """

    values: List["_models.CropRegion"] = rest_field()
    """Recommended regions for cropping the image. Required."""

    @overload
    def __init__(
        self,
        *,
        values: List["_models.CropRegion"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Tag(_model_base.Model):
    """An entity observation in the image, along with the confidence score.

    All required parameters must be populated in order to send to Azure.

    :ivar confidence: The level of confidence that the entity was observed. Required.
    :vartype confidence: float
    :ivar name: Name of the entity. Required.
    :vartype name: str
    """

    confidence: float = rest_field()
    """The level of confidence that the entity was observed. Required."""
    name: str = rest_field()
    """Name of the entity. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TagsResult(_model_base.Model):
    """A list of tags with confidence level.

    All required parameters must be populated in order to send to Azure.

    :ivar values: A list of tags with confidence level. Required.
    :vartype values: list[~azure.ai.vision.imageanalysis.models.Tag]
    """

    values: List["_models.Tag"] = rest_field()
    """A list of tags with confidence level. Required."""

    @overload
    def __init__(
        self,
        *,
        values: List["_models.Tag"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
