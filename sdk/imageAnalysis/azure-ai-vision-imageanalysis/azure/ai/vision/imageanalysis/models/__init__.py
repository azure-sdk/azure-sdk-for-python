# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models import AdultMatch
from ._models import AdultResult
from ._models import BoundingBox
from ._models import CaptionResult
from ._models import CropRegion
from ._models import DenseCaption
from ._models import DenseCaptionsResult
from ._models import DetectedObject
from ._models import DetectedPerson
from ._models import DocumentLine
from ._models import DocumentPage
from ._models import DocumentSpan
from ._models import DocumentStyle
from ._models import DocumentWord
from ._models import ImageAnalysisResult
from ._models import ImageMetadataApiModel
from ._models import ImagePredictionResult
from ._models import ImageUrl
from ._models import ObjectsResult
from ._models import PeopleResult
from ._models import ReadResult
from ._models import SmartCropsResult
from ._models import Tag
from ._models import TagsResult

from ._enums import visualFeatures
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AdultMatch",
    "AdultResult",
    "BoundingBox",
    "CaptionResult",
    "CropRegion",
    "DenseCaption",
    "DenseCaptionsResult",
    "DetectedObject",
    "DetectedPerson",
    "DocumentLine",
    "DocumentPage",
    "DocumentSpan",
    "DocumentStyle",
    "DocumentWord",
    "ImageAnalysisResult",
    "ImageMetadataApiModel",
    "ImagePredictionResult",
    "ImageUrl",
    "ObjectsResult",
    "PeopleResult",
    "ReadResult",
    "SmartCropsResult",
    "Tag",
    "TagsResult",
    "visualFeatures",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
