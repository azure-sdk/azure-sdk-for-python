# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AddOrUpdateTextBlocklistItemsOptions(_model_base.Model):
    """The request to add blocklistItems to a text blocklist.

    All required parameters must be populated in order to send to server.

    :ivar blocklist_items: Array of blocklistItems to add. Required.
    :vartype blocklist_items: list[~azure.ai.contentsafety.models.TextBlocklistItem]
    """

    blocklist_items: List["_models.TextBlocklistItem"] = rest_field(name="blocklistItems")
    """Array of blocklistItems to add. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_items: List["_models.TextBlocklistItem"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddOrUpdateTextBlocklistItemsResult(_model_base.Model):
    """The response of adding blocklistItems to the text blocklist.


    :ivar blocklist_items: Array of blocklistItems have been added. Required.
    :vartype blocklist_items: list[~azure.ai.contentsafety.models.TextBlocklistItem]
    """

    blocklist_items: List["_models.TextBlocklistItem"] = rest_field(name="blocklistItems")
    """Array of blocklistItems have been added. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_items: List["_models.TextBlocklistItem"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeImageOptions(_model_base.Model):
    """The image analysis request.

    All required parameters must be populated in order to send to server.

    :ivar image: The image to be analyzed. Required.
    :vartype image: ~azure.ai.contentsafety.models.ImageData
    :ivar categories: The categories will be analyzed. If they are not assigned, a default set of
     analysis results for the categories will be returned.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.ImageCategory]
    :ivar output_type: This refers to the type of image analysis output. If no value is assigned,
     the default value will be "FourSeverityLevels". "FourSeverityLevels"
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeImageOutputType
    """

    image: "_models.ImageData" = rest_field()
    """The image to be analyzed. Required."""
    categories: Optional[List[Union[str, "_models.ImageCategory"]]] = rest_field()
    """The categories will be analyzed. If they are not assigned, a default set of analysis results
     for the categories will be returned."""
    output_type: Optional[Union[str, "_models.AnalyzeImageOutputType"]] = rest_field(name="outputType")
    """This refers to the type of image analysis output. If no value is assigned, the default value
     will be \"FourSeverityLevels\". \"FourSeverityLevels\""""

    @overload
    def __init__(
        self,
        *,
        image: "_models.ImageData",
        categories: Optional[List[Union[str, "_models.ImageCategory"]]] = None,
        output_type: Optional[Union[str, "_models.AnalyzeImageOutputType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeImageResult(_model_base.Model):
    """The image analysis response.


    :ivar categories_analysis: Analysis result for categories. Required.
    :vartype categories_analysis: list[~azure.ai.contentsafety.models.ImageCategoriesAnalysis]
    """

    categories_analysis: List["_models.ImageCategoriesAnalysis"] = rest_field(name="categoriesAnalysis")
    """Analysis result for categories. Required."""

    @overload
    def __init__(
        self,
        *,
        categories_analysis: List["_models.ImageCategoriesAnalysis"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeTextOptions(_model_base.Model):
    """The text analysis request.

    All required parameters must be populated in order to send to server.

    :ivar text: The text to be analyzed. We support a maximum of 10k Unicode characters (Unicode
     code points) in the text of one request. Required.
    :vartype text: str
    :ivar categories: The categories will be analyzed. If they are not assigned, a default set of
     analysis results for the categories will be returned.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.TextCategory]
    :ivar blocklist_names: The names of blocklists.
    :vartype blocklist_names: list[str]
    :ivar halt_on_blocklist_hit: When set to true, further analyses of harmful content will not be
     performed in cases where blocklists are hit. When set to false, all analyses of harmful content
     will be performed, whether or not blocklists are hit.
    :vartype halt_on_blocklist_hit: bool
    :ivar output_type: This refers to the type of text analysis output. If no value is assigned,
     the default value will be "FourSeverityLevels". Known values are: "FourSeverityLevels" and
     "EightSeverityLevels".
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeTextOutputType
    """

    text: str = rest_field()
    """The text to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points)
     in the text of one request. Required."""
    categories: Optional[List[Union[str, "_models.TextCategory"]]] = rest_field()
    """The categories will be analyzed. If they are not assigned, a default set of analysis results
     for the categories will be returned."""
    blocklist_names: Optional[List[str]] = rest_field(name="blocklistNames")
    """The names of blocklists."""
    halt_on_blocklist_hit: Optional[bool] = rest_field(name="haltOnBlocklistHit")
    """When set to true, further analyses of harmful content will not be performed in cases where
     blocklists are hit. When set to false, all analyses of harmful content will be performed,
     whether or not blocklists are hit."""
    output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = rest_field(name="outputType")
    """This refers to the type of text analysis output. If no value is assigned, the default value
     will be \"FourSeverityLevels\". Known values are: \"FourSeverityLevels\" and
     \"EightSeverityLevels\"."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        categories: Optional[List[Union[str, "_models.TextCategory"]]] = None,
        blocklist_names: Optional[List[str]] = None,
        halt_on_blocklist_hit: Optional[bool] = None,
        output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeTextResult(_model_base.Model):
    """The text analysis response.


    :ivar blocklists_match: The blocklist match details.
    :vartype blocklists_match: list[~azure.ai.contentsafety.models.TextBlocklistMatch]
    :ivar categories_analysis: Analysis result for categories. Required.
    :vartype categories_analysis: list[~azure.ai.contentsafety.models.TextCategoriesAnalysis]
    """

    blocklists_match: Optional[List["_models.TextBlocklistMatch"]] = rest_field(name="blocklistsMatch")
    """The blocklist match details."""
    categories_analysis: List["_models.TextCategoriesAnalysis"] = rest_field(name="categoriesAnalysis")
    """Analysis result for categories. Required."""

    @overload
    def __init__(
        self,
        *,
        categories_analysis: List["_models.TextCategoriesAnalysis"],
        blocklists_match: Optional[List["_models.TextBlocklistMatch"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AppliedFor(_model_base.Model):
    """Applied for model.


    :ivar role: The role applied for. Required. Known values are: "all", "user", "system",
     "assistant", and "tool".
    :vartype role: str or ~azure.ai.contentsafety.models.RoleType
    :ivar source: The source type applied for. Required. Known values are: "messageToAI" and
     "messageFromAI".
    :vartype source: str or ~azure.ai.contentsafety.models.SourceType
    """

    role: Union[str, "_models.RoleType"] = rest_field()
    """The role applied for. Required. Known values are: \"all\", \"user\", \"system\", \"assistant\",
     and \"tool\"."""
    source: Union[str, "_models.SourceType"] = rest_field()
    """The source type applied for. Required. Known values are: \"messageToAI\" and \"messageFromAI\"."""

    @overload
    def __init__(
        self,
        *,
        role: Union[str, "_models.RoleType"],
        source: Union[str, "_models.SourceType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlockingCriteria(_model_base.Model):
    """Blocking criteria model.


    :ivar enabled: Indicates if blocking criteria is enabled. Required.
    :vartype enabled: bool
    :ivar kind: The blocking criteria kind. Required. Known values are: "severity", "riskLevel",
     and "isDetected".
    :vartype kind: str or ~azure.ai.contentsafety.models.BlockingCriteriaKind
    :ivar allowed_severity: The allowed severity level. Required.
    :vartype allowed_severity: int
    :ivar is_detected: Indicates if it is detected. Required.
    :vartype is_detected: bool
    :ivar allowed_risk_level: The risk level. Required. Known values are: "safe", "low", "medium",
     and "high".
    :vartype allowed_risk_level: str or ~azure.ai.contentsafety.models.RiskLevel
    """

    enabled: bool = rest_field()
    """Indicates if blocking criteria is enabled. Required."""
    kind: Union[str, "_models.BlockingCriteriaKind"] = rest_field()
    """The blocking criteria kind. Required. Known values are: \"severity\", \"riskLevel\", and
     \"isDetected\"."""
    allowed_severity: int = rest_field(name="allowedSeverity")
    """The allowed severity level. Required."""
    is_detected: bool = rest_field(name="isDetected")
    """Indicates if it is detected. Required."""
    allowed_risk_level: Union[str, "_models.RiskLevel"] = rest_field(name="allowedRiskLevel")
    """The risk level. Required. Known values are: \"safe\", \"low\", \"medium\", and \"high\"."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        kind: Union[str, "_models.BlockingCriteriaKind"],
        allowed_severity: int,
        is_detected: bool,
        allowed_risk_level: Union[str, "_models.RiskLevel"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlocklistTaskResult(_model_base.Model):
    """Blocklist task result model.


    :ivar name: The name of the blocklist. Required.
    :vartype name: str
    :ivar is_detected: Indicates if it is detected. Required.
    :vartype is_detected: bool
    """

    name: str = rest_field()
    """The name of the blocklist. Required."""
    is_detected: bool = rest_field(name="isDetected")
    """Indicates if it is detected. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        is_detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlocklistTaskSetting(_model_base.Model):
    """Blocklist task setting model.


    :ivar name: The name of the blocklist. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the blocklist. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomCategoryTaskResult(_model_base.Model):
    """Custom category task result model.


    :ivar name: The name of the custom category. Required.
    :vartype name: str
    :ivar is_detected: Indicates if it is detected. Required.
    :vartype is_detected: bool
    """

    name: str = rest_field()
    """The name of the custom category. Required."""
    is_detected: bool = rest_field(name="isDetected")
    """Indicates if it is detected. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        is_detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomHarmCategoryTaskSetting(_model_base.Model):
    """Custom harm category task setting model.


    :ivar name: The name of the custom harm category. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the custom harm category. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetectTextProtectedMaterialOptions(_model_base.Model):
    """The request of detecting potential protected material present in the given text.

    All required parameters must be populated in order to send to server.

    :ivar text: The text to be analyzed, which may contain protected material. The characters will
     be counted in Unicode code points. Required.
    :vartype text: str
    """

    text: str = rest_field()
    """The text to be analyzed, which may contain protected material. The characters will be counted
     in Unicode code points. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetectTextProtectedMaterialResult(_model_base.Model):
    """The combined detection results of potential protected material.


    :ivar protected_material_analysis: Analysis result for the given text. Required.
    :vartype protected_material_analysis:
     ~azure.ai.contentsafety.models.TextProtectedMaterialAnalysisResult
    """

    protected_material_analysis: "_models.TextProtectedMaterialAnalysisResult" = rest_field(
        name="protectedMaterialAnalysis"
    )
    """Analysis result for the given text. Required."""

    @overload
    def __init__(
        self,
        *,
        protected_material_analysis: "_models.TextProtectedMaterialAnalysisResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentInjectionAnalysisResult(_model_base.Model):
    """The individual analysis result of potential injection attacks in the given documents.


    :ivar attack_detected: Whether a potential injection attack is detected or not. Required.
    :vartype attack_detected: bool
    """

    attack_detected: bool = rest_field(name="attackDetected")
    """Whether a potential injection attack is detected or not. Required."""

    @overload
    def __init__(
        self,
        *,
        attack_detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HarmCategoryTaskResult(_model_base.Model):
    """Harm category task result model.


    :ivar harm_category: The harm category. Required. Known values are: "celebrity", "drug",
     "hate", "promptInjection", "protectedMaterial", "sexual", "selfHarm", and "violence".
    :vartype harm_category: str or ~azure.ai.contentsafety.models.HarmCategory
    :ivar harm_config_id: The harm configuration ID. Required.
    :vartype harm_config_id: str
    :ivar is_detected: Indicates if it is detected. Required.
    :vartype is_detected: bool
    :ivar severity: The severity level. Required.
    :vartype severity: int
    :ivar risk_level: The risk level. Required. Known values are: "safe", "low", "medium", and
     "high".
    :vartype risk_level: str or ~azure.ai.contentsafety.models.RiskLevel
    :ivar details: Result details.
    :vartype details: ~azure.ai.contentsafety.models.PromptInjectionDetail
    """

    harm_category: Union[str, "_models.HarmCategory"] = rest_field(name="harmCategory")
    """The harm category. Required. Known values are: \"celebrity\", \"drug\", \"hate\",
     \"promptInjection\", \"protectedMaterial\", \"sexual\", \"selfHarm\", and \"violence\"."""
    harm_config_id: str = rest_field(name="harmConfigId")
    """The harm configuration ID. Required."""
    is_detected: bool = rest_field(name="isDetected")
    """Indicates if it is detected. Required."""
    severity: int = rest_field()
    """The severity level. Required."""
    risk_level: Union[str, "_models.RiskLevel"] = rest_field(name="riskLevel")
    """The risk level. Required. Known values are: \"safe\", \"low\", \"medium\", and \"high\"."""
    details: Optional["_models.PromptInjectionDetail"] = rest_field()
    """Result details."""

    @overload
    def __init__(
        self,
        *,
        harm_category: Union[str, "_models.HarmCategory"],
        harm_config_id: str,
        is_detected: bool,
        severity: int,
        risk_level: Union[str, "_models.RiskLevel"],
        details: Optional["_models.PromptInjectionDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HarmCategoryTaskSetting(_model_base.Model):
    """Harm category task setting model.


    :ivar harm_category: The harm category. Required. Known values are: "celebrity", "drug",
     "hate", "promptInjection", "protectedMaterial", "sexual", "selfHarm", and "violence".
    :vartype harm_category: str or ~azure.ai.contentsafety.models.HarmCategory
    :ivar harm_config_id: The harm configuration ID. Required.
    :vartype harm_config_id: str
    """

    harm_category: Union[str, "_models.HarmCategory"] = rest_field(name="harmCategory")
    """The harm category. Required. Known values are: \"celebrity\", \"drug\", \"hate\",
     \"promptInjection\", \"protectedMaterial\", \"sexual\", \"selfHarm\", and \"violence\"."""
    harm_config_id: str = rest_field(name="harmConfigId")
    """The harm configuration ID. Required."""

    @overload
    def __init__(
        self,
        *,
        harm_category: Union[str, "_models.HarmCategory"],
        harm_config_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageCategoriesAnalysis(_model_base.Model):
    """Image analysis result.


    :ivar category: The image analysis category. Required. Known values are: "Hate", "SelfHarm",
     "Sexual", "Violence", and "Drugs".
    :vartype category: str or ~azure.ai.contentsafety.models.ImageCategory
    :ivar severity: The value increases with the severity of the input content. The value of this
     field is determined by the output type specified in the request. The output type could be
     ‘FourSeverityLevels’, and the output value can be 0, 2, 4, 6.
    :vartype severity: int
    """

    category: Union[str, "_models.ImageCategory"] = rest_field()
    """The image analysis category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\",
     \"Violence\", and \"Drugs\"."""
    severity: Optional[int] = rest_field()
    """The value increases with the severity of the input content. The value of this field is
     determined by the output type specified in the request. The output type could be
     ‘FourSeverityLevels’, and the output value can be 0, 2, 4, 6."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ImageCategory"],
        severity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageData(_model_base.Model):
    """The image can be either base64 encoded bytes or a blob URL. You can choose only one of these
    options. If both are provided, the request will be refused. The maximum image size is 2048 x
    2048 pixels and should not exceed 4 MB, while the minimum image size is 50 x 50 pixels.

    :ivar content: The Base64 encoding of the image.
    :vartype content: bytes
    :ivar blob_url: The blob url of the image.
    :vartype blob_url: str
    """

    content: Optional[bytes] = rest_field(format="base64")
    """The Base64 encoding of the image."""
    blob_url: Optional[str] = rest_field(name="blobUrl")
    """The blob url of the image."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        blob_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PromptInjectionDetail(_model_base.Model):
    """Details the output of an analysis, including detection status, severity, and additional
    information.

    :ivar prompt_injection: Indicates whether prompt injection was detected.
    :vartype prompt_injection: bool
    :ivar cross_domain: Indicates whether cross-domain issues were detected.
    :vartype cross_domain: bool
    """

    prompt_injection: Optional[bool] = rest_field(name="promptInjection")
    """Indicates whether prompt injection was detected."""
    cross_domain: Optional[bool] = rest_field(name="crossDomain")
    """Indicates whether cross-domain issues were detected."""

    @overload
    def __init__(
        self,
        *,
        prompt_injection: Optional[bool] = None,
        cross_domain: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RaiPolicy(_model_base.Model):
    """Rai policy model.


    :ivar name: The rai policy name. Required.
    :vartype name: str
    :ivar task_settings: The task settings. Required.
    :vartype task_settings: list[~azure.ai.contentsafety.models.TaskSetting]
    """

    name: str = rest_field(visibility=["read", "create", "query"])
    """The rai policy name. Required."""
    task_settings: List["_models.TaskSetting"] = rest_field(name="taskSettings")
    """The task settings. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        task_settings: List["_models.TaskSetting"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RaiPolicyAnalyzeOption(_model_base.Model):
    """Defines the options for analyzing content with a rai policy.

    All required parameters must be populated in order to send to server.

    :ivar messages: The messages to be analyzed. Required.
    :vartype messages: list[~azure.ai.contentsafety.models.UnifyMessage]
    :ivar rai_policy_inline: The inline rai policy to be applied during analysis. One of
     ``raiPolicyName`` or ``raiPolicyInline`` must be provided.
    :vartype rai_policy_inline: ~azure.ai.contentsafety.models.RaiPolicy
    :ivar rai_policy_name: The name of a predefined rai policy to be applied during analysis. One
     of ``raiPolicyName`` or ``raiPolicyInline`` must be provided.
    :vartype rai_policy_name: str
    """

    messages: List["_models.UnifyMessage"] = rest_field()
    """The messages to be analyzed. Required."""
    rai_policy_inline: Optional["_models.RaiPolicy"] = rest_field(name="raiPolicyInline")
    """The inline rai policy to be applied during analysis. One of ``raiPolicyName`` or
     ``raiPolicyInline`` must be provided."""
    rai_policy_name: Optional[str] = rest_field(name="raiPolicyName")
    """The name of a predefined rai policy to be applied during analysis. One of ``raiPolicyName`` or
     ``raiPolicyInline`` must be provided."""

    @overload
    def __init__(
        self,
        *,
        messages: List["_models.UnifyMessage"],
        rai_policy_inline: Optional["_models.RaiPolicy"] = None,
        rai_policy_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RaiPolicyAnalyzeResponse(_model_base.Model):
    """Represents the analysis response obtained by applying a rai policy.


    :ivar task_results: The task results of the analysis. Required.
    :vartype task_results: list[~azure.ai.contentsafety.models.TaskResult]
    """

    task_results: List["_models.TaskResult"] = rest_field(name="taskResults")
    """The task results of the analysis. Required."""

    @overload
    def __init__(
        self,
        *,
        task_results: List["_models.TaskResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RemoveTextBlocklistItemsOptions(_model_base.Model):
    """The request to remove blocklistItems from a text blocklist.

    All required parameters must be populated in order to send to server.

    :ivar blocklist_item_ids: Array of blocklistItemIds to remove. Required.
    :vartype blocklist_item_ids: list[str]
    """

    blocklist_item_ids: List[str] = rest_field(name="blocklistItemIds")
    """Array of blocklistItemIds to remove. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_item_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SafetyIncidentTaskResult(_model_base.Model):
    """Safety incident task result model.


    :ivar name: The name of the safety incident. Required.
    :vartype name: str
    :ivar is_detected: Indicates if it is detected. Required.
    :vartype is_detected: bool
    """

    name: str = rest_field()
    """The name of the safety incident. Required."""
    is_detected: bool = rest_field(name="isDetected")
    """Indicates if it is detected. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        is_detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SafetyIncidentTaskSetting(_model_base.Model):
    """Safety incident task setting model.


    :ivar name: The name of the safety incident. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the safety incident. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ShieldPromptOptions(_model_base.Model):
    """The request of analyzing potential direct or indirect injection attacks.

    :ivar user_prompt: The user prompt to be analyzed, which may contain direct injection attacks.
    :vartype user_prompt: str
    :ivar documents: The documents to be analyzed, which may contain direct or indirect injection
     attacks.
    :vartype documents: list[str]
    """

    user_prompt: Optional[str] = rest_field(name="userPrompt")
    """The user prompt to be analyzed, which may contain direct injection attacks."""
    documents: Optional[List[str]] = rest_field()
    """The documents to be analyzed, which may contain direct or indirect injection attacks."""

    @overload
    def __init__(
        self,
        *,
        user_prompt: Optional[str] = None,
        documents: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ShieldPromptResult(_model_base.Model):
    """The combined analysis results of potential direct or indirect injection attacks.

    :ivar user_prompt_analysis: Direct injection attacks analysis result for the given user prompt.
    :vartype user_prompt_analysis: ~azure.ai.contentsafety.models.UserPromptInjectionAnalysisResult
    :ivar documents_analysis: Direct and indirect injection attacks analysis result for the given
     documents.
    :vartype documents_analysis:
     list[~azure.ai.contentsafety.models.DocumentInjectionAnalysisResult]
    """

    user_prompt_analysis: Optional["_models.UserPromptInjectionAnalysisResult"] = rest_field(name="userPromptAnalysis")
    """Direct injection attacks analysis result for the given user prompt."""
    documents_analysis: Optional[List["_models.DocumentInjectionAnalysisResult"]] = rest_field(name="documentsAnalysis")
    """Direct and indirect injection attacks analysis result for the given documents."""

    @overload
    def __init__(
        self,
        *,
        user_prompt_analysis: Optional["_models.UserPromptInjectionAnalysisResult"] = None,
        documents_analysis: Optional[List["_models.DocumentInjectionAnalysisResult"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TaskResult(_model_base.Model):
    """Task result model.


    :ivar setting_id: The setting ID. Required.
    :vartype setting_id: str
    :ivar result_code: The result code. Required. Known values are: "oK", "noValidInput",
     "internalTimeout", and "internalError".
    :vartype result_code: str or ~azure.ai.contentsafety.models.ResultCode
    :ivar result_code_detail: The result code detail. Required.
    :vartype result_code_detail: str
    :ivar is_blocking_criteria_met: Indicates if blocking criteria is met. Required.
    :vartype is_blocking_criteria_met: bool
    :ivar kind: The task kind. Required. Known values are: "harmCategory", "blocklist",
     "safetyIncident", and "customHarmCategory".
    :vartype kind: str or ~azure.ai.contentsafety.models.TaskType
    :ivar harm_category_task_result: The harm category task result.
    :vartype harm_category_task_result: ~azure.ai.contentsafety.models.HarmCategoryTaskResult
    :ivar blocklist_task_result: The blocklist task result.
    :vartype blocklist_task_result: ~azure.ai.contentsafety.models.BlocklistTaskResult
    :ivar safety_incident_task_result: The safety incident task result.
    :vartype safety_incident_task_result: ~azure.ai.contentsafety.models.SafetyIncidentTaskResult
    :ivar custom_category_task_result: The custom category task result.
    :vartype custom_category_task_result: ~azure.ai.contentsafety.models.CustomCategoryTaskResult
    """

    setting_id: str = rest_field(name="settingId")
    """The setting ID. Required."""
    result_code: Union[str, "_models.ResultCode"] = rest_field(name="resultCode")
    """The result code. Required. Known values are: \"oK\", \"noValidInput\", \"internalTimeout\", and
     \"internalError\"."""
    result_code_detail: str = rest_field(name="resultCodeDetail")
    """The result code detail. Required."""
    is_blocking_criteria_met: bool = rest_field(name="isBlockingCriteriaMet")
    """Indicates if blocking criteria is met. Required."""
    kind: Union[str, "_models.TaskType"] = rest_field()
    """The task kind. Required. Known values are: \"harmCategory\", \"blocklist\", \"safetyIncident\",
     and \"customHarmCategory\"."""
    harm_category_task_result: Optional["_models.HarmCategoryTaskResult"] = rest_field(name="harmCategoryTaskResult")
    """The harm category task result."""
    blocklist_task_result: Optional["_models.BlocklistTaskResult"] = rest_field(name="blocklistTaskResult")
    """The blocklist task result."""
    safety_incident_task_result: Optional["_models.SafetyIncidentTaskResult"] = rest_field(
        name="safetyIncidentTaskResult"
    )
    """The safety incident task result."""
    custom_category_task_result: Optional["_models.CustomCategoryTaskResult"] = rest_field(
        name="customCategoryTaskResult"
    )
    """The custom category task result."""

    @overload
    def __init__(
        self,
        *,
        setting_id: str,
        result_code: Union[str, "_models.ResultCode"],
        result_code_detail: str,
        is_blocking_criteria_met: bool,
        kind: Union[str, "_models.TaskType"],
        harm_category_task_result: Optional["_models.HarmCategoryTaskResult"] = None,
        blocklist_task_result: Optional["_models.BlocklistTaskResult"] = None,
        safety_incident_task_result: Optional["_models.SafetyIncidentTaskResult"] = None,
        custom_category_task_result: Optional["_models.CustomCategoryTaskResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TaskSetting(_model_base.Model):
    """Task setting model.


    :ivar setting_id: The setting ID. Required.
    :vartype setting_id: str
    :ivar setting_enabled: Indicates if the setting is enabled. Required.
    :vartype setting_enabled: bool
    :ivar applied_for: The applied for settings. Required.
    :vartype applied_for: list[~azure.ai.contentsafety.models.AppliedFor]
    :ivar kind: The task type. Required. Known values are: "harmCategory", "blocklist",
     "safetyIncident", and "customHarmCategory".
    :vartype kind: str or ~azure.ai.contentsafety.models.TaskType
    :ivar harm_category_task_setting: The harm category task setting.
    :vartype harm_category_task_setting: ~azure.ai.contentsafety.models.HarmCategoryTaskSetting
    :ivar blocklist_task_setting: The blocklist task setting.
    :vartype blocklist_task_setting: ~azure.ai.contentsafety.models.BlocklistTaskSetting
    :ivar safety_incident_task_setting: The safety incident task setting.
    :vartype safety_incident_task_setting: ~azure.ai.contentsafety.models.SafetyIncidentTaskSetting
    :ivar custom_harm_category_task_setting: The custom harm category task setting.
    :vartype custom_harm_category_task_setting:
     ~azure.ai.contentsafety.models.CustomHarmCategoryTaskSetting
    :ivar blocking_criteria: The blocking criteria. Required.
    :vartype blocking_criteria: ~azure.ai.contentsafety.models.BlockingCriteria
    """

    setting_id: str = rest_field(name="settingId")
    """The setting ID. Required."""
    setting_enabled: bool = rest_field(name="settingEnabled")
    """Indicates if the setting is enabled. Required."""
    applied_for: List["_models.AppliedFor"] = rest_field(name="appliedFor")
    """The applied for settings. Required."""
    kind: Union[str, "_models.TaskType"] = rest_field()
    """The task type. Required. Known values are: \"harmCategory\", \"blocklist\", \"safetyIncident\",
     and \"customHarmCategory\"."""
    harm_category_task_setting: Optional["_models.HarmCategoryTaskSetting"] = rest_field(name="harmCategoryTaskSetting")
    """The harm category task setting."""
    blocklist_task_setting: Optional["_models.BlocklistTaskSetting"] = rest_field(name="blocklistTaskSetting")
    """The blocklist task setting."""
    safety_incident_task_setting: Optional["_models.SafetyIncidentTaskSetting"] = rest_field(
        name="safetyIncidentTaskSetting"
    )
    """The safety incident task setting."""
    custom_harm_category_task_setting: Optional["_models.CustomHarmCategoryTaskSetting"] = rest_field(
        name="customHarmCategoryTaskSetting"
    )
    """The custom harm category task setting."""
    blocking_criteria: "_models.BlockingCriteria" = rest_field(name="blockingCriteria")
    """The blocking criteria. Required."""

    @overload
    def __init__(
        self,
        *,
        setting_id: str,
        setting_enabled: bool,
        applied_for: List["_models.AppliedFor"],
        kind: Union[str, "_models.TaskType"],
        blocking_criteria: "_models.BlockingCriteria",
        harm_category_task_setting: Optional["_models.HarmCategoryTaskSetting"] = None,
        blocklist_task_setting: Optional["_models.BlocklistTaskSetting"] = None,
        safety_incident_task_setting: Optional["_models.SafetyIncidentTaskSetting"] = None,
        custom_harm_category_task_setting: Optional["_models.CustomHarmCategoryTaskSetting"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextBlocklist(_model_base.Model):
    """Text Blocklist.


    :ivar blocklist_name: Text blocklist name. Required.
    :vartype blocklist_name: str
    :ivar description: Text blocklist description.
    :vartype description: str
    """

    blocklist_name: str = rest_field(name="blocklistName", visibility=["read", "create", "query"])
    """Text blocklist name. Required."""
    description: Optional[str] = rest_field()
    """Text blocklist description."""

    @overload
    def __init__(
        self,
        *,
        blocklist_name: str,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextBlocklistItem(_model_base.Model):
    """Item in a TextBlocklist.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar blocklist_item_id: The service will generate a BlocklistItemId, which will be a UUID.
     Required.
    :vartype blocklist_item_id: str
    :ivar description: BlocklistItem description.
    :vartype description: str
    :ivar text: BlocklistItem content. The length is counted using Unicode code point. Required.
    :vartype text: str
    :ivar is_regex: An optional properties indicating whether this item is to be matched as a
     regular expression.
    :vartype is_regex: bool
    """

    blocklist_item_id: str = rest_field(name="blocklistItemId", visibility=["read"])
    """The service will generate a BlocklistItemId, which will be a UUID. Required."""
    description: Optional[str] = rest_field()
    """BlocklistItem description."""
    text: str = rest_field()
    """BlocklistItem content. The length is counted using Unicode code point. Required."""
    is_regex: Optional[bool] = rest_field(name="isRegex")
    """An optional properties indicating whether this item is to be matched as a regular expression."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        description: Optional[str] = None,
        is_regex: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextBlocklistMatch(_model_base.Model):
    """The result of blocklist match.


    :ivar blocklist_name: The name of the matched blocklist. Required.
    :vartype blocklist_name: str
    :ivar blocklist_item_id: The ID of the matched item. Required.
    :vartype blocklist_item_id: str
    :ivar blocklist_item_text: The content of the matched item. Required.
    :vartype blocklist_item_text: str
    """

    blocklist_name: str = rest_field(name="blocklistName")
    """The name of the matched blocklist. Required."""
    blocklist_item_id: str = rest_field(name="blocklistItemId")
    """The ID of the matched item. Required."""
    blocklist_item_text: str = rest_field(name="blocklistItemText")
    """The content of the matched item. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_name: str,
        blocklist_item_id: str,
        blocklist_item_text: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextCategoriesAnalysis(_model_base.Model):
    """Text analysis result.


    :ivar category: The text analysis category. Required. Known values are: "Hate", "SelfHarm",
     "Sexual", "Violence", and "Drugs".
    :vartype category: str or ~azure.ai.contentsafety.models.TextCategory
    :ivar severity: The value increases with the severity of the input content. The value of this
     field is determined by the output type specified in the request. The output type could be
     ‘FourSeverityLevels’ or ‘EightSeverity Levels’, and the output value can be 0, 2, 4, 6 or 0, 1,
     2, 3, 4, 5, 6, or 7.
    :vartype severity: int
    """

    category: Union[str, "_models.TextCategory"] = rest_field()
    """The text analysis category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\",
     \"Violence\", and \"Drugs\"."""
    severity: Optional[int] = rest_field()
    """The value increases with the severity of the input content. The value of this field is
     determined by the output type specified in the request. The output type could be
     ‘FourSeverityLevels’ or ‘EightSeverity Levels’, and the output value can be 0, 2, 4, 6 or 0, 1,
     2, 3, 4, 5, 6, or 7."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.TextCategory"],
        severity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TextProtectedMaterialAnalysisResult(_model_base.Model):
    """The individual detection result of potential protected material.


    :ivar detected: Whether potential protected material is detected or not. Required.
    :vartype detected: bool
    """

    detected: bool = rest_field()
    """Whether potential protected material is detected or not. Required."""

    @overload
    def __init__(
        self,
        *,
        detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UnifyContent(_model_base.Model):
    """Unify content model.

    All required parameters must be populated in order to send to server.

    :ivar kind: The kind of the content. Required. Known values are: "text" and "image".
    :vartype kind: str or ~azure.ai.contentsafety.models.Modality
    :ivar text: The text content.
    :vartype text: str
    :ivar image_base64: The base64 encoded image content.
    :vartype image_base64: str
    :ivar image_blob: The blob URL of the image content.
    :vartype image_blob: str
    """

    kind: Union[str, "_models.Modality"] = rest_field()
    """The kind of the content. Required. Known values are: \"text\" and \"image\"."""
    text: Optional[str] = rest_field()
    """The text content."""
    image_base64: Optional[str] = rest_field(name="imageBase64")
    """The base64 encoded image content."""
    image_blob: Optional[str] = rest_field(name="imageBlob")
    """The blob URL of the image content."""

    @overload
    def __init__(
        self,
        *,
        kind: Union[str, "_models.Modality"],
        text: Optional[str] = None,
        image_base64: Optional[str] = None,
        image_blob: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UnifyMessage(_model_base.Model):
    """Unify message model.

    All required parameters must be populated in order to send to server.

    :ivar source: The source type of the message. Required. Known values are: "messageToAI" and
     "messageFromAI".
    :vartype source: str or ~azure.ai.contentsafety.models.SourceType
    :ivar role: The role of the message. Required. Known values are: "all", "user", "system",
     "assistant", and "tool".
    :vartype role: str or ~azure.ai.contentsafety.models.RoleType
    :ivar contents: The contents of the message. Required.
    :vartype contents: list[~azure.ai.contentsafety.models.UnifyContent]
    """

    source: Union[str, "_models.SourceType"] = rest_field()
    """The source type of the message. Required. Known values are: \"messageToAI\" and
     \"messageFromAI\"."""
    role: Union[str, "_models.RoleType"] = rest_field()
    """The role of the message. Required. Known values are: \"all\", \"user\", \"system\",
     \"assistant\", and \"tool\"."""
    contents: List["_models.UnifyContent"] = rest_field()
    """The contents of the message. Required."""

    @overload
    def __init__(
        self,
        *,
        source: Union[str, "_models.SourceType"],
        role: Union[str, "_models.RoleType"],
        contents: List["_models.UnifyContent"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserPromptInjectionAnalysisResult(_model_base.Model):
    """The individual analysis result of potential injection attacks in the given user prompt.


    :ivar attack_detected: Whether a potential injection attack is detected or not. Required.
    :vartype attack_detected: bool
    """

    attack_detected: bool = rest_field(name="attackDetected")
    """Whether a potential injection attack is detected or not. Required."""

    @overload
    def __init__(
        self,
        *,
        attack_detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
