# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AddOrUpdateTextBlocklistItemsOptions(_model_base.Model):
    """The request to add blocklistItems to a text blocklist.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklist_items: Array of blocklistItems to add. Required.
    :vartype blocklist_items: list[~azure.ai.contentsafety.models.TextBlocklistItem]
    """

    blocklist_items: List["_models.TextBlocklistItem"] = rest_field(name="blocklistItems")
    """Array of blocklistItems to add. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_items: List["_models.TextBlocklistItem"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AddOrUpdateTextBlocklistItemsResult(_model_base.Model):
    """The response of adding blocklistItems to the text blocklist.

    :ivar blocklist_items: Array of blocklistItems have been added.
    :vartype blocklist_items: list[~azure.ai.contentsafety.models.TextBlocklistItem]
    """

    blocklist_items: Optional[List["_models.TextBlocklistItem"]] = rest_field(name="blocklistItems")
    """Array of blocklistItems have been added."""

    @overload
    def __init__(
        self,
        *,
        blocklist_items: Optional[List["_models.TextBlocklistItem"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnalyzeImageOptions(_model_base.Model):
    """The image analysis request.

    All required parameters must be populated in order to send to Azure.

    :ivar image: The image needs to be analyzed. Required.
    :vartype image: ~azure.ai.contentsafety.models.ImageData
    :ivar categories: The categories will be analyzed. If they are not assigned, a default set of
     analysis results for the categories will be returned.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.ImageCategory]
    :ivar output_type: This refers to the type of image analysis output. If no value is assigned,
     the default value will be "FourSeverityLevels". "FourSeverityLevels"
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeImageOutputType
    :ivar project_name: Name of the project. When this field is provided, it means service will
     analyze the text with specified policy based on the given project name. If project name occurs
     with other configuration like categories, a bad request error will be returned.
    :vartype project_name: str
    """

    image: "_models.ImageData" = rest_field()
    """The image needs to be analyzed. Required."""
    categories: Optional[List[Union[str, "_models.ImageCategory"]]] = rest_field()
    """The categories will be analyzed. If they are not assigned, a default set of analysis results
     for the categories will be returned."""
    output_type: Optional[Union[str, "_models.AnalyzeImageOutputType"]] = rest_field(name="outputType")
    """This refers to the type of image analysis output. If no value is assigned, the default value
     will be \"FourSeverityLevels\". \"FourSeverityLevels\""""
    project_name: Optional[str] = rest_field(name="projectName")
    """Name of the project. When this field is provided, it means service will analyze the text with
     specified policy based on the given project name. If project name occurs with other
     configuration like categories, a bad request error will be returned."""

    @overload
    def __init__(
        self,
        *,
        image: "_models.ImageData",
        categories: Optional[List[Union[str, "_models.ImageCategory"]]] = None,
        output_type: Optional[Union[str, "_models.AnalyzeImageOutputType"]] = None,
        project_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnalyzeImageResult(_model_base.Model):
    """The image analysis response.

    All required parameters must be populated in order to send to Azure.

    :ivar categories_analysis: Analysis result for categories. Required.
    :vartype categories_analysis: list[~azure.ai.contentsafety.models.ImageCategoriesAnalysis]
    :ivar accepted: The decision made by service.
    :vartype accepted: bool
    """

    categories_analysis: List["_models.ImageCategoriesAnalysis"] = rest_field(name="categoriesAnalysis")
    """Analysis result for categories. Required."""
    accepted: Optional[bool] = rest_field()
    """The decision made by service."""

    @overload
    def __init__(
        self,
        *,
        categories_analysis: List["_models.ImageCategoriesAnalysis"],
        accepted: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnalyzeTextOptions(_model_base.Model):
    """The text analysis request.

    All required parameters must be populated in order to send to Azure.

    :ivar text: The text needs to be analyzed. We support a maximum of 10k Unicode characters
     (Unicode code points) in the text of one request. Required.
    :vartype text: str
    :ivar categories: The categories will be analyzed. If they are not assigned, a default set of
     analysis results for the categories will be returned.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.TextCategory]
    :ivar blocklist_names: The names of blocklists.
    :vartype blocklist_names: list[str]
    :ivar halt_on_blocklist_hit: When set to true, further analyses of harmful content will not be
     performed in cases where blocklists are hit. When set to false, all analyses of harmful content
     will be performed, whether or not blocklists are hit.
    :vartype halt_on_blocklist_hit: bool
    :ivar output_type: This refers to the type of text analysis output. If no value is assigned,
     the default value will be "FourSeverityLevels". "FourSeverityLevels"
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeTextOutputType
    :ivar project_name: Name of the project. When this field is provided, it means service will
     analyze the text with specified policy based on the given project name. If project name occurs
     with other configuration like categories, a bad request error will be returned.
    :vartype project_name: str
    """

    text: str = rest_field()
    """The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code
     points) in the text of one request. Required."""
    categories: Optional[List[Union[str, "_models.TextCategory"]]] = rest_field()
    """The categories will be analyzed. If they are not assigned, a default set of analysis results
     for the categories will be returned."""
    blocklist_names: Optional[List[str]] = rest_field(name="blocklistNames")
    """The names of blocklists."""
    halt_on_blocklist_hit: Optional[bool] = rest_field(name="haltOnBlocklistHit")
    """When set to true, further analyses of harmful content will not be performed in cases where
     blocklists are hit. When set to false, all analyses of harmful content will be performed,
     whether or not blocklists are hit."""
    output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = rest_field(name="outputType")
    """This refers to the type of text analysis output. If no value is assigned, the default value
     will be \"FourSeverityLevels\". \"FourSeverityLevels\""""
    project_name: Optional[str] = rest_field(name="projectName")
    """Name of the project. When this field is provided, it means service will analyze the text with
     specified policy based on the given project name. If project name occurs with other
     configuration like categories, a bad request error will be returned."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        categories: Optional[List[Union[str, "_models.TextCategory"]]] = None,
        blocklist_names: Optional[List[str]] = None,
        halt_on_blocklist_hit: Optional[bool] = None,
        output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = None,
        project_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnalyzeTextResult(_model_base.Model):
    """The text analysis response.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklists_match: The blocklist match details.
    :vartype blocklists_match: list[~azure.ai.contentsafety.models.TextBlocklistMatch]
    :ivar categories_analysis: Analysis result for categories. Required.
    :vartype categories_analysis: list[~azure.ai.contentsafety.models.TextCategoriesAnalysis]
    :ivar accepted: The accept decision made by service.
    :vartype accepted: bool
    """

    blocklists_match: Optional[List["_models.TextBlocklistMatch"]] = rest_field(name="blocklistsMatch")
    """The blocklist match details."""
    categories_analysis: List["_models.TextCategoriesAnalysis"] = rest_field(name="categoriesAnalysis")
    """Analysis result for categories. Required."""
    accepted: Optional[bool] = rest_field()
    """The accept decision made by service."""

    @overload
    def __init__(
        self,
        *,
        categories_analysis: List["_models.TextCategoriesAnalysis"],
        blocklists_match: Optional[List["_models.TextBlocklistMatch"]] = None,
        accepted: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BlocklistPolicy(_model_base.Model):
    """Policy for blocklist.

    :ivar blocklist_names: The names of blocklists.
    :vartype blocklist_names: list[str]
    :ivar halt_on_blocklist_hit: When set to true, further analyses of harmful content will not be
     performed in cases where blocklists are hit. When set to false, all analyses of harmful content
     will be performed, whether or not blocklists are hit.
    :vartype halt_on_blocklist_hit: bool
    """

    blocklist_names: Optional[List[str]] = rest_field(name="blocklistNames")
    """The names of blocklists."""
    halt_on_blocklist_hit: Optional[bool] = rest_field(name="haltOnBlocklistHit")
    """When set to true, further analyses of harmful content will not be performed in cases where
     blocklists are hit. When set to false, all analyses of harmful content will be performed,
     whether or not blocklists are hit."""

    @overload
    def __init__(
        self,
        *,
        blocklist_names: Optional[List[str]] = None,
        halt_on_blocklist_hit: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageCategoriesAnalysis(_model_base.Model):
    """Image analysis result.

    All required parameters must be populated in order to send to Azure.

    :ivar category: The image analysis category. Required. Known values are: "Hate", "SelfHarm",
     "Sexual", and "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.ImageCategory
    :ivar severity: The value of this field is determined by the outputType specified in the
     request. If 'FourSeverityLevels' is chosen, this field will be included in the output. The
     value can be 0, 2, 4, or 6, and it increases with the severity of the input content.
    :vartype severity: int
    :ivar accepted: The decision made by service.
    :vartype accepted: bool
    """

    category: Union[str, "_models.ImageCategory"] = rest_field()
    """The image analysis category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\",
     and \"Violence\"."""
    severity: Optional[int] = rest_field()
    """The value of this field is determined by the outputType specified in the request. If
     'FourSeverityLevels' is chosen, this field will be included in the output. The value can be 0,
     2, 4, or 6, and it increases with the severity of the input content."""
    accepted: Optional[bool] = rest_field()
    """The decision made by service."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ImageCategory"],
        severity: Optional[int] = None,
        accepted: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageCategoryPolicy(_model_base.Model):
    """ImageCategoryPolicy. Content which severity less than the acceptLessThan will be accepted.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Image category. Required. Known values are: "Hate", "SelfHarm", "Sexual", and
     "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.ImageCategory
    :ivar accept_less_than: Severity less than the threshold will be treated as accepted for the
     category. Required. Known values are: "Zero：0", "Two：2", "Four：4", "Six：6", and "-1".
    :vartype accept_less_than: str or ~azure.ai.contentsafety.models.SeverityThreshold
    """

    category: Union[str, "_models.ImageCategory"] = rest_field()
    """Image category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\", and
     \"Violence\"."""
    accept_less_than: Union[str, "_models.SeverityThreshold"] = rest_field(name="acceptLessThan")
    """Severity less than the threshold will be treated as accepted for the category. Required. Known
     values are: \"Zero：0\", \"Two：2\", \"Four：4\", \"Six：6\", and \"-1\"."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ImageCategory"],
        accept_less_than: Union[str, "_models.SeverityThreshold"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageData(_model_base.Model):
    """The image can be either base64 encoded bytes or a blob URL. You can choose only one of these
    options. If both are provided, the request will be refused. The maximum image size is 2048 x
    2048 pixels and should not exceed 4 MB, while the minimum image size is 50 x 50 pixels.

    :ivar content: The Base64 encoding of the image.
    :vartype content: bytes
    :ivar blob_url: The blob url of the image.
    :vartype blob_url: str
    """

    content: Optional[bytes] = rest_field(format="base64")
    """The Base64 encoding of the image."""
    blob_url: Optional[str] = rest_field(name="blobUrl")
    """The blob url of the image."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        blob_url: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImagePolicy(_model_base.Model):
    """Policy for the image.

    All required parameters must be populated in order to send to Azure.

    :ivar category_policies: The category policy. The length must be larger than 0. Required.
    :vartype category_policies: list[~azure.ai.contentsafety.models.ImageCategoryPolicy]
    :ivar output_type: The type of text analysis output. If not assigned, the default value is
     "FourSeverityLevels". "FourSeverityLevels"
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeTextOutputType
    """

    category_policies: List["_models.ImageCategoryPolicy"] = rest_field(name="categoryPolicies")
    """The category policy. The length must be larger than 0. Required."""
    output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = rest_field(name="outputType")
    """The type of text analysis output. If not assigned, the default value is \"FourSeverityLevels\".
     \"FourSeverityLevels\""""

    @overload
    def __init__(
        self,
        *,
        category_policies: List["_models.ImageCategoryPolicy"],
        output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Project(_model_base.Model):
    """Project is an entity to manage deployment with specified policy.

    All required parameters must be populated in order to send to Azure.

    :ivar project_name: Project name. Required.
    :vartype project_name: str
    :ivar description: Project description.
    :vartype description: str
    :ivar modality: Project modality. Required. Known values are: "Text" and "Image".
    :vartype modality: str or ~azure.ai.contentsafety.models.ContentModality
    :ivar display_name: Project display name.
    :vartype display_name: str
    :ivar created_at: Project created time.
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_at: Project last modified time.
    :vartype last_modified_at: ~datetime.datetime
    :ivar text_policy: Deployed text policy.
    :vartype text_policy: ~azure.ai.contentsafety.models.TextPolicy
    :ivar image_policy: Deployed image policy.
    :vartype image_policy: ~azure.ai.contentsafety.models.ImagePolicy
    """

    project_name: str = rest_field(name="projectName", visibility=["read", "query"])
    """Project name. Required."""
    description: Optional[str] = rest_field()
    """Project description."""
    modality: Union[str, "_models.ContentModality"] = rest_field(visibility=["read", "query", "create"])
    """Project modality. Required. Known values are: \"Text\" and \"Image\"."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Project display name."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "query"], format="rfc3339"
    )
    """Project created time."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "query"], format="rfc3339"
    )
    """Project last modified time."""
    text_policy: Optional["_models.TextPolicy"] = rest_field(name="textPolicy")
    """Deployed text policy."""
    image_policy: Optional["_models.ImagePolicy"] = rest_field(name="imagePolicy")
    """Deployed image policy."""

    @overload
    def __init__(
        self,
        *,
        project_name: str,
        modality: Union[str, "_models.ContentModality"],
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        text_policy: Optional["_models.TextPolicy"] = None,
        image_policy: Optional["_models.ImagePolicy"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RemoveTextBlocklistItemsOptions(_model_base.Model):
    """The request to remove blocklistItems from a text blocklist.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklist_item_ids: Array of blocklistItemIds to remove. Required.
    :vartype blocklist_item_ids: list[str]
    """

    blocklist_item_ids: List[str] = rest_field(name="blocklistItemIds")
    """Array of blocklistItemIds to remove. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_item_ids: List[str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextBlocklist(_model_base.Model):
    """Text Blocklist.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklist_name: Text blocklist name. Required.
    :vartype blocklist_name: str
    :ivar description: Text blocklist description.
    :vartype description: str
    """

    blocklist_name: str = rest_field(name="blocklistName", visibility=["read", "create", "query"])
    """Text blocklist name. Required."""
    description: Optional[str] = rest_field()
    """Text blocklist description."""

    @overload
    def __init__(
        self,
        *,
        blocklist_name: str,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextBlocklistItem(_model_base.Model):
    """Item in a TextBlocklist.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklist_item_id: The service will generate a BlocklistItemId, which will be a UUID.
     Required.
    :vartype blocklist_item_id: str
    :ivar description: BlocklistItem description.
    :vartype description: str
    :ivar text: BlocklistItem content. Required.
    :vartype text: str
    """

    blocklist_item_id: str = rest_field(name="blocklistItemId", visibility=["read"])
    """The service will generate a BlocklistItemId, which will be a UUID. Required."""
    description: Optional[str] = rest_field()
    """BlocklistItem description."""
    text: str = rest_field()
    """BlocklistItem content. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextBlocklistMatch(_model_base.Model):
    """The result of blocklist match.

    All required parameters must be populated in order to send to Azure.

    :ivar blocklist_name: The name of the matched blocklist. Required.
    :vartype blocklist_name: str
    :ivar blocklist_item_id: The ID of the matched item. Required.
    :vartype blocklist_item_id: str
    :ivar blocklist_item_text: The content of the matched item. Required.
    :vartype blocklist_item_text: str
    """

    blocklist_name: str = rest_field(name="blocklistName")
    """The name of the matched blocklist. Required."""
    blocklist_item_id: str = rest_field(name="blocklistItemId")
    """The ID of the matched item. Required."""
    blocklist_item_text: str = rest_field(name="blocklistItemText")
    """The content of the matched item. Required."""

    @overload
    def __init__(
        self,
        *,
        blocklist_name: str,
        blocklist_item_id: str,
        blocklist_item_text: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextCategoriesAnalysis(_model_base.Model):
    """Text analysis result.

    All required parameters must be populated in order to send to Azure.

    :ivar category: The text analysis category. Required. Known values are: "Hate", "SelfHarm",
     "Sexual", and "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.TextCategory
    :ivar severity: The value of this field is determined by the outputType specified in the
     request. If 'FourSeverityLevels' is chosen, this field will be included in the output. The
     value can be 0, 2, 4, or 6, and it increases with the severity of the input content.
    :vartype severity: int
    :ivar accepted: The decision made by service.
    :vartype accepted: bool
    """

    category: Union[str, "_models.TextCategory"] = rest_field()
    """The text analysis category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\", and
     \"Violence\"."""
    severity: Optional[int] = rest_field()
    """The value of this field is determined by the outputType specified in the request. If
     'FourSeverityLevels' is chosen, this field will be included in the output. The value can be 0,
     2, 4, or 6, and it increases with the severity of the input content."""
    accepted: Optional[bool] = rest_field()
    """The decision made by service."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.TextCategory"],
        severity: Optional[int] = None,
        accepted: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextCategoryPolicy(_model_base.Model):
    """TextCategoryPolicy. Content which severity less than the acceptLessThan will be accepted.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Text category. Required. Known values are: "Hate", "SelfHarm", "Sexual", and
     "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.TextCategory
    :ivar accept_less_than: Severity less than the threshold will be treated as accepted for the
     category. Required. Known values are: "Zero：0", "Two：2", "Four：4", "Six：6", and "-1".
    :vartype accept_less_than: str or ~azure.ai.contentsafety.models.SeverityThreshold
    """

    category: Union[str, "_models.TextCategory"] = rest_field()
    """Text category. Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\", and
     \"Violence\"."""
    accept_less_than: Union[str, "_models.SeverityThreshold"] = rest_field(name="acceptLessThan")
    """Severity less than the threshold will be treated as accepted for the category. Required. Known
     values are: \"Zero：0\", \"Two：2\", \"Four：4\", \"Six：6\", and \"-1\"."""

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.TextCategory"],
        accept_less_than: Union[str, "_models.SeverityThreshold"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextPolicy(_model_base.Model):
    """Policy for the text.

    All required parameters must be populated in order to send to Azure.

    :ivar category_policies: The category policy. The length must be larger than 0. Required.
    :vartype category_policies: list[~azure.ai.contentsafety.models.TextCategoryPolicy]
    :ivar blocklist_policy: The policy of blocklist.
    :vartype blocklist_policy: ~azure.ai.contentsafety.models.BlocklistPolicy
    :ivar output_type: The type of text analysis output. If not assigned, the default value is
     "FourSeverityLevels". "FourSeverityLevels"
    :vartype output_type: str or ~azure.ai.contentsafety.models.AnalyzeTextOutputType
    """

    category_policies: List["_models.TextCategoryPolicy"] = rest_field(name="categoryPolicies")
    """The category policy. The length must be larger than 0. Required."""
    blocklist_policy: Optional["_models.BlocklistPolicy"] = rest_field(name="blocklistPolicy")
    """The policy of blocklist."""
    output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = rest_field(name="outputType")
    """The type of text analysis output. If not assigned, the default value is \"FourSeverityLevels\".
     \"FourSeverityLevels\""""

    @overload
    def __init__(
        self,
        *,
        category_policies: List["_models.TextCategoryPolicy"],
        blocklist_policy: Optional["_models.BlocklistPolicy"] = None,
        output_type: Optional[Union[str, "_models.AnalyzeTextOutputType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
