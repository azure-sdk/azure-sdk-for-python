# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.alertsmanagement.aio import AlertsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAlertsManagementPrometheusRuleGroupsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AlertsManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_list_by_subscription(self, resource_group):
        response = self.client.prometheus_rule_groups.list_by_subscription(
            api_version="2023-03-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_list_by_resource_group(self, resource_group):
        response = self.client.prometheus_rule_groups.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2023-03-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_get(self, resource_group):
        response = await self.client.prometheus_rule_groups.get(
            resource_group_name=resource_group.name,
            rule_group_name="str",
            api_version="2023-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_create_or_update(self, resource_group):
        response = await self.client.prometheus_rule_groups.create_or_update(
            resource_group_name=resource_group.name,
            rule_group_name="str",
            parameters={
                "location": "str",
                "rules": [
                    {
                        "expression": "str",
                        "actions": [{"actionGroupId": "str", "actionProperties": {"str": "str"}}],
                        "alert": "str",
                        "annotations": {"str": "str"},
                        "enabled": bool,
                        "for": "1 day, 0:00:00",
                        "labels": {"str": "str"},
                        "record": "str",
                        "resolveConfiguration": {"autoResolved": bool, "timeToResolve": "1 day, 0:00:00"},
                        "severity": 0,
                    }
                ],
                "scopes": ["str"],
                "clusterName": "str",
                "description": "str",
                "enabled": bool,
                "id": "str",
                "interval": "1 day, 0:00:00",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_update(self, resource_group):
        response = await self.client.prometheus_rule_groups.update(
            resource_group_name=resource_group.name,
            rule_group_name="str",
            parameters={"enabled": bool, "tags": {"str": "str"}},
            api_version="2023-03-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_prometheus_rule_groups_delete(self, resource_group):
        response = await self.client.prometheus_rule_groups.delete(
            resource_group_name=resource_group.name,
            rule_group_name="str",
            api_version="2023-03-01",
        )

        # please add some check logic here by yourself
        # ...
