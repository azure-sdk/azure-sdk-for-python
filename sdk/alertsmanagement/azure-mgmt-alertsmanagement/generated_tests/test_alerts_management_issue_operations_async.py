# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.alertsmanagement.aio import AlertsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAlertsManagementIssueOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AlertsManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_list(self, resource_group):
        response = self.client.issue.list(
            resource_uri="str",
            api_version="2025-03-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_get(self, resource_group):
        response = await self.client.issue.get(
            resource_uri="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_create(self, resource_group):
        response = await self.client.issue.create(
            resource_uri="str",
            resource={
                "id": "str",
                "name": "str",
                "properties": {
                    "alertsCount": 0,
                    "impactTime": "2020-02-20 00:00:00",
                    "investigations": [
                        {
                            "createdAt": "2020-02-20 00:00:00",
                            "execution": {"completedAt": "2020-02-20 00:00:00", "runState": "str"},
                            "id": "str",
                            "runParameters": {
                                "alerts": [
                                    {
                                        "id": "str",
                                        "origin": {"addedBy": "str", "addedByType": "str"},
                                        "relevance": "str",
                                    }
                                ],
                                "impactTime": "2020-02-20 00:00:00",
                                "resources": [
                                    {
                                        "id": "str",
                                        "origin": {"addedBy": "str", "addedByType": "str"},
                                        "relevance": "str",
                                    }
                                ],
                            },
                        }
                    ],
                    "investigationsCount": 0,
                    "resourcesCount": 0,
                    "severity": "str",
                    "status": "str",
                    "title": "str",
                    "provisioningState": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_update(self, resource_group):
        response = await self.client.issue.update(
            resource_uri="str",
            properties={
                "id": "str",
                "name": "str",
                "properties": {"impactTime": "2020-02-20 00:00:00", "severity": "str", "status": "str", "title": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_delete(self, resource_group):
        response = await self.client.issue.delete(
            resource_uri="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_add_or_update_alerts(self, resource_group):
        response = await self.client.issue.add_or_update_alerts(
            resource_uri="str",
            body={
                "value": [
                    {
                        "addedAt": "2020-02-20 00:00:00",
                        "id": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "origin": {"addedBy": "str", "addedByType": "str"},
                        "relevance": "str",
                    }
                ]
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_add_or_update_resources(self, resource_group):
        response = await self.client.issue.add_or_update_resources(
            resource_uri="str",
            body={
                "value": [
                    {
                        "addedAt": "2020-02-20 00:00:00",
                        "id": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "origin": {"addedBy": "str", "addedByType": "str"},
                        "relevance": "str",
                    }
                ]
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_fetch_investigation_result(self, resource_group):
        response = await self.client.issue.fetch_investigation_result(
            resource_uri="str",
            body={"investigationId": "str"},
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_list_alerts(self, resource_group):
        response = self.client.issue.list_alerts(
            resource_uri="str",
            body={"filter": "str"},
            api_version="2025-03-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_list_resources(self, resource_group):
        response = self.client.issue.list_resources(
            resource_uri="str",
            body={"filter": "str"},
            api_version="2025-03-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_issue_start_investigation(self, resource_group):
        response = await self.client.issue.start_investigation(
            resource_uri="str",
            body={
                "investigationScopes": [
                    {"id": "str", "origin": {"addedBy": "str", "addedByType": "str"}, "relevance": "str"}
                ],
                "impactTime": "2020-02-20 00:00:00",
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...
