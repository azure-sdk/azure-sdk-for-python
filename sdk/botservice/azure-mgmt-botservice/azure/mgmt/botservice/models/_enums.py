# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Access Mode of the resource association."""

    ENFORCED = "Enforced"
    LEARNING = "Learning"
    AUDIT = "Audit"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The kind of entity that created the resource."""

    USER = "User"
    """The entity was created by a user."""
    APPLICATION = "Application"
    """The entity was created by an application."""
    MANAGED_IDENTITY = "ManagedIdentity"
    """The entity was created by a managed identity."""
    KEY = "Key"
    """The entity was created by a key."""


class EmailChannelAuthMethod(int, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Email channel auth method. 0 Password (Default); 1 Graph."""

    PASSWORD = 0
    """Basic authentication."""
    GRAPH = 1
    """Modern authentication."""


class Key(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines which key is to be regenerated."""

    KEY1 = "key1"
    KEY2 = "key2"


class Kind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates the type of bot service."""

    SDK = "sdk"
    DESIGNER = "designer"
    BOT = "bot"
    FUNCTION = "function"
    AZUREBOT = "azurebot"


class MsaAppType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Microsoft App Type for the bot."""

    USER_ASSIGNED_MSI = "UserAssignedMSI"
    SINGLE_TENANT = "SingleTenant"
    MULTI_TENANT = "MultiTenant"


class NspAccessRuleDirection(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Direction of Access Rule."""

    INBOUND = "Inbound"
    OUTBOUND = "Outbound"


class OperationResultStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the operation being performed."""

    CANCELED = "Canceled"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    REQUESTED = "Requested"
    RUNNING = "Running"


class PrivateEndpointConnectionProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The current provisioning state."""

    SUCCEEDED = "Succeeded"
    CREATING = "Creating"
    DELETING = "Deleting"
    FAILED = "Failed"


class PrivateEndpointServiceConnectionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The private endpoint connection status."""

    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of ProvisioningState."""

    CREATING = "Creating"
    UPDATING = "Updating"
    ACCEPTED = "Accepted"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    DELETING = "Deleting"


class PublicNetworkAccess(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Whether the bot is in an isolated network."""

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    SECURED_BY_PERIMETER = "SecuredByPerimeter"


class Severity(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of Network Security Perimeter configuration propagation."""

    WARNING = "Warning"
    ERROR = "Error"


class SkuName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The name of SKU."""

    F0 = "F0"
    S1 = "S1"


class SkuTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Gets the sku tier. This is based on the SKU name."""

    FREE = "Free"
    STANDARD = "Standard"
