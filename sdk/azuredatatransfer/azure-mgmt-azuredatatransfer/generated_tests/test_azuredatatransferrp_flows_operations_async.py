# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azuredatatransfer.aio import Azuredatatransferrp

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzuredatatransferrpFlowsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(Azuredatatransferrp, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.flows.get(
            resource_group_name=resource_group.name,
            connection_name="str",
            flow_name="str",
            api_version="2024-09-10",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.flows.begin_create_or_update(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                flow={
                    "location": "str",
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "name": "str",
                    "plan": {
                        "name": "str",
                        "product": "str",
                        "publisher": "str",
                        "promotionCode": "str",
                        "version": "str",
                    },
                    "properties": {
                        "connection": {"id": "str", "location": "str", "name": "str", "subscriptionName": "str"},
                        "customerManagedKeyVaultUri": "str",
                        "dataType": "str",
                        "flowId": "str",
                        "flowType": "str",
                        "keyVaultUri": "str",
                        "linkStatus": "str",
                        "linkedFlowId": "str",
                        "messagingOptions": {"billingTier": "str"},
                        "policies": ["str"],
                        "provisioningState": "str",
                        "schema": {
                            "connectionId": "str",
                            "content": "str",
                            "direction": "str",
                            "id": "str",
                            "name": "str",
                            "schemaType": "str",
                            "schemaUri": "str",
                            "status": "str",
                        },
                        "serviceBusQueueId": "str",
                        "status": "str",
                        "storageAccountId": "str",
                        "storageAccountName": "str",
                        "storageContainerName": "str",
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_delete(self, resource_group):
        response = await (
            await self.client.flows.begin_delete(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update(self, resource_group):
        response = await (
            await self.client.flows.begin_update(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                flow={
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "tags": {"str": "str"},
                },
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_enable(self, resource_group):
        response = await (
            await self.client.flows.begin_enable(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_disable(self, resource_group):
        response = await (
            await self.client.flows.begin_disable(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_link(self, resource_group):
        response = await (
            await self.client.flows.begin_link(
                resource_group_name=resource_group.name,
                connection_name="str",
                flow_name="str",
                flow={"id": "str", "statusReason": "str"},
                api_version="2024-09-10",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_connection(self, resource_group):
        response = self.client.flows.list_by_connection(
            resource_group_name=resource_group.name,
            connection_name="str",
            api_version="2024-09-10",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
