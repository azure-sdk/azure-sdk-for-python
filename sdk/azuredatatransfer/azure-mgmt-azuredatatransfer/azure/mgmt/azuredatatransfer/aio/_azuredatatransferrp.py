# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING
from typing_extensions import Self

from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient
from azure.mgmt.core.policies import AsyncARMAutoResourceProviderRegistrationPolicy

from .. import models as _models
from .._serialization import Deserializer, Serializer
from ._configuration import AzuredatatransferrpConfiguration
from .operations import (
    AzureDataTransferOperations,
    ConnectionsOperations,
    FlowsOperations,
    ListPendingConnectionsOperations,
    ListPendingFlowsOperations,
    ListSchemasOperations,
    Operations,
    PipelinesOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class Azuredatatransferrp:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """Azure Data Transfer service resource provider.

    :ivar azure_data_transfer: AzureDataTransferOperations operations
    :vartype azure_data_transfer:
     azure.mgmt.azuredatatransfer.aio.operations.AzureDataTransferOperations
    :ivar flows: FlowsOperations operations
    :vartype flows: azure.mgmt.azuredatatransfer.aio.operations.FlowsOperations
    :ivar connections: ConnectionsOperations operations
    :vartype connections: azure.mgmt.azuredatatransfer.aio.operations.ConnectionsOperations
    :ivar list_pending_connections: ListPendingConnectionsOperations operations
    :vartype list_pending_connections:
     azure.mgmt.azuredatatransfer.aio.operations.ListPendingConnectionsOperations
    :ivar list_pending_flows: ListPendingFlowsOperations operations
    :vartype list_pending_flows:
     azure.mgmt.azuredatatransfer.aio.operations.ListPendingFlowsOperations
    :ivar pipelines: PipelinesOperations operations
    :vartype pipelines: azure.mgmt.azuredatatransfer.aio.operations.PipelinesOperations
    :ivar list_schemas: ListSchemasOperations operations
    :vartype list_schemas: azure.mgmt.azuredatatransfer.aio.operations.ListSchemasOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.azuredatatransfer.aio.operations.Operations
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
    :type subscription_id: str
    :param base_url: Service URL. Default value is "https://management.azure.com".
    :type base_url: str
    :keyword api_version: Api Version. Default value is "2024-09-27". Note that overriding this
     default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: str = "https://management.azure.com",
        **kwargs: Any
    ) -> None:
        self._config = AzuredatatransferrpConfiguration(
            credential=credential, subscription_id=subscription_id, **kwargs
        )
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                AsyncARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncARMPipelineClient = AsyncARMPipelineClient(base_url=base_url, policies=_policies, **kwargs)

        client_models = {k: v for k, v in _models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.azure_data_transfer = AzureDataTransferOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.flows = FlowsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.connections = ConnectionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.list_pending_connections = ListPendingConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.list_pending_flows = ListPendingFlowsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.pipelines = PipelinesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.list_schemas = ListSchemasOperations(self._client, self._config, self._serialize, self._deserialize)
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)

    def _send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client._send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> Self:
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
