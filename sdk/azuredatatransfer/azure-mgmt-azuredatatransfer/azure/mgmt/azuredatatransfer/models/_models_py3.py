# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Connection(TrackedResource):
    """The connection resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of connection.
    :vartype properties: ~azure.mgmt.azuredatatransfer.models.ConnectionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "ConnectionProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ConnectionProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Properties of connection.
        :paramtype properties: ~azure.mgmt.azuredatatransfer.models.ConnectionProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class ConnectionProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of connection.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar pipeline: Pipeline to use to transfer data. Required.
    :vartype pipeline: str
    :ivar direction: Direction of data movement. Known values are: "Send" and "Receive".
    :vartype direction: str or ~azure.mgmt.azuredatatransfer.models.Direction
    :ivar justification: Justification for the connection request.
    :vartype justification: str
    :ivar status: Status of the connection. Known values are: "InReview", "Approved", "Rejected",
     and "Accepted".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.Status
    :ivar status_reason: Reason for status.
    :vartype status_reason: str
    :ivar link_status: Link status of the current connection. Known values are: "Linked" and
     "Unlinked".
    :vartype link_status: str or ~azure.mgmt.azuredatatransfer.models.LinkStatus
    :ivar linked_connection_id: Resource ID of the linked connection.
    :vartype linked_connection_id: str
    :ivar flow_types: The flow types being requested for this connection.
    :vartype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
    :ivar requirement_id: Requirement ID of the connection.
    :vartype requirement_id: str
    :ivar remote_subscription_id: Subscription ID to link cloud subscriptions together.
    :vartype remote_subscription_id: str
    :ivar approver: Approver of this connection request.
    :vartype approver: str
    :ivar pin: PIN to link requests together.
    :vartype pin: str
    :ivar date_submitted: The timestamp that this connection request was submitted at.
    :vartype date_submitted: ~datetime.datetime
    :ivar primary_contact: The primary contact for this connection request.
    :vartype primary_contact: str
    :ivar secondary_contacts: The secondary contacts for this connection request.
    :vartype secondary_contacts: list[str]
    :ivar provisioning_state: Provisioning state of the connection. Known values are: "Failed",
     "Succeeded", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azuredatatransfer.models.ProvisioningState
    :ivar policies: The policies for this connection.
    :vartype policies: list[str]
    :ivar schemas: The schemas for this connection.
    :vartype schemas: list[~azure.mgmt.azuredatatransfer.models.Schema]
    :ivar schema_uris: The schema URIs for this connection.
    :vartype schema_uris: list[str]
    """

    _validation = {
        "pipeline": {"required": True},
        "status": {"readonly": True},
        "status_reason": {"readonly": True},
        "link_status": {"readonly": True},
        "linked_connection_id": {"readonly": True},
        "approver": {"readonly": True},
        "date_submitted": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "pipeline": {"key": "pipeline", "type": "str"},
        "direction": {"key": "direction", "type": "str"},
        "justification": {"key": "justification", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_reason": {"key": "statusReason", "type": "str"},
        "link_status": {"key": "linkStatus", "type": "str"},
        "linked_connection_id": {"key": "linkedConnectionId", "type": "str"},
        "flow_types": {"key": "flowTypes", "type": "[str]"},
        "requirement_id": {"key": "requirementId", "type": "str"},
        "remote_subscription_id": {"key": "remoteSubscriptionId", "type": "str"},
        "approver": {"key": "approver", "type": "str"},
        "pin": {"key": "pin", "type": "str"},
        "date_submitted": {"key": "dateSubmitted", "type": "iso-8601"},
        "primary_contact": {"key": "primaryContact", "type": "str"},
        "secondary_contacts": {"key": "secondaryContacts", "type": "[str]"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "policies": {"key": "policies", "type": "[str]"},
        "schemas": {"key": "schemas", "type": "[Schema]"},
        "schema_uris": {"key": "schemaUris", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        pipeline: str,
        direction: Optional[Union[str, "_models.Direction"]] = None,
        justification: Optional[str] = None,
        flow_types: Optional[List[Union[str, "_models.FlowType"]]] = None,
        requirement_id: Optional[str] = None,
        remote_subscription_id: Optional[str] = None,
        pin: Optional[str] = None,
        primary_contact: Optional[str] = None,
        secondary_contacts: Optional[List[str]] = None,
        policies: Optional[List[str]] = None,
        schemas: Optional[List["_models.Schema"]] = None,
        schema_uris: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword pipeline: Pipeline to use to transfer data. Required.
        :paramtype pipeline: str
        :keyword direction: Direction of data movement. Known values are: "Send" and "Receive".
        :paramtype direction: str or ~azure.mgmt.azuredatatransfer.models.Direction
        :keyword justification: Justification for the connection request.
        :paramtype justification: str
        :keyword flow_types: The flow types being requested for this connection.
        :paramtype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
        :keyword requirement_id: Requirement ID of the connection.
        :paramtype requirement_id: str
        :keyword remote_subscription_id: Subscription ID to link cloud subscriptions together.
        :paramtype remote_subscription_id: str
        :keyword pin: PIN to link requests together.
        :paramtype pin: str
        :keyword primary_contact: The primary contact for this connection request.
        :paramtype primary_contact: str
        :keyword secondary_contacts: The secondary contacts for this connection request.
        :paramtype secondary_contacts: list[str]
        :keyword policies: The policies for this connection.
        :paramtype policies: list[str]
        :keyword schemas: The schemas for this connection.
        :paramtype schemas: list[~azure.mgmt.azuredatatransfer.models.Schema]
        :keyword schema_uris: The schema URIs for this connection.
        :paramtype schema_uris: list[str]
        """
        super().__init__(**kwargs)
        self.pipeline = pipeline
        self.direction = direction
        self.justification = justification
        self.status = None
        self.status_reason = None
        self.link_status = None
        self.linked_connection_id = None
        self.flow_types = flow_types
        self.requirement_id = requirement_id
        self.remote_subscription_id = remote_subscription_id
        self.approver = None
        self.pin = pin
        self.date_submitted = None
        self.primary_contact = primary_contact
        self.secondary_contacts = secondary_contacts
        self.provisioning_state = None
        self.policies = policies
        self.schemas = schemas
        self.schema_uris = schema_uris


class ConnectionsListResult(_serialization.Model):
    """The connections list result.

    :ivar value: Connections array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.Connection]
    :ivar next_link: Link to next results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Connection]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.Connection"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: Connections array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.Connection]
        :keyword next_link: Link to next results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ConnectionsPatch(_serialization.Model):
    """The connections resource patch definition.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.azuredatatransfer.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.azuredatatransfer.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.azuredatatransfer.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.azuredatatransfer.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class Flow(TrackedResource):
    """The flow resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of flow.
    :vartype properties: ~azure.mgmt.azuredatatransfer.models.FlowProperties
    :ivar plan: Plan for the resource.
    :vartype plan: ~azure.mgmt.azuredatatransfer.models.Plan
    :ivar identity: The managed identity of the flow resource, if configured.
    :vartype identity: ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentity
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "FlowProperties"},
        "plan": {"key": "plan", "type": "Plan"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.FlowProperties"] = None,
        plan: Optional["_models.Plan"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Properties of flow.
        :paramtype properties: ~azure.mgmt.azuredatatransfer.models.FlowProperties
        :keyword plan: Plan for the resource.
        :paramtype plan: ~azure.mgmt.azuredatatransfer.models.Plan
        :keyword identity: The managed identity of the flow resource, if configured.
        :paramtype identity: ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentity
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.plan = plan
        self.identity = identity


class FlowProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of flow.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar connection: The connection associated with this flow.
    :vartype connection: ~azure.mgmt.azuredatatransfer.models.SelectedResource
    :ivar flow_id: Dataflow GUID associated with this flow.
    :vartype flow_id: str
    :ivar key_vault_uri: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
    :vartype key_vault_uri: str
    :ivar link_status: Link status of the current flow. Known values are: "Linked" and "Unlinked".
    :vartype link_status: str or ~azure.mgmt.azuredatatransfer.models.LinkStatusFlow
    :ivar linked_flow_id: Resource ID of the linked flow.
    :vartype linked_flow_id: str
    :ivar status: Status of the current flow. Known values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.FlowStatus
    :ivar storage_account_name: Storage Account.
    :vartype storage_account_name: str
    :ivar storage_account_id: Storage Account ID.
    :vartype storage_account_id: str
    :ivar storage_container_name: Storage Container Name.
    :vartype storage_container_name: str
    :ivar service_bus_queue_id: Service Bus Queue ID.
    :vartype service_bus_queue_id: str
    :ivar flow_type: The flow type for this flow. Known values are: "Unknown", "Complex",
     "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard",
     "StreamingVideo", "Opaque", and "MissionOpaqueXML".
    :vartype flow_type: str or ~azure.mgmt.azuredatatransfer.models.FlowType
    :ivar data_type: Transfer Storage Blobs or Tables. Known values are: "Blob" and "Table".
    :vartype data_type: str or ~azure.mgmt.azuredatatransfer.models.DataType
    :ivar provisioning_state: Provisioning state of the flow. Known values are: "Failed",
     "Succeeded", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azuredatatransfer.models.ProvisioningState
    :ivar policies: The policies for this flow.
    :vartype policies: list[str]
    :ivar schema: The selected schema for this flow.
    :vartype schema: ~azure.mgmt.azuredatatransfer.models.Schema
    :ivar messaging_options: The messaging options for this flow.
    :vartype messaging_options: ~azure.mgmt.azuredatatransfer.models.MessagingOptions
    :ivar customer_managed_key_vault_uri: The URI to the customer managed key for this flow.
    :vartype customer_managed_key_vault_uri: str
    :ivar stream_id: The flow stream identifier.
    :vartype stream_id: str
    :ivar stream_protocol: The protocol of the stream. Known values are: "UDP", "SRT", and "RTP".
    :vartype stream_protocol: str or ~azure.mgmt.azuredatatransfer.models.StreamProtocol
    :ivar stream_latency: The latency of the stream in milliseconds.
    :vartype stream_latency: int
    :ivar passphrase: The passphrase used for SRT streams.
    :vartype passphrase: str
    :ivar source_addresses: The source IP address and CIDR ranges of the stream.
    :vartype source_addresses: ~azure.mgmt.azuredatatransfer.models.StreamSourceAddresses
    :ivar destination_endpoints: The destination endpoints of the stream.
    :vartype destination_endpoints: list[str]
    :ivar destination_endpoint_ports: The destination endpoint ports of the stream.
    :vartype destination_endpoint_ports: list[int]
    """

    _validation = {
        "flow_id": {"readonly": True},
        "link_status": {"readonly": True},
        "linked_flow_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "connection": {"key": "connection", "type": "SelectedResource"},
        "flow_id": {"key": "flowId", "type": "str"},
        "key_vault_uri": {"key": "keyVaultUri", "type": "str"},
        "link_status": {"key": "linkStatus", "type": "str"},
        "linked_flow_id": {"key": "linkedFlowId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "storage_account_name": {"key": "storageAccountName", "type": "str"},
        "storage_account_id": {"key": "storageAccountId", "type": "str"},
        "storage_container_name": {"key": "storageContainerName", "type": "str"},
        "service_bus_queue_id": {"key": "serviceBusQueueId", "type": "str"},
        "flow_type": {"key": "flowType", "type": "str"},
        "data_type": {"key": "dataType", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "policies": {"key": "policies", "type": "[str]"},
        "schema": {"key": "schema", "type": "Schema"},
        "messaging_options": {"key": "messagingOptions", "type": "MessagingOptions"},
        "customer_managed_key_vault_uri": {"key": "customerManagedKeyVaultUri", "type": "str"},
        "stream_id": {"key": "streamId", "type": "str"},
        "stream_protocol": {"key": "streamProtocol", "type": "str"},
        "stream_latency": {"key": "streamLatency", "type": "int"},
        "passphrase": {"key": "passphrase", "type": "str"},
        "source_addresses": {"key": "sourceAddresses", "type": "StreamSourceAddresses"},
        "destination_endpoints": {"key": "destinationEndpoints", "type": "[str]"},
        "destination_endpoint_ports": {"key": "destinationEndpointPorts", "type": "[int]"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        connection: Optional["_models.SelectedResource"] = None,
        key_vault_uri: Optional[str] = None,
        status: Optional[Union[str, "_models.FlowStatus"]] = None,
        storage_account_name: Optional[str] = None,
        storage_account_id: Optional[str] = None,
        storage_container_name: Optional[str] = None,
        service_bus_queue_id: Optional[str] = None,
        flow_type: Optional[Union[str, "_models.FlowType"]] = None,
        data_type: Optional[Union[str, "_models.DataType"]] = None,
        policies: Optional[List[str]] = None,
        schema: Optional["_models.Schema"] = None,
        messaging_options: Optional["_models.MessagingOptions"] = None,
        customer_managed_key_vault_uri: Optional[str] = None,
        stream_id: Optional[str] = None,
        stream_protocol: Optional[Union[str, "_models.StreamProtocol"]] = None,
        stream_latency: Optional[int] = None,
        passphrase: Optional[str] = None,
        source_addresses: Optional["_models.StreamSourceAddresses"] = None,
        destination_endpoints: Optional[List[str]] = None,
        destination_endpoint_ports: Optional[List[int]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connection: The connection associated with this flow.
        :paramtype connection: ~azure.mgmt.azuredatatransfer.models.SelectedResource
        :keyword key_vault_uri: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
        :paramtype key_vault_uri: str
        :keyword status: Status of the current flow. Known values are: "Enabled" and "Disabled".
        :paramtype status: str or ~azure.mgmt.azuredatatransfer.models.FlowStatus
        :keyword storage_account_name: Storage Account.
        :paramtype storage_account_name: str
        :keyword storage_account_id: Storage Account ID.
        :paramtype storage_account_id: str
        :keyword storage_container_name: Storage Container Name.
        :paramtype storage_container_name: str
        :keyword service_bus_queue_id: Service Bus Queue ID.
        :paramtype service_bus_queue_id: str
        :keyword flow_type: The flow type for this flow. Known values are: "Unknown", "Complex",
         "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard",
         "StreamingVideo", "Opaque", and "MissionOpaqueXML".
        :paramtype flow_type: str or ~azure.mgmt.azuredatatransfer.models.FlowType
        :keyword data_type: Transfer Storage Blobs or Tables. Known values are: "Blob" and "Table".
        :paramtype data_type: str or ~azure.mgmt.azuredatatransfer.models.DataType
        :keyword policies: The policies for this flow.
        :paramtype policies: list[str]
        :keyword schema: The selected schema for this flow.
        :paramtype schema: ~azure.mgmt.azuredatatransfer.models.Schema
        :keyword messaging_options: The messaging options for this flow.
        :paramtype messaging_options: ~azure.mgmt.azuredatatransfer.models.MessagingOptions
        :keyword customer_managed_key_vault_uri: The URI to the customer managed key for this flow.
        :paramtype customer_managed_key_vault_uri: str
        :keyword stream_id: The flow stream identifier.
        :paramtype stream_id: str
        :keyword stream_protocol: The protocol of the stream. Known values are: "UDP", "SRT", and
         "RTP".
        :paramtype stream_protocol: str or ~azure.mgmt.azuredatatransfer.models.StreamProtocol
        :keyword stream_latency: The latency of the stream in milliseconds.
        :paramtype stream_latency: int
        :keyword passphrase: The passphrase used for SRT streams.
        :paramtype passphrase: str
        :keyword source_addresses: The source IP address and CIDR ranges of the stream.
        :paramtype source_addresses: ~azure.mgmt.azuredatatransfer.models.StreamSourceAddresses
        :keyword destination_endpoints: The destination endpoints of the stream.
        :paramtype destination_endpoints: list[str]
        :keyword destination_endpoint_ports: The destination endpoint ports of the stream.
        :paramtype destination_endpoint_ports: list[int]
        """
        super().__init__(**kwargs)
        self.connection = connection
        self.flow_id = None
        self.key_vault_uri = key_vault_uri
        self.link_status = None
        self.linked_flow_id = None
        self.status = status
        self.storage_account_name = storage_account_name
        self.storage_account_id = storage_account_id
        self.storage_container_name = storage_container_name
        self.service_bus_queue_id = service_bus_queue_id
        self.flow_type = flow_type
        self.data_type = data_type
        self.provisioning_state = None
        self.policies = policies
        self.schema = schema
        self.messaging_options = messaging_options
        self.customer_managed_key_vault_uri = customer_managed_key_vault_uri
        self.stream_id = stream_id
        self.stream_protocol = stream_protocol
        self.stream_latency = stream_latency
        self.passphrase = passphrase
        self.source_addresses = source_addresses
        self.destination_endpoints = destination_endpoints
        self.destination_endpoint_ports = destination_endpoint_ports


class FlowsListResult(_serialization.Model):
    """The flows list result.

    :ivar value: Flows array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.Flow]
    :ivar next_link: Link to next results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Flow]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.Flow"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: Flows array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.Flow]
        :keyword next_link: Link to next results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FlowsPatch(_serialization.Model):
    """The flows resource patch definition.

    :ivar identity: The managed identity of the flow resource, if configured.
    :vartype identity: ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity: The managed identity of the flow resource, if configured.
        :paramtype identity: ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentity
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.identity = identity
        self.tags = tags


class GetDestinationEndpointPortsResult(_serialization.Model):
    """List of destination endpoint ports for the flow stream.

    :ivar ports: The destination endpoint port for the flow stream.
    :vartype ports: list[int]
    """

    _attribute_map = {
        "ports": {"key": "ports", "type": "[int]"},
    }

    def __init__(self, *, ports: Optional[List[int]] = None, **kwargs: Any) -> None:
        """
        :keyword ports: The destination endpoint port for the flow stream.
        :paramtype ports: list[int]
        """
        super().__init__(**kwargs)
        self.ports = ports


class GetDestinationEndpointsResult(_serialization.Model):
    """List of destination endpoints for the flow stream.

    :ivar endpoints: The destination endpoints for the flow stream.
    :vartype endpoints: list[str]
    """

    _attribute_map = {
        "endpoints": {"key": "endpoints", "type": "[str]"},
    }

    def __init__(self, *, endpoints: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword endpoints: The destination endpoints for the flow stream.
        :paramtype endpoints: list[str]
        """
        super().__init__(**kwargs)
        self.endpoints = endpoints


class GetStreamConnectionStringResult(_serialization.Model):
    """The connection string for the specified streaming flow.

    :ivar connection_string: The connection string for the specified streaming flow.
    :vartype connection_string: str
    """

    _attribute_map = {
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword connection_string: The connection string for the specified streaming flow.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.connection_string = connection_string


class InternalMetadataProperties(_serialization.Model):
    """Internal metadata of the connection inside pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar operation_status: Operation status associated with the last patch request.
    :vartype operation_status: ~azure.mgmt.azuredatatransfer.models.OperationStatusProperties
    :ivar status_set_by: User that last set the approved status for this connection.
    :vartype status_set_by: str
    """

    _validation = {
        "status_set_by": {"readonly": True},
    }

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "operation_status": {"key": "operationStatus", "type": "OperationStatusProperties"},
        "status_set_by": {"key": "statusSetBy", "type": "str"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        operation_status: Optional["_models.OperationStatusProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword operation_status: Operation status associated with the last patch request.
        :paramtype operation_status: ~azure.mgmt.azuredatatransfer.models.OperationStatusProperties
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.operation_status = operation_status
        self.status_set_by = None


class ListApprovedSchemasRequest(_serialization.Model):
    """ListApprovedSchemasRequest.

    :ivar pipeline: The name of the pipeline to filter approved schemas.
    :vartype pipeline: str
    :ivar direction: The direction pipeline to filter approved schemas. Known values are: "Send"
     and "Receive".
    :vartype direction: str or ~azure.mgmt.azuredatatransfer.models.ListApprovedSchemasDirection
    """

    _attribute_map = {
        "pipeline": {"key": "pipeline", "type": "str"},
        "direction": {"key": "direction", "type": "str"},
    }

    def __init__(
        self,
        *,
        pipeline: Optional[str] = None,
        direction: Optional[Union[str, "_models.ListApprovedSchemasDirection"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword pipeline: The name of the pipeline to filter approved schemas.
        :paramtype pipeline: str
        :keyword direction: The direction pipeline to filter approved schemas. Known values are: "Send"
         and "Receive".
        :paramtype direction: str or ~azure.mgmt.azuredatatransfer.models.ListApprovedSchemasDirection
        """
        super().__init__(**kwargs)
        self.pipeline = pipeline
        self.direction = direction


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.azuredatatransfer.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.azuredatatransfer.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.azuredatatransfer.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class MessagingOptions(_serialization.Model):
    """The option associated with messaging flows.

    :ivar billing_tier: Billing tier for this messaging flow. Known values are: "BlobTransport",
     "Standard", and "Premium".
    :vartype billing_tier: str or ~azure.mgmt.azuredatatransfer.models.FlowBillingTier
    """

    _attribute_map = {
        "billing_tier": {"key": "billingTier", "type": "str"},
    }

    def __init__(self, *, billing_tier: Optional[Union[str, "_models.FlowBillingTier"]] = None, **kwargs: Any) -> None:
        """
        :keyword billing_tier: Billing tier for this messaging flow. Known values are: "BlobTransport",
         "Standard", and "Premium".
        :paramtype billing_tier: str or ~azure.mgmt.azuredatatransfer.models.FlowBillingTier
        """
        super().__init__(**kwargs)
        self.billing_tier = billing_tier


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.azuredatatransfer.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.azuredatatransfer.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.azuredatatransfer.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.azuredatatransfer.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationStatusProperties(_serialization.Model):
    """Operation status associated with the last patch request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: Operation status for the last patch request for this connection. Known values
     are: "Failed" and "Succeeded".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.OperationStatusEnum
    :ivar id: Operation status ID of the last patch request for this connection.
    :vartype id: str
    :ivar message: Message for the operation for the last patch request for this connection.
    :vartype message: str
    """

    _validation = {
        "status": {"readonly": True},
        "id": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status = None
        self.id = None
        self.message = None


class PendingConnection(ConnectionProperties, TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Pending connection object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar pipeline: Pipeline to use to transfer data. Required.
    :vartype pipeline: str
    :ivar direction: Direction of data movement. Known values are: "Send" and "Receive".
    :vartype direction: str or ~azure.mgmt.azuredatatransfer.models.Direction
    :ivar justification: Justification for the connection request.
    :vartype justification: str
    :ivar status: Status of the connection. Known values are: "InReview", "Approved", "Rejected",
     and "Accepted".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.Status
    :ivar status_reason: Reason for status.
    :vartype status_reason: str
    :ivar link_status: Link status of the current connection. Known values are: "Linked" and
     "Unlinked".
    :vartype link_status: str or ~azure.mgmt.azuredatatransfer.models.LinkStatus
    :ivar linked_connection_id: Resource ID of the linked connection.
    :vartype linked_connection_id: str
    :ivar flow_types: The flow types being requested for this connection.
    :vartype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
    :ivar requirement_id: Requirement ID of the connection.
    :vartype requirement_id: str
    :ivar remote_subscription_id: Subscription ID to link cloud subscriptions together.
    :vartype remote_subscription_id: str
    :ivar approver: Approver of this connection request.
    :vartype approver: str
    :ivar pin: PIN to link requests together.
    :vartype pin: str
    :ivar date_submitted: The timestamp that this connection request was submitted at.
    :vartype date_submitted: ~datetime.datetime
    :ivar primary_contact: The primary contact for this connection request.
    :vartype primary_contact: str
    :ivar secondary_contacts: The secondary contacts for this connection request.
    :vartype secondary_contacts: list[str]
    :ivar provisioning_state: Provisioning state of the connection. Known values are: "Failed",
     "Succeeded", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azuredatatransfer.models.ProvisioningState
    :ivar policies: The policies for this connection.
    :vartype policies: list[str]
    :ivar schemas: The schemas for this connection.
    :vartype schemas: list[~azure.mgmt.azuredatatransfer.models.Schema]
    :ivar schema_uris: The schema URIs for this connection.
    :vartype schema_uris: list[str]
    :ivar subscription_id: Subscription ID of the pending connection.
    :vartype subscription_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "pipeline": {"required": True},
        "status": {"readonly": True},
        "status_reason": {"readonly": True},
        "link_status": {"readonly": True},
        "linked_connection_id": {"readonly": True},
        "approver": {"readonly": True},
        "date_submitted": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "subscription_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "pipeline": {"key": "pipeline", "type": "str"},
        "direction": {"key": "direction", "type": "str"},
        "justification": {"key": "justification", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "status_reason": {"key": "statusReason", "type": "str"},
        "link_status": {"key": "linkStatus", "type": "str"},
        "linked_connection_id": {"key": "linkedConnectionId", "type": "str"},
        "flow_types": {"key": "flowTypes", "type": "[str]"},
        "requirement_id": {"key": "requirementId", "type": "str"},
        "remote_subscription_id": {"key": "remoteSubscriptionId", "type": "str"},
        "approver": {"key": "approver", "type": "str"},
        "pin": {"key": "pin", "type": "str"},
        "date_submitted": {"key": "dateSubmitted", "type": "iso-8601"},
        "primary_contact": {"key": "primaryContact", "type": "str"},
        "secondary_contacts": {"key": "secondaryContacts", "type": "[str]"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "policies": {"key": "policies", "type": "[str]"},
        "schemas": {"key": "schemas", "type": "[Schema]"},
        "schema_uris": {"key": "schemaUris", "type": "[str]"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        location: str,
        pipeline: str,
        tags: Optional[Dict[str, str]] = None,
        direction: Optional[Union[str, "_models.Direction"]] = None,
        justification: Optional[str] = None,
        flow_types: Optional[List[Union[str, "_models.FlowType"]]] = None,
        requirement_id: Optional[str] = None,
        remote_subscription_id: Optional[str] = None,
        pin: Optional[str] = None,
        primary_contact: Optional[str] = None,
        secondary_contacts: Optional[List[str]] = None,
        policies: Optional[List[str]] = None,
        schemas: Optional[List["_models.Schema"]] = None,
        schema_uris: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword pipeline: Pipeline to use to transfer data. Required.
        :paramtype pipeline: str
        :keyword direction: Direction of data movement. Known values are: "Send" and "Receive".
        :paramtype direction: str or ~azure.mgmt.azuredatatransfer.models.Direction
        :keyword justification: Justification for the connection request.
        :paramtype justification: str
        :keyword flow_types: The flow types being requested for this connection.
        :paramtype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
        :keyword requirement_id: Requirement ID of the connection.
        :paramtype requirement_id: str
        :keyword remote_subscription_id: Subscription ID to link cloud subscriptions together.
        :paramtype remote_subscription_id: str
        :keyword pin: PIN to link requests together.
        :paramtype pin: str
        :keyword primary_contact: The primary contact for this connection request.
        :paramtype primary_contact: str
        :keyword secondary_contacts: The secondary contacts for this connection request.
        :paramtype secondary_contacts: list[str]
        :keyword policies: The policies for this connection.
        :paramtype policies: list[str]
        :keyword schemas: The schemas for this connection.
        :paramtype schemas: list[~azure.mgmt.azuredatatransfer.models.Schema]
        :keyword schema_uris: The schema URIs for this connection.
        :paramtype schema_uris: list[str]
        """
        super().__init__(
            pipeline=pipeline,
            direction=direction,
            justification=justification,
            flow_types=flow_types,
            requirement_id=requirement_id,
            remote_subscription_id=remote_subscription_id,
            pin=pin,
            primary_contact=primary_contact,
            secondary_contacts=secondary_contacts,
            policies=policies,
            schemas=schemas,
            schema_uris=schema_uris,
            tags=tags,
            location=location,
            **kwargs
        )
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None
        self.tags = tags
        self.location = location
        self.subscription_id = None
        self.pipeline = pipeline
        self.direction = direction
        self.justification = justification
        self.status = None
        self.status_reason = None
        self.link_status = None
        self.linked_connection_id = None
        self.flow_types = flow_types
        self.requirement_id = requirement_id
        self.remote_subscription_id = remote_subscription_id
        self.approver = None
        self.pin = pin
        self.date_submitted = None
        self.primary_contact = primary_contact
        self.secondary_contacts = secondary_contacts
        self.provisioning_state = None
        self.policies = policies
        self.schemas = schemas
        self.schema_uris = schema_uris


class PendingConnectionsListResult(_serialization.Model):
    """The connections list result.

    :ivar value: Connections array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.PendingConnection]
    :ivar next_link: Link to next results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[PendingConnection]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PendingConnection"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Connections array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.PendingConnection]
        :keyword next_link: Link to next results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PendingFlow(FlowProperties, TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Pending flow object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar connection: The connection associated with this flow.
    :vartype connection: ~azure.mgmt.azuredatatransfer.models.SelectedResource
    :ivar flow_id: Dataflow GUID associated with this flow.
    :vartype flow_id: str
    :ivar key_vault_uri: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
    :vartype key_vault_uri: str
    :ivar link_status: Link status of the current flow. Known values are: "Linked" and "Unlinked".
    :vartype link_status: str or ~azure.mgmt.azuredatatransfer.models.LinkStatusFlow
    :ivar linked_flow_id: Resource ID of the linked flow.
    :vartype linked_flow_id: str
    :ivar status: Status of the current flow. Known values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.FlowStatus
    :ivar storage_account_name: Storage Account.
    :vartype storage_account_name: str
    :ivar storage_account_id: Storage Account ID.
    :vartype storage_account_id: str
    :ivar storage_container_name: Storage Container Name.
    :vartype storage_container_name: str
    :ivar service_bus_queue_id: Service Bus Queue ID.
    :vartype service_bus_queue_id: str
    :ivar flow_type: The flow type for this flow. Known values are: "Unknown", "Complex",
     "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard",
     "StreamingVideo", "Opaque", and "MissionOpaqueXML".
    :vartype flow_type: str or ~azure.mgmt.azuredatatransfer.models.FlowType
    :ivar data_type: Transfer Storage Blobs or Tables. Known values are: "Blob" and "Table".
    :vartype data_type: str or ~azure.mgmt.azuredatatransfer.models.DataType
    :ivar provisioning_state: Provisioning state of the flow. Known values are: "Failed",
     "Succeeded", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azuredatatransfer.models.ProvisioningState
    :ivar policies: The policies for this flow.
    :vartype policies: list[str]
    :ivar schema: The selected schema for this flow.
    :vartype schema: ~azure.mgmt.azuredatatransfer.models.Schema
    :ivar messaging_options: The messaging options for this flow.
    :vartype messaging_options: ~azure.mgmt.azuredatatransfer.models.MessagingOptions
    :ivar customer_managed_key_vault_uri: The URI to the customer managed key for this flow.
    :vartype customer_managed_key_vault_uri: str
    :ivar stream_id: The flow stream identifier.
    :vartype stream_id: str
    :ivar stream_protocol: The protocol of the stream. Known values are: "UDP", "SRT", and "RTP".
    :vartype stream_protocol: str or ~azure.mgmt.azuredatatransfer.models.StreamProtocol
    :ivar stream_latency: The latency of the stream in milliseconds.
    :vartype stream_latency: int
    :ivar passphrase: The passphrase used for SRT streams.
    :vartype passphrase: str
    :ivar source_addresses: The source IP address and CIDR ranges of the stream.
    :vartype source_addresses: ~azure.mgmt.azuredatatransfer.models.StreamSourceAddresses
    :ivar destination_endpoints: The destination endpoints of the stream.
    :vartype destination_endpoints: list[str]
    :ivar destination_endpoint_ports: The destination endpoint ports of the stream.
    :vartype destination_endpoint_ports: list[int]
    :ivar subscription_id: Subscription ID of the pending flow.
    :vartype subscription_id: str
    :ivar connection_id: Connection ID of the pending flow.
    :vartype connection_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "flow_id": {"readonly": True},
        "link_status": {"readonly": True},
        "linked_flow_id": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "subscription_id": {"readonly": True},
        "connection_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "connection": {"key": "connection", "type": "SelectedResource"},
        "flow_id": {"key": "flowId", "type": "str"},
        "key_vault_uri": {"key": "keyVaultUri", "type": "str"},
        "link_status": {"key": "linkStatus", "type": "str"},
        "linked_flow_id": {"key": "linkedFlowId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "storage_account_name": {"key": "storageAccountName", "type": "str"},
        "storage_account_id": {"key": "storageAccountId", "type": "str"},
        "storage_container_name": {"key": "storageContainerName", "type": "str"},
        "service_bus_queue_id": {"key": "serviceBusQueueId", "type": "str"},
        "flow_type": {"key": "flowType", "type": "str"},
        "data_type": {"key": "dataType", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "policies": {"key": "policies", "type": "[str]"},
        "schema": {"key": "schema", "type": "Schema"},
        "messaging_options": {"key": "messagingOptions", "type": "MessagingOptions"},
        "customer_managed_key_vault_uri": {"key": "customerManagedKeyVaultUri", "type": "str"},
        "stream_id": {"key": "streamId", "type": "str"},
        "stream_protocol": {"key": "streamProtocol", "type": "str"},
        "stream_latency": {"key": "streamLatency", "type": "int"},
        "passphrase": {"key": "passphrase", "type": "str"},
        "source_addresses": {"key": "sourceAddresses", "type": "StreamSourceAddresses"},
        "destination_endpoints": {"key": "destinationEndpoints", "type": "[str]"},
        "destination_endpoint_ports": {"key": "destinationEndpointPorts", "type": "[int]"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        connection: Optional["_models.SelectedResource"] = None,
        key_vault_uri: Optional[str] = None,
        status: Optional[Union[str, "_models.FlowStatus"]] = None,
        storage_account_name: Optional[str] = None,
        storage_account_id: Optional[str] = None,
        storage_container_name: Optional[str] = None,
        service_bus_queue_id: Optional[str] = None,
        flow_type: Optional[Union[str, "_models.FlowType"]] = None,
        data_type: Optional[Union[str, "_models.DataType"]] = None,
        policies: Optional[List[str]] = None,
        schema: Optional["_models.Schema"] = None,
        messaging_options: Optional["_models.MessagingOptions"] = None,
        customer_managed_key_vault_uri: Optional[str] = None,
        stream_id: Optional[str] = None,
        stream_protocol: Optional[Union[str, "_models.StreamProtocol"]] = None,
        stream_latency: Optional[int] = None,
        passphrase: Optional[str] = None,
        source_addresses: Optional["_models.StreamSourceAddresses"] = None,
        destination_endpoints: Optional[List[str]] = None,
        destination_endpoint_ports: Optional[List[int]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword connection: The connection associated with this flow.
        :paramtype connection: ~azure.mgmt.azuredatatransfer.models.SelectedResource
        :keyword key_vault_uri: AME, PME, or TORUS only! AKV Chain Containing SAS Token.
        :paramtype key_vault_uri: str
        :keyword status: Status of the current flow. Known values are: "Enabled" and "Disabled".
        :paramtype status: str or ~azure.mgmt.azuredatatransfer.models.FlowStatus
        :keyword storage_account_name: Storage Account.
        :paramtype storage_account_name: str
        :keyword storage_account_id: Storage Account ID.
        :paramtype storage_account_id: str
        :keyword storage_container_name: Storage Container Name.
        :paramtype storage_container_name: str
        :keyword service_bus_queue_id: Service Bus Queue ID.
        :paramtype service_bus_queue_id: str
        :keyword flow_type: The flow type for this flow. Known values are: "Unknown", "Complex",
         "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard",
         "StreamingVideo", "Opaque", and "MissionOpaqueXML".
        :paramtype flow_type: str or ~azure.mgmt.azuredatatransfer.models.FlowType
        :keyword data_type: Transfer Storage Blobs or Tables. Known values are: "Blob" and "Table".
        :paramtype data_type: str or ~azure.mgmt.azuredatatransfer.models.DataType
        :keyword policies: The policies for this flow.
        :paramtype policies: list[str]
        :keyword schema: The selected schema for this flow.
        :paramtype schema: ~azure.mgmt.azuredatatransfer.models.Schema
        :keyword messaging_options: The messaging options for this flow.
        :paramtype messaging_options: ~azure.mgmt.azuredatatransfer.models.MessagingOptions
        :keyword customer_managed_key_vault_uri: The URI to the customer managed key for this flow.
        :paramtype customer_managed_key_vault_uri: str
        :keyword stream_id: The flow stream identifier.
        :paramtype stream_id: str
        :keyword stream_protocol: The protocol of the stream. Known values are: "UDP", "SRT", and
         "RTP".
        :paramtype stream_protocol: str or ~azure.mgmt.azuredatatransfer.models.StreamProtocol
        :keyword stream_latency: The latency of the stream in milliseconds.
        :paramtype stream_latency: int
        :keyword passphrase: The passphrase used for SRT streams.
        :paramtype passphrase: str
        :keyword source_addresses: The source IP address and CIDR ranges of the stream.
        :paramtype source_addresses: ~azure.mgmt.azuredatatransfer.models.StreamSourceAddresses
        :keyword destination_endpoints: The destination endpoints of the stream.
        :paramtype destination_endpoints: list[str]
        :keyword destination_endpoint_ports: The destination endpoint ports of the stream.
        :paramtype destination_endpoint_ports: list[int]
        """
        super().__init__(
            connection=connection,
            key_vault_uri=key_vault_uri,
            status=status,
            storage_account_name=storage_account_name,
            storage_account_id=storage_account_id,
            storage_container_name=storage_container_name,
            service_bus_queue_id=service_bus_queue_id,
            flow_type=flow_type,
            data_type=data_type,
            policies=policies,
            schema=schema,
            messaging_options=messaging_options,
            customer_managed_key_vault_uri=customer_managed_key_vault_uri,
            stream_id=stream_id,
            stream_protocol=stream_protocol,
            stream_latency=stream_latency,
            passphrase=passphrase,
            source_addresses=source_addresses,
            destination_endpoints=destination_endpoints,
            destination_endpoint_ports=destination_endpoint_ports,
            tags=tags,
            location=location,
            **kwargs
        )
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None
        self.tags = tags
        self.location = location
        self.subscription_id = None
        self.connection_id = None
        self.connection = connection
        self.flow_id = None
        self.key_vault_uri = key_vault_uri
        self.link_status = None
        self.linked_flow_id = None
        self.status = status
        self.storage_account_name = storage_account_name
        self.storage_account_id = storage_account_id
        self.storage_container_name = storage_container_name
        self.service_bus_queue_id = service_bus_queue_id
        self.flow_type = flow_type
        self.data_type = data_type
        self.provisioning_state = None
        self.policies = policies
        self.schema = schema
        self.messaging_options = messaging_options
        self.customer_managed_key_vault_uri = customer_managed_key_vault_uri
        self.stream_id = stream_id
        self.stream_protocol = stream_protocol
        self.stream_latency = stream_latency
        self.passphrase = passphrase
        self.source_addresses = source_addresses
        self.destination_endpoints = destination_endpoints
        self.destination_endpoint_ports = destination_endpoint_ports


class PendingFlowsListResult(_serialization.Model):
    """The connections list result.

    :ivar value: flows array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.PendingFlow]
    :ivar next_link: Link to next results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[PendingFlow]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.PendingFlow"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: flows array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.PendingFlow]
        :keyword next_link: Link to next results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Pipeline(TrackedResource):
    """The pipeline resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of pipeline.
    :vartype properties: ~azure.mgmt.azuredatatransfer.models.PipelineProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "PipelineProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PipelineProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Properties of pipeline.
        :paramtype properties: ~azure.mgmt.azuredatatransfer.models.PipelineProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class PipelineConnection(_serialization.Model):
    """Connection body inside a pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar id: Connection id inside pipeline. Required.
    :vartype id: str
    :ivar name: Connection name inside pipeline.
    :vartype name: str
    :ivar type: Connection type inside pipeline.
    :vartype type: str
    :ivar location: Connection location inside pipeline.
    :vartype location: str
    :ivar etag: Connection etag inside pipeline.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.azuredatatransfer.models.SystemData
    :ivar properties: Connection properties inside pipeline.
    :vartype properties: ~azure.mgmt.azuredatatransfer.models.PipelineConnectionProperties
    """

    _validation = {
        "id": {"required": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"readonly": True},
        "etag": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "etag": {"key": "etag", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "PipelineConnectionProperties"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        additional_properties: Optional[Dict[str, Any]] = None,
        properties: Optional["_models.PipelineConnectionProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword id: Connection id inside pipeline. Required.
        :paramtype id: str
        :keyword properties: Connection properties inside pipeline.
        :paramtype properties: ~azure.mgmt.azuredatatransfer.models.PipelineConnectionProperties
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.name = None
        self.type = None
        self.location = None
        self.etag = None
        self.system_data = None
        self.properties = properties


class PipelineConnectionProperties(_serialization.Model):
    """Connection properties inside pipeline.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar internal_metadata: Internal metadata of the connection inside pipeline.
    :vartype internal_metadata: ~azure.mgmt.azuredatatransfer.models.InternalMetadataProperties
    """

    _attribute_map = {
        "additional_properties": {"key": "", "type": "{object}"},
        "internal_metadata": {"key": "internalMetadata", "type": "InternalMetadataProperties"},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, Any]] = None,
        internal_metadata: Optional["_models.InternalMetadataProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword internal_metadata: Internal metadata of the connection inside pipeline.
        :paramtype internal_metadata: ~azure.mgmt.azuredatatransfer.models.InternalMetadataProperties
        """
        super().__init__(**kwargs)
        self.additional_properties = additional_properties
        self.internal_metadata = internal_metadata


class PipelineProperties(_serialization.Model):
    """Properties of pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar remote_cloud: Remote cloud of the data to be transferred or received. Required.
    :vartype remote_cloud: str
    :ivar display_name: Display name of this pipeline.
    :vartype display_name: str
    :ivar connections: Connections associated with pipeline.
    :vartype connections: list[~azure.mgmt.azuredatatransfer.models.PipelineConnection]
    :ivar subscribers: Subscribers of this resource.
    :vartype subscribers: list[~azure.mgmt.azuredatatransfer.models.Subscriber]
    :ivar provisioning_state: Provisioning state of the pipeline. Known values are: "Failed",
     "Succeeded", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.azuredatatransfer.models.ProvisioningState
    :ivar policies: The policies for this pipeline.
    :vartype policies: list[str]
    :ivar flow_types: The flow types allowed for this pipeline.
    :vartype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
    """

    _validation = {
        "remote_cloud": {"required": True},
        "connections": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "remote_cloud": {"key": "remoteCloud", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connections": {"key": "connections", "type": "[PipelineConnection]"},
        "subscribers": {"key": "subscribers", "type": "[Subscriber]"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "policies": {"key": "policies", "type": "[str]"},
        "flow_types": {"key": "flowTypes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        remote_cloud: str,
        display_name: Optional[str] = None,
        subscribers: Optional[List["_models.Subscriber"]] = None,
        policies: Optional[List[str]] = None,
        flow_types: Optional[List[Union[str, "_models.FlowType"]]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword remote_cloud: Remote cloud of the data to be transferred or received. Required.
        :paramtype remote_cloud: str
        :keyword display_name: Display name of this pipeline.
        :paramtype display_name: str
        :keyword subscribers: Subscribers of this resource.
        :paramtype subscribers: list[~azure.mgmt.azuredatatransfer.models.Subscriber]
        :keyword policies: The policies for this pipeline.
        :paramtype policies: list[str]
        :keyword flow_types: The flow types allowed for this pipeline.
        :paramtype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
        """
        super().__init__(**kwargs)
        self.remote_cloud = remote_cloud
        self.display_name = display_name
        self.connections = None
        self.subscribers = subscribers
        self.provisioning_state = None
        self.policies = policies
        self.flow_types = flow_types


class PipelinesListResult(_serialization.Model):
    """The pipelines list result.

    :ivar value: Pipelines array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.Pipeline]
    :ivar next_link: Link to next results.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Pipeline]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.Pipeline"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: Pipelines array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.Pipeline]
        :keyword next_link: Link to next results.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PipelinesPatch(_serialization.Model):
    """The pipelines resource patch definition.

    :ivar properties: Properties of pipelines patch body.
    :vartype properties: ~azure.mgmt.azuredatatransfer.models.PipelinesPatchProperties
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "properties": {"key": "properties", "type": "PipelinesPatchProperties"},
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        properties: Optional["_models.PipelinesPatchProperties"] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword properties: Properties of pipelines patch body.
        :paramtype properties: ~azure.mgmt.azuredatatransfer.models.PipelinesPatchProperties
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.properties = properties
        self.tags = tags


class PipelinesPatchProperties(_serialization.Model):
    """Properties of pipelines patch body.

    :ivar connections: Connections associated with pipeline.
    :vartype connections: list[~azure.mgmt.azuredatatransfer.models.PipelineConnection]
    :ivar flow_types: The flow types allowed for this pipeline.
    :vartype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
    """

    _attribute_map = {
        "connections": {"key": "connections", "type": "[PipelineConnection]"},
        "flow_types": {"key": "flowTypes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        connections: Optional[List["_models.PipelineConnection"]] = None,
        flow_types: Optional[List[Union[str, "_models.FlowType"]]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connections: Connections associated with pipeline.
        :paramtype connections: list[~azure.mgmt.azuredatatransfer.models.PipelineConnection]
        :keyword flow_types: The flow types allowed for this pipeline.
        :paramtype flow_types: list[str or ~azure.mgmt.azuredatatransfer.models.FlowType]
        """
        super().__init__(**kwargs)
        self.connections = connections
        self.flow_types = flow_types


class Plan(_serialization.Model):
    """Plan for the resource.

    All required parameters must be populated in order to send to server.

    :ivar name: A user defined name of the 3rd Party Artifact that is being procured. Required.
    :vartype name: str
    :ivar publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic.
     Required.
    :vartype publisher: str
    :ivar product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
     the OfferID specified for the artifact at the time of Data Market onboarding. Required.
    :vartype product: str
    :ivar promotion_code: A publisher provided promotion code as provisioned in Data Market for the
     said product/artifact.
    :vartype promotion_code: str
    :ivar version: The version of the desired product/artifact.
    :vartype version: str
    """

    _validation = {
        "name": {"required": True},
        "publisher": {"required": True},
        "product": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "publisher": {"key": "publisher", "type": "str"},
        "product": {"key": "product", "type": "str"},
        "promotion_code": {"key": "promotionCode", "type": "str"},
        "version": {"key": "version", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        publisher: str,
        product: str,
        promotion_code: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: A user defined name of the 3rd Party Artifact that is being procured. Required.
        :paramtype name: str
        :keyword publisher: The publisher of the 3rd Party Artifact that is being bought. E.g.
         NewRelic. Required.
        :paramtype publisher: str
        :keyword product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to
         the OfferID specified for the artifact at the time of Data Market onboarding. Required.
        :paramtype product: str
        :keyword promotion_code: A publisher provided promotion code as provisioned in Data Market for
         the said product/artifact.
        :paramtype promotion_code: str
        :keyword version: The version of the desired product/artifact.
        :paramtype version: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.publisher = publisher
        self.product = product
        self.promotion_code = promotion_code
        self.version = version


class ResourceBody(_serialization.Model):
    """The resource to reference.

    All required parameters must be populated in order to send to server.

    :ivar id: ID of the resource. Required.
    :vartype id: str
    :ivar status_reason: Reason for resource operation.
    :vartype status_reason: str
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "status_reason": {"key": "statusReason", "type": "str"},
    }

    def __init__(
        self, *, id: str, status_reason: Optional[str] = None, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: ID of the resource. Required.
        :paramtype id: str
        :keyword status_reason: Reason for resource operation.
        :paramtype status_reason: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.status_reason = status_reason


class Schema(_serialization.Model):
    """The schema object.

    :ivar id: ID associated with this schema.
    :vartype id: str
    :ivar connection_id: Connection ID associated with this schema.
    :vartype connection_id: str
    :ivar status: Status of the schema. Known values are: "New" and "Approved".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.SchemaStatus
    :ivar name: Name of the schema.
    :vartype name: str
    :ivar content: Content of the schema.
    :vartype content: str
    :ivar direction: The direction of the schema. Known values are: "Send" and "Receive".
    :vartype direction: str or ~azure.mgmt.azuredatatransfer.models.SchemaDirection
    :ivar schema_uri: Uri containing SAS token for the zipped schema.
    :vartype schema_uri: str
    :ivar schema_type: The Schema Type. Known values are: "Xsd" and "Zip".
    :vartype schema_type: str or ~azure.mgmt.azuredatatransfer.models.SchemaType
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "content": {"key": "content", "type": "str"},
        "direction": {"key": "direction", "type": "str"},
        "schema_uri": {"key": "schemaUri", "type": "str"},
        "schema_type": {"key": "schemaType", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        connection_id: Optional[str] = None,
        status: Optional[Union[str, "_models.SchemaStatus"]] = None,
        name: Optional[str] = None,
        content: Optional[str] = None,
        direction: Optional[Union[str, "_models.SchemaDirection"]] = None,
        schema_uri: Optional[str] = None,
        schema_type: Optional[Union[str, "_models.SchemaType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: ID associated with this schema.
        :paramtype id: str
        :keyword connection_id: Connection ID associated with this schema.
        :paramtype connection_id: str
        :keyword status: Status of the schema. Known values are: "New" and "Approved".
        :paramtype status: str or ~azure.mgmt.azuredatatransfer.models.SchemaStatus
        :keyword name: Name of the schema.
        :paramtype name: str
        :keyword content: Content of the schema.
        :paramtype content: str
        :keyword direction: The direction of the schema. Known values are: "Send" and "Receive".
        :paramtype direction: str or ~azure.mgmt.azuredatatransfer.models.SchemaDirection
        :keyword schema_uri: Uri containing SAS token for the zipped schema.
        :paramtype schema_uri: str
        :keyword schema_type: The Schema Type. Known values are: "Xsd" and "Zip".
        :paramtype schema_type: str or ~azure.mgmt.azuredatatransfer.models.SchemaType
        """
        super().__init__(**kwargs)
        self.id = id
        self.connection_id = connection_id
        self.status = status
        self.name = name
        self.content = content
        self.direction = direction
        self.schema_uri = schema_uri
        self.schema_type = schema_type


class SchemasListResult(_serialization.Model):
    """The schemas list result.

    :ivar value: Schemas array.
    :vartype value: list[~azure.mgmt.azuredatatransfer.models.Schema]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Schema]"},
    }

    def __init__(self, *, value: Optional[List["_models.Schema"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: Schemas array.
        :paramtype value: list[~azure.mgmt.azuredatatransfer.models.Schema]
        """
        super().__init__(**kwargs)
        self.value = value


class SelectedResource(_serialization.Model):
    """A resource selected from ARM.

    All required parameters must be populated in order to send to server.

    :ivar name: Name of the connection.
    :vartype name: str
    :ivar id: Id of the connection. Required.
    :vartype id: str
    :ivar location: Location of the connection.
    :vartype location: str
    :ivar subscription_name: Name of the subscription with the connection.
    :vartype subscription_name: str
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "subscription_name": {"key": "subscriptionName", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        location: Optional[str] = None,
        subscription_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the connection.
        :paramtype name: str
        :keyword id: Id of the connection. Required.
        :paramtype id: str
        :keyword location: Location of the connection.
        :paramtype location: str
        :keyword subscription_name: Name of the subscription with the connection.
        :paramtype subscription_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.id = id
        self.location = location
        self.subscription_name = subscription_name


class SetDestinationEndpointPorts(_serialization.Model):
    """Set the destination endpoint ports for the specified stream ID.

    :ivar ports: The specified stream ID destination endpoint ports.
    :vartype ports: list[int]
    """

    _attribute_map = {
        "ports": {"key": "ports", "type": "[int]"},
    }

    def __init__(self, *, ports: Optional[List[int]] = None, **kwargs: Any) -> None:
        """
        :keyword ports: The specified stream ID destination endpoint ports.
        :paramtype ports: list[int]
        """
        super().__init__(**kwargs)
        self.ports = ports


class SetDestinationEndpoints(_serialization.Model):
    """Set the destination endpoints for the specified stream ID.

    :ivar endpoints: The specified stream ID destination endpoints.
    :vartype endpoints: list[str]
    """

    _attribute_map = {
        "endpoints": {"key": "endpoints", "type": "[str]"},
    }

    def __init__(self, *, endpoints: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword endpoints: The specified stream ID destination endpoints.
        :paramtype endpoints: list[str]
        """
        super().__init__(**kwargs)
        self.endpoints = endpoints


class SetSourceAddresses(_serialization.Model):
    """Set the source addresses for the specified stream ID.

    :ivar values: Source addresses.
    :vartype values: list[str]
    """

    _attribute_map = {
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(self, *, values: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword values: Source addresses.
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.values = values


class SetStreamPassphrase(_serialization.Model):
    """Set the passphrase used for SRT streams.

    :ivar value: The passphrase used for SRT streams.
    :vartype value: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The passphrase used for SRT streams.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.value = value


class StreamSourceAddresses(_serialization.Model):
    """The source IP address and CIDR ranges of the stream.

    :ivar source_addresses: A source IP address or CIDR range.
    :vartype source_addresses: list[str]
    """

    _attribute_map = {
        "source_addresses": {"key": "sourceAddresses", "type": "[str]"},
    }

    def __init__(self, *, source_addresses: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword source_addresses: A source IP address or CIDR range.
        :paramtype source_addresses: list[str]
        """
        super().__init__(**kwargs)
        self.source_addresses = source_addresses


class Subscriber(_serialization.Model):
    """Subscriber.

    :ivar email: Email of the subscriber.
    :vartype email: str
    :ivar notifications: Number specifying what notifications to receive.
    :vartype notifications: int
    """

    _attribute_map = {
        "email": {"key": "email", "type": "str"},
        "notifications": {"key": "notifications", "type": "int"},
    }

    def __init__(self, *, email: Optional[str] = None, notifications: Optional[int] = None, **kwargs: Any) -> None:
        """
        :keyword email: Email of the subscriber.
        :paramtype email: str
        :keyword notifications: Number specifying what notifications to receive.
        :paramtype notifications: int
        """
        super().__init__(**kwargs)
        self.email = email
        self.notifications = notifications


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.azuredatatransfer.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.azuredatatransfer.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.azuredatatransfer.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.azuredatatransfer.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class ValidateSchemaResult(_serialization.Model):
    """Result of the schema validation.

    :ivar status: Validation status of the schema. Known values are: "Succeeded" and "Failed".
    :vartype status: str or ~azure.mgmt.azuredatatransfer.models.ValidateSchemaStatus
    :ivar message: Message describing the schema validation.
    :vartype message: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.ValidateSchemaStatus"]] = None,
        message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Validation status of the schema. Known values are: "Succeeded" and "Failed".
        :paramtype status: str or ~azure.mgmt.azuredatatransfer.models.ValidateSchemaStatus
        :keyword message: Message describing the schema validation.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.message = message
